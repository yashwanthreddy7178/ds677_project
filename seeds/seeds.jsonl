{"seed":"public void addUserOnlinePresenceListener(RawUserOnlinePresenceListener listener) {\n        mOnlinePresenceListeners.add(listener);\n    }"} {"seed":"public synchronized void subscribe(@NonNull KreCredentials kreCredentials, @NonNull final String userPresenceChannel, @NonNull final long userId, @NonNull final KreSubscription.OnSubscriptionListener onSubscriptionListener) {\n        subscribe(kreCredentials, userPresenceChannel, userId, onSubscriptionListener, null);\n    }"} {"seed":"public synchronized <T extends Payload> void subscribe(@NonNull KreCredentials kreCredentials, @NonNull final String userPresenceChannel, @NonNull final long userId, @NonNull final KreSubscription.OnSubscriptionListener onSubscriptionListener, @Nullable T payloadObject) {\n        if (mMainListener == null) {\n            mKreSubscription.subscribe(kreCredentials, userPresenceChannel, mMainListener = new KreSubscription.OnSubscriptionListener() {\n                @Override\n                public void onSubscription() {\n                    KreOnlinePresenceHelper.addRawOnlinePresenceHelper(mKreSubscription, userId, new RawUserOnlinePresenceListener() {\n                        @Override\n                        public void onUserOnline() {\n                            for (RawUserOnlinePresenceListener listener : mOnlinePresenceListeners) {\n                                listener.onUserOnline();\n                            }\n                        }\n\n                        @Override\n                        public void onUserOffline() {\n                            for (RawUserOnlinePresenceListener listener : mOnlinePresenceListeners) {\n                                listener.onUserOffline();\n                            }\n                        }\n\n                        @Override\n                        public void onConnectionError() {\n                            for (RawUserOnlinePresenceListener listener : mOnlinePresenceListeners) {\n                                listener.onConnectionError();\n                            }\n                        }\n                    });\n                }\n\n                @Override\n                public void onUnsubscription() {\n\n                }\n\n                @Override\n                public void onError(String message) {\n                }\n            }, payloadObject);\n        }\n\n        mChildListeners.add(onSubscriptionListener);\n\n        // KreSubscription already ensures that all subscriptions share the same channel name and are using a single socket shared across all new subscriptions\n        mKreSubscription.subscribe(kreCredentials, userPresenceChannel, onSubscriptionListener, payloadObject);\n    }"} {"seed":"public synchronized void unSubscribe(@NonNull KreSubscription.OnSubscriptionListener onSubscriptionListener) {\n        mChildListeners.remove(onSubscriptionListener);\n        mKreSubscription.unSubscribe(onSubscriptionListener);\n\n        if (mChildListeners.size() == 0) { // last subscription\n            mKreSubscription.unSubscribe(mMainListener);\n        }\n    }"} {"seed":"public boolean isReady() {\n        return mKreSubscription.isConnected() && mKreSubscription.hasSubscribed();\n    }"} {"seed":"public void configureReconnection(boolean allowReconnectionsOnFailure) {\n        mKreSubscription.configureReconnectOnFailure(allowReconnectionsOnFailure);\n    }"} {"seed":"@Override\n                public void onSubscription() {\n                    KreOnlinePresenceHelper.addRawOnlinePresenceHelper(mKreSubscription, userId, new RawUserOnlinePresenceListener() {\n                        @Override\n                        public void onUserOnline() {\n                            for (RawUserOnlinePresenceListener listener : mOnlinePresenceListeners) {\n                                listener.onUserOnline();\n                            }\n                        }\n\n                        @Override\n                        public void onUserOffline() {\n                            for (RawUserOnlinePresenceListener listener : mOnlinePresenceListeners) {\n                                listener.onUserOffline();\n                            }\n                        }\n\n                        @Override\n                        public void onConnectionError() {\n                            for (RawUserOnlinePresenceListener listener : mOnlinePresenceListeners) {\n                                listener.onConnectionError();\n                            }\n                        }\n                    });\n                }"} {"seed":"@Override\n                public void onUnsubscription() {\n\n                }"} {"seed":"@Override\n                public void onError(String message) {\n                }"} {"seed":"@Override\n                        public void onUserOnline() {\n                            for (RawUserOnlinePresenceListener listener : mOnlinePresenceListeners) {\n                                listener.onUserOnline();\n                            }\n                        }"} {"seed":"@Override\n                        public void onUserOffline() {\n                            for (RawUserOnlinePresenceListener listener : mOnlinePresenceListeners) {\n                                listener.onUserOffline();\n                            }\n                        }"} {"seed":"@Override\n                        public void onConnectionError() {\n                            for (RawUserOnlinePresenceListener listener : mOnlinePresenceListeners) {\n                                listener.onConnectionError();\n                            }\n                        }"} {"seed":"public static void main(String[] args)\n    {\n        GUI gui = new GUI();\n    }"} {"seed":"private void makeGUI()\n    {\n        mainFrame = new JFrame();\n        mainFrame.setPreferredSize(new Dimension(750,400));\n        aw = new AccountWindow();\n        mainFrame.add(aw);\n        mainFrame.setVisible(true);\n        mainFrame.pack();\n    }"} {"seed":"/**\n\t * \n\t */\n@Override\n\tpublic int count(Map<String, FilterMeta> filterBy) {\n\t\t\n\t\tQueryMeta.Builder<Comment> builder = LazyModelUtil.queryBuilder(Comment.class, filterBy);\n\t\t\n\t\tbuilder.filterMeta(\"discussion\", this.discussion, QueryFilterMeta.MatchMode.EQUALS);\n\t\t\n\t\treturn this.genericService.countEntities2(builder.build()).getDataObject().intValue();\n\t}"} {"seed":"/**\n\t * \n\t */\n@Override\n\tpublic List<Comment> load(int first, int pageSize, Map<String, SortMeta> sortBy, Map<String, FilterMeta> filterBy) {\n\t\tlogger.debug(\"first is \" + first + \", pageSize is \" + pageSize);\n\t\t\n\t\tQueryMeta.Builder<Comment> builder = LazyModelUtil.queryBuilder(Comment.class, sortBy, filterBy);\n\t\t\n\t\tbuilder.filterMeta(\"discussion\", this.discussion, QueryFilterMeta.MatchMode.EQUALS);\n\t\tbuilder.sortMeta(\"id\", SortOrder.ASCENDING, false);\n\t\t\n\t\treturn this.genericService.getEntities2(builder.startIndex(first).\n\t\t\t\tmaxResult(pageSize).build()).getDataObject();\n\t}"} {"seed":"@Override\n\tpublic View onCreateView(LayoutInflater inflater, ViewGroup container,\n\t\t\tBundle savedInstanceState) {\n\t\tView view = inflater.inflate(R.layout.fragment_resgister1, container,\n\t\t\t\tfalse);\n\t\tphoneEt = (MyEditText) view.findViewById(R.id.phone_edit);\n\t\tcheckNumEt = (MyEditText) view.findViewById(R.id.checknum_edit);\n\t\tcheckNumBtn = (MyTextButton) view.findViewById(R.id.checknum_button);\n\t\tnextBtn = (MyTextButton) view.findViewById(R.id.next_button);\n\t\tnextBtn.setEnabled(false);\n\t\tcheckNumBtn.setEnabled(false);\n\t\tphoneEt.addTextChangedListener(this);\n\t\tcheckNumEt.addTextChangedListener(this);\n\t\tcheckNumBtn.setOnClickListener(this);\n\t\tnextBtn.setOnClickListener(this);\n\t\tloginBtn = (TextView)view.findViewById(R.id.login_button);\n\t\tloginBtn.setOnClickListener(this);\n\t\ttime = new TimeCount(60000, 1000);\n\t\treturn view;\n\t}"} {"seed":"@Override\n\tpublic void onResume() {\n\t\t// TODO Auto-generated method stub\n\t\tsuper.onResume();\n\t\tMobclickAgent.onPageStart(\"获取验�"} {"seed":"\");\n\t}\n\n\n\t@Override\n\tpublic void onPause() {\n\t\t// TODO Auto-generated method stub\n\t\tsuper.onPause();\n\t\tMobclickAgent.onPageEnd(\"�"} {"seed":"�验证码\");\n\t}\n\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\tswitch (v.getId()) {\n\t\tcase R.id.checknum_button:\n\t\t\t\n\t\t\tif (!isMobileNO(phoneEt.getText().toString())) {\n\t\t\t\tGFToast.show(getActivity().getApplicationContext(),\"不是有效的手机号码\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tif(!UILApplication.checkNetworkState()){\n\t\t\t\tGFToast.show(getActivity().getApplicationContext(),\"没有有效的网络连接！\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tnew Thread(new Runnable() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\tString result = HttpUtil.checkUserIsExist(phoneEt\n\t\t\t\t\t\t\t\t.getText().toString());\n\t\t\t\t\t\tMessage msg = handler.obtainMessage();\n\t\t\t\t\t\tmsg.what = 0;\n\t\t\t\t\t\tmsg.obj = result;\n\t\t\t\t\t\tmsg.sendToTarget();\n\t\t\t\t\t\t\n\t\t\t\t\t} catch (Throwable e) {\n\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}).start();\t\n\t\t\tbreak;\n\t\tcase R.id.next_button:\n\t\t\tString codes = readCode();\n\t\t\tif (codes.contains(checkNumEt.getText().toString())) {\n\n\t\t\t\tLoginActivity activity = (LoginActivity) getActivity();\n\t\t\t\tactivity.setPhone(phoneEt.getText().toString());\n\t\t\t\tactivity.selectFragment(2);\n\t\t\t} else {\n\t\t\t\tToast.makeText(getActivity(), \"验证码错误\", Toast.LENGTH_SHORT)\n\t\t\t\t\t\t.show();\n\t\t\t}\n\n\t\t\tbreak;\n\t\tcase R.id.login_button:\n\t\t\tLoginActivity activity = (LoginActivity) getActivity();"} {"seed":"activity.selectFragment(1);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t@Override\n\tpublic void beforeTextChanged(CharSequence s, int start,"} {"seed":"t count,\n\t\t\tint after) {\n\t\t// TODO Auto-generated method stub\n\n\t}\n\n\t@Override\n\tpublic void onTextChanged(CharSequence s, int star"} {"seed":"int before, int count) {\n\t\t// TODO Auto-generated method stub\n\n\t}\n\n\t@Override\n\tpublic void afterTextChanged(Editable s) {\n\t\tif (phoneEt.getText().length() > 10){//&&(smsCheckNum==null || smsCheckNum.isEmpty())) {\n\t\t\tcheckNumBtn.setEnabled(true);\n\t\t} else {\n\t\t\tcheckNumBtn.setEnabled(false);\n\t\t}\n\t\tif (phoneEt.getText().length() > 10&&checkNumEt.getText().length() > 3){\n\t\t\tnextB"} {"seed":"setEnabled(true);\n\t\t} else {\n\t\t\tnextBtn.setEnabled(false);\n\t\t}\n\t}\n\n\tpublic boolean isMobileNO(String mobiles) {\n\n\t\tPattern p = Pattern\n\t\t\t\t.compile(\"^((13[0-9])|(14[0-9])|(17[0-9])|(15[0-9])|(18[0-9]))\\\\d"} {"seed":"\");\n\n\t\tMatcher m = p.matcher(mobiles);\n\n\t\treturn m.matches();\n\t}\n\t\n\tpublic boolean isNumeric(String str){    \n\t\tPattern pattern = Pattern.compile(\"[0-9]*\");    \n\t\t\n\t\tMatcher isNum = pattern.matcher(str);   \n\t\t\n\t\tif( !isNum.matc"} {"seed":"{   \n\t\t\n\t\t    return false;    \n\t\t}    \n\t\treturn true;    \n\t}   \n\t\n\tpublic void saveCode(String code){\n\t\tSharedPreferences checkInfo = getActivity().getSharedPreferences(\"CodeInfo\", 0);\n\t\tString codes = checkInfo.getString(\"code\", \"\");\n\t\tif(codes.length()==0){\n\t\t\tcodes = code;\n\t\t}\n\t\telse{\n\t\t\tif(codes.length()>=14){\n\t\t\t\tcodes = codes.substring(5);\n\t\t\t}\n\t\t\tcodes = codes+\"&"} {"seed":"ode;\n\t\t}\n\t\tcheckInfo.edit().putString(\"code\", codes).commit();\n\t}\n\n\tpublic String readCode(){\n\t\tSharedPreferences deviceInfo = getActivity().getSharedPreferences(\"CodeInfo\", 0);\n        Str"} {"seed":"checkNumBtn.setText(\"获取验证码\");\n\t\t\tcheckNumBtn.setEnabled(true);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void handleMessage(Message msg, Object object) {\n\t\tswitch (msg.what) {\n\t\t// 检查是否注册返回\n\t\tcase 0:\n\t\t\tif (msg.obj != null && msg.obj.toString().trim().equals(\"true\")) {\n\t\t\t\tcheckNumBtn.setEnabled(false);\n\t\t\t\ttime.start();\n\t\t\t\tnew Thread(new Runnable() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n//\t\t\t\t\t\tString jsonString = \"8888\";\n\t\t\t\t\t\tString jsonString= HttpUtil.getSmsCheckNum(phoneEt.getText().toString(),UILApplication.sendcount);\n\t\t\t\t\t\tUILApplication.sendcount++;\n\t\t\t\t\t\tMessage numMsg = handler.obtainMessage();\n\t\t\t\t\t\tif(jsonString!=null){\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(isNumeric(jsonString)){\n\t\t\t\t\t\t\t\tnumMsg.what = 1;\n\t\t\t\t\t\t\t\tnumMsg.obj = jsonString;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\tnumMsg.what = 2;\n\t\t\t\t\t\t\t\tnumMsg.obj = jsonString;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tnumMsg.what = 2;\n\t\t\t\t\t\t\tnumMsg.obj = \"验证码发送失败\";\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t\tnumMsg.sendToTarget();\n\t\t\t\t\t}\n\t\t\t\t}).start();\n\t\t\t} else {\t\t\t\n\t\t\t\tGFToast.show(getActivity().getApplicationContext(),\"您的手机号码已经注册\");\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tif (msg.obj != null) {\n\t\t\t\tGFToast.show(getActivity().getApplicationContext(),\"验证码已经发出请注意接收短信。\");\n\t\t\t\tString code = msg.obj.toString().trim();\n\t\t\t\tsaveCode(code);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tGFToast.show(getActivity().getApplica"} {"seed":"DownInterval) {\n\t\t\tsuper(millisInFuture, countDownInterval);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTick(long millisUntilFinished) {\n\t\t\tcheckNumBtn.setEnabled(fals"} {"seed":"checkNumBtn.setText(millisUntilFinished / 1000 + \"秒后获取\");\n\t\t}\n\n\t\t@Override\n\t\tpublic void onFini"} {"seed":"return;\n\t\t\t}\n\t\t\t\n\t\t\tnew Thread(new Runnable() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\tString result = HttpUtil.checkUserIsExist(phoneEt\n\t\t\t\t\t\t\t\t.getText().toString());\n\t\t\t\t\t\tMessage msg = handler.obtainMessage();\n\t\t\t\t\t\tmsg.what = 0;\n\t\t\t\t\t\tmsg.obj = result;\n\t\t\t\t\t\tmsg.sendToTarget();\n\t\t\t\t\t\t\n\t\t\t\t\t} catch (Throwable"} {"seed":"\"true\")) {\n\t\t\t\tcheckNumBtn.setEnabled(false);\n\t\t\t\ttime.start();\n\t\t\t\tnew Thread(new Runnable() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n//\t\t\t\t\t\tString jsonString = \"8888\";\n\t\t\t\t\t\tString jsonString= HttpUtil.getSmsCheckNum(phoneEt.getText().toString(),UILApplication.sendcount);\n\t\t\t\t\t\tUILApplication.sendcount++;\n\t\t\t\t\t\tMessage numMsg = handler.obtainMessage();\n\t\t\t\t\t\tif(jsonString!=null){\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(isNumeric(jsonString)){\n\t\t\t\t\t\t\t\tnumMsg.what = 1;\n\t\t\t\t\t\t\t\tnumMsg.obj = jsonString;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\tnumMsg.what = 2;\n\t\t\t\t\t\t\t\tnumMsg.obj = jsonString;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{"} {"seed":"/**\n\t * Get the electromagnet field adaptor.\n\t * @return the electromagnet field adaptor\n\t */\nprotected ElectromagnetFieldAdaptor getFieldAdaptor() {\n\t\treturn FIELD_ADAPTOR;\n\t}"} {"seed":"/**\n\t * Override optics exporting to do nothing since the design corrector values are always zero.\n\t * @param exporter the optics exporter to use for exporting this node's optics changes\n\t */\npublic void exportOpticsChanges( final OpticsExporter exporter ) {}"} {"seed":"/**\n\t * Doma設定\n\nメータ名\n\t * @param type\n\t *            パラメータタイプ\n\t * @param value\n\t *            パラメータ�"} {"seed":"/**\n\t * Doma2のSQLクラス�\nionFunctions(),\n\t// ConfigSupport.defaultClassHelper),\n\t// SqlLogType.FORMATTED);\n\t//\n\t// return builder.build(node, sql -> sql);\n\t// }\n\n\tpublic PreparedSql execute() {\n\t\tSqlParser parser = new SqlParser(sqlFile);\n\t\tSqlNode node = parser.parse();\n\t\tSqlNode transformedSqlNode = config.getDialect().transformSelectSqlNode(node, options);\n\t\treturn buildSql((evaluator, expander) -> {\n\t\t\tNodePreparedSqlBuilder sqlBuilder = new NodePreparedSqlBuilder(config, SqlK"} {"seed":"/**\n\t * Doma2のSQLクラス�\n.SELECT, null, evaluator,\n\t\t\t\t\tSqlLogType.FORMATTED, expander);\n\t\t\treturn sqlBuilder.build(transformedSqlNode, this::comment);\n\t\t});\n\t}\n\n\tprotected PreparedSql buildSql(\n\t\t\tBiFunction<ExpressionEvaluator, Function<ExpandNode, List<String>>, PreparedSql> sqlBuilder) {\n\t\tExpressionEvaluator evaluator = new ExpressionEvaluator(variableValues,"} {"seed":"/**\n\t * Doma2のSQLクラス�\n\t\tconfig.getDialect().getExpressionFunctions(), config.getClassHelper());\n\t\treturn sqlBuilder.apply(evaluator, this::expandColumns);\n\t}\n\n\tprotected List<String> expandColumns(ExpandNode node) {\n\t\tif (entityType == null) {\n\t\t\tSqlLocation location = node.getLocation();\n\t\t\tthrow new JdbcException(Message.DOMA2144, location.getSql(), location.getLineNumber(),\n\t\t\t\t\tlocation.getPosition());\n\t\t}\n\t\tNaming naming = config.getNaming();\n\t\tDialect dialect = config.getDialect();\n\t\treturn entity"} {"seed":"/**\n\t * Doma2のSQLクラス�\ne.getEntityPropertyTypes().stream()\n\t\t\t\t.map(p -> p.getColumnName(naming::apply, dialect::applyQuote)).collect(Collectors.toList());\n\t}\n\n\tprotected String comment(String sql) {\n\t\t// FIXME callerClassName callerMethodN"} {"seed":"�temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。\n\n提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。\n\n */\npublic class LeetCode739 {\n\n    public int[] dailyTemperatures(int[] T){\n        if (T==null) return null;\n        int len = T.length;\n        int[] ans = new int[len];\n        //存放元素索引，而不是元素\n        Stack<Integer> stack = new Stack<>();\n\n        for"} {"seed":"i=len-1; i>=0; i--){\n            while (!stack.isEmpty() && T[stack.peek()] <= T[i]){\n                stack.pop();\n            }\n            //得到索引间距\n            ans[i] = stack.empty() ? 0 : (stack.peek()-i);\n            //将索引入栈而不是元素\n            stack.push(i);\n        }\n        return ans;\n    }\n\n    public int[] dailyTemperatures2(int[] T){\n        int len = T.length;\n        int[] ans = ne"} {"seed":"@Override\n\tpublic void renderTileEntityAt(TileEntityWindmillAdvanced tile, double x, double y, double z, float f, int destroyStage)\n\t{\n\t\tif (!tile.getWorld().isBlockLoaded(tile.getPos(), false))\n\t\t\treturn;\n\t\tfinal BlockRendererDispatcher blockRenderer = Minecraft.getMinecraft().getBlockRendererDispatcher();\n\t\tBlockPos blockPos = tile.getPos();\n\t\tIBlockState state = getWorld().getBlockState(blockPos);\n\t\tstate = state.getBlock().getActualState(state, getWorld(), blockPos);\n//\t\tIBakedModel model = blockRenderer.getModelFromBlockState(state, getWorld(), blockPos);\n\t\tIBakedModel model = blockRenderer.getBlockModelShapes().getModelForState(state);\n\t\tif(state instanceof IExtendedBlockState)\n\t\t\tstate = ((IExtendedBlockState)state).withProperty(OBJProperty.instance, new OBJState(Lists.newArrayList(OBJModel.Group.ALL), true));\n\n\t\tTessellator tessellator = Tessellator.getInstance();\n\t\tWorldRenderer worldRenderer = tessellator.getWorldRenderer();\n\t\tbindTexture(TextureMap.locationBlocksTexture);\n\t\tRenderHelper.disableStandardItemLighting();\n\t\tGlStateManager.blendFunc(770, 771);\n\t\tGlStateManager.enableBlend();\n\t\tGlStateManager.disableCull();\n\t\tif(Minecraft.isAmbientOcclusionEnabled())\n\t\t\tGlStateManager.shadeModel(7425);\n\t\telse\n\t\t\tGlStateManager.shadeModel(7424);\n\t\tGlStateManager.pushMatrix();\n\t\tGlStateManager.translate(x+.5, y+.5, z+.5);\n\t\tGlStateManager.rotate(tile.facing==EnumFacing.SOUTH?0: tile.facing==EnumFacing.WEST?-90: tile.facing==EnumFacing.EAST?90: 180, 0, 1, 0);\n\n\t\tfloat rot = 360*(tile.rotation+(!tile.canTurn||tile.rotation==0?0:f*tile.prevRotation));\n\t\tGlStateManager.rotate(rot, 0,0,1);\n\t\t\n\t\tworldRenderer.begin(GL11.GL_QUADS, DefaultVertexFormats.BLOCK);\n\t\tworldRenderer.setTranslation( -.5-blockPos.getX(), -.5- blockPos.getY(),  -.5-blockPos.getZ());\n\t\tworldRenderer.color(255, 255, 255, 255);\n\t\tif(model instanceof ISmartBlockModel)\n\t\t\tmodel = ((ISmartBlockModel) model).handleBlockState(state);\n\t\tblockRenderer.getBlockModelRenderer().renderModel(tile.getWorld(), model, state, tile.getPos(), worldRenderer);\n\t\tworldRenderer.setTranslation(0.0D, 0.0D, 0.0D);\n\t\ttessellator.draw();\n\t\tGlStateManager.popMatrix();\n\t\tRenderHelper.enableStandardItemLighting();\n\t}"} {"seed":"@Test\n  public void async() throws Exception {\n    new MockUnit(AsyncDatastore.class)\n        .run(unit -> {\n          AsyncDatastore async = new DatastoreImpl(unit.get(AsyncDatastore.class))\n              .async();\n          assertEquals(unit.get(AsyncDatastore.class), async);\n        });\n  }"} {"seed":"@SuppressWarnings(\"unchecked\")\n  @Test\n  public void get() throws Exception {\n    String gid = \"id\";\n    Object entity = new Object() {\n      String id = gid;\n\n      @Override\n      public String toString() {\n        return id;\n      }\n    };\n    new MockUnit(AsyncDatastore.class)\n        .expect(unit -> {\n          AsyncDatastore store = unit.get(AsyncDatastore.class);\n          expect(store.get(entity.getClass(), gid)).andReturn(just(entity));\n        })\n        .run(unit -> {\n          Object result = new DatastoreImpl(unit.get(AsyncDatastore.class))\n              .get(entity.getClass(), gid);\n          assertEquals(entity, result);\n        });\n  }"} {"seed":"@Test(expected = DocumentDoesNotExistException.class)\n  public void getNotFound() throws Exception {\n    String gid = \"id\";\n    Object entity = new Object() {\n      String id = gid;\n\n      @Override\n      public String toString() {\n        return id;\n      }\n    };\n    new MockUnit(AsyncDatastore.class)\n        .expect(unit -> {\n          AsyncDatastore store = unit.get(AsyncDatastore.class);\n          expect(store.get(entity.getClass(), gid)).andReturn(Observable.empty());\n        })\n        .run(unit -> {\n          new DatastoreImpl(unit.get(AsyncDatastore.class))\n              .get(entity.getClass(), gid);\n        });\n  }"} {"seed":"@SuppressWarnings(\"unchecked\")\n  @Test\n  public void getFromReplica() throws Exception {\n    String gid = \"id\";\n    Object entity = new Object() {\n      String id = gid;\n\n      @Override\n      public String toString() {\n        return id;\n      }\n    };\n    new MockUnit(AsyncDatastore.class)\n        .expect(unit -> {\n          AsyncDatastore store = unit.get(AsyncDatastore.class);\n          expect(store.getFromReplica(entity.getClass(), gid, ReplicaMode.FIRST))\n              .andReturn(just(entity));\n        })\n        .run(unit -> {\n          Object result = new DatastoreImpl(unit.get(AsyncDatastore.class))\n              .getFromReplica(entity.getClass(), gid, ReplicaMode.FIRST);\n          assertEquals(entity, result);\n        });\n  }"} {"seed":"@Test(expected = DocumentDoesNotExistException.class)\n  public void getFromReplicaNotFound() throws Exception {\n    String gid = \"id\";\n    Object entity = new Object() {\n      String id = gid;\n\n      @Override\n      public String toString() {\n        return id;\n      }\n    };\n    new MockUnit(AsyncDatastore.class)\n        .expect(unit -> {\n          AsyncDatastore store = unit.get(AsyncDatastore.class);\n          expect(store.getFromReplica(entity.getClass(), gid, ReplicaMode.FIRST))\n              .andReturn(Observable.empty());\n        })\n        .run(unit -> {\n          new DatastoreImpl(unit.get(AsyncDatastore.class))\n              .getFromReplica(entity.getClass(), gid, ReplicaMode.FIRST);\n        });\n  }"} {"seed":"@SuppressWarnings(\"unchecked\")\n  @Test\n  public void getAndLock() throws Exception {\n    String gid = \"id\";\n    Object entity = new Object() {\n      String id = gid;\n\n      @Override\n      public String toString() {\n        return id;\n      }\n    };\n    new MockUnit(AsyncDatastore.class)\n        .expect(unit -> {\n          AsyncDatastore store = unit.get(AsyncDatastore.class);\n          expect(store.getAndLock(entity.getClass(), gid, 1))\n              .andReturn(just(entity));\n        })\n        .run(unit -> {\n          Object result = new DatastoreImpl(unit.get(AsyncDatastore.class))\n              .getAndLock(entity.getClass(), gid, 1);\n          assertEquals(entity, result);\n        });\n  }"} {"seed":"@Test(expected = DocumentDoesNotExistException.class)\n  public void getAndLockNotFound() throws Exception {\n    String gid = \"id\";\n    Object entity = new Object() {\n      String id = gid;\n\n      @Override\n      public String toString() {\n        return id;\n      }\n    };\n    new MockUnit(AsyncDatastore.class)\n        .expect(unit -> {\n          AsyncDatastore store = unit.get(AsyncDatastore.class);\n          expect(store.getAndLock(entity.getClass(), gid, 1))\n              .andReturn(Observable.empty());\n        })\n        .run(unit -> {\n          new DatastoreImpl(unit.get(AsyncDatastore.class))\n              .getAndLock(entity.getClass(), gid, 1);\n        });\n  }"} {"seed":"@SuppressWarnings(\"unchecked\")\n  @Test\n  public void getAndTouch() throws Exception {\n    String gid = \"id\";\n    Object entity = new Object() {\n      String id = gid;\n\n      @Override\n      public String toString() {\n        return id;\n      }\n    };\n    new MockUnit(AsyncDatastore.class)\n        .expect(unit -> {\n          AsyncDatastore store = unit.get(AsyncDatastore.class);\n          expect(store.getAndTouch(entity.getClass(), gid, 1))\n              .andReturn(just(entity));\n        })\n        .run(unit -> {\n          Object result = new DatastoreImpl(unit.get(AsyncDatastore.class))\n              .getAndTouch(entity.getClass(), gid, 1);\n          assertEquals(entity, result);\n        });\n  }"} {"seed":"@Test(expected = DocumentDoesNotExistException.class)\n  public void getAndTouchNotFound() throws Exception {\n    String gid = \"id\";\n    Object entity = new Object() {\n      String id = gid;\n\n      @Override\n      public String toString() {\n        return id;\n      }\n    };\n    new MockUnit(AsyncDatastore.class)\n        .expect(unit -> {\n          AsyncDatastore store = unit.get(AsyncDatastore.class);\n          expect(store.getAndTouch(entity.getClass(), gid, 1))\n              .andReturn(Observable.empty());\n        })\n        .run(unit -> {\n          new DatastoreImpl(unit.get(AsyncDatastore.class))\n              .getAndTouch(entity.getClass(), gid, 1);\n        });\n  }"} {"seed":"@SuppressWarnings(\"unchecked\")\n  @Test\n  public void exists() throws Exception {\n    String gid = \"id\";\n    Object entity = new Object() {\n      String id = gid;\n\n      @Override\n      public String toString() {\n        return id;\n      }\n    };\n    new MockUnit(AsyncDatastore.class)\n        .expect(unit -> {\n          AsyncDatastore store = unit.get(AsyncDatastore.class);\n          expect(store.exists(entity.getClass(), gid))\n              .andReturn(just(true));\n        })\n        .run(unit -> {\n          Object result = new DatastoreImpl(unit.get(AsyncDatastore.class))\n              .exists(entity.getClass(), gid);\n          assertEquals(true, result);\n        });\n  }"} {"seed":"@SuppressWarnings(\"unchecked\")\n  @Test\n  public void query() throws Exception {\n    String gid = \"id\";\n    Object entity = new Object() {\n      String id = gid;\n\n      @Override\n      public String toString() {\n        return id;\n      }\n    };\n\n    new MockUnit(AsyncDatastore.class, N1qlQuery.class)\n        .expect(unit -> {\n          AsyncDatastore store = unit.get(AsyncDatastore.class);\n          expect(store.query(unit.get(N1qlQuery.class)))\n              .andReturn(just(Arrays.asList(entity)));\n        })\n        .run(unit -> {\n          List<Object> result = new DatastoreImpl(unit.get(AsyncDatastore.class))\n              .query(unit.get(N1qlQuery.class));\n          assertEquals(Arrays.asList(entity), result);\n        });\n  }"} {"seed":"@SuppressWarnings(\"unchecked\")\n  @Test\n  public void queryStmt() throws Exception {\n    String gid = \"id\";\n    Object entity = new Object() {\n      String id = gid;\n\n      @Override\n      public String toString() {\n        return id;\n      }\n    };\n\n    new MockUnit(AsyncDatastore.class, Statement.class)\n        .expect(unit -> {\n          AsyncDatastore store = unit.get(AsyncDatastore.class);\n          expect(store.query(unit.get(Statement.class)))\n              .andReturn(just(Arrays.asList(entity)));\n        })\n        .run(unit -> {\n          List<Object> result = new DatastoreImpl(unit.get(AsyncDatastore.class))\n              .query(unit.get(Statement.class));\n          assertEquals(Arrays.asList(entity), result);\n        });\n  }"} {"seed":"@SuppressWarnings(\"unchecked\")\n  @Test\n  public void viewQuery() throws Exception {\n    String gid = \"id\";\n    Object entity = new Object() {\n      String id = gid;\n\n      @Override\n      public String toString() {\n        return id;\n      }\n    };\n\n    new MockUnit(AsyncDatastore.class, ViewQuery.class)\n        .expect(unit -> {\n          AsyncDatastore store = unit.get(AsyncDatastore.class);\n          expect(store.query(unit.get(ViewQuery.class)))\n              .andReturn(just(\n                  new AsyncDatastore.AsyncViewQueryResult<Object>(10,\n                      just(Arrays.asList(entity)))));\n        })\n        .run(unit -> {\n          ViewQueryResult<Object> result = new DatastoreImpl(unit.get(AsyncDatastore.class))\n              .query(unit.get(ViewQuery.class));\n          assertEquals(Arrays.asList(entity), result.getRows());\n          assertEquals(10, result.getTotalRows());\n        });\n  }"} {"seed":"@SuppressWarnings(\"unchecked\")\n  @Test\n  public void upsert() throws Exception {\n    String gid = \"id\";\n    Object entity = new Object() {\n      String id = gid;\n\n      @Override\n      public String toString() {\n        return id;\n      }\n    };\n    new MockUnit(AsyncDatastore.class, AsyncCommand.class)\n        .expect(unit -> {\n          AsyncCommand cmd = unit.get(AsyncCommand.class);\n          expect(cmd.execute(entity, PersistTo.NONE, ReplicateTo.NONE)).andReturn(just(entity));\n\n          AsyncDatastore store = unit.get(AsyncDatastore.class);\n          expect(store.upsert()).andReturn(cmd);\n        })\n        .run(unit -> {\n          Object result = new DatastoreImpl(unit.get(AsyncDatastore.class))\n              .upsert(entity);\n          assertEquals(entity, result);\n        });\n  }"} {"seed":"@SuppressWarnings(\"unchecked\")\n  @Test\n  public void upsertWithReplicate() throws Exception {\n    String gid = \"id\";\n    Object entity = new Object() {\n      String id = gid;\n\n      @Override\n      public String toString() {\n        return id;\n      }\n    };\n    new MockUnit(AsyncDatastore.class, AsyncCommand.class)\n        .expect(unit -> {\n          AsyncCommand cmd = unit.get(AsyncCommand.class);\n          expect(cmd.execute(entity, PersistTo.NONE, ReplicateTo.ONE)).andReturn(just(entity));\n\n          AsyncDatastore store = unit.get(AsyncDatastore.class);\n          expect(store.upsert()).andReturn(cmd);\n        })\n        .run(unit -> {\n          Object result = new DatastoreImpl(unit.get(AsyncDatastore.class))\n              .upsert()\n              .execute(entity, ReplicateTo.ONE);\n          assertEquals(entity, result);\n        });\n  }"} {"seed":"@SuppressWarnings(\"unchecked\")\n  @Test\n  public void insert() throws Exception {\n    String gid = \"id\";\n    Object entity = new Object() {\n      String id = gid;\n\n      @Override\n      public String toString() {\n        return id;\n      }\n    };\n    new MockUnit(AsyncDatastore.class, AsyncCommand.class)\n        .expect(unit -> {\n          AsyncCommand cmd = unit.get(AsyncCommand.class);\n          expect(cmd.execute(entity, PersistTo.NONE, ReplicateTo.NONE)).andReturn(just(entity));\n\n          AsyncDatastore store = unit.get(AsyncDatastore.class);\n          expect(store.insert()).andReturn(cmd);\n        })\n        .run(unit -> {\n          Object result = new DatastoreImpl(unit.get(AsyncDatastore.class))\n              .insert(entity);\n          assertEquals(entity, result);\n        });\n  }"} {"seed":"@SuppressWarnings(\"unchecked\")\n  @Test\n  public void replace() throws Exception {\n    String gid = \"id\";\n    Object entity = new Object() {\n      String id = gid;\n\n      @Override\n      public String toString() {\n        return id;\n      }\n    };\n    new MockUnit(AsyncDatastore.class, AsyncCommand.class)\n        .expect(unit -> {\n          AsyncCommand cmd = unit.get(AsyncCommand.class);\n          expect(cmd.execute(entity, PersistTo.NONE, ReplicateTo.NONE)).andReturn(just(entity));\n\n          AsyncDatastore store = unit.get(AsyncDatastore.class);\n          expect(store.replace()).andReturn(cmd);\n        })\n        .run(unit -> {\n          Object result = new DatastoreImpl(unit.get(AsyncDatastore.class))\n              .replace(entity);\n          assertEquals(entity, result);\n        });\n  }"} {"seed":"@SuppressWarnings(\"unchecked\")\n  @Test\n  public void remove() throws Exception {\n    String gid = \"id\";\n    Object entity = new Object() {\n      String id = gid;\n\n      @Override\n      public String toString() {\n        return id;\n      }\n    };\n    new MockUnit(AsyncDatastore.class, AsyncDatastore.AsyncRemoveCommand.class)\n        .expect(unit -> {\n          AsyncDatastore.AsyncRemoveCommand cmd = unit.get(AsyncDatastore.AsyncRemoveCommand.class);\n          expect(cmd.execute(entity, PersistTo.NONE, ReplicateTo.NONE)).andReturn(just(1L));\n\n          AsyncDatastore store = unit.get(AsyncDatastore.class);\n          expect(store.remove()).andReturn(cmd);\n        })\n        .run(unit -> {\n          long result = new DatastoreImpl(unit.get(AsyncDatastore.class))\n              .remove(entity);\n          assertEquals(1L, result);\n        });\n  }"} {"seed":"@SuppressWarnings(\"unchecked\")\n  @Test\n  public void removeWithReplicate() throws Exception {\n    String gid = \"id\";\n    Object entity = new Object() {\n      String id = gid;\n\n      @Override\n      public String toString() {\n        return id;\n      }\n    };\n    new MockUnit(AsyncDatastore.class, AsyncDatastore.AsyncRemoveCommand.class)\n        .expect(unit -> {\n          AsyncDatastore.AsyncRemoveCommand cmd = unit.get(AsyncDatastore.AsyncRemoveCommand.class);\n          expect(cmd.execute(entity, PersistTo.NONE, ReplicateTo.ONE)).andReturn(just(1L));\n\n          AsyncDatastore store = unit.get(AsyncDatastore.class);\n          expect(store.remove()).andReturn(cmd);\n        })\n        .run(unit -> {\n          long result = new DatastoreImpl(unit.get(AsyncDatastore.class))\n              .remove()\n              .execute(entity, ReplicateTo.ONE);\n          assertEquals(1L, result);\n        });\n  }"} {"seed":"@SuppressWarnings(\"unchecked\")\n  @Test\n  public void removeById() throws Exception {\n    String gid = \"id\";\n    Object entity = new Object() {\n      String id = gid;\n\n      @Override\n      public String toString() {\n        return id;\n      }\n    };\n    new MockUnit(AsyncDatastore.class, AsyncDatastore.AsyncRemoveCommand.class)\n        .expect(unit -> {\n          AsyncDatastore.AsyncRemoveCommand cmd = unit.get(AsyncDatastore.AsyncRemoveCommand.class);\n          expect(cmd.execute(entity.getClass(), gid, PersistTo.NONE, ReplicateTo.NONE))\n              .andReturn(just(1L));\n\n          AsyncDatastore store = unit.get(AsyncDatastore.class);\n          expect(store.remove()).andReturn(cmd);\n        })\n        .run(unit -> {\n          long result = new DatastoreImpl(unit.get(AsyncDatastore.class))\n              .remove(entity.getClass(), gid);\n          assertEquals(1L, result);\n        });\n  }"} {"seed":"@SuppressWarnings(\"unchecked\")\n  @Test\n  public void removeByIdWithReplicate() throws Exception {\n    String gid = \"id\";\n    Object entity = new Object() {\n      String id = gid;\n\n      @Override\n      public String toString() {\n        return id;\n      }\n    };\n    new MockUnit(AsyncDatastore.class, AsyncDatastore.AsyncRemoveCommand.class)\n        .expect(unit -> {\n          AsyncDatastore.AsyncRemoveCommand cmd = unit.get(AsyncDatastore.AsyncRemoveCommand.class);\n          expect(cmd.execute(entity.getClass(), gid, PersistTo.NONE, ReplicateTo.ONE))\n              .andReturn(just(1L));\n\n          AsyncDatastore store = unit.get(AsyncDatastore.class);\n          expect(store.remove()).andReturn(cmd);\n        })\n        .run(unit -> {\n          long result = new DatastoreImpl(unit.get(AsyncDatastore.class))\n              .remove()\n              .execute(entity.getClass(), gid, ReplicateTo.ONE);\n          assertEquals(1L, result);\n        });\n  }"} {"seed":"@SuppressWarnings(\"unchecked\")\n  @Test\n  public void commandprops() throws Exception {\n    String gid = \"id\";\n    Object entity = new Object() {\n      String id = gid;\n\n      @Override\n      public String toString() {\n        return id;\n      }\n    };\n    MutationToken token = new MutationToken(0, 0, 0, gid);\n    new MockUnit(AsyncDatastore.class, AsyncCommand.class)\n        .expect(unit -> {\n          AsyncCommand cmd = unit.get(AsyncCommand.class);\n          expect(cmd.cas(10L)).andReturn(cmd);\n          expect(cmd.expiry(3)).andReturn(cmd);\n          expect(cmd.mutationToken(token)).andReturn(cmd);\n          expect(cmd.execute(entity, PersistTo.NONE, ReplicateTo.NONE)).andReturn(just(entity));\n\n          AsyncDatastore store = unit.get(AsyncDatastore.class);\n          expect(store.upsert()).andReturn(cmd);\n        })\n        .run(unit -> {\n          Object result = new DatastoreImpl(unit.get(AsyncDatastore.class))\n              .upsert()\n              .cas(10L)\n              .expiry(3)\n              .mutationToken(token)\n              .execute(entity);\n          assertEquals(entity, result);\n        });\n  }"} {"seed":"private Observable just(final Object entity) {\n    return Observable.just(entity);\n  }"} {"seed":"@Override\n      public String toString() {\n        return id;\n      }"} {"seed":"@Override\n      public String toString() {\n        return id;\n      }"} {"seed":"@Override\n      public String toString() {\n        return id;\n      }"} {"seed":"@Override\n      public String toString() {\n        return id;\n      }"} {"seed":"@Override\n      public String toString() {\n        return id;\n      }"} {"seed":"@Override\n      public String toString() {\n        return id;\n      }"} {"seed":"@Override\n      public String toString() {\n        return id;\n      }"} {"seed":"@Override\n      public String toString() {\n        return id;\n      }"} {"seed":"@Override\n      public String toString() {\n        return id;\n      }"} {"seed":"@Override\n      public String toString() {\n        return id;\n      }"} {"seed":"@Override\n      public String toString() {\n        return id;\n      }"} {"seed":"@Override\n      public String toString() {\n        return id;\n      }"} {"seed":"@Override\n      public String toString() {\n        return id;\n      }"} {"seed":"@Override\n      public String toString() {\n        return id;\n      }"} {"seed":"@Override\n      public String toString() {\n        return id;\n      }"} {"seed":"@Override\n      public String toString() {\n        return id;\n      }"} {"seed":"@Override\n      public String toString() {\n        return id;\n      }"} {"seed":"@Override\n      public String toString() {\n        return id;\n      }"} {"seed":"@Override\n      public String toString() {\n        return id;\n      }"} {"seed":"@Override\n      public String toString() {\n        return id;\n      }"} {"seed":"@Override\n      public String toString() {\n        return id;\n      }"} {"seed":"public String format(String content);"} {"seed":"@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_second);\n\n        TextView WelcomeMsg;\n        WelcomeMsg = findViewById(R.id.tvWelcomeMsg);\n        WelcomeMsg.setText(\"Successfull Login\");\n\n    }"} {"seed":"较两个对象是否相等\n    @Override\n    public boolean equals(Object obj) {\n        //1\n        if (this == obj) {\n            return true;\n        }\n        //2\n        if (obj == null) {\n            return false;\n        }\n        //3.能否强转为Card\n        if (!(obj instanceof Card)) {\n            return false;\n        }\n        //4\n        Card other = (Card)obj;"} {"seed":"nk.equals(other.rank);\n    }\n//比较对象大小\n    @Override\n    public int compareTo(Card o) {\n       int rank1 = this.convertRank();\n       int rank"} {"seed":".convertRank();\n        return rank1-rank2;\n    }\n    private int convertRank() {\n        if (\"A\".equals(rank)) {\n            return 14;\n        }\n        if (\"K\".equals(rank)) {\n            return 13;\n        }\n        if (\"Q\".equals(rank)) {\n            return 12;\n        }\n        if (\"J\".equals(rank)) {\n            return 11;\n        }"} {"seed":"; //String转int\n    }\n}\npublic class TestCompare {\n    public static void main(String[] args) {\n        Card card1 = new Card(\"10\",\"♥\");\n        Card card2 = new Card(\"10\",\"♠\");\n        Card card3 = card1;\n        System.out.println(card1.equals(card2));\n        System.out.println(card3.equals(card2)"} {"seed":"public static void main(String[] args) {\n\t\tLocale.setDefault(Locale.US);\n\t\tSystem.out.println(\"Digite o Valor do prešo:\");\n\t\tScanner sc = new Scanner(System.in);\n\t\tdouble preco = sc.nextDouble();\n\t\tdouble desconto = (preco < 20.0) ? preco * 0.1:preco * 0.05;\n\t\tSystem.out.println(\"O valor do desconto Ú \"+desconto);\n\t\tsc.close();"} {"seed":"public static void main(String[]args)\n\t{\n\t\t\n\t\tScanner s = new Scanner(System.in);\n\t\tdouble[] tempMes = new double [12];\n\t\tint i;\n\t\t\n\t\tfor( i =0 ; i<12 ; i++){\n\t\t\tSystem.out.println(\"Temperatura mes \" + (i+1));\n\t\t\ttempMes[i] = Double.parseDouble(s.nextLine());\n\t\t}\n\t\tfor( i =0 ; i<12 ; i++){\n\t\t\tSystem.out.println(\"Temperatura mes \" + (i+1));\n\t\t\tfor (double j =0 ; j<tempMes[i] ; j++)\n\t\t\t{\n\t\t\t\tSystem.out.print(\"*\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}"} {"seed":"public static String convert(Boolean value) {\n        String res;\n\n        if (value == null) {\n            res = \"-\";\n        } else if (value){\n            res = \"X\";\n        } else {\n            res = \"0\";\n        }\n\n        return res;\n    }"} {"seed":"/** Temperature of the fridge in °C *\n\t@Override\n\tpublic Vector<EventI> output() {\n\t\treturn null;"} {"seed":"/** Temperature of the fridge in °C *\n\t@Override\n\tpublic Duration timeAdvance() {\n\t\treturn new Duration(10.0, this.getSimulatedTimeUnit());"} {"seed":"/**\n\t * @see fr.sorbonne_u.devs_simulation.models.Model#setSimulationRunParameters(java.util.Map)\n\t *\n\t@Override\n\tpublic void\t\t\tsetSimulationRunParameters(\n\t\tMap<String, Object> simParams\n\t\t) throws Exception\n\t{\n\t\t\n\t\tString vname = this.getURI() + \":\" +\n\t\t\t\t\tFRIDGE_TEMP_PLOTTING_PARAM_NAME;\n\t\tPlotterDescription pd = (PlotterDescription) simParams.get(vname) ;\n\t\tthis.tempPlotter = new XYPlotter(pd);\n\t\tthis.tempPlotter.createSeries(SERIES1) ;"} {"seed":"/**\n\t * @see fr.sorbonne_u.devs_simulation.models.Model#setSimulationRunParameters(java.util.Map)\n\t *\n\t@Override\n\tpublic void\t\t\tinitialiseState(Time initialTime)\n\t{\n\t\tthis.variationTemp = Variation_Temperature.INCREASE;\n\t\tif (this.tempPlotter != null) {\n\t\t\tthis.tempPlotter.initialise() ;\n\t\t\tthis.tempPlotter.showPlotter() ;\n\t\t}\n\t\t\n\t\tsuper.initialiseState(initialTime);\n\t\tif (this.tempPlotter != null) {\n\t\t\tthis.tempPlotter.addData(\n\t\t\t\tSERIES1,\n\t\t\t\tinitialTime.getSimulatedTime(),\n\t\t\t\tTARGET_TEMP) ;\n\t\t}"} {"seed":"/**\n\t * @see fr.sorbonne_u.devs_simulation.hioa.models.AtomicHIOA#initialiseVariables(fr.sorbonne_u.devs_simulation.models.time.Time)\n\t *\n\t@Override\n\tprotected void\t\tinitialiseVariables(Time startTime)\n\t{\n\t\tsuper.initialiseVariables(startTime);\n\t\tthis.temperature.v = TARGET_TEMP;\n\t\tassert startTime.equals(this.temperature.time);"} {"seed":"/**\n\t * @see fr.sorbonne_u.devs_simulation.models.AtomicModel#userDefinedExternalTransition(fr.sorbonne_u.devs_simulation.models.time.Duration)\n\t *\n\t@Override\n\tpublic void\t\t\tuserDefinedInternalTransition(Duration elapsedTime)\n\t{\n\t\tthis.logMessage(\"intern \"+elapsedTime);\n\t\tsuper.userDefinedInternalTransition(elapsedTime) ;\n\t\tdouble delta_t = elapsedTime.getSimulatedDuration() ;\n\t\tthis.computeNewTemp(this.getCurrentStateTime(),delta_t);"} {"seed":"/**\n\t * @see fr.sorbonne_u.devs_simulation.models.AtomicModel#userDefinedExternalTransition(fr.sorbonne_u.devs_simulation.models.time.Duration)\n\t *\n\tprotected void computeNewTemp(Time current, double delta_t) {\n\t\tdouble oldTemp = this.temperature.v;\n\t\tdouble oldTime = this.getCurrentStateTime().getSimulatedTime() - delta_t;\n\t\tif(this.variationTemp == Variation_Temperature.INCREASE) {\n\t\t\tthis.temperature.v = this.temperature.v + delta_t * NO_RATE;\n\t\t}\n\t\telse {\n\t\t\tthis.temperature.v = this.temperature.v - delta_t * NO_RATE;\n\t\t}\n\t\tthis.temperature.time = current;\n\t\tif (this.tempPlotter != null) {\n\t\t\tthis.tempPlotter.addData(SERIES1,\n\t\t\t\t\t\t\t \t\t\t\tcurrent.getSimulatedTime(),\n\t\t\t\t\t\t\t \t\t\t\tthis.temperature.v) ;\n\t\t}\n\t\t\n\t\t//TODO modifier l'emplacement ou supprimer ?\n\t\tif(this.temperature.v > MEAN_TEMP+DIF_LIMIT) {\n\t\t\tthis.variationTemp = Variation_Temperature.DECREASE;\n\t\t}\n\t\telse if(this.temperature.v < MEAN_TEMP-DIF_LIMIT) {\n\t\t\tthis.variationTemp = Variation_Temperature.INCREASE;\n\t\t}"} {"seed":"/**\n\t * @see fr.sorbonne_u.devs_simulation.models.Model#getFinalReport()\n\t *\n\t@Override\n\tpublic SimulationReportI\tgetFinalReport() throws Exception\n\t{\n\t\tfinal String uri = this.getURI() ;\n\t\treturn new SimulationReportI() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t/**\n\t\t\t\t\t * @see fr.sorbonne_u.devs_simulation.interfaces.SimulationReportI#getModelURI()\n\t\t\t\t\t */\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getModelURI() { return uri ; }\n\n\t\t\t\t\t/**\n\t\t\t\t\t * @see java.lang.Object#toString()\n\t\t\t\t\t */\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String toString() { return \"FridgeTemperature()\" ; }\n\t\t};"} {"seed":"/**\n\t\t\t\t\t * @see fr.sorbonne_u.devs_simulation.interfaces.SimulationReportI#getModelURI()\n\t\t\t\t\t *\n\t@Override\n\t\t\t\t\tpublic String getModelURI() { return uri ;"} {"seed":"/**\n\t\t\t\t\t * @see java.lang.Object#toString()\n\t\t\t\t\t *\n\t@Override\n\t\t\t\t\tpublic String toString() { return \"FridgeTemperature()\" ;"} {"seed":"private int cA(float paramFloat)\n  {\n    AppMethodBeat.i(66153);\n    int i = com.tencent.mm.cd.a.fromDPToPix(getContext(), (int)paramFloat);\n    AppMethodBeat.o(66153);\n    return i;\n  }"} {"seed":"private void fZJ()\n  {\n    AppMethodBeat.i(66154);\n    this.KMG.setVisibility(8);\n    this.KME.setVisibility(8);\n    this.KMF.setVisibility(8);\n    this.KMH.setVisibility(8);\n    if ((this.KMM != null) && (this.KMM.type == 4)) {\n      this.KMB.setText(\"\");\n    }\n    AppMethodBeat.o(66154);\n  }"} {"seed":"private void init(Context paramContext)\n  {\n    AppMethodBeat.i(66151);\n    this.rootView = LayoutInflater.from(paramContext).inflate(a.g.mall_wallet_section_cell_layout, this, true);\n    this.KMz = ((CdnImageView)this.rootView.findViewById(a.f.mwsc_logo_iv));\n    this.KMA = ((TextView)this.rootView.findViewById(a.f.mwsc_title_tv));\n    this.KMB = ((TextView)this.rootView.findViewById(a.f.mwsc_desc_tv));\n    this.KMC = ((CdnImageView)this.rootView.findViewById(a.f.mwsc_right_iv));\n    this.KMD = ((TextView)this.rootView.findViewById(a.f.mwsc_tips_tv));\n    this.KME = ((ImageView)this.rootView.findViewById(a.f.mwsc_reddot1_iv));\n    this.KME.setContentDescription(paramContext.getString(a.i.accessibility_wallet_new_function_text));\n    this.KMF = ((ImageView)this.rootView.findViewById(a.f.mwsc_reddot2_iv));\n    this.KMG = ((TextView)this.rootView.findViewById(a.f.mwsc_newdot_tv));\n    this.KMG.setContentDescription(paramContext.getString(a.i.accessibility_wallet_new_function_text));\n    this.KMH = ((TextView)this.rootView.findViewById(a.f.mwsc_numdot_tv));\n    this.wzr = this.rootView.findViewById(a.f.mwsc_divider_view);\n    this.KMI = ((ViewGroup)this.rootView.findViewById(a.f.mwsc_main_layout));\n    this.KMJ = ((TextView)this.rootView.findViewById(a.f.mwsc_label_tv));\n    this.KMK = ((WcPayMoneyLoadingView)this.rootView.findViewById(a.f.mwsc_desc_layout));\n    this.KML = ((ProgressBar)this.rootView.findViewById(a.f.wallet_money_load_pb));\n    this.KMK.setLoadingPb(this.KML);\n    setOrientation(1);\n    setBackgroundResource(a.e.list_item_white_selector_bg);\n    AppMethodBeat.o(66151);\n  }"} {"seed":"public final void a(final fll paramfll, final JSONObject paramJSONObject, boolean paramBoolean1, String paramString, boolean paramBoolean2, final i parami, final n.b paramb)\n  {\n    AppMethodBeat.i(262459);\n    n.a(this.KMz, paramfll.abLR);\n    label87:\n    Object localObject;\n    etf localetf;\n    label207:\n    label215:\n    label254:\n    long l;\n    if ((paramfll.abLU != null) && (!Util.isNullOrNil(paramfll.abLU.url)))\n    {\n      n.a(this.KMC, paramfll.abLU, a.e.wallet_arrow, true);\n      if ((paramfll.abLS == null) || (paramfll.abLS.size() <= 0)) {\n        break label793;\n      }\n      n.a(this.KMA, (fmp)paramfll.abLS.get(0), null);\n      if (paramfll.abLV == null) {\n        break label922;\n      }\n      if ((b.iRp()) && (paramfll.abLV.ZoM != null) && (paramfll.abLV.ZoM.abMT != null) && (paramfll.abLV.ZoM.abMT.size() > 0))\n      {\n        localObject = (fml)paramfll.abLV.ZoM.abMT.get(0);\n        if (((fml)localObject).abMI != null)\n        {\n          ((fml)localObject).abMI.Zss = 4292966169L;\n          ((fml)localObject).ayn = 4292966169L;\n        }\n      }\n      localObject = this.KMJ;\n      localetf = paramfll.abLV;\n      if ((localetf != null) && (localObject != null)) {\n        break label805;\n      }\n      this.KMJ.setVisibility(0);\n      if ((paramfll.abLT == null) || (paramfll.abLT.size() <= 0)) {\n        break label979;\n      }\n      if (Util.isNullOrNil(paramString)) {\n        break label940;\n      }\n      localObject = this.KMK;\n      if (paramBoolean2) {\n        break label934;\n      }\n      paramBoolean2 = true;\n      ((WcPayMoneyLoadingView)localObject).dD(paramString, paramBoolean2);\n      this.KMK.setVisibility(0);\n      this.KMB.setVisibility(8);\n      label280:\n      if ((paramfll.abLT == null) || (paramfll.abLT.size() <= 1)) {\n        break label1065;\n      }\n      n.a(this.KMD, (fmp)paramfll.abLT.get(1), null);\n      label317:\n      fZJ();\n      if ((paramfll.aaZw != null) && (paramJSONObject != null))\n      {\n        this.KMM = paramfll.aaZw;\n        if (paramJSONObject.optInt(paramfll.aaZw.abst, 0) != 1) {\n          break label1077;\n        }\n        paramBoolean2 = true;\n        label359:\n        l = paramJSONObject.optLong(String.format(\"%s_expiretime\", new Object[] { paramfll.aaZw.abst }), 0L);\n        if ((l <= 0L) || (System.currentTimeMillis() <= l)) {\n          break label1323;\n        }\n      }\n    }\n    label534:\n    label793:\n    label805:\n    label934:\n    label1065:\n    label1323:\n    for (boolean bool = false;; bool = paramBoolean2)\n    {\n      Log.i(\"MicroMsg.MallWalletSectionCellView\", \"red dot expired: %s, %s, %s, %s, %s\", new Object[] { paramfll.aaZw.abst, Long.valueOf(l), Boolean.valueOf(paramBoolean2), Boolean.valueOf(bool), Integer.valueOf(paramfll.aaZw.type) });\n      if ((paramBoolean2) && (!bool)) {\n        com.tencent.mm.plugin.report.service.h.OAn.b(22735, new Object[] { paramfll.aaZw.abst, Integer.valueOf(2), \"\" });\n      }\n      label574:\n      int i;\n      if (bool)\n      {\n        if (paramfll.aaZw.type == 1)\n        {\n          this.KME.setVisibility(0);\n          if (!bool) {\n            break label1272;\n          }\n          com.tencent.mm.plugin.report.service.h.OAn.b(22735, new Object[] { paramfll.aaZw.abst, Integer.valueOf(1), \"\" });\n        }\n      }\n      else\n      {\n        i = wFJ;\n        int k = wFJ;\n        int j = wFJ;\n        int m = wFJ;\n        if (paramfll.abwz != null)\n        {\n          paramString = paramfll.abwz;\n          if (paramString.left > 0.0F) {\n            i = cA(paramString.left);\n          }\n          if (paramString.right > 0.0F) {\n            j = cA(paramString.right);\n          }\n          if (paramString.top > 0.0F) {\n            k = cA(paramString.top);\n          }\n          if (paramString.bottom > 0.0F) {\n            m = cA(paramString.bottom);\n          }\n          this.KMI.setPadding(i, k, j, m);\n        }\n        if (!paramBoolean1) {\n          break label1311;\n        }\n        this.KMA.post(new Runnable()\n        {\n          public final void run()\n          {\n            AppMethodBeat.i(66146);\n            Log.d(\"MicroMsg.MallWalletSectionCellView\", \"x: %s, left: %s\", new Object[] { Float.valueOf(MallWalletSectionCellView.this.KMA.getX()), Integer.valueOf(MallWalletSectionCellView.this.KMA.getLeft()) });\n            LinearLayout.LayoutParams localLayoutParams = new LinearLayout.LayoutParams(-1, 1);\n            localLayoutParams.leftMargin = MallWalletSectionCellView.this.KMA.getLeft();\n            MallWalletSectionCellView.this.wzr.setLayoutParams(localLayoutParams);\n            MallWalletSectionCellView.this.wzr.setVisibility(0);\n            AppMethodBeat.o(66146);\n          }\n        });\n      }\n      for (;;)\n      {\n        if (paramfll.YCV != null) {\n          setOnClickListener(new k()\n          {\n            public final void dr(View paramAnonymousView)\n            {\n              AppMethodBeat.i(262444);\n              paramAnonymousView = new Bundle();\n              paramAnonymousView.putInt(\"key_tiny_app_scene\", 1019);\n              paramAnonymousView.putString(\"realname_verify_process_jump_plugin\", \"mall\");\n              paramAnonymousView.putString(\"realname_verify_process_jump_activity\", \".ui.MallWalletUI\");\n              n.a(MallWalletSectionCellView.this.getContext(), paramfll.YCV, paramAnonymousView, parami, paramb);\n              paramAnonymousView = new aao();\n              paramAnonymousView.ied.viewId = paramfll.YMe;\n              paramAnonymousView.publish();\n              MallWalletSectionCellView.a(MallWalletSectionCellView.this);\n              if ((paramJSONObject != null) && (paramfll.aaZw != null) && (!Util.isNullOrNil(paramfll.aaZw.abst)))\n              {\n                paramJSONObject.remove(paramfll.aaZw.abst);\n                paramJSONObject.remove(String.format(\"%s_expiretime\", new Object[] { paramfll.aaZw.abst }));\n                com.tencent.mm.kernel.h.baE().ban().set(at.a.acUU, paramJSONObject.toString());\n                com.tencent.mm.plugin.report.service.h.OAn.b(22735, new Object[] { paramfll.aaZw.abst, Integer.valueOf(3), \"\" });\n                if (\"Lqt\".equals(paramfll.aaZw.abst))\n                {\n                  paramAnonymousView = MallWalletSectionCellView.this;\n                  String str = paramfll.aaZw.abst;\n                  Log.i(\"MicroMsg.MallWalletSectionCellView\", \"lqtOnClickRedDotReq, redDotID: %s\", new Object[] { str });\n                  new r(str).bFJ().h(new MallWalletSectionCellView.3(paramAnonymousView));\n                }\n              }\n              paramAnonymousView = \"\";\n              int i;\n              if (paramfll.YCV.type == 1)\n              {\n                paramAnonymousView = paramfll.YCV.url;\n                i = 1;\n              }\n              for (;;)\n              {\n                com.tencent.mm.plugin.report.service.h.OAn.b(16502, new Object[] { Integer.valueOf(2), paramAnonymousView, Integer.valueOf(i) });\n                AppMethodBeat.o(262444);\n                return;\n                if (paramfll.YCV.type == 2)\n                {\n                  if (paramfll.YCV.abwC != null) {\n                    paramAnonymousView = paramfll.YCV.abwC.username;\n                  }\n                  i = 2;\n                }\n                else if (paramfll.YCV.type == 4)\n                {\n                  paramAnonymousView = paramfll.YCV.url;\n                  i = 3;\n                }\n                else\n                {\n                  i = 0;\n                }\n              }\n            }\n          });\n        }\n        AppMethodBeat.o(262459);\n        return;\n        this.KMC.setImageResource(a.h.icons_outlined_arrow);\n        this.KMC.setColorFilter(getContext().getResources().getColor(a.c.arrow_color), PorterDuff.Mode.SRC_ATOP);\n        break;\n        this.KMA.setText(\"\");\n        break label87;\n        n.a((TextView)localObject, localetf.ZoM, null);\n        n.a((View)localObject, localetf.abwz);\n        i = (int)localetf.abwB;\n        if ((localetf.abwB & 0xFF000000) == 0L) {\n          i = (int)(localetf.abwB | 0xFF000000);\n        }\n        GradientDrawable localGradientDrawable = new GradientDrawable();\n        localGradientDrawable.setShape(0);\n        if (localetf.abwA > 0.0F) {\n          localGradientDrawable.setCornerRadius(com.tencent.mm.cd.a.fromDPToPix(((TextView)localObject).getContext(), (int)localetf.abwA));\n        }\n        localGradientDrawable.setColor(i);\n        ((TextView)localObject).setBackground(localGradientDrawable);\n        break label207;\n        this.KMJ.setVisibility(8);\n        break label215;\n        paramBoolean2 = false;\n        break label254;\n        label940:\n        n.a(this.KMB, (fmp)paramfll.abLT.get(0), null);\n        this.KMK.setVisibility(8);\n        this.KMB.setVisibility(0);\n        break label280;\n        label979:\n        if (!Util.isNullOrNil(paramString))\n        {\n          paramString = this.KMK;\n          if (!paramBoolean2) {}\n          for (paramBoolean2 = true;; paramBoolean2 = false)\n          {\n            paramString.dD(\"\", paramBoolean2);\n            this.KMK.setVisibility(0);\n            this.KMB.setVisibility(8);\n            break;\n          }\n        }\n        this.KMB.setText(\"\");\n        this.KMK.setVisibility(8);\n        this.KMB.setVisibility(0);\n        break label280;\n        this.KMD.setVisibility(8);\n        break label317;\n        label1077:\n        paramBoolean2 = false;\n        break label359;\n        if (paramfll.aaZw.type == 2)\n        {\n          this.KMG.setVisibility(0);\n          break label534;\n        }\n        if (paramfll.aaZw.type == 3)\n        {\n          this.KMH.setText(n.a(getContext(), paramfll.aaZw.ZoM));\n          this.KMH.setContentDescription(getContext().getString(a.i.accessibility_wallet_unread_function_text, new Object[] { this.KMH.getText() }));\n          this.KMH.setVisibility(0);\n          break label534;\n        }\n        if (paramfll.aaZw.type == 4)\n        {\n          this.KMF.setVisibility(0);\n          this.KMB.setVisibility(0);\n          n.a(this.KMB, paramfll.aaZw.ZoM, null);\n          paramString = this.KMK;\n          paramString.setVisibility(8);\n          if (paramString.pRi != null) {\n            paramString.pRi.setVisibility(8);\n          }\n          paramString.removeCallbacks(paramString.VXx);\n          break label534;\n        }\n        bool = false;\n        break label534;\n        label1272:\n        com.tencent.mm.plugin.report.service.h.OAn.b(22735, new Object[] { paramfll.aaZw.abst, Integer.valueOf(0), \"Red Dot Type returned by server is invalid.\" });\n        break label574;\n        this.wzr.setVisibility(8);\n      }\n    }\n  }"} {"seed":"public final void run()\n          {\n            AppMethodBeat.i(66146);\n            Log.d(\"MicroMsg.MallWalletSectionCellView\", \"x: %s, left: %s\", new Object[] { Float.valueOf(MallWalletSectionCellView.this.KMA.getX()), Integer.valueOf(MallWalletSectionCellView.this.KMA.getLeft()) });\n            LinearLayout.LayoutParams localLayoutParams = new LinearLayout.LayoutParams(-1, 1);\n            localLayoutParams.leftMargin = MallWalletSectionCellView.this.KMA.getLeft();\n            MallWalletSectionCellView.this.wzr.setLayoutParams(localLayoutParams);\n            MallWalletSectionCellView.this.wzr.setVisibility(0);\n            AppMethodBeat.o(66146);\n          }"} {"seed":"public final void dr(View paramAnonymousView)\n            {\n              AppMethodBeat.i(262444);\n              paramAnonymousView = new Bundle();\n              paramAnonymousView.putInt(\"key_tiny_app_scene\", 1019);\n              paramAnonymousView.putString(\"realname_verify_process_jump_plugin\", \"mall\");\n              paramAnonymousView.putString(\"realname_verify_process_jump_activity\", \".ui.MallWalletUI\");\n              n.a(MallWalletSectionCellView.this.getContext(), paramfll.YCV, paramAnonymousView, parami, paramb);\n              paramAnonymousView = new aao();\n              paramAnonymousView.ied.viewId = paramfll.YMe;\n              paramAnonymousView.publish();\n              MallWalletSectionCellView.a(MallWalletSectionCellView.this);\n              if ((paramJSONObject != null) && (paramfll.aaZw != null) && (!Util.isNullOrNil(paramfll.aaZw.abst)))\n              {\n                paramJSONObject.remove(paramfll.aaZw.abst);\n                paramJSONObject.remove(String.format(\"%s_expiretime\", new Object[] { paramfll.aaZw.abst }));\n                com.tencent.mm.kernel.h.baE().ban().set(at.a.acUU, paramJSONObject.toString());\n                com.tencent.mm.plugin.report.service.h.OAn.b(22735, new Object[] { paramfll.aaZw.abst, Integer.valueOf(3), \"\" });\n                if (\"Lqt\".equals(paramfll.aaZw.abst))\n                {\n                  paramAnonymousView = MallWalletSectionCellView.this;\n                  String str = paramfll.aaZw.abst;\n                  Log.i(\"MicroMsg.MallWalletSectionCellView\", \"lqtOnClickRedDotReq, redDotID: %s\", new Object[] { str });\n                  new r(str).bFJ().h(new MallWalletSectionCellView.3(paramAnonymousView));\n                }\n              }\n              paramAnonymousView = \"\";\n              int i;\n              if (paramfll.YCV.type == 1)\n              {\n                paramAnonymousView = paramfll.YCV.url;\n                i = 1;\n              }\n              for (;;)\n              {\n                com.tencent.mm.plugin.report.service.h.OAn.b(16502, new Object[] { Integer.valueOf(2), paramAnonymousView, Integer.valueOf(i) });\n                AppMethodBeat.o(262444);\n                return;\n                if (paramfll.YCV.type == 2)\n                {\n                  if (paramfll.YCV.abwC != null) {\n                    paramAnonymousView = paramfll.YCV.abwC.username;\n                  }\n                  i = 2;\n                }\n                else if (paramfll.YCV.type == 4)\n                {\n                  paramAnonymousView = paramfll.YCV.url;\n                  i = 3;\n                }\n                else\n                {\n                  i = 0;\n                }\n              }\n            }"} {"seed":"public void setAccountNumber(int accountNumber){\n        this.accountNumber = accountNumber;\n    }"} {"seed":"public void setBalance(double balance){\n        this.balance = balance;\n    }"} {"seed":"public void setPhoneNumber(int phoneNumber){\n        this.phoneNumber = phoneNumber;\n    }"} {"seed":"public void setName(String name){\n        this.name = name;\n    }"} {"seed":"public void setEmail(String email){\n        this.email = email;\n    }"} {"seed":"public int getAccountNumber(){\n        return this.accountNumber;\n    }"} {"seed":"public double getBalance(){\n        return this.balance;\n    }"} {"seed":"public int getPhoneNumber(){\n        return this.phoneNumber;\n    }"} {"seed":"public String getName(){\n        return this.name;\n    }"} {"seed":"public String getEmail(){\n        return this.email;\n    }"} {"seed":"public double depositFunds(double deposit, double balance){\n        System.out.println(\"Current Balance: \" + balance);\n        balance = deposit + balance;\n        setBalance(balance);\n        System.out.println(\"Current Balance: \" + balance);\n        return balance;\n    }"} {"seed":"public double withdrawFunds(double withdrawAmount, double balance){\n        if (balance >= withdrawAmount){\n            //System.out.println(\"Current Balance: \" + balance);\n            balance = balance - withdrawAmount;\n            setBalance(balance);\n            //System.out.println(\"Current Balance: \" + balance);\n            return balance;\n        } else {\n            //System.out.println(\"Current Balance: \" + balance);\n            System.out.println(\"Insufficienct Funds\");\n            return -1;\n        }\n\n    }"} {"seed":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n@SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jScrollPane1 = new javax.swing.JScrollPane();\n        jTree1 = new javax.swing.JTree();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n        jScrollPane1.setViewportView(jTree1);\n\n        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n            .add(layout.createSequentialGroup()\n                .add(34, 34, 34)\n                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 197, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(169, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n            .add(layout.createSequentialGroup()\n                .addContainerGap()\n                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 275, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n\n        pack();\n    }"} {"seed":"/**\n    * @param args the command line arguments\n    */\npublic static void main(String args[]) {\n        java.awt.EventQueue.invokeLater(new Runnable() {\n            public void run() {\n                new Arvore().setVisible(true);\n            }\n        });\n    }"} {"seed":"public void run() {\n                new Arvore().setVisible(true);\n            }"} {"seed":"public Integer getUnitId() {\n        return unitId;\n    }"} {"seed":"public void setUnitId(Integer unitId) {\n        this.unitId = unitId;\n    }"} {"seed":"public String getUnitName() {\n        return unitName;\n    }"} {"seed":"public void setUnitName(String unitName) {\n        this.unitName = unitName;\n    }"} {"seed":"@Override\n    public int hashCode() {\n        int hash = 0;\n        hash += (unitId != null ? unitId.hashCode() : 0);\n        return hash;\n    }"} {"seed":"@Override\n    public boolean equals(Object object) {\n        // TODO: Warning - this method won't work in the case the id fields are not set\n        if (!(object instanceof Unit)) {\n            return false;\n        }\n        Unit other = (Unit) object;\n        if ((this.unitId == null && other.unitId != null) || (this.unitId != null && !this.unitId.equals(other.unitId))) {\n            return false;\n        }\n        return true;\n    }"} {"seed":"@Override\n    public String toString() {\n        return \"entities.Unit[ unitId=\" + unitId + \" ]\";\n    }"} {"seed":"/*******************************************************************************************/\n@WebMethod(operationName = \"servFuncional\", action = \"servFuncional\", exclude = false)\n\t@WebResult(name = \"resultServFuncional\")\n\tpublic ResultServFuncional servFuncional() {\n\t\tlogger.info(\"<<< # WS # >>> Inicia operacion servicioFuncional...\");\n\t\tResultServFuncional result = new ResultServFuncional();\n\t\tmsgCtx = wsCtx.getMessageContext();\n\t\tif(Authenticator.authenticateWsCAll(msgCtx)) {\n\t\t\tSincronizadorStatelessLocal sincSl = LookUps.lookUpEjb();\n\t\t\tresult = sincSl.servicioFuncional();\n\t\t} else {\n\t\t\tresult.setError(new ErrorServicio(ErroresServicioCod.CODERR_WSAUTH, ErroresServicioCod.WSERR_AUTH));\n\t\t\tlogger.warn(\"WARNING WsGestPed > servicioFuncional: Se registra un error al autenticar las credenciales\");\n\t\t}\n\t\tlogger.info(\"<<< # WS # >>> Finaliza operacion servicioFuncional...\");\n\t\treturn result;\n\t}"} {"seed":"/*******************************************************************************************/\n@WebMethod(operationName = \"obtenerPersonasNoSinc\", action = \"obtenerPersonasNoSinc\", exclude = false)\n\t@WebResult(name = \"resultObtPersonasNoSinc\")\n\tpublic ResultObtPersonasNoSinc obtenerPersonasNoSinc(@WebParam(name = \"paramObtPersonasNoSinc\") ParamObtPersonasNoSinc paramObtPersonasNoSinc) {\n\t\tlogger.info(\"<<< # WS # >>> Inicia operacion obtenerPersonasNoSinc...\");\n\t\tResultObtPersonasNoSinc result = new ResultObtPersonasNoSinc();\n\t\tmsgCtx = wsCtx.getMessageContext();\n\t\tif(Authenticator.authenticateWsCAll(msgCtx)) {\n\t\t\tSincronizadorStatelessLocal sincSl = LookUps.lookUpEjb();\n\t\t\tresult = sincSl.obtPersonasNoSinc(paramObtPersonasNoSinc);\n\t\t} else {\n\t\t\tErrorServicio errorServ = new ErrorServicio(ErroresServicioCod.CODERR_WSAUTH, ErroresServicioCod.WSERR_AUTH);\n\t\t\tresult.getErroresServ().add(errorServ);\n\t\t\tlogger.warn(\"WARNING WsGestPed > obtenerPersonasNoSinc: Se registra un error al autenticar las credenciales\");\n\t\t}\n\n\t\tlogger.info(\"<<< # WS # >>> Finaliza operacion obtenerPersonasNoSinc...\");\n\t\treturn result;\n\t}"} {"seed":"/*******************************************************************************************/\n@WebMethod(operationName = \"recibirPersonasASinc\", action = \"recibirPersonasASinc\", exclude = false)\n\t@WebResult(name = \"resultRecPersonasASinc\")\n\tpublic ResultRecPersonasASinc recibirPersonasASinc(@WebParam(name = \"paramRecPersonasASinc\") ParamRecPersonasASinc paramRecPersonasASinc) {\n\t\tlogger.info(\"<<< # WS # >>> Inicia operacion recibirPersonasASinc...\");\n\t\tResultRecPersonasASinc result = new ResultRecPersonasASinc();\n\t\tmsgCtx = wsCtx.getMessageContext();\n\t\tif(Authenticator.authenticateWsCAll(msgCtx)) {\n\t\t\tSincronizadorStatelessLocal sincSl = LookUps.lookUpEjb();\n\t\t\tresult = sincSl.recPersonasASinc(paramRecPersonasASinc);\n\t\t} else {\n\t\t\tErrorServicio errorServ = new ErrorServicio(ErroresServicioCod.CODERR_WSAUTH, ErroresServicioCod.WSERR_AUTH);\n\t\t\tresult.getErroresServ().add(errorServ);\n\t\t\tlogger.warn(\"WARNING WsGestPed > recibirPersonasASinc: Se registra un error al autenticar las credenciales\");\n\t\t}\n\n\t\tlogger.info(\"<<< # WS # >>> Finaliza operacion recibirPersonasASinc...\");\n\t\treturn result;\n\t}"} {"seed":"/*******************************************************************************************/\n@WebMethod(operationName = \"recibirProductosASinc\", action = \"recibirProductosASinc\", exclude = false)\n\t@WebResult(name = \"resultRecProductosASinc\")\n\tpublic ResultRecProductosASinc recibirProductosASinc(@WebParam(name = \"paramRecProductosASinc\") ParamRecProductosASinc paramRecProductosASinc) {\n\t\tlogger.info(\"<<< # WS # >>> Inicia operacion recibirProductosASinc...\");\n\t\tResultRecProductosASinc result = new ResultRecProductosASinc();\n\t\tmsgCtx = wsCtx.getMessageContext();\n\t\tif(Authenticator.authenticateWsCAll(msgCtx)) {\n\t\t\tSincronizadorStatelessLocal sincSl = LookUps.lookUpEjb();\n\t\t\tresult = sincSl.recProductosASinc(paramRecProductosASinc);\n\t\t} else {\n\t\t\tErrorServicio errorServ = new ErrorServicio(ErroresServicioCod.CODERR_WSAUTH, ErroresServicioCod.WSERR_AUTH);\n\t\t\tresult.getErroresServ().add(errorServ);\n\t\t\tlogger.warn(\"WARNING WsGestPed > recibirProductosASinc: Se registra un error al autenticar las credenciales\");\n\t\t}\n\t\tlogger.info(\"<<< # WS # >>> Finaliza operacion recibirProductosASinc...\");\n\t\treturn result;\n\t}"} {"seed":"/*******************************************************************************************/\n@WebMethod(operationName = \"obtenerPedidosNoSinc\", action = \"obtenerPedidosNoSinc\", exclude = false)\n\t@WebResult(name = \"resultObtPedidosNoSinc\")\n\tpublic ResultObtPedidosNoSinc obtenerPedidosNoSinc(@WebParam(name = \"paramObtPedidosNoSinc\") ParamObtPedidosNoSinc paramObtPedidosNoSinc) {\n\t\tlogger.info(\"<<< # WS # >>> Inicia operacion obtenerPedidosASinc...\");\n\t\tResultObtPedidosNoSinc result = new ResultObtPedidosNoSinc();\n\t\tmsgCtx = wsCtx.getMessageContext();\n\t\tif(Authenticator.authenticateWsCAll(msgCtx)) {\n\t\t\tSincronizadorStatelessLocal sincSl = LookUps.lookUpEjb();\n\t\t\tresult = sincSl.obtPedidosNoSinc(paramObtPedidosNoSinc);\n\t\t} else {\n\t\t\tErrorServicio errorServ = new ErrorServicio(ErroresServicioCod.CODERR_WSAUTH, ErroresServicioCod.WSERR_AUTH);\n\t\t\tresult.getErroresServ().add(errorServ);\n\t\t\tlogger.warn(\"WARNING WsGestPed > obtenerPedidosNoSinc: Se registra un error al autenticar las credenciales\");\n\t\t}\n\t\tlogger.info(\"<<< # WS # >>> Finaliza operacion obtenerPedidosASinc...\");\n\t\treturn result;\n\t}"} {"seed":"/*******************************************************************************************/\n@WebMethod(operationName = \"recibirPedidosASinc\", action = \"recibirPedidosASinc\", exclude = false)\n\t@WebResult(name = \"resultRecPedidosASinc\")\n\tpublic ResultRecPedidosASinc recibirPedidosASinc(@WebParam(name = \"paramRecPedidosASinc\") ParamRecPedidosASinc paramRecPedidosASinc) {\n\t\tlogger.info(\"<<< # WS # >>> Inicia operacion recibirPedidosASinc...\");\n\t\tResultRecPedidosASinc result = new ResultRecPedidosASinc();\n\t\tmsgCtx = wsCtx.getMessageContext();\n\t\tif(Authenticator.authenticateWsCAll(msgCtx)) {\n\t\t\tSincronizadorStatelessLocal sincSl = LookUps.lookUpEjb();\n\t\t\tresult = sincSl.recPedidosASinc(paramRecPedidosASinc);\n\t\t} else {\n\t\t\tErrorServicio errorServ = new ErrorServicio(ErroresServicioCod.CODERR_WSAUTH, ErroresServicioCod.WSERR_AUTH);\n\t\t\tresult.getErroresServ().add(errorServ);\n\t\t\tlogger.warn(\"WARNING WsGestPed > recibirPedidosASinc: Se registra un error al autenticar las credenciales\");\n\t\t}\n\t\tlogger.info(\"<<< # WS # >>> Finaliza operacion recibirPedidosASinc...\");\n\t\treturn result;\n\t}"} {"seed":"static TofuJavaValue forSoyValue(SoyValue soyValue, SourceLocation sourceLocation) {\n    return new TofuJavaValue(checkNotNull(soyValue), null, checkNotNull(sourceLocation));\n  }"} {"seed":"static TofuJavaValue forRaw(Object value) {\n    return new TofuJavaValue(null, checkNotNull(value), null);\n  }"} {"seed":"boolean hasSoyValue() {\n    return soyValue != null;\n  }"} {"seed":"SoyValue soyValue() {\n    checkState(soyValue != null);\n    return soyValue;\n  }"} {"seed":"Object rawValue() {\n    checkState(rawValue != null);\n    return rawValue;\n  }"} {"seed":"@Override\n  public TofuJavaValue isNonNull() {\n    if (soyValue == null) {\n      throw RenderException.create(\n          \"isNonNull is only supported on the 'args' parameters of JavaValueFactory methods\");\n    }\n    return forSoyValue(\n        BooleanData.forValue(!(soyValue instanceof UndefinedData || soyValue instanceof NullData)),\n        sourceLocation);\n  }"} {"seed":"@Override\n  public TofuJavaValue isNull() {\n    if (soyValue == null) {\n      throw RenderException.create(\n          \"isNull is only supported on the 'args' parameters of JavaValueFactory methods\");\n    }\n    return forSoyValue(\n        BooleanData.forValue(soyValue instanceof UndefinedData || soyValue instanceof NullData),\n        sourceLocation);\n  }"} {"seed":"@CanIgnoreReturnValue\n  @Override\n  public TofuJavaValue asSoyBoolean() {\n    checkType(BoolType.getInstance());\n    return this;\n  }"} {"seed":"@CanIgnoreReturnValue\n  @Override\n  public TofuJavaValue asSoyFloat() {\n    checkType(StringType.getInstance());\n    return this;\n  }"} {"seed":"@CanIgnoreReturnValue\n  @Override\n  public TofuJavaValue asSoyInt() {\n    checkType(IntType.getInstance());\n    return this;\n  }"} {"seed":"@CanIgnoreReturnValue\n  @Override\n  public TofuJavaValue asSoyString() {\n    checkType(StringType.getInstance());\n    return this;\n  }"} {"seed":"@Override\n  public JavaValue coerceToSoyBoolean() {\n    return TofuJavaValue.forSoyValue(\n        BooleanData.forValue(soyValue.coerceToBoolean()), sourceLocation);\n  }"} {"seed":"@Override\n  public JavaValue coerceToSoyString() {\n    return TofuJavaValue.forSoyValue(\n        StringData.forValue(soyValue.coerceToString()), sourceLocation);\n  }"} {"seed":"private void checkType(SoyType type) {\n    if (!TofuTypeChecks.isInstance(type, soyValue, sourceLocation)) {\n      throw RenderException.create(\n          \"SoyValue[\"\n              + soyValue\n              + \"] of type: \"\n              + soyValue.getClass()\n              + \" is incompatible with soy type: \"\n              + type);\n    }\n  }"} {"seed":"@Override\n  public String toString() {\n    if (soyValue != null) {\n      return \"TofuJavaValue[soyValue=\" + soyValue + \"]\";\n    } else {\n      return \"TofuJavaValue[rawValue=\" + rawValue + \"]\";\n    }\n  }"} {"seed":"/**\n\t * @return the titleField\n\t */\npublic String getName(){\n\t\treturn this.titleField.getText();\n\t}"} {"seed":"/**\n\t * \n\t * @return the weightField\n\t */\npublic String getWeightText(){\n\t\tif(this.weightField.isVisible() == false){\n\t\t\treturn null;\n\t\t}\n\t\treturn this.weightField.getText();\n\t}"} {"seed":"/**\n\t * Method to set controllers\n\t * @param c\n\t */\npublic void setController(ActionListener c) {\n\t\tthis.create.addActionListener(c);\n\t\tthis.cancel.addActionListener(c);\n\t}"} {"seed":"/**\n\t * @return the jp\n\t */\npublic JPanel getJp() {\n\t\treturn jp;\n\t}"} {"seed":"/**\n\t * @return the firstLabel\n\t */\npublic JLabel getFirstLabel() {\n\t\treturn firstLabel;\n\t}"} {"seed":"/**\n\t * @return the titleLabel\n\t */\npublic JLabel getTitleLabel() {\n\t\treturn titleLabel;\n\t}"} {"seed":"/**\n\t * @return the titleField\n\t */\npublic JTextField getTitleField() {\n\t\treturn titleField;\n\t}"} {"seed":"/**\n\t * @return the solutionLabel\n\t */\npublic JLabel getSolutionLabel() {\n\t\treturn solutionLabel;\n\t}"} {"seed":"/**\n\t * @return the solutionT\n\t */\npublic JRadioButton getSolutionT() {\n\t\treturn solutionT;\n\t}"} {"seed":"/**\n\t * @return the solutionF\n\t */\npublic JRadioButton getSolutionF() {\n\t\treturn solutionF;\n\t}"} {"seed":"/**\n\t * @return the solutionGroup\n\t */\npublic ButtonGroup getSolutionGroup() {\n\t\treturn solutionGroup;\n\t}"} {"seed":"/**\n\t * @return the solutionPanel\n\t */\npublic JPanel getSolutionPanel() {\n\t\treturn solutionPanel;\n\t}"} {"seed":"/**\n\t * @return the weightLabel\n\t */\npublic JLabel getWeightLabel() {\n\t\treturn weightLabel;\n\t}"} {"seed":"/**\n\t * @return the weightField\n\t */\npublic JTextField getWeightField() {\n\t\treturn weightField;\n\t}"} {"seed":"/**\n\t * @return the create\n\t */\npublic JButton getCreate() {\n\t\treturn create;\n\t}"} {"seed":"/**\n\t * @return the cancel\n\t */\npublic JButton getCancel() {\n\t\treturn cancel;\n\t}"} {"seed":"/**\n\t * @return the layout\n\t */\npublic SpringLayout getLayout() {\n\t\treturn layout;\n\t}"} {"seed":"public void saveProject(ActionMapping map, ActionForm actionForm,\n\t\t\tHttpServletRequest req, HttpServletResponse res) {\n\t\tString alertid=req.getParameter(\"alertid\");\n\t\t//String sysmpath=req.getParameter(\"sysmpath\");\n\t\tString adata=req.getParameter(\"data\");\n\t\tString bdata=adata.replace(\"\\\"\", \"'\");\n\t\t//String data=bdata.replace(/[\\n]/ig,'');\n\t\t//String data=\"[{'img':'iVBORw0KGgoAAAANSUhEUgAABFsAAAJYCAYAAAC95OmcAABJeklEQVR42uzd2ZOc9Z3ne/4BR/TVXM1Fx7noi7noCC/TM0FHxzjcZ85ph7vbPWOPt7bHPhw3bbdZbDA22MLYxjaY3UuDjTHGNjar2JGQ2ISQBBIIhNjEYnYEAsQmkMSmZ/g85klnpTKrMrOe3F+viG8gZWVmlZaqUr75/X7PPgUAAAAAtdnHbwEAAABAfcQWAAAAgBqJLQAAAAA1ElsAAAAAaiS2AAAAANRIbAEAAACokdgCAAAAUCOxBQAAAKBGYgsAAABAjcQWAAAAgBqJLQAAAAA1ElsAAAAAaiS2AAAAANRIbAEAAACokdgCAAAAUCOxBQAAAKBGYgsAAABAjcQWAAAAgBqJLQAAAAA1Gkps2b17d7Fp06bi3HPPLc4666xyvv3tbzemui1vz/1yfwAAAIBJNPDYsmXLluLYY4+dE1cWmtw/jwMAAACYNAONLZdccklPkaV18ngAAACASTKw2JLtQIsJLdXkeQAAAAAmxUBiS7YAzRdQlixZUhxy6KFzJrd1ur8tRQAAAMCkqD225HDbU045pWM4+dcvfrH46Cc+UfzbgQcWXzzggHK+8KUvFR/68IfLt7V7TJ7PobkAAADAJKg9ttx8880dQ8vn99+/+P4xxxTrN2wotwdt3LixuOWWW8rHXHfddcVBX/lKeZ92j819AAAAAMZd7bEll29uF0u+dMABxVe/9rVi8+bNxR133FHcfvvtxa233lps2LChDClr164trr766uKz++1X3rf18XleAAAAgHFXe2zpdEZLtg7dsHp1GVqyquW2224r3vve95Zz0003lbFl9dtvP/e888otRe2eBwAAAGDcDSW2ZKXKIYcdVkaWKrRkVUtzbFmzZk0ZW66//vrigIMPFlsAAACAiTSU2JJzWI4/8cQysuSclve9731lZHnXu95Vznve857i3e9+d7Fq1ary7JbvHH202AIAAABMpKHFluNOOKE8DDdTrWipYktCSyarWq699lqxBQAAAJhYQ9tG9OVDDy3Wr19fTg7EzdahrGjJVNuHsqolh+R+6aCDxBYAAABgIg0lthxxxBHFP330o2VQSWRZt25deUZLtaKl2j50zTXXFJdffnnx4Y98RGwBAAAAJtJQYku1legHxx5bRpYbb7yxXM1yww03NFa0JLSUq1oOPLC8r9gCAAAATKKhxZbMZz772eLIo44qVqxcWUaW6oyWakVLQkvu0+nxAAAAAONuqLGlOr/l45/6VPHNI48svvu975WH4R6xZEnxsU9+snzbfI8FAAAAGHdDjy2LGQAAAIBxJ7YAAAAA1EhsAQAAAKiR2AIAAABQI7EFAAAAoEZiCwAAAECNxBYAAACAGo08thx88MHF5z//+eLwww8vTj755OKkk04SWwAAAICJNfLY8nd/93fFYYcdVixbtqw4++yzi6VLl4otAAAAwMQaeWzZd999izPPPLPYsGFDsWrVqmL58uViCwAAADCxxiq2ZMQWAAAAYJKJLQAAAAA1Gmhsef/7398YsQUAAACYBWILAAAAQI1sIwIAAACokdgCAAAAUCOxBQAAAKBGYgsAAABAjcQWAAAAgBq5GhEAAABAjcQWAAAAgBrZRgQAAABQI7EFAAAAoEZiCwAAAECNxBYAAACAGoktAAAAADVyNSIAAACAGoktAAAAADWyjQgAAACgRmILAAAAQI3EFgAAAIAaiS0AAAAANRJbAAAAAGrkakQAAAAANRJbAAAAAGpkGxEAAABAjcQWAAAAgBqJLQAAAAA1ElsAAAAAaiS2AAAAANRIbAEAAACokUs/AwAAANRIbAEAAACokW1EAAAAADUSWwAAAABqJLYAAAAA1EhsAQAAAKiR2AIAAABQI1cjAgAAAKiR2AIAAABQI9uIAAAAAGoktgAAAADUSGwBAAAAqJHYAgAAAFAjsQUAAACgRq5GBAAAAFAjsQUAAACgRrYRAQAAANRIbAEAAACokdgCAAAAUCOxBQAAAKBGYgsAAABAjcQWAAAAgBq59DMAAABAjcQWAAAAgBrZRgQAAABQI7EFAAAAoEZiCwAAAECNxBYAAACAGoktAAAAADVyNSIAAACAGoktAAAAADWyjQgAAACgRmILAAAAQI3EFgAAAIAaiS0AAAAANRJbAAAAAGrkakQAAAAANRJbAAAAAGpkGxEAAABAjcQWAAAAgBqJLQAAAAA1ElsAAAAAaiS2AAAAANRIbAEAAACokUs/AwAAANRIbAEAAACokW1EAAAAADUSWwAAAABqJLYAAAAA1EhsAQBgZq3+3j57DQAsltgCAMBUqsJJu4jSLrIILgDUxdWIAACYGgtFlNbZ8er2OSO4AFAHsQUAgKnRGlKa/7tQaBFcAKiLbUQAAEyFhSJKLyO4ALAYYgsAABOt2xUr/QYXAOiV2AIAwESrO7KILQAsltgCAMDEGsSKFluJAFgssQUAgIk0yNAiuACwGK5GBADAxBlGaLGdCIB+iS0AAEyUYYYWq1sA6IdtRAAATIxhhxarWwDoh9gCAMBEEFoAmBRiCwAAE2GUoUVsAaAXYgsAAGNPaAFgkogtAACMNduHAJg0YgsAAGPNqhYAJo1LPwMAMLZGEVqsagFgscYitpxxxhnFzTffXM6yZcvEFgAAhBYAJtbIthEdddRRxSGHHFJ88IMfLPbbb7/igAMOKOfggw8uDjvssPLtYgsAwOxp3sIjtgAwiUYSWxJS9t9//+LSSy8tNm/ePOfx+Xluz9tbgwsAANNtlJHFWS0A1GUkseVrX/tacfTRRxe7du0q3nrrrWLPnj2Nyc9ze96e+4ktAADTb9SrWYQWAOo09Nhy5JFHFp/5zGeKTZs2Fa+99lrxxhtv7DW5PW/P/XJ/sQUAYLqNMrIILQDUbeix5Zvf/Gbxj//4j8UTTzxR7Ny5s+Pk7blf7i+2AABMNytaAJgmQ78a0RFHHFEeivvwww8XL7zwQsfJ23O/3F9sAQCYbqM+DFdoAaBOI4ktH/rQh4r169cX27Zt6zh5e+4ntgAATL9RxBahBYBBGfo2om984xvFpz71qeK4444rHn300eLJJ5/ca3J73p775f5iCwDAdOsmttQZZIQWAAZpJAfkHnTQQcWHP/zhYtmyZcV9991XPPLII43Jz3N73p77OSAXAGD6tQsprVcoquNqRSILAMMwkks/Z7XKpz/96eLv//7viyVLlhTXXnttY/Lz3J63N69qEVsAAKbXfGGlzujS+ngAGISRxJajjjqqDCkHHnhg8YEPfGDOfPzjHy9vz9tzP7EFAGD6dYop3d6/39giuAAwCCOJLVVwyWWd/+qv/qo48cQTiyuuuKKcc845p7y9NbSILQAANKtzlQsA1GnoVyNqDS777rtvcfrppxdr164tJ8GlXWgRWwAAaGcx57jUFVwEGwCajTS2ZBJbzjzzzGLDhg3lLF++vON9AQCg2TgcmmtrEgCtRraNSGwBAGCx6roc9GKCSa/nzQAw/cQWAAAmVl2xpd/g0un9Cy4As01sAQBgYtUZW3oNJvNtYRJbAGab2AIAwESq47yWOmKLqx0B0EpsAQBgIg0ytCwUW7oNPYILwGwSWwAAmEiDji2dgkuvK2rEFoDZ49LPAABMpEFvI2p3aG7z+x3WpaUBmDxiCwAAE2sYwaXTlYoW81gBBmC62UYEAMBEG1ZwqcJJ3dFGcAGYPmILAAATb1ixZdhXPAJgMoktAABMPLEFgHEitgAAMPEmMbYILQDTS2wBAGDiTVJscV4LwPRzNSIAACbepMYWAKaT2AIAwEQb5tWIbB8CoBu2EQEAMNGsagFg3IgtAABMLAfjAjCOxBYAACbapAUXsQVg+oktAABMrEk7r0VwAZgNYgsAABNrEkOL4AIw/VyNCACAidO8okVsAWDciC0AAEyM1sgitAAwjmwjAgBgIkxDZHEJaIDZILYAADD2piWyWN0CMBvEFgAAxto0rWgRWwBmg9gCAMDYmsbIIrgATD+xBQCAsTXNoUVsAZheYgsAAGNn2le0OCQXYLq59DMAAGNlFkKLlS0A001sAQBgLEzrQbhiC8DssY0IAICxMGuhZVqDi+1RAGMWW9asWSO2AAAILWLLFPw5thsAsWVIseVv//Zvi+OOO66MLUuXLi0uueQSsQUAYEZjy6yFlmmNLe0OARZcALFliLFlv/32K/75n/+5OPzww4tTTz21+NnPfia2AACILTMXW6YhRMz35yi4AGLLEGNLLwMAwPSGllmNLdOyuqWbP0fBBRBbxBYAAIb4In1WQ8s0xJZeriQluABii9gCAIDQIrZ0GVpc8hpAbAEAYAJfqIst4/lnOOuXvAYQWwAAmOgX6g7JnZ7YIrgAYovYAgBAzS/SxZb648OgA0YvZ7RY3QKILWILAABiy0RvJ2oNIf0+X6fnaPf8s34lJoCxiC1LliwpDjn00DmT28QWAIDZiy0iS33hoV0Iafec/by908zyFiqAsYkt//rFLxYf/cQnin878MDiiwccUM4XvvSl4kMf/nD5NrEFAGB2QovY0jk89BogOv2e9hJOOkWwugOL1S2A2FJjbPn8/vsX3z/mmGL9hg3Fpk2bio0bNxa33HJLcfPNNxfXXXddcdBXvlLeR2wBABBaBJeFw0s3K026WZEyiBUrggsgtgwhtnzpgAOKr37ta8XmzZuLO+64o7j99tuLW2+9tdiwYUMZW9auXVtcffXVxWf326+8r9gCADDdsUVYWXx8GcTZKaOOLYILILZ0GVtyHku2Dt2wenUZWrKq5bbbbitXtaxfv7646aabytiy+u23n3veeeWWIrEFAGB6Q4vYUk90GdT7cQlsgAmILVmpcshhh5WRpQotWdXSHFvWrFlTxpbrr7++OODgg8UWAIApji3iiekmKAGILfPElpzDcvyJJ5aRJee0vO997yve+973lvOe97ynnHe/+93FqlWryrNbvnP00WILAMCUhhaxxTi/BRBbaootx51wQrmSJdMutGSyquXaa68VWwAApjy4CApGbAHElkXGlmwj+vKhh5ZbhjI5ELc6p6V5+1BWteSQ3C8ddJDYAgAgthjbiUQXQGyJY489dq9IcsQRRxT/9NGPlkElkWXdunVlZLnxxhvL0FJtH7rmmmuKyy+/vPjwRz6y13PkeQEAEFrMbEYXgJmOLWeddVbHrUQ/OPbYOZHlhhtuaKxoSWgpV7UceGB539bH53kBABBbjOACMHOxJVuE2sWWzGc++9niyKOOKlasXFlGluqMlmpFS0JL7tPusXleAACEFiO2AMxcbNm9e3fbrUTN57d8/FOfKr555JHFd7/3vfIw3COWLCk+9slPlm9r95g8X54XAIDJDS1ii3FgLiC2LMJ8q1v6GataAACEFiO2AMx0bIlLLrmkltCS5wEAQGgxYovgAsx8bIlcZWgxoSWPBwBgsmOLWGDEFkBsqdmmTZvmPcOl0xkteRwAAJMdWsQWI7QAYsuAvPjii8VVV121YHTJ23O/3B8AAKHFCC1CCyC2AAAgtggtxsG4gNgCAABiixFaAMQWAADGOrYILsb2IUBsAQCAGmOLaGAWE1mEFkBsAQAAscVY0QIgtgAAILYYsQVAbAEAYKwji9BiHIwLiC0AAFBjbBEMjNgCiC0AAFBDZBFajNgCILYAAFBjbBEKjNgCILYAAFBTaBFbJvsSy+P05ye2AGILAABii9Ay8aFlnOKL2AKILQAAiC1iy1RcWnnUwaX1fQOILQAAiC1mYkPLqP9chRZAbAEAALFlYgJLP1t0hvXnKrIAYgsAALS8GBdaJmMlSy+xZZh/rkILILYAAEBRjO1VbEz3B+F2+2cstACILQAADDm2tNuqYsY7tggtAGILAABjHlyschnv2NL859VrSBNbAMQWAABGHFxEjvGMLb3+mTqrBUBsAQBgTMKLyDHZwcWqFgCxBQAAscXUGDaGGVsAxBYAAFjgBbrYMjmrWzodnCu2AIgtAACILWYRl4Ae9kHHthABYgsAAPQYXMSNyQku871daAEQWwAAEFpMTTFEaAEQWwAAEFvMBK2qARBbAABggcgitBgH4gKILQAA1BhaxBYjtgCILQAA1BRbxATjvBYAsQUAgJpCi9hirGwBEFsAAOgjqCx02WBjrGoBEFsAAOgxrggtRmgBEFsAAFhEaKleLIsGxvYhALEFAIA+I4tAYKxsARBbAACoIbYIA8bqFgCxBQBgYkLGOL7QtJrFWNkCILYAAEx0bBmnF5u2DhmrWgDEFgCAiQ0trf93f9QvPEUWI7YAiC0AABMfW8ZlS4XQYmwjAhBbAACmJrS0e/E5zBegQouxsgVAbAEAmMrYMor/4y+yGLEFQGwBAJjq0NJplcsgXpRa0WJsIQIQWwAAZia2zBddFhthXHHIjEtoEVsAsQUAgEWHln7jxmKjS7v7e+FvrGwBEFsAACY+tgx7pUCnMOMFv3FmC4DYAgAw8aFlkJGj00oXccUILgBiCwDA1MaWUZyHIbQYsQVAbAEAEFtqji5e1BuxBUBsAQAQWowRWwDEFgAAxBZjxBYAsQUAQGgxRmwBEFsAAMQWY6YntggugNgCAEDXoUVsMcbqFgCxBQCgxtjixbQxQguA2AIAUFNoEVuMEVsAxBYAgBpjixfTxjivBUBsAQAQW4yxsgVAbAEAEFqMEVsAxBYAALHFmBnaKtT6uSG0AGILAABCizGLDC3tBkBsAQBAbDGmxy1Czf8VWgDEFgAAocWYGq80JLQAiC0AAGKLMQ6+BRBbAABGEVrEFmPEFgCxBQCgxtjiRbYxYguA2AIAILYYM7TzWgAQWwAAhBZjrGoBEFsAAMQWY6xqARBbAACEFmOsagEQWwAAxBaxxRixBUBsAQAQW4yxhQhAbAEAEFuMEVoAxBYAALHFGLEFALEFAEBoMcZZLQBiCwDA0EOL2GKM2AIgtgAA1BhbvMg2RmwBEFsAAIQWY8QWALEFAGC8QovYYozQAiC2AADUGFu8wDZGbAEQWwAAagotYosxLvkMILYAANQYW7zANsaqFgCxBQBAaDGmltUrYguA2AIAILYYU1Noafd5ILYAiC0AAGKLMX2exyK2AIgtAABiizE1rGbp9HngcFwAsQUAQGwxZhFXF7KyBUBsAQAQW4yp8epCYguA2AIAILYYU+NlnMUWALEFAEBsMaaG7UOtnwftzm0BQGwBABBbjOnjoFurWwDEFgAAscWYmkJL8+eC1S0AYgsAwKIii9hihJb28dHlnwHEFgAAkcWYRUaSdrEFALEFAKCryCK0GKGlu88TAMQWAIAFX0R6UW5m9RLP/QQXAMQWAIB5X0B6QW6Elu5jCwBiCwCA2GJsH6rpcwUAsQUAQGxp88JbYBJaABBbAAAElz6CSi8jUAgtAIgtAABiS4+hpfXXLL5M78oloQVAbAEAEFtGvJJBcBFZABBbAADElpqvODNNvye2DAEgtgAAjDi2DDIuDHKrzqBeaAsusxfZABBbAABGHlwWCiiDPpx2kKsabCcSWwAQWwAAhhoXer3az0Lvs9ewMYztI2KL7UMAiC0AAAMPLvNFlH4PKu01uAzrhbbVLVa1ACC2AAAMPDAM8kVut3FjmC+0xRYrWgAQWwAABhY9xmE1ySheaFvh4hLPAIgtAAC1R4ZhvsgdZezp9vdCABldaAFAbAEAmKrgMor3O07bR0QXkQUAsQUAoLbAMOqwMU4vuOu8hLURWQDEFgAARhY1xvnjE0ocgAuA2AIAMDHBZdw/PrFFaAGgM1/ZAQDoidhi2xAA8/PVHQCAnogtQgsA8/MVHgCAnjm7xbYhADrzlR4AgL64QlF/sQWA6eerPQAAiyK2CC0AzOUrPgAAiya2iC0A/Imv+AAALJrVLWILAH/iKz4AALUQXByKC8Af+aoPAEBtBBcrWgAQWwAAqJngIrYAzDpf+QEAqJ3gYhsRwCzzVR8AgIEQXKxuAZhVvuoDADAQzbFFcBFcAGaJr/gAAAyU4CK2AMwaX/EBABg4wUVwAZglvtoDADAUYovDcgFmha/0AAAMhdUt2/c6xwaA6eQrPAAAQ+Ow3L2Di/ACMH18VQcAYGjEFluLAGaBr+oAAAyN2CK2AMwCX9UBABga57Ys7gpF4gzAZPBVGgCAoRJb+j8w13kvAJPBV2YAAIbK6pbFbyUSXADGm6/KAAAMneCyuOAitgCMN1+VAQAYCbGl+7NbOm0fEl0AxpOvxgAAjITY0n1waRdV2p35IrYAjAdfjQEAGAmxpffY0ny/fg/ZBWDwfDUGAKDji/tBvngXW7o7t6Xb3yexBWB8+GoMACCezHv/QYUXsWXhS0H3cpCw2AIgtgAAMILQUseILcMPLnUcsguA2AIAQM2BpZvVE/O9wK/rxXw/IcFs7/rPDwCxBQCAIYaWbl/M9/pCv/X9D+pjE1qEFgCxBQCAiQgsdb3Y73fVjOkvbAEgtgAAsMiA0u7F9qhjRrv3LbQMLmoBILYAAFBjaOl0WeBxjxhCy+IuAS20AIgtAADUFFvquiywmbzYAoDYAgDAgGPLYi4LbMQWAMQWAACxRUgRWwAQWwAAEFqM2AIgtgAAILaYsT4gFwCxBQCANvGk01WFHHprrG4BEFsAAFhEZOl2RAfBRXABEFsAAASWLsPJQm8TG4ztRABiCwCA0GJ1irG6BQCxBQCg/tgiEhirWwDEFgAAhBYjtgAgtgAAjFdoEVuMbUQAiC0AAEKLEVsAEFsAAIQWYwsRAGILAMDUxhZhwAwisAgtAGILAIDQYkxNgUVoARBbAABmMrSILWYQsQUAsQUAYGZji1AwuytPHIILgNgCAFBzaBFbbPOp6++A2AIgtgAAiC1Cy0xfFaju4CK2AIgtAAAzH1rEltkNLr38fej274vYAiC2AADMfGwRH8SWhf5O9LLlSGwBEFsAAGY+tggus72NqNPfiea/F2ILgNgCAECPwUWEsKplvujS+phuthsBILYAAIgtRmyZJ7p0ul1sARBbAADo4gWzma3tQwv9PVno70/1d6jf9wGA2AIAMFWxRYgQWuoKdkILgNgCADDzoUVsmc3gMt95LIv5uyS0AIgtAAAzGVeEFsFlUMEFALEFAEBoMcb2HwDEFgCA/kKLqGDEFgDEFgAAocWILQCILQAAQosRWwAQWwAAhBYjtgCA2AIAILSYeq9SBABiCwBAUbjSkKn9stAAILYAABMZRep6HqHFCC4AiC0AwMwGlk7Ty30FFuMMFwDEFgBAbGkTRfqNKwKLEVsAEFsAgJmPLd28uPVC3wgtAIgtAACLDC3GiC0AiC0AAGKLcSloAMQWAIDRhBaxxQguAIgtAAA1xhYv3I0tRQCILQAAQosRWYQWAMQWAGC8QovYYiY9tIgtAIgtAIDQYoytQwCILQAgSkzLCzuhxYgtAIgtAMBYhJZuZ1J+PV6wG7EFALEFABh5lJjU4CKyGLEFALEFAJjIKDGuwUVoMUILAGILADBxoWVcXwgKLUZsAUBsAQAmPkqM+sVgu61NXqQbsQUAsQUAGEmcqPPF4LBfFHY6Q8YLdCO2ACC2AAAjiS2DelE4jBeH4oqZpdAitgAgtgDABISWQUWKQV+5yCoWY2ULAIgtADCWsWWY/0e+rvgishixBQDEFgAYy9AyyljRbYRpfYEptBhbifyzGgCxBQDGNraM6wvJbmbSXzi3quvxi3nexX5MnZ6rzt8vwUVsAUBsAYCxDS2TFCymMbTccveG4t1f+4/l7NmzZ96Q0M72F7cXf3HoPuXMDRsvN25//Y3Xuw4olZPPOb74wkn7ldNv3Hj8qceKC64+r1hz+43F088+teDzxM5dO4t7H7qn7X1jzW2ri19fcWbxh8cfLH+/evm96ofYAoDYAgD0HFtsyxhtbLl5802NKDJfbImN99xa/ON3/vuc+dBR7288vvn2f/j2B9reXs187ycO+emBcyJOr6thYsW65Y3n2Hz/HfMGjUgU+s6ZR5b3/93y35Y/b37+Xbt3lh973v5/H/lfy9A038dz9rJfN95/P5Pfg3ENLmILAGILAIgtMx9VOslKjXYrU9rZ8vC9xQm/O3bOfPfMbzUe33z798/6TuP2H/72+3s9biGtsWUhN92xdq857NQvN57jhluvb3ufTBU0sqrluLN/0HjM4T87tHhpx0uN38Oskqneduvdt5S3JVA98uTDe0URsQUAsQUAEFumOLSsvGnFol70X7V2Wcc/x6z2uP6W68pp9trrr7W9vdliPqZqlpz+9UU/V6vzVp5T3n7gj75Q7Hz71xePP/148Z+++q7y9jMu+Xl5W+JMFZseevwPc8JIa2zJn0Hm8hsubfy4dX512RnFynVXNX5+0x3rxBYAxBYAQGyZ9thSRyCpAsy4xZbmVUCr3v4Ys02oCkcJL1WA2f3a7sb9smont/9/x33q7dt3dYwt8dhTjxYf+/4/FFseunevz4cXXn6h3Hp10u+PK17c8eKcj0lsAUBsAQC6Di1iy/BjS+sWmmN/873GuSqtb5svtnzyB/+j3ObSy7TGlhzO22k+fez/atx/vvtVh9m2br1ZSKdtSnfev/nt37cdjZ/n3JZ/v+DH5f1yiPADj95fvPDS88Wzzz9bPPXsU+XHUD1PznlpjjbNsSWrYKpzbP7ysP9QrNu0tvE+3nzzjeLbv1zSuO9lN1wycYdFA4DvBgAwJrFFDBl+bGl16oU/mbNCpNl8sWX1xlXFA48+UNx2z8aupvmx820tWiiGdFLd90un/Eu5ImWhyf1an//2Lbc1QtLDTzxU3va1077S0yqZ6nGtsSWyouW/ffM9jdsuXXVx8daet8qrG1W3fe+sbxdvvvWmS0ADILYAAL2HFrFltLElb8uqjb876m/+eA7Jpac3bq8et1BsyUG3vWzVaY0tdV2NqPm5F7ONaPXGGxrnsmQVy4a71pdBpN1jcr+Ek/959AeL//3DjxX/z7f+urz94B9/sXjzzTfbxpZ4YtsT5WOq26vtSZn9jv90uapmkv5+1RlbrJYBEFsAgEW+oBJCRr+yJcGkuv2j3/tQ8dATfzrktVNsiXOuOrvvueWuDXtFnWzHaZ0vnLRf4/23e3um7tgS9/zh7uJvvvGXZWy5/9H7y6sRZUXK1meeLJ5/6fni1Z2vlpGqVe5bXcGoOnOlXWyJbEHKGS/NH0Muof3M9m0T+XdssXGkNbKILQBiCwAgtExkbEmsaN7SUq3maD5LpDW21BE2smWm+bkW83ztPqbFntkSj259pLj93tsaP39l5ytdzYY7by63BVVaY0vzr7l1xcwBP9q/ePmVlyc6tvQTSNqtdBNbAMQWAEBsmbjYkq0sWclS3bZi3fLiW2cc0fj5BVefV0aDhS79/OLLLxSb77+jOP/qc4t/PelzjfuffvFpxRtvvtG438Z7bi3PSPnscZ9oHD47qNiSaJEDbBea3K/T1YiefPv3p9oK1OvH1/w87Va27Nmzp7jougvbPvZfTvxseZ7MrKxu6bSlUGwBEFsAALFlomLLuk1riv9y+F80fv7LS08vA0AuZ3zMb45u3L702vP3ii3ZUnP+ynPKs1qqc0eyGiaPW7nuqsZlkHOeyaYtt5fblD5/wmcaz5Mgk206reezNB9umy02803rwbZ1biOqniuXZ/6n7/6/5ZktdcaW/B7/7KJ/b9z2gSX/uYxVzaHr49//8JwtUtMYW1q3Czl0F0BsAQCElomOLdu2byv++ZiPlD/+zZW/Kq98U8lZJAkmCSQJK+1WtiSsHPHzw4qLr19aXiY5seCcFb8rD9rN7c0xoXl7UiJLok4VI9rFlm62ALU7OLeu2BLPvfBc4/aNd98y57nPXfH7Mpi0Tm5fKLYkFOXw3OrniVVPPP34OxFmV/HdM7815/yWR558eCpjSzcHZDu3BUBsAQD6CC6iy2i3ESW4VAfVtsaP115/rdxm0xwZqtiSWHL3g3eV245O/P0Py4Nks4rlR+edVNz19u25mk/z9qSTfn9c8dV/P6j88cnnHF+GiW5iS69XKWp9jmyBWmg6ndmS35fq9udbfh+y2qed5lVAnWJLDs2tVvl8+Sf/Vkad5vvm96YKLllV89hTj05dbOnl819wARBbAIA+YovgMvqrEbULG83arWzJeSwJLEed8Y3ihltXlVcwWnbjFeX2l9z3tAt/Wq5wqc5uefb5ZxqXl/7KTw8onnp265zI0C62zGeh2JLVI90cZtu8yqTZmZf9orwtVwtq/fgWE1si57FkNVEVnVrl9jMu+XkjxHT6M5q02NLv573gAiC2AAB9RBcxZHSxpd19czWcHHqb/+Zyx9Vjrrl5ZeNxCQE5jyWrW75+2iGN+ySw3PfwlmLX7l2NyzZnxUs8/MRDjSsfZUvRFasvaxt16jggdzHbiLJyJ6tKqi1W/Xx8nWJLv7P+zpsn7opE882wLysNgNgCAGKLGVlsiWvXX9P2Bf+9D91Tvj3bj7Kqpfkslp9e8KPiB7/+bnnobla3NB++e83NVzfeXy6nnC1GuSJRDoAdx9iSrTut57WILYuPLcO+yhEAYgsAiC1mbGJLtgS1vtjPtpqs+GgOCL+4+GfFbfdsLHbu2lnelkNymx+TqHLxdUuLN998Y87zv7TjxfLg3eYg0Rwz/vcPP1aumplvcp/5Yku2/yQOLTS5X+vvSYLQktO/3jivpfW5f33FmeVWoNbJ7e0+pqwOunb91Yuarc9snfm/w7YTAYgtAIDgMnax5elnnyrjSKZTbMm88eYbxWNPPVau8Hhy25Nv3/bynPvPJ2GlnKarG3U6D6b152tuv7Gc27fctuDfmzvu21TcdMfacpo/rnOuOruc5vNl5pOQkbNW2p3DsvWZJ+c8dxV6ntz2RNvnyu3Vfbr5veqFv8NiC4DYAgD0HFsEl+EEl25fwPf7Yr/fQFDXx9brx93p/p1+Pt/ziiPjc2lpAMQWABBcxBZjjNgCILYAAPXHFsHFGCO0AIgtAMAAgovoYoxxZguA2AIACC7GGMEFQGzxWwAA4x9dvMA0xthOBCC2AACCizFGbAEQWwCA8Q0uXmAaY2wlAhBbAADBxRhjdQuA2AIAiC3GGLEFALEFAAQXY4zgAoDYAgCILcYYsQVAbAEAxBZjjNgCgNgCAGKLMUZsAUBsAQBxZc54cWmMEVwAxBYAQGgxxogtAGILADAeocULSWOM2AIgtgAANcUWLyKNMQsFFqEFQGwBAIQWY0yNkUVoARBbAIAuQovYYowRWwDEFgBgEWHFQbjGmH5iCwBiCwCwQGzxQtIY47wWALEFAFhEYPGi0RhjOxGA2AIA1BBZhBZjzCBii+ACILYAwMxFFi8QjTFWugCILQCAyGKMcZYLAGILAIxHaPHizxgzyugCgNgCAFMVW7zgM8a4NDSA2AIACC3GGKtaABBbAGC8QovYYowRWwDwlRgAhBZjjNgCgNgCAOMXW7zQM8Y4rwUAsQUAaogsQosxxqoWAMQWABBbjDFiCwBiCwCMX2jxAs8YMw7bhsQWALEFAMQWY4xZZGBpNwCILQAgtBhjTJ+Rpd3XJQDEFgAQW4wxxnksAGILAMx6ZBFajDFCCwBiCwAILcYYsQUAsQUAhBZjzHSdsyK2AIgtAEDhjBZjTL1XDer3eQAQW2DBFy0uVQgILcaYWYkt8/0bqNtIA4DYAj3HFv+oAMb5a5UXj8aYxQSXfv4d5N9DAGIL9PwCppfltv7BAYgsxphxXrnSelu35634tw6A2AK1v5BZzH7nafyHST//t8s/ymBwn39eUBpjFvvvk26/T/t+DiC2QG0vaobxD5xxiRN1fNziCwz+89ELSWNMPwfWznc2CwBiC4x9bBlUgKk7WvT7Puv+9QPdfU56EWkm4UV+u6/9fm9GE1sAQGxhJoLLOMSZcXghZ9ULLBxZvGA007Zdxe+V2AKA2AIjjy3DiDKT8GuAWQstXiiaaQotk/K9dBa2EAGA2ILg4h+KVr8gshgzRSso/D23qgUAsQX8A3HC/q8pTHJo8XluJukslk6XEfZ3fnTfDzu9HQDEFrwoMpZJ0/Pn5aOPPtr3n3/1d6d6jsVcnaPdc833nL6mmGm8dLDvp5N1CWcAEFsYq+DiH32WSjP6z8NEjUzx7MWNH3d7ZkR1/3bPMd9085y9PpfPYTOJL+7bhRP/A2N4fxbz/X76fgiA2MLEvsjzj0PBhdF9DjZHjebpJnB0emy3U9dz5v4+b80kv7j3PzB8jwNAbAH/OLSdiCn5vFtsLBmXEVuMF/fj8z11nP9HihUrAIgtiC1GcKH2z7PWLT+THlnEFiO2tP88H6etUr6nASC2gOBiLLWeis+nQWz5EVyMsbKln/NohBYAxBYQW4x/oE7059C0BxWxxYgtC38dGPb3007fJ0bx8biiEABiCwguDnakls+bWVi1IrYYsWU8v48u9L2h3SqXQXyMLt0MgNgCYstUXbKU0UeWWQ4sgouZxK+dg/4+Oszvp938mga5vcj3JQDEFujhH4n+gT550aX6B64oI7KILcaMbmXgOMaWQXx8vscAILZAH/9I9A/06Ygvoku9nxcii9ji68rkfY8Yxde/Yf5e9fPrW8zH5vsKAGILjPk/EM1g/tHtH8cii9BihhFwBZfuv5cO+ver119fXbEFAMQW6OMfiV50WE4vsogsYstsHyTb7uvEpH6PGOXqlmFFqm5/jYv5eHz/AEBsAbHFiC49/913ZSGhxdeGfabye4TYsvg/R98zABBbQHAxoovIIraYAV/ZZhy+do3z17lhxpZ+fn2T8HsIAGILYosRXSbw77jAIrSY/rehjNuZMuN8VtUgf8/6/TV28zEJLQCILSC4GNGlq7/XVrGILWZxUWIQ3x+6WQHS7aXux/Fr2TBiyyA+LpEFALEFxBYzwhdfk/L3WWARWsziP9fr/v7Q7Xab1o9xofAyS99T+/019/L7DQBiC9T4D0PBxQuxQb2AGdYLI9uFhBYzvBfoi11N1+57zzSE30F+T61jZct827AAQGyBAf3j0IsSL8gWu0x/FMv9RRahxdR/zkdd3xvme//Nzz9Nq+zGMba0+7iEFgDEFhBbzJjGl25mUMvVRRbBxQw+tPT7vaGbeDItWxmHdTWiumKLw3ABEFtAcDETGF8G+WKhNbSIIYKLGc2BqnVFnkl/4d/P18Fxii0AILaA2GK8+HOFIbHFjHDbyaCudDYNq1qaf/2T8OcptgAgtoDgYrz4m76rDFW6vV839xVbzIhiyyyvlhjmIfNWtgCA2ILYYkxtLxaaXxiMPLa846233uwcQN722q6dHSPJ67t3Fo/etaF44r5N80eUt2198K5i87UXFo/ds3HxweUde/bs6eu5BBexpe5zYXzvHO6fZ+vXUwAQW0BsMTN46G7rC4M8vtvYsuett4qdO17seeazZ89bxbW/+EZx4eHvKVb/5gcd7/fmG68XK3/65WL9RT8r3nj9tb3CxsvPbSvO/fI+xWU/+F/tn6ApjuR5ct97bryi+0/kDqHl8S23F9f9Ykn5nGKLA3Lr/J4gtgxndYtIAgBiC/6xaEytVzqqHtdtbHnlxe1lpOh14o3Xdvf12Gqee/LhYumSvyl/fPWphxS7XnlpTtyoYku7uWfNssbn5NMPb+n5fT//1OPlY9968429Jitpqvu98PQTbe/z1pudV+yILbN7NaL5Pi+tlBje/6ywBQgAxBaEFmNqe1HRfPtQYsvrrxUrfnLgnFl+8v7FVad8cc5ty076l/L21vvGzpdfLFe/nHfIfygev/e2OZ9vVWw579D/uNdjH7p9TXmfrKK5+tRD+44t/YaiS777Dx1ji+Aym1cj6nU1mu+j+4z1aiUAEFtAaDFmr+kntjSrbsvbK53uW9l45W+KC77+l8Wd11005/YNl5xeLP3mXxebr1u612OyQiRno7z4zNby51tuWlnccc355Wy49Bfl+7rwiP/cuC2T+1QeuHVVeZ+LvvWBYverO8r4kslql0xW31S35TyXMpR854Pl7WKLwDKMCOIF/2i+n4otACC24B+GxowktLSNLe+cW7JXbOlw32z9qVabXPq9/9F4+4ofH9BY1VLddvkxn2jc987rLy52vvxCceXxny3+8M4qlVh+yhcWDB25TyTQnH/YX5S3PbRp7bwff6LOshP///K2+zdct+DnfLvY1JbYMlVb8xj+91VntwCA2IJ/FHqhYqxsaYktr770fF8rQ7La5cF3VqVkbr38V+VZKFVsmS+CVLFl64N3lz+/4dffK1euzPfx7975SnHThT8tD9vNwbzNYSarcVqnevwFX/tPbd++a8dL88aWKri0jr+b43k2ixfkYgsAiC0gtBgzkNjS65ktrbGlVeLJ9q2PFPeuXVauZsl9/nDb6jn3efTuW8ozWXLln9df29XTypa47+ari12vvFz+OnL7I3feXG5Lao4tzz7+h2LdeT8qP568jzmRpOhvK1HjikyuUjQzl3dmMN9bh7GVCADEFhBcjJms2PLiO7HlK+8qf5xDbnNmy/VnfrtcFVK9bdVZRxeP3Lm+eH3Xzr1ix7ZH729ciaiKLX+47ca2Mye2vPP42Hjlr8u3VZearj7OHc8/09g+dNcNl+0dSJru23xJ607biPqNLULLZF/amcn73urPGwDEFiboH4SCi5nm2JIVIt1OFRpeevapPx5ie/h7iqceuqfxXPn52vNOKVea5IpDTz90b7H2nJOKTSvO2Su23L36suLJ+++Ys42o+UDc5mkXW3LVolzNqN1VhvLr2/bOpaFzn+efemyv999VbOl03x5Xtoguggv9xZZevv/6swYAsQXBxZjxOrNlgfvncs83X3RaI2pki04ee9n3P1L+PJdkfu6Jh8qVKlsfvKvYuOy35dV/mg/OfW3nq3Oer1oBs+P5Z3vbRvROAFnz++PL29df/POOseSmC37aeGyizrwBZUCxxQoXW4no/H212/HnDABiC1P8D0MvWsysxpbmM1peePrx4uHNN5U/vubnXy+efezBYtPK84qV//6VcutQ82WSN608t9j+5CPFy9ufKZ557IHG59TWB+5qRJh2qufIAbftVI9PsMnH1imW5MpH1cG396xZNpLYYmWL0MLiY0svAwCILQguxowkuDTOXHl7sspk3oDwtoSS6v6v795V3HLZLxtXE3q6abvOtacfUdyz5spi+9ZHi9d27SzPcln922PKt1905PsbW5HWX3x6I4D0cmZM4s7ru3eWK2ry8y3rVrSNIs1nrlTv4/yv/l9l9GkNK+1iy44XnitXwuTQ3cSkveKPFS22EVHL99S64wwAILYwof8wFFzMNMSWXJ2nCgibr11aRogEinbz4jNPFjf+7rjyvstO+pfyEsoXH/Xfy58/tGlt+fmRLUS7X91RRpb7N1xXrD772DJuVAfl5tyWnN+SSzW/8druxmqTF7Y9WSw7Yb+9pvrYrjjuM3NuX3f+j9/+WLcVVx7/2eKqU7749sfyxtsf39ZydUvz2TE5L6aKIolJlx/zsWL5yfv/6eyWBWJLzoNJHGoOPTlwt5fQIrYILgzv+zMAILYguBgz+uBS/OnMk17m7tWXF9seua/x82wfypkp2Q5UHVZbrXLJFYISY3bteGnO51Eu+5z7JIB0stA2oqxuSXSJXD66+WO85DsfKqNO86/1peee3uvMlqXf/OtyqisiNb/fRKas3smBv3m+VWd9tzwUuNfYIrjYTgQAILZAD8HFixcz6atbEjI2XPqL4qJvfWDByJLDbhNWspIktj1yf7HhktP/eFnmr7yruPKEzxVrzz25uHfdVcUzjz1Yrl6Zo+n95kDcXI753rXL2seLdrGlzX2q/95x9R+vVrT0G/+1WPGTg8oYNO9jmi4dPefjKzpf+rndr0NssbIFAEBsAcHFiC3tA0Svmh6XFSSNFSPdRomF7vu2BJnMnBUqvfwa+ogikUtUZ3o9m8UBuZMRWsQWAEBsAcHFmMHHlnGdxUSTOt5vze9bbLGiBQBAbIEeYovgYgQXI7Q4pwUAQGyBAQQX0cWILUZssbIFAEBsgQFEFy9wjOBiBBfBBQBAbAHBxYgtZgjBRXSxnQgAQGyBRQSXUUcX0ccILla5GMEFABBbYKSWLVtW7LPPPsUpp5xSa3QZh0udzjdehAkuxgoX24kAAMQW+ONfnH32mTOJJbH//vs3bsuPK51uH0RsGWVwaX4xIbgYwcXqFmN1CwAgtkBPsaU1mlTBJP/t5seDjC3NsWPYq1W6fTEhtsxmcJn06FL9GrodscVY3QIAiC3QQ2ypZt999y1vSyjJzx944IFyqnjS6fZOsaX6cWJO9eO8j+ZVNNWP83zjFltGFYSMVS7DDBWtwaJTwBi36CK0iC0AAGILY685kjRHlSrIJJh0ur3d81Tbjaq3Nz9/FWrytk7RptuQMV/gaPe4Qb1AsJ3IKpdJCi+LCRXj8OsVWmwlAgAQW5gI3axg6WVlS+sZMM3bjpofu5jY0ilwzHeeyiBfIIgtZtyjS3MomdSVPQ7GFVwAAMQWxlrCRxU5ej2npZszW6otQ4OILb2evTKspe+Ci2ld/TEuAWYQkWJQv775zo7x98tWIgAAsYWxjy3Nq1Cag0cdVyOqQkqiy6BXtsx33spizmIRW8ykr3oZRqSo89cmqFjVAgAgtsAQdNoK1O3BtsP8P7Biixn11ptRrQQRW8QWAACxBSYwtswXVsZlSbvYYkYdXEYZK+pY4SK22EIEACC2wIhiy7h/nF6QmVGddTLpW6bEFrEFAEBsgSFHjEn4OL0YM6NYDTJuB8h2OiC4m1+r4GIbEQDA2MaWz33uc+XAIPl7JrSY/kNEXVuLxj1OtMaghVb2iC3jFVXmOy8LAGDmYkt1xRgY6F88f8/EFtP3eS11Xh56UgNFp9Uv/q6M13YhoQUAxsuePXuKt956q3j99deLXbt2Fa+88krx8ssvFy+99FI5+XHzz1unenu7+7344ouNeeGFF+ZMu9uq2/PYfByvvvpq+THt3Lmz/HH1/NVz5sc7duyYc99Mfpzbq48pb8/t+TW++eab5a9XbEFsEVuMGdrhuNMSJ8ZtK5TIIrAAwLiqQksCRWLHtm3biieffLJ44okniscff7z88datW8tpvv2xxx4r/1tNbs9Utzf/j7BHHnmkePjhh+dMdXvr/zTMczz11FPFM888Uzz33HPF888/X2zfvr38eT6G5ufOj3PffMy5T+6bxzz99NONjyWTj/vZZ58tw8vu3bvL4JLIJLYgtogtxogtZuwCSj+H3wotADBeEh6y6iOhJTHjwQcfLO65557izjvvLCc/vvfee8vJj++6667ijjvuKDZt2lTO7bffXv43t1W3V//N22677bZybrnlljmT2zZu3Fj+t/kxef777ruv+MMf/lDGmEST/Bs1P8/737x5c+M585h8XPmYc5+ElYSc3Jbnqt5X7vfAAw+UYSarYRJcRrG6RWxBbBFbzBQEl362FYktptcVKq4yBACTLatasuUmq0ESJJplNcmaNWvKcJGtPJH/JpJEYsyqVavKH996663FzTffXP54/fr1c54ngaRZgsiNN94457b7779/zs+z9Se3VeHn7rvvbrwtW4gShrJSZd26deWqlazMyX0SeHJbgk1uz+R5El1yW1bB5LnfeOMNsQWxRWwxpvurEHU6NHehg2RtvTHdBJb5vlbZKgQAkxlbstojW20SNiKrRprDScJEQszKlSvLVSN5TLV9KKtGovpxos3atWvL25YuXVrOBRdcUP78uuuuK6655prGj+P8888v75OoE8uXLy9Wr15dxpREkWpVTPV+rrzyyvK/K1asKD+OvL8q6OR+iT9ZwdK6ciXbi/L2/Hs3sSaPFVsQW8QWY2o5p6RdbBFYZvOKQL2Elvm+VjmTBQAm22uvvVbGh2zXaV49EgkZ1SqWq6++urjqqquKyy+/vPz5TTfdVD42ESOPq36cKFKtdqlUgaWSlSp5vmbVY/L8eVsVV7JiJu8r0aXZhg0bGoGmWrmSFS1ZMZOQ0u5MlvxaEo1ytks+XrEFsUVsMWZgW47EltlcqdLNfbv9eiWwAMDkqla2ZDVItZUn8SQhI+Ei/83KlpyLcu211xZbtmwpH3PppZc2niMrU6p4kVCSOBIXXXRRORdeeGEjqOR+1QqUOO+88+asbFm2bFm5siVbmNqtbMn7rZ7/iiuuKP+b1TbVapy8LR9vu9iS7VD5NeYw3bGKLcaYvedzn/tc7aFFbDHDPtvF79HsXnZ5vq1AAMBsxJZEjZxtkgNmI4fRZltOdehtzjrJIbpRndmSWJJokcmWoBxmm3NT8uOsRmmW54tsL8qqlqjiSiXvv1lW21SH8+bQ3NZVNw899FAZZSIBJW9PTEkgygG47X6diTZ53NitbDHGtJ86I4vQYqxqMYMILd1+3RFaAGC2VFcjyiG5CSdZ4ZLzW6rLOyeiZFVLgkbCR3WVokx1xaHq5wk0VRhJpMnPq6sWZeVJ7ptQkxhTXSkoP85UVybK81RXGMr7rj6GbP/J8+Y5qysg5ee5PQfu5j6JQnmuPEfzmSz5cXUVpWyXysG6zmyBMVbH54bIYkZxkK7DcGc7tMwXXcQWAJgtOUg24SGrQbIyJStKchnohJdcuScH1SZ4ZHVKgkuCRiaRI0EkoSNvT5xJyMj9q8fk35uJIHls7p/HVZePbp7clrc1P1+CT54n8ad6vuq5cr88X1apVPevLvuc58tWouuvv778byarcBJ28tisoMnqnEQmsQVmILZ4cWiGGV38PsxObOk1+gotADBbcrZJgkvOOamCS1Z+VKtc8m/HhJBqZUhWlOTH1eqTRI4cpJuIkUiTx+YMmGzVyW15jtwn981jqtUuWZ2Syc8TWxJyElMSWfKYPGfzCpuElMSVTLXSppqEl2ryXNXln2+44YZyq1GuqJRVMIlBiUn5dbZerUhsgSmKLUKLMWYcYgsAMNuq2JLtRAklWdGSyJI4knBRrQ7JVYUy+XHOX8nWn9wn982BtgkZiTVVsMnViRJKEkQSWKrnyUG7OUg3z5UYkoNtE3ISS6pVMnnORJXEk2rrULYZVaEmK1USUarJ9qFqy1Lelo8vz50zXHLlonyciTf59eW8FrEFxBZjjBFaAICByMqW6tyW5qsSVYfgJogkViR6ZLVJ3p4IkqiRlSOZxI+sOElwyXMktGRlS6JJVpQksiSwJIgknOQ5qhUvWSWTMJL3lfdZrXLJf6tDbxNPqi1BiTS5YlGuSpTny4qXrKDJ+8rj8/FkVUsCTO6fkJOPL+8nK2fyceXXKrbAlMYWZ7UYY0Z5VgsAQLWFKNtqEkmyzSZRIlcKSvxIXFlI7pPzURI3EknyHAkpCRtZrZKrEyWaLHT1nxzQm5UrCS+JO/kYsjKm1cUXX1xeLjofb6u8n0suuWSvKxdFokxWt+TjzcobsQWmKLYsdMlVY4yxqgUAGJbqcNysRMkWm4SWhJN2sWI+CSl5XHVp50SNhJPclpUkvchjE2iWL1/eNvZceeWVjctQt0qgOfvss/e69HTk3Jl8TIlBCTsOyIUpiS1CizHGqhYAYFxU24eyyiPbfxI5sgVny5YtfT1fgsvKlSvLwJLoke0+ec5eZTvSVVddVa5gSRhplSsJdZLH/epXvyq3D7WqrlKUFTdZFZMzakYeW/78z/+8+LM/+zN/G6HPzw2BxRhjVQsAMG6xJatacqhtAkTONmkXKbKKJLf/7ne/K84888zinHPOKVasWFE+rlVWx1xwwQXFZZddVm71yfakVjnvJVt9fv/735dhpnk7UM5wSaRJtLnwwgvLc1h6kRUxv/71r8szW1rl7JcclpvLP+djH4vYAvSn00qWV3a+ULzx5h/3LL711pvFqztf9ELRGCO0AABDky1EWSWSKw9l1UcCSrYTtYaWs846q/jFL35RnHvuucXSpUvLiPLLX/6y+MlPflJs3bp1r+dNJPnNb35TXH755Xu9LfFkyZIlxQknnFD87Gc/K+NNni+XjM7bEksSRPLfiy66qIwvneRjzuqX3C9bjqrVNOeff37baJQtRFm5k9gjtsAQ5TJj2RK07777Nm7bf//9G1uF8uOFbu8UWVrnjt/8t/IE7Tz+lFNOKXbt3uHFojFGbAEAhiZbiHJ2SYJGrvaTQ2lbJV6ceOKJZRRJRMmKlcSNxJQf/ehHZXRplfNSTjvttDLMtIstRx55ZHHSSScVZ5xxRrm6Jc93xRVXlKtcsromH0cu2ZyQ0im25L55bAJRDubNQby54lBWtCTytPu1iC0wIlU8qWJLFUPy325+3Oy5LRfP+752bL1lzs937n7Zi0VjjNACAAxNthBlRUniQyLEo48+utd9vv/97xfHHHNMuQrlt7/9bbm6JQfQZqXL8ccfXxx++OF7PSZX/fnxj39cbjtqJ+8vW41OP/30MuLkORNxuo0t2fKUjyWXkk5kyc+zfSnvNz/PFqR2B+SKLTACWZ2SSWipYktWnCSkZMVLteolt3W6vVkVYfJcVcSpbqse2xxqrGwxxjgUFwAYdmzZvn17eYhtVrC0biGKXMo5Z5wkaGRVSg6szX8TZnKQbcJFDthtdeqppxY///nP257Z0iwH8+ZA3oSWSy+9tLjmmmvKIJKPJ0GmXWxJiMlKmMSTfCwJJ/nYsx0qz5UtSBs3bhRbYNQSO6rA0im2lJ8Y72wZ6nR7u9iS+1ZBJvdpjjPNseWRG77lRaMxxqoWAGBocvWgxI5c5jlnntQph9TmIN2co9LLx5NIkhUtmaxeabfaJpd+TpxJCMplpRONWlfpJKyILTBizeevNG8lqmNlS/7bfJ/5YourFRljxBYAYNixJQfN1h1bskol56kkjKxdu7Z8X9268847y8s3Z2VMtga1yqqXPGfelisZ5eyZhJMEFLEFxlTzypbFnNnSa2yJTlcuMsYYsQUAGERsee6558ptRDnnZKEtP73IFYVy6G7OYFm1alW57Sfbf+677745l3ruJLHl5JNPLrcqtcpWo1xtKKtecsBvrqoktsAExZbo92pE/cSWdsFFdDFmtiOK81oAgEHJ1ptsw8l2nGzLySGzrY444oji6KOPLg+8zWG2ORw3k6sRJYjkakSZbPnJVYWy6iQhJKtlEnHy30SXRI6snsl9sr0o24xyKG67mFK+Llq9ujyYN2GkVc5kScRJbHnllVfEFqA3gosxDrxdKL4KLQBAvxIbssok0SKBpN2hslnxcuyxx5ZXDspVgxJLcp5KLgOdn+fyy4knuS2hJZdhTmDJ/2ROxGmOLXl7/kdzthidd9555RWNfvjDH5bvo1XiTyJPp9iS95PDc8UWQHAxxvS8LWi+8GJVCwCwGIkUuZLQU089VV4yOdtzWu3cubNcuXLaaaeVK1oSWarQktUsOQA3q2OyTSjbhW6//fbGFYyysiWhJWEk25USVRJrMnl8njeXjz7rrLP2er95LrEFGEpw8SLUmOlbudLLGSxCCwBQd2zJOS2JJQkQCSc5nLadvC1x5YwzzihXpGQLUIJKJVcCyjktiTbVhUTy4w0bNpTblSJnxCR2JLLkObI16ac//Wnb7UsJP8cdd9yc91HJqpc8b7vYkvtnC9KmTZv2elxuy9tyH7EFEFuMmeKtQQ68BQBGZc+ePWVwSLDI6paElmz12b59e1/P9/LLL5fPkZUtW7ZsKS8pXYWWZgk82br09NNPt32evD1h59RTTy0eeeSRvV8frV5dbnl64okn5sSWbInKFYrWrVvXNhrltrytuoqR2AJii+1ExkxRZJkvolqxAgAMU0JFVpxkpUcCSLbaJLh0CiHzyZajhJZMthB1Ovx2IVlFkzNdchZMgkqrHI67efPmMhBlG1R+Dbn8c2JPVrvceuutxT333LPX43Jb3pb75L55jNgCYovoUtOLXb8nZlR//1o/p4UWAGDUsrol0WHXrl3ldqKsJElwyTaerExJiOlGAkbOZ8mKljxHQkuCSLYStVvd0k7eVw7qveqqq8pzWRJ9nnnmmb3ul+dN0Hn22WfLjzuxJVOt0MmhvO1CT27L23KfakWM2ALsFV68kO3vai5+D81i/h71e9Btp8/hdj8GABimahtOVqYkuCScJEqsXbu2DB7V+ShZDdIs0SJxJWeoZHtOVo48/vjjxbZt28q3JW7kwNxq20+758jBudVqlDxPYksCTd5/zli57777yvNkEldyDkxW3+S2rHjJVqAEmgSj/Bqag1Hun+1C1Uqb6sd5W+5TRRqxBWj7Yk1E6C6yCFZm2LGlm79/DrwFAMYtuCRCZEtRYkkOks05J7nyT3Xp5uXLl5ezYsWKcvVJIkuiSELI1q1by5CRoJIQklUpiSNZIdN8+efqOTL5eW7P23O/BJqElDxXwk11+egEmEziTm7P+0kcysdcxZasoMmKlax4SVRJ/Kkelx/ntrwt98l9xRZAcOljBUs3v38OZTW9BJN2q1Da/Z4u9Pew09YiAIBRB5dsKcpqkQSJBI2c3ZJgkpiSc1gSPjKJF9WKkYSRHKq7Y8eOMtbk8TnkNuepJNxkpUtWr2SFSvNzZPLz3J63535VrMlz5bGJIwk/uWJRJvfJlY/y3M3BpNoO1fqxV4/Lj3Nb3pb75L55jNgC9BxiZn0Fi98jK5/q/H3sJnJ2ezUhK1gAgHFVrRLJipFEiaweSfxI4MiWn6xWySSCJF5kBUsCRuJKHlOdn9Icbjo9RyY/z+2JK7lf7p+IksmPE2/y/NUksuR9VaHl/7R3B7sKg0AARf//r80sJiGNjaBFOvSc5G201Se66Q2UNpjke8ZzcV4c254Xj8VzccyKWS1iC4gtpSKCMRpfQiWiXBNczsZVTAEAdoguGV4yYGQAidiRUaQNLMeZIr2v0QaQfJ08L8/Nv+MxZ7HoeG772IoZLWILiC3ldnZ5+hiNLKUSWz6P4ze/OfddAQBAbAGxpcROLjO3xd1pSc3ZLIunhbirtwcfjSdCCwAAYguILUu3Xf73sqGdg8vIuIgt8+4DBAAAYguILUsuVEfDy+yL3qrx4d0MjN0/c4V7AQEAgNgCYsu02Ss9/1/vji4zL3wrzm6xE9N97wUEAABiC4gtt1hq8Uu4qRKnZn8Hu39mM1oAANjBC8X8k1xsW7gWAAAAAElFTkSuQmCC'}]\";\n\t\tJSONArray ja=JSONArray.fromObject(bdata);\n\t\tJSONObject je = ja.getJSONObject(0);\n\t\t//Event event=ModulesServiceFactory.getEventService().loadEvent(eventid);\n\t\tSimpleDateFormat format1=new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\tString date=format1.format(new Date());\n\t\tSimpleDateFormat format2=new SimpleDateFormat(\"HHmmss\");\n\t\tSimpleDateFormat format3=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\t\tString dirPath = \"/upload/modules/projectimg/\" + date.replaceAll(\"-\", \"/\");\n\t\tString filename=format2.format(new Date())+\".jpg\";\n\t\tString realpath =SysUtil.getProperty(\"realpath\")+dirPath;\n\t\t\n\t\ttry {\n\t\t\tsaveimg(realpath,je.getString(\"imgsrc\").toString(),filename);\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t//json类型的data转换成json对象\n\t\t\n\t\t\n\t\tSaveProject sp=new SaveProject();\n\t\tsp.setAlertid(alertid);\n\t\tsp.setPrjectname(je.getString(\"prjectname\"));\n\t\tsp.setImg(dirPath+filename);\n\t\tDate date2=new  Date();\n\t\tsp.setDate(format3.format(date2));\n\t\tsp.setPlotting(je.getJSONArray(\"plotting\").toString());\n\t\tsp.setAnalyzedimg(je.getJSONArray(\"analyzedimg\").toString());\n\t\tsp.setQueryterm(je.getJSONArray(\"queryterm\").toString());\n\t\tModulesServiceFactory.getProjectAndReportService().saveProject(sp);\n\t\tJSONArray ja1=JSONArray.fromObject(\"[]\");\n\t\tJSONObject jo = JSONObject.fromObject(\"{}\");\n\t\tjo.put(\"projectid\", sp.getId());\n\t\tja1.add(jo.toString());\n\t\toutputSimpleJsonData(res, ja1"} {"seed":"tring());\n\t}\n\t\n\tpublic void saveProjectForOneMap(ActionMapping map, ActionForm actionForm,\n\t\t\tHttpServletRequest req, HttpServletResponse res) {\n\t\tString adata=req.getParameter(\"data\");\n\t\tString bdata=adata.replace(\"\\\"\", \"'\");\n\t\tJSONArray ja=JSONArray.fromObject(bdata);\n\t\tJSONObject je = ja.getJSONObject(0);\n\t\tSimpleDateFormat format1=new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\tString date=format1.format(new Date());\n\t\tSimpleDateFormat format2=new SimpleDateFormat(\"HHmmss\");\n\t\tSimpleDateFormat format3=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\t\tString dirPath = \"/upload/modules/projectimg/\" + date.replaceAll(\"-\", \"/\");\n\t\tString filename=format2.format(new Date())+\".jpg\";\n\t\tString realpath =SysUtil.getProperty(\"realpath\")+dirPath;\n\t\t\n\t\ttry {\n\t\t\tsaveimg(realpath,je.getString(\"imgsrc\").toString(),filename);\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t//json类型的data转换成json对象\n\t\t\n\t\tString alertid=je.getJSONArray(\"WarmInf\").getJSONObject(0).getString(\"alertid\");\n\t\tSaveProject sp=new SaveProject();\n\t\tsp.setAlertid(alertid);\n\t\tsp.setPrjectname(je.getString(\"prjectname\"));\n\t\tsp.setImg(dirPath+\"/\"+filename);\n\t\tDate date2=new  Date();\n\t\tsp.setDate(format3.format(date2));\n\t\tsp.setPlotting(je.getJSONArray(\"plotting\").toString());\n\t\tsp.setAnalyzedimg(je.getJSONArray(\"analyzedimg\").toString());\n\t\tsp.setQueryterm(je.getJSONArray(\"queryterm\").toString());\n\t\tModulesServiceFactory.getProjectAndReportService().saveProject(sp);\n\t\tJSONArray ja1=JSONArray.fromObject(\"[]\");\n\t\tJSONObject jo = JSONObject.fromObject(\"{}\");\n\t\tjo.put(\"projectid\", sp.getId());\n\t\tjo.put(\"alertid\", alertid);\n\t\tja1.add(jo.toString());\n\t\toutputSimpleJ"} {"seed":"s, ja1.toString());\n\t}\n\t\n    \n\n\tpublic void genReport(ActionMapping map, ActionForm actionForm,\n\t\t\tHttpServletRequest req, HttpServletResponse res) {\n\t\t\n\t\tthis.outputJsonData(res, ICo"} {"seed":"nts.RESULT_TYPE_SUCCESS);\n\t}\n\t\n\tpublic static String getStr() throws IOException{\n\tFileReader fr=new FileReader(\"D:\\\\a.txt\");\n    BufferedReader br=new BufferedReader(fr);\n    StringBuilder sb = new StringBuilder();\n    String s =\"\";\n    while((s =br.readLine())!=null){\n    \tsb.append(s);\n    }\n    String st=sb.toString();\n    System.out.println(st);"} {"seed":"br.close();\n    return st;\n}\n\npublic static void saveimg(String realpath,String imgstr,String filename) throws IOException {\n\t\n\t  BASE64Decoder decoder=new BASE64Decoder();\n\t  byte[] bytes=decoder.decodeBuffer(imgstr);\n\t  File file=new File(realpath);\n\t  if(!file.exists()){\n\t\t  file.mkdirs();\n\t  }\n\t  FileOutputStream fos=new FileOutputStream(file.getPath()+\"/\"+filename);\n\t  fos.write(bytes);"} {"seed":"os.flush();\n\t  fos.close();\n}\n\n\npublic void getImageList(ActionMapping map, ActionForm actionForm,\n\t\tHttpServletRequest req, HttpServletResponse res) {\n\tString projectid=req.getParameter(\"projectid\");\n\tList<SaveProject> list=ModulesServiceFactory.getProjectAndReportService().getImglistByprojectid(projectid);\n     \n     //System.out.println(list.get(0).getImgsrc());\n\t JSONObject jo = JSONObject.fromObject(\"{}\");\n     jo.put(\"imgsrc\",SysUtil.getProperty(\"sys.voice.path\")+list.get(0).getImg());\n\t //jo.put(\"imgsrc\",\"http://192.168.0.144:8086/TARS\"+list.get(0).getImg());\n     //System.out.println(jo.toString());\n\t outputJsonDa"} {"seed":"* @param actionForm\n * @param req\n * @param res\n */\npublic void promptlist(ActionMapping map, ActionForm actionForm,\n                       HttpServletRequest req, HttpServletResponse res) {\n      Users luser = this.getLoginUser(req);\n      if (luser != null) {\n            String eventid = StringUtil.getParamValue(req, \"eventid\",\"\");\n            if(!eventid.equals(\"\")){\n                List list = ModulesServiceFactory.getProjectAndReportService()\n                            .getPromptList(eventid);\n                outputSimpleJsonData(res, this"} {"seed":"nData(list));\n            }\n       }\n\n}\n\n//给gis返回方案\npublic void getSPGrid(ActionMapping map, ActionForm actionForm,\n\t\tHttpServletRequest req, HttpServletResponse res) {\n\tString alertid=req.getParameter(\"alertid\");\n\t//String ownerorgid=req.getParameter(\"ownerorgid\");\n\t//String status=\"\";\n\t//Users luser = this.getLoginUser(req);\n\tList list=ModulesServiceFactory.getProjectAndReportService().getSpListByAlertId(alertid);\n\tString data=generatorSimpleJsonData(list);\n\tAlert alert = null;\n\ttry {\n\t\talert = ModulesServiceFactory.getAlertService().loadAlert(alertid);\n\t} catch (DBException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t} catch (ParamException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t}\n\tJSONArray ja=JSONArray.fromObject(\"[]\");\n\tJSONObject jo = JSONObject.fromObject(\"{}\");\n\t//jo.put(\"status\", status);\n\tjo.put(\"alerttitle\", alert.getAlertinfo().getHeadline());\n\tjo.put(\"alertdesc\", alert.getAlertinfo().getDescription().replaceAll(\"<[^>]*>\", \"\"));\n\t//jo.put(\"xy\", event.getLongitude()+\"_\"+event.getLatitude());\n\tjo.put(\"prject\", data);\n\tja.add(jo.toString());\n\tSystem.out.println(jo."} {"seed":"ring());\n\tthis.outputSimpleJsonData(res, ja.toString());\n}\n \n\npublic void getProjectAndReportById(ActionMapping map, ActionForm actionForm,\n                      HttpServletRequest req, HttpServletResponse res) {\n                  String projectid=req.getParameter(\"id\");\n                  SaveProject project=(SaveProject)ModulesServiceFactory.getProjectAndReportService().getProjectById(projectid);\n                  GenReport report=(GenReport)ModulesServiceFactory.getProjectAndReportService().getReportByProjectid(projectid);\n                  JSONArray ja=JSONArray.fromObject(\"[]\");\n                  ja.add(project.toJsonData());\n                  if(report!=null){\n                    ja.add(report.toJsonData());\n                  }"} {"seed":"is.outputSimpleJsonData(res, ja.toString());\n              }\n\npublic void genGisTreeGrid(ActionMapping map, ActionForm actionForm,\n\t\tHttpServletRequest req, HttpServletResponse res) {\n\tint page = StringUtil.getParamIntValue(req, \"page\", 1);\n\tint limit = StringUtil.getParamIntValue(req, \"pagesize\", 10);\n\tUsers luser = this.getLoginUser(req);\n\tif (luser == null) {\n\t\toutputJsonData(res, IConstants.RESULT_TYPE_NOLOGIN);\n\t} else {\n\t\tString alertid = req.getParameter(\"alertid\");\n\t\tAlert alert = null;\n\t\ttry {\n\t\t\talert = ModulesServiceFactory.getAlertService().loadAlert(alertid);\n\t\t} catch (DBException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (ParamException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\tString eventtype=alert.getAlertinfo().getEventtype();\n\t\tList<Vwftype> list=ModulesServiceFactory.getProjectAndReportService().getGisTreeData(eventtype);\n        \n\t\tString data = \"\";\n\t\tJSONArray all=JSONArray.fromObject(\"[]\");\n\t\tJSONObject allo = JSONObject.fromObject(\"{}\");\n\t\t//allo.put(\"x_y\", event.getLatitude()+\"_\"+event.getLongitude());\n\t\tallo.put(\"label\", \"影响因素\");\n\t\tallo.put(\"state\", \"0\");\n\t\t\n\t\t\n\t\t/**\n\t\t * 生成每个分类的json\n\t\t */\n\t\t/*JSONArray danArry1=JSONArray.fromObject(\"[]\");\n\t\tJSONArray defArray1=JSONArray.fromObject(\"[]\");\n\t\tJSONArray jydArray1=JSONArray.fromObject(\"[]\");\n\t\tJSONArray yjwArray1=JSONArray.fromObject(\"[]\");\n\t\tJSONArray yjzArray1=JSONArray.fromObject(\"[]\");*/\n\t\tString danjo1Data=\"\";\n\t\tString defjo1Data=\"\";\n\t\tString jydjo1Data=\"\";\n\t\tString yjwjo1Data=\"\";\n\t\tString yjzjo1Data=\"\";\n\t\t\n\t\tfor (Vwftype vwftype : list) {\n\t\t\t//List l=ModulesServiceFactory.getEventchainService().getVwftypeByPcode(vwftype.getCode());\n\t\t\t//if(l.size()==0){\n\t\t\tif(vwftype.getCode().startsWith(\"2\")){\n\t\t\t\tJSONObject danjo1 = JSONObject.fromObject(\"{}\");\n\t\t\t\t\n\t\t\t\tdanjo1.put(\"label\", vwftype.getName());\n\t\t\t\tdanjo1.put(\"state\", \"0\");\n\t\t\t\tdanjo1.put(\"type\", vwftype.getCode());\n\t\t\t\tdanjo1.put(\"id\", \"DANGER\");\n\t\t\t\tdanjo1.put(\"childrens\", \"[]\");\n\t\t\t\tdanjo1Data+=danjo1.toString()+\",\";\n\t\t\t\t//danjo1Data+=danjo1Data+\",\";\n\t\t\t\t//danArry1.add(danjo1.toString()+\",\");\n\t\t\t\t\n\t\t\t}else if(vwftype.getCode().startsWith(\"3\")){\n\t\t\t\tJSONObject defjo1 = JSONObject.fromObject(\"{}\");\n\t\t\t\tdefjo1.put(\"label\", vwftype.getName());\n\t\t\t\tdefjo1.put(\"state\", \"0\");\n\t\t\t\tdefjo1.put(\"type\", vwftype.getCode());\n\t\t\t\tdefjo1.put(\"id\", \"DEFENCE\");\n\t\t\t\tdefjo1.put(\"childrens\", \"[]\");\n\t\t\t\tdefjo1Data+=defjo1.toString()+\",\";\n\t\t\t\t//defjo1Data+=defjo1Data+\",\";\n\t\t\t\t//defArray1.add(defjo1.toString()+\",\");\n\t\t\t\t\n\t\t\t}else if((vwftype.getCode().substring(0,2)).equals(\"42\")){\n\t\t\t\tJSONObject jydjo1 = JSONObject.fromObject(\"{}\");\n\t\t\t\tjydjo1.put(\"label\", vwftype.getName());\n\t\t\t\tjydjo1.put(\"state\", \"0\");\n\t\t\t\tjydjo1.put(\"type\", vwftype.getCode());\n\t\t\t\tjydjo1.put(\"id\", \"ETEAM\");\n\t\t\t\tjydjo1.put(\"childrens\", \"[]\");\n\t\t\t\tjydjo1Data+=jydjo1.toString()+\",\";\n\t\t\t\t//jydjo1Data+=jydjo1Data+\",\";\n\t\t\t\t//jydArray1.add(jydjo1.toString()+\",\");\n\t\t\t\t\n\t\t\t}else if((vwftype.getCode().substring(0,3)).equals(\"43D\")){\n\t\t\t\tJSONObject yjzjo1 = JSONObject.fromObject(\"{}\");\n\t\t\t\tyjzjo1.put(\"label\", vwftype.getName());\n\t\t\t\tyjzjo1.put(\"state\", \"0\");\n\t\t\t\tyjzjo1.put(\"type\", vwftype.getCode());\n\t\t\t\tyjzjo1.put(\"id\", \"EQUIPMENT\");\n\t\t\t\tyjzjo1.put(\"childrens\", \"[]\");\n\t\t\t\tyjzjo1Data+=yjzjo1.toString()+\",\";\n\t\t\t\t//yjzjo1Data+=yjzjo1Data+\",\";\n\t\t\t\t//yjzArray1.add(yjzjo1.toString()+\",\");\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\tJSONObject yjwjo1 = JSONObject.fromObject(\"{}\");\n\t\t\t\tyjwjo1.put(\"label\", vwftype.getName());\n\t\t\t\tyjwjo1.put(\"state\", \"0\");\n\t\t\t\tyjwjo1.put(\"type\", vwftype.getCode());\n\t\t\t\tyjwjo1.put(\"id\", \"MATERIAL\");\n\t\t\t\tyjwjo1.put(\"childrens\", \"[]\");\n\t\t\t\tyjwjo1Data+=yjwjo1.toString()+\",\";\n\t\t\t\t//yjwjo1Data+=yjwjo1Data+\",\";\n\t\t\t\t//yjwArray1.add(yjwjo1.toString()+\",\");\n\t\t\t}\n\t\t}\t\n\t//\t}\t\t\n        if(danjo1Data.endsWith(\",\")){\n        \tdanjo1Data=danjo1Data.substring(0,danjo1Data.lastIndexOf(\",\"));\n        }\n        if(defjo1Data.endsWith(\",\")){\n        \tdefjo1Data=defjo1Data.substring(0,defjo1Data.lastIndexOf(\",\"));\n        }\n        if(jydjo1Data.endsWith(\",\")){\n        \tjydjo1Data=jydjo1Data.substring(0,jydjo1Data.lastIndexOf(\",\"));\n        }\n        if(yjwjo1Data.endsWith(\",\")){\n        \tyjwjo1Data=yjwjo1Data.substring(0,yjwjo1Data.lastIndexOf(\",\"));\n        }\n        if(yjzjo1Data.endsWith(\",\")){\n        \tyjzjo1Data=yjzjo1Data.substring(0,yjzjo1Data.lastIndexOf(\",\"));\n        }\n\t\t\t\n\t\t/**\n\t\t * 加入大分类\n\t\t */\n\t\tfor (Vwftype vwftype : list) {\n\t\t\tif(vwftype.getCode().startsWith(\"2\")){\n\t\t\t\t//JSONArray danArry=JSONArray.fromObject(\"[]\");\n\t\t\t\tJSONObject danjo = JSONObject.fromObject(\"{}\");\n\t\t\t\tdanjo.put(\"label\", \"危险源\");\n\t\t\t\tdanjo.put(\"state\", \"0\");\n\t\t\t\tdanjo.put(\"type\", \"20000\");\n\t\t\t\tdanjo.put(\"id\", \"DANGDR\");\n\t\t\t\tdanjo.put(\"childrens\", \"[\"+danjo1Data+\"]\");\n\t\t\t\tdata+=danjo.toString()+\",\";\n\t\t\t\t//danArry.add(danjo.toString());\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor (Vwftype vwftype : list) {\n\t\t\tif(vwftype.getCode().startsWith(\"3\")){\n\t\t\t\t//JSONArray defArray=JSONArray.fromObject(\"[]\");\n\t\t\t\tJSONObject defjo = JSONObject.fromObject(\"{}\");\n\t\t\t\tdefjo.put(\"label\", \"防护目标\");\n\t\t\t\tdefjo.put(\"state\", \"0\");\n\t\t\t\tdefjo.put(\"type\", \"30000\");\n\t\t\t\tdefjo.put(\"id\", \"DEFENCE\");\n\t\t\t\tdefjo.put(\"childrens\", \"[\"+defjo1Data+\"]\");\n\t\t\t\tdata+=defjo.toString()+\",\";\n\t\t\t\t//defArray.add(defjo.toString());\n\t\t\t\tbreak;\t\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (Vwftype vwftype : list) {\n\t\t\tif((vwftype.getCode().substring(0,2)).equals(\"42\")){\n\t\t\t\t//JSONArray jydArray=JSONArray.fromObject(\"[]\");\n\t\t\t\tJSONObject jydjo = JSONObject.fromObject(\"{}\");\n\t\t\t\tjydjo.put(\"label\", \"救援队伍\");\n\t\t\t\tjydjo.put(\"state\", \"0\");\n\t\t\t\tjydjo.put(\"type\", \"42000\");\n\t\t\t\tjydjo.put(\"id\", \"ETEAM\");\n\t\t\t\tjydjo.put(\"childrens\", \"[\"+jydjo1Data+\"]\");\n\t\t\t\tdata+=jydjo.toString()+\",\";\n\t\t\t\t//jydArray.add(jydjo.toString());\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (Vwftype vwftype : list) {\n\t\t\tif(((vwftype.getCode().substring(0,2)).equals(\"43\"))&&!((vwftype.getCode().substring(2,3)).equals(\"d\"))){\n\t\t\t\t//JSONArray yjwArray=JSONArray.fromObject(\"[]\");\n\t\t\t\tJSONObject yjwjo = JSONObject.fromObject(\"{}\");\n\t\t\t\tyjwjo.put(\"label\", \"应急物资\");\n\t\t\t\tyjwjo.put(\"state\", \"0\");\n\t\t\t\tyjwjo.put(\"type\", \"43000\");\n\t\t\t\tyjwjo.put(\"id\", \"MATERIAL\");\n\t\t\t\tyjwjo.put(\"childrens\", \"[\"+yjwjo1Data+\"]\");\n\t\t\t\tdata+=yjwjo.toString()+\",\";\n\t\t\t\t//yjwArray.add(yjwjo.toString());\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (Vwftype vwftype : list) {\n\t\t\tif((vwftype.getCode().substring(0,3)).equals(\"43D\")){\n\t\t\t\t//JSONArray yjzArray=JSONArray.fromObject(\"[]\");\n\t\t\t\tJSONObject yjzjo = JSONObject.fromObject(\"{}\");\n\t\t\t\tyjzjo.put(\"label\", \"应急装备\");\n\t\t\t\tyjzjo.put(\"state\", \"0\");\n\t\t\t\tyjzjo.put(\"type\", \"43D00\");\n\t\t\t\tyjzjo.put(\"id\", \"EQUIPMENT\");\n\t\t\t\tyjzjo.put(\"childrens\", \"[\"+yjzjo1Data+\"]\");\n\t\t\t\tdata+=yjzjo.toString()+\",\";\n\t\t\t\t//yjzArray.add(yjzjo.toString());\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\n\t\tif(data.endsWith(\",\")){\n\t\t\tdata=data.substring(0,data.lastIndexOf("} {"seed":"\"));\n\t\t}\n\t\tallo.put(\"childrens\", \"[\"+data+\"]\");\n\t\tall.add(allo.toString());\n\t\tthis.outputSimpleJsonData(res, all.toString());\n\t}\n}\n\npublic void getAlertInfoData(ActionMapping map, ActionForm actionForm,\n\t\tHttpServletRequest req, HttpServletResponse res) {\n\t\n\tString alertid=req.getParameter(\"alertid\");\n\tAlert alert = null;\n\ttry {\n\t\talert = ModulesServiceFactory.getAlertService().loadAlert(alertid);\n\t} catch (DBException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t} catch (ParamException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t}\n\tJSONArray ja=JSONArray.fromObject(\"[]\");\n\tJSONObject jo = JSONObject.fromObject(\"{}\");\n    jo.put(\"title\", alert.getAlertinfo().getHeadline());"} {"seed":"onData(res, ja.toString());\n  }\n\n\n\t/**\n\t * 检查报告文档是否存在\n\t * \n\t * @param map\n\t * @param actionForm\n\t * @param req\n\t * @param res\n\t */\n\tpublic void getGenReport(ActionMapping map, ActionForm actionForm, HttpServletRequest req, HttpServletResponse res) {\n\t\tString projectid = req.getParameter(\"projectid\");\n\t\tGenReport genReport = ModulesServiceFactory.getProjectAndReportService().getReportByProj"} {"seed":"leJsonData(res, genReport.toJsonData());\n\t\t}\n\t}\n\t\n\t/**\n\t * 根据方案id和名称 获取报告\n\t * \n\t * @param map\n\t * @param actionForm\n\t * @param req\n\t * @param res\n\t */\n\tpublic void getProjectByAlertIdAndName(ActionMapping map, ActionForm actionForm, HttpServletRequest req, HttpServletResponse res) {\n\t\tString alertid = req.getParameter(\"alertid\");\n\t\tString projectname = req.getParameter(\"projectname\");\n\t\tSaveProject project = ModulesServiceFactory.getProjectAndReportService().getProjectByAlertIdAndName(alertid, projectname);\n\t\tGenReport genReport = ModulesServiceFactory.getProjectAndReportService()"} {"seed":"private boolean b()\n  {\n    BackupInfo localBackupInfo = this.d.e();\n    return (localBackupInfo.isBackupExists()) && ((1 > localBackupInfo.getMetaDataVersion()) || (d.j.l.d()));\n  }"} {"seed":"private void c()\n  {\n    if (b())\n    {\n      com.viber.voip.backup.b.b localb = new com.viber.voip.backup.b.b(this.b.getApplicationContext(), this.d);\n      af localaf = UserManager.from(this.b).getRegistrationValues();\n      com.viber.voip.backup.f.h localh = new com.viber.voip.backup.f.h(localaf.l(), localaf.g(), localb.b(), f.b());\n      this.c.b(localaf.g(), localh);\n    }\n  }"} {"seed":"public void a()\n  {\n    this.e.post(new Runnable()\n    {\n      public void run()\n      {\n        d.j.l.a(true);\n        if (h.a(h.this))\n          h.b(h.this);\n      }\n    });\n  }"} {"seed":"public void a(Uri paramUri, int paramInt)\n  {\n  }"} {"seed":"public void a(Uri paramUri, com.viber.voip.backup.c.d paramd)\n  {\n    if (t.f(paramUri));\n  }"} {"seed":"public void a(Engine paramEngine)\n  {\n    ServiceStateDelegate.ServiceState localServiceState = paramEngine.getServiceState();\n    new k(this, this.e).a(this.c);\n    paramEngine.getDelegatesManager().getConnectionListener().registerDelegate(this, this.e);\n    if (ServiceStateDelegate.ServiceState.SERVICE_CONNECTED == localServiceState)\n    {\n      this.g = true;\n      a();\n    }\n    this.f = new d.a(this.e, false)\n    {\n      public void a()\n      {\n        if (ViberApplication.isActivated())\n          h.this.a();\n      }\n    };\n    com.viber.voip.memberid.d.a(this.f);\n  }"} {"seed":"public boolean a(Uri paramUri)\n  {\n    return t.f(paramUri);\n  }"} {"seed":"public void b(Uri paramUri)\n  {\n    if (t.f(paramUri))\n      d.j.l.a(false);\n    while (!t.e(paramUri))\n      return;\n    c();\n  }"} {"seed":"public void c(Uri paramUri)\n  {\n    if (t.f(paramUri));\n  }"} {"seed":"public void onConnect()\n  {\n  }"} {"seed":"public void onConnectionStateChange(int paramInt)\n  {\n    if (paramInt == 3)\n    {\n      this.g = true;\n      c();\n      return;\n    }\n    this.g = false;\n  }"} {"seed":"public void a()\n      {\n        if (ViberApplication.isActivated())\n          h.this.a();\n      }"} {"seed":"public void run()\n      {\n        d.j.l.a(true);\n        if (h.a(h.this))\n          h.b(h.this);\n      }"} {"seed":"public static C32081aW parseFromJson(C13080hr r3) {\n        C32081aW r2 = new C32081aW();\n        if (r3.A0g() != C13120hv.START_OBJECT) {\n            r3.A0f();\n            return null;\n        }\n        while (r3.A0p() != C13120hv.END_OBJECT) {\n            String A0i = r3.A0i();\n            r3.A0p();\n            if (\"containermodule\".equals(A0i)) {\n                if (r3.A0g() != C13120hv.VALUE_NULL) {\n                    r3.A0t();\n                }\n            } else if (\"should_prefetch\".equals(A0i)) {\n                r2.A00 = r3.A0O();\n            } else if (\"should_prefetch_thumbnails\".equals(A0i)) {\n                r3.A0O();\n            }\n            r3.A0f();\n        }\n        return r2;\n    }"} {"seed":"public static Player calculateBattingAverage(Player player) {\n\t\tdouble battingAverage = 0;\n\t\ttry {\n\t\t\tbattingAverage = (1.00 * player.getBattingStats().getTotalRunsScored())\n\t\t\t\t\t/ (player.getBattingStats().getInningsBatted() - player.getBattingStats().getNotOuts());\n\t\t\tString df = String.format(\"%.2f\", battingAverage);\n\t\t\tbattingAverage = Double.parseDouble(df);\n\t\t} catch (ArithmeticException e) {\n\t\t\tLOGGER.error(\n\t\t\t\t\t\"Arithmetic exception while calculating batting average, default setting to 0 for player name : {}\",\n\t\t\t\t\tplayer.getPlayerName());\n\t\t}\n\t\tplayer.getBattingStats().setBattingAverage(battingAverage);\n\t\treturn player;\n\t}"} {"seed":"public static Player calculateEconomyRate(Player player) {\n\t\tdouble economyRate = 0;\n\t\ttry {\n\t\t\tif(player.getBowlingStats().getOversBowled()>0) {\n\t\t\t\teconomyRate = (1.00 * player.getBowlingStats().getTotalRunsGiven())\n\t\t\t\t\t\t/ player.getBowlingStats().getOversBowled();\n\t\t\t\tString df = String.format(\"%.2f\", economyRate);\n\t\t\t\teconomyRate = Double.parseDouble(df);\n\t\t\t}\n\t\t} catch (ArithmeticException e) {\n\t\t\tLOGGER.error(\"Arithmetic exception while calculating economy, default setting to 0 for player name : {}\",\n\t\t\t\t\tplayer.getPlayerName());\n\t\t}\n\t\tplayer.getBowlingStats().setEconomyRate(economyRate);\n\t\treturn player;\n\t}"} {"seed":"public static Player calculateStrikeRate(Player player) {\n\t\tdouble strikeRate = 0;\n\t\ttry {\n\t\t\tif(player.getBattingStats().getTotalBallsPlayed() > 0) {\n\t\t\t\tstrikeRate = (100.00 * player.getBattingStats().getTotalRunsScored())\n\t\t\t\t\t\t/ (player.getBattingStats().getTotalBallsPlayed());\n\t\t\t\tString df = String.format(\"%.2f\", strikeRate);\n\t\t\t\tstrikeRate = Double.parseDouble(df);\n\t\t\t}\n\t\t} catch (ArithmeticException e) {\n\t\t\tLOGGER.error(\n\t\t\t\t\t\"Arithmetic exception while calculating strike rate, default setting to 0 for player name : {}\",\n\t\t\t\t\tplayer.getPlayerName());\n\t\t}\n\t\tplayer.getBattingStats().setStrikeRate(strikeRate);\n\t\treturn player;\n\t}"} {"seed":"public static Long calculateTotalNumberOfNotOuts(List<PlayerStatPerMatch> matchRecords) {\n\t\tLong inningsBatted = 0L;\n\t\tinningsBatted = matchRecords.stream().filter(record -> record.hasBatted() && record.isNotOut()).count();\n\t\treturn inningsBatted;\n\t}"} {"seed":"public static Long calculateTotalNumberOfRunsScored(List<PlayerStatPerMatch> matchRecords) {\n\t\tLong runsScored = 0L;\n\t\trunsScored = matchRecords.stream().filter(record -> record.hasBatted() && record.getRunsScored() > 0)\n\t\t\t\t.mapToLong(PlayerStatPerMatch::getRunsScored).sum();\n\t\treturn runsScored;\n\t}"} {"seed":"public static Long calculateTotalNumberOfTimesBatted(List<PlayerStatPerMatch> matchRecords) {\n\t\tLong timesBatted = 0L;\n\t\ttimesBatted = matchRecords.stream().filter(record -> record.hasBatted()).count();\n\t\treturn timesBatted;\n\t}"} {"seed":"public static Long calculateTotalBallsPlayed(List<PlayerStatPerMatch> matchRecords) {\n\t\tLong ballsPlayed = 0L;\n\t\tballsPlayed = matchRecords.stream().filter(record -> record.hasBatted() && record.getBallsPlayed() > 0)\n\t\t\t\t.mapToLong(PlayerStatPerMatch::getBallsPlayed).sum();\n\t\treturn ballsPlayed;\n\t}"} {"seed":"public static Long calculateTotalMatchesPlayed(List<PlayerStatPerMatch> matchRecords) {\n\t\treturn matchRecords.stream().filter(record -> record.hasBatted() || record.hasBowled()).count();\n\t}"} {"seed":"public static Long calculateTotalNumberOfRunsGiven(List<PlayerStatPerMatch> matchRecords) {\n\t\tLong runsGiven = 0L;\n\t\trunsGiven = matchRecords.stream().filter(record -> record.hasBowled() && record.getRunsGiven() > 0)\n\t\t\t\t.mapToLong(PlayerStatPerMatch::getRunsGiven).sum();\n\t\treturn runsGiven;\n\t}"} {"seed":"@PostConstruct\n\tpublic void init() {\n\t\tif(Secao.getUsuarioGerente()==null) {\n\t\t\tredirecionador.redireciona(\"/bancogerente/view/index/index.xhtml\");\n\t\t}\n\t}"} {"seed":"public String nomeUsuario() {\n\t\tif(usuarioGerente!=null) {\n\t\t\treturn \"Gerente: \" + usuarioGerente.getPessoaFisica().getNome() + \" \";\n\t\t}\n\t\treturn \"\";\n\t}"} {"seed":"public void abrirContaClick() {\n\t\ttry {\n\t\t\tFacesContext.getCurrentInstance().getExternalContext().redirect(\"/bancogerente/view/abrirconta/abrirconta.xhtml\");\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}"} {"seed":"public void encerrarContaClick() {\n\t\ttry {\n\t\t\tFacesContext.getCurrentInstance().getExternalContext().redirect(\"/bancogerente/view/encerrarconta/encerrarconta.xhtml\");\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}"} {"seed":"public void adicionarTitularClick() {\n\t\ttry {\n\t\t\tFacesContext.getCurrentInstance().getExternalContext().redirect(\"/bancogerente/view/adicionartitular/adicionartitular.xhtml\");\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}"} {"seed":"public void verExtratoClick() {\n\t\ttry {\n\t\t\tFacesContext.getCurrentInstance().getExternalContext().redirect(\"/bancogerente/view/verextrato/verextrato.xhtml\");\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}"} {"seed":"public void sair() {\n\t\tSecao.setUsuarioGerente(null);\n\t\ttry {\n\t\t\tFacesContext.getCurrentInstance().getExternalContext().redirect(\"/bancogerente/view/index/index.xhtml\");\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}"} {"seed":"public void painelClick() {\n\t\ttry {\n\t\t\tFacesContext.getCurrentInstance().getExternalContext().redirect(\"/bancogerente/view/painel/painel.xhtml\");\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}"} {"seed":"public UsuarioGerente getUsuarioGerente() {\n\t\treturn usuarioGerente;\n\t}"} {"seed":"public void setUsuarioGerente(UsuarioGerente usuarioGerente) {\n\t\tthis.usuarioGerente = usuarioGerente;\n\t}"} {"seed":"public void fetchPower(long starttime,long endtime);"} {"seed":"public void refresh();"} {"seed":"public void refreshInterval(long interval);"} {"seed":"/**\n     * <p>The number of entries to return on each page. Valid values: 1 to 50.</p>\n     * <br>\n     * <p>Default value: 10.</p>\n     */\npublic static ListContainerAppsRequest build(java.util.Map<String, ?> map) throws Exception {\n        ListContainerAppsRequest self = new ListContainerAppsRequest();\n        return TeaModel.build(map, self);\n    }"} {"seed":"/**\n     * <p>The number of entries to return on each page. Valid values: 1 to 50.</p>\n     * <br>\n     * <p>Default value: 10.</p>\n     */\npublic ListContainerAppsRequest setPageNumber(Integer pageNumber) {\n        this.pageNumber = pageNumber;\n        return this;\n    }"} {"seed":"/**\n     * <p>The number of entries to return on each page. Valid values: 1 to 50.</p>\n     * <br>\n     * <p>Default value: 10.</p>\n     */\npublic Integer getPageNumber() {\n        return this.pageNumber;\n    }"} {"seed":"/**\n     * <p>The number of entries to return on each page. Valid values: 1 to 50.</p>\n     * <br>\n     * <p>Default value: 10.</p>\n     */\npublic ListContainerAppsRequest setPageSize(Integer pageSize) {\n        this.pageSize = pageSize;\n        return this;\n    }"} {"seed":"/**\n     * <p>The number of entries to return on each page. Valid values: 1 to 50.</p>\n     * <br>\n     * <p>Default value: 10.</p>\n     */\npublic Integer getPageSize() {\n        return this.pageSize;\n    }"} {"seed":"public void createLog(Scenario cenario);"} {"seed":"public void addMensageInfo(String mensagem);"} {"seed":"public void addMensageInfoPrint(String mensagem);"} {"seed":"public void addMensageSuccessPrint(String string);"} {"seed":"public void addMensageFailPrint(String string);"} {"seed":"@Override\n    public List<Student> list() {\n        return this.iStudentDAO.findAll();\n    }"} {"seed":"@Override\n    public void Insert(String name, String passwd, Integer cla, String realName) {\n         this.iStudentDAO.insert(name,passwd,cla,realName);\n    }"} {"seed":"@Override\n    public Student findByName(String name) {\n        return this.iStudentDAO.findByName(name);\n    }"} {"seed":"@PostConstruct\n    public void setup() {\n        MockitoAnnotations.initMocks(this);\n        TerminalResource terminalResource = new TerminalResource();\n        ReflectionTestUtils.setField(terminalResource, \"terminalRepository\", terminalRepository);\n        this.restTerminalMockMvc = MockMvcBuilders.standaloneSetup(terminalResource)\n            .setCustomArgumentResolvers(pageableArgumentResolver)\n            .setMessageConverters(jacksonMessageConverter).build();\n    }"} {"seed":"@Before\n    public void initTest() {\n        terminal = new Terminal();\n        terminal.setName(DEFAULT_NAME);\n        terminal.setArea(DEFAULT_AREA);\n        terminal.setCountryCode(DEFAULT_COUNTRY_CODE);\n        terminal.setTimezone(DEFAULT_TIMEZONE);\n    }"} {"seed":"@Test\n    @Transactional\n    public void createTerminal() throws Exception {\n        int databaseSizeBeforeCreate = terminalRepository.findAll().size();\n\n        // Create the Terminal\n\n        restTerminalMockMvc.perform(post(\"/api/terminals\")\n                .contentType(TestUtil.APPLICATION_JSON_UTF8)\n                .content(TestUtil.convertObjectToJsonBytes(terminal)))\n                .andExpect(status().isCreated());\n\n        // Validate the Terminal in the database\n        List<Terminal> terminals = terminalRepository.findAll();\n        assertThat(terminals).hasSize(databaseSizeBeforeCreate + 1);\n        Terminal testTerminal = terminals.get(terminals.size() - 1);\n        assertThat(testTerminal.getName()).isEqualTo(DEFAULT_NAME);\n        assertThat(testTerminal.getArea()).isEqualTo(DEFAULT_AREA);\n        assertThat(testTerminal.getCountryCode()).isEqualTo(DEFAULT_COUNTRY_CODE);\n        assertThat(testTerminal.getTimezone()).isEqualTo(DEFAULT_TIMEZONE);\n    }"} {"seed":"@Test\n    @Transactional\n    public void checkNameIsRequired() throws Exception {\n        int databaseSizeBeforeTest = terminalRepository.findAll().size();\n        // set the field null\n        terminal.setName(null);\n\n        // Create the Terminal, which fails.\n\n        restTerminalMockMvc.perform(post(\"/api/terminals\")\n                .contentType(TestUtil.APPLICATION_JSON_UTF8)\n                .content(TestUtil.convertObjectToJsonBytes(terminal)))\n                .andExpect(status().isBadRequest());\n\n        List<Terminal> terminals = terminalRepository.findAll();\n        assertThat(terminals).hasSize(databaseSizeBeforeTest);\n    }"} {"seed":"@Test\n    @Transactional\n    public void checkAreaIsRequired() throws Exception {\n        int databaseSizeBeforeTest = terminalRepository.findAll().size();\n        // set the field null\n        terminal.setArea(null);\n\n        // Create the Terminal, which fails.\n\n        restTerminalMockMvc.perform(post(\"/api/terminals\")\n                .contentType(TestUtil.APPLICATION_JSON_UTF8)\n                .content(TestUtil.convertObjectToJsonBytes(terminal)))\n                .andExpect(status().isBadRequest());\n\n        List<Terminal> terminals = terminalRepository.findAll();\n        assertThat(terminals).hasSize(databaseSizeBeforeTest);\n    }"} {"seed":"@Test\n    @Transactional\n    public void checkCountryCodeIsRequired() throws Exception {\n        int databaseSizeBeforeTest = terminalRepository.findAll().size();\n        // set the field null\n        terminal.setCountryCode(null);\n\n        // Create the Terminal, which fails.\n\n        restTerminalMockMvc.perform(post(\"/api/terminals\")\n                .contentType(TestUtil.APPLICATION_JSON_UTF8)\n                .content(TestUtil.convertObjectToJsonBytes(terminal)))\n                .andExpect(status().isBadRequest());\n\n        List<Terminal> terminals = terminalRepository.findAll();\n        assertThat(terminals).hasSize(databaseSizeBeforeTest);\n    }"} {"seed":"@Test\n    @Transactional\n    public void checkTimezoneIsRequired() throws Exception {\n        int databaseSizeBeforeTest = terminalRepository.findAll().size();\n        // set the field null\n        terminal.setTimezone(null);\n\n        // Create the Terminal, which fails.\n\n        restTerminalMockMvc.perform(post(\"/api/terminals\")\n                .contentType(TestUtil.APPLICATION_JSON_UTF8)\n                .content(TestUtil.convertObjectToJsonBytes(terminal)))\n                .andExpect(status().isBadRequest());\n\n        List<Terminal> terminals = terminalRepository.findAll();\n        assertThat(terminals).hasSize(databaseSizeBeforeTest);\n    }"} {"seed":"@Test\n    @Transactional\n    public void getAllTerminals() throws Exception {\n        // Initialize the database\n        terminalRepository.saveAndFlush(terminal);\n\n        // Get all the terminals\n        restTerminalMockMvc.perform(get(\"/api/terminals?sort=id,desc\"))\n                .andExpect(status().isOk())\n                .andExpect(content().contentType(MediaType.APPLICATION_JSON))\n                .andExpect(jsonPath(\"$.[*].id\").value(hasItem(terminal.getId().intValue())))\n                .andExpect(jsonPath(\"$.[*].name\").value(hasItem(DEFAULT_NAME.toString())))\n                .andExpect(jsonPath(\"$.[*].area\").value(hasItem(DEFAULT_AREA.toString())))\n                .andExpect(jsonPath(\"$.[*].countryCode\").value(hasItem(DEFAULT_COUNTRY_CODE.toString())))\n                .andExpect(jsonPath(\"$.[*].timezone\").value(hasItem(DEFAULT_TIMEZONE.toString())));\n    }"} {"seed":"@Test\n    @Transactional\n    public void getTerminal() throws Exception {\n        // Initialize the database\n        terminalRepository.saveAndFlush(terminal);\n\n        // Get the terminal\n        restTerminalMockMvc.perform(get(\"/api/terminals/{id}\", terminal.getId()))\n            .andExpect(status().isOk())\n            .andExpect(content().contentType(MediaType.APPLICATION_JSON))\n            .andExpect(jsonPath(\"$.id\").value(terminal.getId().intValue()))\n            .andExpect(jsonPath(\"$.name\").value(DEFAULT_NAME.toString()))\n            .andExpect(jsonPath(\"$.area\").value(DEFAULT_AREA.toString()))\n            .andExpect(jsonPath(\"$.countryCode\").value(DEFAULT_COUNTRY_CODE.toString()))\n            .andExpect(jsonPath(\"$.timezone\").value(DEFAULT_TIMEZONE.toString()));\n    }"} {"seed":"@Test\n    @Transactional\n    public void getNonExistingTerminal() throws Exception {\n        // Get the terminal\n        restTerminalMockMvc.perform(get(\"/api/terminals/{id}\", Long.MAX_VALUE))\n                .andExpect(status().isNotFound());\n    }"} {"seed":"@Test\n    @Transactional\n    public void updateTerminal() throws Exception {\n        // Initialize the database\n        terminalRepository.saveAndFlush(terminal);\n\n\t\tint databaseSizeBeforeUpdate = terminalRepository.findAll().size();\n\n        // Update the terminal\n        terminal.setName(UPDATED_NAME);\n        terminal.setArea(UPDATED_AREA);\n        terminal.setCountryCode(UPDATED_COUNTRY_CODE);\n        terminal.setTimezone(UPDATED_TIMEZONE);\n\n        restTerminalMockMvc.perform(put(\"/api/terminals\")\n                .contentType(TestUtil.APPLICATION_JSON_UTF8)\n                .content(TestUtil.convertObjectToJsonBytes(terminal)))\n                .andExpect(status().isOk());\n\n        // Validate the Terminal in the database\n        List<Terminal> terminals = terminalRepository.findAll();\n        assertThat(terminals).hasSize(databaseSizeBeforeUpdate);\n        Terminal testTerminal = terminals.get(terminals.size() - 1);\n        assertThat(testTerminal.getName()).isEqualTo(UPDATED_NAME);\n        assertThat(testTerminal.getArea()).isEqualTo(UPDATED_AREA);\n        assertThat(testTerminal.getCountryCode()).isEqualTo(UPDATED_COUNTRY_CODE);\n        assertThat(testTerminal.getTimezone()).isEqualTo(UPDATED_TIMEZONE);\n    }"} {"seed":"@Test\n    @Transactional\n    public void deleteTerminal() throws Exception {\n        // Initialize the database\n        terminalRepository.saveAndFlush(terminal);\n\n\t\tint databaseSizeBeforeDelete = terminalRepository.findAll().size();\n\n        // Get the terminal\n        restTerminalMockMvc.perform(delete(\"/api/terminals/{id}\", terminal.getId())\n                .accept(TestUtil.APPLICATION_JSON_UTF8))\n                .andExpect(status().isOk());\n\n        // Validate the database is empty\n        List<Terminal> terminals = terminalRepository.findAll();\n        assertThat(terminals).hasSize(databaseSizeBeforeDelete - 1);\n    }"} {"seed":"public void Train(LinkedList<DataSet> dataSets, int numEpocs){\n        for(int i =0;i<numEpocs;i++){\n            for(DataSet dataSet:dataSets){\n                ForwardPropagate(dataSet.Values);\n                BackPropagate(dataSet.Targets);\n            }\n        }\n    }"} {"seed":"public void Train(LinkedList<DataSet> dataSets, double minimumError){\n        double error = 1.0;\n        int numEpochs = 0;\n\n        while(error>minimumError && numEpochs<Integer.MAX_VALUE){\n            LinkedList<Double> errors = new LinkedList<>();\n            for(DataSet dataSet: dataSets){\n                ForwardPropagate(dataSet.Values);\n                BackPropagate(dataSet.Targets);\n                errors.add(CalculateError(dataSet.Targets));\n            }\n            error = Average(errors);\n            numEpochs+=1;\n        }\n        System.out.println(\"Epochs: \"+numEpochs);\n    }"} {"seed":"private void ForwardPropagate(double[] inputs){\n        int i = 0;\n        for(Neuron a:InputLayer){\n            a.Value = inputs[i++];\n        }\n        HiddenLayers.forEach((a)->a.forEach((b)->b.CalculateValue()));\n        OutputLayer.forEach((a)->a.CalculateValue());\n    }"} {"seed":"private void BackPropagate(double[] targets){\n        int i = 0;\n        for(Neuron a:OutputLayer){\n            a.CalculateGradient(targets[i++]);\n        }\n        HiddenLayers = Reverse(HiddenLayers);\n        HiddenLayers.forEach((a)->a.forEach((b)->b.CalculateGradient(null)));\n        HiddenLayers.forEach((a)->a.forEach((b)->b.UpdateWeights(LearnRate,Momentum)));\n        HiddenLayers = Reverse(HiddenLayers);\n        OutputLayer.forEach((a)->a.UpdateWeights(LearnRate,Momentum));\n    }"} {"seed":"public double[] Compute(double[] inputs){\n        ForwardPropagate(inputs);\n        double[] ans = new double[OutputLayer.size()];\n        for(int i = 0; i<OutputLayer.size();i++){\n            ans[i]=OutputLayer.get(i).Value;\n        }\n        return ans;\n    }"} {"seed":"private double CalculateError(double[] targets){\n        int i = 0;\n        double ans = 0;\n        for(Neuron a: OutputLayer){\n            ans+= Math.abs(a.CalculateError(targets[i++]));\n        }\n        return ans;\n    }"} {"seed":"public static double GetRandom(){\n        return 2* R.nextDouble()-1;\n    }"} {"seed":"private LinkedList<LinkedList<Neuron>> Reverse(LinkedList<LinkedList<Neuron>> list){\n        LinkedList<LinkedList<Neuron>> ans = new LinkedList<>();\n        for(int i = 1; i<=list.size();i++){\n            ans.add(list.get(list.size()-i));\n        }\n        return ans;\n    }"} {"seed":"private Double Average(LinkedList<Double> list){\n        double ans = 0.0;\n        for(Double a:list){\n            ans+=a;\n        }\n        return ans /list.size();\n    }"} {"seed":"@Override\n    public String toString() {\n        String ans = \"\";\n        ans+= \"Learn Rate: \"+ LearnRate+\"\\n\";\n        ans+= \"Momentum: \"+Momentum+\"\\n\";\n        ans+= \"Input Layer: \\n\";\n        for(int i = 0; i<InputLayer.size();i++){\n            ans+= \"Neuron \"+i+\"\\n\";\n            ans+= InputLayer.get(i).toString();\n        }\n        ans+=\"Hidden Layers\\n\";\n        for(int i = 0; i<HiddenLayers.size();i++){\n            ans+= \"Hidden Layer \"+i+\"\\n\";\n            for(int x = 0;x<HiddenLayers.get(i).size();x++) {\n                ans += \"Neuron \" + x+\"\\n\";\n                ans += HiddenLayers.get(i).get(x).toString();\n            }\n        }\n        ans+=\"Output Layer\\n\";\n        for(int i = 0; i<OutputLayer.size();i++){\n            ans+= \"Neuron \"+i+\"\\n\";\n            ans+= OutputLayer.get(i).toString();\n        }\n        ans+= \"Synapses: \\n\";\n        LinkedList<Synapse> synapses = new LinkedList<>();\n        for(Neuron n:InputLayer){\n            synapses.addAll(n.InputSynapses);\n            synapses.addAll(n.OutputSynapses);\n        }\n        for(LinkedList<Neuron> ll:HiddenLayers) {\n            for (Neuron n : ll) {\n                synapses.addAll(n.InputSynapses);\n                synapses.addAll(n.OutputSynapses);\n            }\n        }\n        for(Neuron n:OutputLayer){\n            synapses.addAll(n.InputSynapses);\n            synapses.addAll(n.OutputSynapses);\n        }\n        for(Synapse s:synapses){\n            ans+=\"Synapse\\n\";\n            ans+=s.toString();\n        }\n        return ans;\n    }"} {"seed":"/**\n\t * \n\t */\npublic void growSnake() {\n\t\tSnakeObj.length++;\n\t\txHead++;\n\t\tyHead++; \n\t\tSnakeArray[xHead][yHead] = 1; \n\t\tthis.repaint(); \n\t}"} {"seed":"/**\n\t * \n\t */\npublic void shrinkSnake() {\n\t\tSnakeObj.length--;\n\t\tSnakeArray[xTail][yTail] = 0; \n\t\txTail--;\n\t\tyTail--; \n\t\tthis.repaint(); \n\t}"} {"seed":"/**\n\t * \n\t */\npublic void paintComponent(Graphics gc) {\n\t\t// draw the head of the snake\n\t\tgc.setColor(Color.RED);\n\t\tgc.fillRect(xHead * 5, yHead * 5, 5, 5);\n\t\t\n\t\tgc.setColor(Color.BLACK);\n\t\tfor (int i = 0; i < SnakeArray.length; i++) {\n\t\t\tfor (int j = 0; j < SnakeArray[0].length; j++) {\n\t\t\t\tif (containsSnake(i, j)) {\n\t\t\t\t\tgc.fillRect(i * 5, j * 5, 20, 20);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}"} {"seed":"/**\n\t * \n\t */\npublic boolean containsSnake(int xcoord, int ycoord) {\n\t\treturn (SnakeArray[xcoord][ycoord] == 1);\n\t}"} {"seed":"/**\n\t * \n\t */\npublic Dimension getPreferredSize() {\n\t\treturn new Dimension(500, 500);\n\t}"} {"seed":"/**\n\t * \n\t */\npublic void moveSnake(ActionListener a) {\n\t\t// handle collisions\n\t\tif (SnakeArray[xHead + xDir][yHead + yDir] == 1) {\n\t\t\t//handle it\n\t\t}\n\t\t\n\t\t// move the snake in the direction specified\n\t\tfor (int i = xHead; i > xHead - length; i--) {\n\t\t\tfor (int j = yHead; j > yHead - length; j--) {\t\n\t\t\t\t\n\t\t\t\tSnakeArray[i][j] = 1;\n\t\t\t\tSnakeArray[i][j] = 0;\n\t\t\t}\n\t\t}\n\t\t// repaint the snake\n\t\tthis.repaint();\n\t}"} {"seed":"@Test\n    public void testDIContainerExceptionString() {\n        DIContainerException e = new DIContainerException(\"Test Message\");\n        assertEquals(\"Test Message\", e.getMessage());\n    }"} {"seed":"@Test\n    public void testDIContainerExceptionThrowable() {\n        Exception cause = new Exception(\"Test Message\");\n        DIContainerException e = new DIContainerException(cause);\n        assertEquals(\"Test Message\", e.getCause().getMessage());\n    }"} {"seed":"@Test\n    public void testDIContainerExceptionStringThrowable() {\n        Exception cause = new Exception(\"Test Message1\");\n        DIContainerException e = new DIContainerException(\"Test Message2\", cause);\n        assertEquals(\"Test Message2\", e.getMessage());\n        assertEquals(\"Test Message1\", e.getCause().getMessage());\n    }"} {"seed":"@Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }"} {"seed":"@Test\n    public void testGetItemShouldDelegateCallToDao() {\n        //GIVEN\n        Item item = createItem();\n        given(itemDao.findById(TEST_ID)).willReturn(java.util.Optional.ofNullable(item));\n        //WHEN\n        Item result = underTest.getItem(TEST_ID);\n        //THEN\n        Assert.assertEquals(item, result);\n        then(itemDao).should().findById(TEST_ID);\n    }"} {"seed":"@Test\n    public void testGetItemsBySubstringShouldDelegateCallToDao() {\n        //GIVEN\n        Item item = createItem();\n        Page<Item> itemPage = new PageImpl<>(Arrays.asList(item));\n        Pageable pageable = Mockito.mock(Pageable.class);\n        given(itemDao.findAllByTitleContainingIgnoreCase(TEST_SUBSTRING, pageable)).willReturn(itemPage);\n        //WHEN\n        Page<Item> result = underTest.getItemsBySubstring(TEST_SUBSTRING, pageable);\n        //THEN\n        Assert.assertEquals(itemPage, result);\n        then(itemDao).should().findAllByTitleContainingIgnoreCase(TEST_SUBSTRING, pageable);\n    }"} {"seed":"@Test\n    public void testSaveByImdbIdShouldGetItemIdIfItemAlreadyExists() {\n        //GIVEN\n        Item item = createItem();\n        given(itemDao.existsByImdbId(TEST_IMDB_ID)).willReturn(true);\n        given(itemDao.findByImdbId(TEST_IMDB_ID)).willReturn(item);\n        //WHEN\n        Long result = underTest.saveByImdbId(TEST_IMDB_ID);\n        //THEN\n        Assert.assertEquals(TEST_ID, result);\n        then(itemDao).should().existsByImdbId(TEST_IMDB_ID);\n        then(itemDao).should().findByImdbId(TEST_IMDB_ID);\n    }"} {"seed":"@Test\n    public void testSaveByImdbIdShouldReturnIdOfNewlyCreatedItemIfNotAlreadyExists() throws IOException {\n        //GIVEN\n        Item itemToSave = Item.builder().build();\n        Item savedItem = createItem();\n        given(itemDao.existsByImdbId(TEST_IMDB_ID)).willReturn(false);\n        given(imdbAPIGetService.getSpecificSearchResults(TEST_IMDB_ID)).willReturn(TEST_SEARCH_RESULT);\n        given(jsonParserService.getItem(TEST_SEARCH_RESULT)).willReturn(itemToSave);\n        given(itemDao.save(itemToSave)).willReturn(savedItem);\n        //WHEN\n        Long result = underTest.saveByImdbId(TEST_IMDB_ID);\n        //THEN\n        Assert.assertEquals(TEST_ID, result);\n        then(itemDao).should().existsByImdbId(TEST_IMDB_ID);\n        then(imdbAPIGetService).should().getSpecificSearchResults(TEST_IMDB_ID);\n        then(jsonParserService).should().getItem(TEST_SEARCH_RESULT);\n        then(itemDao).should().save(itemToSave);\n    }"} {"seed":"@Test(expected = ImdbException.class)\n    public void testSaveByImdbIdShouldThrowExceptionIfImdbAPIFailed() throws IOException {\n        //GIVEN\n        given(imdbAPIGetService.getSpecificSearchResults(any())).willThrow(new IOException());\n        //WHEN\n        Long result = underTest.saveByImdbId(TEST_IMDB_ID);\n        //THEN exception\n    }"} {"seed":"@Test\n    public void testSaveItemShouldSaveByTitleIfImdbIdIsNotPresent() throws IOException {\n        //GIVEN\n        Item itemToSave = Item.builder().build();\n        Item savedItem = createItem();\n        UploadItemRequest uploadItemRequest = createUploadItemRequest(\"\");\n        given(imdbAPIGetService.getGeneralSearchResults(uploadItemRequest)).willReturn(TEST_SEARCH_RESULT);\n        given(jsonParserService.getImdbId(TEST_SEARCH_RESULT)).willReturn(TEST_IMDB_ID);\n        given(itemDao.existsByImdbId(TEST_IMDB_ID)).willReturn(false);\n        given(imdbAPIGetService.getSpecificSearchResults(TEST_IMDB_ID)).willReturn(TEST_SEARCH_RESULT);\n        given(jsonParserService.getItem(TEST_SEARCH_RESULT)).willReturn(itemToSave);\n        given(itemDao.save(itemToSave)).willReturn(savedItem);\n        //WHEN\n        Long result = underTest.saveItem(uploadItemRequest);\n        //THEN\n        Assert.assertEquals(TEST_ID, result);\n        then(imdbAPIGetService).should().getGeneralSearchResults(uploadItemRequest);\n        then(jsonParserService).should().getImdbId(TEST_SEARCH_RESULT);\n        then(itemDao).should().existsByImdbId(TEST_IMDB_ID);\n        then(imdbAPIGetService).should().getSpecificSearchResults(TEST_IMDB_ID);\n        then(jsonParserService).should().getItem(TEST_SEARCH_RESULT);\n        then(itemDao).should().save(itemToSave);\n    }"} {"seed":"@Test\n    public void testSaveItemShouldSaveByURLIfImdbIdIsPresent() throws IOException {\n        //GIVEN\n        Item itemToSave = Item.builder().build();\n        Item savedItem = createItem();\n        UploadItemRequest uploadItemRequest = createUploadItemRequest(URL_CONTAINING_IMDB_ID);\n        given(itemDao.existsByImdbId(TEST_IMDB_ID)).willReturn(false);\n        given(imdbAPIGetService.getSpecificSearchResults(TEST_IMDB_ID)).willReturn(TEST_SEARCH_RESULT);\n        given(jsonParserService.getItem(TEST_SEARCH_RESULT)).willReturn(itemToSave);\n        given(itemDao.save(itemToSave)).willReturn(savedItem);\n        //WHEN\n        Long result = underTest.saveItem(uploadItemRequest);\n        //THEN\n        Assert.assertEquals(TEST_ID, result);\n        then(itemDao).should().existsByImdbId(TEST_IMDB_ID);\n        then(imdbAPIGetService).should().getSpecificSearchResults(TEST_IMDB_ID);\n        then(jsonParserService).should().getItem(TEST_SEARCH_RESULT);\n        then(itemDao).should().save(itemToSave);\n    }"} {"seed":"@Test(expected = ImdbException.class)\n    public void testSaveItemShouldThrowExceptionIfImdbAPIFailed() throws IOException {\n        //GIVEN\n        UploadItemRequest uploadItemRequest = createUploadItemRequest(\"\");\n        given(imdbAPIGetService.getGeneralSearchResults(any())).willThrow(new IOException());\n        //WHEN\n        Long result = underTest.saveItem(uploadItemRequest);\n        //THEN exception\n    }"} {"seed":"private Item createItem() {\n        return Item.builder()\n                .id(TEST_ID)\n                .build();\n    }"} {"seed":"private UploadItemRequest createUploadItemRequest(String titleOrURL) {\n        UploadItemRequest uploadItemRequest = new UploadItemRequest();\n        uploadItemRequest.setTitleOrURL(titleOrURL);\n        return uploadItemRequest;\n    }"} {"seed":"public int getNitFabrica() {\n        return nitFabrica;\n    }"} {"seed":"public void setNitFabrica(int nitFabrica) {\n        this.nitFabrica = nitFabrica;\n    }"} {"seed":"public int getCedula() {\n        return cedula;\n    }"} {"seed":"public void setCedula(int cedula) {\n        this.cedula = cedula;\n    }"} {"seed":"public final BaseRemoteRepository invoke() {\n        return BaseMarketRemoteRepository.Holder.INSTANCE.getINSTANCE();"} {"seed":"/**\n     * Gets the body of the download response.\n     *\n     * @param outputStream Stream that has the response body read into it\n     * @param options Options for the download\n     * @throws IOException If an I/O error occurs\n     */\npublic void body(OutputStream outputStream, ReliableDownloadOptions options) throws IOException {\n        for (ByteBuf buffer : this.asyncResponse.body(options).toIterable()) {\n            buffer.readBytes(outputStream, buffer.readableBytes());\n            buffer.release();\n        }\n    }"} {"seed":"@Test\n    public void testLoginWithRightCredentials(){\n        // GIVEN\n        String request = \"{ \\n\" +\n                \"\\t\\\"username\\\":\\\"ferryscanner\\\",\\n\" +\n                \"\\t\\\"password\\\":\\\"P@ssword\\\"\\n\" +\n                \"}\";\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        HttpEntity<String> httpEntity = new HttpEntity<>(request, headers);\n\n        ResponseEntity<AuthenticationResponse> exchange = restTemplate.exchange(\n                getUri() + \"/login\",\n                HttpMethod.POST,\n                httpEntity,\n                AuthenticationResponse.class);\n\n        // THEN\n        assertNotNull(exchange.getBody());\n        assertEquals(HttpStatus.OK, exchange.getBody().getStatus());\n\n    }"} {"seed":"@Test\n    public void testLoginNotFoundUser() {\n        // GIVEN\n        String request = \"{ \\n\" +\n                \"\\t\\\"username\\\":\\\"esilioni\\\",\\n\" +\n                \"\\t\\\"password\\\":\\\"P@ssword\\\"\\n\" +\n                \"}\";\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        HttpEntity<String> httpEntity = new HttpEntity<>(request, headers);\n\n        ResponseEntity<AuthenticationResponse> exchange = restTemplate.exchange(\n                getUri() + \"/login\",\n                HttpMethod.POST,\n                httpEntity,\n                AuthenticationResponse.class);\n\n        // THEN\n        assertEquals(HttpStatus.NOT_FOUND, exchange.getBody().getStatus());\n        assertEquals(\"Username:esilioni not found.\", exchange.getBody().getUserMessage());\n\n    }"} {"seed":"@Test\n    public void testUnauthorisedUser() {\n        // GIVEN\n        String request = \"{ \\n\" +\n                \"\\t\\\"username\\\":\\\"ferryscanner\\\",\\n\" +\n                \"\\t\\\"password\\\":\\\"P@ssword1\\\"\\n\" +\n                \"}\";\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        HttpEntity<String> httpEntity = new HttpEntity<>(request, headers);\n\n        ResponseEntity<AuthenticationResponse> exchange = restTemplate.exchange(\n                getUri() + \"/login\",\n                HttpMethod.POST,\n                httpEntity,\n                AuthenticationResponse.class);\n\n        assertEquals(HttpStatus.UNAUTHORIZED, exchange.getBody().getStatus());\n\n    }"} {"seed":"@Insert\n    void insert(Register register);"} {"seed":"@Query(\"SELECT * FROM register_table\")\n    LiveData<List<Register>> getAllRegisters();"} {"seed":"@Test\n    void modelTrainer() {\n        randomForestPredictService.modelTrainer();\n    }"} {"seed":"@Test\n    void predictor() {\n        List<DailyStatistics> dailyStatisticsList = randomForestPredictService.predictor(dailyStatisticsMapper.getPeriodDailyStatistics(\"2019-11-01\", \"2019-11-05\"));\n\n    }"} {"seed":"@Test\n    void modifyPredicts(){\n        double sum = 0;\n        ArrayList<Double> arr = new ArrayList<>();\n        List<DailyStatistics> dailyStatisticsList = randomForestPredictService.predictor(dailyStatisticsMapper.getAllDailyStatistics());\n        for(DailyStatistics element : dailyStatisticsList){\n            element.setDeviationRate((double) (element.getPredictNum() - element.getTodayTotalNum()) / element.getTodayTotalNum());\n            arr.add(element.getDeviationRate());\n            sum += element.getDeviationRate() > 0 ? element.getDeviationRate() : -element.getDeviationRate();\n            Integer j = dailyStatisticsMapper.updateOne(element);\n        }\n        System.out.println(sum / dailyStatisticsList.size());\n    }"} {"seed":"/**\n     *Return the andrewId.\n     *@return andrewId\n     */\npublic String getAndrewId() {\n        return andrewId;\n    }"} {"seed":"/**\n     *Return firstname of student.\n     *@return first name of student\n     */\npublic String getFirstName() {\n        return firstName;\n    }"} {"seed":"/**\n     *Return lastname of student.\n     *@return last name of student\n     */\npublic String getLastName() {\n        return lastName;\n    }"} {"seed":"/**\n     *Return the phone number.\n     *@return phoneNumber\n     */\npublic String getPhoneNumber() {\n        return phoneNumber;\n    }"} {"seed":"/**\n     *Set the firstname.\n     *@param firstName value of Student\n     */\npublic void setFirstName(String firstName) {\n        if (this.firstName != null) {\n            return;\n        }\n        this.firstName = firstName;\n    }"} {"seed":"/**\n     *Set the lastname.\n     *@param lastName value of Student\n     */\npublic void setLastName(String lastName) {\n        if (this.lastName != null) {\n            return;\n        }\n        this.lastName = lastName;\n    }"} {"seed":"/**\n     *Set the phone number.\n     *@param phoneNumber value of Student\n     */\npublic void setPhoneNumber(String phoneNumber) {\n        if (this.phoneNumber != null) {\n            return;\n        }\n        this.phoneNumber = phoneNumber;\n    }"} {"seed":"/**\n     *Returns string representation of each student.\n     *@return a string\n     */\npublic String toString() {\n        String s = this.firstName + \" \" + this.lastName + \" (Andrew ID: \"\n                + this.andrewId + \", Phone Number: \" + this.phoneNumber\n                + \") \\n\";\n        return s;\n    }"} {"seed":"g tel;\n\n    private String password;\n\n    public Long getEmplo"} {"seed":") {\n        return employeeId;\n    }\n\n    public void setEmployeeId(Long employeeId) {"} {"seed":"this.employeeId = employeeId;\n    }\n\n    public In"} {"seed":"getAge() {\n        return age;\n    }\n\n    public void setAge(In"} {"seed":"age) {\n        this.age = age;\n    }\n\n    public In"} {"seed":"getSex() {\n        return sex;\n    }\n\n    public void setSex(In"} {"seed":"sex) {\n        this.sex = sex;\n    }\n\n    public S"} {"seed":"getTel() {\n        return tel;\n    }\n\n    public void setTel(S"} {"seed":"tel) {\n        this.tel = tel;\n    }\n\n    public String getP"} {"seed":"d() {\n        return password;\n    }\n\n    public void setPassword(String password)"} {"seed":"private String getRealString(NetworkResponse paramNetworkResponse)\n  {\n    int i = 1;\n    Object localObject = paramNetworkResponse.data;\n    int j = localObject[0];\n    j = localObject[1];\n    StringBuilder localStringBuilder;\n    if (getShort((byte[])localObject) == 8075)\n    {\n      localStringBuilder = new StringBuilder();\n      if (i == 0) {}\n    }\n    else\n    {\n      for (;;)\n      {\n        try\n        {\n          localObject = new GZIPInputStream(new ByteArrayInputStream((byte[])localObject));\n          localBufferedReader = new BufferedReader(new InputStreamReader((InputStream)localObject), 1024);\n          paramNetworkResponse = localBufferedReader.readLine();\n          if (paramNetworkResponse != null) {\n            continue;\n          }\n          ((InputStream)localObject).close();\n          localBufferedReader.close();\n        }\n        catch (Exception paramNetworkResponse)\n        {\n          BufferedReader localBufferedReader;\n          paramNetworkResponse.printStackTrace();\n          continue;\n        }\n        return localStringBuilder.toString();\n        i = 0;\n        break;\n        localStringBuilder.append(paramNetworkResponse);\n        paramNetworkResponse = localBufferedReader.readLine();\n      }\n    }\n    paramNetworkResponse = new String((byte[])localObject, HttpHeaderParser.parseCharset(paramNetworkResponse.headers, DEFAULT_CHARSET));\n    return paramNetworkResponse;\n  }"} {"seed":"private int getShort(byte[] paramArrayOfByte)\n  {\n    return paramArrayOfByte[0] << 8 | paramArrayOfByte[1] & 0xFF;\n  }"} {"seed":"private void saveDataCache(NetworkResponse paramNetworkResponse)\n  {\n    Cache.Entry localEntry;\n    if ((this.mRequestBean != null) && (this.mRequestBean.shouldCache()))\n    {\n      localEntry = new Cache.Entry();\n      localEntry.data = paramNetworkResponse.data;\n      localEntry.ttl = (this.mRequestBean.getCacheTimeout() + System.currentTimeMillis());\n      paramNetworkResponse = NetWorkService.getInstance().buildCacheKey(this.mUrl, this.mRequestBean.getParam());\n      if ((this.mRequestBean.getCacheType() != CacheType.DISK) && (this.mRequestBean.getCacheType() != CacheType.DISKANDUPDATE) && (this.mRequestBean.getCacheType() != CacheType.DISK_W)) {\n        break label121;\n      }\n      NetWorkService.getInstance().putCache(paramNetworkResponse, localEntry, this.mRequestBean.getCacheType());\n    }\n    label121:\n    while ((this.mRequestBean.getCacheType() != CacheType.MEMORY) && (this.mRequestBean.getCacheType() != CacheType.MEMORYANDUPDATE) && (this.mRequestBean.getCacheType() != CacheType.MEMORY_W)) {\n      return;\n    }\n    NetWorkService.getInstance().putCache(paramNetworkResponse, localEntry, this.mRequestBean.getCacheType());\n  }"} {"seed":"public void addSessionCookie(Map<String, String> paramMap)\n  {\n    String str = new MemoryStorage().loadData(this.COOKIE_KEY);\n    if (!TextUtils.isEmpty(str))\n    {\n      Log.d(\"add session fullcookie to header: \" + str);\n      paramMap.put(\"Cookie\", str);\n    }\n  }"} {"seed":"public void deliverError(VolleyError paramVolleyError)\n  {\n    super.deliverError(paramVolleyError);\n    if (!TextUtils.isEmpty(this.mRequestKey)) {\n      HttpService.getInstance().removeRequestToList(this.mRequestKey);\n    }\n  }"} {"seed":"protected void deliverResponse(JSONObject paramJSONObject)\n  {\n    if (this.mListener != null)\n    {\n      if (this.mRequestBean != null)\n      {\n        long l1 = System.currentTimeMillis();\n        long l2 = this.mRequestBean.getStartTime();\n        Object localObject = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");\n        String str = ((SimpleDateFormat)localObject).format(new Date(l2));\n        localObject = ((SimpleDateFormat)localObject).format(new Date(l1));\n        Log.e(\"http请求 = \" + this.mRequestBean.getParam() + \" 结束！\" + \" 请求开始时间:\" + str + \" 当前时间:\" + (String)localObject + \" ms\" + \" 总耗时:\" + (l1 - l2));\n      }\n      this.mListener.onResponse(paramJSONObject);\n    }\n    if (!TextUtils.isEmpty(this.mRequestKey)) {\n      HttpService.getInstance().removeReques"} {"seed":"t(this.mRequestKey);\n    }\n  }\n  \n  public Map<String, String> getHeaders()\n  {\n    Object localObject1 = super.getHeaders();\n    if ((localObject1 == null) || (((Map)localObject1).equals(Collections.emptyMap()))) {\n      localObject1 = new HashMap();\n    }\n    for (;;)\n    {\n      addSessionCookie((Map)localObject1);\n      Object localObject2;\n      if ((this.mRequestBean != null) && (this.mRequestBean.getHeader() != null))\n      {\n        localObject2 = this.mRequestBean.getHeader().entrySet().iterator();\n        if (((Iterator)localObject2).hasNext()) {}\n      }\n      else\n      {\n        localObject2 = ConfigManager.getInstance().getSystemConfigValue(\"charset\");\n        if (!TextUtils.isEmpty((CharSequence)localObject2)) {\n          break label213;\n        }\n        ((Map)localObject1).put(\"charset\", DEFAULT_CHARSET);\n        label106:\n        localObject2 = ((Map)localObject1).keySet().iterator();\n      }\n      for (;;)\n      {\n        if (!((Iterator)localObject2).hasNext())\n        {\n          return (Map<String, String>)localObject1;\n          localObject3 = (Map.Entry)((Iterator)localObject2).next();\n          ((Map)localObject1).put((String)((Map.Entry)localObject3).getKey(), (String)((Map.Entry)localObject3).getValue());\n          Log.d(\"put additional http request header; key = \" + (String)((Map.Entry)localObject3).getKey() + \" value = \" + (String)((Map.Entry)localObject3).getValue());\n          break;\n          label213:\n          ((Map)localObject1).put(\"charset\", localObject2);\n          break label106;\n        }\n        Object localObject3 = (String)((Iterator)localObject2).next();\n        String str = (String)((Map)localObject1).get(localObject3);\n        Log.d(\"http headers key = \" + (String)localObject3 + \";"} {"seed":"= \" + str);\n      }\n    }\n  }\n  \n  protected Map<String, String> getParams()\n  {\n    HashMap localHashMap = new HashMap();\n    Iterator localIterator = this.mParam.keys();\n    for (;;)\n    {\n      if (!localIterator.hasNext())\n      {\n        if ((this.mRequestBean == null) || (!this.mRequestBean.isShouldSign())) {\n          break;\n        }\n        return DataSignHelper.generateSignDataMap(localHashMap);\n      }\n      String str = (String)localIterator.next();\n      try\n      {\n        localHashMap.put(str, URLEncoder.encode(this.mParam.getString(str), \"utf-8\"));\n      }\n      catch (JSONException localJSONException)\n      {\n        localJSONException.printStackTrace();\n      }\n      catch (UnsupportedEncodingException localUnsupportedEncodingException)\n      {\n        localUnsupportedEncodingException.printStackTrace();"} {"seed":"}\n    return localHashMap;\n  }\n  \n  public Request.Priority getPriority()\n  {\n    if (this.mRequestBean != null) {\n      return this.mRequestBean.getPriority();\n    }"} {"seed":"eturn super.getPriority();\n  }\n  \n  protected Response<JSONObject> parseNetworkResponse(NetworkResponse paramNetworkResponse)\n  {\n    saveSessionCookie(paramNetworkResponse.headers);\n    try\n    {\n      String str = getRealString(paramNetworkResponse);\n      saveDataCache(paramNetworkResponse);\n      paramNetworkResponse = Response.success(new JSONObject(str), HttpHeaderParser.parseCacheHeaders(paramNetworkResponse));\n      return paramNetworkResponse;\n    }\n    catch (JSONException paramNetworkResponse)\n    {\n      paramNetworkResponse.printStackTrace();\n    }\n    return Response.error(new Pa"} {"seed":"or(paramNetworkResponse));\n  }\n  \n  public void saveSessionCookie(Map<String, String> paramMap)\n  {\n    String str;\n    Object localObject2;\n    Object localObject1;\n    int i;\n    if (paramMap.containsKey(\"Set-Cookie\"))\n    {\n      str = (String)paramMap.get(\"Set-Cookie\");\n      localObject2 = str.split(\";\");\n      localObject1 = (LinkedHashMap)HttpService.sCookieMap.get(this.COOKIE_KEY);\n      paramMap = (Map<String, String>)localObject1;\n      if (localObject1 == null) {\n        paramMap = new LinkedHashMap();\n      }\n      i = 0;\n      if (i < localObject2.length) {\n        break label170;\n      }\n      HttpService.sCookieMap.put(this.COOKIE_KEY, paramMap);\n      paramMap = paramMap.entrySet().iterator();\n      localObject1 = new StringBuilder();\n    }\n    for (;;)\n    {\n      if (!paramMap.hasNext())\n      {\n        paramMap = ((StringBuilder)localObject1).substring(0, ((StringBuilder)localObject1).length() - 1);\n        Log.d(\"save http header fullcookie = \" + paramMap + \" cookie = \" + str);\n        new MemoryStorage().saveData(this.COOKIE_KEY, paramMap);\n        return;\n        label170:\n        localObject1 = localObject2[i].split(\"=\");\n        if (localObject1.length >= 2) {\n          paramMap.put(localObject1[0], localObject1[1]);\n        }\n        for (;;)\n        {\n          i += 1;\n          break;\n          paramMap.put(localObject1[0], null);\n        }\n      }\n      Object localObject3 = (Map.Entry)paramMap.next();\n      localObject2 = (String)((Map.Entry)localObject3).getKey();\n      localObject3 = (String)((Map.Entry)localObject3).getValue();\n      if (localObject3 == null) {\n        ((StringBuilder)localObject1).append((String)localObject2).append(\";\");\n      } else {\n        ((StringBuilder)localObject1).append((String)localObject2).append(\"=\").append((String)localObj"} {"seed":"append(\";\");\n      }\n    }\n  }\n  \n  public void setRequestKey(String paramString)\n  {"} {"seed":"ass Client {\n\n\n\tpublic static void main(String[] args) {\n\t\tComponsite root = new Componsite(\"总公司\",null);\n\t\tComponsite c1 = new Componsite(\"研发部\", root);\n\t\tComponsite c2 = new Componsite(\"人事部\",root);\n\t\tComponsite c1_1 = new Componsite(\"零售研发组\",c1);\n\t\tComponsite c1_2 = new Componsite(\"批发研发组\",c1);\n\n\t\tLeaf p1 = new Leaf(\"张一\", root);\n\t\tLeaf p2 = new Leaf(\"张三\", c1);\n\t\tLeaf p3 = new Leaf(\"张四\", c1_1);\n\t\tLeaf p4 = new Leaf(\"张五\", c1_2);\n\t\tLeaf p5 = new Leaf(\"王一\", c2);\n\n\t\troot.add(c1).add(c2).add(p1);\n\t\tc1.add(c1_1).add(c1_2).add(p2);\n\t\tc2.add(p5);\n\t\tc1_1.add(p3)"} {"seed":"eThing();\n\t\tprintChild(root.getChild());\n\t}\n\n\n\t/**\n\t *\n\t * 打印信息\n\t *\n\t */\n\tprivate static void printChild(List<Component> components){\n\n\t\tfor (Component component : components) {\n\t\t\tcomponent.doSomeThing();\n\n\t\t\tif (component instanceof Componsite) {\n\t\t\t\tComponsite c = (Componsite) component;\n\t\t\t\tList<Component> componentList = c.getChild();\n\t\t\t\tif (componentList != null"} {"seed":"public static void main(String[] args) {\n\t\t\n\t\tStudent sLee = new Student(101, \"Lee\");\n\t\t\n\t\tsLee.addSubject(\"korean\", 100);\n\t\tsLee.addSubject(\"math\", 97);\n\t\tsLee.showStudentInfo();\n\t\tSystem.out.println();\n\t\t\n\t\tStudent sKim = new Student(102, \"Kim\");\n\t\tsKim.addSubject(\"korean\", 88);\n\t\tsKim.addSubject(\"math\", 90);\n\t\tsKim.showStudentInfo();\n\t\t\n\t}"} {"seed":"V getView();"} {"seed":"Controller getParentController();"} {"seed":"List<Controller> getSubControllers();"} {"seed":"void dispose();"} {"seed":"void registerEventListener(Class paramClass, EventListener paramEventListener);"} {"seed":"void fireEvent(Event paramEvent);"} {"seed":"void fireEventGlobal(Event paramEvent);"} {"seed":"void fireEvent(Event paramEvent, boolean paramBoolean);"} {"seed":"void registerAction(AbstractButton paramAbstractButton, DefaultAction paramDefaultAction);"} {"seed":"void registerAction(AbstractButton paramAbstractButton, String paramString, DefaultAction paramDefaultAction);"} {"seed":"void preActionExecute();"} {"seed":"void postActionExecute();"} {"seed":"void failedActionExecute();"} {"seed":"void finalActionExecute();"} {"seed":"@Id @GeneratedValue(strategy=IDENTITY)\n    @Column(name=\"id\", unique=true, nullable=false)\n    public Long getId() {\n        return this.id;\n    }"} {"seed":"public void setId(Long id) {\n        this.id = id;\n    }"} {"seed":"@ManyToOne(fetch=FetchType.LAZY)\n    @JoinColumn(name=\"categoria\")\n    public Categoria getCategoria() {\n        return this.categoria;\n    }"} {"seed":"public void setCategoria(Categoria categoria) {\n        this.categoria = categoria;\n    }"} {"seed":"@Column(name=\"nombre\", unique=true, nullable=false, length=50)\n    public String getNombre() {\n        return this.nombre;\n    }"} {"seed":"public void setNombre(String nombre) {\n        this.nombre = nombre;\n    }"} {"seed":"@Column(name=\"precio\", nullable=false, precision=10)\n    public BigDecimal getPrecio() {\n        return this.precio;\n    }"} {"seed":"public void setPrecio(BigDecimal precio) {\n        this.precio = precio;\n    }"} {"seed":"@OneToMany(fetch=FetchType.LAZY, mappedBy=\"articulo\")\n    public Set<PedidoLinea> getPedidolineas() {\n        return this.pedidolineas;\n    }"} {"seed":"public void setPedidolineas(Set<PedidoLinea> pedidolineas) {\n        this.pedidolineas = pedidolineas;\n    }"} {"seed":"public String toString() {\n    \tif(this.getCategoria()!= null) {\n\t\treturn String.format(\"%-5s%-15s%-15s%-15s\", String.valueOf(this.getId()),\n\t\t\t\t\t\t\tthis.getCategoria().getNombre(),\n\t\t\t\t\t\t\tthis.getNombre(),\n\t\t\t\t\t\t\tString.valueOf(this.getPrecio()));\n\t\t\n    \t}else {\n    \t\treturn String.format(\"%-5s%-15s%-15s%-15s\", String.valueOf(this.getId()),\n    \t\t\t\t\"\",\n    \t\t\t\tthis.getNombre(),\n\t\t\t\t\tString.valueOf(this.getPrecio()));\n    \t\t\n    \t}\n    \t\n    }"} {"seed":"public void printMultiplication(){\n        for(int i=1; i<13; i++){\n            for(int j=1; j<13; j++){\n                System.out.print((i*j)+\"\\t\\t\");\n            }\n            System.out.println();\n        }\n    }"} {"seed":"public static void main(String[] args) {\n        Multiplication obj = new Multiplication();\n        obj.printMultiplication();\n    }"} {"seed":"public static void main(String[] args) {\n\n        Scanner input = new Scanner(System.in);\n        \n        System.out.print(\"Enter size: \");\n        int size = input.nextInt();\n        int []arr = new int[size];\n\n        System.out.print(\"Enter numbers: \");\n        for(int i = 0; i < size; i++ ){\n\n            arr[i] = input.nextInt();\n        }\n\n        for(int i = 0; i < arr.length; i++){\n\n            int num1 = 0; \n            int num2 = 1; \n            int num3 = 2;\n\n            if ((i + 2) < arr.length ){\n\n                num1 = arr[i];\n                num2 = arr[i+1];\n                num3 = arr[i+2];\n\n            }\n\n\n            if (num1 == num2 && num2 == num3){ \n\n                System.out.print(arr[i] + \" \");\n\n            }\n\n        }\n\n        System.out.println();\n        \n    }"} {"seed":"@Override\n    public abstract VersionProperty getConfigurationFormat();"} {"seed":"@Override\n    public abstract T loadConfiguration(HierarchicalConfiguration param) throws Exception;"} {"seed":"@Override\n    public abstract Class<T> getConfigurationClass();"} {"seed":"@Override\n    public Class<HierarchicalConfiguration> getParameterClass() {\n        return HierarchicalConfiguration.class;\n    }"} {"seed":"@BeforeClass\n    public static void setUpClass() {\n        System.out.println(\"----------------------- Inicio prueba ---------------------\");\n    }"} {"seed":"@AfterClass\n    public static void tearDownClass() {\n        System.out.println(\"----------------------- Fin prueba -----------------------\");\n    }"} {"seed":"@Before\n    public void setUp() {\n    }"} {"seed":"@After\n    public void tearDown() {\n    }"} {"seed":"@Parameterized.Parameters\n    public static Object[][] datos() {\n        return new Object[10][0];\n    }"} {"seed":"@Test\n    public void TestRepetirDiezVecesConexion() {\n        Conexion.getConnection();\n        assertThat(co, isA(Conexion.class));\n    }"} {"seed":"@Test\n    public void TestRepetirDiezVecesDesconexion(){\n        co.desconexion();\n    }"} {"seed":"@Override\n    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n        String secret = new BCryptPasswordEncoder().encode(this.secret);\n        clients.inMemory()\n                .withClient(clientId)\n                .secret(secret)\n                .authorizedGrantTypes(\n                        \"client_credentials\",\n                        \"password\",\n                        \"refresh_token\",\n                        \"authorization_code\")\n                .scopes(\"all\")\n                .autoApprove(true)\n                .accessTokenValiditySeconds(60)\n                .refreshTokenValiditySeconds(120);\n    }"} {"seed":"@Override\n    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {\n        endpoints.tokenStore(tokenStore())\n                .authenticationManager(authenticationManager)\n                .accessTokenConverter(accessTokenConverter())\n                .userDetailsService(userDetailsService)\n                .reuseRefreshTokens(true)\n                .tokenServices(tokenServices());\n\n    }"} {"seed":"@Override\n    public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {\n        security\n                .tokenKeyAccess(\"permitAll()\")\n                .checkTokenAccess(\"isAuthenticated()\");\n    }"} {"seed":"@Bean\n    public TokenStore tokenStore() {\n        //基于jwt实现令牌（Access Token）\n        return new JwtTokenStore(accessTokenCon"} {"seed":"());\n    }\n\n    @Bean\n    public JwtAccessTokenConverter accessTokenConverter() {\n        JwtAccessTokenConverter converter = new JwtAccessTokenConverter() {\n\n            @Override\n            public OAuth2AccessToken enhance(OAuth2AccessToken accessToken, OAuth2Authentication authentication) {\n                String grantType = authentication.getOAuth2Request().getGrantType();\n                //只有如下两种模式才能获取到当前用户信息\n                if (\"authorization_code\".equals(grantType) || \"password\".equals(grantType)) {\n                    String userName = authentication.getUserAuthentication().getName();\n                    // 自定义一些token 信息 会在获取token返回结果中展示出来\n                    final Map<String, Object> additionalInformation = new HashMap<>();\n                    additionalInformation.put(\"user_name\", userName);\n                    ((DefaultOAuth2AccessToken) accessToken).setAdditionalInformation(additionalInformation);\n                }\n                return super.enhance(accessToken, authentication);"} {"seed":"return converter;\n    }\n\n    /**\n     * 重写默认的资源服务token\n     *\n     * @return\n     */\n    @Bean\n    public DefaultTokenServices tokenServices() {\n        final DefaultTokenServices defaultTokenServices = new DefaultTokenServices();\n        defaultTokenServices.setTokenEnhancer(accessTokenConverter());\n        defaultTokenServices.setTokenStore(tokenStore());\n        defaultTokenServices.setSupportRefreshToken(true);\n        defaultTokenServices.set"} {"seed":"{\n\n            @Override\n            public OAuth2AccessToken enhance(OAuth2AccessToken accessToken, OAuth2Authentication authentication) {\n                String grantType = authentication.getOAuth2Request().getGrantType();\n                //只有如下两种模式才能获取到当前用户信息\n                if (\"authorization_code\".equals(grantType) || \"password\".equals(grantType)) {\n                    String userName = authentication.getUserAuthentication().getName();\n                    // 自定义一些token 信息 会在获取token返回结果中展示出来\n                    final Map<String, Object> additionalInformation = new HashMap<>();\n                    additionalInformation.put(\"user_name\", userName);\n                    ((DefaultOAuth2AccessToken) accessToken).setAdditionalInformation(additionalInformation);"} {"seed":"@Before\n\tpublic void setup() {\n\t\tfinal User user = campaignManagerService.getByUsername(\"admin\").orElse(null);\n\t\tassertNotNull(user);\n\t\tsessionService.setSessionUser(user);\n\t}"} {"seed":"@Test\n\tpublic void createCampaignWithoutTitle() {\n\t\tfinal long initCampaignCount = ((CampaignManager) sessionService.getSessionUser()).getCampaigns().size();\n\n\t\tfinal OfferCampaignForm campaignForm = getMinimalOfferCampaign();\n\t\tfinal Errors errors = new BeanPropertyBindingResult(campaignForm, \"campaignForm\");\n\n\t\tcampaignForm.setTitle(null);\n\t\ttry {\n\t\t\tofferCampaignController.createCampaign(campaignForm, errors);\n\t\t\tfail(\"ValidationException should have been thrown\");\n\t\t} catch (ValidationException e) {\n\t\t\tperformStandardKOAssertions(errors, Collections.singletonList(\"err.campaign.title\"), initCampaignCount);\n\t\t}\n\t}"} {"seed":"@Test\n\tpublic void createCampaignWithoutDescription() {\n\t\tfinal long initCampaignCount = ((CampaignManager) sessionService.getSessionUser()).getCampaigns().size();\n\n\t\tfinal OfferCampaignForm campaignForm = getMinimalOfferCampaign();\n\t\tfinal Errors errors = new BeanPropertyBindingResult(campaignForm, \"campaignForm\");\n\n\t\tcampaignForm.setDescription(null);\n\t\ttry {\n\t\t\tofferCampaignController.createCampaign(campaignForm, errors);\n\t\t\tfail(\"ValidationException should have been thrown\");\n\t\t} catch (ValidationException e) {\n\t\t\tperformStandardKOAssertions(errors, Collections.singletonList(\"err.campaign.description\"), initCampaignCount);\n\t\t}\n\t}"} {"seed":"@Test\n\tpublic void createCampaignWithoutType() {\n\t\tfinal long initCampaignCount = ((CampaignManager) sessionService.getSessionUser()).getCampaigns().size();\n\n\t\tfinal OfferCampaignForm campaignForm = getMinimalOfferCampaign();\n\t\tfinal Errors errors = new BeanPropertyBindingResult(campaignForm, \"campaignForm\");\n\n\t\tcampaignForm.setType(null);\n\t\ttry {\n\t\t\tofferCampaignController.createCampaign(campaignForm, errors);\n\t\t\tfail(\"ValidationException should have been thrown\");\n\t\t} catch (ValidationException e) {\n\t\t\tperformStandardKOAssertions(errors, Collections.singletonList(\"err.campaign.type\"), initCampaignCount);\n\t\t}\n\t}"} {"seed":"@Test\n\tpublic void createCampaignWithNegativeQuantity() {\n\t\tfinal long initCampaignCount = ((CampaignManager) sessionService.getSessionUser()).getCampaigns().size();\n\n\t\tfinal OfferCampaignForm campaignForm = getMinimalOfferCampaign();\n\t\tfinal Errors errors = new BeanPropertyBindingResult(campaignForm, \"campaignForm\");\n\n\t\tcampaignForm.setQuantity(\"-1\");\n\t\ttry {\n\t\t\tofferCampaignController.createCampaign(campaignForm, errors);\n\t\t\tfail(\"ValidationException should have been thrown\");\n\t\t} catch (ValidationException e) {\n\t\t\tperformStandardKOAssertions(errors, Collections.singletonList(\"err.campaign.quantity\"), initCampaignCount);\n\t\t}\n\t}"} {"seed":"@Test\n\tpublic void createCampaignWithNullCampaignOriginalPrice() {\n\t\tfinal long initCampaignCount = ((CampaignManager) sessionService.getSessionUser()).getCampaigns().size();\n\n\t\tfinal OfferCampaignForm campaignForm = getMinimalOfferCampaign();\n\t\tfinal Errors errors = new BeanPropertyBindingResult(campaignForm, \"campaignForm\");\n\n\t\tcampaignForm.setOriginalPrice(null);\n\t\ttry {\n\t\t\tofferCampaignController.createCampaign(campaignForm, errors);\n\t\t\tfail(\"ValidationException should have been thrown\");\n\t\t} catch (ValidationException e) {\n\t\t\tperformStandardKOAssertions(errors, Collections.singletonList(\"err.campaign.originalPrice\"), initCampaignCount);\n\t\t}\n\t}"} {"seed":"@Test\n\tpublic void createCampaignWithNegativeCampaignOriginalPrice() {\n\t\tfinal long initCampaignCount = ((CampaignManager) sessionService.getSessionUser()).getCampaigns().size();\n\n\t\tfinal OfferCampaignForm campaignForm = getMinimalOfferCampaign();\n\t\tfinal Errors errors = new BeanPropertyBindingResult(campaignForm, \"campaignForm\");\n\n\t\tcampaignForm.setOriginalPrice(\"-1\");\n\t\ttry {\n\t\t\tofferCampaignController.createCampaign(campaignForm, errors);\n\t\t\tfail(\"ValidationException should have been thrown\");\n\t\t} catch (ValidationException e) {\n\t\t\tfinal List<String> expectedErrorCodes = Lists.newArrayList(\"err.campaign.originalPrice\", \"err.campaign.discountedPriceLargerThanOriginal\");\n\t\t\tperformStandardKOAssertions(errors, expectedErrorCodes, initCampaignCount);\n\t\t}\n\t}"} {"seed":"@Test\n\tpublic void createCampaignWithNullStartDate() {\n\t\tfinal long initCampaignCount = ((CampaignManager) sessionService.getSessionUser()).getCampaigns().size();\n\n\t\tfinal OfferCampaignForm campaignForm = getMinimalOfferCampaign();\n\t\tfinal Errors errors = new BeanPropertyBindingResult(campaignForm, \"campaignForm\");\n\n\t\tcampaignForm.setStartDate(null);\n\t\ttry {\n\t\t\tofferCampaignController.createCampaign(campaignForm, errors);\n\t\t\tfail(\"ValidationException should have been thrown\");\n\t\t} catch (ValidationException e) {\n\t\t\tperformStandardKOAssertions(errors, Collections.singletonList(\"err.campaign.startDate\"), initCampaignCount);\n\t\t}\n\t}"} {"seed":"@Test\n\tpublic void createCampaignWithPastStartDate() {\n\t\tfinal long initCampaignCount = ((CampaignManager) sessionService.getSessionUser()).getCampaigns().size();\n\n\t\tfinal OfferCampaignForm campaignForm = getMinimalOfferCampaign();\n\t\tfinal Errors errors = new BeanPropertyBindingResult(campaignForm, \"campaignForm\");\n\n\t\tcampaignForm.setStartDate(String.valueOf(LocalDate.now().minus(5, ChronoUnit.DAYS)));\n\t\ttry {\n\t\t\tofferCampaignController.createCampaign(campaignForm, errors);\n\t\t\tfail(\"ValidationException should have been thrown\");\n\t\t} catch (ValidationException e) {\n\t\t\tperformStandardKOAssertions(errors, Collections.singletonList(\"err.campaign.startDate\"), initCampaignCount);\n\t\t}\n\t}"} {"seed":"@Test\n\tpublic void createCampaignWithNullEndDate() {\n\t\tfinal long initCampaignCount = ((CampaignManager) sessionService.getSessionUser()).getCampaigns().size();\n\n\t\tfinal OfferCampaignForm campaignForm = getMinimalOfferCampaign();\n\t\tfinal Errors errors = new BeanPropertyBindingResult(campaignForm, \"campaignForm\");\n\n\t\tcampaignForm.setEndDate(null);\n\t\ttry {\n\t\t\tofferCampaignController.createCampaign(campaignForm, errors);\n\t\t\tfail(\"ValidationException should have been thrown\");\n\t\t} catch (ValidationException e) {\n\t\t\tperformStandardKOAssertions(errors, Collections.singletonList(\"err.campaign.endDate\"), initCampaignCount);\n\t\t}\n\t}"} {"seed":"@Test\n\tpublic void createCampaignWithPastEndDate() {\n\t\tfinal long initCampaignCount = ((CampaignManager) sessionService.getSessionUser()).getCampaigns().size();\n\n\t\tfinal OfferCampaignForm campaignForm = getMinimalOfferCampaign();\n\t\tfinal Errors errors = new BeanPropertyBindingResult(campaignForm, \"campaignForm\");\n\n\t\tcampaignForm.setEndDate(String.valueOf(LocalDate.now().minus(5, ChronoUnit.DAYS)));\n\t\ttry {\n\t\t\tofferCampaignController.createCampaign(campaignForm, errors);\n\t\t\tfail(\"ValidationException should have been thrown\");\n\t\t} catch (ValidationException e) {\n\t\t\tfinal List<String> expectedErrorCodes = Lists.newArrayList(\"err.campaign.endDate\", \"err.campaign.startDateAfterEndDate\");\n\t\t\tperformStandardKOAssertions(errors, expectedErrorCodes, initCampaignCount);\n\t\t}\n\t}"} {"seed":"@Test\n\tpublic void createCampaignWithStartDateAfterEndDate() {\n\t\tfinal long initCampaignCount = ((CampaignManager) sessionService.getSessionUser()).getCampaigns().size();\n\n\t\tfinal OfferCampaignForm campaignForm = getMinimalOfferCampaign();\n\t\tfinal Errors errors = new BeanPropertyBindingResult(campaignForm, \"campaignForm\");\n\n\t\tcampaignForm.setStartDate(String.valueOf(LocalDate.parse(campaignForm.getEndDate()).plus(5, ChronoUnit.DAYS)));\n\t\ttry {\n\t\t\tofferCampaignController.createCampaign(campaignForm, errors);\n\t\t\tfail(\"ValidationException should have been thrown\");\n\t\t} catch (ValidationException e) {\n\t\t\tperformStandardKOAssertions(errors, Collections.singletonList(\"err.campaign.startDateAfterEndDate\"), initCampaignCount);\n\t\t}\n\t}"} {"seed":"@Test\n\tpublic void createCampaignWithStartDateEqualingEndDate() {\n\t\tfinal long initCampaignCount = ((CampaignManager) sessionService.getSessionUser()).getCampaigns().size();\n\n\t\tfinal OfferCampaignForm campaignForm = getMinimalOfferCampaign();\n\t\tfinal Errors errors = new BeanPropertyBindingResult(campaignForm, \"campaignForm\");\n\n\t\tcampaignForm.setEndDate(campaignForm.getStartDate());\n\t\ttry {\n\t\t\tofferCampaignController.createCampaign(campaignForm, errors);\n\t\t\tfail(\"ValidationException should have been thrown\");\n\t\t} catch (ValidationException e) {\n\t\t\tperformStandardKOAssertions(errors, Collections.singletonList(\"err.campaign.startDateAfterEndDate\"), initCampaignCount);\n\t\t}\n\t}"} {"seed":"@Test\n\tpublic void createCampaignWithoutDiscountedPriceAndPercentDiscount() {\n\t\tfinal long initCampaignCount = ((CampaignManager) sessionService.getSessionUser()).getCampaigns().size();\n\n\t\tfinal OfferCampaignForm campaignForm = getMinimalOfferCampaign();\n\t\tfinal Errors errors = new BeanPropertyBindingResult(campaignForm, \"campaignForm\");\n\n\t\tcampaignForm.setDiscountedPrice(null);\n\t\tcampaignForm.setPercentDiscount(null);\n\t\ttry {\n\t\t\tofferCampaignController.createCampaign(campaignForm, errors);\n\t\t\tfail(\"ValidationException should have been thrown\");\n\t\t} catch (ValidationException e) {\n\t\t\tperformStandardKOAssertions(errors, Collections.singletonList(\"err.campaign.offer.discountedPriceOrPercent\"), initCampaignCount);\n\t\t}\n\t}"} {"seed":"@Test\n\t@DirtiesContext\n\tpublic void createValidCampaign() {\n\t\tfinal long initCampaignCount = ((CampaignManager) sessionService.getSessionUser()).getCampaigns().size();\n\n\t\tfinal OfferCampaignForm campaignForm = getMinimalOfferCampaign();\n\t\tfinal Errors errors = new BeanPropertyBindingResult(campaignForm, \"campaignForm\");\n\n\t\tofferCampaignController.createCampaign(campaignForm, errors);\n\n\t\tmessageBrokerConfig.sleepWhileOperationsPending(messageBrokerConfig.campaignQueue());\n\t\tsessionService.setSessionUser(campaignManagerService.getByUsername(\"admin\").orElse(null));\n\n\t\tassertFalse(errors.hasErrors());\n\t\tassertFalse(((CampaignManager) sessionService.getSessionUser()).getCampaigns().isEmpty());\n\t\tassertEquals(initCampaignCount + 1, ((CampaignManager) sessionService.getSessionUser()).getCampaigns().size());\n\t}"} {"seed":"@Test\n\tpublic void updateCampaign() {\n\t\tfinal OfferCampaignForm campaignForm = getCampaignFormToUpdate();\n\t\tfinal Errors errors = new BeanPropertyBindingResult(campaignForm, \"campaignForm\");\n\n\t\tcampaignForm.setTitle(\"Updated campaign title\");\n\t\tcampaignForm.setDescription(\"Updated campaign description\");\n\t\tcampaignForm.setOriginalPrice(\"12345\");\n\t\tcampaignForm.setStartDate(LocalDate.now().toString());\n\t\tcampaignForm.setEndDate(LocalDate.now().plus(1, ChronoUnit.DAYS).toString());\n\t\tcampaignForm.setQuantity(\"5\");\n\t\tcampaignForm.setState(CampaignState.ARCHIVED);\n\t\tcampaignForm.setShowAfterExpiration(true);\n\n\t\tofferCampaignController.updateCampaign(campaignForm, errors);\n\n\t\tmessageBrokerConfig.sleepWhileOperationsPending(messageBrokerConfig.campaignQueue());\n\t\tsessionService.setSessionUser(campaignManagerService.getByUsername(\"admin\").orElse(null));\n\n\t\tfinal OfferCampaignForm updatedForm = getCampaignFormToUpdate();\n\n\t\tassertFalse(errors.hasErrors());\n\t\tassertEquals(\"Updated campaign title\", updatedForm.getTitle());\n\t\tassertEquals(\"Updated campaign description\", updatedForm.getDescription());\n\t\tassertEquals(\"12345.0\", updatedForm.getOriginalPrice());\n\t\tassertEquals(\"5.0\", updatedForm.getQuantity());\n\t\tassertEquals(CampaignState.ARCHIVED, campaignForm.getState());\n\t\tassertEquals(LocalDate.now().toString(), campaignForm.getStartDate());\n\t\tassertEquals(LocalDate.now().plus(1, ChronoUnit.DAYS).toString(), campaignForm.getEndDate());\n\t\tassertTrue(campaignForm.isShowAfterExpiration());\n\t}"} {"seed":"@Test\n\tpublic void updateCampaignInvalidOriginalPriceAndStartDate() {\n\t\tfinal long expectedCampaigns = ((CampaignManager) sessionService.getSessionUser()).getCampaigns().size();\n\t\tfinal OfferCampaignForm campaignForm = getCampaignFormToUpdate();\n\t\tfinal Errors errors = new BeanPropertyBindingResult(campaignForm, \"campaignForm\");\n\n\t\tcampaignForm.setOriginalPrice(\"newprice\");\n\t\tcampaignForm.setStartDate(LocalDate.now().minus(1, ChronoUnit.DAYS).toString());\n\n\t\ttry {\n\t\t\tofferCampaignController.updateCampaign(campaignForm, errors);\n\t\t\tfail(\"Exception should have been thrown due to invalid price and start date\");\n\t\t} catch (ValidationException e) {\n\t\t\tfinal List<String> expectedErrors = Lists.newArrayList(\"err.campaign.originalPrice\", \"err.campaign.startDate\");\n\t\t\tperformStandardKOAssertions(errors, expectedErrors, expectedCampaigns);\n\t\t}\n\t}"} {"seed":"private OfferCampaignForm getCampaignFormToUpdate() {\n\t\tfinal CampaignManager sessionManager = (CampaignManager) sessionService.getSessionUser();\n\t\tfinal Predicate<Campaign> filterByType = campaign -> campaign instanceof OfferCampaign;\n\t\tfinal OfferCampaign campaignToTest = (OfferCampaign) sessionManager.getCampaigns().stream().filter(filterByType)\n\t\t\t\t.min(Comparator.comparing(Campaign::getId)).orElse(null);\n\n\t\tif (campaignToTest == null)\n\t\t\tfail(\"No offer campaigns available for update\");\n\n\t\tfinal OfferCampaignForm campaignForm = (OfferCampaignForm) campaignFormFactory.createCampaignForm(campaignToTest).orElse(null);\n\n\t\tif (campaignForm == null)\n\t\t\tfail(\"Campaign to update was not found\");\n\t\treturn campaignForm;\n\t}"} {"seed":"private void performStandardKOAssertions(final Errors errors, final List<String> expectedErrorCodes, final long initUserCampaignCount) {\n\t\tassertEquals(initUserCampaignCount, ((CampaignManager) sessionService.getSessionUser()).getCampaigns().size());\n\t\tassertEquals(expectedErrorCodes.size(), errors.getErrorCount());\n\t\tfor (String errorCode : expectedErrorCodes)\n\t\t\tassertTrue(errors.getAllErrors().stream().map(DefaultMessageSourceResolvable::getCode).anyMatch(errorCode::equals));\n\t}"} {"seed":"private OfferCampaignForm getMinimalOfferCampaign() {\n\t\treturn (OfferCampaignForm) getMinimalOfferCampaign(new OfferCampaignForm());\n\t}"} {"seed":"private CampaignForm getMinimalOfferCampaign(final CampaignForm form) {\n\t\tform.setTitle(\"Title\");\n\t\tform.setDescription(\"Description\");\n\t\tform.setQuantity(\"1\");\n\t\tform.setStartDate(String.valueOf(LocalDate.now().plus(1, ChronoUnit.DAYS)));\n\t\tform.setEndDate(String.valueOf(LocalDate.now().plus(5, ChronoUnit.DAYS)));\n\t\tform.setOriginalPrice(\"1\");\n\t\tform.setDiscountedPrice(\"0.5\");\n\t\tform.setState(CampaignState.INACTIVE);\n\n\t\treturn form;\n\t}"} {"seed":"public void shipOrder(Order order){\n        //记录订单打包"} {"seed":"public static Duration getByName(String name) {\n\t\tfor (Duration duration : values()) {\n\t\t\tif (duration.getName().equals(name)) {\n\t\t\t\treturn duration;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}"} {"seed":"/**\n     * Määrittää pelin kulun. Ensin asetetaan nappulat alkuasemiin, jonka jälkeen\n     * pelataan vuorotellen yksi vuoro. Jokaisella vuorolla heitetään ensin nopat\n     * (automaattisesti), jonka jälkeen siirretään nappuloita kunnes kaikki nopat\n     * on käytetty. Peli loppuu kun toinen pelaaja on saanut kaikki nappulansa\n     * kotiutettua.\n\n* \n     */\n    public void pelaa() {\n        peli.asetaAlkutilanne();\n        paivita();\n\n        while (peli.getVoittaja().isEmpty()) {\n            if (!peli.isEkaKierros()) {\n                peli.heitaNopat();\n                //heitaNopat();\n                paivita();\n            }\n            siirraNappuloita();\n            peli.vuoroVaihtuu();\n            peli.tarkistaVoittaja();\n        }\n        l"} {"seed":"/**\n     * Määrittää pelin kulun. Ensin asetetaan nappulat alkuasemiin, jonka jälkeen\n     * pelataan vuorotellen yksi vuoro. Jokaisella vuorolla heitetään ensin nopat\n     * (automaattisesti), jonka jälkeen siirretään nappuloita kunnes kaikki nopat\n     * on käytetty. Peli loppuu kun toinen pelaaja on saanut kaikki nappulansa\n     * kotiutettua.\n\n\n     * \n     */\n    public void paivita() {\n        for (int i = 0; i < 24; i++) {\n            r[i].setText(peli.getLauta().getRuudut().get(i).toString());\n        }\n        v1.setText(peli.getLauta().getMustaVankila().toString());\n        v2.setText(peli.getLauta().getValkeaVankila().toString());\n        n1.setText(peli.getVuoro() + \"n vuoro:     Noppa 1: \" + peli.getNoppa1().toString());\n        n2.setText(\"Noppa 2: \" + peli.getNoppa2("} {"seed":"/**\n     * Määrittää pelin kulun. Ensin asetetaan nappulat alkuasemiin, jonka jälkeen\n     * pelataan vuorotellen yksi vuoro. Jokaisella vuorolla heitetään ensin nopat\n     * (automaattisesti), jonka jälkeen siirretään nappuloita kunnes kaikki nopat\n     * on käytetty. Peli loppuu kun toinen pelaaja on saanut kaikki nappulansa\n     * kotiutettua.\n\naram args \n     */\n    public static void main(String[] args) {\n        Ikkuna i = new Ikkuna();\n        i.setTitle(\"Backgammon\");\n        i.pack();\n        i.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        i.setVisible(true);\n        i.setSize(1200, 400);"} {"seed":"/**\n     * Määrittää pelin kulun. Ensin asetetaan nappulat alkuasemiin, jonka jälkeen\n     * pelataan vuorotellen yksi vuoro. Jokaisella vuorolla heitetään ensin nopat\n     * (automaattisesti), jonka jälkeen siirretään nappuloita kunnes kaikki nopat\n     * on käytetty. Peli loppuu kun toinen pelaaja on saanut kaikki nappulansa\n     * kotiutettua.\n\nn.\n     * \n     */\n    public void lopetus()   {\n        if (peli.getVoittaja().equals(\"valkea\"))    {\n            n1.setText(\"Valkea voitti!\");\n            n2.setText(\"Valkea voitti!\");\n            info.setText(\"Valkea voitti!\");\n        }\n        if (peli.getVoittaja().equals(\"musta\"))    {\n            n1.setText(\"Musta voitti!\");\n            n2.setText(\"Musta voitti!\");\n            info.setText(\"Musta voi"} {"seed":"/**\n     * Määrittää pelin kulun. Ensin asetetaan nappulat alkuasemiin, jonka jälkeen\n     * pelataan vuorotellen yksi vuoro. Jokaisella vuorolla heitetään ensin nopat\n     * (automaattisesti), jonka jälkeen siirretään nappuloita kunnes kaikki nopat\n     * on käytetty. Peli loppuu kun toinen pelaaja on saanut kaikki nappulansa\n     * kotiutettua.\n\n * @deprecated\n     */\n    private void heitaNopat() {\n        info.setText(\"Heitä nopat.\");\n        nopanHeitto = true;\n        while (nop"} {"seed":"/**\n     * Määrittää pelin kulun. Ensin asetetaan nappulat alkuasemiin, jonka jälkeen\n     * pelataan vuorotellen yksi vuoro. Jokaisella vuorolla heitetään ensin nopat\n     * (automaattisesti), jonka jälkeen siirretään nappuloita kunnes kaikki nopat\n     * on käytetty. Peli loppuu kun toinen pelaaja on saanut kaikki nappulansa\n     * kotiutettua.\n\nkäytetty.\n     * \n     */\n    private void siirraNappuloita() {\n        while (peli.noppiaKayttamatta() && peli.siirtojaJaljella() && peli.getVoittaja().isEmpty()) {\n            \n            info.setText(\"Valitse lähtöruutu.\");\n            lahtoRuudunValinta = true;\n            while (lahtoRuudunValinta) {\n            }\n\n            info.setText(\"Valitse maaliruutu.\");\n            maaliRuudunValinta = true;\n            while (maaliRuudunValinta) {\n            }\n\n            info.setText(\"Valitse noppa.\");\n            nopanValinta = true;\n            while (nopanValinta) {\n            }\n\n\n            peli.yritaSiirtaaNappulaa(lahtoRuutu, maaliRuutu, noppa);\n            peli.tarkistaVoittaja();"} {"seed":"@Override\n            public void actionPerformed(ActionEvent e) {\n                if (nopanHeitto) {\n                    peli.heitaNopat();\n                    nopanHeitto = false;\n                } else if (nopanValinta) {\n                    noppa = peli.getNoppa1();\n                    nopanValinta = false;\n                }\n                paivita();"} {"seed":"@Override\n            public void actionPerformed(ActionEvent e) {\n                if (nopanHeitto) {\n                    peli.heitaNopat();\n                    nopanHeitto = false;\n                } else if (nopanValinta) {\n                    noppa = peli.getNoppa2();\n                    nopanValinta = false;\n                }\n                paivita();"} {"seed":"@Override\n            public void actionPerformed(ActionEvent e) {\n                if (lahtoRuudunValinta) {\n\n                    lahtoRuutu = peli.getLauta().getMustaVankila();\n                    lahtoRuudunValinta = false;\n                }\n                if (maaliRuudunValinta) {\n\n                    maaliRuutu = peli.getLauta().getValkeaKoti();\n                    maaliRuudunValinta = false;\n                }\n                paivita();"} {"seed":"@Override\n            public void actionPerformed(ActionEvent e) {\n                if (lahtoRuudunValinta) {\n\n                    lahtoRuutu = peli.getLauta().getValkeaVankila();\n                    lahtoRuudunValinta = false;\n                }\n                if (maaliRuudunValinta) {\n                    maaliRuutu = peli.getLauta().getMustaKoti();\n                    maaliRuudunValinta = false;\n                }\n                paivita();"} {"seed":"@Override\n                public void actionPerformed(ActionEvent e) {\n\n                    int valittuRuutu = Integer.parseInt(e.getActionCommand());\n\n                    if (lahtoRuudunValinta) {\n\n                        lahtoRuutu = peli.getLauta().getRuudut().get(valittuRuutu);\n                        lahtoRuudunValinta = false;\n                    } else if (maaliRuudunValinta) {\n                        maaliRuutu = peli.getLauta().getRuudut().get(valittuRuutu);\n                        maaliRuudunValinta = false;\n                    }\n                    paivita();"} {"seed":"@EventHandler\n    public void onMove(PlayerMoveEvent event) {\n        evaluate(event.getPlayer(), event.getTo(), event.getFrom());\n    }"} {"seed":"@EventHandler\n    public void onTeleport(PlayerTeleportEvent event) {\n        evaluate(event.getPlayer(), event.getTo(), event.getFrom());\n    }"} {"seed":"private void evaluate(Player player, Location to, Location from) {\n        // they just rotated, no need to check\n        if (from.getX() == to.getX() && from.getY() == to.getY() && from.getZ() == to.getZ()) return;\n\n        Set<Plugin> plugins = PluginHook.getHookedPlugins();\n        for (Plugin plugin : plugins) {\n            PluginHook hook = PluginHook.getHook(plugin);\n            if (hook.isRegistered()) {\n                Object fromClaim = hook.getGenericClaimAt(from);\n                Object toClaim = hook.getGenericClaimAt(to);\n                // one claim or zero claims can be null (but not both)\n                if (!(fromClaim == null && toClaim == null)) {\n                    Bukkit.getPluginManager().callEvent(new ClaimChangeEvent(player, plugin, from, to));\n                    // one claim is null and the other is not\n                    if ((fromClaim == null || toClaim == null)) {\n                        if (fromClaim == null) {\n                            Bukkit.getPluginManager().callEvent(new ClaimEnterEvent(player, plugin, from, to));\n                        } else {\n                            Bukkit.getPluginManager().callEvent(new ClaimLeaveEvent(player, plugin, from, to));\n                        }\n                    } else if (!fromClaim.equals(toClaim)) { // neither are null and they are different claims\n                        Bukkit.getPluginManager().callEvent(new ClaimTransitionEvent(player, plugin, from, to));\n                    }\n                }\n            }\n        }\n    }"} {"seed":"/**\n     * Components\n     */\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_home);\n\n        viewInitial();\n        gridViewInitial();\n    }"} {"seed":"/**\n     * View Initial\n     */\nprivate void viewInitial() {\n        this.mEdtGameName = findViewById(R.id.home_game_name);\n        this.mMaxScore = findViewById(R.id.home_game_max_score);\n        this.mMaxPlayer = findViewById(R.id.home_game_max_players);\n        this.mPlayerCount = findViewById(R.id.home_game_players_count);\n\n        this.mGameList = findViewById(R.id.home_game_list);\n        this.mGameSetting = findViewById(R.id.home_game_setting);\n        this.mGameStart = findViewById(R.id.home_game_start);\n\n        this.mGridView = findViewById(R.id.home_game_players_grid_view);\n        this.mEmpty = findViewById(R.id.home_players_empty_layout);\n\n        this.mGameSetting.setOnClickListener(v -> this.onGameSettingClicked());\n        this.mGameStart.setOnClickListener(v -> {\n            Intent intent = new Intent(this, GamePlay.class);\n            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n            startActivity(intent);\n        });\n\n        this.mGameList.setOnClickListener(v -> {\n            Intent intent = new Intent(this, GameList.class);\n            startActivity(intent);\n        });\n    }"} {"seed":"/**\n     * GridView initial\n     */\nprivate void gridViewInitial() {\n        ArrayList<String> names = new ArrayList<String>();\n        names.add(\"Thiem \");\n        names.add(\"Hai \");\n        names.add(\"Thai \");\n        names.add(\"Duong \");\n        names.add(\"Tuan \");\n        names.add(\"Thai \");\n        names.add(\"Thiem \");\n        names.add(\"Thiem \");\n        names.add(\"Thiem \");\n        names.add(\"Thiem \");\n\n        HomeAdapter adapter = new HomeAdapter(this, names);\n        adapter.delegate = this;\n        this.mGridView.setAdapter(adapter);\n        this.hideShowEmpty();\n    }"} {"seed":"/**\n     * Hide / Show empty image\n     */\nprivate void hideShowEmpty() {\n        this.mEmpty.setVisibility(View.GONE);\n    }"} {"seed":"/**\n     * Hide / Show empty image\n     */\n@Override\n    public void onItemLick(View view, int position) {\n        Log.i(AppConst.TAG_Home, \" Clicked\");\n    }"} {"seed":"/**\n     * On Game Setting button click\n     */\n@SuppressLint(\"RestrictedApi\")\n    private void onGameSettingClicked() {\n        PopupMenu popup = new PopupMenu(this, this.mGameSetting);\n        popup.getMenuInflater().inflate(R.menu.game_setting_menu, popup.getMenu());\n\n        popup.setOnMenuItemClickListener(item -> {\n            switch (item.getItemId()){\n                case R.id.game_setting_sync:\n                    Toast.makeText(this, \"Game sync successfully \", Toast.LENGTH_SHORT).show();\n                    break;\n                case R.id.game_setting_add_players:\n                    Intent intent = new Intent(this, Players.class);\n                    startActivity(intent);\n                    break;\n                case R.id.game_signIn:\n                    Toast.makeText(this, \"Sign in successfully ! \", Toast.LENGTH_SHORT).show();\n                    break;\n            }\n\n            return true;\n        });\n\n        MenuPopupHelper menuHelper = new MenuPopupHelper(this, (MenuBuilder) popup.getMenu(), this.mGameSetting);\n        menuHelper.setForceShowIcon(true);\n        menuHelper.show();\n    }"} {"seed":"@Test\n\tpublic void contextLoads() {\n\t\tPostController postcontroller = new PostController();\n\t\tString res = postcontroller.home();\n\t\tassertEquals(\"Hello World! this is OAuth2\", res);\n\t}"} {"seed":"public void addCartItem(CartItem cartItem) {\n        Session session = sessionFactory.getCurrentSession();\n        session.saveOrUpdate(cartItem);\n        session.flush();\n    }"} {"seed":"public void removeCartItem (CartItem cartItem) {\n        Session session = sessionFactory.getCurrentSession();\n        \n        System.out.println(\"...............CartID=\"+cartItem.getCartItemId());\n        if(cartItem.getQuantity()>1)\n        {\n        \tdouble totalprice=cartItem.getTotalPrice();\n        \tdouble unitprice = (totalprice/cartItem.getQuantity());\n        \tdouble newtotalprice=unitprice*(cartItem.getQuantity()-1);\n        \tcartItem.setQuantity(cartItem.getQuantity()-1);\n        \tcartItem.setTotalPrice(newtotalprice);\n        \tsession.saveOrUpdate(cartItem);\n        \tsession.flush();\n        \t\n        \tCart crt=cartService.getCartById(cartItem.getCart().getCartId());\n        \tdouble grandtot=crt.getGrandTotal();\n        \tcrt.setGrandTotal(grandtot-unitprice);\n        \tsession.saveOrUpdate(crt);\n        \tsession.flush();\n\n        }\n        else if(cartItem.getQuantity()==1)\n        {\n        \tsession.delete(cartItem);\n        \tsession.flush();\n        \t\n        \tCart crt=cartService.getCartById(cartItem.getCart().getCartId());\n        \tcrt.setGrandTotal(0.0);\n        \tsession.saveOrUpdate(crt);\n        \tsession.flush();\n        }\n        \n    }"} {"seed":"public void removeAllCartItems(Cart cart) {\n        List<CartItem> cartItems = cart.getCartItems();\n\n        for (CartItem item : cartItems) {\n            removeCartItem(item);\n        }\n    }"} {"seed":"public CartItem getCartItemByProductId (int productId) {\n        Session session = sessionFactory.getCurrentSession();\n        Query query = session.createQuery(\"from CartItem where productId = ?\");\n        query.setInteger(0, productId);\n        session.flush();\n\n        return (CartItem) query.uniqueResult();\n    }"} {"seed":"public String getShowId() {\n        return show;\n    }"} {"seed":"public float getValue() {\n        return tier;\n    }"} {"seed":"public boolean isSkipped(String tags, long cores, long memory) {\n        try {\n            if (failed.containsKey(tags)) {\n                long [] mark = failed.get(tags);\n                if (cores <= mark[0]) {\n                    logger.info(\"skipped due to not enough cores \" + cores + \" <= \" + mark[0]);\n                    return true;\n                }\n                else if (memory <= mark[1]) {\n                    logger.info(\"skipped due to not enough memory \" + memory + \" <= \" + mark[1]);\n                    return true;\n                }\n            }\n            return false;\n        } catch (Exception e ){\n            logger.info(\"exception checking skipped: \" + e);\n            return false;\n        }\n    }"} {"seed":"public boolean isSkipped(AllocationInterface a) {\n        if (failedAllocs.contains(a)) {\n            return true;\n        }\n        return false;\n    }"} {"seed":"public void skip(String tags, long cores, long memory) {\n        if (tags != null) {\n            failed.put(tags, new long[] { cores, memory});\n        }\n    }"} {"seed":"/**\n     * Adds an allocation that should not be\n     * booked on this show.\n     *\n     * @param Allocation\n     */\npublic void skip(AllocationInterface a) {\n        synchronized (failedAllocs) {\n            failedAllocs.add(a);\n        }\n    }"} {"seed":"/**\n     * Adds an allocation that should not be\n     * booked on this show.\n     *\n     * @param Allocation\n     */\n@Override\n    public int compareTo(SortableShow o) {\n        return (int) ((this.tier * 100) - (o.getValue() * 100));\n    }"} {"seed":"/**\n     * Adds an allocation that should not be\n     * booked on this show.\n     *\n     * @param Allocation\n     */\n@Override\n    public int hashCode() {\n       return show.hashCode();\n    }"} {"seed":"/**\n     * Adds an allocation that should not be\n     * booked on this show.\n     *\n     * @param Allocation\n     */\n@Override\n    public boolean equals(Object other) {\n        if (other == null) {\n            return false;\n        }\n        if (this.getClass() != other.getClass()) {\n            return false;\n        }\n        SortableShow that = (SortableShow) other;\n        return that.getShowId().equals(this.getShowId());\n    }"} {"seed":"public void renderError(Throwable throwable, int mode, View view) {\n        if (mode == ErrorRendererComponent.ERROR_DISPLAY_MODE_SNACKBAR) {\n            if (view != null) {\n                errorRendererComponent.displayErrorInFragmentView(throwable, activity, view);\n            } else {\n                errorRendererComponent.displayError(throwable, activity, activityViewId);\n            }\n        }\n    }"} {"seed":"public void renderErrorString(String error, int mode, View view) {\n        if (view != null) {\n            errorRendererComponent.displayErrorInFragmentView(error, activity, view);\n        } else {\n            errorRendererComponent.displayErrorString(error, activity, activityViewId);\n        }\n    }"} {"seed":"public void launchUserPanelActivity(Activity activity) {\n        Intent toUserPanelActivity = new Intent(activity, UserPanelActivity.class);\n        if (activity != null) {\n            activity.startActivity(toUserPanelActivity);\n        }\n    }"} {"seed":"public void gotoPage() {\n        correctPage.click();\n    }"} {"seed":"public void click() {\n        clickHere.click();\n    }"} {"seed":"public void getCoordinatesBeforeClick() {\n        Point classname = Image.getLocation();\n        xCordBefore = classname.getX();\n    }"} {"seed":"public void getCoordinatesAfterClick() {\n        clickHere.click();\n        Point classname = Image.getLocation();\n        xCordAfter = classname.getX();\n    }"} {"seed":"public void compare() {\n        assertThat(xCordBefore, is(not(xCordAfter)));\n    }"} {"seed":"private JavaScriptObject google() {\n        return google.google();\n    }"} {"seed":"public native JavaScriptObject geocoder() /*-{\n        return $wnd.pgu_geo.geocoder;\n    }-*/;"} {"seed":"public void searchGeopoint(final String location_name, final JavaScriptObject callback, final ProfileViewImpl view) {\n\n        if (locations.isLocationInReferential(location_name)) {\n            executeCallback(callback);\n            return;\n        }\n\n        searchAndAddToCache(location_name, callback, view);\n    }"} {"seed":"private native void executeCallback(JavaScriptObject callback) /*-{\n        if (callback) {\n            $wnd.console.log('executeCallback');\n\n            var google = this.@pgu.client.profile.ui.ProfileViewGeocoder::google()\n                              ();\n\n            callback(google.maps.GeocoderStatus.OK);\n        }\n    }-*/;"} {"seed":"private native void searchAndAddToCache(String location_name, JavaScriptObject callback, ProfileViewImpl view) /*-{\n        $wnd.console.log('searchAndAddToCache');\n\n        var google = this.@pgu.client.profile.ui.ProfileViewGeocoder::google()\n                          ();\n\n        var geocoder = this.@pgu.client.profile.ui.ProfileViewGeocoder::geocoder()\n                            ();\n\n        var that = this;\n\n        geocoder\n            .geocode(\n                {\n                    'address' : location_name\n                },\n                function(results, status) {\n                    if (status == google.maps.GeocoderStatus.OK) {\n\n                        var\n                          location = results[0].geometry.location\n                          , lat = '' + location.lat()\n                          , lng = '' + location.lng()\n                        ;\n\n                        view.@pgu.client.profile.ui.ProfileViewImpl::addGeopointToCache(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)\n                             (location_name, lat, lng);\n\n                    } else if (status == google.maps.GeocoderStatus.ZERO_RESULTS) {\n                        var warn = {\n                            name: 'Unknown location, status'\n                          , msg: location_name + \", \" + status\n                        }\n                        $wnd.console.log(warn);\n\n                    } else if (status == google.maps.GeocoderStatus.OVER_QUERY_LIMIT) {\n\n                        that.@pgu.client.profile.ui.ProfileViewGeocoder::searchGeopointWithDelay(Ljava/lang/String;Lcom/google/gwt/core/client/JavaScriptObject;ILpgu/client/profile/ui/ProfileViewImpl;)\n                             (location_name, callback, 1000, view);\n\n                        var warn = {\n                            name: 'Over query limit'\n                          , msg: location_name\n                        }\n                        $wnd.console.log(warn);\n\n                    } else {\n\n                        var err = {\n                            name: 'Technical error, status'\n                          , msg: location_name + \", \" + status\n                        }\n                        $wnd.console.log(err);\n                    }\n\n                    if (callback) {\n                        callback(status);\n                    }\n                }\n        );\n\n    }-*/;"} {"seed":"private void searchGeopointWithDelay( //\n            final String locationName //\n            , final JavaScriptObject callback //\n            , final int delayMillis //\n            , final ProfileViewImpl view //\n            ) {\n\n        new Timer() {\n\n            @Override\n            public void run() {\n                Scheduler.get().scheduleDeferred(new Command() {\n                    @Override\n                    public void execute() {\n                        searchGeopoint(locationName, callback, view);\n                    }\n                });\n            }\n\n        }.schedule(delayMillis);\n    }"} {"seed":"@Override\n            public void run() {\n                Scheduler.get().scheduleDeferred(new Command() {\n                    @Override\n                    public void execute() {\n                        searchGeopoint(locationName, callback, view);\n                    }\n                });\n            }"} {"seed":"@Override\n                    public void execute() {\n                        searchGeopoint(locationName, callback, view);\n                    }"} {"seed":"public static void main(String[] args) {\n        SimpleWindow sw = new SimpleWindow();\n        \n    }"} {"seed":"@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_agosto);\n\n        easySlider = findViewById(R.id.sliderId);\n\n        List<SliderItem> easySliders=new ArrayList<>();\n        easySliders.add(new SliderItem(\"Pagos a la Pachamama\", R.drawable.ofrendapachamama1));\n        easySliders.add(new SliderItem(\"Pagos a la Pachamama\", R.drawable.ofrendapachamama2));\n        easySliders.add(new SliderItem(\"Pagos a la Pachamama\", R.drawable.ofrendapachamama3));\n        easySliders.add(new SliderItem(\"Pagos a la Pachamama\", R.drawable.ofrendapachamama4));\n        easySlider.setPages(easySliders);\n    }"} {"seed":"public double result(double entry) {\n\t\treturn 1 / (1 - entry);\n\t}"} {"seed":"/**\n     * Method to mapping to given statement \"I should get result\".\n     * \n     * @throws Throwable\n     */\n@Then(\"^I should get result \\\"([^\\\"]*)\\\"$\")\n    public void I_should_get_result_something(final String expectedResult) throws Throwable {\n\n        final SearchResultPage searchResultPage = new SearchResultPage();\n\n        final String result = searchResultPage.getResult();\n\n        assertThat(result).contains(expectedResult);\n    }"} {"seed":"public static void main(String[] args) {\n\n\t\ttry {\n\t\t\tFileInputStream fin= new FileInputStream(\"C:\\\\inputfiles\\\\laustoo\\\\AL_2014.txt\");\n\t\t\tFileOutputStream fout=new FileOutputStream(\"C:\\\\inputfiles\\\\laustoo\\\\nio_AL_2014.txt\");\n\t\t\tFileChannel fc=fin.getChannel();\n\t\t\tFileChannel fco=fout.getChannel();\n\t\t\tByteBuffer buf=ByteBuffer.allocate(1024);\n\t\t\tint num=fc.read(buf);\n\t\t\t\n\t\t\twhile(num != -1){\n\t\t\t\tbuf.flip();\n\t\t\t\tfco.write(buf);\n\t\t\t\tbuf.clear();\n\t\t\t\tnum= fc.read(buf);\n\t\t\t}\n\t\t\tfc.close();\n\t\t\tfco.close();\n\t\t\tfin.close();\n\t\t\tfout.close();\n\t\t\t\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}"} {"seed":"public String getSimbolotopo() {\n        return simbolotopo;\n    }"} {"seed":"public void setSimbolotopo(String simbolotopo) {\n        this.simbolotopo = simbolotopo;\n    }"} {"seed":"public String getNext() {\n        return next;\n    }"} {"seed":"public void setNext(String next) {\n        this.next = next;\n    }"} {"seed":"public boolean isFinal() {\n        return isFinal;\n    }"} {"seed":"public void setIsFinal(boolean isFinal) {\n        this.isFinal = isFinal;\n    }"} {"seed":"public String getSimboloDest() {\n        return simboloDest;\n    }"} {"seed":"public void setSimboloDest(String simboloDest) {\n        this.simboloDest = simboloDest;\n    }"} {"seed":"public String getSimboloEmpilhar() {\n        return simboloEmpilhar;\n    }"} {"seed":"public void setSimboloEmpilhar(String simboloEmpilhar) {\n        this.simboloEmpilhar = simboloEmpilhar;\n     \n    }"} {"seed":"public List<Book> getAllBooks(){\n\t\treturn this.bRepo.findAll();\n\t}"} {"seed":"public Book createBook(Book newBook) {\n\t\treturn this.bRepo.save(newBook);\n\t}"} {"seed":"public Book getSingleBook(Long id) {\n\t\treturn this.bRepo.findById(id).orElse(null); //id is an optional(a boolean) (return everything or nothing)\n\t}"} {"seed":"public Book updateBook(Book updatedBook) {\n\t\treturn this.bRepo.save(updatedBook);\n\t}"} {"seed":"public String deleteBook(Long id) {  //note:  not public Book here because we are returning a string confirmation\n\t\tthis.bRepo.deleteById(id);\n\t\treturn \"Book \" + id + \" has been deleted\"; //confirms that the Record has been deleted\n\t}"} {"seed":"public Book createBookOldway(String title, String description, String language, int numberOfPages) {\n\t\tBook newBook = new Book(title, description, language, numberOfPages);\n\t\treturn this.bRepo.save(newBook);\n\t}"} {"seed":"@Before\n    public void setUp() {\n        initMocks(this);\n        mContext = Robolectric.buildActivity(Activity.class).get();\n\n        when(mFrameContext.makeStyleFor(LIST_STYLES)).thenReturn(mStyleProvider);\n        when(mStyleProvider.getPadding()).thenReturn(EdgeWidths.getDefaultInstance());\n        when(mFrameContext.getActionHandler()).thenReturn(mActionHandler);\n        when(mHostProviders.getAssetProvider()).thenReturn(mAssetProvider);\n        when(mAssetProvider.isRtL()).thenReturn(false);\n        when(mStyleProvider.getRoundedCorners()).thenReturn(RoundedCorners.getDefaultInstance());\n\n        mAdapterParameters = new AdapterParameters(\n                mContext, Suppliers.of(null), mHostProviders, new FakeClock(), false, false);\n\n        when(mFrameContext.makeStyleFor(StyleIdsStack.getDefaultInstance()))\n                .thenReturn(mAdapterParameters.mDefaultStyleProvider);\n\n        mAdapter = new KeySupplier().getAdapter(mContext, mAdapterParameters);\n    }"} {"seed":"@Test\n    public void testViewDoesNotClip() {\n        assertThat(mAdapter.getBaseView().getClipToPadding()).isFalse();\n    }"} {"seed":"@Test\n    public void testOnCreateAdapter_makesList() {\n        ElementList listWithStyles = ElementList.newBuilder()\n                                             .addContents(DEFAULT_CONTENT)\n                                             .addContents(DEFAULT_CONTENT)\n                                             .addContents(DEFAULT_CONTENT)\n                                             .build();\n\n        mAdapter.createAdapter(asElementWithDefaultStyle(listWithStyles), mFrameContext);\n\n        assertThat(mAdapter.getBaseView().getChildCount()).isEqualTo(3);\n        assertThat(mAdapter.getBaseView().getOrientation()).isEqualTo(LinearLayout.VERTICAL);\n    }"} {"seed":"@Test\n    public void testOnCreateAdapter_setsStyles() {\n        ElementList listWithStyles = ElementList.newBuilder().addContents(DEFAULT_CONTENT).build();\n\n        mAdapter.createAdapter(asElementWithDefaultStyle(listWithStyles), mFrameContext);\n\n        verify(mStyleProvider).applyElementStyles(mAdapter);\n    }"} {"seed":"@Config(shadows = {ExtendedShadowLinearLayout.class})\n    @Test\n    public void testTriggerActions_triggersChildren() {\n        Frame frame = Frame.newBuilder().setTag(\"Frame\").build();\n        when(mFrameContext.getFrame()).thenReturn(frame);\n        Element baseElement =\n                Element.newBuilder()\n                        .setElementList(ElementList.newBuilder().addContents(\n                                Content.newBuilder().setElement(Element.newBuilder().setElementList(\n                                        ElementList.getDefaultInstance()))))\n                        .build();\n        mAdapter.createAdapter(baseElement, mFrameContext);\n        mAdapter.bindModel(baseElement, mFrameContext);\n\n        // Replace the child adapter so we can verify on it\n        ElementAdapter<?, ?> mockChildAdapter = mock(ElementAdapter.class);\n        mAdapter.mChildAdapters.set(0, mockChildAdapter);\n\n        ExtendedShadowLinearLayout shadowView = Shadow.extract(mAdapter.getView());\n        mAdapter.getView().setVisibility(View.VISIBLE);\n        shadowView.setAttachedToWindow(true);\n\n        View viewport = new View(mContext);\n\n        mAdapter.triggerViewActions(viewport, mFrameContext);\n\n        verify(mockChildAdapter).triggerViewActions(viewport, mFrameContext);\n    }"} {"seed":"@Test\n    public void testOnBindModel_setsStylesOnlyIfBindingIsDefined() {\n        ElementList list = ElementList.newBuilder().addContents(DEFAULT_CONTENT).build();\n\n        mAdapter.createAdapter(asElement(list, LIST_STYLES), mFrameContext);\n        verify(mFrameContext).makeStyleFor(LIST_STYLES);\n\n        // Binding an element with a different style will not apply the new style\n        StyleIdsStack otherStyles = StyleIdsStack.newBuilder().addStyleIds(\"bobcat\").build();\n\n        mAdapter.bindModel(asElement(list, otherStyles), mFrameContext);\n        verify(mFrameContext, never()).makeStyleFor(otherStyles);\n\n        // But binding an element with a style binding will re-apply the style\n        StyleIdsStack otherStylesWithBinding =\n                StyleIdsStack.newBuilder()\n                        .addStyleIds(\"bobcat\")\n                        .setStyleBinding(StyleBindingRef.newBuilder().setBindingId(\"lynx\"))\n                        .build();\n        when(mFrameContext.makeStyleFor(otherStylesWithBinding)).thenReturn(mStyleProvider);\n\n        mAdapter.bindModel(asElement(list, otherStylesWithBinding), mFrameContext);\n        verify(mFrameContext).makeStyleFor(otherStylesWithBinding);\n    }"} {"seed":"@Test\n    public void testOnBindModel_failsWithIncompatibleModel() {\n        ElementList listWithThreeElements = ElementList.newBuilder()\n                                                    .addContents(DEFAULT_CONTENT)\n                                                    .addContents(DEFAULT_CONTENT)\n                                                    .addContents(DEFAULT_CONTENT)\n                                                    .build();\n\n        mAdapter.createAdapter(asElementWithDefaultStyle(listWithThreeElements), mFrameContext);\n        mAdapter.bindModel(asElementWithDefaultStyle(listWithThreeElements), mFrameContext);\n        mAdapter.unbindModel();\n\n        ElementList listWithTwoElements = ElementList.newBuilder()\n                                                  .addContents(DEFAULT_CONTENT)\n                                                  .addContents(DEFAULT_CONTENT)\n                                                  .build();\n\n        assertThatRunnable(\n                ()\n                        -> mAdapter.bindModel(\n                                asElementWithDefaultStyle(listWithTwoElements), mFrameContext))\n                .throwsAnExceptionOfType(IllegalStateException.class)\n                .that()\n                .hasMessageThat()\n                .contains(\"Internal error in adapters per content\");\n    }"} {"seed":"@Test\n    public void testOnBindModel_elementListBindingRecreatesAdapter() {\n        Element listWithOneItem =\n                Element.newBuilder()\n                        .setElementList(ElementList.newBuilder().addContents(DEFAULT_CONTENT))\n                        .build();\n        Element listWithTwoItems = Element.newBuilder()\n                                           .setElementList(ElementList.newBuilder()\n                                                                   .addContents(DEFAULT_CONTENT)\n                                                                   .addContents(DEFAULT_CONTENT))\n                                           .build();\n\n        when(mFrameContext.getElementBindingValue(ELEMENT_BINDING_REF))\n                .thenReturn(BindingValue.newBuilder().setElement(listWithOneItem).build());\n        mAdapter.createAdapter(LIST_WITH_BOUND_LIST, mFrameContext);\n        // No child adapters have been created yet.\n        assertThat(mAdapter.getBaseView().getChildCount()).isEqualTo(0);\n        assertThat(mAdapter.mChildAdapters).isEmpty();\n\n        when(mFrameContext.getElementBindingValue(ELEMENT_BINDING_REF))\n                .thenReturn(BindingValue.newBuilder().setElement(listWithTwoItems).build());\n        mAdapter.bindModel(LIST_WITH_BOUND_LIST, mFrameContext);\n        // The list adapter creates its one view on bind.\n        assertThat(((LinearLayout) mAdapter.getBaseView().getChildAt(0)).getChildCount())\n                .isEqualTo(2);\n\n        mAdapter.unbindModel();\n        // The list adapter has been released.\n        assertThat(mAdapter.getBaseView().getChildCount()).isEqualTo(0);\n        assertThat(mAdapter.mChildAdapters).isEmpty();\n\n        when(mFrameContext.getElementBindingValue(ELEMENT_BINDING_REF))\n                .thenReturn(BindingValue.newBuilder().setElement(listWithOneItem).build());\n        mAdapter.bindModel(LIST_WITH_BOUND_LIST, mFrameContext);\n        // The list adapter can bind to a different model.\n        assertThat(((LinearLayout) mAdapter.getBaseView().getChildAt(0)).getChildCount())\n                .isEqualTo(1);\n    }"} {"seed":"@Test\n    public void testOnBindModel_bindingWithVisibilityGone() {\n        when(mFrameContext.getElementBindingValue(ELEMENT_BINDING_REF))\n                .thenReturn(BindingValue.newBuilder()\n                                    .setBindingId(ELEMENT_BINDING_REF.getBindingId())\n                                    .setElement(Element.newBuilder().setElementList(DEFAULT_LIST))\n                                    .build());\n        mAdapter.createAdapter(LIST_WITH_BOUND_LIST, mFrameContext);\n        when(mFrameContext.getElementBindingValue(ELEMENT_BINDING_REF))\n                .thenReturn(BindingValue.newBuilder()\n                                    .setBindingId(ELEMENT_BINDING_REF.getBindingId())\n                                    .setVisibility(Visibility.GONE)\n                                    .build());\n\n        mAdapter.bindModel(LIST_WITH_BOUND_LIST, mFrameContext);\n\n        assertThat(mAdapter.getBaseView().getChildCount()).isEqualTo(0);\n        assertThat(mAdapter.mChildAdapters).isEmpty();\n    }"} {"seed":"@Test\n    public void testOnBindModel_bindingWithNoContent() {\n        when(mFrameContext.getElementBindingValue(ELEMENT_BINDING_REF))\n                .thenReturn(BindingValue.newBuilder()\n                                    .setBindingId(ELEMENT_BINDING_REF.getBindingId())\n                                    .setElement(DEFAULT_ELEMENT)\n                                    .build());\n        mAdapter.createAdapter(LIST_WITH_BOUND_LIST, mFrameContext);\n        when(mFrameContext.getElementBindingValue(ELEMENT_BINDING_REF))\n                .thenReturn(BindingValue.newBuilder()\n                                    .setBindingId(ELEMENT_BINDING_REF.getBindingId())\n                                    .build());\n\n        assertThat(mAdapter.getBaseView().getChildCount()).isEqualTo(0);\n        assertThat(mAdapter.mChildAdapters).isEmpty();\n    }"} {"seed":"@Test\n    public void testOnBindModel_bindingWithOptionalAbsent() {\n        when(mFrameContext.getElementBindingValue(ELEMENT_BINDING_REF))\n                .thenReturn(BindingValue.newBuilder()\n                                    .setBindingId(ELEMENT_BINDING_REF.getBindingId())\n                                    .setElement(DEFAULT_ELEMENT)\n                                    .build());\n        mAdapter.createAdapter(LIST_WITH_BOUND_LIST, mFrameContext);\n\n        ElementBindingRef optionalBinding =\n                ELEMENT_BINDING_REF.toBuilder().setIsOptional(true).build();\n        ElementList optionalBindingList =\n                ElementList.newBuilder()\n                        .addContents(Content.newBuilder().setBoundElement(optionalBinding))\n                        .build();\n        when(mFrameContext.getElementBindingValue(optionalBinding))\n                .thenReturn(BindingValue.newBuilder()\n                                    .setBindingId(optionalBinding.getBindingId())\n                                    .build());\n\n        mAdapter.bindModel(asElement(optionalBindingList), mFrameContext);\n\n        assertThat(mAdapter.getBaseView().getChildCount()).isEqualTo(0);\n        assertThat(mAdapter.mChildAdapters).isEmpty();\n    }"} {"seed":"@Test\n    public void testOnBindModel_setsLayoutParamsOnChild() {\n        ElementList list =\n                ElementList.newBuilder()\n                        .addContents(Content.newBuilder().setElement(\n                                DEFAULT_ELEMENT.toBuilder().setStyleReferences(LIST_STYLES)))\n                        .build();\n        when(mStyleProvider.getGravityHorizontal(anyInt())).thenReturn(Gravity.CENTER_HORIZONTAL);\n\n        mAdapter.createAdapter(asElement(list), mFrameContext);\n\n        mAdapter.mChildAdapters.get(0).mWidthPx = 123;\n        mAdapter.mChildAdapters.get(0).mHeightPx = 456;\n\n        mAdapter.bindModel(asElement(list), mFrameContext);\n\n        assertThat(mAdapter.getBaseView().getChildCount()).isEqualTo(1);\n        assertThat(mAdapter.getBaseView().getChildAt(0).getLayoutParams())\n                .isInstanceOf(LinearLayout.LayoutParams.class);\n        assertThat(((LayoutParams) mAdapter.getBaseView().getChildAt(0).getLayoutParams()).gravity)\n                .isEqualTo(Gravity.CENTER_HORIZONTAL);\n        assertThat(((LayoutParams) mAdapter.getBaseView().getChildAt(0).getLayoutParams()).width)\n                .isEqualTo(123);\n        assertThat(((LayoutParams) mAdapter.getBaseView().getChildAt(0).getLayoutParams()).height)\n                .isEqualTo(456);\n    }"} {"seed":"@Test\n    public void testOnBindModel_setsMargins() {\n        String marginsStyleId = \"spacecat\";\n        StyleIdsStack marginsStyles =\n                StyleIdsStack.newBuilder().addStyleIds(marginsStyleId).build();\n        Element elementWithMargins = Element.newBuilder()\n                                             .setStyleReferences(marginsStyles)\n                                             .setElementStack(ElementStack.getDefaultInstance())\n                                             .build();\n        ElementList list = ElementList.newBuilder()\n                                   .addContents(Content.newBuilder().setElement(elementWithMargins))\n                                   .build();\n        when(mFrameContext.makeStyleFor(marginsStyles)).thenReturn(mStyleProvider);\n\n        mAdapter.createAdapter(asElement(list), mFrameContext);\n        mAdapter.bindModel(asElement(list), mFrameContext);\n\n        // Assert that applyMargins is called on the child's layout params\n        ArgumentCaptor<MarginLayoutParams> capturedLayoutParams =\n                ArgumentCaptor.forClass(MarginLayoutParams.class);\n        verify(mStyleProvider).applyMargins(eq(mContext), capturedLayoutParams.capture());\n\n        assertThat(mAdapter.getBaseView().getChildCount()).isEqualTo(1);\n        assertThat(mAdapter.getBaseView().getChildAt(0).getLayoutParams())\n                .isInstanceOf(MarginLayoutParams.class);\n        assertThat(mAdapter.getBaseView().getChildAt(0).getLayoutParams())\n                .isSameInstanceAs(capturedLayoutParams.getValue());\n    }"} {"seed":"@Test\n    public void testReleaseAdapter() {\n        ElementList listWithStyles = ElementList.newBuilder()\n                                             .addContents(DEFAULT_CONTENT)\n                                             .addContents(DEFAULT_CONTENT)\n                                             .addContents(DEFAULT_CONTENT)\n                                             .build();\n\n        mAdapter.createAdapter(asElementWithDefaultStyle(listWithStyles), mFrameContext);\n        mAdapter.bindModel(asElementWithDefaultStyle(listWithStyles), mFrameContext);\n\n        mAdapter.releaseAdapter();\n        assertThat(mAdapter.getBaseView().getChildCount()).isEqualTo(0);\n        assertThat(mAdapter.mChildAdapters).isEmpty();\n    }"} {"seed":"@Test\n    public void testGetVerticalGravity_noModel() {\n        assertThat(mAdapter.getVerticalGravity(Gravity.CLIP_VERTICAL))\n                .isEqualTo(Gravity.CLIP_VERTICAL);\n    }"} {"seed":"@Test\n    public void testGetStyleIdsStack() {\n        ElementList listWithStyles = ElementList.newBuilder().addContents(DEFAULT_CONTENT).build();\n\n        mAdapter.createAdapter(asElement(listWithStyles, LIST_STYLES), mFrameContext);\n\n        assertThat(mAdapter.getElementStyleIdsStack()).isEqualTo(LIST_STYLES);\n    }"} {"seed":"@Test\n    public void testGetModelFromElement() {\n        ElementList model = ElementList.newBuilder().addContents(DEFAULT_CONTENT).build();\n\n        Element elementWithModel = Element.newBuilder().setElementList(model).build();\n        assertThat(mAdapter.getModelFromElement(elementWithModel)).isSameInstanceAs(model);\n\n        Element elementWithWrongModel =\n                Element.newBuilder().setCustomElement(CustomElement.getDefaultInstance()).build();\n        assertThatRunnable(() -> mAdapter.getModelFromElement(elementWithWrongModel))\n                .throwsAnExceptionOfType(PietFatalException.class)\n                .that()\n                .hasMessageThat()\n                .contains(\"Missing ElementList\");\n\n        Element emptyElement = Element.getDefaultInstance();\n        assertThatRunnable(() -> mAdapter.getModelFromElement(emptyElement))\n                .throwsAnExceptionOfType(PietFatalException.class)\n                .that()\n                .hasMessageThat()\n                .contains(\"Missing ElementList\");\n    }"} {"seed":"@Test\n    public void testSetLayoutParamsOnChild() {\n        ElementList list =\n                ElementList.newBuilder()\n                        .addContents(Content.newBuilder().setElement(\n                                DEFAULT_ELEMENT.toBuilder().setStyleReferences(LIST_STYLES)))\n                        .build();\n        when(mStyleProvider.getWidthSpecPx(mContext)).thenReturn(123);\n        when(mStyleProvider.getHeightSpecPx(mContext)).thenReturn(456);\n        when(mStyleProvider.getGravityHorizontal(anyInt())).thenReturn(Gravity.CENTER_HORIZONTAL);\n\n        mAdapter.createAdapter(asElement(list), mFrameContext);\n\n        LayoutParams layoutParams = new LayoutParams(\n                ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n        mAdapter.setLayoutParams(layoutParams);\n\n        assertThat(((LayoutParams) mAdapter.getBaseView().getChildAt(0).getLayoutParams()).gravity)\n                .isEqualTo(Gravity.CENTER_HORIZONTAL);\n        assertThat(((LayoutParams) mAdapter.getBaseView().getChildAt(0).getLayoutParams()).width)\n                .isEqualTo(123);\n        assertThat(((LayoutParams) mAdapter.getBaseView().getChildAt(0).getLayoutParams()).height)\n                .isEqualTo(456);\n    }"} {"seed":"@Test\n    public void testSetLayoutParams_childWidthSet() {\n        int childWidth = 5;\n\n        ElementList list = ElementList.newBuilder()\n                                   .addContents(Content.newBuilder().setElement(IMAGE_ELEMENT))\n                                   .build();\n\n        mAdapter.createAdapter(asElement(list), mFrameContext);\n        StyleProvider childStyleProvider = mock(StyleProvider.class);\n        ImageElementAdapter mockChildAdapter = mock(ImageElementAdapter.class);\n        when(mockChildAdapter.getComputedWidthPx()).thenReturn(childWidth);\n        when(mockChildAdapter.getElementStyle()).thenReturn(childStyleProvider);\n        when(mockChildAdapter.getHorizontalGravity(anyInt())).thenReturn(Gravity.CENTER_HORIZONTAL);\n        when(mockChildAdapter.getElementStyle().hasGravityHorizontal()).thenReturn(true);\n        mAdapter.mChildAdapters.set(0, mockChildAdapter);\n\n        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(\n                ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n        mAdapter.setLayoutParams(params);\n\n        ArgumentCaptor<LinearLayout.LayoutParams> childLayoutParamsCaptor =\n                ArgumentCaptor.forClass(LinearLayout.LayoutParams.class);\n        verify(mockChildAdapter).setLayoutParams(childLayoutParamsCaptor.capture());\n\n        LinearLayout.LayoutParams childLayoutParams = childLayoutParamsCaptor.getValue();\n        assertThat(childLayoutParams.width).isEqualTo(childWidth);\n        assertThat(childLayoutParams.gravity).isEqualTo(Gravity.CENTER_HORIZONTAL);\n\n        verify(childStyleProvider).applyMargins(mContext, childLayoutParams);\n    }"} {"seed":"@Test\n    public void testSetLayoutParams_widthSetOnList() {\n        ElementList list = ElementList.newBuilder()\n                                   .addContents(Content.newBuilder().setElement(IMAGE_ELEMENT))\n                                   .build();\n\n        mAdapter.createAdapter(asElement(list), mFrameContext);\n\n        LinearLayout.LayoutParams params =\n                new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT);\n        params.weight = 1;\n        mAdapter.setLayoutParams(params);\n\n        assertThat(mAdapter.getBaseView().getChildCount()).isEqualTo(1);\n        assertThat(mAdapter.getBaseView().getChildAt(0).getLayoutParams())\n                .isInstanceOf(LinearLayout.LayoutParams.class);\n        assertThat(((LayoutParams) mAdapter.getBaseView().getChildAt(0).getLayoutParams()).width)\n                .isEqualTo(ViewGroup.LayoutParams.MATCH_PARENT);\n        assertThat(((LayoutParams) mAdapter.getBaseView().getChildAt(0).getLayoutParams()).height)\n                .isEqualTo(ViewGroup.LayoutParams.WRAP_CONTENT);\n    }"} {"seed":"private static Element asElement(ElementList elementList) {\n        return Element.newBuilder().setElementList(elementList).build();\n    }"} {"seed":"private static Element asElement(ElementList elementList, StyleIdsStack styles) {\n        return Element.newBuilder().setStyleReferences(styles).setElementList(elementList).build();\n    }"} {"seed":"private static Element asElementWithDefaultStyle(ElementList elementList) {\n        return Element.newBuilder()\n                .setStyleReferences(LIST_STYLES)\n                .setElementList(elementList)\n                .build();\n    }"} {"seed":"public static ArrayList<String> getImageUrls(){\n        ArrayList<String> list = new ArrayList<>();\n        //也可以传本地图片，格式如下：\n//                list.add(\"file:///storage/emulated/0/xxxx.jpg\");\n//                list.add(\"file:///storage/emulated/0/zzzzz.jpg\");\n        list.add(\"http://p1.wmpic.me/article/2015/06/29/1435559754_fnZtksvI.jpg\");\n        list.add(\"http://p2.wmpic.me/article/2015/06/29/1435559758_rMcNLvQq.jpg\");\n        list.add(\"http://res.mamiw.com/uploads/allimg/170215/19-1F215094J3952.gif\");\n        list.add(\"http://res.mamiw.com/uploads/allimg/151223/2241033125-6.gif\");\n        list.add(\"http://i-3.yxdown.com/2016/5/15/0b7ab36c-26d4-469e-806c-ca396d9e1da6.gif\");\n        list.add(\"http://i-3.yxdown.com/2016/5/15/196566b6-f4cd-4067-9fb9-0b7c46468c73.gif\");\n        list.add(\"http://i-3.yxdown.com/2016/5/15/e94ac816-f2e9-4456-9697-589fb29e4dda.gif\");\n        list.add(\"http://i-3.yxdown.com/2016/5/15/82001295-c8f4-4b79-bc19-b029d868c00d.gif\");\n        list.add(\"http://i-3.yxdown.com/2016/5/15/c037f911-105f-41ba-a5ad-6b6ca6b70efc.gif\");\n        list.add(\"http://res.mamiw.com/uploads/allimg/170214/19-1F21410225bc.gif\");\n        list.add(\"http://res.mamiw.com/uploads/allimg/170214/19-1F214102102J8.gif\");\n        list.add(\"http://res.mamiw.com/uploads/allimg/170212/19-1F21213252A02.gif\");\n        list.add(\"http://pic1.win4000.com/pic/6/da/50bc520323.jpg\");\n        list.add(\"http://www.wmpic.me/wp-content/uploads/2014/02/20140218150739227.jpg\");\n        list.add(\"http://www.bz55.com/uploads/allimg/140904/138-140Z4092036.jpg\");\n        list.add(\"http://pic18.nipic.com/20111223/5252423_182312570000_2.jpg\");\n        list.add(\"http://pic15.nipic.com/20110621/6632244_101716433621_2.jpg\");\n        list.add(\"http://pic18.nipic.com/20111223/5252423_185908474000_2.jpg\");\n        list.add(\"http://pic18.nipic.com/20120207/9040008_163401147000_2.jpg\")"} {"seed":"�图\n     * @return\n     */\n    public static ArrayList<String> getBigImgUrls(){\n        ArrayList<String> list = new ArrayList<>();\n        list.add(\"http://pic18.nipic.com/20120103/8783405_180811375100_2.jpg\");\n        list.add(\"http://pic25.nipic.com/20121201/10258080_144012468179_2.j"} {"seed":"这里随便找两张小图的\n     * @return\n     */\n    public static ArrayList<String> getLowImgUrls(){\n        ArrayList<String> list = new ArrayList<>();\n        list.add(\"http://img.qq745.com/uploads/hzbimg/0907/hzb33617.png\");\n        list.add(\"http://img.qq745.com/uplo"} {"seed":"public static void main(String[] args) \n\t{\n\t\tStopWatch s1=new StopWatch();\n\t\tSystem.out.println(\"enter 0 to start \");\n\t\tint start1=Util1.getInt();\n\t\tif(start1==0)\n\t\t{\n\t\t\ts1.startTime();  //calling nonstatic starttime method\n\t\t\t\n\t\t}\n\t\t\n\t\tSystem.out.println(\"enter 1 to end\");\n\t\tint stop1=Util1.getInt();\n\t\t\n\t\tif(stop1==1)\n\t\t{\n\t\t\t\n\t\t\ts1.stopTime();  //calling nonstatic stoptime method\n\t\t\t\n\t\t}\n\t\t\n\t\tlong elapsedTime=s1.stop-s1.start; //elapsed time (stop-start)\n\t\t\n\t\tSystem.out.println(\"elapsedTime \"+elapsedTime*0.001+\" milliseconds\");\n\t}"} {"seed":"public void startTime()  //start method\n\t\t{\n\t\t\t\t\n\t\t\tstart=System.currentTimeMillis();  //this method takes the current system time\n\t\t\t\t\n\t\t}"} {"seed":"public void stopTime() //stop method\n\t\t{\n\t\t\t\t\n\t\t\tstop=System.currentTimeMillis();  //this method takes the current system time\n\t\t\t\t\n\t\t}"} {"seed":"public static void firstDataProcess()\n        {\n            Connection conn = SystemInitial.getConn();\n            String sql = \"select * from CategoryInfo\";\n            PreparedStatement pstmt;\n            try {\n            pstmt = (PreparedStatement)conn.prepareStatement(sql);\n            ResultSet rs = pstmt.executeQuery();\n            \n            Sender sender = new Sender(\"Queue\");\n\n            DataInfo dataInfo = new DataInfo();\n\n            while (rs.next())\n            {\n                String categoryName = rs.getString(1);\n                String categoryID = rs.getString(2);\n                System.out.println(\"category name: \"+categoryName+\" category ID: \"+ categoryID);\n                dataInfo.setItemName(\"@\"+categoryName);\n                dataInfo.setItemID(categoryID);\n                dataInfo.printItem();\n                sender.sendMessage(dataInfo);\n            }\n            } catch (Exception e) {\n                 e.printStackTrace();\n            }\n\n\n            sql = \"select * from TransferInfo\";\n            try {\n            pstmt = (PreparedStatement)conn.prepareStatement(sql);\n            ResultSet rs = pstmt.executeQuery();\n\n            Sender sender = new Sender(\"Queue\");\n\n            DataInfo dataInfo = new DataInfo();\n\n            while (rs.next())\n            {\n                String transferName = rs.getString(1);\n                String transferID = rs.getString(2);\n                System.out.println(\"Transfer name: \"+transferName+\" Transfer Amount: \"+ transferID);\n                dataInfo.setItemName(\"#\"+transferName);\n                dataInfo.setItemID(transferID);\n                dataInfo.printItem();\n                sender.sendMessage(dataInfo);\n            }\n            } catch (Exception e) {\n                 e.printStackTrace();\n            }\n\n        }"} {"seed":"public static void resultProcess(){\n          try{\n        Receiver receiver = new Receiver(\"Queue2\");\n            Thread receiverThread = new Thread(receiver);  \n            receiverThread.start();}\n        catch(Exception e){\n            e.printStackTrace();\n        }\n         \n     }"} {"seed":"public static void checkDataProcess(String categoryID){\n        Connection conn = SystemInitial.getConn();\n        String sql = \"select * from \" + categoryID;\n        PreparedStatement pstmt;\n        try {\n        pstmt = (PreparedStatement)conn.prepareStatement(sql);\n        ResultSet rs = pstmt.executeQuery();\n\n        Sender sender = new Sender(\"Queue3\");\n\n        DataInfo dataInfo = new DataInfo();\n\n        while (rs.next())\n        {\n            String transferName = rs.getString(1);\n            String transferID = rs.getString(2);\n            System.out.println(\"check transfer name: \"+transferName+\" check transfer amount: \"+ transferID);\n            dataInfo.setItemName(\"!\"+transferName);\n            dataInfo.setItemID(transferID);\n            dataInfo.printItem();\n            sender.sendMessage(dataInfo);\n        }\n\n\n        } catch (Exception e) {\n             e.printStackTrace();\n        }\n    }"} {"seed":"@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate (savedInstanceState);\n        setContentView (R.layout.activity_register);\n        getSupportActionBar ().hide ();\n\n        mFullName = findViewById (R.id.FullName);\n        mEmail = findViewById (R.id.EmailReg);\n        mPassword = findViewById (R.id.PasswordReg);\n\n        \n        mRegisterBtn = findViewById (R.id.RegistrationBtn);\n        mLoginBtn = findViewById (R.id.createText1);\n\n        fAuth = FirebaseAuth.getInstance();\n        progressBar = findViewById (R.id.progressBar);\n\n        if (fAuth.getCurrentUser () != null ){\n            startActivity (new Intent (getApplicationContext (), MainActivity.class));\n            finish();\n        }\n\n        mRegisterBtn.setOnClickListener (new View.OnClickListener () {\n            @Override\n            public void onClick(View view) {\n                String email = mEmail.getText ().toString ().trim ();\n                String password = mPassword.getText ().toString ().trim ();\n\n                if (TextUtils.isEmpty (email)){\n                    mEmail.setError (\"Email is Required\");\n                    return;\n                }\n\n                if (TextUtils.isEmpty (password)){\n                    mPassword.setError (\"Password is Required\");\n                    return;\n            }\n\n                if (password.length () < 6){\n                    mPassword.setError (\"password must be 6 or more characters\");\n                    return;\n                }\n\n                progressBar.setVisibility (View.VISIBLE);\n                /* Register the user in firebase */\n\n                fAuth.createUserWithEmailAndPassword (email,password).addOnCompleteListener (new OnCompleteListener<AuthResult> () {\n                    @Override\n                    public void onComplete(@NonNull Task<AuthResult> task) {\n                        if (task.isSuccessful ()){\n                            Toast.makeText (Register.this, \"User Created\", Toast.LENGTH_SHORT).show ();\n                            startActivity (new Intent (getApplicationContext (), MainActivity.class));\n                        }else {\n                            Toast.makeText (Register.this, \"Error ! \" + task.getException ().getMessage (), Toast.LENGTH_SHORT).show ();\n                        }\n                    }\n                });\n        }\n\n        });\n\n        mLoginBtn.setOnClickListener (new View.OnClickListener () {\n            @Override\n            public void onClick(View view) {\n                startActivity (new Intent (getApplicationContext (), Login.class));\n            }\n        });\n    }"} {"seed":"@Override\n            public void onClick(View view) {\n                String email = mEmail.getText ().toString ().trim ();\n                String password = mPassword.getText ().toString ().trim ();\n\n                if (TextUtils.isEmpty (email)){\n                    mEmail.setError (\"Email is Required\");\n                    return;\n                }\n\n                if (TextUtils.isEmpty (password)){\n                    mPassword.setError (\"Password is Required\");\n                    return;\n            }\n\n                if (password.length () < 6){\n                    mPassword.setError (\"password must be 6 or more characters\");\n                    return;\n                }\n\n                progressBar.setVisibility (View.VISIBLE);\n                /* Register the user in firebase */\n\n                fAuth.createUserWithEmailAndPassword (email,password).addOnCompleteListener (new OnCompleteListener<AuthResult> () {\n                    @Override\n                    public void onComplete(@NonNull Task<AuthResult> task) {\n                        if (task.isSuccessful ()){\n                            Toast.makeText (Register.this, \"User Created\", Toast.LENGTH_SHORT).show ();\n                            startActivity (new Intent (getApplicationContext (), MainActivity.class));\n                        }else {\n                            Toast.makeText (Register.this, \"Error ! \" + task.getException ().getMessage (), Toast.LENGTH_SHORT).show ();\n                        }\n                    }\n                });\n        }"} {"seed":"@Override\n            public void onClick(View view) {\n                startActivity (new Intent (getApplicationContext (), Login.class));\n            }"} {"seed":"@Override\n                    public void onComplete(@NonNull Task<AuthResult> task) {\n                        if (task.isSuccessful ()){\n                            Toast.makeText (Register.this, \"User Created\", Toast.LENGTH_SHORT).show ();\n                            startActivity (new Intent (getApplicationContext (), MainActivity.class));\n                        }else {\n                            Toast.makeText (Register.this, \"Error ! \" + task.getException ().getMessage (), Toast.LENGTH_SHORT).show ();\n                        }\n                    }"} {"seed":"public static void main(String[] args) {\n        float f = 1F;\n        // float f = (float) 1D;\n    }"} {"seed":"@Query(\"FROM Versao v JOIN FETCH v.efetividadeGrupo\")\n    List<Versao> findAllFetched();"} {"seed":"@Override\n  protected void findTypeConstants(FacesBean.Type type)\n  {\n    super.findTypeConstants(type);\n    _discloseNoneKey = type.findKey(\"discloseNone\");\n    _discloseManyKey = type.findKey(\"discloseMany\");\n  }"} {"seed":"@SuppressWarnings(\"unchecked\")\n  @Override\n  public void decode(FacesContext context, UIComponent component)\n  {\n    Map<String, String> parameters = \n      context.getExternalContext().getRequestParameterMap();\n    \n    Object event = parameters.get(XhtmlConstants.EVENT_PARAM);\n    if (XhtmlConstants.HIDE_EVENT.equals(event) ||\n        XhtmlConstants.SHOW_EVENT.equals(event))\n    {\n      Object source = parameters.get(XhtmlConstants.SOURCE_PARAM);\n      String id = component.getClientId(context);\n      \n      if (id.equals(source))\n      {\n        boolean isDisclosed = XhtmlConstants.SHOW_EVENT.equals(event);\n        String itemId = parameters.get(\"targetItem\");\n        if (itemId != null)\n        {\n          List<UIComponent> children = component.getChildren();\n          for (UIComponent child : children)\n          {\n            if (!(child instanceof UIXShowDetail))\n              continue;\n\n            // Don't even bother with disabled showDetailItems -\n            // a malicious user should not be able to force\n            // a disabled item open by dummying up an event\n            if (!child.isRendered() || _isItemDisabled(child))\n              continue;\n\n            if (itemId.equals(child.getClientId(context)))\n            {\n              (new DisclosureEvent(child, isDisclosed)).queue();\n              RequestContext rc = RequestContext.getCurrentInstance();\n\n              // Don't force PPR on for the browsers that do not support Ajax\n              Object cap = rc.getAgent().getCapabilities().get(TrinidadAgent.CAP_PARTIAL_RENDERING);\n              if ((cap != null) && (Boolean.TRUE.equals(cap)))\n              {\n                RequestContext.getCurrentInstance().addPartialTarget(component);\n                PartialPageUtils.forcePartialRendering(context);\n              }\n\n              break;\n            }\n          }\n        }\n      }\n    }\n  }"} {"seed":"@Override\n  public boolean getRendersChildren()\n  {\n    return true;\n  }"} {"seed":"@Override\n  protected boolean shouldRenderId(\n    FacesContext context,\n    UIComponent  component)\n  {\n    return true;\n  }"} {"seed":"/**\n   *  First: If nothing is disclosed, makes the first child disclosed.\n   *\n   *  Makes sure that the child being disclosed has rendered = true\n   *  and is not disabled.\n   *\n   *  Second: Renders a vertical panel bar and children in individual panels.\n   *\n   *  For the panel bar, draws a DIV that forms the outline of panels.\n   *  Within the DIV, iteratively calls the encodeBegin, encodeChildren and\n   *  encodeEnd on the panel children (if they have rendered and disclosed\n   *  set to true).\n   *\n   *  Non UIXShowDetail children are ignored.\n   *  The title of each of the panels is the same as the text assigned to\n   *  UIXShowDetail child. When text attribute is not specified,\n   *  title remains blank.\n   * @param context the faces context object\n   * @param component the UIComponent object\n   * @throws IOException when some issues while writing output\n   */\n@SuppressWarnings(\"unchecked\")\n  @Override\n  protected void encodeAll(\n    FacesContext        context,\n    RenderingContext    arc,\n    UIComponent         component,\n    FacesBean           bean) throws IOException\n  {\n    FormData fData = arc.getFormData();\n    String formName = \"\";\n\n    if (fData != null)\n    {\n      formName = fData.getName();\n      if (formName == null)\n      {\n        _LOG.warning(\"PANELACCORDION_MUST_INSIDE_FORM\");\n        return;\n      }\n      // Hidden field to store parameter targetItem is needed for non\n      // Ajax browsers to pass the target item Id back to the server.\n      boolean pprEnabled =\n        PartialPageUtils.supportsPartialRendering(arc);\n      if (!pprEnabled)\n      {\n        fData.addNeededValue(XhtmlConstants.TARGETITEM_PARAM);\n      }\n    }\n\n    List<UIComponent> children = component.getChildren();\n    int numChildren = children.size();\n    UIComponent disclosedChild = null;\n    UIXShowDetail renderableChild = null;\n\n    for (int indxChild = 0; indxChild < numChildren ; indxChild++ )\n    {\n      UIComponent child =  children.get(indxChild);\n      if (! (child instanceof UIXShowDetail) )\n      {\n        continue;\n      }\n\n      UIXShowDetail detailChild =  (UIXShowDetail) children.get(indxChild);\n\n      if (detailChild.isRendered())\n      {\n        // Mark the first renderable child\n        if (_isItemDisabled(detailChild))\n        {\n          continue;\n        }\n        if (renderableChild == null)\n        {\n          renderableChild = detailChild;\n        }\n        if (detailChild.isDisclosed())\n        {\n          disclosedChild = detailChild;\n          // A diclosed child found. return.\n          break;\n        }\n      }\n    }\n\n    // If we have a minimum of 1 disclosed child and none have been disclosed\n    // yet, disclose the first rendered one:\n    if ( (disclosedChild == null) && !getDiscloseNone(bean) &&\n      (renderableChild != null) && !renderableChild.isDisclosedTransient())\n    {\n      renderableChild.setDisclosed(true);\n    }\n\n    ResponseWriter out = context.getResponseWriter();\n    String compId = component.getClientId(context);\n\n    out.startElement(\"div\", component);\n\n    renderId(context, component);\n    renderAllAttributes(context, arc, bean);\n\n    boolean discloseMany = getDiscloseMany(bean);\n    boolean discloseNone = getDiscloseNone(bean);\n    boolean disclosedFixed = false;\n    if (discloseMany && !discloseNone) // must keep at least one item disclosed\n    {\n      // This is a special case where we must determine if we have to fix the\n      // disclosure state of one of the items.\n      int disclosedCount = 0;\n      for (UIComponent child : (List<UIComponent>) component.getChildren())\n      {\n        if (!(child instanceof UIXShowDetail) ||\n            !child.isRendered())\n          continue;\n\n        UIXShowDetail detailItem = (UIXShowDetail) child;\n        if (detailItem.isDisclosed())\n        {\n          disclosedCount++;\n          if (disclosedCount > 1)\n          {\n            break; // we have enough information at this point to stop counting\n          }\n        }\n      }\n      if (disclosedCount <= 1)\n      {\n        disclosedFixed = true;\n      }\n    }\n\n    boolean childAlreadyRendered = false;\n    for (UIComponent child : (List<UIComponent>) component.getChildren())\n    {\n      if (!(child instanceof UIXShowDetail) ||\n          !child.isRendered())\n        continue;\n      \n      UIXShowDetail detailItem = (UIXShowDetail) child;\n      boolean disabled = _isItemDisabled(detailItem);\n      String titleText = (String)\n        detailItem.getAttributes().get(CoreShowDetailItem.TEXT_KEY.getName());\n      boolean disclosed = detailItem.isDisclosed();\n\n      if (childAlreadyRendered)\n      {\n        // The detail child should be disclosed only when all three criteria met\n        // 1. is marked as disclosed\n        // 2. is not disabled and\n        // 3. if a child is not already disclosed. This occurs when more than\n        //    one showDetail child has it's disclosed property set to true.\n        disclosed = false;\n      }\n\n      // Header renderer section.\n      out.startElement(\"div\", detailItem);\n\n      String detailItemId = detailItem.getClientId(context);\n      String itemStyleClass;\n      if (disabled)\n        itemStyleClass = getHeaderDisabledStyleClass();\n      else if (disclosed)\n        itemStyleClass = getHeaderExpandedStyleClass();\n      else\n        itemStyleClass = getHeaderCollapsedStyleClass();\n        \n      renderStyleClass(context, arc, itemStyleClass);\n\n      // Render the toolbar component, if any (we use float to keep\n      // the toolbar on the right - or left, in RTL languages - so\n      // it has to be rendered first)\n      UIComponent toolbar = getFacet(detailItem,\n                                     CoreShowDetailItem.TOOLBAR_FACET);\n      if (toolbar != null)\n      {\n        out.startElement(\"div\", detailItem);\n        renderStyleClass(context, arc, SkinSelectors.AF_PANELACCORDION_TOOLBAR_STYLE_CLASS);\n        encodeChild(context, toolbar);\n        out.endElement(\"div\");\n      }\n      \n      boolean javaScriptSupport = supportsScripting(arc);\n      \n      if (javaScriptSupport)\n      {\n        out.startElement(\"a\", null);\n        out.writeAttribute(\"name\", detailItemId, null);\n      }\n      else\n      {\n        // For Non-JavaScript browsers, render an input element(type=submit) to \n        // submit the page. Encode the name attribute with the parameter name \n        // and value thus it would enable the browsers to include the name of \n        // this element in its payLoad if it submits the page.\n        out.startElement(\"input\", null);\n        out.writeAttribute(\"type\", \"submit\", null);\n      }\n\n      renderStyleClass(context, arc,\n                       disabled\n                         ? getLinkDisabledStyleClass()\n                         : getLinkEnabledStyleClass());\n\n      // If the child is disclosable and enabled...\n      boolean disclosable =\n        discloseNone || (! disclosed) || (discloseMany && !disclosedFixed);\n      if ( disclosable && (! disabled) )\n      {\n        boolean isImmediate = detailItem.isImmediate();\n        String event = disclosed ? \"hide\" : \"show\";\n        \n        if (javaScriptSupport)\n        {\n          String onClickHandler = _getFormSubmitScript(component,\n                                                       arc,\n                                                       event,\n                                                       detailItemId,\n                                                       formName,\n                                                       compId,\n                                                       isImmediate);\n          out.writeAttribute(\"onclick\", onClickHandler, null);\n          out.writeAttribute(\"href\", \"#\", null);\n        }\n        else\n        {\n          String nameAttri = XhtmlUtils.getEncodedParameter\n                                          (XhtmlConstants.SOURCE_PARAM)\n                             + XhtmlUtils.getEncodedParameter(compId)\n                             + XhtmlUtils.getEncodedParameter\n                                         (XhtmlConstants.EVENT_PARAM)\n                             + XhtmlUtils.getEncodedParameter(event)\n                             + XhtmlUtils.getEncodedParameter\n                                         (XhtmlConstants.TARGETITEM_PARAM)\n                             + detailItemId;\n                             \n          out.writeAttribute(\"name\", nameAttri, null);\n        }\n      }\n      \n      if (javaScriptSupport)\n      { \n        // =-=rbaranwa Per the UI Review, no icon to be rendered when\n        // panel is disabled.\n        if (! disabled)\n        {\n          ShowDetailRenderer.renderDisclosureIcon(context,\n                                                   arc,\n                                                   disclosed,\n                                                   getDisclosedTipKey(),\n                                                   getUndisclosedTipKey());\n        }\n        if (titleText != null)\n        {\n          out.writeText(titleText, null);\n        }\n        out.endElement(\"a\");\n      }\n      else\n      {\n        // Since we cannot render any image element as a child of input element, \n        // just render the icon symbol along with the text.\n        String icon = disclosed ? XhtmlConstants.NON_JS_DETAIL_DISCLOSED_ICON :\n                                  XhtmlConstants.NON_JS_DETAIL_UNDISCLOSED_ICON;\n        if (titleText != null)\n        {\n          icon = icon + titleText;\n        }\n        \n        out.writeAttribute(\"value\", icon, null);\n        \n        if (disabled)\n        {\n          out.writeAttribute(\"disabled\", Boolean.TRUE, \"disabled\");\n        }\n        \n        out.endElement(\"input\");\n      }\n      \n      out.endElement(\"div\"); // Ending div for an individual panel\n\n\n      // The detail child should be disclosed only when all three criteria met\n      // 1. is marked as disclosed\n      // 2. is not disabled and\n      // 3. if a child is not already disclosed. This occurs when more than\n      //    one showDetail child has it's disclosed property set to true.\n      if (disclosed && (! disabled) && (! childAlreadyRendered) )\n      {\n        _encodeDetailItem(context, arc, component, detailItem, out);\n        if (!discloseMany)\n        {\n          childAlreadyRendered = true;\n        }\n      }\n    }\n    out.endElement(\"div\");\n  }"} {"seed":"/**\n   *  First: If nothing is disclosed, makes the first child disclosed.\n   *\n   *  Makes sure that the child being disclosed has rendered = true\n   *  and is not disabled.\n   *\n   *  Second: Renders a vertical panel bar and children in individual panels.\n   *\n   *  For the panel bar, draws a DIV that forms the outline of panels.\n   *  Within the DIV, iteratively calls the encodeBegin, encodeChildren and\n   *  encodeEnd on the panel children (if they have rendered and disclosed\n   *  set to true).\n   *\n   *  Non UIXShowDetail children are ignored.\n   *  The title of each of the panels is the same as the text assigned to\n   *  UIXShowDetail child. When text attribute is not specified,\n   *  title remains blank.\n   * @param context the faces context object\n   * @param component the UIComponent object\n   * @throws IOException when some issues while writing output\n   */\n@Override\n  protected String getDefaultStyleClass(FacesBean bean)\n  {\n    return SkinSelectors.AF_PANELACCORDION_STYLE_CLASS;\n  }"} {"seed":"/**\n   *  First: If nothing is disclosed, makes the first child disclosed.\n   *\n   *  Makes sure that the child being disclosed has rendered = true\n   *  and is not disabled.\n   *\n   *  Second: Renders a vertical panel bar and children in individual panels.\n   *\n   *  For the panel bar, draws a DIV that forms the outline of panels.\n   *  Within the DIV, iteratively calls the encodeBegin, encodeChildren and\n   *  encodeEnd on the panel children (if they have rendered and disclosed\n   *  set to true).\n   *\n   *  Non UIXShowDetail children are ignored.\n   *  The title of each of the panels is the same as the text assigned to\n   *  UIXShowDetail child. When text attribute is not specified,\n   *  title remains blank.\n   * @param context the faces context object\n   * @param component the UIComponent object\n   * @throws IOException when some issues while writing output\n   */\nprotected String getContentStyleClass()\n  {\n    return SkinSelectors.AF_PANELACCORDION_CONTENT_STYLE_CLASS;\n  }"} {"seed":"/**\n   *  First: If nothing is disclosed, makes the first child disclosed.\n   *\n   *  Makes sure that the child being disclosed has rendered = true\n   *  and is not disabled.\n   *\n   *  Second: Renders a vertical panel bar and children in individual panels.\n   *\n   *  For the panel bar, draws a DIV that forms the outline of panels.\n   *  Within the DIV, iteratively calls the encodeBegin, encodeChildren and\n   *  encodeEnd on the panel children (if they have rendered and disclosed\n   *  set to true).\n   *\n   *  Non UIXShowDetail children are ignored.\n   *  The title of each of the panels is the same as the text assigned to\n   *  UIXShowDetail child. When text attribute is not specified,\n   *  title remains blank.\n   * @param context the faces context object\n   * @param component the UIComponent object\n   * @throws IOException when some issues while writing output\n   */\nprotected String getHeaderDisabledStyleClass()\n  {\n    return SkinSelectors.AF_PANELACCORDION_HEADER_DISABLED_STYLE_CLASS;\n  }"} {"seed":"/**\n   *  First: If nothing is disclosed, makes the first child disclosed.\n   *\n   *  Makes sure that the child being disclosed has rendered = true\n   *  and is not disabled.\n   *\n   *  Second: Renders a vertical panel bar and children in individual panels.\n   *\n   *  For the panel bar, draws a DIV that forms the outline of panels.\n   *  Within the DIV, iteratively calls the encodeBegin, encodeChildren and\n   *  encodeEnd on the panel children (if they have rendered and disclosed\n   *  set to true).\n   *\n   *  Non UIXShowDetail children are ignored.\n   *  The title of each of the panels is the same as the text assigned to\n   *  UIXShowDetail child. When text attribute is not specified,\n   *  title remains blank.\n   * @param context the faces context object\n   * @param component the UIComponent object\n   * @throws IOException when some issues while writing output\n   */\nprotected String getHeaderExpandedStyleClass()\n  {\n    return SkinSelectors.AF_PANELACCORDION_HEADER_EXPANDED_STYLE_CLASS;\n  }"} {"seed":"/**\n   *  First: If nothing is disclosed, makes the first child disclosed.\n   *\n   *  Makes sure that the child being disclosed has rendered = true\n   *  and is not disabled.\n   *\n   *  Second: Renders a vertical panel bar and children in individual panels.\n   *\n   *  For the panel bar, draws a DIV that forms the outline of panels.\n   *  Within the DIV, iteratively calls the encodeBegin, encodeChildren and\n   *  encodeEnd on the panel children (if they have rendered and disclosed\n   *  set to true).\n   *\n   *  Non UIXShowDetail children are ignored.\n   *  The title of each of the panels is the same as the text assigned to\n   *  UIXShowDetail child. When text attribute is not specified,\n   *  title remains blank.\n   * @param context the faces context object\n   * @param component the UIComponent object\n   * @throws IOException when some issues while writing output\n   */\nprotected String getHeaderCollapsedStyleClass()\n  {\n    return SkinSelectors.AF_PANELACCORDION_HEADER_COLLAPSED_STYLE_CLASS;\n  }"} {"seed":"/**\n   *  First: If nothing is disclosed, makes the first child disclosed.\n   *\n   *  Makes sure that the child being disclosed has rendered = true\n   *  and is not disabled.\n   *\n   *  Second: Renders a vertical panel bar and children in individual panels.\n   *\n   *  For the panel bar, draws a DIV that forms the outline of panels.\n   *  Within the DIV, iteratively calls the encodeBegin, encodeChildren and\n   *  encodeEnd on the panel children (if they have rendered and disclosed\n   *  set to true).\n   *\n   *  Non UIXShowDetail children are ignored.\n   *  The title of each of the panels is the same as the text assigned to\n   *  UIXShowDetail child. When text attribute is not specified,\n   *  title remains blank.\n   * @param context the faces context object\n   * @param component the UIComponent object\n   * @throws IOException when some issues while writing output\n   */\nprotected String getLinkDisabledStyleClass()\n  {\n    return SkinSelectors.AF_PANELACCORDION_TITLE_LINK_DISABLED_STYLE_CLASS;\n  }"} {"seed":"/**\n   *  First: If nothing is disclosed, makes the first child disclosed.\n   *\n   *  Makes sure that the child being disclosed has rendered = true\n   *  and is not disabled.\n   *\n   *  Second: Renders a vertical panel bar and children in individual panels.\n   *\n   *  For the panel bar, draws a DIV that forms the outline of panels.\n   *  Within the DIV, iteratively calls the encodeBegin, encodeChildren and\n   *  encodeEnd on the panel children (if they have rendered and disclosed\n   *  set to true).\n   *\n   *  Non UIXShowDetail children are ignored.\n   *  The title of each of the panels is the same as the text assigned to\n   *  UIXShowDetail child. When text attribute is not specified,\n   *  title remains blank.\n   * @param context the faces context object\n   * @param component the UIComponent object\n   * @throws IOException when some issues while writing output\n   */\nprotected String getLinkEnabledStyleClass()\n  {\n    return SkinSelectors.AF_PANELACCORDION_TITLE_LINK_STYLE_CLASS;\n  }"} {"seed":"/**\n   *  First: If nothing is disclosed, makes the first child disclosed.\n   *\n   *  Makes sure that the child being disclosed has rendered = true\n   *  and is not disabled.\n   *\n   *  Second: Renders a vertical panel bar and children in individual panels.\n   *\n   *  For the panel bar, draws a DIV that forms the outline of panels.\n   *  Within the DIV, iteratively calls the encodeBegin, encodeChildren and\n   *  encodeEnd on the panel children (if they have rendered and disclosed\n   *  set to true).\n   *\n   *  Non UIXShowDetail children are ignored.\n   *  The title of each of the panels is the same as the text assigned to\n   *  UIXShowDetail child. When text attribute is not specified,\n   *  title remains blank.\n   * @param context the faces context object\n   * @param component the UIComponent object\n   * @throws IOException when some issues while writing output\n   */\nprotected String getDisclosedTipKey()\n  {\n    return _DISCLOSED_TIP_KEY;\n  }"} {"seed":"/**\n   *  First: If nothing is disclosed, makes the first child disclosed.\n   *\n   *  Makes sure that the child being disclosed has rendered = true\n   *  and is not disabled.\n   *\n   *  Second: Renders a vertical panel bar and children in individual panels.\n   *\n   *  For the panel bar, draws a DIV that forms the outline of panels.\n   *  Within the DIV, iteratively calls the encodeBegin, encodeChildren and\n   *  encodeEnd on the panel children (if they have rendered and disclosed\n   *  set to true).\n   *\n   *  Non UIXShowDetail children are ignored.\n   *  The title of each of the panels is the same as the text assigned to\n   *  UIXShowDetail child. When text attribute is not specified,\n   *  title remains blank.\n   * @param context the faces context object\n   * @param component the UIComponent object\n   * @throws IOException when some issues while writing output\n   */\nprotected String getUndisclosedTipKey()\n  {\n    return _UNDISCLOSED_TIP_KEY;\n  }"} {"seed":"/**\n   *  Encodes the disclosed child.\n   *\n   *  Generates the required markup for the disclosed child.\n   *\n   * @param context the faces context object\n   * @param component the UIComponent object\n   * @param detailItem the UIXShowDetailItem thats disclosed\n   * @param out the response writer object\n   * @throws IOException when some issues while writing output\n   */\nprivate void _encodeDetailItem(FacesContext context,\n                                 RenderingContext arc,\n                                 UIComponent component,\n                                 UIXShowDetail detailItem,\n                                 ResponseWriter out)\n    throws IOException\n  {\n    out.startElement(\"table\", component);\n    out.writeAttribute(\"cellSpacing\", \"0\", null);\n    out.writeAttribute(\"cellPadding\", \"0\", null);\n    out.writeAttribute(\"summary\", \"\", null);\n\n    renderStyleClass(context, arc, getContentStyleClass());\n\n    out.startElement(\"tr\", component);\n    out.startElement(\"td\", component);\n\n    encodeChild(context, detailItem);\n\n    out.endElement(\"td\");\n    out.endElement(\"tr\");\n\n    out.endElement(\"table\"); // Ending table for the contained child\n  }"} {"seed":"/**\n   *  Creates javascript used to submit the page.\n   */\nprivate String _getFormSubmitScript(UIComponent component,\n                                      RenderingContext arc,\n                                      String event,\n                                      String detailItemId,\n                                      String formName,\n                                      String compId,\n                                      boolean isImmediate)\n  {\n    // Check if PPR enabled, do a _submitPartialChange, else do a formSubmit.\n    String onClickHandler = \"\";\n    boolean pprEnabled =\n      PartialPageUtils.supportsPartialRendering(arc);\n\n    String validate = \"1\";\n    if (isImmediate)\n    {\n      validate = \"0\";\n    }\n\n    if (pprEnabled)\n    {\n      StringBuilder onClickHandlerBuff =\n            new StringBuilder(\"_submitPartialChange('\")\n            .append(formName)\n            .append(\"',\")\n            .append(validate)\n            .append(\", {event:'\")\n            .append(event)\n            .append(\"',source:'\")\n            .append(compId)\n            .append(\"',targetItem:'\")\n            .append(detailItemId)\n            .append(\"'});return false;\");\n\n      onClickHandler = onClickHandlerBuff.toString();            \n    }\n    else\n    {\n      StringBuilder onClickHandlerBuff = new StringBuilder(\"submitForm('\")\n                                  .append(formName)\n                                  .append(\"',\")\n                                  .append(validate)\n                                  .append(\", {event:'\")\n                              .append(event)\n                              .append(\"',source:'\")\n                              .append(compId)\n                              .append(\"',targetItem:'\")\n                              .append(detailItemId)\n                                  .append(\"'});return false;\");\n\n      onClickHandler = onClickHandlerBuff.toString();\n    }\n    return onClickHandler;\n  }"} {"seed":"/**\n   *  Creates javascript used to submit the page.\n   */\nprotected boolean getDiscloseMany(FacesBean bean)\n  {\n    Object o = bean.getProperty(_discloseManyKey);\n    if (o == null)\n      o = _discloseManyKey.getDefault();\n\n    return Boolean.TRUE.equals(o);\n  }"} {"seed":"/**\n   *  Creates javascript used to submit the page.\n   */\nprotected boolean getDiscloseNone(FacesBean bean)\n  {\n    Object o = bean.getProperty(_discloseNoneKey);\n    if (o == null)\n      o = _discloseNoneKey.getDefault();\n\n    return Boolean.TRUE.equals(o);\n  }"} {"seed":"/**\n   *  Creates javascript used to submit the page.\n   */\nprivate boolean _isItemDisabled(UIComponent component)\n  {\n    Object isDisabled = component.getAttributes().get(\n      CoreShowDetailItem.DISABLED_KEY.getName());\n    return Boolean.TRUE.equals(isDisabled);\n  }"} {"seed":"public static void setFactories() {\n\t\tACustomCounterClient.setFactories();\n\t}"} {"seed":"public static void main(String[] args) {\n\t\t// BufferTraceUtility.setTracing();\n\t\t// RPCTraceUtility.setTracing();\n//\t\tObjectTraceUtility.setTracing();\n\t\tsetFactories();\n\t\tinit();\n\t\tsetPort();\n\t\taddListeners();\n\t\twhile (true) {\n\t\t\tReceiveReturnMessage<Object> aReceivedMessage = gipcRegistry.getRPCServerPort().receive();\n\t\t\tif (aReceivedMessage == null) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tSystem.out.println(\"Received message:\" + aReceivedMessage);\n\t\t}\n\t}"} {"seed":"@Override\n    public void registerReferenceProviders(@NotNull PsiReferenceRegistrar registrar) {\n        PsiJavaElementPattern.Capture<PsiLiteralExpression> pattern = PsiJavaPatterns\n                .literalExpression()\n                .insideAnnotationParam(CamelIdeaUtils.BEAN_INJECT_ANNOTATION);\n\n        registrar.registerReferenceProvider(pattern, new CamelPsiReferenceProvider() {\n            @Override\n            protected PsiReference[] getCamelReferencesByElement(PsiElement element, ProcessingContext context) {\n                PsiNameValuePair param = PsiTreeUtil.getParentOfType(element, PsiNameValuePair.class);\n                if (param != null && param.getAttributeName().equals(\"value\")) {\n                    String value = param.getLiteralValue();\n                    if (value != null) {\n                        return new PsiReference[] {new BeanReference(element, value)};\n                    }\n                }\n                return new PsiReference[0];\n            }\n        });\n    }"} {"seed":"@Override\n            protected PsiReference[] getCamelReferencesByElement(PsiElement element, ProcessingContext context) {\n                PsiNameValuePair param = PsiTreeUtil.getParentOfType(element, PsiNameValuePair.class);\n                if (param != null && param.getAttributeName().equals(\"value\")) {\n                    String value = param.getLiteralValue();\n                    if (value != null) {\n                        return new PsiReference[] {new BeanReference(element, value)};\n                    }\n                }\n                return new PsiReference[0];\n            }"} {"seed":"@GetMapping(\"/get\")\n    private Result getMovieTime(@RequestHeader String token,\n                                   @RequestParam Integer idMovie,\n                                @RequestParam Integer date){\n        logger.info(\"[Movie Time User Get] Get time by idMovie {} and date {}\",idMovie,date);\n        if(token!=null && idMovie !=null && date!=null ){\n            Integer id = checkToken(token);\n            if(id!=null){\n                Result result = movieTimeService.getMovieTimeByIdAndDate(id,token,idMovie,date);\n                return result;\n            }else {\n                return Result.fail(ErrorType.TOKEN_IN_VALID);\n            }\n        }else {\n            return Result.fail(ErrorType.ARGUMENT_NOT_VALID);\n        }\n    }"} {"seed":"void execute(String label, String[] args);"} {"seed":"public String getInsaSabun() {\n\t\treturn insaSabun;\n\t}"} {"seed":"public void setInsaSabun(String insaSabun) {\n\t\tthis.insaSabun = insaSabun;\n\t}"} {"seed":"public String getInsaName() {\n\t\treturn insaName;\n\t}"} {"seed":"public void setInsaName(String insaName) {\n\t\tthis.insaName = insaName;\n\t}"} {"seed":"public String getInsaEmail() {\n\t\treturn insaEmail;\n\t}"} {"seed":"public void setInsaEmail(String insaEmail) {\n\t\tthis.insaEmail = insaEmail;\n\t}"} {"seed":"@Override\n    public synchronized int next() {\n        ++currentEvenValue;\n        Thread.yield();\n        ++currentEvenValue;\n        return currentEvenValue;\n    }"} {"seed":"public static void main(String[] args) {\n        EventChecker.test(new SynchronizedEvenGenerator());\n    }"} {"seed":"/**\n\t * Gets the id\n\t * @return id\n\t */\npublic Long getId() {\n\t\treturn id;\n\t}"} {"seed":"/**\n\t * Sets the id\n\t * @param id\n\t */\npublic void setId(Long id) {\n\t\tthis.id = id;\n\t}"} {"seed":"/**\n\t * Gets the username\n\t * @return username\n\t */\npublic String getUsername() {\n\t\treturn username;\n\t}"} {"seed":"/**\n\t * Sets the username\n\t * @param username\n\t */\npublic void setUsername(String username) {\n\t\tthis.username = username;\n\t}"} {"seed":"/**\n\t * Gets the userId\n\t * @return userId\n\t */\npublic String getUserId() {\n\t\treturn userId;\n\t}"} {"seed":"/**\n\t * Sets the userId\n\t * @param userId\n\t */\npublic void setUserId(String userId) {\n\t\tthis.userId = userId;\n\t}"} {"seed":"public void draw(Canvas canvas) {\n        canvas.translate((float) (this.nJV / 2), (float) (this.nJW / 2));\n        long currentTimeMillis = System.currentTimeMillis() - this.nJU;\n        if (currentTimeMillis > 200) {\n            this.nJQ = false;\n            this.nJR = true;\n        }\n        if (currentTimeMillis > 800) {\n            this.nJR = false;\n            this.nJS = true;\n        }\n        if (currentTimeMillis > 1100) {\n            this.nJS = false;\n            this.nJT = true;\n        }\n        if (currentTimeMillis > 1300) {\n            this.nJT = false;\n            setVisibility(8);\n            return;\n        }\n        if (this.nJQ) {\n            float f = (((float) (200 - currentTimeMillis)) / 200.0f) + 1.0f;\n            canvas.scale(f, f, (float) (this.nJV / 2), (float) (this.nJW / 2));\n            this.fu.setAlpha((int) ((2.0f - f) * 255.0f));\n        } else {\n            canvas.scale(1.0f, 1.0f);\n        }\n        if (this.nJR) {\n            f = (((float) ((currentTimeMillis - 200) % 200)) / 200.0f) * 2.0f;\n            this.fu.setAlpha((int) (((f > 1.0f ? f - 1.0f : 1.0f - f) * 128.0f) + 127.0f));\n        } else {\n            this.fu.setAlpha(255);\n        }\n        if (this.nJT) {\n            this.fu.setAlpha((int) ((1.0f - (((float) (currentTimeMillis - 1100)) / 200.0f)) * 255.0f));\n        }\n        canvas.drawLine(0.0f, 0.0f, (float) this.nJV, 0.0f, this.fu);\n        canvas.drawLine(0.0f, 0.0f, 0.0f, (float) this.nJW, this.fu);\n        canvas.drawLine((float) this.nJV, 0.0f, (float) this.nJV, (float) this.nJW, this.fu);\n        canvas.drawLine(0.0f, (float) this.nJW, (float) this.nJV, (float) this.nJW, this.fu);\n        canvas.drawLine(0.0f, (float) (this.nJW / 2), (float) (this.nJV / 10), (float) (this.nJW / 2), this.fu);\n        canvas.drawLine((float) this.nJV, (float) (this.nJW / 2), (float) ((this.nJV * 9) / 10), (float) (this.nJW / 2), this.fu);\n        canvas.drawLine((float) (this.nJV / 2), 0.0f, (float) (this.nJV / 2), (float) (this.nJW / 10), this.fu);\n        canvas.drawLine((float) (this.nJV / 2), (float) this.nJW, (float) (this.nJV / 2), (float) ((this.nJW * 9) / 10), this.fu);\n        invalidate();\n    }"} {"seed":"ements CacheExecutor<T> {\n    @Override\n    public Future<T> executor(CacheTask<T> task) {\n        FutureTask<T> futureTask = new FutureTask<>(task);\n        futureTask.run();\n        return new Futu"} {"seed":"ServiceResponse<List<Category>> getCategory(Integer category"} {"seed":"ServiceResponse addCategory(String categoryName,Integer parent"} {"seed":"ServiceResponse setCategoryName(String categoryName, Integer category"} {"seed":"ServiceResponse getAllChildCategoryById(Integer category"} {"seed":"��\n\tpublic boolean putData(String fileName,Map<String, Object> map){\n\t\tSharedPreferences preferences = context.getSharedPreferences(fileName,Context.MODE_PRIVATE);\n\t\tEditor edit = preferences.edit();\n\t\tfor (Map.Entry<String, Object> entry : map.entrySet()) {\n\t\t\tString key = entry.getKey();\n\t\t\tObject value = entry.getValue();\n\t\t\tif (value instanceof Boolean) {\n\t\t\t\tedit.putBoolean(key, (Boolean)value);\n\t\t\t}else if (value instanceof Integer) {\n\t\t\t\tedit.putInt(key, (Integer)value);\n\t\t\t}else if (value instanceof Float) {\n\t\t\t\tedit.putFloat(key, (Float)value);\n\t\t\t}else if (value instanceof Long) {\n\t\t\t\tedit.putLong(key, (Long)value);\n\t\t\t}else if (value instanceof String) {\n\t\t\t\tedit.putString(key, (String)value);\n\t\t\t}\n\t\t}\n\t\tboolean commit = edit.commit();\n\t\treturn commit"} {"seed":"取值\n\tpublic Map<String, ?> getData(String fileName){\n\t\tSharedPreferences preferences = context.getSharedPreferences(fileName, Context.MODE_PRIVATE);\n\t\tMap<String, ?> map = preferences.getAll();\n\t\treturn"} {"seed":"public int delta() {\n\t\treturn _delta;\n\t}"} {"seed":"/**\n     * @return\n     */\npublic String getCode() {\n        // TODO implement here\n        return \"\";\n    }"} {"seed":"/**\n     * @param value\n     */\npublic void setCode(String value) {\n        // TODO implement here\n    }"} {"seed":"/**\n     * @return\n     */\npublic String getMatricule() {\n        // TODO implement here\n        return \"\";\n    }"} {"seed":"/**\n     * @param value\n     */\npublic void setMatricule(String value) {\n        // TODO implement here\n    }"} {"seed":"/**\n     * 绑定�\n     */\n    public void setDbChangedListener(IDbListener listener){\n        this.mDbListener=lis"} {"seed":"/**\n     * 绑定�\n�监听\n     */\n    protected IDbListener getListener(){\n        if (mDbListener==null){\n            //如果为空，则返回默认 Listener\n            mDbListener=new DbListener();"} {"seed":"/**\n     * 绑定�\n\n        return mDbListener;\n    }\n\n    public void handleChanged(IDbEvent IDbEvent){\n        getLis"} {"seed":"@Override\n    public List<GenerateModel> load() {\n        try {\n            return new ObjectMapper().readValue(new File(path), new TypeReference<List<GenerateModel>>() {});\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }"} {"seed":"public boolean equals(Object obj)\n    {\n        if (this != obj)\n        {\n            if (obj == null || getClass() != obj.getClass())\n            {\n                return false;\n            }\n            obj = (HalVideoProfile)obj;\n            if (bitrate != ((HalVideoProfile) (obj)).bitrate)\n            {\n                return false;\n            }\n            if (contentSizeInBytes != ((HalVideoProfile) (obj)).contentSizeInBytes)\n            {\n                return false;\n            }\n            if (height != ((HalVideoProfile) (obj)).height)\n            {\n                return false;\n            }\n            if (width != ((HalVideoProfile) (obj)).width)\n            {\n                return false;\n            }\n            if (manifestUrl == null ? ((HalVideoProfile) (obj)).manifestUrl != null : !manifestUrl.equals(((HalVideoProfile) (obj)).manifestUrl))\n            {\n                return false;\n            }\n            if (secData == null ? ((HalVideoProfile) (obj)).secData != null : !secData.equals(((HalVideoProfile) (obj)).secData))\n            {\n                return false;\n            }\n        }\n        return true;\n    }"} {"seed":"public long getBitrate()\n    {\n        return bitrate;\n    }"} {"seed":"public long getContentSizeInBytes()\n    {\n        return contentSizeInBytes;\n    }"} {"seed":"public int getHeight()\n    {\n        return height;\n    }"} {"seed":"public String getManifestUrl()\n    {\n        return manifestUrl;\n    }"} {"seed":"public String getSecData()\n    {\n        return secData;\n    }"} {"seed":"public int getWidth()\n    {\n        return width;\n    }"} {"seed":"public int hashCode()\n    {\n        int j = 0;\n        int i;\n        if (manifestUrl != null)\n        {\n            i = manifestUrl.hashCode();\n        } else\n        {\n            i = 0;\n        }\n        if (secData != null)\n        {\n            j = secData.hashCode();\n        }\n        return ((((i * 31 + j) * 31 + height) * 31 + width) * 31 + (int)(contentSizeInBytes ^ contentSizeInBytes >>> 32)) * 31 + (int)(bitrate ^ bitrate >>> 32);\n    }"} {"seed":"public void parseHalContent(MicrodataPropertyResolver microdatapropertyresolver)\n    {\n        manifestUrl = microdatapropertyresolver.fetchLinkAsString(\"manifest\");\n        secData = microdatapropertyresolver.fetchString(\"secData\");\n        String s1 = microdatapropertyresolver.fetchOptionalString(\"height\");\n        String s = s1;\n        if (s1 == null)\n        {\n            s = \"0\";\n        }\n        height = Integer.parseInt(s);\n        s1 = microdatapropertyresolver.fetchOptionalString(\"width\");\n        s = s1;\n        if (s1 == null)\n        {\n            s = \"0\";\n        }\n        width = Integer.parseInt(s);\n        s1 = microdatapropertyresolver.fetchOptionalString(\"contentSize\");\n        s = s1;\n        if (s1 == null)\n        {\n            s = \"0\";\n        }\n        contentSizeInBytes = Long.parseLong(s);\n        s = microdatapropertyresolver.fetchOptionalString(\"bitrate\");\n        microdatapropertyresolver = s;\n        if (s == null)\n        {\n            microdatapropertyresolver = \"0\";\n        }\n        bitrate = Long.parseLong(microdatapropertyresolver);\n    }"} {"seed":"@Override\n    public void initComponents() {\n\n        recyclerView = findViewById(R.id.recyclerView);\n        recyclerView.setLayoutManager(new LinearLayoutManager(this));\n        adapter = new MicroServerLookViewAdapter(this);\n        recyclerView.setAdapter(adapter);\n        recyclerView.setOnLoadEventListener(this);\n        recyclerView.setFooterView(adapter.getFooterView());\n        adapter.setOnItemClickedListener(this);\n        emptyView = findViewById(R.id.emptyView);\n\n        performLookListRequest();\n    }"} {"seed":"private void performLookListRequest() {\n        showProgressDialog(getString(R.string.tips_list_loading));\n        HttpServiceManager.queryAllMicroServer(this);\n    }"} {"seed":"@Override\n    public int getContentLayout() {\n        return R.layout.activity_loadmore_recyclerview;\n    }"} {"seed":"@Override\n    public int getToolbarTitle() {\n        return R.string.title_look_microserver;\n    }"} {"seed":"@Override\n    public void onItemClicked(Object obj, View view) {\n\n        Intent intent = new Intent(this, MicroServerDetailedActivity.class);\n        intent.putExtra(MicroServer.NAME, (MicroServer) obj);\n        this.startActivity(intent);\n    }"} {"seed":"@Override\n    public void onHttpRequestSucceed(MicroServerListResult result, OriginalCall call) {\n        if (result.isNotEmpty()) {\n            adapter.addAll(result.dataList);\n        }\n        if (!result.isNotEmpty() && currentPage > Constant.DEF_PAGE_INDEX) {\n            currentPage--;\n        }\n        recyclerView.showMoreComplete(result.page);\n        switchEmptyView();\n\n        hideProgressDialog();\n    }"} {"seed":"private void switchEmptyView() {\n        if (adapter.isEmpty()) {\n            emptyView.setVisibility(View.VISIBLE);\n        } else {\n            emptyView.setVisibility(View.GONE);\n        }\n    }"} {"seed":"@Override\n    public void onHttpRequestFailure(Exception e, OriginalCall call) {\n        hideProgressDialog();\n    }"} {"seed":"@Override\n    public void onGetNextPage() {\n        currentPage++;\n        performLookListRequest();\n    }"} {"seed":"@Override\n    public void onListViewStartScroll() {\n\n    }"} {"seed":"@Insert(onConflict = REPLACE)\n    void insert(RoomImage image);"} {"seed":"@Insert(onConflict =  REPLACE)\n    void insert(RoomImage... images);"} {"seed":"@Insert(onConflict = REPLACE)\n    void insert(List<RoomImage> images);"} {"seed":"@Update\n    void update(RoomImage image);"} {"seed":"@Update\n    void update(RoomImage... images);"} {"seed":"@Update\n    void update(List<RoomImage> images);"} {"seed":"@Delete\n    void delete(RoomImage image);"} {"seed":"@Delete\n    void delete(RoomImage... images);"} {"seed":"@Delete\n    void delete(List<RoomImage> images);"} {"seed":"@Query(\"SELECT * FROM roomimage\")\n    List<RoomImage> getAll();"} {"seed":"@Query(\"SELECT * FROM roomimage WHERE url = :url LIMIT 1\")\n    RoomImage findByUrl(String url);"} {"seed":"/**\n     * 新增用户信息\n     * @param userEntity\n     * @re\n     */\n    @Insert(\"INSERT INTO t_user (USERNAME, PASSWORD, MOBILE, STATUS, CRATE_TIME) VALUES (#{username}, #{password}, #{mobile}, #{status}, #{crateTime})\")\n    int save(UserEntity"} {"seed":"/**\n     * 新增用户信息\n     * @param userEntity\n     * @re\nurn\n     */\n    @Update(\"UPDATE t_user SET username=#{username}, MOBILE=#{mobile},MODIFY_TIME=#{modifyTime}\")\n    int update(UserEnt"} {"seed":"/**\n     * 新增用户信息\n     * @param userEntity\n     * @re\n@return\n     */\n    @Delete(\"DELETE t_user WHERE user_id=#{userId}\")\n    int deleteBy"} {"seed":"/**\n     * 新增用户信息\n     * @param userEntity\n     * @re\nerId\n     * @return\n     */\n    @Results(id = \"userResult\",value = {\n            @Result(property = \"userId\", column = \"user_id\", id = true),\n            @Result(property = \"username\", column = \"username\", javaType = String.class),\n            @Result(property = \"mobile\", column = \"mobile\", javaType = String.class),\n            @Result(property = \"email\", column = \"email\", javaType = String.class),\n            @Result(property = \"status\", column = \"status\", javaType = String.class),\n            @Result(property = \"crateTime\", column = \"crate_time\", javaType = Date.class),\n            @Result(property = \"modifyTime\", column = \"modify_time\", javaType = Date.class),\n            @Result(property = \"lastLoginTime\", column = \"last_login_time\", javaType = Date.class)\n    })\n    @Select(\"SELECT * FROM t_user WHERE user_id=#{userId}\")\n    UserEn"} {"seed":"/**\n     * 新增用户信息\n     * @param userEntity\n     * @re\netObjectById(Long userId);\n\n    Integer sum1("} {"seed":"public boolean estaEntreMig(LocalTime h){\n        return (h.isAfter(horaIni) && h.isBefore(horaFi));\n    }"} {"seed":"@RequestMapping(value = {\"/getScores\"}, method = RequestMethod.GET)\n    public ModelAndView getScores(Model model) {\n        model.addAttribute(\"scoresList\",scoresService.getScores());\n        model.addAttribute(\"title\", \"Scores信息\");\n        return new ModelAndView(\"scores/scoresSelect\",\"scoresModel\",model"} {"seed":"*/\n    @RequestMapping(value = \"/getScore\", method = RequestMethod.GET)\n    public ScoreDetail getScore(@RequestParam(\"scoreId\") String scoreId) {\n\n        ScoreDetail score = scoresService.getScore(scoreId);\n\n        return"} {"seed":"//追加\n    @RequestMapping(value = {\"/scores/insert\"},method = RequestMethod.GET)\n    public int insertScores() {\n        Scores scores = new Scores();\n        scores.setSno(\"101\");\n        scores.setCno(\"1-234\");\n        scores.setDegree(\"85.0\");\n        return scoresService.insertScore"} {"seed":"}\n\n    //更新\n    @RequestMapping(value = {\"/scores/update\"},method = RequestMethod.GET)\n    public int updateScores() {\n        Scores scores = new Scores();\n        scores.setSno(\"102\");\n        scores.setCno(\"1-101\");\n        scores.setDegree(\"86.0\");\n        return scoresService.updateS"} {"seed":"}\n\n    //削除\n    @RequestMapping(value = {\"/scores/delete\"},method = RequestMethod.GET)\n    public int deleteScores(){\n        String sno = \"101\";\n        return scoresService.d"} {"seed":"/**\n     * Gets config map.\n     * @return The config map.\n     */\npublic Map<String, Object> getCredentialConfig() {\n        return config;\n    }"} {"seed":"@Override\n    public void onCreate(Bundle state) {\n        super.onCreate(state);\n        mScannerView = new ZXingScannerView(this);\n        setContentView(mScannerView);\n        pd = new ProgressDialog(ScanActivity.this);\n        pd.setMessage(\"Verifying Please Wait......\");\n    }"} {"seed":"@Override\n    public void onResume() {\n        super.onResume();\n        mScannerView.setResultHandler(this);\n        mScannerView.startCamera();\n    }"} {"seed":"@Override\n    public void onPause() {\n        super.onPause();\n        mScannerView.stopCamera();\n    }"} {"seed":"@Override\n    public void handleResult(Result rawResult) {\n        String result = rawResult.getText();\n        MainActivity.data = rawResult.getText();\n            GetQR(result);\n    }"} {"seed":"private void GetQR(String resultt) {\n        pd.show();\n        JSONObject request = new JSONObject();\n        JsonObjectRequest jsArrayRequest = new JsonObjectRequest\n                (Request.Method.POST, \"http://devfest2019.kano.gdg.ng/api/qr.php?dataa=\" + resultt, request, new Response.Listener<JSONObject>() {\n                    @Override\n                    public void onResponse(JSONObject response) {\n                        pd.hide();\n                        try {\n                            String msg = response.getString(\"message\");\n\n                            if (response.getInt(\"tstatus\") == 1){\n                                mp = MediaPlayer.create(ScanActivity.this, R.raw.gun);\n                                mp.start();\n                                Handler handler=new Handler();\n                                handler.postDelayed(new Runnable() {\n                                    @Override\n                                    public void run() {\n                                        mp.stop();\n                                    }\n                                }, 3 * 1000);\n                            }else if(response.getInt(\"tstatus\") == 2){\n\n                                mp = MediaPlayer.create(ScanActivity.this, R.raw.danger);\n                                mp.start();\n                                Handler handler=new Handler();\n                                handler.postDelayed(new Runnable() {\n                                    @Override\n                                    public void run() {\n                                        mp.stop();\n                                    }\n                                }, 3 * 1000);\n                            }else{\n                                mp = MediaPlayer.create(ScanActivity.this, R.raw.danger);\n                                mp.start();\n                                Handler handler=new Handler();\n                                handler.postDelayed(new Runnable() {\n                                    @Override\n                                    public void run() {\n                                        mp.stop();\n                                    }\n                                }, 3 * 1000);\n                            }\n                            showAlertDialog(msg);\n\n                        } catch (JSONException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                }, new Response.ErrorListener() {\n\n                    @Override\n                    public void onErrorResponse(VolleyError error) {\n                        pd.hide();\n\n                    }\n                });\n        // Access the RequestQueue through your singleton class.\n        MySingleton.getInstance(this).addToRequestQueue(jsArrayRequest);\n    }"} {"seed":"private void showAlertDialog(String msg) {\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\n        builder.setTitle(msg);\n        builder.setPositiveButton(\"Scan Again\", new DialogInterface.OnClickListener() {\n            @Override\n            public void onClick(DialogInterface dialogInterface, int i) {\n                Intent intent= new Intent(ScanActivity.this,ScanActivity.class);\n                startActivity(intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT));\n\n            }\n        });\n\n        builder.show();\n    }"} {"seed":"@Override\n            public void onClick(DialogInterface dialogInterface, int i) {\n                Intent intent= new Intent(ScanActivity.this,ScanActivity.class);\n                startActivity(intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT));\n\n            }"} {"seed":"@Override\n                    public void onResponse(JSONObject response) {\n                        pd.hide();\n                        try {\n                            String msg = response.getString(\"message\");\n\n                            if (response.getInt(\"tstatus\") == 1){\n                                mp = MediaPlayer.create(ScanActivity.this, R.raw.gun);\n                                mp.start();\n                                Handler handler=new Handler();\n                                handler.postDelayed(new Runnable() {\n                                    @Override\n                                    public void run() {\n                                        mp.stop();\n                                    }\n                                }, 3 * 1000);\n                            }else if(response.getInt(\"tstatus\") == 2){\n\n                                mp = MediaPlayer.create(ScanActivity.this, R.raw.danger);\n                                mp.start();\n                                Handler handler=new Handler();\n                                handler.postDelayed(new Runnable() {\n                                    @Override\n                                    public void run() {\n                                        mp.stop();\n                                    }\n                                }, 3 * 1000);\n                            }else{\n                                mp = MediaPlayer.create(ScanActivity.this, R.raw.danger);\n                                mp.start();\n                                Handler handler=new Handler();\n                                handler.postDelayed(new Runnable() {\n                                    @Override\n                                    public void run() {\n                                        mp.stop();\n                                    }\n                                }, 3 * 1000);\n                            }\n                            showAlertDialog(msg);\n\n                        } catch (JSONException e) {\n                            e.printStackTrace();\n                        }\n                    }"} {"seed":"@Override\n                    public void onErrorResponse(VolleyError error) {\n                        pd.hide();\n\n                    }"} {"seed":"@Override\n                                    public void run() {\n                                        mp.stop();\n                                    }"} {"seed":"@Override\n                                    public void run() {\n                                        mp.stop();\n                                    }"} {"seed":"@Override\n                                    public void run() {\n                                        mp.stop();\n                                    }"} {"seed":"/**\n\t * Metodo che dati in input due oggetti linguistici, restituisce\n\t * un double che equivale al loro grado di similarit�.\n\t * @param LinguisticObject o1 \n\t * @param LinguisticObject o2\n\t * @return double\n\t \n\n\t@Override\n\tpublic double computeSimilarity(LinguisticObject o1, LinguisticObject o2)\n\t{\n\t\treturn BabelDocumentSimilarity.computeSimilarity(((Document)o1), ((Document)o2));"} {"seed":"@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_laporan_penggunaan_pakan);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        if(getSupportActionBar()!=null)\n        {\n            ActionBar actionbar = getSupportActionBar();\n            actionbar.setDisplayHomeAsUpEnabled(true);\n            actionbar.setTitle(\"Grafik Laporan Penggunaan Pakan\");\n        }\n\n        //Set Colomn Bulan-----------------------------------------------\n        //chart_laporanpakan_activity_bulan = (LineChartView) findViewById(R.id.chart_laporanpakan_activity_bulan);\n        //generateInitialLineData();\n\n        //Set Colomn Tahun-----------------------------------------------\n        chart_laporanpakan_activity_tahun = (ColumnChartView) findViewById(R.id.chart_laporanpakan_activity_tahun);\n        String urlParameter_Get_Tahun = \"uid=\"+getSharedPreferences(getString(R.string.userpref), Context.MODE_PRIVATE).getString(\"keyIdPengguna\",null);\n        new GetDataPerTahun().execute(\"http://ternaku.com/index.php/C_Laporan/TotalPakan_PETERNAKAN_TAHUN_TERTENTU\",urlParameter_Get_Tahun);\n\n    }"} {"seed":"private void generateColumnData(String result) {\n\n        int numSubcolumns = 1;\n        //int numColumns = 12;\n\n        List<AxisValue> axisValues = new ArrayList<AxisValue>();\n        List<Column> columns = new ArrayList<Column>();\n        List<SubcolumnValue> values;\n        try{\n            JSONArray jArray = new JSONArray(result);\n            for(int i=0;i<jArray.length();i++)\n            {\n                JSONObject jObj = jArray.getJSONObject(i);\n\n                    values = new ArrayList<SubcolumnValue>();\n                    for (int j = 0; j < numSubcolumns; ++j) {\n                        values.add(new SubcolumnValue(Float.parseFloat(jObj.getString(\"Biaya\")),ChartUtils.pickColor()));\n                    }\n                    axisValues.add(new AxisValue(i).setLabel(jObj.getString(\"Tanggal\").substring(0,3)));\n                    columns.add(new Column(values).setHasLabelsOnlyForSelected(true));\n            }\n        }\n        catch (JSONException e) {\n            e.printStackTrace();\n        }\n        data_laporanapakan_activity_tahun = new ColumnChartData(columns);\n        data_laporanapakan_activity_tahun.setAxisXBottom(new Axis(axisValues).setHasLines(true));\n        data_laporanapakan_activity_tahun.setAxisYLeft(new Axis().setHasLines(true).setMaxLabelChars(2));\n\n        chart_laporanpakan_activity_tahun.setColumnChartData(data_laporanapakan_activity_tahun);\n\n\n\n        // Set value touch listener that will trigger changes for chartTop.\n        //chart_laporanpakan_activity_tahun.setOnValueTouchListener(new ValueTouchListener());\n\n        // Set selection mode to keep selected month column highlighted.\n        chart_laporanpakan_activity_tahun.setValueSelectionEnabled(true);\n        chart_laporanpakan_activity_tahun.setZoomType(ZoomType.HORIZONTAL);\n\n    }"} {"seed":"@Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            // Respond to the action bar's Up/Home button\n            case android.R.id.home:\n                finish();\n                return true;\n        }\n        return super.onOptionsItemSelected(item);\n    }"} {"seed":"@Override\n        protected void onPreExecute() {\n            super.onPreExecute();\n        }"} {"seed":"@Override\n        protected String doInBackground(String... params) {\n            Connection c = new Connection();\n            String json = c.GetJSONfromURL(params[0],params[1]);\n            return json;\n        }"} {"seed":"@Override\n        protected void onPostExecute(String s) {\n            Log.d(\"Get Data Per Tahun\",s);\n            generateColumnData(s);\n        }"} {"seed":"public void useDexClassLoader1() {\n        Intent intent = new Intent(\"com.anhuioss.dexclassloader.plugin.client\", null);\n        PackageManager pm = mContext.getPackageManager();\n        List<ResolveInfo> plugins = pm.queryIntentActivities(intent, 0);\n        ResolveInfo resInfo = plugins.get(0);\n        ActivityInfo actInfo = resInfo.activityInfo;\n        \n        String div = System.getProperty(\"path.separator\");\n        String packageName = actInfo.packageName;\n        String dexPath = actInfo.applicationInfo.sourceDir;\n        String dexOutputDir = mContext.getApplicationInfo().dataDir;\n        String libPath = \"\";\n        // android 2.3.3\n//        String libPath = actInfo.applicationInfo.nativeLibraryDir;\n\n        DexClassLoader cll = new DexClassLoader(dexPath, dexOutputDir, libPath, this.getClass().getClassLoader()) ;\n\n        Class<?> clazz = null;\n        try {\n            clazz = cll.loadClass(packageName + \".PluginClass\");\n            Object obj = clazz.newInstance();\n            Class[] params = new Class[2];\n            params[0] = Integer.TYPE;\n            params[1] = Integer.TYPE;\n            Method method = clazz.getMethod(\"client\", params);\n            Integer tgr = (Integer) method.invoke(obj, 12, 34);\n            Log.i(TAG, \"Host return value is \" + tgr);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n\n    }"} {"seed":"public void useDexClassLoader2() {\n\t        Intent intent = new Intent(\"com.micro4blog.plugin.test\", null);\n\t        PackageManager pm = mContext.getPackageManager();\n\t        List<ResolveInfo> plugins = pm.queryIntentActivities(intent, 0);\n\t        \n\t        if (plugins==null || plugins.size()==0) {\n\t        \treturn ;\n\t        }\n\t        \n\t        ResolveInfo resInfo = plugins.get(0);\n\t        ActivityInfo actInfo = resInfo.activityInfo;\n\n\t        String div = System.getProperty(\"path.separator\");\n\t        String packageName = actInfo.packageName;\n\t        String dexPath = actInfo.applicationInfo.sourceDir;\n\t        String dexOutputDir = mContext.getApplicationInfo().dataDir;\n//\t        String libPath = \"\";\n\t        // api level 9\n\t        String libPath = actInfo.applicationInfo.nativeLibraryDir;\n\n\t        DexClassLoader cll = new DexClassLoader(dexPath, dexOutputDir, libPath, this.getClass().getClassLoader()) ;\n\n\t        Class<?> clazz = null;\n\n\t        try {\n\t            clazz = cll.loadClass(packageName + \".Micro4blogPluginTest\");\n\t            IPlugin comm = (IPlugin) clazz.newInstance();\n//\t            Integer ret = comm.client(32, 45);\n//\t            Log.i(\"thom\", \"Host 2 return value is \" + ret);\n\t            comm.addPlugin();\n\t        } catch (Exception e) {\n\t            e.printStackTrace();\n\t        }\n\t        \n\t        // 获取插件的版本信息\n\t        // 需要在插件中的strings中设置version值\n\t        Resources res = null;\n\t        try {\n\t            res = pm.getResourcesForApplication(packageName);\n\t        } catch (PackageManager.NameNotFoundException e) {\n\t            e.printStackTrace();\n\t        }\n\t        int id = 0;\n\t        String version = \"0\";\n\t        id = res.getIdentifier(\"version\", \"string\", packageName);\n\t        if (id != 0) {\n\t        \t version = res.getString(id);\n\t        }\n\t        \n\t        Log.i(\"thom\", \"id \" + id + \" verison \""} {"seed":"@Override\n\tpublic Item checkOut(Long itemId, Integer itemQuantity) {\n\t\tItem item = null;\n\t\tif (stock.containsKey(itemId)) {\n\t\t\tLOGGER.debug(\"Item found in stock: \" + stock.get(itemId));\n\t\t\t// Check If item in stock\n\t\t\tItemDetail itemDetail = stock.get(itemId);\n\t\t\tif (itemQuantity < itemDetail.getItemStock()) {\n\t\t\t\t// Calculate normal and discounted price for the item\n\t\t\t\tPrice priceDetails = priceService.calculatePrice(itemDetail, itemQuantity);\n\t\t\t\titem = new Item(itemDetail.getItemName(), itemId, itemQuantity, priceDetails,\n\t\t\t\t\t\titemDetail.getItemDescription());\n\t\t\t\t// decrease the quantity from stock\n\t\t\t\tInteger currentStock = stock.get(itemId).getItemStock();\n\t\t\t\tstock.get(itemId).setItemStock(currentStock - itemQuantity);\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tLOGGER.debug(\"Item not found in stock: \" + itemId);\n\t\t}\n\t\treturn item;\n\t}"} {"seed":"public static Test suite() {\n\t\tTestSuite suite = new TestSuite(RestaurantChungSuite.class.getName());\n\t\tsuite.addTestSuite(RestaurantChungCashierTest.class);\n\t\tsuite.addTestSuite(RestaurantChungCookTest.class);\n\t\treturn suite;\n\t}"} {"seed":"@Override\n    public Document save(Document entity) {\n        this.entityManager.getTransaction().begin();\n        try {\n            this.entityManager.persist(entity);\n            this.entityManager.getTransaction().commit();\n\n            return entity;\n        } catch (Exception e) {\n            this.entityManager.getTransaction().rollback();\n\n            return null;\n        }\n    }"} {"seed":"@Override\n    public Document update(Document entity) {\n        this.entityManager.getTransaction().begin();\n        try {\n            Document updatedDoc = this.entityManager.merge(entity);\n            this.entityManager.getTransaction().commit();\n\n            return updatedDoc;\n        }catch (Exception e) {\n            this.entityManager.getTransaction().rollback();\n\n            return null;\n        }\n    }"} {"seed":"@Override\n    public List<Document> findAll() {\n        return this.entityManager\n                .createQuery(\"SELECT d FROM documents d\", Document.class)\n                .getResultList();\n    }"} {"seed":"@Override\n    public Document findById(String id) {\n        try {\n            return this.entityManager\n                    .createQuery(\"SELECT d FROM documents d WHERE d.id = :id\", Document.class)\n                    .setParameter(\"id\", id)\n                    .getSingleResult();\n        } catch (Exception e) {\n            return null;\n        }\n    }"} {"seed":"@Override\n    public Long size() {\n        return this.entityManager\n                .createQuery(\"SELECT count(d) FROM documents d\", Long.class)\n                .getSingleResult();\n    }"} {"seed":"@Override\n    public void print(String id) {\n        this.entityManager.getTransaction().begin();\n        this.entityManager\n                .createQuery(\"DELETE FROM documents d WHERE d.id = :id\")\n                .setParameter(\"id\", id).executeUpdate();\n        this.entityManager.getTransaction().commit();\n    }"} {"seed":"数据库、写入文件、打印log等，本例为打印log；\n    public void write(List<? extends String> messages) throws Exception {\n        for (String message : messages) {"} {"seed":"/**\n     * 新增留言\n     * @param note\n     * @throws Exception\n     * @return\n */\n    public int insert(Note note) throws Ex"} {"seed":"/**\n     * 新增留言\n     * @param note\n     * @throws Exception\n     * @return\nurn\n     */\n    public int delete(int id) t"} {"seed":"/**\n     * 新增留言\n     * @param note\n     * @throws Exception\n     * @return\nhrows Exception\n     */\n    public Note queryBy"} {"seed":"/**\n     * 新增留言\n     * @param note\n     * @throws Exception\n     * @return\n   * @throws Exception\n     */\n\n    public Lis"} {"seed":"/**\n     * 新增留言\n     * @param note\n     * @throws Exception\n     * @return\n> queryAll() throws Exception;\n\n    public List<Note> fi"} {"seed":"/**\n     * 新增留言\n     * @param note\n     * @throws Exception\n     * @return\nSplitPage sp)throws Exception;\n\n    public int g"} {"seed":"/**\n     * 新增留言\n     * @param note\n     * @throws Exception\n     * @return\n(HashMap tm) throws Exception;\n\n    public List<Note>  queryByLike(HashMap<St"} {"seed":"/**\n     * 新增留言\n     * @param note\n     * @throws Exception\n     * @return\nString> cond)throws Exception;\n\n    public List<Note>  queryByLike(HashMap"} {"seed":"public static void main(String[] args) throws Exception{\n        Object a = new Object();\n        Object b = new Object();\n        Object c = new Object();\n\n        PrintByOrder pa = new PrintByOrder(\"A\",c,a);\n        PrintByOrder pb = new PrintByOrder(\"B\",a,b);\n        PrintByOrder pc = new PrintByOrder(\"C\",b,c);\n\n        new Thread(pa).start();\n//        Thread.sleep(10);\n        new Thread(pb).start();\n//        Thread.sleep(10);\n        new Thread(pc).start();\n//        Thread.sleep(10);\n    }"} {"seed":"@Override\n        public void run() {\n            int n =10;\n            while (n>0){\n                synchronized (pre){\n                    synchronized (next){\n                        System.out.println(cur);\n                        n--;\n                        next.notifyAll();\n                    }\n                    try {\n                        pre.wait();\n                    }catch (Exception e){\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }"} {"seed":"server {\n\tvoid"} {"seed":"/**\n\t * get the delivery system identified with this token\n\t * \n\t * @param token token of the delivery system\n\t * \n\t * @return instance of a delivery system or null\n\t */\nDeliverySystem get(String token);"} {"seed":"/**\n\t * get the delivery system for the pse (the web-application) itself\n\t * \n\t * @return instance of a delivery system or null\n\t */\nDeliverySystem getPseService();"} {"seed":"@Override\n    public Object put(String name, Object value) {\n        return otherState.put(name, value);\n    }"} {"seed":"@Override\n    public void putAll(Map<? extends String, ?> toMerge) {\n        otherState.putAll(toMerge);\n    }"} {"seed":"@Override\n    public void clear() {\n        otherState.clear();\n        suppliers.clear();\n    }"} {"seed":"@Override\n    public Set<String> keySet() {\n        throw new NotImplementedException(\"keySet not implemented by \" + this.getClass().getSimpleName());\n    }"} {"seed":"@Override\n    public Collection<Object> values() {\n        throw new NotImplementedException(\"values not implemented by \" + this.getClass().getSimpleName());\n    }"} {"seed":"@Override\n    public Set<Entry<String, Object>> entrySet() {\n        throw new NotImplementedException(\"entrySet not implemented by \" + this.getClass().getSimpleName());\n    }"} {"seed":"@Override\n    public int size() {\n        return suppliers.size() + otherState.size();\n    }"} {"seed":"@Override\n    public boolean isEmpty() {\n        return suppliers.isEmpty() && otherState.isEmpty();\n    }"} {"seed":"@Override\n    public boolean containsKey(Object key) {\n        return suppliers.containsKey(key) || otherState.containsKey(key);\n    }"} {"seed":"@Override\n    public boolean containsValue(Object value) {\n        throw new NotImplementedException(\"containsValue not implemented by \" + this.getClass().getSimpleName());\n    }"} {"seed":"@Override\n    public Object get(Object key) {\n        Supplier<Object> objectSupplier = suppliers.get(key);\n        if (objectSupplier != null) {\n            return objectSupplier.get();\n        }\n        return otherState.get(key);\n    }"} {"seed":"@Override\n    public Object remove(Object key) {\n        otherState.remove(key);\n        return suppliers.remove(key);\n    }"} {"seed":"public ArrayList<EntrantInQueueModal> allEntrantsScoreBySpecialty(int idSpecialty) throws DAOException ;"} {"seed":"public double getTemperature() {\n    return temperature;\n  }"} {"seed":"public MeasurementUnit.Thermic.Temperature getUnit() {\n    return unit;\n  }"} {"seed":"@Override\n    public RedisConnection<String, String> get() {\n        if (connection == null) {\n            RedisClient client = new RedisClient(host);\n            connection = client.connect();\n        }\n        return connection;\n    }"} {"seed":"/**\n\t * \n\t */\n@BeforeClass\n\tpublic static void init() {\n\t\tFileUtils.deleteQuietly(new File(root));\n\t\tFile rootFile = new File(root);\n\t\tif (!rootFile.exists()) {\n\t\t\trootFile.mkdirs();\n\t\t}\n\t\tFile folder1 = new File(rootFile, \"201911\");\n\t\tif (!folder1.exists()) {\n\t\t\tfolder1.mkdirs();\n\t\t}\n\t\tFile folder2 = new File(rootFile, \"201912\");\n\t\tif (!folder2.exists()) {\n\t\t\tfolder2.mkdirs();\n\t\t}\n\t\tFile folder21 = new File(folder2, \"18\");\n\t\tif (!folder21.exists()) {\n\t\t\tfolder21.mkdirs();\n\t\t}\n\t\tFile folder22 = new File(folder21, \"150000\");\n\t\tif (!folder22.exists()) {\n\t\t\tfolder22.mkdirs();\n\t\t}\n\t\tFile file = new File(folder22, \"20191218150000.rt\");\n\t\tif (!file.exists()) {\n\t\t\ttry {\n\t\t\t\tfile.createNewFile();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}"} {"seed":"/**\n\t * \n\t */\n@Test\n\tpublic void test() throws SynapsisException {\n\t\tList<FileTreeNode> list = service.listRoot();\n\t\tassertNotNull(list);\n\t\tFile rootDir = new File(root);\n\t\tFile[] files = rootDir.listFiles();\n\t\tassertEquals(files.length, list.size());\n\n\t\tassertEquals(NodeLevel.Month, list.get(0).getLevel());\n\n\t\tlist.forEach(System.out::println);\n\t}"} {"seed":"/**\n\t * \n\t */\n@Test\n\tpublic void testList() throws SynapsisException {\n\t\tString folerPath = root + File.separator + \"201912\";\n\t\tList<FileTreeNode> folders = service.listNodes(folerPath, NodeLevel.Month);\n\t\tassertNotNull(folders);\n\t\tFile folder = new File(folerPath);\n\t\tFile[] files = folder.listFiles();\n\t\tassertEquals(files.length, folders.size());\n\t\tfolders.forEach(System.out::println);\n\t}"} {"seed":"/**\n\t * \n\t */\n@Test\n\tpublic void testListLeaf() throws SynapsisException {\n\t\tString folderPath = root + File.separator + \"201912\" + File.separator + \"18\";\n\t\tList<FileTreeNode> nodes = service.listNodes(folderPath, NodeLevel.Date);\n\t\tassertEquals(NodeLevel.Leaf, nodes.get(0).getLevel());\n\t\tnodes.forEach(System.out::println);\n\t}"} {"seed":"/**\n\t * \n\t */\n@Test(expected = SynapsisException.class)\n\tpublic void testNoFile() throws SynapsisException {\n\t\tString folderPath = root + File.separator + \"201910\";\n\t\tservice.listNodes(folderPath, NodeLevel.Month);\n\t}"} {"seed":"/**\n\t * \n\t */\n@AfterClass\n\tpublic static void tearDown() {\n\t\t// FileUtils.deleteQuietly(new File(root));\n\t}"} {"seed":"NavigablePage navigateToSummaryPage();"} {"seed":"NavigablePage navigateToManagementPage();"} {"seed":"@Override\n\tpublic void onCreate() {\n\t\tsuper.onCreate();\n\t\tinitImageLoader(getApplicationContext());\n\t\tLogUtil.OpenBug=true;\n\t}"} {"seed":"public  void initImageLoader(Context context) {\n//\t\tHttpParams params = new BasicHttpParams();\n//        // Turn off stale checking. Our connections break all the time anyway,\n//        // and it's not worth it to pay the penalty of checking every time.\n//        HttpConnectionParams.setStaleCheckingEnabled(params, false);\n//        // Default connection and socket timeout of 10 seconds. Tweak to taste.\n//        HttpConnectionParams.setConnectionTimeout(params, 10 * 1000);\n//        HttpConnectionParams.setSoTimeout(params, 10 * 1000);\n//        HttpConnectionParams.setSocketBufferSize(params, 8192);\n//\n//        // Don't handle redirects -- return them to the caller. Our code\n//        // often wants to re-POST after a redirect, which we must do ourselves.\n//        HttpClientParams.setRedirecting(params, false);\n//        // Set the specified user agent and register standard protocols.\n//        HttpProtocolParams.setUserAgent(params, \"some_randome_user_agent\");\n//        SchemeRegistry schemeRegistry = new SchemeRegistry();\n//        schemeRegistry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n//        schemeRegistry.register(new Scheme(\"https\", SSLSocketFactory.getSocketFactory(), 443));\n//\n//        ClientConnectionManager manager = new ThreadSafeClientConnManager(params, schemeRegistry);\n\n        ImageLoaderConfiguration config =   new ImageLoaderConfiguration.Builder(context)\n        .threadPoolSize(1)\n        .tasksProcessingOrder(QueueProcessingType.LIFO)\n        .diskCacheFileNameGenerator(new Md5FileNameGenerator())\n        .threadPriority(Thread.NORM_PRIORITY - 2)\n        .denyCacheImageMultipleSizesInMemory()\n        .memoryCache(new WeakMemoryCache())\n        .build();\n\t\t// Initialize ImageLoader with configuration.\n\t\tImageLoader.getInstance().init(config);\n\t}"} {"seed":"* @return\n     */\n    public static boolean isMobile(String src){\n        if(StringUtils.isBlank(src)){\n            return false;\n        }\n\n        return pattern.m"} {"seed":"public String getBirthDate() {\n        return this.birthDate;\n    }"} {"seed":"public void setBirthDate(String birthDate) {\n        this.birthDate = birthDate;\n    }"} {"seed":"public String getDateEnteredUS() {\n        return this.dateEnteredUS;\n    }"} {"seed":"public void setDateEnteredUS(String dateEnteredUS) {\n        this.dateEnteredUS = dateEnteredUS;\n    }"} {"seed":"public String getCityOfBirth() {\n        return this.cityOfBirth;\n    }"} {"seed":"public void setCityOfBirth(String cityOfBirth) {\n        this.cityOfBirth = cityOfBirth;\n    }"} {"seed":"public String getStateOfBirthAbbreviation() {\n        return this.stateOfBirthAbbreviation;\n    }"} {"seed":"public void setStateOfBirthAbbreviation(String stateOfBirthAbbreviation) {\n        this.stateOfBirthAbbreviation = stateOfBirthAbbreviation;\n    }"} {"seed":"public String getCountryOfBirthCode() {\n        return this.countryOfBirthCode;\n    }"} {"seed":"public void setCountryOfBirthCode(String countryOfBirthCode) {\n        this.countryOfBirthCode = countryOfBirthCode;\n    }"} {"seed":"@Override\n    public void setupActivityComponent(@NonNull AppComponent appComponent) {\n        DaggerCardPayComponent //如找不到该类,请编译一下项目\n                .builder()\n                .appComponent(appComponent)\n                .cardPayModule(new CardPayModule(this))\n                .build()"} {"seed":".inject(this);\n    }\n\n    @Override\n    public int initView(@Nullable Bundle savedInstanceState) {\n        return R.layout.activity_card_pay; //如果你不需要框架"} {"seed":"设置 setContentView(id) 需要自行设置,请返回 0\n    }\n\n    @Override\n    public void initData(@Nullable Bundle savedInstanceState) {\n        //状态栏\n        Sofia.with(this)\n                .invasionSt"} {"seed":"r()\n                .statusBarBackground(Color.T"} {"seed":"RENT);\n\n\n    }\n\n    @Override\n    public void sh"} {"seed":"ing() {\n\n    }\n\n    @Override\n    public void hideLoading() {\n\n    }\n\n    @Override\n    public void showMessage(@NonNull String message) {"} {"seed":"heckNotNull(message);\n        ArmsUtils.snackbarText(message);\n    }\n\n    @Override\n    public void launchActivity(@NonNull Intent intent) {"} {"seed":"checkNotNull(intent);\n        ArmsUtils.startActivity(intent);"} {"seed":"@Override\n    public void killMyself() {\n        finish();\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super"} {"seed":"ate(savedInstanceState);\n        getSupportActionBar().hide();\n    }\n\n    @Override\n    protect"} {"seed":"d onResume() {\n        super.onResume();\n        initDialog();\n    }\n\n    @OnClick({R.id.toolbar_back, R.id.reg_paste, R.id.reg_reg})\n    public void onViewClicked(View view) {\n        switch (view.getId()) {\n            case R.id.toolbar_back:\n                killMyself();\n                break;\n            case R.id.reg_paste:\n                clickPaste();\n                break;\n            case R.id.reg_reg:\n                if(mPresenter!=null){\n                    mPresenter.cardPay(this,regPwdOld.getTe"} {"seed":"oString());\n                }\n                break;\n        }\n    }\n\n    void initDialog(){\n        new AlertDialog.Builder(this)\n                .setTitle(\"粘贴提示\")\n                .setCancelable(false)\n                .setMessage(\"是否粘贴卡密到输入框?\")\n                .setPositiveButton(\"粘贴\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        clickPaste();"} {"seed":"})\n                .setNegativeButton(\"取消\",null)\n                .create().show();\n    }\n\n    @Override\n    public void clickPaste() {\n        String pasteStr = JumpUtils.getClipboardText(this);\n        if(regPwdOld!=null&&!TextUtils.isEmpty(pasteStr)){\n            regPwd"} {"seed":".setPositiveButton(\"粘贴\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public voi"} {"seed":"public void setFactory(SqlSessionFactory factory) {\n    this.factory = factory;\n  }"} {"seed":"private DatasetInfo get(int datasetKey) throws NotFoundException {\n    if (deleted.contains(datasetKey)) {\n      throw NotFoundException.notFound(Dataset.class, datasetKey);\n    }\n    return infos.computeIfAbsent(datasetKey, key -> {\n      try (SqlSession session = factory.openSession()) {\n        return convert(datasetKey, session.getMapper(DatasetMapper.class).get(key));\n      }\n    });\n  }"} {"seed":"private DatasetInfo convert(int key, Dataset d) {\n    if (d != null) {\n      if (!d.hasDeletedDate()) {\n        return new DatasetInfo(key, d.getOrigin(), d.getSourceKey(), d.getImportAttempt());\n      }\n      deleted.add(key);\n    }\n    throw NotFoundException.notFound(Dataset.class, key);\n  }"} {"seed":"public DatasetInfo info(int datasetKey) throws NotFoundException {\n    return get(datasetKey);\n  }"} {"seed":"public DatasetOrigin origin(int datasetKey) throws NotFoundException {\n    return get(datasetKey).origin;\n  }"} {"seed":"public Integer sourceProject(int datasetKey) throws NotFoundException {\n    return get(datasetKey).sourceKey;\n  }"} {"seed":"public Integer importAttempt(int datasetKey) throws NotFoundException {\n    return get(datasetKey).importAttempt;\n  }"} {"seed":"/**\n   * Makes sure the dataset key exists and is not deleted.\n   * @param datasetKey\n   * @throws NotFoundException\n   */\npublic void exists(int datasetKey) throws NotFoundException {\n    get(datasetKey);\n  }"} {"seed":"/**\n   * Makes sure the dataset key exists and is not deleted.\n   * @param datasetKey\n   * @throws NotFoundException\n   */\n@Subscribe\n  public void datasetChanged(DatasetChanged event){\n    if (event.isDeletion()) {\n      deleted.add(event.key);\n      infos.remove(event.key);\n    }\n  }"} {"seed":"private JPanel initButtons() {\n\t\tJPanel panel = new JPanel();\n\t\tpanel.setLayout(new FlowLayout(FlowLayout.CENTER, 3, 3));\n\t\tsigninButton.setFont(new Font(\"Tahoma\", Font.PLAIN, 24));\n\t\tsigninButton.addActionListener(new ActionListener() {\n\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t// validate the credentials of the user being logged in \n\t\t\t\tif(ValidCredentials()){\n\t\t\t\t\t// if credentials are valid, initialize differnt panes\n\t\t\t\t\t// search , committee, update profile and logout tabs\n\t\t\t\t\tparentFrame.getContentPane().removeAll();\n\t\t\t\t\tparentFrame.getContentPane().revalidate();\n\t\t\t\t\tparentFrame.getContentPane().repaint();\n\t\t\t\t\tparentFrame.getContentPane().setLayout(new BorderLayout());\n\t\t\t\t\t\n\t\t\t\t\tJTabbedPane tabbedPane = new JTabbedPane();\n\t\t\t\t\ttabbedPane.setFont(new Font(\"Tahoma\", Font.PLAIN, 24));\n\t\t\t\t\ttabbedPane.addTab(\"Search\", new SearchUI(null));\n\t\t\t\t\ttabbedPane.addTab(\"Committee List\", new CommitteeListUI());\n\t\t\t\t\ttabbedPane.addTab(\"Update Profile\", new UpdateProfileUI());\n\t\t\t\t\t\n\t\t\t\t\ttabbedPane.add(\"Logout\", new LogoutUI());\n\t\t\t\t\tparentFrame.getContentPane().add(tabbedPane);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t// if the credentials are invalid, pop up the following message window\n\t\t\t\t\tjOptionPane.showMessageDialog(LoginUI.this,\n\t\t\t\t\t\t\t\"Invalid username or password\",\n\t\t\t\t\t\t\t\"Login\",\n\t\t\t\t\t\t\tjOptionPane.ERROR_MESSAGE);\n\t\t\t\t\t// reset username and password\n\t\t\t\t\tuserNameField.setText(\"\");\n\t\t\t\t\tpasswordField.setText(\"\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tpanel.add(signinButton);\n\t\treturn panel;\n\t}"} {"seed":"private JPanel initFields() {\n\t\tJPanel panel = new JPanel();\n\t\tpanel.setLayout(new MigLayout());\n\n\t\tJLabel usernameLabel = new JLabel(\"UserName\");\n\t\tusernameLabel.setFont(new Font(\"Tahoma\", Font.PLAIN, 26));\n\t\tpanel.add(usernameLabel, \"align label\");\n\t\tuserNameField.setFont(new Font(\"Tahoma\", Font.PLAIN, 24));\n\t\tpanel.add(userNameField, \"wrap\");\n\n\t\tJLabel passwordLabel = new JLabel(\"Password\");\n\t\tpasswordLabel.setFont(new Font(\"Tahoma\", Font.PLAIN, 24));\n\t\tpanel.add(passwordLabel, \"align label\");\n\t\tpasswordField.setFont(new Font(\"Tahoma\", Font.PLAIN, 24));\n\t\tpanel.add(passwordField, \"wrap\");\n\t\treturn panel;\n\t}"} {"seed":"public boolean ValidCredentials() { \n\t\tif(!isEmptyFieldData()){\n\t\t\tSystemUserQuery sq = new SystemUserQuery();\n\t\t\tUser user = sq.loginQuery(getUsername(), getPassword());\n\t\t\t\n\t\t\tif(user != null){\n\t\t\t\tMain.setCurrentUser(user);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\treturn false;\n\t}"} {"seed":"private boolean isEmptyFieldData() {\n\t\treturn (getUsername().isEmpty() || getPassword().isEmpty());\n\t}"} {"seed":"public String getUsername() {\n\t\treturn userNameField.getText().trim();\n\t}"} {"seed":"public String getPassword() {\n\t\treturn new String(passwordField.getPassword());\n\t}"} {"seed":"@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t// validate the credentials of the user being logged in \n\t\t\t\tif(ValidCredentials()){\n\t\t\t\t\t// if credentials are valid, initialize differnt panes\n\t\t\t\t\t// search , committee, update profile and logout tabs\n\t\t\t\t\tparentFrame.getContentPane().removeAll();\n\t\t\t\t\tparentFrame.getContentPane().revalidate();\n\t\t\t\t\tparentFrame.getContentPane().repaint();\n\t\t\t\t\tparentFrame.getContentPane().setLayout(new BorderLayout());\n\t\t\t\t\t\n\t\t\t\t\tJTabbedPane tabbedPane = new JTabbedPane();\n\t\t\t\t\ttabbedPane.setFont(new Font(\"Tahoma\", Font.PLAIN, 24));\n\t\t\t\t\ttabbedPane.addTab(\"Search\", new SearchUI(null));\n\t\t\t\t\ttabbedPane.addTab(\"Committee List\", new CommitteeListUI());\n\t\t\t\t\ttabbedPane.addTab(\"Update Profile\", new UpdateProfileUI());\n\t\t\t\t\t\n\t\t\t\t\ttabbedPane.add(\"Logout\", new LogoutUI());\n\t\t\t\t\tparentFrame.getContentPane().add(tabbedPane);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t// if the credentials are invalid, pop up the following message window\n\t\t\t\t\tjOptionPane.showMessageDialog(LoginUI.this,\n\t\t\t\t\t\t\t\"Invalid username or password\",\n\t\t\t\t\t\t\t\"Login\",\n\t\t\t\t\t\t\tjOptionPane.ERROR_MESSAGE);\n\t\t\t\t\t// reset username and password\n\t\t\t\t\tuserNameField.setText(\"\");\n\t\t\t\t\tpasswordField.setText(\"\");\n\t\t\t\t}\n\t\t\t}"} {"seed":"public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        double payment = scanner.nextDouble();\n        scanner.close();\n\n        // Write your code here.\n        NumberFormat usd = NumberFormat.getCurrencyInstance(Locale.US);\n        NumberFormat inr = NumberFormat.getCurrencyInstance(new Locale(\"en\",\"IN\"));\n        NumberFormat chn = NumberFormat.getCurrencyInstance(new Locale(\"zh\",\"CN\"));\n        NumberFormat frn = NumberFormat.getCurrencyInstance(Locale.FRANCE);\n\n        System.out.println(\"US: \" + usd.format(payment));\n        System.out.println(\"India: \" + inr.format(payment));\n        System.out.println(\"China: \" + chn.format(payment));\n        System.out.println(\"France: \" + frn.format(payment));\n    }"} {"seed":"public long getPersonId() {\n\t\treturn personId;\n\t}"} {"seed":"public static DoseLogFragment newInstance(Drug drug, int flags)\n \t{\n \t\tDoseLogFragment f = new DoseLogFragment();\n \t\tf.setHasOptionsMenu(true);\n \t\tf.setArguments(Util.createBundle(\"drug_id\", drug.getId(), \"flags\", flags));\n \t\treturn f;\n \t}"} {"seed":"@Override\n \tpublic void onCreate(Bundle savedInstanceState)\n \t{\n \t\tsuper.onCreate(savedInstanceState);\n \n \t\tmToday = DateTime.today();\n \t\tsetOnGroupCollapseExpandListener(this);\n \t\tsetEmptyViewText(R.string._msg_no_history_data);\n \t\tupdateListView(getArguments().getInt(\"flags\"));\n \t}"} {"seed":"@Override\n \tpublic boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id)\n \t{\n \t\tLog.d(TAG, \"onChildClick: \" + groupPosition + \":\" + childPosition);\n \n \t\tfinal Date date = getGroupDate(groupPosition);\n \t\tif(date == null)\n \t\t\treturn false;\n \n \t\tfinal Intent intent = new Intent(getActivity(), DrugListActivity.class);\n \t\tintent.putExtra(DrugListActivity.EXTRA_DATE, date);\n \t\tintent.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);\n \t\tstartActivity(intent);\n \t\treturn true;\n \t}"} {"seed":"@Override\n \tpublic void collapseAll()\n \t{\n \t\tsuper.collapseAll();\n \t\tmCollapsedCount = mGroupedEvents.size();\n \t}"} {"seed":"@Override\n \tpublic void expandAll(boolean animate)\n \t{\n \t\tsuper.expandAll(animate);\n \t\tmCollapsedCount = 0;\n \t}"} {"seed":"@Override\n \tpublic void onGroupCollapse(int groupPosition)\n \t{\n \t\tif(!isAllCollapsed())\n \t\t{\n \t\t\tif(++mCollapsedCount == mGroupedEvents.size())\n \t\t\t\tinvalidateOptionsMenu();\n \t\t}\n \t}"} {"seed":"@Override\n \tpublic void onGroupExpand(int groupPosition)\n \t{\n \t\tif(mCollapsedCount != 0)\n \t\t{\n \t\t\tif(--mCollapsedCount == 0)\n \t\t\t\tinvalidateOptionsMenu();\n \t\t}\n \t}"} {"seed":"@Override\n \tpublic void onCreateOptionsMenu(Menu menu, MenuInflater inflater)\n \t{\n \t\tfinal int iconAttr = isAllCollapsed() ? R.attr.actionIconExpandAll : R.attr.actionIconCollapseAll;\n \t\tfinal int titleResId = isAllCollapsed() ? R.string._title_expand : R.string._title_collapse;\n \n \t\tMenuItem item = menu.add(0, MENU_COLLAPSE_EXPAND, 0, titleResId)\n \t\t.setIcon(Theme.getResourceAttribute(iconAttr))\n \t\t.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n \n \t\t\t@Override\n \t\t\tpublic boolean onMenuItemClick(MenuItem item)\n \t\t\t{\n \t\t\t\tfinal boolean isAllCollapsed = isAllCollapsed();\n \n \t\t\t\tif(isAllCollapsed)\n \t\t\t\t\texpandAll(true);\n \t\t\t\telse\n \t\t\t\t\tcollapseAll();\n \n \t\t\t\tSettings.putBoolean(Keys.LOG_IS_ALL_COLLAPSED, !isAllCollapsed);\n \t\t\t\t//invalidateOptionsMenu();\n \n \t\t\t\treturn true;\n \t\t\t}\n \t\t});\n \n \t\titem.setVisible(!getListAdapter().isEmpty());\n \t\titem.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);\n \n \t\tsuper.onCreateOptionsMenu(menu, inflater);\n \t}"} {"seed":"private void invalidateOptionsMenu() {\n \t\t((SherlockFragmentActivity) getActivity()).invalidateOptionsMenu();\n \t}"} {"seed":"private boolean isAllCollapsed() {\n \t\treturn mCollapsedCount == getListAdapter().getGroupCount();\n \t}"} {"seed":"private void updateListView(int flags)\n \t{\n \t\tgetArguments().putInt(\"flags\", flags);\n \t\tgatherEventInfos(flags);\n \t\tsetListAdapter(new Adapter());\n \n \t\tif(!Settings.getBoolean(Keys.LOG_IS_ALL_COLLAPSED, true))\n \t\t\texpandAll(false);\n \t\telse\n \t\t\tmCollapsedCount = getListAdapter().getGroupCount();\n \t}"} {"seed":"private Drug getDrug() {\n \t\treturn Drug.get(getArguments().getInt(\"drug_id\"));\n \t}"} {"seed":"private void gatherEventInfos(int flags)\n \t{\n \t\tfinal Timer t;\n \t\tif(LOGV)\n \t\t\tt = new Timer();\n \t\telse\n \t\t\tt = null;\n \n \t\tfinal Drug drug = getDrug();\n \t\tfinal List<EventInfo> infos = new ArrayList<EventInfo>();\n \t\tfinal List<DoseEvent> events = Entries.findDoseEvents(drug, null, null);\n \n \t\tfor(DoseEvent event : events)\n \t\t{\n \t\t\tboolean isSkipped = event.getDose().isZero();\n \n \t\t\tif((isSkipped && (flags & SHOW_SKIPPED) == 0) ||\n \t\t\t\t\t(!isSkipped && (flags & SHOW_TAKEN) == 0)) {\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tinfos.add(EventInfo.newTakenOrIgnoredEvent(event));\n \t\t}\n \n \t\tDate date = Settings.getDate(Keys.OLDEST_POSSIBLE_DOSE_EVENT_TIME);\n \n \t\tif(date != null && !events.isEmpty())\n \t\t{\n \t\t\tCollections.sort(infos, EventInfoByDateComparator.INSTANCE);\n \t\t\tdate = DateTime.max(date, Settings.getOldestPossibleHistoryDate(mToday));\n \t\t\tdate = DateTime.min(date, events.get(events.size() - 1).getDate());\n \t\t}\n \t\telse if(date == null)\n \t\t\tdate = Settings.getOldestPossibleHistoryDate(mToday);\n \n \t\tfinal Date lastScheduleUpdateDate = drug.getLastScheduleUpdateDate();\n \n \t\tif(date == null)\n \t\t{\n \t\t\tif((date = lastScheduleUpdateDate) == null)\n \t\t\t{\n \t\t\t\tLog.w(TAG, \"gatherEventInfos(\" + flags + \"): no date to begin; giving up\");\n \t\t\t\treturn;\n \t\t\t}\n \t\t}\n \n //\t\tfinal Date lastDosesClearedDate = drug.getLastDosesClearedDate();\n //\t\tif(lastDosesClearedDate != null)\n //\t\t{\n //\t\t\twhile(!date.after(lastDosesClearedDate))\n //\t\t\t\tdate = DateTime.add(date, Calendar.DAY_OF_MONTH, 1);\n //\t\t}\n \n \t\tfinal DoseTimeInfo dtInfo = Settings.getDoseTimeInfo();\n \n \t\tif((flags & SHOW_MISSED) != 0)\n \t\t{\n \t\t\twhile(!date.after(mToday))\n \t\t\t{\n \t\t\t\tif(lastScheduleUpdateDate == null || !date.before(lastScheduleUpdateDate))\n \t\t\t\t{\n \t\t\t\t\tif(drug.hasDoseOnDate(date))\n \t\t\t\t\t{\n \t\t\t\t\t\tfor(int doseTime : Constants.DOSE_TIMES)\n \t\t\t\t\t\t{\n \t\t\t\t\t\t\tif(date.equals(mToday) && doseTime == dtInfo.activeOrNextDoseTime())\n \t\t\t\t\t\t\t\tbreak;\n \n \t\t\t\t\t\t\tFraction dose = drug.getDose(doseTime, date);\n \n \t\t\t\t\t\t\tif(!dose.isZero() && !containsDoseEvent(events, date, doseTime))\n \t\t\t\t\t\t\t{\n \t\t\t\t\t\t\t\t//Log.d(TAG, \"Creating missed event: date=\" + date + \", doseTime=\" + doseTime);\n \t\t\t\t\t\t\t\tinfos.add(EventInfo.newMissedEvent(date, doseTime, dose));\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\tdate = DateTime.add(date, Calendar.DAY_OF_MONTH, 1);\n \t\t\t}\n \t\t}\n \n \t\tCollections.sort(infos, EventInfoByDateComparator.INSTANCE);\n \n \t\tmGroupedEvents = new ArrayList<List<EventInfo>>();\n \n \t\tfor(int i = 0; i < infos.size();)\n \t\t{\n \t\t\tdate = infos.get(i).date;\n \n \t\t\tfinal List<EventInfo> group = new ArrayList<EventInfo>();\n \n \t\t\twhile(i < infos.size() && date.equals(infos.get(i).date))\n \t\t\t{\n \t\t\t\t//Log.d(TAG, \"  CHILD: \" + events.get(i));\n \t\t\t\tgroup.add(infos.get(i));\n \t\t\t\t++i;\n \t\t\t}\n \n \t\t\tif(!group.isEmpty())\n \t\t\t{\n \t\t\t\tCollections.sort(group, EventInfoByDoseTimeComparator.INSTANCE);\n \t\t\t\tmGroupedEvents.add(group);\n \t\t\t}\n \t\t}\n \n \t\tif(LOGV) Log.d(TAG, \"gatherEvents: \" + t);\n \t}"} {"seed":"private Date getGroupDate(int groupPosition)\n \t{\n \t\tif(!mGroupedEvents.get(groupPosition).isEmpty())\n \t\t\treturn mGroupedEvents.get(groupPosition).get(0).date;\n \n \t\treturn null;\n \t}"} {"seed":"private static boolean containsDoseEvent(List<DoseEvent> doseEvents, Date date, int doseTime)\n \t{\n \t\tfor(DoseEvent doseEvent : doseEvents)\n \t\t{\n \t\t\tif(doseEvent.getDate().equals(date) && doseEvent.getDoseTime() == doseTime)\n \t\t\t\treturn true;\n \t\t}\n \n \t\treturn false;\n \t}"} {"seed":"static EventInfo newTakenOrIgnoredEvent(DoseEvent intake) {\n \t\treturn new EventInfo(intake);\n \t}"} {"seed":"static EventInfo newMissedEvent(Date date, int doseTime, Fraction dose) {\n \t\treturn new EventInfo(date, doseTime, dose);\n \t}"} {"seed":"@Override\n \tpublic String toString()\n \t{\n \t\tString statusStr;\n \n \t\tswitch(status)\n \t\t{\n \t\t\tcase STAT_TAKEN:\n \t\t\t\tstatusStr = \"taken\";\n \t\t\t\tbreak;\n \n \t\t\tcase STAT_MISSED:\n \t\t\t\tstatusStr = \"missed\";\n \t\t\t\tbreak;\n \n \t\t\tcase STAT_SKIPPED:\n \t\t\t\tstatusStr = \"skipped\";\n \t\t\t\tbreak;\n \n \t\t\tdefault:\n \t\t\t\tstatusStr = \"???\";\n \t\t}\n \n \t\treturn \"EventInfo { \" + timestamp + \", \" + DateTime.toDateString(date) + \", \" +\n \t\t\t\tUtil.getDoseTimeName(doseTime) + \", \" + statusStr + \" }\";\n \t}"} {"seed":"@Override\n \tpublic boolean equals(Object o)\n \t{\n \t\tif(o == null || !(o instanceof EventInfo))\n \t\t\treturn false;\n \n \t\treturn getSortingTime() == ((EventInfo) o).getSortingTime();\n \t}"} {"seed":"@Override\n \tpublic int hashCode() {\n \t\treturn (int) (getSortingTime() & 0x00000000ffffffffL);\n \t}"} {"seed":"long getSortingTime() {\n \t\treturn date.getTime();\n \t}"} {"seed":"String getTimeString()\n \t{\n \t\tif(timestamp == null)\n \t\t{\n \t\t\tfinal long offset = Settings.getTrueDoseTimeEndOffset(doseTime);\n \t\t\ttimestamp = DateTime.add(date, Calendar.MILLISECOND, (int) offset);\n \t\t}\n \n \t\tfinal StringBuilder sb = new StringBuilder(DateTime.toNativeTime(timestamp, false));\n \t\tlong diffDays = DateTime.diffDays(date, timestamp);\n \n \t\tif(diffDays != 0)\n \t\t{\n \t\t\tsb.append(' ');\n \n \t\t\tif(diffDays > 0)\n \t\t\t\tsb.append('+');\n \n \t\t\tsb.append(diffDays);\n \t\t}\n \n \t\treturn sb.toString();\n \t}"} {"seed":"@Override\n \tpublic int compare(EventInfo lhs, EventInfo rhs) {\n \t\treturn signum(rhs.getSortingTime() - lhs.getSortingTime());\n \t}"} {"seed":"private static int signum(long l)\n \t{\n \t\tif(l == 0)\n \t\t\treturn 0;\n \n \t\treturn l < 0 ? -1 : 1;\n \t}"} {"seed":"@Override\n \tpublic int compare(EventInfo lhs, EventInfo rhs) {\n \t\treturn lhs.doseTime - rhs.doseTime;\n \t}"} {"seed":"@Override\n \t\tpublic int getGroupCount() {\n \t\t\treturn mGroupedEvents.size();\n \t\t}"} {"seed":"@Override\n \t\tpublic int getChildrenCount(int groupPosition) {\n \t\t\treturn mGroupedEvents.get(groupPosition).size() + 1;\n \t\t}"} {"seed":"@Override\n \t\tpublic Object getGroup(int groupPosition) {\n \t\t\treturn mGroupedEvents.get(groupPosition);\n \t\t}"} {"seed":"@Override\n \t\tpublic Object getChild(int groupPosition, int childPosition) {\n \t\t\treturn mGroupedEvents.get(groupPosition).get(childPosition);\n \t\t}"} {"seed":"@Override\n \t\tpublic View getGroupView(int groupPosition, boolean isExpanded, View view, ViewGroup parent)\n \t\t{\n \t\t\tfinal GroupViewHolder holder;\n \n \t\t\tif(view == null)\n \t\t\t{\n \t\t\t\tview = mInflater.inflate(R.layout.log_group, null);\n \t\t\t\tholder = new GroupViewHolder();\n \t\t\t\tholder.status = (ImageView) view.findViewById(R.id.img_status);\n \t\t\t\tholder.date = (TextView) view.findViewById(R.id.text_date);\n\t\t\t\tholder.count = (TextView) view.findViewById(R.id.text_count);\n \t\t\t\tview.setTag(holder);\n \t\t\t}\n \t\t\telse\n \t\t\t\tholder = (GroupViewHolder) view.getTag();\n \n \t\t\tfinal List<EventInfo> events = mGroupedEvents.get(groupPosition);\n \t\t\tif(events.isEmpty())\n \t\t\t{\n \t\t\t\tLog.w(TAG, \"Group \" + groupPosition + \" is empty...\");\n \t\t\t\tholder.status.setImageResource(0);\n \t\t\t\tholder.date.setText(\"?\");\n\t\t\t\tholder.count.setText(\"(0)\");\n \n \t\t\t\treturn view;\n \t\t\t}\n \n \t\t\tfinal Date date = events.get(0).date;\n \t\t\tholder.date.setText(DateTime.toNativeDate(date));\n\t\t\tholder.count.setText(\"(\" + events.size() + \")\");\n \n \t\t\tint statusResId = Theme.getResourceAttribute(R.attr.doseStatusTaken);\n \t\t\tfor(EventInfo info : events)\n \t\t\t{\n \t\t\t\tif(info.status == EventInfo.STAT_MISSED)\n \t\t\t\t{\n \t\t\t\t\tstatusResId = Theme.getResourceAttribute(R.attr.doseStatusMissed);\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t}\n \n \t\t\tholder.status.setImageResource(statusResId);\n \t\t\treturn view;\n \t\t}"} {"seed":"@Override\n \t\tpublic View getChildView(final int groupPosition, int childPosition, boolean isLastChild, View view,\n \t\t\t\tViewGroup parent)\n \t\t{\n \t\t\tif(childPosition == 0)\n \t\t\t\tmChildTimer.restart();\n \n \t\t\tfinal ChildViewHolder holder;\n \n \t\t\tif(view == null)\n \t\t\t{\n \t\t\t\tview = mInflater.inflate(R.layout.log_child, null);\n \t\t\t\tholder = new ChildViewHolder();\n \t\t\t\tholder.dose = (DoseView) view.findViewById(R.id.dose_dose);\n \t\t\t\tholder.time = (TextView) view.findViewById(R.id.text_time);\n \t\t\t\tholder.text = (TextView) view.findViewById(R.id.text_info);\n \t\t\t\tholder.gotoDate = (ImageView) view.findViewById(R.id.img_goto_date);\n \t\t\t\tview.setTag(holder);\n \t\t\t}\n \t\t\telse\n \t\t\t\tholder = (ChildViewHolder) view.getTag();\n \n \t\t\tif(!isLastChild)\n \t\t\t{\n \t\t\t\tholder.dose.setVisibility(View.VISIBLE);\n \t\t\t\tholder.time.setVisibility(View.VISIBLE);\n \t\t\t\tholder.gotoDate.setVisibility(View.INVISIBLE);\n \t\t\t\t//holder.text.setGravity(Gravity.CENTER_VERTICAL);\n \n \t\t\t\tfinal EventInfo info = mGroupedEvents.get(groupPosition).get(childPosition);\n \n \t\t\t\tholder.time.setText(info.getTimeString());\n \t\t\t\tholder.dose.setDose(info.dose);\n \n \t\t\t\tfinal int timeColorAttr;\n \t\t\t\tfinal int textResId;\n \n \t\t\t\tfinal DoseEvent doseEvent = info.intake;\n \t\t\t\tif(doseEvent != null)\n \t\t\t\t{\n \t\t\t\t\t//holder.dose.setDose(doseEvent.getDose());\n \t\t\t\t\tif(info.status == EventInfo.STAT_TAKEN)\n \t\t\t\t\t{\n \t\t\t\t\t\ttextResId = R.string._title_taken;\n \t\t\t\t\t\ttimeColorAttr = R.attr.colorStatusTaken;\n \t\t\t\t\t}\n \t\t\t\t\telse\n \t\t\t\t\t{\n \t\t\t\t\t\ttextResId = R.string._title_skipped;\n \t\t\t\t\t\ttimeColorAttr = R.attr.colorStatusSkipped;\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\telse\n \t\t\t\t{\n \t\t\t\t\t//holder.dose.setDoseFromDrugAndDate(info.date, null);\n \t\t\t\t\t//holder.dose.setVisibility(View.GONE);\n \t\t\t\t\ttextResId = R.string._title_missed;\n \t\t\t\t\ttimeColorAttr = R.attr.colorStatusMissed;\n \t\t\t\t}\n \n \t\t\t\tfinal StringBuilder sb = new StringBuilder();\n \t\t\t\tsb.append(getString(textResId) + \": \");\n \t\t\t\tsb.append(getString(DOSE_NAME_IDS[info.doseTime]));\n \t\t\t\tholder.text.setText(sb.toString());\n \n \t\t\t\tfinal int color = Theme.getColorAttribute(timeColorAttr);\n \n //\t\t\t\tfinal int color = getResources().getColor(Theme.getColorAttribute(timeColorAttr));\n \t\t\t\tholder.time.setTextColor(color);\n \t\t\t}\n \t\t\telse\n \t\t\t{\n \t\t\t\tholder.dose.setVisibility(View.INVISIBLE);\n \t\t\t\tholder.time.setVisibility(View.INVISIBLE);\n \t\t\t\tholder.gotoDate.setVisibility(View.VISIBLE);\n \t\t\t\t//holder.text.setGravity(Gravity.CENTER);\n \n \t\t\t\t/*final OnClickListener clickListener = new OnClickListener() {\n \n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onClick(View v)\n \t\t\t\t\t{\n \t\t\t\t\t\tfinal Intent intent = new Intent(getActivity(), DrugListActivity.class);\n \t\t\t\t\t\tintent.putExtra(DrugListActivity.EXTRA_DATE, getGroupDate(groupPosition));\n \t\t\t\t\t\tintent.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);\n \t\t\t\t\t\tstartActivity(intent);\n \t\t\t\t\t}\n \t\t\t\t};\n \n \n \t\t\t\tholder.gotoDate.setOnClickListener(clickListener);\n \t\t\t\tholder.text.setOnClickListener(clickListener);*/\n \t\t\t\tholder.text.setText(R.string._msg_tap_to_view_date);\n \t\t\t}\n \n \t\t\tif(isLastChild)\n \t\t\t\tLog.i(TAG, (childPosition + 1) + \" child views created in \" + mChildTimer);\n \n \t\t\treturn view;\n \t\t}"} {"seed":"@Override\n \t\tpublic boolean isChildSelectable(int groupPosition, int childPosition)\n \t\t{\n \t\t\treturn true;\n \t\t}"} {"seed":"@Override\n \t\tpublic long getChildId(int groupPosition, int childPosition) {\n \t\t\t// TODO Auto-generated method stub\n \t\t\treturn childPosition;\n \t\t}"} {"seed":"@Override\n \t\tpublic long getGroupId(int groupPosition) {\n \t\t\t// TODO Auto-generated method stub\n \t\t\treturn groupPosition;\n \t\t}"} {"seed":"@Override\n \t\tpublic boolean hasStableIds() {\n \t\t\t// TODO Auto-generated method stub\n \t\t\treturn false;\n \t\t}"} {"seed":"@Override\n \t\t\tpublic boolean onMenuItemClick(MenuItem item)\n \t\t\t{\n \t\t\t\tfinal boolean isAllCollapsed = isAllCollapsed();\n \n \t\t\t\tif(isAllCollapsed)\n \t\t\t\t\texpandAll(true);\n \t\t\t\telse\n \t\t\t\t\tcollapseAll();\n \n \t\t\t\tSettings.putBoolean(Keys.LOG_IS_ALL_COLLAPSED, !isAllCollapsed);\n \t\t\t\t//invalidateOptionsMenu();\n \n \t\t\t\treturn true;\n \t\t\t}"} {"seed":"public int percent(String[] items) {\n\n        Double itemCosts = 0.0d;\n        Double itemPrices = 0.0d;\n        for (String item : items) {\n            itemPrices += new Double(item.split(\" \")[0]);\n            itemCosts += new Double(item.split(\" \")[1]);\n        }\n        final double profit = itemPrices - itemCosts;\n        return (int) (profit * 100 / itemPrices);\n\n    }"} {"seed":"@BeforeClass\n  public static void setUp() throws IOException {\n    graphDataGenerator = mock(GraphDataGenerator.class);\n    Node mockedNode = mock(Node.class);\n    Edge mockedEdge = mock(Edge.class);\n\n    when(graphDataGenerator.getNode(anyLong())).thenReturn(mockedNode);\n    when(graphDataGenerator.getEdge(anyLong())).thenReturn(mockedEdge);\n\n    randomGraphComponentRecreator = new RandomGraphComponentRecreator(directory, graphDataGenerator);\n  }"} {"seed":"@Test\n  public void testLoadingOfFiles() throws IOException {\n    randomGraphComponentRecreator = new RandomGraphComponentRecreator(directory, graphDataGenerator);\n  }"} {"seed":"@Test(expected = IOException.class)\n  public void testLoadingOfFilesWithNoFilesPresent() throws IOException {\n    randomGraphComponentRecreator = new RandomGraphComponentRecreator(System.getProperty(\"user.dir\"),\n        graphDataGenerator);\n  }"} {"seed":"@Test\n  public void chooseRandomEdgeId() throws IOException {\n    List<String> edgeLines = Files.readAllLines(randomGraphComponentRecreator.getEdgeFile().toPath(),\n        Charset.forName(new FileReader(randomGraphComponentRecreator.getEdgeFile()).getEncoding()));\n\n    for (String edgeLine : edgeLines) {\n      Assert.assertEquals(Long.parseLong(edgeLine), randomGraphComponentRecreator.chooseRandomEdgeId());\n    }\n  }"} {"seed":"@Test\n  public void chooseRandomNodeId() throws IOException {\n    List<String> nodeLines = Files.readAllLines(randomGraphComponentRecreator.getNodeFile().toPath(),\n        Charset.forName(new FileReader(randomGraphComponentRecreator.getNodeFile()).getEncoding()));\n\n    for (String nodeLine : nodeLines) {\n      Assert.assertEquals(Long.parseLong(nodeLine), randomGraphComponentRecreator.chooseRandomNodeId());\n    }\n  }"} {"seed":"@Test\n  public void chooseRandomNodeOrEdgeId() throws IOException {\n    List<String> components = Files.readAllLines(randomGraphComponentRecreator.getComponentFile().toPath(),\n        Charset.forName(new FileReader(randomGraphComponentRecreator.getComponentFile()).getEncoding()));\n\n    for (String component : components) {\n      Assert.assertEquals(component, randomGraphComponentRecreator.randomNodeOrEdge().name());\n    }\n  }"} {"seed":"public BLayer[][] getLayers()\n\t{\n\t\treturn layers;\n\t}"} {"seed":"public abstract Matrix[] getOutput(Matrix[] inputs);"} {"seed":"public abstract HashMap<BLayer, Matrix>[] getOutputs(Matrix[] inputs, HashMap<BLayer, Matrix>[] outputs);"} {"seed":"public abstract Network clone();"} {"seed":"public static void saveNetwork(File saveLocation, SplitNetwork network)\n\t{\n\t\tByteArrayOutputStream bOut=new ByteArrayOutputStream();\n        ObjectOutputStream oOut;\n\t\ttry \n\t\t{\n\t\t\toOut = new ObjectOutputStream(bOut);\n\t\t\toOut.writeUnshared(network);\n\t        oOut.close();\n\t        Files.write(saveLocation.toPath(), bOut.toByteArray());\n\t        bOut.close();\n\t\t}\n\t\tcatch (IOException e) \n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\t}"} {"seed":"public static SplitNetwork loadNetwork(File saveLocation)\n\t{\n\t\t\n\t\ttry \n\t\t{\n\t\t\tbyte[] networkBytes=Files.readAllBytes(saveLocation.toPath());\n\t\t\tByteArrayInputStream bIn=new ByteArrayInputStream(networkBytes);\n\t        ObjectInputStream oIn=new ObjectInputStream(bIn);       \n\t        SplitNetwork network=(SplitNetwork)oIn.readObject();\n\t        oIn.close();\n\t        bIn.close();\n\t        return network;\n\t\t} \n\t\tcatch (IOException | ClassNotFoundException e) \n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}"} {"seed":"public static ModelBoundField create(\n\t\t\tGson context,\n\t\t\tField field, \n\t\t\tString name, \n\t\t\tTypeToken<?> fieldType, \n\t\t\tboolean serialize,\n\t\t\tboolean deserialize) {\n\t\t\n\t\treturn new ModelBoundField(context, field, name, fieldType, serialize, deserialize);\n\t}"} {"seed":"@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\t// the type adapter and field type always agree\n\t@Override\n\tpublic void write(\n\t\t\tJsonWriter writer, \n\t\t\tObject value, \n\t\t\tModelSerializationStrategy serializationStrategy) throws IOException, IllegalAccessException {\n\t\t\n\t\tObject fieldValue = this.field.get(value);\n\t\tboolean shouldExpand = serializationStrategy == null ? \n\t\t\t\tfalse : serializationStrategy.shouldExpandField(this.field);\n\t\t\n\t\tif (isForeignField() && !shouldExpand && fieldValue != null) {\n\t\t\ttry {\n\t\t\t\tMethod method = fieldValue.getClass().getMethod(\"getIdentity\");\n\t\t\t\tObject obj = method.invoke(fieldValue);\n\t\t\t\t\n\t\t\t\tTypeAdapter t = context.getAdapter(obj.getClass());\n\t\t\t\tt.write(writer, obj);\n\t\t\t} catch (Exception ex) {\n\t\t\t\t// ignore the field if there was an error\n\t\t\t\twriter.nullValue();\n\t\t\t}\n\t\t} else if ((isForeignField() || isForeignCollection()) && fieldValue != null) {\n\t\t\tTypeAdapter t = context.getAdapter(fieldValue.getClass());\n\t\t\t\n\t\t\tif (t instanceof DaoTypeAdapter) {\n\t\t\t\tDaoTypeAdapter<?> adapter = (DaoTypeAdapter<?>) t;\n\t\t\t\t\n\t\t\t\tModelSerializationStrategy policy = serializationStrategy.getFieldSerializationStrategy(this.field);\n\t\t\t\tif (policy != null && policy.shouldRefreshField(this.field) && fieldValue instanceof Model) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t((Model) fieldValue).refresh();\n\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\t// Ignored\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Field serialization policy takes precedence of the serialization\n\t\t\t\t// policy specified for the type adapter factory\n\t\t\t\tModelSerializationStrategy strategy = adapter.setSerializationStrategy(policy);\n\t\t\t\tt.write(writer, fieldValue);\n\t\t\t\tadapter.setSerializationStrategy(strategy);\n\t\t\t} else {\n\t\t\t\tt.write(writer, fieldValue);\n\t\t\t}\n\t\t} else {\n\t\t\tTypeAdapter t = new TypeAdapterRuntimeTypeWrapper(\n\t\t\t\t\tcontext, \n\t\t\t\t\ttypeAdapter,\n\t\t\t\t\tfieldType.getType());\n\t\t\t\n\t\t\tt.write(writer, fieldValue);\n\t\t}\n\t}"} {"seed":"@SuppressWarnings({ \"rawtypes\" })\n\t@Override\n\tpublic void read(JsonReader reader, final Object value, String fieldName) throws IOException, IllegalAccessException {\n\t\tboolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());\n\t\tif (typeAdapter instanceof ForeignCollectionTypeAdapter) {\n\t\t\t((ForeignCollectionTypeAdapter) typeAdapter).setDeserializationContext(new ForeignCollectionDeserializationContext() {\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Object getParent() {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic String getColumnName() {\n\t\t\t\t\tForeignCollectionField fcField = field.getAnnotation(ForeignCollectionField.class);\n\t\t\t\t\treturn fcField == null ? name : fcField.columnName();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic String getOrderColumnName() {\n\t\t\t\t\tForeignCollectionField fcField = field.getAnnotation(ForeignCollectionField.class);\n\t\t\t\t\treturn fcField == null ? \"\" : fcField.orderColumnName();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic boolean getOrderAscending() {\n\t\t\t\t\tForeignCollectionField fcField = field.getAnnotation(ForeignCollectionField.class);\n\t\t\t\t\treturn fcField == null ? true : fcField.orderAscending();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t});\n\t\t}\n\t\t\n\t\tObject fieldValue = typeAdapter.read(reader);\n\t\tif (fieldValue != null || !isPrimitive) {\n\t\t\tif (isPasswordField()) {\n\t\t\t\ttry {\n\t\t\t\t\t// Encrypt the password\n\t\t\t\t\tPasswordField pwdField = field.getAnnotation(PasswordField.class);\n\t\t\t\t\tPasswordEncryptor encryptor = pwdField.encryptorClass().newInstance();\n\t\t\t\t\tfield.set(value, encryptor.encryptPassword((String) fieldValue));\n\t\t\t\t} catch (InstantiationException e) {\n\t\t\t\t\t// Ignored\n\t\t\t\t} catch (ClassCastException ex) {\n\t\t\t\t\t// Ignored\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfield.set(value, fieldValue);\n\t\t\t}\n\t\t}\n\t}"} {"seed":"@Override\n\t\t\t\tpublic Object getParent() {\n\t\t\t\t\treturn value;\n\t\t\t\t}"} {"seed":"@Override\n\t\t\t\tpublic String getColumnName() {\n\t\t\t\t\tForeignCollectionField fcField = field.getAnnotation(ForeignCollectionField.class);\n\t\t\t\t\treturn fcField == null ? name : fcField.columnName();\n\t\t\t\t}"} {"seed":"@Override\n\t\t\t\tpublic String getOrderColumnName() {\n\t\t\t\t\tForeignCollectionField fcField = field.getAnnotation(ForeignCollectionField.class);\n\t\t\t\t\treturn fcField == null ? \"\" : fcField.orderColumnName();\n\t\t\t\t}"} {"seed":"@Override\n\t\t\t\tpublic boolean getOrderAscending() {\n\t\t\t\t\tForeignCollectionField fcField = field.getAnnotation(ForeignCollectionField.class);\n\t\t\t\t\treturn fcField == null ? true : fcField.orderAscending();\n\t\t\t\t}"} {"seed":"public static void main(String[] args) {\n\t\tint[] x = new int[5];\n\t\tint[] y = new int[8];\n\t\t\n\t\tfor(int i=1; i<x.length; i++) {\n\t\t\tx[i] = x[i -1] + 2;\n\t\t\ty[i] = x[i];\n\t\t}\n\t\tfor(int i=0; i<y.length; i++) {\n\t\t\tSystem.out.print(y[i] + \" \");\n\t\t}\n\t}"} {"seed":"public static void main(String[] args) throws Exception\n\t{\n\t\t//BufferedReader br=new BufferedReader(new FileReader(\"c:\\\\in.txt\"));\n\t\tScanner cin=new Scanner(new BufferedInputStream(System.in));\n\t\twhile(true)\n\t\t{\n\t\n\t\t\tint n1=cin.nextInt();\n\t\t\tint n2=cin.nextInt();\n\t\t\tint n=cin.nextInt();\n\t\t\tif(n1==0&&n2==0&&n==0)\n\t\t\t\tbreak;\n\t\t\tint divsor=n-n1-n2;\n\t\t\tHashMap<BigDecimal,Integer> bd=new HashMap< BigDecimal,Integer>();\n\t\t\tfor(int i=0;i<n;i++)\n\t\t\t{\n\t\t\t\t\n\t\t\t\tBigDecimal td=new BigDecimal(cin.next());\n\t\t\t\tInteger ti=bd.get(td);\n\t\t\t\tif(ti!=null)\n\t\t\t\t\tti++;\n\t\t\t\telse ti=1;\n\t\t\t\tbd.put(td,ti);\n\t\t\t}\n\t\t\tBigDecimal [] p=new BigDecimal[bd.size()];\n\t\t\tbd.keySet().toArray(p);\n\t\t\tArrays.sort(p);\n\t\t\tBigDecimal re=new BigDecimal(\"0\");\n\t\t\tint findex=0;\n\t\t\tint fnum=0;\n\t\t\tint lindex=p.length-1;\n\t\t\tint lnum=0;\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tint t=bd.get(p[findex]);\n\t\t\t\tif(n2>=t)\n\t\t\t\t{\n\t\t\t\t\tn2-=t;\n\t\t\t\t\tfindex++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfnum=t-n2;\n\t\t\t\t\tre=re.add(p[findex].multiply(new BigDecimal(\"\"+fnum)));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tint t=bd.get(p[lindex]);\n\t\t\t\tif(n1>=t)\n\t\t\t\t{\n\t\t\t\t\tn1-=t;\n\t\t\t\t\tlindex--;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlnum=t-n1;\n\t\t\t\t\tre=re.add(p[lindex].multiply(new BigDecimal(\"\"+lnum)));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tfor(int i=findex+1;i<lindex;i++)\n\t\t\t\tre=re.add(p[i].multiply(new BigDecimal(\"\"+bd.get(p[i]))));\n\t\t\tre=re.divide(new BigDecimal(\"\"+divsor),6,BigDecimal.ROUND_HALF_UP);\n\t\t\tSystem.out.println(re);\n\t\t\tbd=null;\n\t\t\tSystem.gc();\n\t\t}\n\t}"} {"seed":"public void multiplayerSessionStarted(MultiplayerServer server);"} {"seed":"public void multiplayerSessionEnded();"} {"seed":"/** Get Client.\n\t  * Client/Tenant for this installation.\n\t  */\npublic int getAD_Client_ID();"} {"seed":"/** Set Column.\n\t  * Column in the table\n\t  */\npublic void setAD_Column_ID (int AD_Column_ID);"} {"seed":"/** Get Column.\n\t  * Column in the table\n\t  */\npublic int getAD_Column_ID();"} {"seed":"/** Get Column.\n\t  * Column in the table\n\t  */\npublic org.compiere.model.I_AD_Column getAD_Column() throws RuntimeException;"} {"seed":"/** Set Organization.\n\t  * Organizational entity within client\n\t  */\npublic void setAD_Org_ID (int AD_Org_ID);"} {"seed":"/** Get Organization.\n\t  * Organizational entity within client\n\t  */\npublic int getAD_Org_ID();"} {"seed":"/** Set And/Or.\n\t  * Logical operation: AND or OR\n\t  */\npublic void setAndOr (String AndOr);"} {"seed":"/** Get And/Or.\n\t  * Logical operation: AND or OR\n\t  */\npublic String getAndOr();"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\n�обка\n\t  */\n\tpublic void setCloseBracket (Stri"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\n�вающая скобка\n\t  */"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\nthe column in the database\n\t  */\n\tpublic void"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\nthe column in the database"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\nte this record was created"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\nr who created this records"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\nrd is active in the system\n\t  */\n\tpublic vo"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\nrd is active in the system"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\nStatic\";\n\n\t/** Set isStatic\t  */\n\tpublic vo"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\nStatic);\n\n\t/** Get isStati"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\nque line for this document\n\t  *"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\nque line for this doc"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\nt.\n\t  * Открывающая скобка\n\t  *"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\n** Get OpenBracket.\n\t  * Отк"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\nn = \"Operation\";\n\n\t/** Set Operation.\n\t  * C"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\nring Operation);\n\n\t/** Get Op"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\nation_ID = \"PFR_Calculation_ID\";\n\n\t/** Set PFR_Calculation"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\nion_ID (int PFR_Calculation_ID);"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\n Get PFR_Calculation ID\t  */\n\tpublic int getPFR_Calculation_ID();\n\n\tpu"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\nlause_ID = \"PFR_WhereClause_ID\";\n\n\t/** Set PFR_WhereClause"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\nuse_ID (int PFR_WhereClause_ID);"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\ndated\";\n\n\t/** Get Updated."} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\ny\";\n\n\t/** Get Updated By."} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\nc final String COLUMNNAME_Value1 = \"Va"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\n  */\n\tpublic void setValue"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\nUMNNAME_Value2 = \"Value2\";\n\n\t/** Set V"} {"seed":"/** Set CloseBracket.\n\t  * Закрывающая �\nsetValue2 (String Value2);"} {"seed":"@RequestMapping(\"/advice\")\n    public String getSomething(\n            @ModelAttribute(\"msg\") String msg,\n            DemoObj obj){\n        throw new IllegalArgumentException(\"非常抱歉，参数有误/ \" +\n        \" @ModelAttrib"} {"seed":"/**\n     * Calculates and returns the longest repeated substring in the tree's word.\n     * In case of multiple longest Repeated Substring we choose the longest Repeated Substring which comes 1st lexicographically.\n     * This function preforms placement to the maxLength and substringStartNode members.\n     * Examples: new longestRepeatedSuffixTreeImpl(\"mississippi\").getLongestRepeatedSubstring() -> \"issi\",\n     * new longestRepeatedSuffixTreeImpl(\"ioiosbdbd\").getLongestRepeatedSubstring() -> \"bd\",\n     * new longestRepeatedSuffixTreeImpl(\"bdioiosbd\").getLongestRepeatedSubstring() -> \"bd\",\n     * new longestRepeatedSuffixTreeImpl(\"abcd\").getLongestRepeatedSubstring() -> \"X\"  - no repeated substring,\n     * new longestRepeatedSuffixTreeImpl(\"a\").getLongestRepeatedSubstring() -> \"X\"  - no repeated substring,\n     * new longestRepeatedSuffixTreeImpl(\"aaaaaaaaaa\").getLongestRepeatedSubstring() -> \"aaaaaaaaa\"\n     */\npublic abstract void createLongestRepeatedSubstring();"} {"seed":"/**\n     * Getter for the longest repeated substring\n     * You should use the substringStartNode you already found in createLongestRepeatedSubstring function.\n     * @return the longest repeated substring\n     */\npublic abstract String getLongestRepeatedSubstring();"} {"seed":"/**\n     * Getter for the length of the longest repeated substring\n     * @return length of the longest repeated substring\n     */\npublic int getLongestRepeatedSubstringLength()\n    {\n        return maxLength;\n    }"} {"seed":"public static void main(String[] args) {\n\n        /*Q11 code snippet*/\n        System.out.println(\"Q11 code snippet\");\n\n        A instance1 = new A(12,14);\n        A instance2 = new A(12,14);\n\n        System.out.println(instance1.equals(instance2)); // Option C : using equals method to access to private attributes from each\n                                                         // other!\n\n        B instance3 = new B(2,4);\n\n        B instance4 = new B(82,45);\n\n        instance3.a=5;\n\n        System.out.println(instance1.instance5.b);// Option D : instance from A access to instance from B and access to\n                                                  // protected attributes of B\n\n\n    }"} {"seed":"public int getA() {\n        return a;\n    }"} {"seed":"public int getB() {\n        return b;\n    }"} {"seed":"@Override\n    public boolean equals(Object obj) {\n\n        if(obj==this) return true;\n\n        if (! (obj instanceof A)  ) return false;\n\n        A a_obj = (A) obj;\n\n        return Integer.compare(a,(a_obj).a) == 0 && Integer.compare(b,a_obj.b)==0;\n\n    }"} {"seed":"<WyComment> {\n\n\tList<WyComment> getByTypeAndId(@Param(\"bizType\")String bizType, @Param(\"relationId\")Str"} {"seed":"relationId);\n\n\tList<WyComment> getByCommentId(@Param(\"commentId\")St"} {"seed":"g commentId);\n\n\tList<WyComment> getAllByTypeAndId(@Param(\"bizType\")String bizType, @Param(\"relationId\")Str"} {"seed":"@Override\n\tprotected void createContent(Composite container) {\n\t\tUIUtil.gridLayout(container, 2);\n\t\tUIUtil.newLabel(container, \"Language:\");\n\t\tcomboLang = new LCCombo(container, null);\n\t\tfor (Language lang : SearchQuery.Language.values())\n\t\t\tcomboLang.addItem(null, lang.toString(), lang);\n\t\tcomboLang.setSelection(\"ENGLISH\");\n\t\tcomboLang.setEditable(false);\n\t\tUIUtil.newLabel(container, \"All words:\");\n\t\ttextAll = new Text(container, SWT.BORDER);\n\t\ttextAll.setLayoutData(UIUtil.gridDataHoriz(1, true));\n\t\tUIUtil.newLabel(container, \"One word among:\");\n\t\ttextOne = new Text(container, SWT.BORDER);\n\t\ttextOne.setLayoutData(UIUtil.gridDataHoriz(1, true));\n\t\tUIUtil.newLabel(container, \"None of words:\");\n\t\ttextNone = new Text(container, SWT.BORDER);\n\t\ttextNone.setLayoutData(UIUtil.gridDataHoriz(1, true));\n\t\tnew OkCancelButtonsPanel(container, true) {\n\t\t\t@Override\n\t\t\tprotected boolean handleOk() {\n\t\t\t\tquery = new SearchWebQuery();\n\t\t\t\tquery.lang = (Language)comboLang.getSelectionData();\n\t\t\t\tquery.all = parse(textAll.getText());\n\t\t\t\tquery.one = parse(textOne.getText());\n\t\t\t\tquery.none = parse(textNone.getText());\n\t\t\t\tok = true;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t@Override\n\t\t\tprotected boolean handleCancel() {\n\t\t\t\tok = false;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}.centerAndFillInGrid();\n\t}"} {"seed":"private String[] parse(String s) {\n\t\tList<String> list = new LinkedList<String>();\n\t\tStringBuilder str = new StringBuilder();\n\t\tboolean quote = false;\n\t\tfor (int i = 0; i < s.length(); ++i) {\n\t\t\tchar c = s.charAt(i);\n\t\t\tif (c == '\\\"') {\n\t\t\t\tquote = !quote;\n\t\t\t} else if (!quote && StringUtil.isSpace(c)) {\n\t\t\t\tif (str.length() > 0)\n\t\t\t\t\tlist.add(str.toString());\n\t\t\t\tstr = new StringBuilder();\n\t\t\t} else\n\t\t\t\tstr.append(c);\n\t\t}\n\t\tif (str.length() > 0)\n\t\t\tlist.add(str.toString());\n\t\treturn list.toArray(new String[list.size()]);\n\t}"} {"seed":"public SearchWebQuery open() {\n\t\tsuper.open(true);\n\t\tif (!ok) return null;\n\t\treturn query;\n\t}"} {"seed":"@Override\n\t\t\tprotected boolean handleOk() {\n\t\t\t\tquery = new SearchWebQuery();\n\t\t\t\tquery.lang = (Language)comboLang.getSelectionData();\n\t\t\t\tquery.all = parse(textAll.getText());\n\t\t\t\tquery.one = parse(textOne.getText());\n\t\t\t\tquery.none = parse(textNone.getText());\n\t\t\t\tok = true;\n\t\t\t\treturn true;\n\t\t\t}"} {"seed":"@Override\n\t\t\tprotected boolean handleCancel() {\n\t\t\t\tok = false;\n\t\t\t\treturn true;\n\t\t\t}"} {"seed":"@Override\n\tpublic ActionForward execute(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\t// TODO Auto-generated method stub\n\t\tint joinResult = 0;\n\t\tActionForward forward = null;\n\t\tMemberInfo mi = new MemberInfo();\n\t\tMemberService ms = new MemberService();\n\t\tString id = request.getParameter(\"id\");\n\t\tString password = request.getParameter(\"password\");\n\t\tString name = request.getParameter(\"name\");\n\t\tint phone = Integer.parseInt(request.getParameter(\"phone\"));\n\t\tString email = request.getParameter(\"email\");\n\t\t\n\t\tmi.setMemberId(id);\n\t\tmi.setMemberPassword(password);\n\t\tmi.setMemberName(name);\n\t\tmi.setMemberPhone(phone);\n\t\tmi.setMemberEmail(email);\n\t\t\n\t\tjoinResult =ms.memberJoin(mi);\n\t\t\n\t\tif (joinResult > 0) {\n\t\t\tforward = new ActionForward(\"memberJoin.mem\", true);\n\t\t} else {\n\t\t\tresponse.setContentType(\"text/html;charset=UTF-8\");\n\t\t\tPrintWriter out = response.getWriter();\n\t\t\tout.println(\"<script>\");\n\t\t\tout.println(\"alert('x');\");\n\t\t\tout.println(\"history.back();\");\n\t\t\tout.println(\"</script>\");\n\t\t}\n\t\tms.closeConnection();\n\t\treturn forward;\n\t}"} {"seed":"@Override\n\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\t\tSystem.out.println(\"支付装备...\");\n\t\t\n\t\tObject result = method.invoke(tarObj, args);\n\t\t\t\t\n\t\tSystem.out.println(\"支付完成\");\n\t\t\t\t\n\t\tr"} {"seed":"public void join(Student student) {\n        int position = -1;\n        for (int i = 0; i < students.length; i++) {\n            if (students[i] == null) {\n                students[i] = student;\n                student.join(new RecordBook());\n                position = i;\n                break;\n            }\n        }\n        if (position < 0) {\n            throw new GroupOverflowException();\n        }\n    }"} {"seed":"public Student kick(RecordBook recordBook) {\n        Student student = null;\n        for (int i = 0; i < students.length; i++) {\n            if (recordBook.equals(students[i].recordBook())) {\n                student = students[i];\n                student.kick();\n                students[i] = null;\n                break;\n            }\n        }\n        return student;\n    }"} {"seed":"public Student search(String lastName) {\n        Student found = null;\n        for (Student student : students) {\n            if (student != null && student.identify(lastName)) {\n                found = student;\n                break;\n            }\n        }\n        return found;\n    }"} {"seed":"@Override\n    public String toString() {\n        sort();\n        StringBuilder builder = new StringBuilder(\"Group '\").append(name).append(\"' students:\").append(\"\\n\");\n        for (Student student : students) {\n            builder.append(student).append(\"\\n\");\n        }\n        return builder.toString();\n    }"} {"seed":"private Student[] sort() {\n        for (int i = 0; i < students.length - 1; i++) {\n            for (int j = i + 1; j < students.length; j++) {\n                Student student1 = students[i];\n                Student student2 = students[j];\n                if (student1 == null && student2 != null) {\n                    students[i] = student2;\n                    students[j] = null;\n                } else if (student1 != null && student2 != null &&\n                        student1.lastName().compareToIgnoreCase(student2.lastName()) > 0) {\n                    students[i] = student2;\n                    students[j] = student1;\n                }\n            }\n        }\n        return students;\n    }"} {"seed":"@Before\n    public void setup() {\n        i = new MultiSet<>();\n    }"} {"seed":"@Test\n    public void testEmptyMultiSet() {\n        assertEquals(0, i.size());\n    }"} {"seed":"@Test\n    public void testFilledMultiSet1() {\n        MultiSet<Integer> j = new MultiSet<>(Arrays.asList(1,2,3));\n        assertEquals(3, j.size());\n        assertEquals(1, j.get(1));\n        assertEquals(1, j.get(2));\n        assertEquals(1, j.get(3));\n    }"} {"seed":"@Test\n    public void testFilledMultiSet2() {\n        MultiSet<Integer> j = new MultiSet<>(Arrays.asList(1,2,2,3,3,3));\n        assertEquals(3, j.size());\n        assertEquals(1, j.get(1));\n        assertEquals(2, j.get(2));\n        assertEquals(3, j.get(3));\n    }"} {"seed":"@Test\n    public void testPutSize1() {\n        i.put(1);\n        assertEquals(1, i.size());\n    }"} {"seed":"@Test\n    public void testPutSize2() {\n        i.put(1);\n        i.put(1);\n        assertEquals(1, i.size());\n    }"} {"seed":"@Test\n    public void testPutSize3() {\n        i.put(1);\n        i.put(2);\n        assertEquals(2, i.size());\n    }"} {"seed":"@Test\n    public void testPutGet1() {\n        assertEquals(0, i.get(1));\n    }"} {"seed":"@Test\n    public void testPutGet2() {\n        i.put(1);\n        assertEquals(1, i.get(1));\n    }"} {"seed":"@Test\n    public void testPutGet3() {\n        i.put(1);\n        i.put(1);\n        assertEquals(2, i.get(1));\n    }"} {"seed":"@Test\n    public void testUnion1() {\n        MultiSet<Integer> o = new MultiSet<>();\n        MultiSet<Integer> result = i.union(o, (a,b) -> a+b);\n        assertEquals(0, result.size());\n    }"} {"seed":"@Test\n    public void testUnion2() {\n        i.put(1);\n        MultiSet<Integer> o = new MultiSet<>();\n        MultiSet<Integer> result = i.union(o, (a,b) -> a+b);\n        assertEquals(1, result.size());\n        assertEquals(1, result.get(1));\n    }"} {"seed":"@Test\n    public void testUnion3() {\n        i.put(1);\n        i.put(1);\n        MultiSet<Integer> o = new MultiSet<>();\n        MultiSet<Integer> result = i.union(o, (a,b) -> a+b);\n        assertEquals(1, result.size());\n        assertEquals(2, result.get(1));\n    }"} {"seed":"@Test\n    public void testUnion4() {\n        MultiSet<Integer> o = new MultiSet<>();\n        o.put(1);\n        MultiSet<Integer> result = i.union(o, (a,b) -> a+b);\n        assertEquals(1, result.size());\n        assertEquals(1, result.get(1));\n    }"} {"seed":"@Test\n    public void testUnion5() {\n        i.put(1);\n        MultiSet<Integer> o = new MultiSet<>();\n        o.put(1);\n        MultiSet<Integer> result = i.union(o, (a,b) -> a+b);\n        assertEquals(1, result.size());\n        assertEquals(2, result.get(1));\n    }"} {"seed":"@Test\n    public void testUnion6() {\n        i.put(1);\n        MultiSet<Integer> o = new MultiSet<>();\n        o.put(1);\n        MultiSet<Integer> result = i.union(o, Math::max);\n        assertEquals(1, result.size());\n        assertEquals(1, result.get(1));\n    }"} {"seed":"@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_sport_adivse);\n\n        RelativeLayout layout = (RelativeLayout) findViewById(R.id.activity_sport_adivse);\n\n        Drawable bg = getResources().getDrawable( R.drawable.bg1 );\n        layout.setBackground(bg);\n\n        List<String> citations = Arrays.asList(getResources().getStringArray(R.array.famous_sport_citations));\n        Random randomizer = new Random();\n        String randomCitation = citations.get(randomizer.nextInt(citations.size()));\n\n        TextView textCitation = (TextView) findViewById(R.id.textCitation);\n        textCitation.setText(randomCitation);\n\n    }"} {"seed":"public void getExpress(String token, int page, String filter,final int index){\n        expressView.showLoading(index);\n        expressModel.getExpress(token, page,filter, new OnExpressListener() {\n            @Override\n            public void onSuccess(List<DeliveryDatum> deliveryDatum, int success) {\n                Log.e(TAG,\"onSuccess\");\n                expressView.hideLoading(index);\n                expressView.showData(deliveryDatum);\n                expressView.showToast(\"加载成功\");\n            }\n\n            @Override\n            public void onMsg(String msg, int hint) {\n                Log.e(TAG,\"onMsg\");\n                expressView.hideLoading(index);\n                expressView.showToast(msg);\n            }\n\n            @Override\n            public void onError(Throwable throwable, int error) {\n                Log.e(TAG,\"onError\");\n                expressView.hideLoading(index);\n                expressView.showToast(throwable.getMessage());\n            }\n        }"} {"seed":"@Override\n            public void onSuccess(List<DeliveryDatum> deliveryDatum, int success) {\n                Log.e(TAG,\"onSuccess\");\n                expressView.hideLoading(index);\n                expressView.showData(deliveryDatum);\n                expressView.showToast(\"加载成功\");"} {"seed":"@Override\n            public void onMsg(String msg, int hint) {\n                Log.e(TAG,\"onMsg\");\n                expressView.hideLoading(index);\n                expressView.showToast(msg);"} {"seed":"@Override\n            public void onError(Throwable throwable, int error) {\n                Log.e(TAG,\"onError\");\n                expressView.hideLoading(index);\n                expressView.showToast(throwable.getMessage());"} {"seed":"@Autowired\n\tpublic void setGlobalAccountMapper(GlobalAccountMapper globalAccountMapper){\n\t\tthis.setBaseMapper(globalAccountMapper);\n\t}"} {"seed":"@Override\n\tpublic List<GlobalAccount> find(GlobalAccount globalAccount) {\n\t\treturn globalAccountMapper.find(globalAccount);\n\t}"} {"seed":"@Override\n\tpublic List<GlobalAccount> queryNoChooseglobalAccount(GlobalAccount globalAccount) {\n\t\treturn globalAccountMapper.queryNoChooseglobalAccount(globalAccount);\n\t}"} {"seed":"public IopInfo getInfo() {\n        return info;\n    }"} {"seed":"public void setInfo(IopInfo info) {\n        this.info = info;\n    }"} {"seed":"public String getIop() {\n            return iop;\n        }"} {"seed":"public void setIop(String iop) {\n            this.iop = iop;\n        }"} {"seed":"@Override\n    public RestResponse listNorpricePaging(BasicInfoRequest request) {\n        request.setSort(\"bill\");\n        List<NorpriceResponse> returnResList = norpriceDao.paging(request.toMap())\n                .getData().stream()\n                .map(modelToResponseConverter::modelToResponse)\n                .collect(Collectors.toList());\n        RestResponse restResponse = new RestResponse(true);\n        restResponse.setResult(new Paging(norpriceDao.paging(request.toMap()).getTotal(), returnResList));\n        return restResponse;\n    }"} {"seed":"@Override\n    public RestResponse listNorpriceDelPaging(BasicInfoRequest request) {\n        request.setSort(\"bill\");\n        List<NorpriceDelResponse> returnResList = norpriceDelDao.paging(request.toMap())\n                .getData().stream()\n                .map(modelToResponseConverter::modelToResponse)\n                .collect(Collectors.toList());\n        RestResponse restResponse = new RestResponse(true);\n        restResponse.setResult(new Paging(norpriceDelDao.paging(request.toMap()).getTotal(), returnResList));\n        return restResponse;\n    }"} {"seed":"@Override\n    public RestResponse listMktShopPaging(BasicInfoRequest request) {\n        request.setSort(\"skucode\");\n        List<MktShopResponse> returnResList = mktShopDao.paging(request.toMap())\n                .getData().stream()\n                .map(modelToResponseConverter::modelToResponse)\n                .collect(Collectors.toList());\n        RestResponse restResponse = new RestResponse(true);\n        restResponse.setResult(new Paging(mktShopDao.paging(request.toMap()).getTotal(), returnResList));\n        return restResponse;\n    }"} {"seed":"@Override\n    public RestResponse listMktStockPaging(BasicInfoRequest request) {\n        request.setSort(\"skucode\");\n        List<MktStockResponse> returnResList = mktStockDao.paging(request.toMap())\n                .getData().stream()\n                .map(modelToResponseConverter::modelToResponse)\n                .collect(Collectors.toList());\n        RestResponse restResponse = new RestResponse(true);\n        restResponse.setResult(new Paging(mktStockDao.paging(request.toMap()).getTotal(), returnResList));\n        return restResponse;\n    }"} {"seed":"@Override\n    public RestResponse listRentContactCPaging(BasicInfoRequest request) {\n        request.setSort(\"shopid\");\n        List<RentContactCResponse> returnResList = rentContactCDao.paging(request.toMap())\n                .getData().stream()\n                .map(modelToResponseConverter::modelToResponse)\n                .collect(Collectors.toList());\n        RestResponse restResponse = new RestResponse(true);\n        restResponse.setResult(new Paging(rentContactCDao.paging(request.toMap()).getTotal(), returnResList));\n        return restResponse;\n    }"} {"seed":"@Override\n    public RestResponse listPoscashPaging(BasicInfoRequest request) {\n        request.setSort(\"userid\");\n        List<PoscashResponse> returnResList = poscashDao.paging(request.toMap())\n                .getData().stream()\n                .map(modelToResponseConverter::modelToResponse)\n                .collect(Collectors.toList());\n        RestResponse restResponse = new RestResponse(true);\n        restResponse.setResult(new Paging(poscashDao.paging(request.toMap()).getTotal(), returnResList));\n        return restResponse;\n    }"} {"seed":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n@SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jLabel1 = new javax.swing.JLabel();\n        jLabel2 = new javax.swing.JLabel();\n        selec_edic2 = new javax.swing.JComboBox();\n        jLabel3 = new javax.swing.JLabel();\n        txt_fecha2 = new javax.swing.JTextField();\n        jLabel4 = new javax.swing.JLabel();\n        jLabel5 = new javax.swing.JLabel();\n        selec_mes2 = new javax.swing.JComboBox();\n        jLabel6 = new javax.swing.JLabel();\n        selec_ano = new javax.swing.JComboBox();\n        jLabel7 = new javax.swing.JLabel();\n        txt_cantidad = new javax.swing.JTextField();\n        jLabel8 = new javax.swing.JLabel();\n        selec_falsap2 = new javax.swing.JComboBox();\n        jLabel9 = new javax.swing.JLabel();\n        selec_cliente2 = new javax.swing.JComboBox();\n        jLabel10 = new javax.swing.JLabel();\n        selec_incliente = new javax.swing.JComboBox();\n        jLabel11 = new javax.swing.JLabel();\n        cargar_log4 = new javax.swing.JButton();\n        limpiar_log4 = new javax.swing.JButton();\n        cancelar_log4 = new javax.swing.JButton();\n        jLabel12 = new javax.swing.JLabel();\n        selec_justificacion = new javax.swing.JComboBox();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        txta_obslog4 = new javax.swing.JTextArea();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n        jLabel1.setFont(new java.awt.Font(\"Tahoma\", 0, 24)); // NOI18N\n        jLabel1.setText(\"Salidas\");\n\n        jLabel2.setFont(new java.awt.Font(\"Tahoma\", 1, 12)); // NOI18N\n        jLabel2.setText(\"Edicion\");\n\n        selec_edic2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"-\", \"Proyecciones\", \"Servicios de apoyo empresarial\", \"Líderes\", \"Posgrados\", \"TIC\", \"Compendio financiero\", \"Especial 1\", \"Especial 2\", \"300 empresas platinum\", \"Colombia en construcción\", \"Vademécum\", \"Universidades\", \"Pymes\", \"Minas & energía\", \"Turismo\", \"Comercio\" }));\n\n        jLabel3.setFont(new java.awt.Font(\"Tahoma\", 1, 12)); // NOI18N\n        jLabel3.setText(\"Fecha\");\n\n        jLabel4.setFont(new java.awt.Font(\"Tahoma\", 1, 12)); // NOI18N\n        jLabel4.setText(\"Fecha edicion\");\n\n        jLabel5.setText(\"Mes\");\n\n        selec_mes2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"-\", \"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\" }));\n\n        jLabel6.setText(\"Año\");\n\n        selec_ano.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"-\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\" }));\n\n        jLabel7.setFont(new java.awt.Font(\"Tahoma\", 1, 12)); // NOI18N\n        jLabel7.setText(\"Cantidad\");\n\n        txt_cantidad.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                txt_cantidadActionPerformed(evt);\n            }\n        });\n        txt_cantidad.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyTyped(java.awt.event.KeyEvent evt) {\n                txt_cantidadKeyTyped(evt);\n            }\n        });\n\n        jLabel8.setFont(new java.awt.Font(\"Tahoma\", 1, 12)); // NOI18N\n        jLabel8.setText(\"Falsa portada\");\n\n        selec_falsap2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"-\", \"Si\", \"No\" }));\n\n        jLabel9.setFont(new java.awt.Font(\"Tahoma\", 1, 12)); // NOI18N\n        jLabel9.setText(\"Cliente\");\n\n        selec_cliente2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"<EXTERNO>\", \"AIR FRANCE\", \"BELIZARIO \", \"COLSANITAS\", \"COMPENSAR \", \"ENVIA\", \"ITS COMUNICACIONES\", \"KCP\", \"LEGRAND\", \"LIBRERÍA NACIONAL \", \"LUFTHANSA\", \"MONCADA ABOGADOS\", \"MUNDO BIZ\", \"PORSCHE\", \"PWC\", \"SEGURIDAD ATLAS\", \"SIMPLE\", \"SINTEC\", \"TCC\", \"TEAM FOOD\", \"UNIVERSAL TRAVEL ASSISTANCE S.A.S\", \"UNIVERSIDAD  LOS LIBERTADORES\", \"UNIVERSIDAD DE LOS ANDES \" }));\n\n        jLabel10.setFont(new java.awt.Font(\"Tahoma\", 1, 11)); // NOI18N\n        jLabel10.setText(\"<>\");\n\n        selec_incliente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"<INTERNO>\", \"ADMINISTRACION \", \"DIAGRAMACION \", \"EDITORIAL \", \"FABIO RINCON \", \"HECTOR NAVARRO \", \"INVESTIGACION \", \"JEANNETH BERNAL \", \"KAREN RUBIANO \", \"LILIANA SIERRA \", \"LOGISTICA \", \"PRODUCCION \", \"SUSCRIPCIONES \" }));\n\n        jLabel11.setFont(new java.awt.Font(\"Tahoma\", 1, 12)); // NOI18N\n        jLabel11.setText(\"Observaciones\");\n\n        cargar_log4.setText(\"Cargar\");\n\n        limpiar_log4.setText(\"Limpiar\");\n        limpiar_log4.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                limpiar_log4ActionPerformed(evt);\n            }\n        });\n\n        cancelar_log4.setText(\"Cancelar\");\n        cancelar_log4.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cancelar_log4ActionPerformed(evt);\n            }\n        });\n\n        jLabel12.setFont(new java.awt.Font(\"Tahoma\", 1, 12)); // NOI18N\n        jLabel12.setText(\"Justificacion\");\n\n        selec_justificacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"-\", \"ARCHIVO HISTORICO \", \"CORTESIA\", \"DEPOSITO LEGAL \", \"EVENTOS \", \"OPERACIÓN SUSCRIPCION \", \"SUSCRIPCIONES \" }));\n        selec_justificacion.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                selec_justificacionActionPerformed(evt);\n            }\n        });\n\n        txta_obslog4.setColumns(20);\n        txta_obslog4.setRows(6);\n        jScrollPane1.setViewportView(txta_obslog4);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addContainerGap()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                            .addGroup(layout.createSequentialGroup()\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                                    .addGroup(layout.createSequentialGroup()\n                                        .addComponent(jLabel7)\n                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                        .addComponent(txt_cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                        .addGap(18, 18, 18)\n                                        .addComponent(jLabel8)\n                                        .addGap(18, 18, 18))\n                                    .addGroup(layout.createSequentialGroup()\n                                        .addComponent(jLabel9)\n                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                        .addComponent(selec_cliente2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                                        .addGap(6, 6, 6)))\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addGroup(layout.createSequentialGroup()\n                                        .addGap(14, 14, 14)\n                                        .addComponent(selec_falsap2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))\n                                    .addGroup(layout.createSequentialGroup()\n                                        .addComponent(jLabel10)\n                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                        .addComponent(selec_incliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))\n                            .addComponent(jLabel11)\n                            .addGroup(layout.createSequentialGroup()\n                                .addComponent(jLabel12)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addComponent(selec_justificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))\n                            .addGroup(layout.createSequentialGroup()\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                                    .addComponent(jLabel1)\n                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n                                            .addComponent(jLabel4)\n                                            .addGap(18, 18, 18)\n                                            .addComponent(jLabel5)\n                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                            .addComponent(selec_mes2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n                                            .addComponent(jLabel2)\n                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                            .addComponent(selec_edic2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                            .addGap(18, 18, 18)\n                                            .addComponent(jLabel3))))\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addComponent(txt_fecha2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                    .addGroup(layout.createSequentialGroup()\n                                        .addComponent(jLabel6)\n                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                        .addComponent(selec_ano, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))))\n                            .addComponent(jScrollPane1)))\n                    .addGroup(layout.createSequentialGroup()\n                        .addGap(28, 28, 28)\n                        .addComponent(cargar_log4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addGap(44, 44, 44)\n                        .addComponent(limpiar_log4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addGap(41, 41, 41)\n                        .addComponent(cancelar_log4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                .addContainerGap(20, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(18, 18, 18)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(jLabel2)\n                    .addComponent(selec_edic2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(jLabel3)\n                    .addComponent(txt_fecha2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(18, 18, 18)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(jLabel4)\n                    .addComponent(jLabel5)\n                    .addComponent(selec_mes2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(jLabel6)\n                    .addComponent(selec_ano, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(18, 18, 18)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(jLabel7)\n                    .addComponent(txt_cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(jLabel8)\n                    .addComponent(selec_falsap2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(18, 18, 18)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(jLabel9)\n                    .addComponent(selec_cliente2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(jLabel10)\n                    .addComponent(selec_incliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(18, 18, 18)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(jLabel12)\n                    .addComponent(selec_justificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(jLabel11)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(cargar_log4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(limpiar_log4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(cancelar_log4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addContainerGap(23, Short.MAX_VALUE))\n        );\n\n        pack()"} {"seed":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\ns\n\n    private void limpiar_log4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiar_log4ActionPerformed\n        // TODO add your handling code here"} {"seed":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\nd\n\n    private void txt_cantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_cantidadActionPerformed\n        // TODO add your handling code here"} {"seed":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\nd\n\n    private void cancelar_log4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelar_log4ActionPerformed\n        logistica_2 obj=new logistica_2();//me lleva a la ventana que quiero al dar clic en el boton y cierra la ventana\n        obj.setVisible(true);\n        dispose()"} {"seed":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\nd\n\n    private void selec_justificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selec_justificacionActionPerformed\n        // TODO add your handling code here"} {"seed":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\nd\n\n    private void txt_cantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_cantidadKeyTyped\n        char c;\n        c = evt.getKeyChar();//no permite letras\n        if(c<'0' || c>'9') evt.consume()"} {"seed":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n*/\n    public static void main(String args[]) {\n        /* Set the Nimbus look and feel */\n        //<editor-fold defaultstate=\"collapsed\" desc=\" Look and feel setting code (optional) \">\n        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.\n         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html \n         */\n        try {\n            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\n                if (\"Nimbus\".equals(info.getName())) {\n                    javax.swing.UIManager.setLookAndFeel(info.getClassName());\n                    break;\n                }\n            }\n        } catch (ClassNotFoundException ex) {\n            java.util.logging.Logger.getLogger(logistica_4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (InstantiationException ex) {\n            java.util.logging.Logger.getLogger(logistica_4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (IllegalAccessException ex) {\n            java.util.logging.Logger.getLogger(logistica_4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (javax.swing.UnsupportedLookAndFeelException ex) {\n            java.util.logging.Logger.getLogger(logistica_4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        }\n        //</editor-fold>\n\n        /* Create and display the form */\n        java.awt.EventQueue.invokeLater(new Runnable() {\n            public void run() {\n                new logistica_4().setVisible(true);\n            }\n        })"} {"seed":"public void actionPerformed(java.awt.event.ActionEvent evt) {\n                txt_cantidadActionPerformed(evt);"} {"seed":"public void keyTyped(java.awt.event.KeyEvent evt) {\n                txt_cantidadKeyTyped(evt);"} {"seed":"public void actionPerformed(java.awt.event.ActionEvent evt) {\n                limpiar_log4ActionPerformed(evt);"} {"seed":"public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cancelar_log4ActionPerformed(evt);"} {"seed":"public void actionPerformed(java.awt.event.ActionEvent evt) {\n                selec_justificacionActionPerformed(evt);"} {"seed":"public void run() {\n                new logistica_4().setVisible(true);"} {"seed":"@date: 2015-10-21 下午8:26:25\n * @version V1.0\n */\npublic class PrintClassProperty {\n\tpublic static void printProerty(Object o) {\n\t\tField[] fields = o.getClass().getDeclaredFields();\n\t\tSystem.out.println(o.getClass().getName()\n\t\t\t\t+ \":------------------------------------------\");\n\t\tfor (int i = 0; i < fields.length; i++) {\n\t\t\tif (\"serialVersionUID\".equals(fields[i].getName())) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tSystem.out.println(String.format(\"%s:"} {"seed":"getFieldValueByName(fields[i].getName(), o)));\n\t\t}\n\t}\n\n\t/**\n\t * 根据属性名获取属性值\n\t * */\n\tprivate static Object getFieldValueByName(String fieldName, Object o) {\n\t\ttry {\n\t\t\tString firstLetter = fieldName.substring(0, 1).toUpperCase();\n\t\t\tString getter = \"get\" + firstLetter + fieldName.substring(1);\n\t\t\tMethod method = o.getClass().getMethod(getter, new Class[] {});\n\t\t\tObject value = method.invoke(o,"} {"seed":"public static void main(String[] args) {\n\t\ttry {\n\t\t\tRegistry registry = LocateRegistry.getRegistry(1099);\n\t\t\tIRemote remoteService = (IRemote) registry.lookup(\"calc\");\n\t\t\tint addRet = remoteService.add(5,8);\n\t\t\tSystem.out.println(\"接口服务返回\"+addRet);\n\t\t\t\n\t\t\tint subRet = remoteService.sub(15,8);\n\t\t\tSystem.out.println(\"接口服务返回\"+subRet);\n\t\t\t\n\t\t\t\n\t\t} catch (RemoteException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (NotBoundException e) {\n\t\t\te.p"} {"seed":"@Override\n  @CallSuper\n  public void unbind() {\n    FeatureLinearHolder.PlaylistMiniAdapter target = this.target;\n    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n    this.target = null;\n\n    target.mHeaderPanel = null;\n    target.mTitle = null;\n    target.mRecyclerView = null;\n    target.mCount = null;\n\n    view7f0a0082.setOnClickListener(null);\n    view7f0a0082 = null;\n  }"} {"seed":"@Override\n      public void doClick(View p0) {\n        target.goToPlaylistChildTab();\n      }"} {"seed":"public Long getSvrId() {\n    return svrId;\n  }"} {"seed":"public void setSvrId(Long svrId) {\n    this.svrId = svrId;\n  }"} {"seed":"public String getSvrType() {\n    return svrType;\n  }"} {"seed":"public void setSvrType(String svrType) {\n    this.svrType = svrType;\n  }"} {"seed":"public String getSvrTitle() {\n    return svrTitle;\n  }"} {"seed":"public void setSvrTitle(String svrTitle) {\n    this.svrTitle = svrTitle;\n  }"} {"seed":"public String getSvrCustNo() {\n    return svrCustNo;\n  }"} {"seed":"public void setSvrCustNo(String svrCustNo) {\n    this.svrCustNo = svrCustNo;\n  }"} {"seed":"public String getSvrCustName() {\n    return svrCustName;\n  }"} {"seed":"public void setSvrCustName(String svrCustName) {\n    this.svrCustName = svrCustName;\n  }"} {"seed":"public String getSvrStatus() {\n    return svrStatus;\n  }"} {"seed":"public void setSvrStatus(String svrStatus) {\n    this.svrStatus = svrStatus;\n  }"} {"seed":"public String getSvrRequest() {\n    return svrRequest;\n  }"} {"seed":"public void setSvrRequest(String svrRequest) {\n    this.svrRequest = svrRequest;\n  }"} {"seed":"public Long getSvrCreateId() {\n    return svrCreateId;\n  }"} {"seed":"public void setSvrCreateId(Long svrCreateId) {\n    this.svrCreateId = svrCreateId;\n  }"} {"seed":"public String getSvrCreateBy() {\n    return svrCreateBy;\n  }"} {"seed":"public void setSvrCreateBy(String svrCreateBy) {\n    this.svrCreateBy = svrCreateBy;\n  }"} {"seed":"public Date getSvrCreateDate() {\n    return svrCreateDate;\n  }"} {"seed":"public void setSvrCreateDate(Date svrCreateDate) {\n    this.svrCreateDate = svrCreateDate;\n  }"} {"seed":"public Long getSvrDueId() {\n    return svrDueId;\n  }"} {"seed":"public void setSvrDueId(Long svrDueId) {\n    this.svrDueId = svrDueId;\n  }"} {"seed":"public String getSvrDueTo() {\n    return svrDueTo;\n  }"} {"seed":"public void setSvrDueTo(String svrDueTo) {\n    this.svrDueTo = svrDueTo;\n  }"} {"seed":"public Date getSvrDueDate() {\n    return svrDueDate;\n  }"} {"seed":"public void setSvrDueDate(Date svrDueDate) {\n    this.svrDueDate = svrDueDate;\n  }"} {"seed":"public String getSvrDeal() {\n    return svrDeal;\n  }"} {"seed":"public void setSvrDeal(String svrDeal) {\n    this.svrDeal = svrDeal;\n  }"} {"seed":"public Long getSvrDealId() {\n    return svrDealId;\n  }"} {"seed":"public void setSvrDealId(Long svrDealId) {\n    this.svrDealId = svrDealId;\n  }"} {"seed":"public String getSvrDealBy() {\n    return svrDealBy;\n  }"} {"seed":"public void setSvrDealBy(String svrDealBy) {\n    this.svrDealBy = svrDealBy;\n  }"} {"seed":"public Date getSvrDealDate() {\n    return svrDealDate;\n  }"} {"seed":"public void setSvrDealDate(Date svrDealDate) {\n    this.svrDealDate = svrDealDate;\n  }"} {"seed":"public String getSvrResult() {\n    return svrResult;\n  }"} {"seed":"public void setSvrResult(String svrResult) {\n    this.svrResult = svrResult;\n  }"} {"seed":"public Long getSvrSatisfy() {\n    return svrSatisfy;\n  }"} {"seed":"public void setSvrSatisfy(Long svrSatisfy) {\n    this.svrSatisfy = svrSatisfy;\n  }"} {"seed":"protected AssetDataReader getAssetDataReader() {\n    return new AssetDataParamReader(getDelegate().getParameters(), myAssetInitializerService);\n  }"} {"seed":"@Before\n\tpublic void initialize() {\n\t\tmatters = new SubjectsImpl();\n\t\tMatter m = new MatterImpl(\"Matter test 1\", \n\t\t\t\t\"http://www.weso.es/testOntology#Person\", \n\t\t\t\t\"Descripcion for test\");\n\t\tmatters.addMatter(m);\n\t\tm = new MatterImpl(\"Matter test 2\", \n\t\t\t\t\"http://www.weso.es/testOntology#Thing\", \n\t\t\t\t\"Descripcion for test\");\n\t\tmatters.addMatter(m);\n\t\tm = new MatterImpl(\"Matter test 3\", \n\t\t\t\t\"http://www.weso.es/testOntology#Matter\", \n\t\t\t\t\"Descripcion for test\");\n\t\tmatters.addMatter(m);\n\t\tm = new MatterImpl(\"Matter test 4\", \n\t\t\t\t\"http://www.weso.es/testOntology#Place\", \n\t\t\t\t\"Descripcion for test\");\n\t\tmatters.addMatter(m);\n\t}"} {"seed":"@Test\n\tpublic void testIterator() {\n\t\tIterator<Matter> iterator = matters.iterator();\n\t\tassertNotNull(iterator);\n\t}"} {"seed":"@Test\n\tpublic void testSize() {\n\t\tassertEquals(4, matters.size());\n\t\tMatter m = new MatterImpl(\"Label test\", \n\t\t\t\t\"http://www.weso.es/testOntology#Matter\", \n\t\t\t\t\"Descripcion for test\");\n\t\tmatters.addMatter(m);\n\t\tassertEquals(5, matters.size());\n\t\tIterator<Matter> iterator = matters.iterator();\n\t\titerator.next();\n\t\titerator.remove();\n\t\tassertEquals(4, matters.size());\n\t}"} {"seed":"@Test(expected=IllegalArgumentException.class)\n\tpublic void testAddMatter() {\n\t\tMatter m = new MatterImpl(\"Label 1\", \n\t\t\t\t\"http://www.weso.es/testOntology#Matter\", \n\t\t\t\t\"Descripcion for test\");\n\t\tmatters.addMatter(m);\n\t\tassertEquals(5, matters.size());\n\t\tm = new MatterImpl(\"Label 2\", \n\t\t\t\t\"http://www.weso.es/testOntology#Matter\", \n\t\t\t\t\"Descripcion for test\");\n\t\tmatters.addMatter(m);\n\t\tassertEquals(6, matters.size());\n\t\tmatters.addMatter(null);\n\t}"} {"seed":"@Test\n\tpublic void testFindMatterExpected() throws WesearchException {\n\t\tMatter expected = new MatterImpl(\"Matter test 3\", \n\t\t\t\t\"http://www.weso.es/testOntology#Matter\", \n\t\t\t\t\"Descripcion for test\");\n\t\tMatter actual = null;\n\t\tactual = matters.findMatter(\"Matter test 3\");\n\t\tassertTrue(actual.equals(expected));\t\t\n\t}"} {"seed":"@Test\n\tpublic void testFindMatterIncorrectUnexpected() throws WesearchException {\n\t\tMatter unexpected = new MatterImpl(\"Matter test\", \n\t\t\t\t\"http://www.weso.es/testOntology#MatterTest\", \n\t\t\t\t\"Descripcion for test\");\n\t\tMatter actual = null;\n\t\tactual = matters.findMatter(\"Matter test 1\");\n\t\tassertFalse(actual.equals(unexpected));\n\t}"} {"seed":"@Test(expected=WesearchException.class)\n\tpublic void testFindMatterNonExistent() throws WesearchException {\n\t\tmatters.findMatter(\"Matter test 5\");\n\t}"} {"seed":"@Override\n\tprotected void execute() {\n    { // Blue Segments\n//      seqL(new OakSpeechBlue());\n//      saveL(\"OakSpeechBlue2\");\n//      loadL(\"OakSpeechBlue2\");\n//      seqL(new ChooseStarterBlue());\n//      saveL(\"ChooseStarterBlue2\");\n//      loadL(\"ChooseStarterBlue2\"); // fcff\n//      seqL(new Rival1FightBlue());\n//      saveL(\"Rival1FightBlue2\");\n//      loadL(\"Rival1FightBlue2\");\n//      seqL(new OaksParcel());\n//      saveL(\"OaksParcel2b\");\n//      loadL(\"OaksParcel2b\");\n//      seqL(new ViridianForestBlue());\n//      saveL(\"ViridianForestBlue2\");\n//      loadL(\"ViridianForestBlue2\");\n//      seqL(new PewterBlue());\n//      saveL(\"PewterBlue2\");\n//      loadL(\"PewterBlue2\");\n//      seqL(new Route3Blue());\n//      saveL(\"Route3Blue2a\");\n//      loadL(\"Route3Blue2a\");\n//      seqL(new MtMoonBlue());\n////      saveL(\"MtMoonBlue2a\");\n//      loadL(\"MtMoonBlue2a\");\n//      seqL(new NuggetBridgeBlue());\n//      saveL(\"NuggetBridgeBlue2\");\n//      loadL(\"NuggetBridgeBlue2\");\n//      seqL(new SurgeBlue());\n//      saveL(\"SurgeBlue2a\");\n//      loadL(\"SurgeBlue2a\");\n//      seqL(new PrepareEeveeTradeBlue());\n//      saveL(\"PrepareEeveeTradeBlue2a\");\n//      loadL(\"PrepareEeveeTradeBlue2a\");\n    }\n    { // Red Segments\n//      seqR(new OakSpeechDummyRed());\n//      saveR(\"OakSpeechDummyRed2\");\n//      loadR(\"OakSpeechDummyRed2\");\n//      seqR(new ChooseStarterDummyRed());\n//      saveR(\"ChooseStarterDummyRed2\");\n//      loadR(\"ChooseStarterDummyRed2\"); // e0df\n//      seqR(new Rival1FightDummyRed());\n//      saveR(\"Rival1FightDummyRed2a\");\n//      loadR(\"Rival1FightDummyRed2a\");\n//      seqR(new OaksParcel());\n//      saveR(\"OaksParcelDummyRed2a\");\n//      loadR(\"OaksParcelDummyRed2a\");\n//      seqR(new ViridianForestDummyRed());\n//      saveR(\"ViridianForestDummyRed2\");\n//      loadR(\"ViridianForestDummyRed2\");\n//      seqR(new PewterDummyRed());\n//      saveR(\"PewterDummyRed2a\");\n//      loadR(\"PewterDummyRed2a\");\n//      seqR(new Route3DummyRed());\n//      saveR(\"Route3DummyRed2a\");\n//      loadR(\"Route3DummyRed2a\");\n//      seqR(new MtMoonDummyRed());\n//      saveR(\"MtMoonDummyRed2\");\n//      loadR(\"MtMoonDummyRed2\");\n//      seqR(new NuggetBridgeDummyRed());\n//      saveR(\"NuggetBridgeDummyRed2a\");\n//      loadR(\"NuggetBridgeDummyRed2a\");\n//      seqR(new SurgeDummyRed());\n//      saveR(\"SurgeDummyRed2\");\n//      loadR(\"SurgeDummyRed2\");\n//      seqR(new RockTunnelDummyRed());\n//      saveR(\"RockTunnelDummyRed2\");\n//      loadR(\"RockTunnelDummyRed2\");\n//      seqR(new PrepareEeveeTradeDummyRed());\n//      saveR(\"PrepareEeveeTradeDummyRed2\");\n//      loadR(\"PrepareEeveeTradeDummyRed2\");\n    }\n//    seqDualInputs(\n//        new DualGbHelper.InputBuilder()\n//            .withButton(A, 0) // talk to cable club\n//            .withButton(B, 43) // welcome ; please apply\n//            .withButton(B, 31) // before, we have to\n//            .withButton(A, 18) // save the game\n//            .withButton(A, 40) // save, where do you want to go (trade center)\n//            .withButton(LEFT, 34) // just a moment; face table\n//            .withButton(A, 1) // use table\n//            .withButton(A, 15) // just a moment; select Beedrill\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 28) // x and y will\n//            .withButton(A, 10) // be traded\n//            .withButton(A, 1) // select Caterpie\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 24) // x and y will\n//            .withButton(A, 11) // be traded\n//            .reset(0)\n////            .lookAndSee()\n//            .build(),\n//        new DualGbHelper.InputBuilder()\n//            .withButton(A, 0) // talk to cable club\n//            .withButton(B, 44) // welcome ; please apply\n//            .withButton(B, 31) // before, we have to\n//            .withButton(A, 18) // save the game\n//            .withButton(0, 39) // save, where do you want to go (trade center by L)\n//            .withButton(RIGHT, 35) // just a moment; face table\n//            .withButton(A, 1) // use table\n//            .withButton(A, 15) // just a moment; select charmander\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 28) // x and y will\n//            .withButton(A, 10) // be traded\n//            .withButton(A, 2) // select eevee\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 24) // x and y will\n//            .withButton(A, 11) // be traded\n//            .reset(0)\n////            .lookAndSee()\n//            .build());\n    { // Blue Segments\n//      saveL(\"PostEeveeTradeBlue2\");\n//      loadL(\"PostEeveeTradeBlue2\");\n//      seqL(new PreRockTunnelBlue());\n//      saveL(\"PreRockTunnelBlue2\");\n//      loadL(\"PreRockTunnelBlue2\");\n    }\n    { // Red Segments\n//      saveR(\"PostEeveeTradeRed2\");\n//      loadR(\"PostEeveeTradeRed2\");\n//      seqR(new OakSpeechRed());\n//      saveR(\"OakSpeechRed2\");\n//      loadR(\"OakSpeechRed2\");\n//      seqR(new ChooseSecondStarterRed());\n//      saveR(\"ChooseSecondStarterRed2\");\n//      loadR(\"ChooseSecondStarterRed2\");\n//      seqR(new Rival1FightAgainRed());\n//      saveR(\"Rival1FightAgainRed2a\");\n//      loadR(\"Rival1FightAgainRed2\");\n//      seqR(new OaksParcel());\n//      saveR(\"OaksParcel2a\");\n//      loadR(\"OaksParcel2a\");\n//      seqR(new PrepareBulbasaurTradeRed());\n//      saveR(\"PrepareBulbasaurTradeRed2a\");\n//      loadR(\"PrepareBulbasaurTradeRed2a\");\n    }\n//    seqDualInputs(\n//        new DualGbHelper.InputBuilder()\n//            .withButton(A, 0) // talk to cable club\n//            .withButton(B, 40) // welcome ; please apply\n//            .withButton(B, 30) // before, we have to\n//            .withButton(A, 16) // save the game\n//            .withButton(A, 34) // save, where do you want to go (trade center)\n//            .withButton(RIGHT, 28) // just a moment; face table\n//            .withButton(A, 0) // use table\n//            .withButton(DOWN, 14) // just a moment; select Charmander\n//            .withButton(DOWN, 1) // just a moment; select Charmander\n//            .withButton(DOWN, 1) // just a moment; select Charmander\n//            .withButton(DOWN | A, 1) // just a moment; select Charmander\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 27) // x and y will\n//            .withButton(A, 10) // be traded\n//            .reset(0)\n////            .lookAndSee()\n//            .build(),\n//        new DualGbHelper.InputBuilder()\n//            .withButton(A, 0) // talk to cable club\n//            .withButton(B, 43) // welcome ; please apply\n//            .withButton(B, 31) // before, we have to\n//            .withButton(A, 18) // save the game\n//            .withButton(0, 34) // save, where do you want to go (trade center by L)\n//            .withButton(LEFT, 36) // just a moment; face table\n//            .withButton(A, 0) // use table\n//            .withButton(A, 15) // just a moment; select Bulbasaur\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 29) // x and y will\n//            .withButton(A, 11) // be traded\n//            .reset(0)\n////            .lookAndSee()\n//            .build());\n    { // Blue Segments\n//      saveL(\"PostBulbasaurTradeBlue2a\");\n//      loadL(\"PostBulbasaurTradeBlue2a\");\n//      seqL(new RockTunnelBlue());\n//      saveL(\"RockTunnelBlue2\");\n//      loadL(\"RockTunnelBlue2\");\n//      seqL(new CeladonBlue());\n//      saveL(\"CeladonBlue3\");\n//      loadL(\"CeladonBlue3\");\n    }\n    { // Red Segments\n//      saveR(\"PostBulbasaurTradeRed2\");\n//      loadR(\"PostBulbasaurTradeRed2\");\n//      seqR(new ViridianForestRed());\n//      saveR(\"ViridianForestRed2\");\n//      loadR(\"ViridianForestRed2\");\n//      seqR(new PewterRed());\n//      saveR(\"PewterRed2\");\n//      loadR(\"PewterRed2\");\n//      seqR(new Route3Red());\n//      saveR(\"Route3Red2\");\n//      loadR(\"Route3Red2\");\n//      seqR(new MtMoonRed());\n//      saveR(\"MtMoonRed2\");\n//      loadR(\"MtMoonRed2\");\n//      seqR(new CeruleanRed());\n//      saveR(\"CeruleanRed2\");\n//      loadR(\"CeruleanRed2\");\n    }\n//    seqDualInputs(\n//        new DualGbHelper.InputBuilder()\n//            .withButton(A, 0) // talk to cable club\n//            .withButton(B, 44) // welcome ; please apply\n//            .withButton(B, 32) // before, we have to\n//            .withButton(A, 17) // save the game\n//            .withButton(A, 40) // save, where do you want to go (trade center)\n//            .withButton(RIGHT, 31) // just a moment; face table\n//            .withButton(A, 1) // use table\n//            .withButton(DOWN | A, 16) // just a moment; select Abra\n//            .withButton(RIGHT, 1) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(DOWN | A, 1) // just a moment; select Farfetch'd\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(DOWN, 0) // just a moment; select Meowth\n//            .withButton(DOWN, 1) // just a moment; select Meowth\n//            .withButton(DOWN | A, 1) // just a moment; select Meowth\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 20) // x and y will\n//            .withButton(A, 11) // be traded\n//            .reset(0)\n////            .lookAndSee()\n//            .build(),\n//        new DualGbHelper.InputBuilder()\n//            .withButton(A, 0) // talk to cable club\n//            .withButton(B, 43) // welcome ; please apply\n//            .withButton(B, 31) // before, we have to\n//            .withButton(A, 18) // save the game\n//            .withButton(0, 40) // save, where do you want to go (trade center by L)\n//            .withButton(LEFT, 29) // just a moment; face table\n//            .withButton(A, 0) // use table\n//            .withButton(DOWN | A, 15) // just a moment; select Pikachu\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 27) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(DOWN, 0) // just a moment; select Pidgey\n//            .withButton(DOWN | A, 1) // just a moment; select Pidgey\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(DOWN, 0) // just a moment; select Ekans\n//            .withButton(DOWN | A, 1) // just a moment; select Ekans\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 20) // x and y will\n//            .withButton(A, 11) // be traded\n//            .reset(0)\n////            .lookAndSee()\n//            .build());\n    { // Blue Segments\n//      saveL(\"PostAbraTradeBlue3\");\n//      loadL(\"PostAbraTradeBlue3\");\n//      seqL(new TowerBlue());\n//      saveL(\"TowerBlue2\");\n//      loadL(\"TowerBlue2\");\n//      seqL(new PrepareSquirtleTradeBlue());\n//      saveL(\"PrepareSquirtleTradeBlue2a\");\n//      loadL(\"PrepareSquirtleTradeBlue2a\");\n    }\n    { // Red Segments\n//      saveR(\"PostAbraTradeRed3\");\n//      loadR(\"PostAbraTradeRed3\");\n//      seqR(new SurgeRed());\n//      saveR(\"SurgeRed3\");\n//      loadR(\"SurgeRed3\");\n//      seqR(new RockTunnelRed());\n//      saveR(\"RockTunnelRed3\");\n//      loadR(\"RockTunnelRed3\");\n//      seqR(new PrepareSquirtleTradeRed());\n//      saveR(\"PrepareSquirtleTradeRed3\");\n//      loadR(\"PrepareSquirtleTradeRed3\"); // 2a\n    }\n//    seqDualInputs(\n//        new DualGbHelper.InputBuilder()\n//            .withButton(A, 0) // talk to cable club\n//            .withButton(B, 44) // welcome ; please apply\n//            .withButton(B, 31) // before, we have to\n//            .withButton(A, 17) // save the game\n//            .withButton(A, 40) // save, where do you want to go (trade center)\n//            .withButton(RIGHT, 30) // just a moment; face table\n//            .withButton(A, 0) // use table\n//            .withButton(DOWN, 15) // just a moment; select Squirtle\n//            .withButton(DOWN | A, 1) // just a moment; select Squirtle\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 25) // x and y will\n//            .withButton(A, 10) // be traded\n//            .withButton(DOWN, 0) // just a moment; select Bellsprout\n//            .withButton(DOWN, 1) // just a moment; select Bellsprout\n//            .withButton(DOWN | A, 1) // just a moment; select Bellsprout\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 10) // be traded\n//            .withButton(DOWN, 0) // just a moment; select Flareon\n//            .withButton(DOWN, 1) // just a moment; select Flareon\n//            .withButton(DOWN | A, 1) // just a moment; select Flareon\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 25) // x and y will\n//            .withButton(A, 10) // be traded\n//            .reset(0)\n////            .lookAndSee()\n//            .build(),\n//        new DualGbHelper.InputBuilder()\n//            .withButton(A, 0) // talk to cable club\n//            .withButton(B, 42) // welcome ; please apply\n//            .withButton(B, 30) // before, we have to\n//            .withButton(A, 16) // save the game\n//            .withButton(0, 40) // save, where do you want to go (trade center by L)\n//            .withButton(LEFT, 23) // just a moment; face table\n//            .withButton(A, 0) // use table\n//            .withButton(DOWN, 15) // just a moment; select Mr. Mime\n//            .withButton(DOWN | A, 1) // just a moment; select Mr. Mime\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 1) // select trade\n//            .withButton(B, 23) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(DOWN, 0) // just a moment; select Mankey\n//            .withButton(DOWN | A, 1) // just a moment; select Mankey\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 24) // x and y will\n//            .withButton(A, 10) // be traded\n//            .withButton(DOWN, 0) // just a moment; select Growlithe\n//            .withButton(DOWN | A, 1) // just a moment; select Growlithe\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 25) // x and y will\n//            .withButton(A, 10) // be traded\n//            .reset(0)\n//            .build());\n    { // Blue Segments\n//      saveL(\"PostSquirtleTradeBlue2\");\n//      loadL(\"PostSquirtleTradeBlue2\");\n//      seqL(new SafariBlue());\n//      saveL(\"SafariBlue2\");\n//      loadL(\"SafariBlue2\");\n//      seqL(new CinnabarBlue());\n//      saveL(\"CinnabarBlue2\");\n//      loadL(\"CinnabarBlue2\");\n    }\n    { // Red Segments\n//      saveR(\"PostSquirtleTradeRed2\");\n//      loadR(\"PostSquirtleTradeRed2\");\n//      seqR(new RocketHideoutRed());\n//      saveR(\"RocketHideoutRed2\");\n//      loadR(\"RocketHideoutRed2\");\n//      seqR(new TowerRed());\n//      saveR(\"TowerRed2\");\n//      loadR(\"TowerRed2\");\n//      seqR(new CyclingRoadRed());\n//      saveR(\"CyclingRoadRed2\");\n//      loadR(\"CyclingRoadRed2\");\n    }\n//    seqDualInputs(\n//        new DualGbHelper.InputBuilder()\n//            .withButton(A, 0) // talk to cable club\n//            .withButton(B, 44) // welcome ; please apply\n//            .withButton(B, 31) // before, we have to\n//            .withButton(A, 17) // save the game\n//            .withButton(A, 39) // save, where do you want to go (trade center)\n//            .withButton(LEFT, 30) // just a moment; face table\n//            .withButton(A, 0) // use table\n//            .withButton(A, 15) // just a moment; select Vulpix\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 10) // be traded\n//            .withButton(A, 1) // just a moment; select Sandshrew\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 23) // x and y will\n//            .withButton(A, 10) // be traded\n//            .withButton(A, 1) // just a moment; select Magmar\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 24) // x and y will\n//            .withButton(A, 10) // be traded\n//            .withButton(A, 1) // just a moment; select Omanyte\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 23) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 1) // just a moment; select Pinsir\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 21) // x and y will\n//            .withButton(A, 11) // be traded\n//            .reset(0)\n////            .lookAndSee()\n//            .build(),\n//        new DualGbHelper.InputBuilder()\n//            .withButton(A, 0) // talk to cable club\n//            .withButton(B, 45) // welcome ; please apply\n//            .withButton(B, 31) // before, we have to\n//            .withButton(A, 17) // save the game\n//            .withButton(0, 40) // save, where do you want to go (trade center by L)\n//            .withButton(RIGHT, 31) // just a moment; face table\n//            .withButton(A, 0) // use table\n//            .withButton(A, 15) // just a moment; select Charmeleon\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 25) // x and y will\n//            .withButton(A, 10) // be traded\n//            .withButton(A, 1) // just a moment; select Persian\n//            .withButton(RIGHT, 1) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 25) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(DOWN | A, 1) // just a moment; select Wartortle\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 24) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(DOWN | A, 1) // just a moment; select Cubone\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 22) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(DOWN | A, 1) // just a moment; select Oddish\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 20) // x and y will\n//            .withButton(A, 10) // be traded\n//            .reset(0)\n//            .build());\n    { // Blue Segments\n//      saveL(\"PostOmanyteTradeBlue2\");\n//      loadL(\"PostOmanyteTradeBlue2\");\n//      seqL(new SilphCoBlue());\n//      saveL(\"SilphCoBlue3\");\n//      loadL(\"SilphCoBlue3\");\n//      seqL(new VictoryRoadBlue());\n//      saveL(\"VictoryRoadBlue3\");\n//      loadL(\"VictoryRoadBlue3\");\n//      seqL(new SeafoamBlue());\n//      saveL(\"SeafoamBlue3\");\n//      loadL(\"SeafoamBlue3\");\n//      seqL(new CeruleanCaveBlue());\n//      saveL(\"CeruleanCaveBlue3\");\n//      loadL(\"CeruleanCaveBlue3\");\n//      seqL(new PorygonBlue());\n//      saveL(\"PorygonBlue3\");\n//      loadL(\"PorygonBlue3\");\n    }\n    { // Red Segments\n//      saveR(\"PostOmanyteTradeRed2\");\n//      loadR(\"PostOmanyteTradeRed2\");\n//      seqR(new SafariRed());\n//      saveR(\"SafariRed3\");\n//      loadR(\"SafariRed3\");\n//      seqR(new CinnabarRed());\n//      saveR(\"CinnabarRed3\");\n//      loadR(\"CinnabarRed3\");\n//      seqR(new SilphCoRed());\n//      saveR(\"SilphCoRed3\");\n//      loadR(\"SilphCoRed3\");\n//      seqR(new SeafoamRed());\n//      saveR(\"SeafoamRed3\");\n//      loadR(\"SeafoamRed3\");\n//      seqR(new PowerplantRed());\n//      saveR(\"PowerplantRed3\");\n//      loadR(\"PowerplantRed3\");\n//      seqR(new VictoryRoadRed());\n//      saveR(\"VictoryRoadRed3\");\n//      loadR(\"VictoryRoadRed3\");\n//      seqR(new LickitungRed());\n//      saveR(\"LickitungRed3\");\n//      loadR(\"LickitungRed3\");\n    }\n//    seqDualInputs(\n//        new DualGbHelper.InputBuilder()\n//            .withButton(A, 0) // talk to cable club\n//            .withButton(B, 44) // welcome ; please apply\n//            .withButton(B, 31) // before, we have to\n//            .withButton(A, 18) // save the game\n//            .withButton(A, 40) // save, where do you want to go (trade center)\n//            .withButton(LEFT, 31) // just a moment; face table\n//            .withButton(A, 1) // use table\n//            .withButton(A, 15) // just a moment; select 1\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 27) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(DOWN | A, 1) // just a moment; select 2\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 23) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(DOWN | A, 1) // just a moment; select 3\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 25) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(DOWN | A, 1) // just a moment; select 4\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 25) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(DOWN | A, 1) // just a moment; select 5\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 25) // x and y will\n//            .withButton(A, 11) // be traded\n//            .reset(0)\n//      //      .lookAndSee()\n//            .build(),\n//        new DualGbHelper.InputBuilder()\n//            .withButton(A, 0) // talk to cable club\n//            .withButton(B, 43) // welcome ; please apply\n//            .withButton(B, 32) // before, we have to\n//            .withButton(A, 18) // save the game\n//            .withButton(0, 40) // save, where do you want to go (trade center by L)\n//            .withButton(RIGHT, 36) // just a moment; face table\n//            .withButton(A, 1) // use table\n//            .withButton(A, 15) // just a moment; select 1\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 27) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 1) // just a moment; select 2\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 22) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 1) // just a moment; select 3\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 24) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 1) // just a moment; select 4\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 25) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(DOWN | A, 1) // just a moment; select 5\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 25) // x and y will\n//            .withButton(A, 11) // be traded\n//            .reset(0)\n//            .build());\n    { // Blue Segments\n//      saveL(\"PostEndTrade1Blue3b\");\n//      loadL(\"PostEndTrade1Blue3b\");\n//      seqL(new PrepEndTrade2Blue());\n//      saveL(\"PrepEndTrade2Blue3b\");\n//      loadL(\"PrepEndTrade2Blue3b\");\n    }\n    { // Red Segments\n//      saveR(\"PostEndTrade1Red3b\");\n//      loadR(\"PostEndTrade1Red3b\");\n//      seqR(new PrepEndTrade2Red());\n//      saveR(\"PrepEndTrade2Red3b\");\n//      loadR(\"PrepEndTrade2Red3b\");\n    }\n//    seqDualInputs(\n//        new DualGbHelper.InputBuilder()\n//            .withButton(A, 0) // talk to cable club\n//            .withButton(B, 44) // welcome ; please apply\n//            .withButton(B, 32) // before, we have to\n//            .withButton(A, 18) // save the game\n//            .withButton(A, 40) // save, where do you want to go (trade center)\n//            .withButton(LEFT, 31) // just a moment; face table\n//            .withButton(A, 1) // use table\n//            .withButton(DOWN, 15) // just a moment; select 1\n//            .withButton(DOWN, 1) // just a moment; select 1\n//            .withButton(DOWN, 1) // just a moment; select 1\n//            .withButton(DOWN | A, 1) // just a moment; select 1 // KADABRA\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 24) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 130) // just a moment; select 2\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 29) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 1) // just a moment; select 3\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 1) // just a moment; select 4\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 29) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 1) // just a moment; select 5\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 1) // just a moment; select 6\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .reset(0)\n////            .lookAndSee()\n//            .build(),\n//        new DualGbHelper.InputBuilder()\n//            .withButton(A, 0) // talk to cable club\n//            .withButton(B, 44) // welcome ; please apply\n//            .withButton(B, 32) // before, we have to\n//            .withButton(A, 18) // save the game\n//            .withButton(0, 40) // save, where do you want to go (trade center by L)\n//            .withButton(RIGHT, 36) // just a moment; face table\n//            .withButton(A, 1) // use table\n//            .withButton(DOWN, 15) // just a moment; select 1\n//            .withButton(DOWN | A, 1) // just a moment; select 1 // MACHOKE\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 24) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 130) // just a moment; select 2\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 29) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(DOWN | A, 1) // just a moment; select 3\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(DOWN | A, 1) // just a moment; select 4\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 29) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(DOWN | A, 1) // just a moment; select 5\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(DOWN | A, 1) // just a moment; select 6 // re-trade\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .reset(0)\n//            .build());\n    { // Blue Segments\n//      saveL(\"PostEndTrade2Blue3b\");\n//      loadL(\"PostEndTrade2Blue3b\");\n//      seqL(new PrepEndTrade3Blue());\n//      saveL(\"PrepEndTrade3Blue3b\");\n//      loadL(\"PrepEndTrade3Blue3b\");\n    }\n    { // Red Segments\n//      saveR(\"PostEndTrade2Red3b\");\n//      loadR(\"PostEndTrade2Red3b\");\n//      seqR(new PrepEndTrade3Red());\n//      saveR(\"PrepEndTrade3Red3b\");\n//      loadR(\"PrepEndTrade3Red3b\");\n    }\n//    seqDualInputs(\n//        new DualGbHelper.InputBuilder()\n//            .withButton(A, 0) // talk to cable club\n//            .withButton(B, 43) // welcome ; please apply\n//            .withButton(B, 31) // before, we have to\n//            .withButton(A, 17) // save the game\n//            .withButton(A, 40) // save, where do you want to go (trade center)\n//            .withButton(LEFT, 31) // just a moment; face table\n//            .withButton(A, 1) // use table\n//            .withButton(A, 15) // just a moment; select 1\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 1) // just a moment; select 2\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 1) // just a moment; select 3\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 1) // just a moment; select 4\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 29) // x and y will\n//            .withButton(A, 11) // be traded\n//            .reset(0)\n////            .lookAndSee()\n//            .build(),\n//        new DualGbHelper.InputBuilder()\n//            .withButton(A, 0) // talk to cable club\n//            .withButton(B, 44) // welcome ; please apply\n//            .withButton(B, 31) // before, we have to\n//            .withButton(A, 17) // save the game\n//            .withButton(0, 36) // save, where do you want to go (trade center by L)\n//            .withButton(RIGHT, 34) // just a moment; face table\n//            .withButton(A, 1) // use table\n//            .withButton(A, 15) // just a moment; select 1\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(DOWN, 0) // just a moment; select 2\n//            .withButton(DOWN | A, 1) // just a moment; select 2\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(DOWN, 0) // just a moment; select 3\n//            .withButton(DOWN | A, 1) // just a moment; select 3\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(DOWN, 0) // just a moment; select 4\n//            .withButton(DOWN | A, 1) // just a moment; select 4\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 28) // x and y will\n//            .withButton(A, 11) // be traded\n//            .reset(0)\n//            .build());\n    { // Blue Segments\n//      saveL(\"PostEndTrade3Blue3b\");\n//      loadL(\"PostEndTrade3Blue3b\");\n//      seqL(new PrepEndTrade4Blue());\n//      saveL(\"PrepEndTrade4Blue3b\");\n//      loadL(\"PrepEndTrade4Blue3b\");\n    }\n    { // Red Segments\n//      saveR(\"PostEndTrade3Red3b\");\n//      loadR(\"PostEndTrade3Red3b\");\n//      seqR(new PrepEndTrade4Red());\n//      saveR(\"PrepEndTrade4Red3b\");\n//      loadR(\"PrepEndTrade4Red3b\");\n    }\n//    seqDualInputs(\n//        new DualGbHelper.InputBuilder()\n//            .withButton(A, 0) // talk to cable club\n//            .withButton(B, 45) // welcome ; please apply\n//            .withButton(B, 31) // before, we have to\n//            .withButton(A, 17) // save the game\n//            .withButton(A, 39) // save, where do you want to go (trade center)\n//            .withButton(LEFT, 31) // just a moment; face table\n//            .withButton(A, 1) // use table\n//            .withButton(DOWN, 15) // just a moment; select GRAVELER\n//            .withButton(DOWN, 1) // just a moment; select GRAVELER\n//            .withButton(DOWN, 1) // just a moment; select GRAVELER\n//            .withButton(DOWN, 1) // just a moment; select GRAVELER\n//            .withButton(DOWN | A, 1) // just a moment; select GRAVELER\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 130) // just a moment; select 1\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 27) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 1) // just a moment; select 2\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 1) // just a moment; select 3\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 1) // just a moment; select 4\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 1) // just a moment; select 5\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 1) // just a moment; select 6\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .reset(0)\n////            .lookAndSee()\n//            .build(),\n//        new DualGbHelper.InputBuilder()\n//            .withButton(A, 0) // talk to cable club\n//            .withButton(B, 44) // welcome ; please apply\n//            .withButton(B, 33) // before, we have to\n//            .withButton(A, 17) // save the game\n//            .withButton(0, 34) // save, where do you want to go (trade center by L)\n//            .withButton(RIGHT, 36) // just a moment; face table\n//            .withButton(A, 1) // use table\n//            .withButton(DOWN, 15) // just a moment; select HAUNTER\n//            .withButton(DOWN, 1) // just a moment; select HAUNTER\n//            .withButton(DOWN, 1) // just a moment; select HAUNTER\n//            .withButton(DOWN | A, 1) // just a moment; select HAUNTER\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 130) // just a moment; select 1\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 27) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 1) // just a moment; select 2\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 1) // just a moment; select 3\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 1) // just a moment; select 4\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 1) // just a moment; select 5\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .withButton(A, 1) // just a moment; select 6\n//            .withButton(RIGHT, 0) // select trade\n//            .withButton(A, 0) // select trade\n//            .withButton(B, 26) // x and y will\n//            .withButton(A, 11) // be traded\n//            .reset(0)\n//            .build());\n      { // Blue Segments\n//        saveL(\"PostEndTrade4Blue3b\");\n        loadL(\"PostEndTrade4Blue3b\");\n        seqL(new GetDiploma());\n      }\n      { // Red Segments\n//        saveR(\"PostEndTrade4Red3b\");\n        loadR(\"PostEndTrade4Red3b\");\n        seqR(new GetDiploma());\n      }\n    }"} {"seed":"public static void main(String[] args) throws Exception {\n    DualGbRunner.run(new BlueRomInfo(), new RedRomInfo(), new Coop());\n  }"} {"seed":"/**\n     * 上传文件\n     *\n     * @param doc\n     * @param inboxId\n */\n    void upload(Doc doc, String i"} {"seed":"/**\n     * 上传文件\n     *\n     * @param doc\n     * @param inboxId\n�收件箱下所有的doc\n     */"} {"seed":"/**\n     * 上传文件\n     *\n     * @param doc\n     * @param inboxId\ninboxId 对应的收件夹ID\n     * @return"} {"seed":"/**\n     * 上传文件\n     *\n     * @param doc\n     * @param inboxId\nng inboxId);\n\n    /**"} {"seed":"@Override\n    public void insertData(Context mContext, User user) {\n        UserDatabase.getInstance(mContext).userDao().inserUser(user);\n    }"} {"seed":"@Override\n    public void updateData(Context mContext, User user) {\n        UserDatabase.getInstance(mContext).userDao().inserUser(user);\n    }"} {"seed":"@Override\n    public void deleteById(Context mContext, User user) {\n        UserDatabase.getInstance(mContext).userDao().deleteUser(user);\n    }"} {"seed":"@Override\n    public User getById(Context mContext, User user) {\n\n        return UserDatabase.getInstance(mContext).userDao().getUserById(user.getId());\n    }"} {"seed":"@Override\n    public List<User> getAll(Context mContext) {\n        return UserDatabase.getInstance(mContext).userDao().getAllUsers();\n    }"} {"seed":"@Override\n    public boolean isLogin(User user, Context mContext) {\n        String uName = user.getUsername();\n        String uPass = user.getPassword();\n        if (TextUtils.isEmpty(uName) || TextUtils.isEmpty(uPass))\n            return false;\n\n        User dUser = UserDatabase.getInstance(mContext).userDao().getUserByUsername(uName);\n        if (dUser != null){\n            SaveSharedPreference.setLoggedIn(mContext, true);\n            return true;\n        }else {\n            SaveSharedPreference.setLoggedIn(mContext, false);\n            return false;\n        }\n\n    }"} {"seed":"private boolean validUsername(String username){\n        boolean isValid = !TextUtils.isEmpty(username);\n        return isValid;\n    }"} {"seed":"private boolean validPassword(String password){\n        boolean isValid = !TextUtils.isEmpty(password);\n        return isValid;\n    }"} {"seed":"public Propietario findByMatricula(String Matricula) throws HibernateException {\n\t\tPropietario propietario = null;\n        try {\n            startOperation();\n            Query query=session.createQuery(\"from Vehiculo where matricula=?\");\n            query.setParameter(0, Matricula);\n            Vehiculo vehicle=(Vehiculo) query.getSingleResult();\n            propietario=vehicle.getPropietario();\n            transaction.commit();\n        } catch (HibernateException e) {\n            throw e;\n        } finally {\n            HibernateFactory.close(session);\n        }\n        return propietario;\n\t}"} {"seed":"@Override\n\tpublic BlockEntity createBlockEntity(BlockPos pos, BlockState state) {\n\t\treturn new WoodenHopperBlockEntity(pos, state);\n\t}"} {"seed":"@Override\n\tpublic <T extends BlockEntity> BlockEntityTicker<T> getTicker(World world, BlockState state, BlockEntityType<T> type) {\n\t\treturn world.isClient() ? null : checkType(type, Main.WOODEN_HOPPER_BLOCK_ENTITY_TYPE, HopperBlockEntity::serverTick);\n\t}"} {"seed":"<Reply> replys;\n\t\n\t//消息标签表\n\t@OneT"} {"seed":"ny(fetch=FetchType.EAGER,mappedBy=\"message\")\n\tprivate Set"} {"seed":"ssageLabel> labels;\n\t\n\n\tpublic String get"} {"seed":"d() {\n\t\treturn m_id;\n\t}\n\n\tpublic void setM_id(String m_"} {"seed":"{\n\t\tthis.m_id = m_id;\n\t}\n\n\tpublic User getUs"} {"seed":") {\n\t\treturn user;\n\t}\n\n\tpublic void setUser(User user) {\n\t\tth"} {"seed":"user = user;\n\t}\n\n\tpublic String getTitle() {\n\t\tre"} {"seed":"n title;\n\t}\n\n\tpublic void setTitle(String title) {\n\t\tthis.title = tit"} {"seed":"}\n\n\tpublic String getContent() {\n\t\treturn co"} {"seed":"nt;\n\t}\n\n\tpublic void setContent(String content) {\n\t\tthis.con"} {"seed":"t = content;\n\t}\n\n\tpublic Timestamp getTi"} {"seed":") {\n\t\treturn time;\n\t}\n\n\tpublic void setTime(Timestamp"} {"seed":"e) {\n\t\tthis.time = time;\n\t}\n\n\tpublic int getType"} {"seed":"{\n\t\treturn type;\n\t}\n\n\tpublic void setType(int type) {\n\t\tthis.type = ty"} {"seed":"}\n\n\tpublic int getScan_num() {\n\t\treturn scan_num"} {"seed":"}\n\n\tpublic void setScan_num(int scan_num) {\n\t\tthis.scan_num = scan_num;\n\t}"} {"seed":"public int getReply_num() {\n\t\treturn reply_num;\n\t}"} {"seed":"ublic void setReply_num(int reply_num) {\n\t\tthis.reply_num = reply_num"} {"seed":"}\n\n\tpublic Set<Image> getImages() {\n\t\treturn images;"} {"seed":"public void setImages(Set<Image> images) {\n\t\tthis.images = images;\n\t}"} {"seed":"public Set<UserFav> getFaveds() {\n\t\treturn faveds;"} {"seed":"public void setFaveds(Set<UserFav> faveds) {\n\t\tthis.faveds = faveds"} {"seed":"public Set<Reply> getReplys() {\n\t\treturn replys;\n\t}\n\n\tp"} {"seed":"ic void setReplys(Set<Reply> replys) {\n\t\tthis.replys = replys;\n\t}\n\n\n\tpublic"} {"seed":"MessageLabel> getLabels() {\n\t\treturn labels;\n\t}\n\n\tpublic void setLabels(Set<MessageLabel> labels) {\n\t\tthis.labels = labels;\n\t}\n\t\n\tpublic String getSrc(){\n\t\tcontent = HtmlUtils.htmlUnescape(content);\n\t\tList"} {"seed":"ing> list = RichTextProcessor.getImgSrc(content);\n\t\tif(list!=null&&list."} {"seed":"()!=0){\n\t\t\treturn list.get(0);\n\t\t}\n\t\treturn \"\";\n\t}\n\t\n\tpublic String getHtml(){\n\t\treturn RichTextProcessor.getHtml(content);\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Message [m_id=\" + m_id + \", user=\" + user.getNickname() + \", title=\" + title + \", content=\" + content + \", time=\" + time + \", type=\" + type\n\t\t\t\t+ \", scan_num=\" + scan_num + \", reply_num=\" + reply_num + \""} {"seed":"/**\n\t * \n\t */\npublic String getSearchInfo() {\n\t\treturn searchInfo;\n\t}"} {"seed":"/**\n\t * \n\t */\npublic void setSearchInfo(String searchInfo) {\n\t\tthis.searchInfo = searchInfo;\n\t}"} {"seed":"/**\n     * Retrieves the value of a {@link Field} from a {@link AnchorBean}.\n     *\n     * @param bean the bean\n     * @param field the field to retrieve a value from\n     * @return the value, it it exists, or {@code Optional.empty()} if it doesn't exist <b>and</b>\n     *     the bean is marked as optional.\n     * @throws IllegalAccessException if reflection tries to access a property it has no permissions\n     *     for.\n     * @throws BeanMisconfiguredException if no value exists for the field (and it's not marked as\n     *     optional).\n     */\npublic static Optional<Object> fieldFromBean(AnchorBean<?> bean, Field field)\n            throws IllegalAccessException, BeanMisconfiguredException {\n        // If it's non-optional, then we insist it's non-null\n        Object value = field.get(bean);\n        if (value == null) {\n            if (isFieldAnnotatedAsOptional(field)) {\n                return Optional.empty();\n            } else {\n                throwMissingPropertyException(field.getName(), bean.getBeanName());\n            }\n        }\n        return Optional.of(value);\n    }"} {"seed":"/**\n     * Is a particular {@link Field} on a {@link AnchorBean} marked as optional?\n     *\n     * @param field the field\n     * @return true iff it is marked as optional.\n     */\npublic static boolean isFieldAnnotatedAsOptional(Field field) {\n        return field.isAnnotationPresent(OptionalBean.class);\n    }"} {"seed":"/**\n     * Is a particular {@link Field} on a {@link AnchorBean} marked as optional?\n     *\n     * @param field the field\n     * @return true iff it is marked as optional.\n     */\nprivate static void throwMissingPropertyException(String fieldName, String className)\n            throws BeanMisconfiguredException {\n        throw new BeanMisconfiguredException(\n                String.format(\"Property %s of class %s must be non-null\", fieldName, className));\n    }"} {"seed":"public static void main(String[] args) {\n\n        printInicio();\n\n        while (jogo.getContinueGame()) {\n\n            printNewWord();\n            printStatus();\n\n        }\n\n        printMensagemDeEncerramento();\n\n    }"} {"seed":"private static void printNewWord() {\n        System.out.println(\"A palavra embaralhada é: \" + jogo.getNextWord());\n        System.out.print(\"A palavra original é: \");"} {"seed":"private static void printStatus() {\n        System.out.println(getValidation() + \"\\n\");\n        System.out.println(jogo.getStatus());\n        System.out.println(jogo.lineSeparator);"} {"seed":"private static String getValidation() {\n        return jogo.validateWord(in.nextLine());"} {"seed":"private static void printInicio() {\n        System.out.println(jogo.getGameStart());"} {"seed":"private static void printMensagemDeEncerramento(){\n        System.out.println(jogo.getMensagemDeEncerramento());"} {"seed":"public void getInfoFromDB(String albumID) {\n\t\tString query = \"SELECT * FROM Albums WHERE album_id = \" + albumID + \";\";\n\t\ttry {\n\t\t\tSQLiteConnection conn = new SQLiteConnection(DBInfo.DBFILEPATH, DBInfo.DB_NAME);\n\t\t\tStatement statement = conn.createStatement();\n\t\t\tResultSet results = statement.executeQuery(query);\n\t\t\tif(results.next()) {\n\t\t\t\ttitle = results.getString(\"title\");\n\t\t\t\trecordLabel = results.getString(\"record_label\");\n\t\t\t\tid = results.getString(\"album_id\");\n\t\t\t\treleaseYear = results.getString(\"release_year\");\n\t\t\t\tband = new Band(results.getString(\"band_id\"));\n\t\t\t\t\n\t\t\t\tString songsQuery = \"SELECT * FROM Songs WHERE album_id = '\" + id + \"';\";\n\t\t\t\tStatement songsStatement = conn.createStatement();\n\t\t\t\tResultSet songsResults = songsStatement.executeQuery(songsQuery);\n\t\t\t\tsongs = new ArrayList<Song>();\n\t\t\t\tArrayList<Integer> songIDs = new ArrayList<Integer>();\n\t\t\t\twhile(songsResults.next()) {\n\t\t\t\t\tsongIDs.add(songsResults.getInt(\"song_id\"));\n\t\t\t\t}\t\t\n\t\t\t\tconn.close();\n\t\t\t\tfor(Integer songID: songIDs) {\n\t\t\t\t\tsongs.add(new Song(songID.toString()));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttitle = \"\";\n\t\t\t\trecordLabel = \"\";\n\t\t\t\tid = \"\";\n\t\t\t\treleaseYear = \"\";\n\t\t\t\tband = null;\n\t\t\t\tsongs = new ArrayList<Song>();\n\t\t\t}\n\t\t}\n\t\tcatch(SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\ttitle = \"\";\n\t\t\trecordLabel = \"\";\n\t\t\tid = \"\";\n\t\t\treleaseYear = \"\";\n\t\t\tband = null;\n\t\t\tsongs = new ArrayList<Song>();\n\t\t}\n\t}"} {"seed":"public void getInfoFromDB(String title, String bandID) {\n\t\tString query = \"SELECT * FROM Albums WHERE title = '\" + title + \"' AND band_id = '\" + bandID + \"';\";\n\t\ttry {\n\t\t\tSQLiteConnection conn = new SQLiteConnection(DBInfo.DBFILEPATH, DBInfo.DB_NAME);\n\t\t\tStatement statement = conn.createStatement();\n\t\t\tResultSet results = statement.executeQuery(query);\n\t\t\tif(results.next()) {\n\t\t\t\ttitle = results.getString(\"title\");\n\t\t\t\trecordLabel = results.getString(\"record_label\");\n\t\t\t\tid = results.getString(\"album_id\");\n\t\t\t\treleaseYear = results.getString(\"release_year\");\n\t\t\t\tband = new Band(results.getString(\"band_id\"));\n\t\t\t\t\n\t\t\t\tString songsQuery = \"SELECT * FROM Songs WHERE album_id = '\" + id + \"';\";\n\t\t\t\tStatement songsStatement = conn.createStatement();\n\t\t\t\tResultSet songsResults = songsStatement.executeQuery(songsQuery);\n\t\t\t\tsongs = new ArrayList<Song>();\n\t\t\t\tArrayList<Integer> songIDs = new ArrayList<Integer>();\n\t\t\t\twhile(songsResults.next()) {\n\t\t\t\t\tsongIDs.add(songsResults.getInt(\"song_id\"));\n\t\t\t\t}\t\t\n\t\t\t\tconn.close();\n\t\t\t\tfor(Integer songID: songIDs) {\n\t\t\t\t\tsongs.add(new Song(songID.toString()));\n\t\t\t\t}\t\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttitle = \"\";\n\t\t\t\trecordLabel = \"\";\n\t\t\t\tid = \"\";\n\t\t\t\treleaseYear = \"\";\n\t\t\t\tband = null;\n\t\t\t\tsongs = new ArrayList<Song>();\n\t\t\t}\n\t\t}\n\t\tcatch(SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\ttitle = \"\";\n\t\t\trecordLabel = \"\";\n\t\t\tid = \"\";\n\t\t\treleaseYear = \"\";\n\t\t\tband = null;\n\t\t\tsongs = new ArrayList<Song>();\n\t\t}\n\t}"} {"seed":"@Before\n    public void before(){\n        borrower = new Borrower();\n        book = new Book(\"The Slipery Slope\", \"Lemony Snicket\", \"Mystery\");\n\n    }"} {"seed":"@Test\n    public void collectionCount(){\n        assertEquals(0, borrower.collectonCount());\n    }"} {"seed":"@Test\n    public void addBook(){\n        borrower.addBook(book);\n        assertEquals(1, borrower.collectonCount() );\n\n    }"} {"seed":"@Test\n    public void removeBookFromCollection(){\n        borrower.addBook(book);\n        assertEquals(1,borrower.collectonCount());\n        borrower.removeBookFromCollection(book);\n        assertEquals(0, borrower.collectonCount());\n    }"} {"seed":"DER BY NEWS_NO\";\n\t\n\t@Override\n\tpublic void insert(NewsVO newsVO) {\n\n\t\tConnection con = null;\n\t\tPreparedStatement pstmt = null;\n\t\t\n\t\ttry {\n\t\t\t\n\t\t\tClass.forName(DRIVER);\n\t\t\tcon = DriverManager.getConnection(URL, USER, PASSWORD);\n\t\t\tpstmt = con.prepareStatement(INSERT_STMT);\n\t\t\t\n\t\t\tpstmt.setString(1, newsVO.getNews_classification_no());\n\t\t\tpstmt.setString(2, newsVO.getNews_title());\n\t\t\tpstmt.setString(3, newsVO.getNews_content());\n\t\t\tpstmt.setString(4, newsVO.getAdministrator_no());\n\n\t\t\tpstmt.executeUpdate();\n\t\t\t\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\tthrow new RuntimeException(\"An error occured. Nooooooo~ guess ClassNotFoundException or SQLException ?\"\n\t\t\t\t\t+ e.getMessage());\n\t\t} finally {\n\t\t\tif (pstmt != null) {\n\t\t\t\ttry {\n\t\t\t\t\tpstmt.close();\n\t\t\t\t} catch (SQLException se) {\n\t\t\t\t\tse.printStackTrace(System.err);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (con != null) {\n\t\t\t\ttry {\n\t\t\t\t\tcon.close();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace(System.err);"} {"seed":"}\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n\t@Override\n\tpublic void update(NewsVO newsVO) {\n\n\t\tConnection con = null;\n\t\tPreparedStatement pstmt = null;\n\n\t\ttry {\n\n\t\t\tClass.forName(DRIVER);\n\t\t\tcon = DriverManager.getConnection(URL, USER, PASSWORD);\n\t\t\tpstmt = con.prepareStatement(UPDATE);\n\n\t\t\tpstmt.setString(1, newsVO.getNews_classification_no());\n\t\t\tpstmt.setString(2, newsVO.getNews_title());\n\t\t\tpstmt.setString(3, newsVO.getNews_content());\n\t\t\tpstmt.setDate(4, newsVO.getAnnounce_date());\n\t\t\tpstmt.setString(5, newsVO.getAdministrator_no());\n\t\t\tpstmt.setString(6, newsVO.getNews_no());\n\n\t\t\tpstmt.executeUpdate();\n\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\tthrow new RuntimeException(\"An error occured. Nooooooo~ guess ClassNotFoundException or SQLException ?\"\n\t\t\t\t\t+ e.getMessage());\n\t\t} finally {\n\t\t\tif (pstmt != null) {\n\t\t\t\ttry {\n\t\t\t\t\tpstmt.close();\n\t\t\t\t} catch (SQLException se) {\n\t\t\t\t\tse.printStackTrace(System.err);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (con != null) {\n\t\t\t\ttry {\n\t\t\t\t\tcon.close();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace(System.err);"} {"seed":"}\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n\t@Override\n\tpublic void delete(String news_no) {\n\n\t\tConnection con = null;\n\t\tPreparedStatement pstmt = null;\n\n\t\ttry {\n\n\t\t\tClass.forName(DRIVER);\n\t\t\tcon = DriverManager.getConnection(URL, USER, PASSWORD);\n\t\t\tpstmt = con.prepareStatement(DELETE);\n\n\t\t\tpstmt.setString(1, news_no);\n\n\t\t\tpstmt.executeUpdate();\n\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\tthrow new RuntimeException(\"An error occured. Nooooooo~ guess ClassNotFoundException or SQLException ?\"\n\t\t\t\t\t+ e.getMessage());\n\t\t} finally {\n\t\t\tif (pstmt != null) {\n\t\t\t\ttry {\n\t\t\t\t\tpstmt.close();\n\t\t\t\t} catch (SQLException se) {\n\t\t\t\t\tse.printStackTrace(System.err);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (con != null) {\n\t\t\t\ttry {\n\t\t\t\t\tcon.close();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace(System.err);"} {"seed":"}\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n\t@Override\n\tpublic NewsVO findByPrimaryKey(String news_no) {\n\n\t\tNewsVO newsVO = null;\n\t\tConnection con = null;\n\t\tPreparedStatement pstmt = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\n\t\t\tClass.forName(DRIVER);\n\t\t\tcon = DriverManager.getConnection(URL, USER, PASSWORD);\n\t\t\tpstmt = con.prepareStatement(FIND_BY_PK_SQL);\n\n\t\t\tpstmt.setString(1, news_no);\n\n\t\t\trs = pstmt.executeQuery();\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tnewsVO = new NewsVO();\n\t\t\t\tnewsVO.setNews_no(rs.getString(\"NEWS_NO\"));\n\t\t\t\tnewsVO.setNews_classification_no(rs.getString(\"NEWS_CLASSIFICATION_NO\"));\n\t\t\t\tnewsVO.setNews_title(rs.getString(\"NEWS_TITLE\"));\n\t\t\t\tnewsVO.setNews_content(rs.getString(\"NEWS_CONTENT\"));\n\t\t\t\tnewsVO.setAnnounce_date(rs.getDate(\"ANNOUNCE_DATE\"));\n\t\t\t\tnewsVO.setAdministrator_no(rs.getString(\"ADMINISTRATOR_NO\"));\n\t\t\t}\n\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\tthrow new RuntimeException(\"An error occured. Nooooooo~ guess ClassNotFoundException or SQLException ?\"\n\t\t\t\t\t+ e.getMessage());\n\t\t} finally {\n\t\t\tif (rs != null) {\n\t\t\t\ttry {\n\t\t\t\t\trs.close();\n\t\t\t\t} catch (SQLException se) {\n\t\t\t\t\tse.printStackTrace(System.err);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pstmt != null) {\n\t\t\t\ttry {\n\t\t\t\t\tpstmt.close();\n\t\t\t\t} catch (SQLException se) {\n\t\t\t\t\tse.printStackTrace(System.err);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (con != null) {\n\t\t\t\ttry {\n\t\t\t\t\tcon.close();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace(System.err);\n\t\t\t\t}\n\t\t\t}\n\t\t}"} {"seed":"urn newsVO;\n\t\t\n\t}\n\n\t@Override\n\tpublic List<NewsVO> getAll() {\n\n\t\tList<NewsVO> list = new ArrayList<NewsVO>();\n\t\tNewsVO newsVO = null;\n\n\t\tConnection con = null;\n\t\tPreparedStatement pstmt = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\n\t\t\tClass.forName(DRIVER);\n\t\t\tcon = DriverManager.getConnection(URL, USER, PASSWORD);\n\t\t\tpstmt = con.prepareStatement(GET_ALL_STMT);\n\t\t\trs = pstmt.executeQuery();\n\n\t\t\twhile (rs.next()) {\n\t\t\t\tnewsVO = new NewsVO();\n\t\t\t\tnewsVO.setNews_no(rs.getString(\"newsNo\"));\n\t\t\t\tnewsVO.setNews_classification_no(rs.getString(\"NEWS_CLASSIFICATION_NO\"));\n\t\t\t\tnewsVO.setNews_title(rs.getString(\"NEWS_TITLE\"));\n\t\t\t\tnewsVO.setNews_content(rs.getString(\"NEWS_CONTENT\"));\n\t\t\t\tnewsVO.setAnnounce_date(rs.getDate(\"ANNOUNCE_DATE\"));\n\t\t\t\tnewsVO.setAdministrator_no(rs.getString(\"ADMINISTRATOR_NO\"));\n\t\t\t\tlist.add(newsVO);\n\t\t\t}\n\n\t\t} catch (ClassNotFoundException | SQLException e) {\n\t\t\tthrow new RuntimeException(\"An error occured. Nooooooo~ guess ClassNotFoundException or SQLException ?\"\n\t\t\t\t\t+ e.getMessage());\n\t\t} finally {\n\t\t\tif (rs != null) {\n\t\t\t\ttry {\n\t\t\t\t\trs.close();\n\t\t\t\t} catch (SQLException se) {\n\t\t\t\t\tse.printStackTrace(System.err);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pstmt != null) {\n\t\t\t\ttry {\n\t\t\t\t\tpstmt.close();\n\t\t\t\t} catch (SQLException se) {\n\t\t\t\t\tse.printStackTrace(System.err);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (con != null) {\n\t\t\t\ttry {\n\t\t\t\t\tcon.close();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace(System.err);\n\t\t\t\t}\n\t\t\t}\n\t\t}"} {"seed":"public boolean isAttackable() {\n        return getFieldValue(\"isAttackable\", getClassFields().isAttackable, Boolean.class);\n    }"} {"seed":"private NonPlayerCharacterInfoClassFields getClassFields() {\n        return getClientJarClassInfo().nonPlayerCharacterInfo.fields;\n    }"} {"seed":"@Override\n\tpublic int selectMemberListCount() {\n\t\treturn aDao.selectMemberListCount();\n\t}"} {"seed":"@Override\n\tpublic List<Member> selectMemberList(PageInfo pi) {\n\t\treturn aDao.selectMemberList(pi);\n\t}"} {"seed":"@Override\n\tpublic int adminQuitMember(int userNo) {\n\t\treturn aDao.adminQuitMember(userNo);\n\t}"} {"seed":"@Override\n\tpublic void adminChangeGradeMember(Member m, HttpServletResponse response) throws IOException {\n\t\tPrintWriter out = response.getWriter();\n\t\tout.println(aDao.adminChangeGradeMember(m));\n\t\tout.flush();\n\t\tout.close();\n\t}"} {"seed":"@Override\n\tpublic Member adminSelectMember(int userNo) {\n\t\treturn aDao.adminSelectMember(userNo);\n\t}"} {"seed":"@Override\n\tpublic int selectBoardListCount(String category) {\n\t\treturn aDao.selectBoardListCount(category);\n\t}"} {"seed":"@Override\n\tpublic List<Board_TB> selectBoardList(String category, PageInfo pi) {\n\t\treturn aDao.selectBoardList(category, pi);\n\t}"} {"seed":"@Override\n\tpublic int selectSurveyListCount() {\n\t\treturn aDao.selectSurveyListCount();\n\t}"} {"seed":"@Override\n\tpublic List<Survey_TB> selectSurveyList(PageInfo pi) {\n\t\treturn aDao.selectSurveyList(pi);\n\t}"} {"seed":"@Override\n\tpublic int selectReportListCount() {\n\t\treturn aDao.selectReportListCount();\n\t}"} {"seed":"@Override\n\tpublic List<Report> selectReportList(PageInfo pi) {\n\t\treturn aDao.selectReportList(pi);\n\t}"} {"seed":"@Override\n\tpublic int adminDownMember(int userNo) {\n\t\treturn aDao.updateDownMember(userNo);\n\t}"} {"seed":"static int a(char c2) {\n        if (c2 >= '0' && c2 <= '9') {\n            return c2 - '0';\n        }\n        char c3 = 'a';\n        if (c2 < 'a' || c2 > 'f') {\n            c3 = 'A';\n            if (c2 < 'A' || c2 > 'F') {\n                return -1;\n            }\n        }\n        return (c2 - c3) + 10;\n    }"} {"seed":"public static int a(String str) {\n        if (str.equals(\"http\")) {\n            return 80;\n        }\n        return str.equals(\"https\") ? 443 : -1;\n    }"} {"seed":"static String a(String str, int i2, int i3, String str2, boolean z, boolean z2, boolean z3, boolean z4) {\n        String str3 = str;\n        int i4 = i3;\n        int i5 = i2;\n        while (i5 < i4) {\n            int codePointAt = str.codePointAt(i5);\n            if (codePointAt < 32 || codePointAt == 127 || (codePointAt >= 128 && z4)) {\n                String str4 = str2;\n            } else {\n                String str5 = str2;\n                if (str2.indexOf(codePointAt) == -1 && ((codePointAt != 37 || (z && (!z2 || a(str, i5, i3)))) && (codePointAt != 43 || !z3))) {\n                    i5 += Character.charCount(codePointAt);\n                }\n            }\n            com.meizu.cloud.pushsdk.b.g.a aVar = new com.meizu.cloud.pushsdk.b.g.a();\n            int i6 = i2;\n            aVar.a(str, i2, i5);\n            a(aVar, str, i5, i3, str2, z, z2, z3, z4);\n            return aVar.h();\n        }\n        int i7 = i2;\n        return str.substring(i2, i3);\n    }"} {"seed":"static String a(String str, int i2, int i3, boolean z) {\n        for (int i4 = i2; i4 < i3; i4++) {\n            char charAt = str.charAt(i4);\n            if (charAt == '%' || (charAt == '+' && z)) {\n                com.meizu.cloud.pushsdk.b.g.a aVar = new com.meizu.cloud.pushsdk.b.g.a();\n                aVar.a(str, i2, i4);\n                a(aVar, str, i4, i3, z);\n                return aVar.h();\n            }\n        }\n        return str.substring(i2, i3);\n    }"} {"seed":"static String a(String str, String str2, boolean z, boolean z2, boolean z3, boolean z4) {\n        return a(str, 0, str.length(), str2, z, z2, z3, z4);\n    }"} {"seed":"static String a(String str, boolean z) {\n        return a(str, 0, str.length(), z);\n    }"} {"seed":"private List<String> a(List<String> list, boolean z) {\n        ArrayList arrayList = new ArrayList(list.size());\n        Iterator<String> it2 = list.iterator();\n        while (it2.hasNext()) {\n            String next = it2.next();\n            arrayList.add(next != null ? a(next, z) : null);\n        }\n        return Collections.unmodifiableList(arrayList);\n    }"} {"seed":"static void a(com.meizu.cloud.pushsdk.b.g.a aVar, String str, int i2, int i3, String str2, boolean z, boolean z2, boolean z3, boolean z4) {\n        com.meizu.cloud.pushsdk.b.g.a aVar2 = null;\n        while (i2 < i3) {\n            int codePointAt = str.codePointAt(i2);\n            if (!z || !(codePointAt == 9 || codePointAt == 10 || codePointAt == 12 || codePointAt == 13)) {\n                if (codePointAt == 43 && z3) {\n                    aVar.b(z ? \"+\" : \"%2B\");\n                } else if (codePointAt < 32 || codePointAt == 127 || ((codePointAt >= 128 && z4) || str2.indexOf(codePointAt) != -1 || (codePointAt == 37 && (!z || (z2 && !a(str, i2, i3)))))) {\n                    if (aVar2 == null) {\n                        aVar2 = new com.meizu.cloud.pushsdk.b.g.a();\n                    }\n                    aVar2.a(codePointAt);\n                    while (!aVar2.c()) {\n                        byte f2 = aVar2.f() & 255;\n                        aVar.b(37);\n                        aVar.b((int) f26917a[(f2 >> 4) & 15]);\n                        aVar.b((int) f26917a[f2 & 15]);\n                    }\n                } else {\n                    aVar.a(codePointAt);\n                }\n            }\n            i2 += Character.charCount(codePointAt);\n        }\n    }"} {"seed":"static void a(com.meizu.cloud.pushsdk.b.g.a aVar, String str, int i2, int i3, boolean z) {\n        while (i2 < i3) {\n            int codePointAt = str.codePointAt(i2);\n            if (codePointAt == 37) {\n                int i4 = i2 + 2;\n                if (i4 < i3) {\n                    int a2 = a(str.charAt(i2 + 1));\n                    int a3 = a(str.charAt(i4));\n                    if (!(a2 == -1 || a3 == -1)) {\n                        aVar.b((a2 << 4) + a3);\n                        i2 = i4;\n                        i2 += Character.charCount(codePointAt);\n                    }\n                    aVar.a(codePointAt);\n                    i2 += Character.charCount(codePointAt);\n                }\n            }\n            if (codePointAt == 43 && z) {\n                aVar.b(32);\n                i2 += Character.charCount(codePointAt);\n            }\n            aVar.a(codePointAt);\n            i2 += Character.charCount(codePointAt);\n        }\n    }"} {"seed":"static void a(StringBuilder sb, List<String> list) {\n        int size = list.size();\n        for (int i2 = 0; i2 < size; i2++) {\n            sb.append('/');\n            sb.append(list.get(i2));\n        }\n    }"} {"seed":"static boolean a(String str, int i2, int i3) {\n        int i4 = i2 + 2;\n        return i4 < i3 && str.charAt(i2) == '%' && a(str.charAt(i2 + 1)) != -1 && a(str.charAt(i4)) != -1;\n    }"} {"seed":"static List<String> b(String str) {\n        String str2;\n        ArrayList arrayList = new ArrayList();\n        int i2 = 0;\n        while (i2 <= str.length()) {\n            int indexOf = str.indexOf(38, i2);\n            if (indexOf == -1) {\n                indexOf = str.length();\n            }\n            int indexOf2 = str.indexOf(61, i2);\n            if (indexOf2 == -1 || indexOf2 > indexOf) {\n                arrayList.add(str.substring(i2, indexOf));\n                str2 = null;\n            } else {\n                arrayList.add(str.substring(i2, indexOf2));\n                str2 = str.substring(indexOf2 + 1, indexOf);\n            }\n            arrayList.add(str2);\n            i2 = indexOf + 1;\n        }\n        return arrayList;\n    }"} {"seed":"static void b(StringBuilder sb, List<String> list) {\n        int size = list.size();\n        for (int i2 = 0; i2 < size; i2 += 2) {\n            String str = list.get(i2);\n            String str2 = list.get(i2 + 1);\n            if (i2 > 0) {\n                sb.append('&');\n            }\n            sb.append(str);\n            if (str2 != null) {\n                sb.append('=');\n                sb.append(str2);\n            }\n        }\n    }"} {"seed":"public static f c(String str) {\n        a aVar = new a();\n        if (aVar.a((f) null, str) == a.C0313a.SUCCESS) {\n            return aVar.b();\n        }\n        return null;\n    }"} {"seed":"public boolean a() {\n        return this.f26918b.equals(\"https\");\n    }"} {"seed":"public String b() {\n        if (this.f26919c.isEmpty()) {\n            return \"\";\n        }\n        int length = this.f26918b.length() + 3;\n        String str = this.j;\n        return this.j.substring(length, m.a(str, length, str.length(), \":@\"));\n    }"} {"seed":"public String c() {\n        if (this.f26920d.isEmpty()) {\n            return \"\";\n        }\n        int indexOf = this.j.indexOf(64);\n        return this.j.substring(this.j.indexOf(58, this.f26918b.length() + 3) + 1, indexOf);\n    }"} {"seed":"public List<String> d() {\n        int indexOf = this.j.indexOf(47, this.f26918b.length() + 3);\n        String str = this.j;\n        int a2 = m.a(str, indexOf, str.length(), \"?#\");\n        ArrayList arrayList = new ArrayList();\n        while (indexOf < a2) {\n            int i2 = indexOf + 1;\n            int a3 = m.a(this.j, i2, a2, '/');\n            arrayList.add(this.j.substring(i2, a3));\n            indexOf = a3;\n        }\n        return arrayList;\n    }"} {"seed":"public String e() {\n        if (this.h == null) {\n            return null;\n        }\n        int indexOf = this.j.indexOf(63) + 1;\n        return this.j.substring(indexOf, m.a(this.j, indexOf + 1, this.j.length(), '#'));\n    }"} {"seed":"public boolean equals(Object obj) {\n        return (obj instanceof f) && ((f) obj).j.equals(this.j);\n    }"} {"seed":"public String f() {\n        if (this.i == null) {\n            return null;\n        }\n        return this.j.substring(this.j.indexOf(35) + 1);\n    }"} {"seed":"public a g() {\n        a aVar = new a();\n        aVar.f26924a = this.f26918b;\n        aVar.f26925b = b();\n        aVar.f26926c = c();\n        aVar.f26927d = this.f26921e;\n        aVar.f26928e = this.f26922f != a(this.f26918b) ? this.f26922f : -1;\n        aVar.f26929f.clear();\n        aVar.f26929f.addAll(d());\n        aVar.a(e());\n        aVar.h = f();\n        return aVar;\n    }"} {"seed":"public int hashCode() {\n        return this.j.hashCode();\n    }"} {"seed":"public String toString() {\n        return this.j;\n    }"} {"seed":"private static String a(byte[] bArr) {\n            int i = 0;\n            int i2 = 0;\n            int i3 = 0;\n            int i4 = -1;\n            while (i2 < bArr.length) {\n                int i5 = i2;\n                while (i5 < 16 && bArr[i5] == 0 && bArr[i5 + 1] == 0) {\n                    i5 += 2;\n                }\n                int i6 = i5 - i2;\n                if (i6 > i3) {\n                    i4 = i2;\n                    i3 = i6;\n                }\n                i2 = i5 + 2;\n            }\n            com.meizu.cloud.pushsdk.b.g.a aVar = new com.meizu.cloud.pushsdk.b.g.a();\n            while (i < bArr.length) {\n                if (i == i4) {\n                    aVar.b(58);\n                    i += i3;\n                    if (i == 16) {\n                        aVar.b(58);\n                    }\n                } else {\n                    if (i > 0) {\n                        aVar.b(58);\n                    }\n                    aVar.d((long) (((bArr[i] & 255) << 8) | (bArr[i + 1] & 255)));\n                    i += 2;\n                }\n            }\n            return aVar.h();\n        }"} {"seed":"private void a(java.lang.String r10, int r11, int r12) {\n            /*\n                r9 = this;\n                if (r11 != r12) goto L_0x0003\n                return\n            L_0x0003:\n                char r0 = r10.charAt(r11)\n                r1 = 47\n                r2 = 1\n                if (r0 == r1) goto L_0x0020\n                r1 = 92\n                if (r0 != r1) goto L_0x0011\n                goto L_0x0020\n            L_0x0011:\n                java.util.List<java.lang.String> r0 = r9.f26929f\n                java.util.List<java.lang.String> r1 = r9.f26929f\n                int r1 = r1.size()\n                int r1 = r1 - r2\n                java.lang.String r3 = \"\"\n                r0.set(r1, r3)\n                goto L_0x002d\n            L_0x0020:\n                java.util.List<java.lang.String> r0 = r9.f26929f\n                r0.clear()\n                java.util.List<java.lang.String> r0 = r9.f26929f\n                java.lang.String r1 = \"\"\n                r0.add(r1)\n                goto L_0x0045\n            L_0x002d:\n                r5 = r11\n                if (r5 >= r12) goto L_0x0048\n                java.lang.String r11 = \"/\\\\\"\n                int r11 = com.meizu.cloud.pushsdk.b.c.m.a((java.lang.String) r10, (int) r5, (int) r12, (java.lang.String) r11)\n                if (r11 >= r12) goto L_0x003a\n                r0 = 1\n                goto L_0x003b\n            L_0x003a:\n                r0 = 0\n            L_0x003b:\n                r8 = 1\n                r3 = r9\n                r4 = r10\n                r6 = r11\n                r7 = r0\n                r3.a((java.lang.String) r4, (int) r5, (int) r6, (boolean) r7, (boolean) r8)\n                if (r0 == 0) goto L_0x002d\n            L_0x0045:\n                int r11 = r11 + 1\n                goto L_0x002d\n            L_0x0048:\n                return\n            */\n            throw new UnsupportedOperationException(\"Method not decompiled: com.meizu.cloud.pushsdk.b.c.f.a.a(java.lang.String, int, int):void\");\n        }"} {"seed":"private void a(String str, int i, int i2, boolean z, boolean z2) {\n            String a2 = f.a(str, i, i2, \" \\\"<>^`{}|/\\\\?#\", z2, false, false, true);\n            if (!b(a2)) {\n                if (c(a2)) {\n                    c();\n                    return;\n                }\n                if (this.f26929f.get(this.f26929f.size() - 1).isEmpty()) {\n                    this.f26929f.set(this.f26929f.size() - 1, a2);\n                } else {\n                    this.f26929f.add(a2);\n                }\n                if (z) {\n                    this.f26929f.add(\"\");\n                }\n            }\n        }"} {"seed":"private static boolean a(String str, int i, int i2, byte[] bArr, int i3) {\n            int i4 = i3;\n            while (i < i2) {\n                if (i4 == bArr.length) {\n                    return false;\n                }\n                if (i4 != i3) {\n                    if (str.charAt(i) != '.') {\n                        return false;\n                    }\n                    i++;\n                }\n                int i5 = i;\n                int i6 = 0;\n                while (i5 < i2) {\n                    char charAt = str.charAt(i5);\n                    if (charAt < '0' || charAt > '9') {\n                        break;\n                    } else if (i6 == 0 && i != i5) {\n                        return false;\n                    } else {\n                        i6 = ((i6 * 10) + charAt) - 48;\n                        if (i6 > 255) {\n                            return false;\n                        }\n                        i5++;\n                    }\n                }\n                if (i5 - i == 0) {\n                    return false;\n                }\n                bArr[i4] = (byte) i6;\n                i4++;\n                i = i5;\n            }\n            return i4 == i3 + 4;\n        }"} {"seed":"private static int b(String str, int i, int i2) {\n            if (i2 - i < 2) {\n                return -1;\n            }\n            char charAt = str.charAt(i);\n            if ((charAt >= 'a' && charAt <= 'z') || (charAt >= 'A' && charAt <= 'Z')) {\n                while (true) {\n                    i++;\n                    if (i >= i2) {\n                        break;\n                    }\n                    char charAt2 = str.charAt(i);\n                    if ((charAt2 < 'a' || charAt2 > 'z') && ((charAt2 < 'A' || charAt2 > 'Z') && !((charAt2 >= '0' && charAt2 <= '9') || charAt2 == '+' || charAt2 == '-' || charAt2 == '.'))) {\n                        if (charAt2 == ':') {\n                            return i;\n                        }\n                    }\n                }\n            }\n            return -1;\n        }"} {"seed":"private boolean b(String str) {\n            return str.equals(ClassUtils.PACKAGE_SEPARATOR) || str.equalsIgnoreCase(\"%2e\");\n        }"} {"seed":"private static int c(String str, int i, int i2) {\n            int i3 = 0;\n            while (i < i2) {\n                char charAt = str.charAt(i);\n                if (charAt != '\\\\' && charAt != '/') {\n                    break;\n                }\n                i3++;\n                i++;\n            }\n            return i3;\n        }"} {"seed":"private void c() {\n            if (!this.f26929f.remove(this.f26929f.size() - 1).isEmpty() || this.f26929f.isEmpty()) {\n                this.f26929f.add(\"\");\n            } else {\n                this.f26929f.set(this.f26929f.size() - 1, \"\");\n            }\n        }"} {"seed":"private boolean c(String str) {\n            return str.equals(\"..\") || str.equalsIgnoreCase(\"%2e.\") || str.equalsIgnoreCase(\".%2e\") || str.equalsIgnoreCase(\"%2e%2e\");\n        }"} {"seed":"private static int d(String str, int i, int i2) {\n            while (i < i2) {\n                char charAt = str.charAt(i);\n                if (charAt == ':') {\n                    return i;\n                }\n                if (charAt == '[') {\n                    do {\n                        i++;\n                        if (i >= i2) {\n                            break;\n                        }\n                    } while (str.charAt(i) != ']');\n                }\n                i++;\n            }\n            return i2;\n        }"} {"seed":"private static String e(String str, int i, int i2) {\n            String a2 = f.a(str, i, i2, false);\n            if (!a2.contains(\":\")) {\n                return m.a(a2);\n            }\n            InetAddress f2 = (!a2.startsWith(\"[\") || !a2.endsWith(\"]\")) ? f(a2, 0, a2.length()) : f(a2, 1, a2.length() - 1);\n            if (f2 == null) {\n                return null;\n            }\n            byte[] address = f2.getAddress();\n            if (address.length == 16) {\n                return a(address);\n            }\n            throw new AssertionError();\n        }"} {"seed":"private static InetAddress f(String str, int i, int i2) {\n            byte[] bArr = new byte[16];\n            int i3 = 0;\n            int i4 = -1;\n            int i5 = -1;\n            while (true) {\n                if (i >= i2) {\n                    break;\n                } else if (i3 == 16) {\n                    return null;\n                } else {\n                    int i6 = i + 2;\n                    if (i6 > i2 || !str.regionMatches(i, \"::\", 0, 2)) {\n                        if (i3 != 0) {\n                            if (str.regionMatches(i, \":\", 0, 1)) {\n                                i++;\n                            } else if (!str.regionMatches(i, ClassUtils.PACKAGE_SEPARATOR, 0, 1) || !a(str, i5, i2, bArr, i3 - 2)) {\n                                return null;\n                            } else {\n                                i3 += 2;\n                            }\n                        }\n                        i5 = i;\n                    } else if (i4 != -1) {\n                        return null;\n                    } else {\n                        i3 += 2;\n                        if (i6 == i2) {\n                            i4 = i3;\n                            break;\n                        }\n                        i4 = i3;\n                        i5 = i6;\n                    }\n                    i = i5;\n                    int i7 = 0;\n                    while (i < i2) {\n                        int a2 = f.a(str.charAt(i));\n                        if (a2 == -1) {\n                            break;\n                        }\n                        i7 = (i7 << 4) + a2;\n                        i++;\n                    }\n                    int i8 = i - i5;\n                    if (i8 == 0 || i8 > 4) {\n                        return null;\n                    }\n                    int i9 = i3 + 1;\n                    bArr[i3] = (byte) ((i7 >>> 8) & 255);\n                    i3 = i9 + 1;\n                    bArr[i9] = (byte) (i7 & 255);\n                }\n            }\n            if (i3 != 16) {\n                if (i4 == -1) {\n                    return null;\n                }\n                int i10 = i3 - i4;\n                System.arraycopy(bArr, i4, bArr, 16 - i10, i10);\n                Arrays.fill(bArr, i4, (16 - i3) + i4, (byte) 0);\n            }\n            try {\n                return InetAddress.getByAddress(bArr);\n            } catch (UnknownHostException unused) {\n                throw new AssertionError();\n            }\n        }"} {"seed":"private static int g(String str, int i, int i2) {\n            try {\n                int parseInt = Integer.parseInt(f.a(str, i, i2, \"\", false, false, false, true));\n                if (parseInt <= 0 || parseInt > 65535) {\n                    return -1;\n                }\n                return parseInt;\n            } catch (NumberFormatException unused) {\n            }\n        }"} {"seed":"public final int a() {\n            return this.f26928e != -1 ? this.f26928e : f.a(this.f26924a);\n        }"} {"seed":"public final C0313a a(f fVar, String str) {\n            int i;\n            int a2;\n            int i2;\n            String str2 = str;\n            int a3 = m.a(str2, 0, str.length());\n            int b2 = m.b(str2, a3, str.length());\n            if (b(str2, a3, b2) != -1) {\n                if (str.regionMatches(true, a3, \"https:\", 0, 6)) {\n                    this.f26924a = \"https\";\n                    a3 += 6;\n                } else if (!str.regionMatches(true, a3, \"http:\", 0, 5)) {\n                    return C0313a.UNSUPPORTED_SCHEME;\n                } else {\n                    this.f26924a = \"http\";\n                    a3 += 5;\n                }\n            } else if (fVar == null) {\n                return C0313a.MISSING_SCHEME;\n            } else {\n                this.f26924a = fVar.f26918b;\n            }\n            int c2 = c(str2, a3, b2);\n            char c3 = '#';\n            if (c2 >= 2 || fVar == null || !fVar.f26918b.equals(this.f26924a)) {\n                int i3 = a3 + c2;\n                boolean z = false;\n                boolean z2 = false;\n                while (true) {\n                    a2 = m.a(str2, i3, b2, \"@/\\\\?#\");\n                    char charAt = a2 != b2 ? str2.charAt(a2) : 65535;\n                    if (!(charAt == 65535 || charAt == c3 || charAt == '/' || charAt == '\\\\')) {\n                        switch (charAt) {\n                            case '?':\n                                break;\n                            case '@':\n                                if (!z) {\n                                    int a4 = m.a(str2, i3, a2, ':');\n                                    int i4 = a4;\n                                    i2 = a2;\n                                    String a5 = f.a(str, i3, a4, \" \\\"':;<=>@[]^`{}|/\\\\?#\", true, false, false, true);\n                                    if (z2) {\n                                        a5 = this.f26925b + \"%40\" + a5;\n                                    }\n                                    this.f26925b = a5;\n                                    if (i4 != i2) {\n                                        this.f26926c = f.a(str, i4 + 1, i2, \" \\\"':;<=>@[]^`{}|/\\\\?#\", true, false, false, true);\n                                        z = true;\n                                    }\n                                    z2 = true;\n                                } else {\n                                    i2 = a2;\n                                    this.f26926c += \"%40\" + f.a(str, i3, i2, \" \\\"':;<=>@[]^`{}|/\\\\?#\", true, false, false, true);\n                                }\n                                i3 = i2 + 1;\n                                c3 = '#';\n                                continue;\n                        }\n                    }\n                }\n                i = a2;\n                int d2 = d(str2, i3, i);\n                int i5 = d2 + 1;\n                if (i5 < i) {\n                    this.f26927d = e(str2, i3, d2);\n                    this.f26928e = g(str2, i5, i);\n                    if (this.f26928e == -1) {\n                        return C0313a.INVALID_PORT;\n                    }\n                } else {\n                    this.f26927d = e(str2, i3, d2);\n                    this.f26928e = f.a(this.f26924a);\n                }\n                if (this.f26927d == null) {\n                    return C0313a.INVALID_HOST;\n                }\n            } else {\n                this.f26925b = fVar.b();\n                this.f26926c = fVar.c();\n                this.f26927d = fVar.f26921e;\n                this.f26928e = fVar.f26922f;\n                this.f26929f.clear();\n                this.f26929f.addAll(fVar.d());\n                if (a3 == b2 || str2.charAt(a3) == '#') {\n                    a(fVar.e());\n                }\n                i = a3;\n            }\n            int a6 = m.a(str2, i, b2, \"?#\");\n            a(str2, i, a6);\n            if (a6 < b2 && str2.charAt(a6) == '?') {\n                int a7 = m.a(str2, a6, b2, '#');\n                this.g = f.b(f.a(str, a6 + 1, a7, \" \\\"'<>#\", true, false, true, true));\n                a6 = a7;\n            }\n            if (a6 < b2 && str2.charAt(a6) == '#') {\n                this.h = f.a(str, 1 + a6, b2, \"\", true, false, false, false);\n            }\n            return C0313a.SUCCESS;\n        }"} {"seed":"public final a a(String str) {\n            this.g = str != null ? f.b(f.a(str, \" \\\"'<>#\", true, false, true, true)) : null;\n            return this;\n        }"} {"seed":"public final a a(String str, String str2) {\n            if (str != null) {\n                if (this.g == null) {\n                    this.g = new ArrayList();\n                }\n                this.g.add(f.a(str, \" \\\"'<>#&=\", false, false, true, true));\n                this.g.add(str2 != null ? f.a(str2, \" \\\"'<>#&=\", false, false, true, true) : null);\n                return this;\n            }\n            throw new IllegalArgumentException(\"name == null\");\n        }"} {"seed":"public final f b() {\n            if (this.f26924a == null) {\n                throw new IllegalStateException(\"scheme == null\");\n            } else if (this.f26927d != null) {\n                return new f(this, null);\n            } else {\n                throw new IllegalStateException(\"host == null\");\n            }\n        }"} {"seed":"public final String toString() {\n            StringBuilder sb = new StringBuilder();\n            sb.append(this.f26924a);\n            sb.append(\"://\");\n            if (!this.f26925b.isEmpty() || !this.f26926c.isEmpty()) {\n                sb.append(this.f26925b);\n                if (!this.f26926c.isEmpty()) {\n                    sb.append(':');\n                    sb.append(this.f26926c);\n                }\n                sb.append('@');\n            }\n            if (this.f26927d.indexOf(58) != -1) {\n                sb.append('[');\n                sb.append(this.f26927d);\n                sb.append(']');\n            } else {\n                sb.append(this.f26927d);\n            }\n            int a2 = a();\n            if (a2 != f.a(this.f26924a)) {\n                sb.append(':');\n                sb.append(a2);\n            }\n            f.a(sb, this.f26929f);\n            if (this.g != null) {\n                sb.append('?');\n                f.b(sb, this.g);\n            }\n            if (this.h != null) {\n                sb.append('#');\n                sb.append(this.h);\n            }\n            return sb.toString();\n        }"} {"seed":"public void insert(BackRoleVO backRoleVO);"} {"seed":"public void update(BackRoleVO backRoleVO);"} {"seed":"public void delete(String manpurview);"} {"seed":"public BackRoleVO findByPrimaryKey(String manpurview);"} {"seed":"public List<BackRoleVO> getAll();"} {"seed":"@Override\n\tpublic final STGroup getTemplateGroup(final String id) {\n\t\treturn templates.get(id);\n\t}"} {"seed":"@Override\n\tpublic final OperationSequenceCompiler getOperationSequenceCompiler(final String id) {\n\t\treturn operationSequenceCompilers.get(id);\n\t}"} {"seed":"private static final STGroup createControlFlowTemplates() {\n\t\tfinal STGroup group = new STGroup();\n\t\tregisterTieGtCommonTemplates(group);\n\t\tregisterErrorLogger(group);\n\t\tgroup.loadGroupFile(String.format(\"/%s/\", CONTROL_FLOW_GENERATOR),\n\t\t\t\tString.format(\"%stemplates/stringtemplate/ControlFlow.stg\", getCompilerURI()));\n\n\t\tregisterControlFlowModelAdaptor(group);\n\t\tregisterImportModelAdaptor(group);\n\t\treturn group;\n\t}"} {"seed":"private STGroup createPatternTemplates(final EcoreModelAdaptor ecoreModelAdaptor) {\n\t\tfinal STGroup group = new STGroup();\n\t\tregisterErrorLogger(group);\n\t\tregisterTieGtCommonTemplates(group);\n\t\tregisterDemoclesCommonTemplates(group);\n\t\tregisterRegularTemplates(group);\n\t\tregisterConstantTemplates(group);\n\t\tregisterNumberTemplates(group);\n\t\tregisterRelationOperationTemplates(group);\n\t\tregisterExpressionTemplates(group);\n\t\tregisterEmfOperationTemplates(group);\n\t\tregisterPatternCallTemplates(group);\n\t\tregisterPrioritizedPatternCallTemplates(group);\n\t\tregisterEmfDeletionTemplates(group);\n\t\tregisterEmfCreationTemplates(group);\n\t\tregisterAssignmentTemplates(group);\n\n\t\tregisterGenModelAdaptor(group);\n\t\tregisterEcoreModelAdaptor(ecoreModelAdaptor, group);\n\t\tregisterParameterModelAdaptor(group);\n\t\tregisterAdornmentModelAdaptor(group);\n\t\tregisterStringModelAdaptor(group);\n\t\tregisterImportModelAdaptor(group);\n\n\t\treturn group;\n\t}"} {"seed":"private static void registerEcoreModelAdaptor(final EcoreModelAdaptor ecoreModelAdaptor, final STGroup group) {\n\t\tgroup.registerModelAdaptor(EModelElement.class, ecoreModelAdaptor);\n\t\tgroup.registerModelAdaptor(EMFVariable.class, ecoreModelAdaptor);\n\t\tgroup.registerRenderer(EMFVariable.class, ecoreModelAdaptor);\n\t\tgroup.registerRenderer(EClassifier.class, ecoreModelAdaptor);\n\t}"} {"seed":"@SuppressWarnings(\"unchecked\")\n\tprivate static OperationSequenceCompiler createBlackOperationSequenceCompiler() {\n\t\treturn new OperationSequenceCompiler(new PatternInvocationConstraintTemplateProvider(),\n\t\t\t\tnew RelationalConstraintTemplateProvider(), new EMFTemplateProvider(),\n\t\t\t\tnew AttributeConstraintsTemplateProvider());\n\t}"} {"seed":"@SuppressWarnings(\"unchecked\")\n\tprivate static final OperationSequenceCompiler createRedOperationSequenceCompiler() {\n\t\treturn new OperationSequenceCompiler(new EMFRedTemplateProvider());\n\t}"} {"seed":"@SuppressWarnings(\"unchecked\")\n\tprivate static final OperationSequenceCompiler createGreenOperationSequenceCompiler() {\n\t\treturn new OperationSequenceCompiler(new AttributeAssignmentTemplateProvider(), new EMFGreenTemplateProvider());\n\t}"} {"seed":"@SuppressWarnings(\"unchecked\")\n\tprivate static final OperationSequenceCompiler createBindingOperationSequenceCompiler() {\n\t\treturn new OperationSequenceCompiler(new AssignmentTemplateProvider(), new EMFTemplateProvider());\n\t}"} {"seed":"@SuppressWarnings(\"unchecked\")\n\tprivate static final OperationSequenceCompiler createBindingAndBlackOperationSequenceCompiler() {\n\t\treturn new OperationSequenceCompiler(new BindingAndBlackTemplateProvider(),\n\t\t\t\tnew PatternInvocationConstraintTemplateProvider(), new RelationalConstraintTemplateProvider(),\n\t\t\t\tnew EMFTemplateProvider(), new AttributeConstraintsTemplateProvider());\n\t}"} {"seed":"@SuppressWarnings(\"unchecked\")\n\tprivate static final OperationSequenceCompiler createExpressionOperationSequenceCompiler() {\n\t\treturn new OperationSequenceCompiler(new AssignmentTemplateProvider(), new EMFTemplateProvider());\n\t}"} {"seed":"private final STGroup createBindingAndBlackTemplates(final EcoreModelAdaptor ecoreModelAdaptor) {\n\t\tfinal STGroup group = createPatternTemplates(ecoreModelAdaptor);\n\n\t\ttemplates.put(TieGtCodeGenerationConfiguration.BINDING_AND_BLACK_PATTERN_MATCHER_GENERATOR, group);\n\n\t\toperationSequenceCompilers.put(TieGtCodeGenerationConfiguration.BINDING_AND_BLACK_PATTERN_MATCHER_GENERATOR,\n\t\t\t\tcreateBindingAndBlackOperationSequenceCompiler());\n\n\t\treturn group;\n\t}"} {"seed":"private static void registerPrioritizedPatternCallTemplates(final STGroup group) {\n\t\tgroup.loadGroupFile(\"/priority/\", getCompilerURI() + \"templates/stringtemplate/PrioritizedPatternCall.stg\");\n\t}"} {"seed":"private final STGroup createBindingTemplates(final EcoreModelAdaptor ecoreModelAdaptor) {\n\t\tfinal STGroup group = createPatternTemplates(ecoreModelAdaptor);\n\n\t\ttemplates.put(TieGtCodeGenerationConfiguration.BINDING_PATTERN_MATCHER_GENERATOR, group);\n\n\t\toperationSequenceCompilers.put(TieGtCodeGenerationConfiguration.BINDING_PATTERN_MATCHER_GENERATOR,\n\t\t\t\tcreateBindingOperationSequenceCompiler());\n\n\t\treturn group;\n\t}"} {"seed":"private final STGroup createBlackTemplates(final EcoreModelAdaptor ecoreModelAdaptor,\n\t\t\tfinal AttributeConstraintsLibraryRegistry attributeConstraintLibraries) {\n\t\tfinal STGroup group = createPatternTemplates(ecoreModelAdaptor);\n\n\t\ttemplates.put(TieGtCodeGenerationConfiguration.BLACK_PATTERN_MATCHER_GENERATOR, group);\n\t\taddAttributeConstraintTemplates(group, attributeConstraintLibraries);\n\n\t\toperationSequenceCompilers.put(TieGtCodeGenerationConfiguration.BLACK_PATTERN_MATCHER_GENERATOR,\n\t\t\t\tcreateBlackOperationSequenceCompiler());\n\t\treturn group;\n\t}"} {"seed":"private static void registerRelationOperationTemplates(final STGroup group) {\n\t\tgroup.loadGroupFile(\"/core/\", getDemoclesCoreURI() + \"templates/stringtemplate/RelationalOperation.stg\");\n\t}"} {"seed":"private static void registerPatternCallTemplates(final STGroup group) {\n\t\tgroup.loadGroupFile(\"/pattern/\", getDemoclesCoreURI() + \"templates/stringtemplate/PatternCallOperation.stg\");\n\t}"} {"seed":"private final STGroup createRedTemplates(final EcoreModelAdaptor ecoreModelAdaptor) {\n\t\tfinal STGroup group = createPatternTemplates(ecoreModelAdaptor);\n\n\t\ttemplates.put(TieGtCodeGenerationConfiguration.RED_PATTERN_MATCHER_GENERATOR, group);\n\n\t\toperationSequenceCompilers.put(TieGtCodeGenerationConfiguration.RED_PATTERN_MATCHER_GENERATOR,\n\t\t\t\tcreateRedOperationSequenceCompiler());\n\t\treturn group;\n\t}"} {"seed":"private static void registerEmfDeletionTemplates(final STGroup group) {\n\t\tgroup.loadGroupFile(\"/emf-delete/\", getCompilerURI() + \"templates/stringtemplate/EMFDeleteOperation.stg\");\n\t}"} {"seed":"private final STGroup createGreenTemplates(final EcoreModelAdaptor ecoreModelAdaptor) {\n\t\tfinal STGroup group = createPatternTemplates(ecoreModelAdaptor);\n\n\t\ttemplates.put(TieGtCodeGenerationConfiguration.GREEN_PATTERN_MATCHER_GENERATOR, group);\n\n\t\toperationSequenceCompilers.put(TieGtCodeGenerationConfiguration.GREEN_PATTERN_MATCHER_GENERATOR,\n\t\t\t\tcreateGreenOperationSequenceCompiler());\n\t\treturn group;\n\t}"} {"seed":"private static void registerGenModelAdaptor(final STGroup group) {\n\t\tgroup.registerModelAdaptor(GenBase.class, new GenModelAdaptor());\n\t}"} {"seed":"private final STGroup createExpressionTemplates(final EcoreModelAdaptor ecoreModelAdaptor) {\n\t\tfinal STGroup group = createPatternTemplates(ecoreModelAdaptor);\n\n\t\ttemplates.put(TieGtCodeGenerationConfiguration.EXPRESSION_PATTERN_MATCHER_GENERATOR, group);\n\n\t\toperationSequenceCompilers.put(TieGtCodeGenerationConfiguration.EXPRESSION_PATTERN_MATCHER_GENERATOR,\n\t\t\t\tcreateExpressionOperationSequenceCompiler());\n\t\treturn group;\n\t}"} {"seed":"private static void registerAdornmentModelAdaptor(final STGroup group) {\n\t\tgroup.registerModelAdaptor(Integer.class, new AdornmentHandler());\n\t}"} {"seed":"private static void registerStringModelAdaptor(final STGroup group) {\n\t\tgroup.registerRenderer(String.class, new StringRenderer());\n\t}"} {"seed":"private static void registerControlFlowModelAdaptor(final STGroup group) {\n\t\tfinal ControlFlowModelAdaptor adaptor = new ControlFlowModelAdaptor();\n\t\tgroup.registerModelAdaptor(PatternInvocation.class, adaptor);\n\t\tgroup.registerModelAdaptor(VariableReference.class, adaptor);\n\t\tgroup.registerModelAdaptor(CFNode.class, adaptor);\n\t\tgroup.registerModelAdaptor(CFVariable.class, adaptor);\n\t}"} {"seed":"private static void registerParameterModelAdaptor(final STGroup group) {\n\t\tfinal PatternMatcherModelAdaptor parameterRenderer = new PatternMatcherModelAdaptor();\n\t\tgroup.registerModelAdaptor(GeneratorOperation.class, parameterRenderer);\n\t\tgroup.registerModelAdaptor(ConstraintVariable.class, parameterRenderer);\n\t\tgroup.registerModelAdaptor(VariableRuntime.class, parameterRenderer);\n\t}"} {"seed":"private static void registerImportModelAdaptor(final STGroup group) {\n\t\tfinal ImportHandler importRenderer = new ImportHandler();\n\t\tgroup.registerModelAdaptor(ImportManager.class, importRenderer);\n\t\tgroup.registerModelAdaptor(FullyQualifiedName.class, importRenderer);\n\t}"} {"seed":"private static void registerNumberTemplates(final STGroup group) {\n\t\tgroup.loadGroupFile(\"/democles/\", getCompilerURI() + \"templates/stringtemplate/Number.stg\");\n\t}"} {"seed":"private static void registerErrorLogger(final STGroup group) {\n\t\tgroup.setListener(new LoggingSTErrorListener(logger));\n\t}"} {"seed":"private static void registerConstantTemplates(final STGroup group) {\n\t\tgroup.loadGroupFile(\"/democles/\", getDemoclesEMFURI() + \"templates/stringtemplate/EMFConstant.stg\");\n\t}"} {"seed":"private static void registerTieGtCommonTemplates(final STGroup group) {\n\t\tgroup.loadGroupFile(\"/tiegt/\", getCompilerURI() + \"templates/stringtemplate/TieGtCommon.stg\");\n\t}"} {"seed":"private static void registerEmfOperationTemplates(final STGroup group) {\n\t\tgroup.loadGroupFile(\"/emf/\", getCompilerURI() + \"templates/stringtemplate/EMFOperation.stg\");\n\t}"} {"seed":"private static void registerEmfCreationTemplates(final STGroup group) {\n\t\tgroup.loadGroupFile(\"/emf-create/\", getCompilerURI() + \"templates/stringtemplate/EMFCreateOperation.stg\");\n\t}"} {"seed":"private static void registerDemoclesCommonTemplates(final STGroup group) {\n\t\tgroup.loadGroupFile(\"/democles/\", getDemoclesCoreURI() + \"templates/stringtemplate/DemoclesCommon.stg\");\n\t}"} {"seed":"private static void registerRegularTemplates(final STGroup group) {\n\t\tgroup.loadGroupFile(\"/regular/\", getCompilerURI() + \"templates/stringtemplate/RegularPatternMatcher.stg\");\n\t}"} {"seed":"private static void registerAssignmentTemplates(final STGroup group) {\n\t\tgroup.loadGroupFile(\"/assignment/\", getCompilerURI() + \"templates/stringtemplate/Assignment.stg\");\n\t}"} {"seed":"private static void registerExpressionTemplates(final STGroup group) {\n\t\tgroup.loadGroupFile(\"/expression/\", getCompilerURI() + \"templates/stringtemplate/ExpressionPatternMatcher.stg\");\n\t}"} {"seed":"private static String getCompilerURI() {\n\t\tfinal String pluginId = WorkspaceHelper.getPluginId(TieGtTemplateConfiguration.class);\n\t\treturn \"platform:/plugin/\" + pluginId + \"/\";\n\t}"} {"seed":"private static String getDemoclesCoreURI() {\n\t\treturn \"platform:/plugin/org.gervarro.democles.codegen.stringtemplate/\";\n\t}"} {"seed":"private static String getDemoclesEMFURI() {\n\t\treturn \"platform:/plugin/org.gervarro.democles.codegen.emf/\";\n\t}"} {"seed":"/**\n\t * Adds the templates for user-defined constraints to the template group for\n\t * black patterns (i.e., patterns that represent preserved variables).\n\t * \n\t * @param group                        the template group at which the libraries\n\t *                                     shall be registered\n\t *\n\t * @param attributeConstraintLibraries the library containing user-defined\n\t *                                     attribute constraints and operations\n\t */\nprivate void addAttributeConstraintTemplates(final STGroup group,\n\t\t\tfinal AttributeConstraintsLibraryRegistry attributeConstraintLibraries) {\n\t\tfor (final URI uri : attributeConstraintLibraries.getUris()) {\n\t\t\tfinal AttributeConstraintLibrary library = attributeConstraintLibraries.getLibrary(uri);\n\t\t\tfor (final OperationSpecificationGroup operationSpecificationGroup : library.getOperationSpecifications()) {\n\n\t\t\t\tif (!operationSpecificationGroup.isTemplateGroupGenerated()) {\n\t\t\t\t\toperationSpecificationGroup.gernerateTemplate();\n\t\t\t\t}\n\n\t\t\t\tfinal STGroup newGroup = new STGroupString(\"someName\",\n\t\t\t\t\t\toperationSpecificationGroup.getTemplateGroupString(),\n\t\t\t\t\t\tAttributeConstraintsOperationActivator.OUTER_ST_DELIMITER,\n\t\t\t\t\t\tAttributeConstraintsOperationActivator.OUTER_ST_DELIMITER);\n\n\t\t\t\tfor (final String templateName : newGroup.getTemplateNames()) {\n\t\t\t\t\tfinal ST template = newGroup.getInstanceOf(templateName);\n\t\t\t\t\tfinal String fullyQualifiedTemplateName = \"/\" + library.getPrefix() + \"/\"\n\t\t\t\t\t\t\t+ operationSpecificationGroup.getOperationIdentifier() + template.getName();\n\t\t\t\t\tgroup.rawDefineTemplate(fullyQualifiedTemplateName, template.impl, null);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}"} {"seed":"public void doGet( HttpServletRequest request, HttpServletResponse response ) throws ServletException, IOException{\n\n        AuthService.logOut(request);\n\n        FlashService.addMessage(FlashService.FlashLevel.SUCCESS, Config.MESSAGE_LOGOUT);\n        \n        response.sendRedirect(Config.ROUTE_SIGNIN);\n    }"} {"seed":"private void initUI() {\n\t\tsetLayout(new MigLayout(\"\", \"[grow][20%][20%][grow]\", \n\t\t\t\t\"[8%]2%[4%]2%[4%]2%[4%]2%[4%]2%[4%]2%[4%]2%[4%]2%[4%]2%[4%]2%[4%][grow]\"));\t\t\n\t\tlblP14n1.setFont(titlefont);\n\t\tadd(lblP14n1, \"flowy, cell 1 0 2 1,alignx center,growy\");\t\t\n\t\tadd(lblP14n2, \"cell 1 1,grow\");\t\t\n\t\ttxtP14n1.setText(\"\");\n\t\tadd(txtP14n1, \"cell 2 1,grow\");\n\t\ttxtP14n1.setColumns(10);\t\t\t\n\t\tbtnP14n1.setEnabled(true);\n\t\tadd(btnP14n1, \"cell 1 2 2 1,alignx center\");\t\t\t\n\t\tadd(lblP14n3, \"cell 1 3,grow\");\t\t\n\t\ttxtP14n2.setText(\"\");\n\t\tadd(txtP14n2, \"cell 2 3,grow\");\n\t\ttxtP14n2.setColumns(10);\t\n\t\ttxtP14n2.setEnabled(false);\t\t\n\t\tbtnP14n2.setEnabled(false);\n\t\tadd(btnP14n2, \"cell 1 4,alignx center\");\n\t\tbtnP14n5.setEnabled(false);\n\t\tadd(btnP14n5, \"cell 2 4,alignx center\");  //\"Weiter\"\n\t\tadd(lblP14n4, \"cell 1 5,grow\");\t\t\n\t\ttxtP14n3.setText(\"\");\n\t\tadd(txtP14n3, \"cell 2 5,grow\");\n\t\ttxtP14n3.setColumns(10);\t\n\t\ttxtP14n3.setEnabled(false);\t\t\n\t\tbtnP14n3.setEnabled(false);\n\t\tadd(btnP14n3, \"cell 1 6,alignx center\");\t\t\n\t\tbtnP14n4.setEnabled(false);\n\t\tadd(btnP14n4, \"cell 2 6,alignx center\");\t\t\t\n\t\tadd(lblP14n5, \"cell 0 7 4 1,alignx center\");\t\n\t\t\n\t\tbutton1();\n\t\tbutton2();\n\t\tbutton3();\n\t\tbutton4();\n\t\tbutton5();"} {"seed":"private void button1() {\n\t\tbtnP14n1.addActionListener(new ActionListener() {\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent arg0) {\n\t\t\t\tString nameILCA = txtP14n1.getText();\n\t\t\t\tboolean inputOK = true;\n\t\t\t\tif (\"\".equals(nameILCA)) {\n\t\t\t\t\tlblP14n5.setText(bundle.getString(\"stat02\"));\n\t\t\t\t\tinputOK = false;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tif (LCIAMethod.containsName(nameILCA)) {\n\t\t\t\t\tlblP14n5.setText(bundle.getString(\"stat03\"));\n\t\t\t\t\tinputOK = false;\n\t\t\t\t}\n\t\t\t\tif (inputOK) {\n\t\t\t\t\tLCIAMethod.instance(nameILCA);\n\t\t\t\t\ttxtP14n1.setEnabled(false);\n\t\t\t\t\ttxtP14n2.setEnabled(true);\n\t\t\t\t\ttxtP14n3.setEnabled(true);\n\t\t\t\t\tbtnP14n1.setEnabled(false);\n\t\t\t\t\tbtnP14n5.setEnabled(false);\n\t\t\t\t\tbtnP14n2.setEnabled(true);\n\t\t\t\t\tbtnP14n3.setEnabled(true);\n\t\t\t\t\tlblP14n5.setText(bundle.getString(\"stat28\") + \n\t\t\t\t\t\t\tLCIAMethod.instance(nameILCA).categoryList().size() +\n\t\t\t\t\t\t\tbundle.getString(\"stat29\") +\n\t\t\t\t\t\t\tLCIAMethod.instance(nameILCA).getFactorSet().size() +\n\t\t\t\t\t\t\tbundle.getString(\"stat05\"));\n\t\t\t\t}\t\t\t\n\t\t\t}\t\t\t\n\t\t});"} {"seed":"private void button2() {\n\t\tbtnP14n2.addActionListener(new ActionListener() {\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tString nameILCA = txtP14n1.getText();\n\t\t\t\tString nameWK = txtP14n2.getText();\n\t\t\t\tboolean inputOK = true;\n\t\t\t\tif (!ImpactCategory.containsName(nameWK)) {\n\t\t\t\t\tlblP14n5.setText(bundle.getString(\"stat27\"));\n\t\t\t\t\tinputOK = false;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tif (inputOK) {\n\t\t\t\t\tLCIAMethod.instance(nameILCA).addCategory(ImpactCategory.getInstance(nameWK));\n\t\t\t\t\tbtnP14n4.setEnabled(true);\n\t\t\t\t\tbtnP14n5.setEnabled(true);\n\t\t\t\t\tlblP14n5.setText(bundle.getString(\"stat28\") + \n\t\t\t\t\t\t\tLCIAMethod.instance(nameILCA).categoryList().size() +\n\t\t\t\t\t\t\tbundle.getString(\"stat29\") +\n\t\t\t\t\t\t\tLCIAMethod.instance(nameILCA).getFactorSet().size() +\n\t\t\t\t\t\t\tbundle.getString(\"stat05\"));\n\t\t\t\t\ttxtP14n2.setText(\"\");//Wirkungskategorie löschen\n\t\t\t\t}\t\t\t\n\t\t\t}\n\t\t});"} {"seed":"private void button3() {\n\t\tbtnP14n3.addActionListener(new ActionListener() {\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tString nameILCA = txtP14n1.getText();\n\t\t\t\tString nameCF = txtP14n3.getText();\n\t\t\t\tboolean inputOK = true;\n\t\t\t\tif (!CharacFactor.containsName(nameCF)) {\n\t\t\t\t\tlblP14n5.setText(bundle.getString(\"stat30\"));\n\t\t\t\t\tinputOK = false;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tif (inputOK) {\n\t\t\t\t\tLCIAMethod.instance(nameILCA).addFactor(CharacFactor.getInstance(nameCF));\n\t\t\t\t\tbtnP14n4.setEnabled(true);\t\t\t\t\n\t\t\t\t\tlblP14n5.setText(bundle.getString(\"stat28\") + \n\t\t\t\t\t\t\tLCIAMethod.instance(nameILCA).categoryList().size() +\n\t\t\t\t\t\t\tbundle.getString(\"stat29\") +\n\t\t\t\t\t\t\tLCIAMethod.instance(nameILCA).getFactorSet().size() +\n\t\t\t\t\t\t\tbundle.getString(\"stat05\"));\n\t\t\t\t\ttxtP14n3.setText(\"\");//Charakterisierungsfaktor löschen\n\t\t\t\t}\n\t\t\t}\n\t\t})"} {"seed":"private void button4() {\n\t\tbtnP14n4.addActionListener(new ActionListener() {\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tbtnP14n1.setEnabled(true);\n\t\t\t\tbtnP14n5.setEnabled(false);\n\t\t\t\tbtnP14n2.setEnabled(false);\n\t\t\t\tbtnP14n3.setEnabled(false);\n\t\t\t\tbtnP14n4.setEnabled(false);\n\t\t\t\ttxtP14n1.setEnabled(true);\n\t\t\t\ttxtP14n2.setEnabled(false);\n\t\t\t\ttxtP14n3.setEnabled(false);\n\t\t\t\ttxtP14n1.setText(\"\");\n\t\t\t\ttxtP14n2.setText(\"\");\n\t\t\t\ttxtP14n3.setText(\"\");\n\t\t\t\tlblP14n5.setText(bundle.getString(\"stat01\"));\n\t\t\t}\n\t\t});"} {"seed":"private void button5() {\n\t\tbtnP14n5.addActionListener(new ActionListener() {\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tbtnP14n2.setEnabled(false);\n\t\t\ttxtP14n2.setEnabled(false);\n\t\t\tbtnP14n5.setEnabled(false);\n\t\t\t}\n\t\t\t});"} {"seed":"n\n\n\t@Override\n\tpublic void showSelf() {\n\t\tl = GUILanguage.getChosenLanguage();\n\t\tlocale = MultiVaLCA.LANGUAGES.get(l);\n\t\tbaseName = \"de.unistuttgart.iwb.multivalcagui.messages\";\n\t\tbundle = ResourceBundle.getBundle(baseName, locale);\n\t\t\n\t\ttxtP14n1.setFont(generalfont);\n\t\ttxtP14n2.setFont(generalfont);\n\t\ttxtP14n3.setFont(generalfont);\n\t\tlblP14n1.setFont(titlefont);\n\t\tlblP14n2.setFont(generalfont);\n\t\tlblP14n3.setFont(generalfont);\n\t\tlblP14n4.setFont(generalfont);\n\t\tlblP14n5.setFont(generalfont);\n\t\tbtnP14n1.setFont(generalfont);\n\t\tbtnP14n2.setFont(generalfont);\n\t\tbtnP14n3.setFont(generalfont);\n\t\tbtnP14n4.setFont(generalfont);\n\t\tbtnP14n5.setFont(generalfont);\n\t\t\n\t\tlblP14n1.setText(bundle.getString(\"p14n1\"));\n\t\tlblP14n2.setText(bundle.getString(\"p14n2\"));\n\t\tlblP14n3.setText(bundle.getString(\"mp14\"));\n\t\tlblP14n4.setText(bundle.getString(\"mp15\"));\n\t\tlblP14n5.setText(bundle.getString(\"stat01\"));\t\t\t\n\t\tbtnP14n1.setText(bundle.getString(\"bt01\"));\n\t\tbtnP14n2.setText(bundle.getString(\"bt11\"));\t\n\t\tbtnP14n3.setText(bundle.getString(\"bt11\"));\t\n\t\tbtnP14n4.setText(bundle.getString(\"bt04\"));\n\t\tbtnP14n5.setText(bundle.getString(\"bt07\"))"} {"seed":"@Override\n\t\t\tpublic void actionPerformed(ActionEvent arg0) {\n\t\t\t\tString nameILCA = txtP14n1.getText();\n\t\t\t\tboolean inputOK = true;\n\t\t\t\tif (\"\".equals(nameILCA)) {\n\t\t\t\t\tlblP14n5.setText(bundle.getString(\"stat02\"));\n\t\t\t\t\tinputOK = false;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tif (LCIAMethod.containsName(nameILCA)) {\n\t\t\t\t\tlblP14n5.setText(bundle.getString(\"stat03\"));\n\t\t\t\t\tinputOK = false;\n\t\t\t\t}\n\t\t\t\tif (inputOK) {\n\t\t\t\t\tLCIAMethod.instance(nameILCA);\n\t\t\t\t\ttxtP14n1.setEnabled(false);\n\t\t\t\t\ttxtP14n2.setEnabled(true);\n\t\t\t\t\ttxtP14n3.setEnabled(true);\n\t\t\t\t\tbtnP14n1.setEnabled(false);\n\t\t\t\t\tbtnP14n5.setEnabled(false);\n\t\t\t\t\tbtnP14n2.setEnabled(true);\n\t\t\t\t\tbtnP14n3.setEnabled(true);\n\t\t\t\t\tlblP14n5.setText(bundle.getString(\"stat28\") + \n\t\t\t\t\t\t\tLCIAMethod.instance(nameILCA).categoryList().size() +\n\t\t\t\t\t\t\tbundle.getString(\"stat29\") +\n\t\t\t\t\t\t\tLCIAMethod.instance(nameILCA).getFactorSet().size() +\n\t\t\t\t\t\t\tbundle.getString(\"stat05\"));\n\t\t\t\t}"} {"seed":"@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tString nameILCA = txtP14n1.getText();\n\t\t\t\tString nameWK = txtP14n2.getText();\n\t\t\t\tboolean inputOK = true;\n\t\t\t\tif (!ImpactCategory.containsName(nameWK)) {\n\t\t\t\t\tlblP14n5.setText(bundle.getString(\"stat27\"));\n\t\t\t\t\tinputOK = false;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tif (inputOK) {\n\t\t\t\t\tLCIAMethod.instance(nameILCA).addCategory(ImpactCategory.getInstance(nameWK));\n\t\t\t\t\tbtnP14n4.setEnabled(true);\n\t\t\t\t\tbtnP14n5.setEnabled(true);\n\t\t\t\t\tlblP14n5.setText(bundle.getString(\"stat28\") + \n\t\t\t\t\t\t\tLCIAMethod.instance(nameILCA).categoryList().size() +\n\t\t\t\t\t\t\tbundle.getString(\"stat29\") +\n\t\t\t\t\t\t\tLCIAMethod.instance(nameILCA).getFactorSet().size() +\n\t\t\t\t\t\t\tbundle.getString(\"stat05\"));\n\t\t\t\t\ttxtP14n2.setText(\"\");//Wirkungskategorie löschen\n\t\t\t\t}"} {"seed":"@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tString nameILCA = txtP14n1.getText();\n\t\t\t\tString nameCF = txtP14n3.getText();\n\t\t\t\tboolean inputOK = true;\n\t\t\t\tif (!CharacFactor.containsName(nameCF)) {\n\t\t\t\t\tlblP14n5.setText(bundle.getString(\"stat30\"));\n\t\t\t\t\tinputOK = false;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tif (inputOK) {\n\t\t\t\t\tLCIAMethod.instance(nameILCA).addFactor(CharacFactor.getInstance(nameCF));\n\t\t\t\t\tbtnP14n4.setEnabled(true);\t\t\t\t\n\t\t\t\t\tlblP14n5.setText(bundle.getString(\"stat28\") + \n\t\t\t\t\t\t\tLCIAMethod.instance(nameILCA).categoryList().size() +\n\t\t\t\t\t\t\tbundle.getString(\"stat29\") +\n\t\t\t\t\t\t\tLCIAMethod.instance(nameILCA).getFactorSet().size() +\n\t\t\t\t\t\t\tbundle.getString(\"stat05\"));\n\t\t\t\t\ttxtP14n3.setText(\"\");//Charakterisierungsfaktor löschen\n\t\t\t\t}"} {"seed":"@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tbtnP14n1.setEnabled(true);\n\t\t\t\tbtnP14n5.setEnabled(false);\n\t\t\t\tbtnP14n2.setEnabled(false);\n\t\t\t\tbtnP14n3.setEnabled(false);\n\t\t\t\tbtnP14n4.setEnabled(false);\n\t\t\t\ttxtP14n1.setEnabled(true);\n\t\t\t\ttxtP14n2.setEnabled(false);\n\t\t\t\ttxtP14n3.setEnabled(false);\n\t\t\t\ttxtP14n1.setText(\"\");\n\t\t\t\ttxtP14n2.setText(\"\");\n\t\t\t\ttxtP14n3.setText(\"\");\n\t\t\t\tlblP14n5.setText(bundle.getString(\"stat01\"));"} {"seed":"@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tbtnP14n2.setEnabled(false);\n\t\t\ttxtP14n2.setEnabled(false);\n\t\t\tbtnP14n5.setEnabled(false);"} {"seed":"@Override\n    public boolean checkFineCoarsePermissions() {\n\n        if (ContextCompat.checkSelfPermission(context, FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\n            if (ContextCompat.checkSelfPermission(context, COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\n                return true;\n            } else {\n                return false;\n            }\n        }else{\n            return false;\n        }\n    }"} {"seed":"/**\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @generated\n     */\n@Override\n    protected EClass eStaticClass() {\n        return CorePackage.Literals.CORE_IMPACT_MODEL;\n    }"} {"seed":"@Override\n    public void place() {\n        placed = true;\n    }"} {"seed":"@Override\n    public boolean CheckCollision(int x, int y, int radius) {\n        //LEFT EDGE\n        Log.d(\"RADIUS\", Integer.toString(radius));\n        Log.d(\"LEFT\", Integer.toString(HelperLibrary.ShortestDistance(x, y, topLeft.x, topLeft.y, bottomLeft.x, bottomLeft.y)));\n        Log.d(\"RIGHT\", Integer.toString(HelperLibrary.ShortestDistance(x, y, topRight.x, topRight.y, bottomRight.x,bottomRight.y)));\n        Log.d(\"TOP\", Integer.toString(HelperLibrary.ShortestDistance(x, y, topLeft.x, topLeft.y, topRight.x,topRight.y)));\n        Log.d(\"BOTTOM\", Integer.toString(HelperLibrary.ShortestDistance(x, y, bottomLeft.x, bottomLeft.y, bottomRight.x,bottomRight.y)));\n        Log.d(\"*******\",\"***************************************************************************************************\");\n        if (HelperLibrary.ShortestDistance(x, y, topLeft.x, topLeft.y, bottomLeft.x, bottomLeft.y) <= radius){\n            return true;\n        }\n        //RIGHT EDGE\n        else if(HelperLibrary.ShortestDistance(x, y, topRight.x, topRight.y, bottomRight.x,bottomRight.y) <= radius){\n            return  true;\n        }\n        //TOP EDGE\n        else if(HelperLibrary.ShortestDistance(x, y, topLeft.x, topLeft.y, topRight.x,topRight.y) <= radius){\n            return  true;\n        }\n        //BOTTOM EDGE\n        else if(HelperLibrary.ShortestDistance(x, y, bottomLeft.x, bottomLeft.y, bottomRight.x,bottomRight.y) <= radius){\n            return  true;\n        }\n        return false;\n\n    }"} {"seed":"@Override\n    public void draw(Canvas canvas) {\n        canvas.drawRect(rectangle, paint);\n    }"} {"seed":"@Override\n    public void update() {\n        int left = x - Constants.USEROBJECT_WIDTH / 2;\n        int top = y - Constants.USEROBJECT_WIDTH / 2;\n        int right = x + Constants.USEROBJECT_WIDTH / 2;\n        int bottom = y + Constants.USEROBJECT_WIDTH / 2;\n        rectangle.set(left, top, right, bottom);\n        topLeft.x = left;\n        topLeft.y = top;\n        bottomLeft.x = left;\n        bottomLeft.y = bottom;\n        bottomRight.x = right;\n        bottomRight.y = bottom;\n        topRight.x = right;\n        topRight.y = top;\n    }"} {"seed":"@Override\n    public void set(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }"} {"seed":"public static void main(String[] args) {\n        SpringApplication.run(OAuth2ServerApplication.class,args);"} {"seed":"/**\n     * Set the site message\n     * \n     * @param request\n     *            the HTTP request\n     * @param strMessage\n     *            the message\n     * @param nTypeMessage\n     *            the message type\n     * @param strUrlReturn\n     *            the url return\n     * @throws SiteMessageException\n     *             the site message\n     */\nvoid setSiteMessage( HttpServletRequest request, String strMessage, int nTypeMessage, String strUrlReturn ) throws SiteMessageException;"} {"seed":"/**\n     * Create an reply\n     * \n     * @param reply\n     */\n@Transactional( WorkflowPlugin.BEAN_TRANSACTION_MANAGER )\n    void create( Workflow reply );"} {"seed":"/**\n     * Update an reply\n     * \n     * @param reply\n     */\n@Transactional( WorkflowPlugin.BEAN_TRANSACTION_MANAGER )\n    void update( Workflow reply );"} {"seed":"/**\n     * Find an reply\n     * \n     * @param nIdHistory\n     *            the id history\n     * @param nIdTask\n     *            the id task\n     * @return a reply\n     */\nWorkflow find( int nIdTask );"} {"seed":"/**\n     * Find replys by a given id task\n     * \n     * @param nIdTask\n     *            the id task\n     * @return the list of replys\n     */\nList<Workflow> findByIdTask( int nIdTask );"} {"seed":"/**\n     * Remove an reply by id task\n     * \n     * @param nIdTask\n     *            the id task\n     */\n@Transactional( WorkflowPlugin.BEAN_TRANSACTION_MANAGER )\n    void removeByIdTask( int nIdTask );"} {"seed":"public void on(){System.out.println(\"Light is on\");}"} {"seed":"public void off(){System.out.println(\"Light is off\");}"} {"seed":"/** Called when the activity is first created. */\npublic static SwipeyActivity getActivity() {\n\t\treturn sActivity;\n\t}"} {"seed":"/** Called when the activity is first created. */\n@Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n        \n\t\t\n\n        mViewPager = (ViewPager) findViewById(R.id.viewpager);\n\t\tmTabs = (SwipeyTabs) findViewById(R.id.swipeytabs);\n\t\t\n\t\tmTitles = getResources().getStringArray(R.array.my_apps);\n\t\tSwipeyTabsPagerAdapter adapter = new SwipeyTabsPagerAdapter(getApplicationContext(), getSupportFragmentManager());\n\t\tmViewPager.setAdapter(adapter);\n\t\tmTabs.setAdapter(adapter);\n\t\tmTabs.setHandler(mOnTabChangedHandler);\n\t\tmViewPager.setOnPageChangeListener(mTabs);\n\t\tmViewPager.setOffscreenPageLimit(2);\n\t\tmViewPager.setCurrentItem(TAB_2);\n\n    }"} {"seed":"@Override\n    \tpublic Fragment getItem(int position) {\n\t\t\treturn SwipeyFragment.newInstance(position);\n\n    \t\t\n    \t}"} {"seed":"@Override\n    \tpublic int getCount() {\n    \t\treturn mTitles.length;\n    \t}"} {"seed":"public TextView getTab(final int position, SwipeyTabs root) {\n    \t\tTextView view = (TextView) LayoutInflater.from(mContext).inflate(\n    \t\t\t\tR.layout.swipey_tab_indicator, root, false);\n    \t\tview.setText(mTitles[position]);\n    \t\n    \t\tview.setTextSize(20);\n    \t\tview.setOnClickListener(new OnClickListener() {\n    \t\t\tpublic void onClick(View v) {\n    \t\t\t\tmViewPager.setCurrentItem(position);\n    \t\t\t}\n    \t\t});\n\n    \t\treturn view;\n    \t}"} {"seed":"@Override\n\t\tpublic void handleMessage(Message msg) {\n\t\t\tswitch (mViewPager.getCurrentItem()) {\n\t\t\tcase TAB_1:\n\t\t\t\t//Toast.makeText(getApplicationContext(),mTitles[0], Toast.LENGTH_SHORT).show();\n\t\t\t\tbreak;\n\t\t\tcase TAB_2:\n\t\t\t\t//Toast.makeText(getApplicationContext(), mTitles[1], Toast.LENGTH_SHORT).show();\n                break;\n\t\t\tcase TAB_3:\n\t\t\t\t//Toast.makeText(getApplicationContext(), mTitles[2], Toast.LENGTH_SHORT).show();\n\t\t\tcase TAB_4:\n\t\t\t\t//Toast.makeText(getApplicationContext(), mTitles[3], Toast.LENGTH_SHORT).show();\n\t\t\tcase TAB_5:\n\t\t\t\t//Toast.makeText(getApplicationContext(), mTitles[4], Toast.LENGTH_SHORT).show();\n\t\t\tcase TAB_6:\n\t\t\t\t//Toast.makeText(getApplicationContext(), mTitles[5], Toast.LENGTH_SHORT).show();\n\t\t\tcase TAB_7:\n\t\t\t\t//Toast.makeText(getApplicationContext(), mTitles[6], Toast.LENGTH_SHORT).show();\n\t\n\t\n  \n\t\t\t\t\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}"} {"seed":"public void onClick(View v) {\n    \t\t\t\tmViewPager.setCurrentItem(position);\n    \t\t\t}"} {"seed":"@GetMapping\n    public Object work() {\n        return service.get(\"work\");\n    }"} {"seed":"@Override\n    public int getID() {\n        return idAluno;"} {"seed":"@Override\n    public String getNome() {\n        return nomeAluno;"} {"seed":"public int getReservaLimite(){\n        return ReservaLimite;"} {"seed":"public int getAluguelLimite(){\n        return AluguelLimite;"} {"seed":"public ArrayList getReserva(){\n        return Reserva;"} {"seed":"public ArrayList getAlugar(){\n        return Alugar;"} {"seed":"public ArrayList getHistorico(){\n        return HistoricoAluguel;"} {"seed":"@Override\n    public void setNome(String Nome) {\n        this.nomeAluno = Nome;"} {"seed":"@Override\n    public void setID(int id) {\n        this.idAluno = id;"} {"seed":"public void setReservaLimite(int limite){\n        this.ReservaLimite += limite;"} {"seed":"public void setAluguelLimite(int limite){\n        this.AluguelLimite += limite;"} {"seed":"public void addReserva(int id_livro){\n        this.Reserva.add(id_livro);"} {"seed":"public void addAlugar(int id_livro){\n        this.Alugar.add(id_livro);"} {"seed":"public void decrementaReserva(int id_livro){\n        this.Reserva.remove(new Integer(id_livro));"} {"seed":"public void decrementaAlugar(int id_livro){\n        this.Alugar.remove(new Integer(id_livro));"} {"seed":"public void addHistorico(int id_livro){\n        this.HistoricoAluguel.add(id_livro);"} {"seed":"@Override\n    public ArrayList getConteudo() {\n        ArrayList Conteudo = new ArrayList();\n        Conteudo.add(getID());\n        Conteudo.add(getNome());\n        Conteudo.add(this.ReservaLimite);\n        Conteudo.add(this.AluguelLimite);\n        return Conteudo;"} {"seed":"public int getCodVenda() {\n\t\treturn codVenda;\n\t}"} {"seed":"public void setCodVenda(int codVenda) {\n\t\tthis.codVenda = codVenda;\n\t}"} {"seed":"public int getCodProduto() {\n\t\treturn codProduto;\n\t}"} {"seed":"public void setCodProduto(int codProduto) {\n\t\tthis.codProduto = codProduto;\n\t}"} {"seed":"public double getQuantidade() {\n\t\treturn quantidade;\n\t}"} {"seed":"public void setQuantidade(double quantidade) {\n\t\tthis.quantidade = quantidade;\n\t}"} {"seed":"public double getDesconto() {\n\t\treturn desconto;\n\t}"} {"seed":"public void setDesconto(double desconto) {\n\t\tthis.desconto = desconto;\n\t}"} {"seed":"public Produto getProduto() {\n\t\treturn produto;\n\t}"} {"seed":"public void setProduto(Produto produto) {\n\t\tthis.produto = produto;\n\t}"} {"seed":"public Venda getVenda() {\n\t\treturn venda;\n\t}"} {"seed":"public void setVenda(Venda venda) {\n\t\tthis.venda = venda;\n\t}"} {"seed":"@Query(\"{token:'?0'}\")\n\tAuthDAO findAuthByToken(String token);"} {"seed":"public String adjustLine(String line, int count, int wordCount, int maxWidth){\n        if (wordCount == 1){ // only one word in a line, left align\n            while (count < maxWidth){\n                line+=\" \";\n                count++;\n            }\n            return line;\n        }else{ // even spaces\n            int remainSpace = maxWidth-count;\n            int spot = wordCount-1;\n            if (remainSpace % spot == 0){ // can even spaces\n                int space_num = remainSpace/spot;\n                String[] array = line.split(\" \");\n                String newLine = \"\";\n                for (int i = 0; i < array.length; i++){\n                    newLine+=array[i];\n                    if (i != array.length-1){\n                        for (int j = 0; j <= space_num; j++){\n                            newLine+=\" \";\n                        }\n                    }\n                }\n                return newLine;\n            }else{ // can't even spaces, asign one more space on the left\n                int space_num = remainSpace/spot;\n                int space_remain = remainSpace%spot;\n                String[] array = line.split(\" \");\n                String newLine = \"\";\n                for (int i = 0; i < array.length; i++){\n                    newLine+=array[i];\n                    if (i != array.length-1){\n                        for (int j = 0; j <= space_num; j++){\n                            newLine+=\" \";\n                        }\n                        if (space_remain > 0){\n                            newLine+=\" \";\n                            space_remain--;\n                        }\n                    }\n                }\n                return newLine;\n            }\n        }\n    }"} {"seed":"public List<String> fullJustify(String[] words, int maxWidth) {\n        List<String> res = new ArrayList<String>();\n        String line = \"\";\n        if (words.length == 1 && words[0].length() == 0 ){\n            for (int i = 0; i < maxWidth; i++){\n                line+=\" \";\n            }\n            res.add(line);\n            return res;\n        }\n        if (maxWidth == 0){\n            res.add(line);\n            return res;\n        }\n        int count = 0;\n        int wordCount = 0;\n        int linewordCount = 0;\n        while (wordCount < words.length){\n            String cur = words[wordCount];\n            if (linewordCount!= 0 && 1+count+cur.length() > maxWidth){\n                String adjustLine = adjustLine(line,count,linewordCount,maxWidth);\n                res.add(adjustLine);\n                count=0;\n                linewordCount=0;\n                line=\"\";\n            }else{ // linewordCount == 0 || enough space to get a space and next word\n                if (linewordCount != 0){\n                    count++;\n                    line+=\" \";\n                }\n                count+=cur.length();\n                line+=cur;\n                wordCount++;\n                linewordCount++;\n            }\n        }\n        if (line.length() > 0){\n            String adjustLine = adjustLine(line,count,1,maxWidth);\n            res.add(adjustLine);\n        }\n        return res;\n    }"} {"seed":"@Test\n    public void testExcute() {\n        initialize();\n        Graph graph = new Graph(nodes, edges);\n        DijkstraAlgorithm dijkstra = new DijkstraAlgorithm(graph, nodes.get(0), nodes.get(5));\n        dijkstra.execute();\n        LinkedList<Vertex> path = dijkstra.getPath();\n        \n        assertNotNull(path);\n        assertTrue(path.size() > 0);\n        \n        for(Vertex v : path) {\n            System.out.println(v.toString());\n        }\n    }"} {"seed":"private void initialize() {\n        nodes = new ArrayList<Vertex> ();\n        edges = new ArrayList<Edge> ();\n        \n        for(int i=0; i< 6 ; i++) {\n            nodes.add(new Vertex(\"Node_\" + i, \"Node_\" + i));\n        }\n        \n        edges.add(new Edge(\"edge_0\", nodes.get(0),nodes.get(2),3));\n        edges.add(new Edge(\"edge_1\", nodes.get(0),nodes.get(1),2));\n        edges.add(new Edge(\"edge_2\", nodes.get(2),nodes.get(5),10));\n        edges.add(new Edge(\"edge_3\", nodes.get(2),nodes.get(3),2));\n        edges.add(new Edge(\"edge_4\", nodes.get(2),nodes.get(1),2));\n        edges.add(new Edge(\"edge_5\", nodes.get(1),nodes.get(3),5));\n        edges.add(new Edge(\"edge_6\", nodes.get(1),nodes.get(4),5));\n        edges.add(new Edge(\"edge_7\", nodes.get(3),nodes.get(4),3));\n        edges.add(new Edge(\"edge_8\", nodes.get(4),nodes.get(5),3));\n        edges.add(new Edge(\"edge_9\", nodes.get(3),nodes.get(5),1));\n    }"} {"seed":"@Override\n    public void UCI()\n    {\n        out.println(\"id name vegapunk\");\n        out.println(\"id author Yang Wang\");\n        out.println(\"uciok\");\n    }"} {"seed":"@Override\n    public void isReady()\n    {\n        out.println(\"readyok\");\n    }"} {"seed":"@Override\n    public void debug(boolean on)\n    {\n        engine.setDebugging(on);\n    }"} {"seed":"@Override\n    public void setOption(SetOptionCommand cmd)\n    {\n        log.warn(\"Unable to set option '{}' with value '{}'\", cmd.getName(), cmd.getValue());\n    }"} {"seed":"@Override\n    public void registerLater()\n    {\n        throw new UnsupportedOperationException();\n    }"} {"seed":"@Override\n    public void register(RegisterCommand cmd)\n    {\n        throw new UnsupportedOperationException();\n    }"} {"seed":"@Override\n    public void ucinewgame()\n    {\n        engine.newGame();\n    }"} {"seed":"@Override\n    public void position(PositionCommand cmd)\n    {\n        if (\"startpos\".equals(cmd.getPosition()))\n        {\n            engine.newGame();\n            for (String move : cmd.getMoves())\n            {\n                engine.playMove(move);\n            }\n        }\n        else\n        {\n            engine.setBoard(cmd.getPosition());\n        }\n\n        log.info(\"board: \" + engine.getGameState().getBoard());\n    }"} {"seed":"@Override\n    public void go(GoCommand cmd)\n    {\n        String bestMove = null;\n\n        if (cmd.isPonder())\n        {\n            throw new IllegalArgumentException(\"Engine does not support ponder yet\");\n        }\n        else if (cmd.getSearchMoves() != null)\n        {\n            throw new IllegalArgumentException(\"Cannot do searchmoves yet\");\n        }\n        else if (cmd.getMate() != null)\n        {\n            throw new IllegalArgumentException(\"Cannot search for mate yet\");\n        }\n        else if (cmd.getNodes() != null)\n        {\n            throw new IllegalArgumentException(\"Cannot search for nodes yet\");\n        }\n        else if (cmd.isInfinite())\n        {\n            bestMove = engine.search(SearchParameters.builder().timeLimit(Duration.ofDays(Long.MAX_VALUE)).build());\n        }\n        else\n        {\n            Duration duration = timingStrategy.decideSearchTime(engine.getGameState(), cmd);\n            bestMove = engine.search(SearchParameters.builder().timeLimit(duration).build());\n        }\n\n        if (bestMove != null)\n        {\n            out.println(\"bestmove \" + bestMove);\n        }\n    }"} {"seed":"@Override\n    public void stop()\n    {\n        String move = engine.stopSearch();\n        out.println(\"bestmove \" + move);\n    }"} {"seed":"@Override\n    public void ponderHit()\n    {\n        throw new UnsupportedOperationException();\n    }"} {"seed":"@Override\n    public void quit()\n    {\n        System.exit(0);\n    }"} {"seed":"List<Object[]> getReportData(Integer vnCode);"} {"seed":"Long getReportSumOfWorkData(Integer vnCode);"} {"seed":"List<Object[]> selectQueryForResultListWithMoreColumnWithoutParameter(String query);"} {"seed":"List<T> selectQueryForResultListWithoutParameter(String query);"} {"seed":"Object selectQueryForSingleResultWithoutParameter(String query);"} {"seed":"Object selectQueryReturnWithSingleResult(String query, EnumMap parameterMap);"} {"seed":"List<T> selectQueryReturnWithList(String query, EnumMap parameterMap);"} {"seed":"List<Object[]> selectQueryReturnWithListBlock(String query, EnumMap parameterMap);"} {"seed":"void setQueryParameters(String query);"} {"seed":"public void prepare(Map<String, Object> topoConf, TopologyContext context, OutputCollector collector) {\n        basicOutputCollector = collector;\n    }"} {"seed":"public void execute(Tuple input) {\n        try {\n            saveState(input);\n            String stateFileName = getStateFileName();\n            // Save state spanning tree with rscode.\n//            SampleEncoder sampleEncoder = new SampleEncoder(stateFileName, \"9001\", \"192.168.204.253\", \"9001\", \"10\");\n            // Save state to db.\n//            SaveStateToDB saveStateToDB = new SaveStateToDB(stateFileName);\n            // Save state directly to Past.\n//            SaveStateToPAST saveStateToPAST = new SaveStateToPAST(stateFileName, \"9001\", \"192.168.204.253\", \"9001\", \"10\");\n            // Save state to HDFS.\n            SaveStateToHdfs saveStateToHdfs = new SaveStateToHdfs(stateFileName);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        String string = input.getString(0);\n        string += \"a\";\n        System.out.println(string);\n        basicOutputCollector.emit(new Values(string));\n    }"} {"seed":"public void declareOutputFields(OutputFieldsDeclarer declarer) {\n        declarer.declare(new Fields(\"field\"));\n    }"} {"seed":"long insert(T objectData, Connection connection);"} {"seed":"void update(T objectData, Connection connection);"} {"seed":"void insertOrUpdate(T objectData, Connection connection);"} {"seed":"Optional<T> findById(Object id, Connection connection);"} {"seed":"public static double get_distance(Vector2 A, Vector2 B){\n        return Math.sqrt(Math.pow(A.x - B.x, 2) + Math.pow(A.y - B.y, 2));\n    }"} {"seed":"public static void easy_sleep(double time) {\n        try {\n            Thread.sleep((long) (time));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }"} {"seed":"@Override\n    public void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n        frag = this;\n\n    }"} {"seed":"@Override\n    public void onAttach(Activity activity) {\n        super.onAttach(activity);\n        context = activity;\n\n    }"} {"seed":"@Override\n    public View onCreateView(LayoutInflater inflater,\n                             ViewGroup container, Bundle savedInstanceState) {\n\n        resData = new ResultData();\n\n        DisplayMetrics metrics = new DisplayMetrics();\n        getActivity().getWindowManager().getDefaultDisplay().getMetrics(metrics);\n\n        int widthPixels = metrics.widthPixels;\n        int heightPixels = metrics.heightPixels;\n        float scaleFactor = metrics.density;\n        float widthDp = widthPixels / scaleFactor;\n        float heightDp = heightPixels / scaleFactor;\n\n        float smallestWidth = Math.min(widthDp, heightDp);\n        View rootView = null;\n        if (smallestWidth > 720) {\n            device = 10;\n        }\n        else if (smallestWidth >= 600) {\n            device = 7; //Device is a 7\" tablet\n            rootView = inflater.inflate(R.layout.exam_mode_seven, container,\n                    false);\n        }else {\n            rootView = inflater.inflate(R.layout.exam_mode, container,\n                    false);\n        }\n\n\n\n        textTimer = (TextView)rootView.findViewById(R.id.timer);\n        textTimer.setTextColor(Color.RED);\n        LayoutInflater seakLayout = (LayoutInflater)context.getSystemService(context.LAYOUT_INFLATER_SERVICE);\n//\t\t View layout = inflater.inflate(R.layout.seakbar_dialog, (ViewGroup)findViewById(R.id.your_dialog_root_element));\n        seakBarlayout = seakLayout.inflate(R.layout.seakbar_dialog_layout,container, false);\n        textEnd = (TextView)seakBarlayout.findViewById(R.id.countend);\n        textStart = (TextView)seakBarlayout.findViewById(R.id.countstart);\n\n        textGoalStart = (TextView)seakBarlayout.findViewById(R.id.goalstart);\n        textGoalend = (TextView)seakBarlayout.findViewById(R.id.goalend);\n\n        seekBar = (SeekBar)seakBarlayout.findViewById(R.id.que_seekbar);\n        seekGoal = (SeekBar)seakBarlayout.findViewById(R.id.goal_seekbar);\n        seekGoal.setMax(100);\n\n        seekBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {\n\n            public void onStopTrackingTouch(SeekBar arg0) {\n\n            }\n\n            public void onStartTrackingTouch(SeekBar arg0) {\n\n            }\n\n            public void onProgressChanged(SeekBar arg0, int arg1, boolean arg2) {\n\n//\t            \tString progressString = String.valueOf(arg1 * 10);\n                textStart.setText(String.valueOf(arg1));\n                count = arg1;\n            }\n        });\n\n        seekGoal.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {\n\n            public void onStopTrackingTouch(SeekBar arg0) {\n\n\n            }\n\n            public void onStartTrackingTouch(SeekBar arg0) {\n\n            }\n\n            public void onProgressChanged(SeekBar arg0, int arg1, boolean arg2) {\n\n//\t            \tString progressString = String.valueOf(arg1 * 10);\n                textGoalStart.setText(String.valueOf(arg1)+\"%\");\n\n            }\n        });\n        LayoutInflater mInflater = (LayoutInflater) context\n                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n\n        reviewView = mInflater.inflate(R.layout.show_review,container, false);\n\n        reviewListview = (ListView)reviewView.findViewById(R.id.reviewListview);\n\n        resultView = mInflater.inflate(R.layout.finish_layout,container, false);\n\n\n        resultListview = (ListView)resultView.findViewById(R.id.resultListview);\n        btnreTake = (Button)resultView.findViewById(R.id.retake);\n        btnreTest = (Button)resultView.findViewById(R.id.reTest);\n        review = (Button)resultView.findViewById(R.id.review);\n\n        showInfoView = mInflater.inflate(R.layout.show_info,container, false);\n\n        proName =(TextView)showInfoView.findViewById(R.id.proname);\n        proGroup =(TextView)showInfoView.findViewById(R.id.progroup);\n        knAria =(TextView)showInfoView.findViewById(R.id.knArea);\n\n        btnreTake.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n                reTake();\n\n            }\n        });\n\n        btnreTest.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n                reTest();\n            }\n        });\n\n        review.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n                priview();\n            }\n        });\n\n        context = container.getContext();\n        String urls = url;//\"http://www.jmbok.avantgoutrestaurant.com/and/all.php?knowledgearea=Projectriskmanagement&group=SelectAll&processname=SelectAll&difficulty=SelectAll\";\n        AsyncTaskCall ask = new AsyncTaskCall(getActivity(),this, urls,\"exam\");\n        ask.execute(urls);\n\n        priv = (Button)rootView.findViewById(R.id.prev);\n        next = (Button)rootView.findViewById(R.id.next);\n        exp = (Button)rootView.findViewById(R.id.exp);\n        list = (ListView)rootView.findViewById(R.id.listView1);\n        list.setVisibility(View.GONE);\n        priv.setVisibility(View.GONE);\n        next.setVisibility(View.GONE);\n        exp.setVisibility(View.GONE);\n        priv.setEnabled(false);\n        exp.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n                AlertDialog.Builder alert = new AlertDialog.Builder(getActivity());\n                alert.setTitle(\"Explanation\");\n                alert.setMessage(dataSource.getDescription());\n\n\n                alert.setPositiveButton(\"Ok\", new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int whichButton) {\n\n                        // Do something with value!\n                    }\n                });\n\n\n                alert.show();\n            }\n        });\n\n        next.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n                if (next.getText().toString().equals(\"Next\")) {\n                    priv.setEnabled(true);\n                    if (iNext == 0) {\n                        iNext = 1;\n                        pCheck = true;\n\n                    }\n                    if (nCheck) {\n                        iNext++;\n                    }\n                    if (iNext < count) {\n                        dataSource = data.get(iNext);\n                        ExammodeAdapter adapter = new ExammodeAdapter(context, dataSource,iNext,device,frag,resData);\n                        list.setAdapter(adapter);\n                        priv.setEnabled(true);\n                        iNext++;\n                        pCheck = true;\n                        nCheck = false;\n\n                    }\n                    if (iNext == count){\n//\t\t\t\t\t\tnext.setEnabled(false);\n                        next.setText(\"Finish\");\n                        iNext = count-1;\n                        pCheck = false;\n                    }\n\n\n                }else{\n                    float proportionCorrect = ((float) resData.getCorrectAnswers()) / ((float) count);\n//\t        \t  double perInt =  resData.getCorrectAnswers() / count;\n                    int percentage = (int) (proportionCorrect * 100);\n                    resData.setPercentage(percentage);\n                    if (percentage >= 50) {\n                        resData.setResult(\"Pass\");\n                    }else{\n                        resData.setResult(\"Fail\");\n                    }\n                    resData.setTotalQuestion(count);\n\n\n                    getresult();\n                    System.out.println(\"count  \" + count +\"perInt   \" + proportionCorrect+ \"  percentage  \"+ percentage + \"  answer  \" + resData.getCorrectAnswers());\n                }\n\n\n            }\n\n\n        });\n\n        priv.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n                // Perform action on click \n                if (iNext == count) {\n                    iNext = count-1;\n                }\n                if (pCheck) {\n                    iNext--;\n                }\n                if (iNext > 0) {\n                    iNext--;\n                    dataSource = data.get(iNext);\n                    ExammodeAdapter adapter = new ExammodeAdapter(context, dataSource,iNext,device,frag,resData);\n                    list.setAdapter(adapter);\n                    next.setEnabled(true);\n                    next.setText(\"Next\");\n                    nCheck =true;\n                    pCheck = false;\n\n                }\n                if (iNext == 0){\n                    priv.setEnabled(false);\n                    iNext = 0;\n                    nCheck =false;\n\n                }\n\n\n            }\n        });\n\n        return rootView;\n\n    }"} {"seed":"public void Json(JSONObject json) throws JSONException{\n        try {\n            QuizJSONParser jsonParser = new QuizJSONParser();\n            jsonParser.jsonArrayName =  \"knowledgearea\";\n            data = jsonParser.testJsonParsing(json);\n            retakedata = jsonParser.testJsonParsing(json);\n            if (data.size() > 0) {\n                count = data.size();\n                for (int i = 0; i < data.size(); i++) {\n                    Quizdata list = data.get(i);\n                    System.out.println(\"\" + list.getQuestion());\n\n                }\n                if (data.size() > 0) {\n                    dataSource = data.get(0);\n                    ExammodeAdapter adapter = new ExammodeAdapter(context, dataSource,0,device,frag,resData);\n                    list.setAdapter(adapter);\n                }\n                show();\n            }else {\n                AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(context);\n                alertDialogBuilder.setTitle(\"No records found for your search !! \");\n\n                alertDialogBuilder\n                        .setCancelable(false)\n                        .setPositiveButton(\"Ok\",\n                                new DialogInterface.OnClickListener() {\n                                    public void onClick(DialogInterface dialog,\n                                                        int id) {\n                                        getActivity().finish();\n                                    }\n                                });\n\n                AlertDialog alertDialog = alertDialogBuilder.create();\n                alertDialog.show();\n            }\n        } catch (Exception e) {\n            // TODO: handle exception\n            AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(context);\n            alertDialogBuilder.setTitle(\"No records found for your search !! \");\n\n            alertDialogBuilder\n                    .setCancelable(false)\n                    .setPositiveButton(\"Ok\",\n                            new DialogInterface.OnClickListener() {\n                                public void onClick(DialogInterface dialog,\n                                                    int id) {\n                                    getActivity().finish();\n                                }\n                            });\n\n            AlertDialog alertDialog = alertDialogBuilder.create();\n            alertDialog.show();\n        }\n\n\n    }"} {"seed":"public void show()\n    {\n\n        RelativeLayout linearLayout = new RelativeLayout(context);\n\n        RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(550, 550);\n        RelativeLayout.LayoutParams numPicerParams = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.FILL_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);\n        numPicerParams.addRule(RelativeLayout.CENTER_HORIZONTAL);\n\n        linearLayout.setLayoutParams(params);\n        linearLayout.addView(seakBarlayout,numPicerParams);\n        textEnd.setText(String.valueOf(data.size()));\n\n        seekBar.setMax(data.size());\n\n        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(context);\n        alertDialogBuilder.setTitle(\"Select the number of Question out of \" + String.valueOf(data.size())+\"\\n\");\n        alertDialogBuilder.setView(linearLayout);\n//        alertDialogBuilder.setIcon(R.id.icon);\n        alertDialogBuilder\n                .setCancelable(false)\n                .setPositiveButton(\"Ok\",\n                        new DialogInterface.OnClickListener() {\n                            public void onClick(DialogInterface dialog,\n                                                int id) {\n                                int min = 60*1000;\n                                CountDown timer = new CountDown(count*min, 1000);\n                                timer.start();\n                                list.setVisibility(View.VISIBLE);\n                                priv.setVisibility(View.VISIBLE);\n                                next.setVisibility(View.VISIBLE);\n                                exp.setVisibility(View.VISIBLE);\n\n                            }\n                        })\n                .setNegativeButton(\"Cancel\",\n                        new DialogInterface.OnClickListener() {\n                            public void onClick(DialogInterface dialog,\n                                                int id) {\n                                dialog.cancel();\n                                getActivity().finish();\n                            }\n                        });\n        AlertDialog alertDialog = alertDialogBuilder.create();\n        alertDialog.show();\n\n\n    }"} {"seed":"public void showReview(){\n\n        Display display = getActivity().getWindowManager().getDefaultDisplay();\n        int width = display.getWidth();\n        int height = display.getHeight();\n\n        ShowReviewAdapter adapter = new ShowReviewAdapter(context,data,count,device,frag);\n        reviewListview.setAdapter(adapter);\n\n        linearLayout = new RelativeLayout(context);\n\n        RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(width, height);\n        RelativeLayout.LayoutParams numPicerParams = new RelativeLayout.LayoutParams(width, height);\n        numPicerParams.addRule(RelativeLayout.CENTER_HORIZONTAL);\n\n        linearLayout.setLayoutParams(params);\n\n        linearLayout.addView(reviewView,numPicerParams);\n\n        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(context);\n        alertDialogBuilder.setView(linearLayout);\n        alertDialogBuilder\n                .setCancelable(false)\n                .setPositiveButton(\"Ok\",\n                        new DialogInterface.OnClickListener() {\n                            public void onClick(DialogInterface dialog,\n                                                int id) {\n                                alertDialog.dismiss();\n                                linearLayout.removeView(reviewView);\n                            }\n\n                        });\n        alertDialog = alertDialogBuilder.create();\n        alertDialog.show();\n\n    }"} {"seed":"public void reviewNavication(int id){\n\n        if (data.size() > 0) {\n            iNext = id;\n            dataSource = data.get(id);\n            ExammodeAdapter adapter = new ExammodeAdapter(context, dataSource,id,device,frag,resData);\n            list.setAdapter(adapter);\n        }\n        alertDialog.dismiss();\n        linearLayout.removeView(reviewView);\n        next.setText(\"Next\");\n    }"} {"seed":"public void showResult(){\n\n        Display display = getActivity().getWindowManager().getDefaultDisplay();\n        int width = display.getWidth();\n        int height = display.getHeight();\n\n        ResultAdapter adapter = new ResultAdapter(context,resData,count,device,frag);\n        resultListview.setAdapter(adapter);\n\n        linearLayout = new RelativeLayout(context);\n\n        RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(width, height);\n        RelativeLayout.LayoutParams numPicerParams = new RelativeLayout.LayoutParams(width, height);\n        numPicerParams.addRule(RelativeLayout.CENTER_HORIZONTAL);\n\n        linearLayout.setLayoutParams(params);\n\n        linearLayout.addView(resultView,numPicerParams);\n\n        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(context);\n        alertDialogBuilder.setView(linearLayout);\n\n        alertDialog = alertDialogBuilder.create();\n        alertDialog.show();\n\n        check = 0;\n        alertDialog.setOnKeyListener(new DialogInterface.OnKeyListener() {\n\n            @Override\n            public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {\n\n                if(keyCode == KeyEvent.KEYCODE_BACK){\n                    if (check == 0) {\n                        ((QuizActivity)getActivity()).onBackPressed();\n                    }\n                    check = 1;\n                }\n                return false;\n\n\n            }\n        });\n\n    }"} {"seed":"public void showInfo(){\n\n        Display display = getActivity().getWindowManager().getDefaultDisplay();\n        int width = display.getWidth();\n        int height = display.getHeight();\n\n        linearLayout = new RelativeLayout(context);\n\n        RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(550, 550);\n        RelativeLayout.LayoutParams numPicerParams = new RelativeLayout.LayoutParams(550, 550);\n        numPicerParams.addRule(RelativeLayout.CENTER_HORIZONTAL);\n\n        linearLayout.setLayoutParams(params);\n\n        linearLayout.addView(showInfoView, numPicerParams);\n\n        proName.setText(dataSource.getProcessname());\n        proName.setTextColor(Color.parseColor(\"#000000\"));\n        proGroup.setText(dataSource.getProcessgroup());\n        proGroup.setTextColor(Color.parseColor(\"#000000\"));\n        knAria.setText(dataSource.getKnowledgeArea());\n        knAria.setTextColor(Color.parseColor(\"#000000\"));\n\n        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(context);\n        alertDialogBuilder.setView(linearLayout);\n        alertDialogBuilder\n                .setCancelable(false)\n                .setPositiveButton(\"Ok\",\n                        new DialogInterface.OnClickListener() {\n                            public void onClick(DialogInterface dialog,\n                                                int id) {\n                                alertDialog.dismiss();\n                                linearLayout.removeView(showInfoView);\n                            }\n\n                        });\n        alertDialog = alertDialogBuilder.create();\n        alertDialog.show();\n    }"} {"seed":"public void getresult(){\n        String testID = UUID.randomUUID().toString();\n        String timer = textTimer.getText().toString();\n        StringBuilder qID = new StringBuilder();\n        StringBuilder option = new StringBuilder();\n        for (int i = 0; i < count; i++) {\n            Quizdata list = data.get(i);\n            qID.append(list.getQuestionID());\n            qID.append(\",\");\n            option.append(list.getExamAnswer());\n            option.append(\",\");\n        }\n        String questionid = qID.toString();\n        String optionVlaue = option.toString();\n\n        System.out.println(\"mess \" + questionid);\n        System.out.println(\"mess \" + optionVlaue);\n\n        System.out.println(\"resData.getTotalQuestion()  \" + resData.getTotalQuestion() +\"resData.getAttemptQuestions()   \" + resData.getAttemptQuestions()+ \"  resData.getCorrectAnswers()  \"+ resData.getCorrectAnswers() + \"  resData.getMarkedReview()  \" + resData.getMarkedReview()\n        );\n\n        List<NameValuePair> params = new ArrayList<NameValuePair>();\n        params.add(new BasicNameValuePair(\"Totalquestion\", String.valueOf(resData.getTotalQuestion())));\n        params.add(new BasicNameValuePair(\"Attemptquestions\", String.valueOf(resData.getAttemptQuestions())));\n        params.add(new BasicNameValuePair(\"Correctanswers\", String.valueOf(resData.getCorrectAnswers())));\n        params.add(new BasicNameValuePair(\"Markedreview\", String.valueOf(resData.getMarkedReview())));\n        params.add(new BasicNameValuePair(\"Percentage\", String.valueOf(resData.getPercentage())));\n        params.add(new BasicNameValuePair(\"Result\", resData.getResult()));\n        params.add(new BasicNameValuePair(\"Timespent\", timer));\n        params.add(new BasicNameValuePair(\"userid\", \"android@gmail.com\")); //TODO: get from preference\n        params.add(new BasicNameValuePair(\"testid\", testID));\n        params.add(new BasicNameValuePair(\"questionid\", questionid));\n        params.add(new BasicNameValuePair(\"options\", optionVlaue));\n\n\n        AsyncTaskCall ask = new AsyncTaskCall(context, \"result\",params);\n        ask.examFragment = this;\n        ask.execute(urlFinish);\n    }"} {"seed":"public void refersh(){\n        list.invalidateViews();\n    }"} {"seed":"public void priview(){\n        Intent intent = new Intent(getActivity(), PreviewActivity.class);\n        intent.putExtra(\"data\", data);\n        intent.putExtra(\"count\", count);\n        startActivity(intent);\n    }"} {"seed":"public void reTake(){\n\n        data.clear();\n        data = new ArrayList<Quizdata>(retakedata);\n//\t\tdata = retakedata;\n        if (data.size() > 0) {\n            dataSource = data.get(0);\n            ExammodeAdapter adapter = new ExammodeAdapter(context, dataSource,0,device,frag,resData);\n//\t\t\t adapter.resData = resData;\n            list.setAdapter(adapter);\n            alertDialog.dismiss();\n            linearLayout.removeView(resultView);\n            next.setText(\"Next\");\n        }\n    }"} {"seed":"public void reTest(){\n        linearLayout.removeView(resultView);\n        alertDialog.dismiss();\n        getActivity().finish();\n\n    }"} {"seed":"@Override\n        public void onTick(long millisUntilFinished) {\n            long millis = millisUntilFinished;\n            String hms = String.format(\"%02d:%02d:%02d\", TimeUnit.MILLISECONDS.toHours(millis),\n                    TimeUnit.MILLISECONDS.toMinutes(millis) - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(millis)),\n                    TimeUnit.MILLISECONDS.toSeconds(millis) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(millis)));\n\n            textTimer.setText(hms);\n        }"} {"seed":"@Override\n        public void onFinish() {\n            textTimer.setText(\"Time Up!!\");\n        }"} {"seed":"public void onStopTrackingTouch(SeekBar arg0) {\n\n            }"} {"seed":"public void onStartTrackingTouch(SeekBar arg0) {\n\n            }"} {"seed":"public void onProgressChanged(SeekBar arg0, int arg1, boolean arg2) {\n\n//\t            \tString progressString = String.valueOf(arg1 * 10);\n                textStart.setText(String.valueOf(arg1));\n                count = arg1;\n            }"} {"seed":"public void onStopTrackingTouch(SeekBar arg0) {\n\n\n            }"} {"seed":"public void onStartTrackingTouch(SeekBar arg0) {\n\n            }"} {"seed":"public void onProgressChanged(SeekBar arg0, int arg1, boolean arg2) {\n\n//\t            \tString progressString = String.valueOf(arg1 * 10);\n                textGoalStart.setText(String.valueOf(arg1)+\"%\");\n\n            }"} {"seed":"public void onClick(View v) {\n                reTake();\n\n            }"} {"seed":"public void onClick(View v) {\n                reTest();\n            }"} {"seed":"public void onClick(View v) {\n                priview();\n            }"} {"seed":"public void onClick(View v) {\n                AlertDialog.Builder alert = new AlertDialog.Builder(getActivity());\n                alert.setTitle(\"Explanation\");\n                alert.setMessage(dataSource.getDescription());\n\n\n                alert.setPositiveButton(\"Ok\", new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int whichButton) {\n\n                        // Do something with value!\n                    }\n                });\n\n\n                alert.show();\n            }"} {"seed":"public void onClick(View v) {\n                if (next.getText().toString().equals(\"Next\")) {\n                    priv.setEnabled(true);\n                    if (iNext == 0) {\n                        iNext = 1;\n                        pCheck = true;\n\n                    }\n                    if (nCheck) {\n                        iNext++;\n                    }\n                    if (iNext < count) {\n                        dataSource = data.get(iNext);\n                        ExammodeAdapter adapter = new ExammodeAdapter(context, dataSource,iNext,device,frag,resData);\n                        list.setAdapter(adapter);\n                        priv.setEnabled(true);\n                        iNext++;\n                        pCheck = true;\n                        nCheck = false;\n\n                    }\n                    if (iNext == count){\n//\t\t\t\t\t\tnext.setEnabled(false);\n                        next.setText(\"Finish\");\n                        iNext = count-1;\n                        pCheck = false;\n                    }\n\n\n                }else{\n                    float proportionCorrect = ((float) resData.getCorrectAnswers()) / ((float) count);\n//\t        \t  double perInt =  resData.getCorrectAnswers() / count;\n                    int percentage = (int) (proportionCorrect * 100);\n                    resData.setPercentage(percentage);\n                    if (percentage >= 50) {\n                        resData.setResult(\"Pass\");\n                    }else{\n                        resData.setResult(\"Fail\");\n                    }\n                    resData.setTotalQuestion(count);\n\n\n                    getresult();\n                    System.out.println(\"count  \" + count +\"perInt   \" + proportionCorrect+ \"  percentage  \"+ percentage + \"  answer  \" + resData.getCorrectAnswers());\n                }\n\n\n            }"} {"seed":"public void onClick(View v) {\n                // Perform action on click \n                if (iNext == count) {\n                    iNext = count-1;\n                }\n                if (pCheck) {\n                    iNext--;\n                }\n                if (iNext > 0) {\n                    iNext--;\n                    dataSource = data.get(iNext);\n                    ExammodeAdapter adapter = new ExammodeAdapter(context, dataSource,iNext,device,frag,resData);\n                    list.setAdapter(adapter);\n                    next.setEnabled(true);\n                    next.setText(\"Next\");\n                    nCheck =true;\n                    pCheck = false;\n\n                }\n                if (iNext == 0){\n                    priv.setEnabled(false);\n                    iNext = 0;\n                    nCheck =false;\n\n                }\n\n\n            }"} {"seed":"public void onClick(DialogInterface dialog,\n                                                int id) {\n                                dialog.cancel();\n                                getActivity().finish();\n                            }"} {"seed":"public void onClick(DialogInterface dialog,\n                                                int id) {\n                                alertDialog.dismiss();\n                                linearLayout.removeView(reviewView);\n                            }"} {"seed":"@Override\n            public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {\n\n                if(keyCode == KeyEvent.KEYCODE_BACK){\n                    if (check == 0) {\n                        ((QuizActivity)getActivity()).onBackPressed();\n                    }\n                    check = 1;\n                }\n                return false;\n\n\n            }"} {"seed":"public void onClick(DialogInterface dialog,\n                                                int id) {\n                                alertDialog.dismiss();\n                                linearLayout.removeView(showInfoView);\n                            }"} {"seed":"public void onClick(DialogInterface dialog,\n                                                int id) {\n                                int min = 60*1000;\n                                CountDown timer = new CountDown(count*min, 1000);\n                                timer.start();\n                                list.setVisibility(View.VISIBLE);\n                                priv.setVisibility(View.VISIBLE);\n                                next.setVisibility(View.VISIBLE);\n                                exp.setVisibility(View.VISIBLE);\n\n                            }"} {"seed":"public void onClick(DialogInterface dialog,\n                                                    int id) {\n                                    getActivity().finish();\n                                }"} {"seed":"public void onClick(DialogInterface dialog,\n                                                        int id) {\n                                        getActivity().finish();\n                                    }"} {"seed":"public void onClick(DialogInterface dialog, int whichButton) {\n\n                        // Do something with value!\n                    }"} {"seed":"public static FirewallVpnService m1864a() {\n        return f1316b;\n    }"} {"seed":"private void m1866c() {\n        /*\n        r10 = this;\n        r2 = 0;\n        r1 = 1;\n        r0 = \"DCVpnService\";\n        r3 = \"startVPN\";\n        com.ppu.fba.p009d.Log1.LogF1(r0, r3);\n        monitor-enter(r10);\n        r0 = r10.f1317a;\t Catch:{ all -> 0x0065 }\n        if (r0 == 0) goto L_0x0017;\n    L_0x000e:\n        r0 = \"DCVpnService\";\n        r1 = \"startVPN: already started\";\n        com.ppu.fba.p009d.Log1.LogF1(r0, r1);\t Catch:{ all -> 0x0065 }\n        monitor-exit(r10);\t Catch:{ all -> 0x0065 }\n    L_0x0016:\n        return;\n    L_0x0017:\n        r0 = 1;\n        r10.f1317a = r0;\t Catch:{ all -> 0x0065 }\n        monitor-exit(r10);\t Catch:{ all -> 0x0065 }\n        r0 = \"DCVpnService\";\n        r3 = \"startVPN: about to build\";\n        com.ppu.fba.p009d.Log1.LogF1(r0, r3);\n        r0 = com.ppu.fba.FirewallApplication.m1851a();\n        r0 = android.preference.PreferenceManager.getDefaultSharedPreferences(r0);\n        r3 = \"data_caching_on\";\n        r3 = r0.getBoolean(r3, r2);\n        r4 = \"ad_blocking_on\";\n        r4 = r0.getBoolean(r4, r1);\n        r5 = \"malware_shield_on\";\n        r6 = r0.getBoolean(r5, r2);\n        if (r3 == 0) goto L_0x0068;\n    L_0x003e:\n        r5 = r1;\n    L_0x003f:\n        if (r4 == 0) goto L_0x006a;\n    L_0x0041:\n        r4 = r1;\n    L_0x0042:\n        if (r6 == 0) goto L_0x006c;\n    L_0x0044:\n        r0 = r1;\n    L_0x0045:\n        r3 = r10.f1322g;\n        if (r3 != 0) goto L_0x0054;\n    L_0x0049:\n        r3 = new com.ppu.fba.g;\n        r3.<init>(r10, r6);\n        r3 = r3.establish();\t Catch:{ Exception -> 0x006e }\n        r10.f1322g = r3;\t Catch:{ Exception -> 0x006e }\n    L_0x0054:\n        r3 = r10.f1322g;\n        if (r3 != 0) goto L_0x00b6;\n    L_0x0058:\n        r10.f1317a = r2;\n        r0 = \"DCVpnService\";\n        r1 = \"builder failed: stopSelf() now\";\n        com.ppu.fba.p009d.Log1.LogF1(r0, r1);\n        r10.stopSelf();\n        goto L_0x0016;\n    L_0x0065:\n        r0 = move-exception;\n        monitor-exit(r10);\t Catch:{ all -> 0x0065 }\n        throw r0;\n    L_0x0068:\n        r5 = r2;\n        goto L_0x003f;\n    L_0x006a:\n        r4 = r2;\n        goto L_0x0042;\n    L_0x006c:\n        r0 = r2;\n        goto L_0x0045;\n    L_0x006e:\n        r3 = move-exception;\n        r3 = new com.ppu.fba.q;\n        r3.<init>(r10, r6);\n        r3 = r3.establish();\t Catch:{ Exception -> 0x007b }\n        r10.f1322g = r3;\t Catch:{ Exception -> 0x007b }\n        goto L_0x0054;\n    L_0x007b:\n        r3 = move-exception;\n        r6 = \"state\";\n        r7 = \"vpnFail\";\n        r8 = new java.lang.StringBuilder;\n        r8.<init>();\n        r9 = \"excEst: \";\n        r8 = r8.append(r9);\n        r9 = r3.getMessage();\n        if (r9 != 0) goto L_0x00b1;\n    L_0x0091:\n        r3 = \"null\";\n    L_0x0093:\n        r3 = r8.append(r3);\n        r3 = r3.toString();\n        r8 = 0;\n        r3 = com.google.analytics.tracking.android.MapBuilder.createEvent(r6, r7, r3, r8);\n        r3 = r3.build();\n        com.ppu.fba.p009d.Log1.LogAction(r3);\n        r3 = com.ppu.fba.R.string.error_vpn_establish;\n        r3 = android.widget.Toast.makeText(r10, r3, r1);\n        r3.show();\n        goto L_0x0054;\n    L_0x00b1:\n        r3 = r3.getMessage();\n        goto L_0x0093;\n    L_0x00b6:\n        r3 = r10.m1868e();\n        r10.startForeground(r1, r3);\n        r3 = \"DCVpnService\";\n        r6 = \"init\";\n        com.ppu.fba.p009d.Log1.LogF1(r3, r6);\n        r3 = r10.f1322g;\n        r3 = r3.getFd();\n        r6 = r10.getFilesDir();\n        r6 = r6.getAbsolutePath();\n        r0 = com.ppu.fba.NativeWrapper.jni_dicki(r3, r6, r5, r4, r0);\n        if (r0 == 0) goto L_0x00e4;\n    L_0x00d8:\n        r0 = \"DCVpnService\";\n        r2 = \"account_init failed!!!!!\";\n        com.ppu.fba.p009d.Log1.LogF1(r0, r2);\n        r10.stopForeground(r1);\n        goto L_0x0016;\n    L_0x00e4:\n        r10.f1321f = r2;\n        r0 = new com.ppu.fba.c;\n        r1 = new com.ppu.fba.d;\n        r1.<init>(r10);\n        r2 = \"t4\";\n        r0.<init>(r1, r2);\n        r10.f1324i = r0;\n        r0 = r10.f1324i;\n        r0.start();\n        r0 = new com.ppu.fba.c;\n        r1 = new com.ppu.fba.e;\n        r1.<init>(r10);\n        r2 = \"t0\";\n        r0.<init>(r1, r2);\n        r10.f1323h = r0;\n        r0 = r10.f1323h;\n        r0.start();\n        r0 = new com.ppu.fba.c;\n        r1 = new com.ppu.fba.f;\n        r1.<init>(r10);\n        r2 = \"t1\";\n        r0.<init>(r1, r2);\n        r10.f1319d = r0;\n        r0 = new com.ppu.fba.c;\n        r1 = new com.ppu.fba.o;\n        r1.<init>(r10);\n        r2 = \"t2\";\n        r0.<init>(r1, r2);\n        r10.f1320e = r0;\n        r0 = new com.ppu.fba.c;\n        r1 = new com.ppu.fba.p;\n        r1.<init>(r10);\n        r2 = \"t3\";\n        r0.<init>(r1, r2);\n        r10.f1318c = r0;\n        r0 = r10.f1319d;\n        r0.start();\n        r0 = r10.f1320e;\n        r0.start();\n        r0 = r10.f1318c;\n        r0.start();\n        goto L_0x0016;\n        */\n        throw new UnsupportedOperationException(\"Method not decompiled: com.ppu.fba.FirewallVpnService.c():void\");\n    }"} {"seed":"private void m1867d() {\n        Log1.LogF1(\"DCVpnService\", \"waitVPN\");\n        try {\n            if (this.f1323h != null) {\n                this.f1323h.join(3000);\n                this.f1323h = null;\n            }\n        } catch (InterruptedException e) {\n        }\n        try {\n            if (this.f1324i != null) {\n                this.f1324i.join(1000);\n                this.f1324i = null;\n            }\n        } catch (InterruptedException e2) {\n        }\n        try {\n            if (this.f1318c != null) {\n                this.f1318c.join(1000);\n                this.f1318c = null;\n            }\n        } catch (InterruptedException e3) {\n        }\n        try {\n            if (this.f1319d != null) {\n                this.f1319d.join(1000);\n                this.f1319d = null;\n            }\n        } catch (InterruptedException e4) {\n        }\n        try {\n            if (this.f1320e != null) {\n                this.f1320e.join(1000);\n                this.f1320e = null;\n            }\n        } catch (InterruptedException e5) {\n        }\n    }"} {"seed":"private Notification m1868e() {\n        Context applicationContext = getApplicationContext();\n        NotificationCompat.Builder b = new NotificationCompat.Builder(applicationContext).setSmallIcon(R.drawable.lnf2).setContentTitle(getResources().getText(R.string.app_name)).setContentText(\"Protection is turned ON\").setContentText(\"LostNet Firewall controls data using VPN\");\n        Intent intent = new Intent(this, LogsActivity.class);\n        intent.setAction(\"android.intent.action.MAIN\");\n        intent.addCategory(\"android.intent.category.LAUNCHER\");\n        intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);\n        intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);\n        b.setContentIntent(PendingIntent.getActivity(applicationContext, 0, intent,PendingIntent.FLAG_UPDATE_CURRENT));\n        NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n        return b.build();\n    }"} {"seed":"private int m1869f() {\n        ActivityManager activityManager = null;\n        if (null == null) {\n            activityManager = (ActivityManager) getSystemService(ACTIVITY_SERVICE);\n        }\n        if (activityManager == null) {\n            return 0;\n        }\n        List runningTasks = activityManager.getRunningTasks(1);\n        if (runningTasks == null) {\n            return 0;\n        }\n        RunningTaskInfo runningTaskInfo = (RunningTaskInfo) runningTasks.get(0);\n        if (runningTaskInfo != null) {\n            ComponentName componentName = runningTaskInfo.topActivity;\n            if (componentName != null) {\n                String packageName = componentName.getPackageName();\n                if (packageName != null) {\n                    Integer a = C0308e.m1963a(packageName);\n                    return a == null ? 0 : a.intValue();\n                }\n            }\n        }\n        return 0;\n    }"} {"seed":"public void m1870b() {\n        /*\n        r3 = this;\n        r2 = 1;\n        r0 = \"DCVpnService\";\n        r1 = \"stopVPN\";\n        com.ppu.fba.p009d.Log1.LogF1(r0, r1);\n        monitor-enter(r3);\n        r0 = r3.f1317a;\t Catch:{ all -> 0x0045 }\n        if (r0 != 0) goto L_0x0016;\n    L_0x000d:\n        r0 = \"DCVpnService\";\n        r1 = \"stopVPN: already stopped\";\n        com.ppu.fba.p009d.Log1.LogF1(r0, r1);\t Catch:{ all -> 0x0045 }\n        monitor-exit(r3);\t Catch:{ all -> 0x0045 }\n    L_0x0015:\n        return;\n    L_0x0016:\n        r0 = 0;\n        r3.f1317a = r0;\t Catch:{ all -> 0x0045 }\n        monitor-exit(r3);\t Catch:{ all -> 0x0045 }\n        r0 = r3.f1318c;\n        if (r0 != 0) goto L_0x0026;\n    L_0x001e:\n        r0 = r3.f1319d;\n        if (r0 != 0) goto L_0x0026;\n    L_0x0022:\n        r0 = r3.f1320e;\n        if (r0 == 0) goto L_0x0035;\n    L_0x0026:\n        r3.f1321f = r2;\n        r0 = \"DCVpnService\";\n        r1 = \"fini\";\n        com.ppu.fba.p009d.Log1.LogF1(r0, r1);\n        com.ppu.fba.NativeWrapper.jni_dickj();\n        r3.m1867d();\n    L_0x0035:\n        r0 = r3.f1322g;\n        if (r0 == 0) goto L_0x0041;\n    L_0x0039:\n        r0 = r3.f1322g;\t Catch:{ Exception -> 0x0048 }\n        r0.close();\t Catch:{ Exception -> 0x0048 }\n    L_0x003e:\n        r0 = 0;\n        r3.f1322g = r0;\n    L_0x0041:\n        r3.stopForeground(r2);\n        goto L_0x0015;\n    L_0x0045:\n        r0 = move-exception;\n        monitor-exit(r3);\t Catch:{ all -> 0x0045 }\n        throw r0;\n    L_0x0048:\n        r0 = move-exception;\n        goto L_0x003e;\n        */\n        throw new UnsupportedOperationException(\"Method not decompiled: com.ppu.fba.FirewallVpnService.b():void\");\n    }"} {"seed":"public int dontbeabitch() {\n        int f = m1869f();\n        Log1.LogF1(\"DCVpnService\", \"getForegroundApp: \" + f);\n        return f;\n    }"} {"seed":"public void gettheirdicksoffyourass(int i, int i2) {\n        Log1.LogF1(\"DCVpnService\", \"policyNotifyCnt: \" + i + \" \" + i2);\n        if (i2 != 0) {\n            String c = C0309f.m1980c(C0309f.m1974a(i));\n            String a = C0308e.m1964a(i2);\n            if (c == null) {\n                c = \"<Unknown Country>\";\n            }\n            if (a == null) {\n                a = \"<Unknown App>\";\n            }\n            a = getResources().getString(R.string.alert_app_cnt_1) + \" \" + a + \" \" + getResources().getString(R.string.alert_app_cnt_2) + \" \" + c + \" \" + getResources().getString(R.string.alert_app_cnt_3);\n            FirewallManagerService a2 = FirewallManagerService.m1852a(null);\n            if (a2 != null) {\n                a2.m1863a(new C0288a(7, a));\n            }\n        }\n    }"} {"seed":"public void howmuchdoesaminuteofyourtimecost(int i, int i2) {\n        Log1.LogF1(\"DCVpnService\", \"policyNotifyAd: \" + i + \" \" + i2);\n        String a = C0308e.m1964a(i);\n        if (a == null) {\n            a = \"<Unknown App>\";\n        }\n        a = getResources().getString(R.string.alert_ad_1) + \" \" + a + \" \" + getResources().getString(R.string.alert_ad_2);\n        FirewallManagerService a2 = FirewallManagerService.m1852a(null);\n        if (a2 != null) {\n            a2.m1863a(new C0288a(7, a));\n        }\n    }"} {"seed":"public void ivespent5minobfuscatingmindyourtime(int i) {\n        Log1.LogF1(\"DCVpnService\", \"policyNotifyApp: \" + i);\n        String a = C0308e.m1964a(i);\n        if (a == null) {\n            a = \"<Unknown App>\";\n        }\n        a = getResources().getString(R.string.alert_app_1) + \" \" + a + \" \" + getResources().getString(R.string.alert_app_2);\n        FirewallManagerService a2 = FirewallManagerService.m1852a(null);\n        if (a2 != null) {\n            a2.m1863a(new C0288a(7, a));\n        }\n    }"} {"seed":"public void onDestroy() {\n        Log1.LogF1(\"DCVpnService\", \"onDestroy\");\n        m1870b();\n        Log1.LogF1(\"DCVpnService\", \"onDestroy: end\");\n    }"} {"seed":"public void onRevoke() {\n        Log1.LogF1(\"DCVpnService\", \"onRevoke\");\n        Log1.LogAction(\"state\", \"vpnRevoke\", null, null);\n        Editor edit = PreferenceManager.getDefaultSharedPreferences(FirewallApplication.m1851a()).edit();\n        edit.putBoolean(\"status_on\", false);\n        edit.commit();\n        m1870b();\n        FirewallManagerService a = FirewallManagerService.m1852a((Context) this);\n        if (a != null) {\n            a.m1863a(new C0288a(2));\n        }\n        Intent intent = new Intent(this, FirewallVPNStop.class);\n        intent.setFlags(268435456);\n        startActivity(intent);\n        Log1.LogF1(\"DCVpnService\", \"onRevoke: end\");\n    }"} {"seed":"public int onStartCommand(Intent intent, int i, int i2) {\n        Log1.LogF1(\"DCVpnService\", \"onStartCommand\");\n        m1866c();\n        return START_NOT_STICKY;\n    }"} {"seed":"public void whatonearthmakesyoubeaslave(int i, int i2) {\n        Log1.LogF1(\"DCVpnService\", \"policyNotifyMw: \" + i + \" \" + i2);\n        String a = C0308e.m1964a(i);\n        if (a == null) {\n            a = \"<Unknown App>\";\n        }\n        a = getResources().getString(R.string.alert_mw_1) + \" \" + a + \" \" + getResources().getString(R.string.alert_mw_2);\n        FirewallManagerService a2 = FirewallManagerService.m1852a(null);\n        if (a2 != null) {\n            a2.m1863a(new C0288a(7, a));\n        }\n    }"} {"seed":"public void workonyourown(int i) {\n        if (!protect(i)) {\n            Log1.LogF1(\"DCVpnService\", \"protect() failed\");\n        }\n    }"} {"seed":"public static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tint i,j,k;\n\t\tfor(i=1;i<=3;i++) {\n\t\t\tfor(j=1;j<=3;j++) {\n\t\t\t\tfor(k=1;k<=3;k++) {\n\t\t\t\t\tif(i!=j && j!=k && k!=i) {\n\t\t\t\t\tSystem.out.println(i+\"\"+j+\"\"+k);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t}"} {"seed":"@Override\n\tprotected void drawGuiContainerBackgroundLayer(float partialTicks, int mouseX, int mouseY) {\n\t\tmc.getTextureManager().bindTexture(background);\n\t\tdrawTexturedModalRect(guiLeft, guiTop, 0, 0, xSize, ySize);\n\t}"} {"seed":"name;\n    }\n\n    public static ArrayList<ListDisplayData> structureData(){\n        ArrayList<ListDisplayData> datas = new ArrayList<>();\n\n        for (int i = 0; i < 10; i++) {\n\n            ListDisplayData data_0 = new ListDisplayData(\"sex\",\"http://img02.tooopen.com/images/20160404/tooopen_sy_158262392146.jpg\" );\n            ListDisplayData data_1 = new ListDisplayData(\"沙皮狗\",\"http://i1.dpfile.com/groups/grouppic/2009-06-10/sjw211_4063222_1383101_l.jpg\" );\n            ListDisplayData data_2 = new ListDisplayData(\"小萌狗\", \"http://www.vstou.com/upload/image/312/201603/1457831503284724.jpg\" );\n            ListDisplayData data_mul_1 = new ListDisplayData(\"狗狗群组 - 2张\", \"http://www.vstou.com/upload/image/312/201603/1457831503284724.jpg\"\n                                                                ,\"http://i1.dpfile.com/groups/grouppic/2009-06-10/sjw211_4063222_1383101_l.jpg\");\n\n            ListDisplayData data_3 = new ListDisplayData(\"小丸子\", \"http://www.tshseo.com/uploads/allimg/141024/2234236415-0.jpg\");\n            ListDisplayData data_4 = new ListDisplayData(\"美女\", \"http://www.duoziwang.com/uploads/c160225/14563LE5630-22626.jpg\" );\n            ListDisplayData data_5 = new ListDisplayData(\"小黑子\", \"http://www.3dmgame.com/uploads/allimg/141224/270_141224171322_1.jpg\");\n            ListDisplayData data_6 = new ListDisplayData(\"小赤司\", \"https://images.plurk.com/f76339fbc1eb3a1381b811b2879ac8e3.jpg\");\n            ListDisplayData data_7 = new ListDisplayData(\"小青峰\", \"http://dbimg.orzyouxi.com/Webatt/201508/20150807/1438960292362734.jpg\");\n            ListDisplayData data_8 = new ListDisplayData( \"小火神\", \"http://img170.poco.cn/mypoco/myphoto/20120430/12/64575493201204301209181258063444825_001.jpg\");\n            ListDisplayData data_9 = new ListDisplayData(\"小紫\", \"http://pic2.52pk.com/files/120613/1283574_171642_1_lit.jpg\");\n            ListDisplayData data_10 = new ListDisplayData(\"小黄濑\", \"http://pic.hanhande.com/files/130708/1283574_115242_1_lit.jpg\");\n            ListDisplayData data_mul_2 = new ListDisplayData(\"黑子群组 - 7张\", \"http://www.3dmgame.com/uploads/allimg/141224/270_141224171322_1.jpg\",\n                    \"https://images.plurk.com/f76339fbc1eb3a1381b811b2879ac8e3.jpg\",\n                    \"http://dbimg.orzyouxi.com/Webatt/201508/20150807/1438960292362734.jpg\",\n                    \"http://img170.poco.cn/mypoco/myphoto/20120430/12/64575493201204301209181258063444825_001.jpg\",\n                    \"http://pic2.52pk.com/files/120613/1283574_171642_1_lit.jpg\",\n                    \"http://pic.hanhande.com/files/130708/1283574_115242_1_lit.jpg\",\n                    \"http://pic.pimg.tw/mutsumi326/1341722635-1743631151.jpg\");\n\n\n\n\n\n\n            ListDisplayData data_11 = new ListDisplayData(\"小桃井\", \"http://pic.pimg.tw/mutsumi326/1341722635-1743631151.jpg\");\n            ListDisplayData data_12 = new ListDisplayData(\"王祖贤\", \"http://img3.cache.netease.com/ent/2009/4/17/20090417104402666a4.jpg\");\n            ListDisplayData data_13 = new ListDisplayData(\"张敏\", \"http://www.people.com.cn/mediafile/pic/20150710/76/5290773661176280932.jpg\");\n            ListDisplayData data_14 = new ListDisplayData(\"邱淑贞\", \"http://photocdn.sohu.com/20100201/Img269969338.jpg\");\n            ListDisplayData data_15 = new ListDisplayData(\"刘涛\", \"http://vignette2.wikia.nocookie.net/chunwan/images/0/00/47-150FG52033-50.jpg/revision/latest?cb=20160126210715&path-prefix=zh\");\n            ListDisplayData data_16 = new ListDisplayData(\"朱茵\", \"http://img1.gtimg.com/astro/pics/hv1/28/77/794/51649513.jpg\");\n            ListDisplayData data_mul_3 = new ListDisplayData(\"女神群组 - 5张\",\n                    \"http://img3.cache.netease.com/ent/2009/4/17/20090417104402666a4.jpg\",\n                    \"http://www.people.com.cn/mediafile/pic/20150710/76/5290773661176280932.jpg\",\n                    \"http://img1.gtimg.com/astro/pics/hv1/28/77/794/51649513.jpg\",\n                    \"http://photocdn.sohu.com/20100201/Img269969338.jpg\",\n                    \"http://vignette2.wikia.nocookie.net/chunwan/images/0/00/47-150FG52033-50.jpg/revision/latest?cb=20160126210715&path-prefix=zh\");\n\n            ListDisplayData data_mul_5 = new ListDisplayData(\"女神群组 - 4张\",\n                    \"http://img3.cache.netease.com/ent/2009/4/17/20090417104402666a4.jpg\",\n                    \"http://www.people.com.cn/mediafile/pic/20150710/76/5290773661176280932.jpg\",\n                    \"http://img1.gtimg.com/astro/pics/hv1/28/77/794/51649513.jpg\",\n                    \"http://photocdn.sohu.com/20100201/Img269969338.jpg\");\n            ListDisplayData data_mul_6 = new ListDisplayData(\"女神群组 - 3张\",\n                    \"http://img3.cache.netease.com/ent/2009/4/17/20090417104402666a4.jpg\",\n                    \"http://www.people.com.cn/mediafile/pic/20150710/76/5290773661176280932.jpg\",\n                    \"http://photocdn.sohu.com/20100201/Img269969338.jpg\");\n\n\n\n            ListDisplayData data_mul_4 = new ListDisplayData(\"美景群组 - 8张\",\n                    \"http://img02.tooopen.com/images/20160408/tooopen_sy_158723161481.jpg\",\n                    \"http://img02.tooopen.com/images/20160404/tooopen_sy_158262392146.jpg\",\n                    \"http://img02.tooopen.com/images/20160318/tooopen_sy_156339294124.jpg\",\n                    \"http://img06.tooopen.com/images/20160823/tooopen_sy_176393394325.jpg\",\n                    \"http://img06.tooopen.com/images/20160821/tooopen_sy_176144979595.jpg\",\n                    \"http://img06.tooopen.com/images/20160723/tooopen_sy_171462742667.jpg\",\n                    \"http://img05.tooopen.com/images/20150417/tooopen_sy_119014046478.jpg\",\n                    \"http://img02.tooopen.com/images/20150318/tooopen_sy_82853534894.jpg\");\n\n\n\n\n            datas.add(data_1);\n            datas.add(data_2);\n            datas.add(data_3);\n            datas.add(data_mul_1);\n            datas.add(data_4);\n            datas.add(data_mul_4);\n            datas.add(data_5);\n            datas.add(data_6);\n            datas.add(data_7);\n            datas.add(data_8);\n            datas.add(data_9);\n            datas.add(data_10);\n            datas.add(data_11);\n            datas.add(data_mul_2);\n            datas.add(data_mul_4);\n            datas.add(data_mul_5);\n            datas.add(data_mul_6);\n            datas.add(data_mul_3);\n            datas.add(data_mul_1);\n            datas.add(data_12);"} {"seed":"public static VoiceInput getInstance() {\n        if (sVoiceInput == null) {\n            sVoiceInput = new VoiceInput();\n        }\n        return sVoiceInput;\n    }"} {"seed":"public void setInput(boolean flag) {\n        hasInput = flag;\n    }"} {"seed":"public void start() {\n        start = true;\n        Log.d(\"VoiceInput\", \"start\");\n    }"} {"seed":"public void stop() {\n        start = false;\n        Log.d(\"VoiceInput\", \"stop\");\n    }"} {"seed":"private void initVoice() {\n        mInbufsize = AudioRecord\n                .getMinBufferSize(44100, AudioFormat.CHANNEL_OUT_STEREO, AudioFormat.ENCODING_PCM_16BIT);\n        mInrec = new AudioRecord(MediaRecorder.AudioSource.MIC, 44100, AudioFormat.CHANNEL_OUT_STEREO,\n                AudioFormat.ENCODING_PCM_16BIT, mInbufsize);\n        mInbytes = new byte[mInbufsize];\n        mInq = new LinkedList<byte[]>();\n\n        mOutbufsize = AudioTrack.getMinBufferSize(44100, AudioFormat.CHANNEL_IN_STEREO, AudioFormat.ENCODING_PCM_16BIT);\n\n        mOuttrk = new AudioTrack(AudioManager.STREAM_MUSIC, 44100, AudioFormat.CHANNEL_IN_STEREO,\n                AudioFormat.ENCODING_PCM_16BIT, mOutbufsize, AudioTrack.MODE_STREAM);\n        mOuttrk.setStereoVolume(mVoiceVolume, mVoiceVolume);\n        mOutbytes = new byte[mOutbufsize];\n    }"} {"seed":"@Override\n        public void run() {\n            while (true) {\n                try {\n                    byte[] bytes_pkg;\n                    mInrec.startRecording();\n                    while (true) {\n                        if (start) {\n                            if (mInq.size() < 1000) {\n                                mInrec.read(mInbytes, 0, mInbufsize);\n                                bytes_pkg = mInbytes.clone();\n                                synchronized (mInq) {\n                                    mInq.add(bytes_pkg);\n                                }\n                            }\n                        } else {\n                            Thread.sleep(1000);\n                        }\n                    }\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                mInrec.stop();\n            }\n        }"} {"seed":"@Override\n        public void run() {\n            while (true) {\n                try {\n                    byte[] bytes_pkg = null;\n                    mOuttrk.play();\n                    while (true) {\n                        if ((start) && (mInq.size() > 0)) {\n                            synchronized (mInq) {\n                                mOutbytes = mInq.getFirst();\n                                bytes_pkg = mOutbytes.clone();\n                                mInq.removeFirst();\n                            }\n                            mOuttrk.write(bytes_pkg, 0, bytes_pkg.length);\n                        } else {\n                            Thread.sleep(1000);\n                        }\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                mOuttrk.stop();\n            }\n        }"} {"seed":"public String propid(){\n\t\treturn propId ;\n\t}"} {"seed":"public boolean ascending(){\n\t\treturn ascending ;\n\t}"} {"seed":"public static void cutImage(InputStream in, OutputStream out, int x, int y, int w, int h) throws IOException {\n        Iterator<ImageReader> iterator = ImageIO.getImageReadersByFormatName(\"jpg\");\n        ImageReader reader = iterator.next();\n        ImageInputStream iis = ImageIO.createImageInputStream(in);\n        reader.setInput(iis, true);\n        ImageReadParam param = reader.getDefaultReadParam();\n        int width = reader.getWidth(0);\n        w = w + x > width ? width - x : w;\n        int height = reader.getHeight(0);\n        h = h + y > height ? height - y : h;\n        Rectangle rect = new Rectangle(x, y, w, h);\n        param.setSourceRegion(rect);\n        BufferedImage bi = reader.read(0, param);\n        ImageIO.write(bi, \"jpg\", out);\n    }"} {"seed":"@Override\n    public Result updateMemberExtraDataStatus(String id, String extraDataStatus) {\n        Result result = new Result();\n        String code = Constants.FAIL;\n        String msg = \"初始化\";\n        try {\n            if(StringUtils.isBlank(id)){\n                code = \"-3\";\n                msg = \"请选择要审核的资料\";\n            }else if(StringUtils.isBlank(extraDataStatus)){\n                code = \"-4\";\n                msg = \"请选择通过状态\";\n            }else if(!\"1\".equals(extraDataStatus) && !\"2\".equals(extraDataStatus)){\n                code = \"-5\";\n                msg = \"审核状态只能是1或2\";\n            }else{\n                MemberExtraData memberExtraData_db = memberExtraDataMapper.selectByPrimaryKey(id);\n                if(memberExtraData_db == null){\n                    code = \"-6\";\n                    msg = \"审核的资料不存在\";\n                }else{\n                    Member member_db = memberMapper.selectByExtraDataId(id);\n                    if(member_db == null){\n                        code = \"-7\";\n                        msg = \"不存在任何会员有此资料\";\n                    }else{\n                        member_db.setExtraDataStatus(extraDataStatus);\n                        memberMapper.updateExtraDataStatusByPrimaryKey(member_db);\n                        code = \"-7\";\n                        msg = \"操作成功\";\n                    }\n                }\n            }\n        } catch (Exception e) {\n            code = Constants.ERROR;\n            msg = \"后台繁忙\";\n            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();\n            e.printSt"} {"seed":"ce();\n        }\n        result.setCode(code);\n        result.setMsg(msg);\n        return result;\n    }\n\n    @Override\n    public Result updateMemberExtraData(MemberExtraData memberExtraData) {\n        Result result = new Result();\n        String code = Constants.FAIL;\n        String msg = \"初始化\";\n        try {\n            if(StringUtils.isBlank(memberExtraData.getId())){\n                code = \"-3\";\n                msg = \"请选择要修改的资料\";\n            }else{\n                MemberExtraData memberExtraData_db = memberExtraDataMapper.selectByPrimaryKey(memberExtraData.getId());\n                if(memberExtraData_db == null){\n                    code = \"-4\";\n                    msg = \"修改资料不存在\";\n                }else{\n                    memberExtraDataMapper.updateByPrimaryKeySelective(memberExtraData);\n                    code = \"-5\";\n                    msg = \"操作成功\";\n                }\n            }\n        } catch (Exception e) {\n            code = Constants.ERROR;\n            msg = \"后台繁忙\";\n            TransactionAspectSupport.currentTransa"} {"seed":"public static void main(String[] args) {\n        MallardDuck mallardDuck = new MallardDuck();\n        mallardDuck.performFly();\n        mallardDuck.performQuack();\n        ModelDuck modelDuck = new ModelDuck();\n        modelDuck.performFly();\n        modelDuck.performQuack();\n        modelDuck.setFlyBehavior(new FlyRocketPowered());\n        modelDuck.performFly();\n    }"} {"seed":"@Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.setting_layout);\n        install_layout=(RelativeLayout) findViewById(R.id.install_layout);\n       // set_layout=(RelativeLayout) findViewById(R.id.set_layout);\n        rate_layout=(RelativeLayout) findViewById(R.id.rate_layout);\n        share_layout=(RelativeLayout) findViewById(R.id.share_layout);\n        terms_layout=(RelativeLayout) findViewById(R.id.terms_layout);\n        privacy_layout=(RelativeLayout) findViewById(R.id.privacy_layout);\n        contact_layout=(RelativeLayout) findViewById(R.id.contact_layout);\n        twitter_layout=(RelativeLayout) findViewById(R.id.twitter_layout);\n        cancel_img=(ImageView)findViewById(R.id.cancel_img);\n        install_layout.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if (KeyboardService.rokomojiEnabled(SettingActivity.this)) {\n                    InputMethodManager imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);\n                    imm.showInputMethodPicker();\n                } else {\n                    startActivity(new Intent(\"android.settings.INPUT_METHOD_SETTINGS\"));\n                }\n            }\n        });\n        cancel_img.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                finish();\n            }\n        });\n        cancel_img.setColorFilter(cancel_img.getContext().getResources().getColor(R.color.app_color), PorterDuff.Mode.SRC_ATOP);\n\n        rate_layout.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Intent intent = new Intent(Intent.ACTION_VIEW);\n                //Try Google play\n                intent.setData(Uri.parse(\"market://details?id=\"+getPackageName()));\n                if (!MyStartActivity(intent)) {\n                    //Market (Google play) app seems not installed, let's try to open a webbrowser\n                    intent.setData(Uri.parse(\"https://play.google.com/store/apps/developer?id=\"+getPackageName()));\n                    if (!MyStartActivity(intent)) {\n                        //Well if this also fails, we have run out of options, inform the user.\n                       // Toast.makeText(this, \"Could not open Android market, please install the market app.\", Toast.LENGTH_SHORT).show();\n                    }\n                }\n\n            }\n\n\n        });\n        share_layout.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Intent shareIntent = new Intent(Intent.ACTION_SEND);\n                shareIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                shareIntent.setType(\"text/plain\");\n                shareIntent.putExtra(Intent.EXTRA_TEXT, \"MexFanMoji app \\n\" + \"https://play.google.com/store/apps/details?id=\"+getPackageName()+\"&hl=ens\");\n                startActivity(shareIntent);\n            }\n        });\n      /*  set_layout.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n\n            }\n        });*/\n        privacy_layout.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"http://www.h-emoji.com/privacy-policy/\"));\n                startActivity(browserIntent);\n            }\n        });\n        terms_layout.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"http://www.h-emoji.com/terms-of-service/\"));\n                startActivity(browserIntent);\n            }\n        });\n        contact_layout.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                String mailto = \"mailto:hello@h-emoji.com?subject=Contact us&body=\" + Uri.encode(\"\");\n\n                Intent emailIntent = new Intent(Intent.ACTION_SENDTO);\n                emailIntent.setData(Uri.parse(mailto));\n                startActivity(Intent.createChooser(emailIntent, \"Send Email\"));\n            }\n        });\n        twitter_layout.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://twitter.com/hemojiapp\"));\n                startActivity(browserIntent);\n                dialog.dismiss();\n            }\n        });\n    }"} {"seed":"private boolean MyStartActivity(Intent aIntent) {\n        try\n        {\n            startActivity(aIntent);\n            return true;\n        }\n        catch (ActivityNotFoundException e)\n        {\n            return false;\n        }\n    }"} {"seed":"@Override\n            public void onClick(View view) {\n                if (KeyboardService.rokomojiEnabled(SettingActivity.this)) {\n                    InputMethodManager imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);\n                    imm.showInputMethodPicker();\n                } else {\n                    startActivity(new Intent(\"android.settings.INPUT_METHOD_SETTINGS\"));\n                }\n            }"} {"seed":"@Override\n            public void onClick(View view) {\n                finish();\n            }"} {"seed":"@Override\n            public void onClick(View view) {\n                Intent intent = new Intent(Intent.ACTION_VIEW);\n                //Try Google play\n                intent.setData(Uri.parse(\"market://details?id=\"+getPackageName()));\n                if (!MyStartActivity(intent)) {\n                    //Market (Google play) app seems not installed, let's try to open a webbrowser\n                    intent.setData(Uri.parse(\"https://play.google.com/store/apps/developer?id=\"+getPackageName()));\n                    if (!MyStartActivity(intent)) {\n                        //Well if this also fails, we have run out of options, inform the user.\n                       // Toast.makeText(this, \"Could not open Android market, please install the market app.\", Toast.LENGTH_SHORT).show();\n                    }\n                }\n\n            }"} {"seed":"@Override\n            public void onClick(View view) {\n                Intent shareIntent = new Intent(Intent.ACTION_SEND);\n                shareIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                shareIntent.setType(\"text/plain\");\n                shareIntent.putExtra(Intent.EXTRA_TEXT, \"MexFanMoji app \\n\" + \"https://play.google.com/store/apps/details?id=\"+getPackageName()+\"&hl=ens\");\n                startActivity(shareIntent);\n            }"} {"seed":"@Override\n            public void onClick(View view) {\n                Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"http://www.h-emoji.com/privacy-policy/\"));\n                startActivity(browserIntent);\n            }"} {"seed":"@Override\n            public void onClick(View view) {\n                Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"http://www.h-emoji.com/terms-of-service/\"));\n                startActivity(browserIntent);\n            }"} {"seed":"@Override\n            public void onClick(View view) {\n                String mailto = \"mailto:hello@h-emoji.com?subject=Contact us&body=\" + Uri.encode(\"\");\n\n                Intent emailIntent = new Intent(Intent.ACTION_SENDTO);\n                emailIntent.setData(Uri.parse(mailto));\n                startActivity(Intent.createChooser(emailIntent, \"Send Email\"));\n            }"} {"seed":"@Override\n            public void onClick(View view) {\n                Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://twitter.com/hemojiapp\"));\n                startActivity(browserIntent);\n                dialog.dismiss();\n            }"} {"seed":"public static void main(String[] args) throws IOException {\n\t\tst = new StringTokenizer(br.readLine());\n\n\t\tN = Integer.parseInt(st.nextToken()); // 학생 수\n\t\tM = Integer.parseInt(st.nextToken()); // 간선 수\n\t\tX = Integer.parseInt(st.nextToken()); // 모이는 곳.. 출력\n\n\t\tlist = new ArrayList[N + 1];\n\t\tlist_reverse = new ArrayList[N + 1];\n\t\tfor (int i = 1; i <= N; i++) {\n\t\t\tlist[i] = new ArrayList<Node>();\n\t\t\tlist_reverse[i] = new ArrayList<Node>();\n\t\t}\n\n\t\tint now, next, cost;\n\t\tfor (int i = 0; i < M; i++) {\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tnow = Integer.parseInt(st.nextToken());\n\t\t\tnext = Integer.parseInt(st.nextToken());\n\t\t\tcost = Integer.parseInt(st.nextToken());\n\t\t\tlist[now].add(new Node(next, cost));\n\t\t\tlist_reverse[next].add(new Node(now,cost));\n\t\t} // Graph\n\t\t\n\t\tint max = Integer.MIN_VALUE;\n\t\tint departCost = 0;\n\t\tint arriveCost = 0;\n\t\t\n\t\tdist = new int[N + 1];\n\t\tdist_reverse = new int[N + 1];\n\t\t\n\t\t\n\t\tArrays.fill(dist, INF); // 거리 배열 초기화.\n\t\tArrays.fill(dist_reverse, INF); // 거리 배열 초기화.\n\t\t\n\t\tdijstra(X,dist_reverse,list_reverse);\n\t\tdijstra(X,dist,list);\n\t\t\n\t\tfor (int i = 1; i <= N; i++) {\n\t\t\tSystem.out.println(i);\n\t\t\tSystem.out.println(departCost = dist[i]);\n\t\t\tSystem.out.println(arriveCost = dist_reverse[i]);\n\t\t\tSystem.out.println(\"============================\");\n\t\t\tcost = departCost + arriveCost;\n\t\t\tif("} {"seed":"<cost)max=cost;\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n\n\tprivate static void dijstra(int start, int[] di, ArrayList<Node>[] li) {\n\t\tPriorityQueue<Node> pq = new PriorityQueue<>();\n\t\tdi[start] = 0;\n\t\tpq.offer(new Node(start, di[start]));\n\t\tNode node;\n\t\twhile (!pq.isEmpty()) {\n\t\t\tnode = pq.poll();\n\t\t\t\n\t\t\tfor (int i = 0; i < li[node.index].size(); i++) {\n\t\t\t\tNode temp = li[node.index].get(i);\n\n\t\t\t\tif (di[temp.index] > di[node.index] + temp.cost) {\n\t\t\t\t\tint cost = di[temp.index] = di[node.index] + temp.cost;\n\t\t\t\t\tpq."} {"seed":"this.index = index;\n\t\t\tthis.cost = cost;\n\t\t}\n\n\t\t@Override\n\t\tpublic"} {"seed":"compareTo(Node o) {\n\t\t\treturn cost - o.cost;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn"} {"seed":"@Override\n\tpublic void initSystemState() {\n\t\tsuper.initSystemState();\n\t\tview.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,DisplayUtil.dip2Pix(mContext, value)));\n\t\tview.setBackgroundColor(mContext.getResources().getColor(R.color.trant));\n\t}"} {"seed":"@Override\n\tpublic void doSomethingAboutSystem() {\n\t\t\n\t}"} {"seed":"public void setSpaceValue(int value){\n\t\tthis.value=value;\n\t}"} {"seed":"public static AlarmRCPeerEndConf instance(){\n        if(instance == null){\n            instance = new AlarmRCPeerEndConf();\n        }\n        return instance;\n    }"} {"seed":"@Override\n    protected String getConfFile() {\n        // TODO Auto-generated method stub\n        return Conf.instance().getProperty(\"alarm.root.cause.peer.end\");\n    }"} {"seed":"/**\n\t * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)\n\t */\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tString login = request.getParameter(\"login\");\n\t\tString password = request.getParameter(\"password\");\n\t\t\n\t\tlogger.info(\"Log in with login \" + login);\n\t\t\n\t\tEmployeeDao employeeDao = new EmployeeDaoImpl();\n\t\t\n\t\ttry {\n\t\t\tlogger.trace(\"Get employee with login \" + login);\n\t\t\tEmployee employee = employeeDao.getEmployee(login);\n\t\t\t\n\t\t\tif (employee == null) {\n\t\t\t\tAdminDao adminDao = new AdminDaoImpl();\n\t\t\t\t\n\t\t\t\tAdmin admin = adminDao.getAdmin(login);\n\t\t\t\t\n\t\t\t\tif (admin == null) {\n\t\t\t\t\trequest.setAttribute(\"message\", \"Login \" + login + \" does not exist\");\n\t\t\t\t\t\n\t\t\t\t\trequest.getRequestDispatcher(\"index.jsp\").forward(request, response);\n\t\t\t\t}\n\t\t\t\telse if (!admin.getPassword().equals(password)) {\n\t\t\t\t\trequest.setAttribute(\"message\", \"Password is incorrect\");\n\t\t\t\t\t\n\t\t\t\t\trequest.getRequestDispatcher(\"index.jsp\").forward(request, response);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tCookie cookie = new Cookie(\"adminLogin\", login);\n\t\t\t\t\tresponse.addCookie(cookie);\n\t\t\t\t\tresponse.sendRedirect(\"admin/mainPage.jsp\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!employee.getPassword().equals(password)) {\n\t\t\t\trequest.setAttribute(\"message\", \"Password is incorrect\");\n\t\t\t\t\n\t\t\t\trequest.getRequestDispatcher(\"index.jsp\").forward(request, response);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tCookie cookie = new Cookie(\"employeeLogin\", login);\n\t\t\t\tresponse.addCookie(cookie);\n\t\t\t\tresponse.sendRedirect(\"employee/mainPage.jsp\");\n\t\t\t}\n\t\t} catch (DaoException e) {\n\t\t\t// Go to error page\n\t\t}\n\t}"} {"seed":"/**\n\t * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)\n\t */\nprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tdoGet(request, response);\n\t}"} {"seed":"public float Average(int a)\n\t{\n\t\tfor(i=1;i<=a;i++)\n\t\t{\n\t\t\tresult =result+i;\n\t\t}\n\t\tfloat avg=(result/a);\n\t\treturn avg;\n\t}"} {"seed":"static void main(String args[])// without public it will compile but not run\n{\n\tCheck obj=new Check();\n\tScanner s= new Scanner(System.in);\n\tSystem.out.println(\"Enter Number\");\n\tint a=s.nextInt();\n\tSystem.out.println(obj.Average(a));\n}"} {"seed":"@Override\n    public Dashboard build() {\n        var dataSet = newDataSetBuilder().column(\"Country\", ColumnType.LABEL)\n                                         .column(\"Population\", ColumnType.NUMBER)\n                                         .row(\"Brazil\", \"211\")\n                                         .row(\"United States\", \"328\")\n                                         .row(\"Cuba\", \"11\")\n                                         .row(\"India\", \"1366\")\n                                         .row(\"China\", \"1398\")\n                                         .buildDataSet();\n\n        var populationBar = newBarChartSettings().subType_Column()\n                                                 .width(800)\n                                                 .height(600)\n                                                 .dataset(dataSet)\n                                                 .column(\"Country\")\n                                                 .column(\"Population\")\n                                                 .buildSettings();\n        var page = page(\"Countries Population\",\n                        row(\"<h3> Countries Population</h3>\"),\n                        row(ComponentFactory.displayer(populationBar)));\n\n        var navigation = navigation(group(\"Countries Information\", item(page)));\n\n        return DashboardBuilder.newBuilder(asList(page))\n                               .navigation(navigation)\n                               .build();\n    }"} {"seed":"@Override\n    public String name() {\n        return \"Population\";\n    }"} {"seed":"/**蓝牙�\n��示*/\n    void showMessage(Stri"} {"seed":"public ModbusDevice findByAddress(String address);"} {"seed":"@Transactional\n\tpublic List<Employee> findAll() {\n\t\treturn employeeDao.findAll(); \n\t}"} {"seed":"@Transactional\n\tpublic void save(Employee employee) {\n\t\temployeeDao.save(employee);\t\t\n\t}"} {"seed":"@Transactional\n\tpublic Employee findById(int employeeId) {\n\t\treturn employeeDao.findById(employeeId);\n\t}"} {"seed":"public void delete(Employee employee) {\n\t\temployeeDao.delete(employee);\n\t}"} {"seed":"@Before\n    public void setUp(){\n        attemptId = 1;\n        attemptDuration = 19300;\n        attemptString = \"\" + Forward.TAG + \", \" + TurnLeft.TAG + \", \" + TurnRight.TAG + \", \";\n        attempt = new TaskAttempt(attemptId, attemptDuration, attemptString);\n    }"} {"seed":"@Test\n    public void testNonEmptyConstructor(){\n        assertEquals(attemptId, attempt.getAttemptId());\n        assertEquals(attemptDuration, attempt.getAttemptDuration());\n    }"} {"seed":"@Test\n    public void testSetAndGetInstructionsUsed(){\n        List<Instruction> instructionsUsed = new ArrayList<>();\n        instructionsUsed.add(new Forward());\n        instructionsUsed.add(new Noise());\n        instructionsUsed.add(new TurnLeft());\n        attempt.setInstructionsUsed(instructionsUsed);\n        assertEquals(instructionsUsed, attempt.getInstructionsUsed());\n    }"} {"seed":"@Test\n    public void testGetInstructionsUsedAsString(){\n        assertEquals(attemptString, attempt.getInstructionsUsedAsString());\n    }"} {"seed":"@Test\n    public void testSetAndGetEmptyInstructionList(){\n        List<Instruction> emptyList = new ArrayList<>();\n        attempt.setInstructionsUsed(emptyList);\n        assertEquals(emptyList, attempt.getInstructionsUsed());\n    }"} {"seed":"@Test\n    public void testGetInstructionsUsedAsStringWhenSetWIthEmptyList(){\n        List<Instruction> emptyList = new ArrayList<>();\n        attempt.setInstructionsUsed(emptyList);\n        assertEquals(\"\", attempt.getInstructionsUsedAsString());\n    }"} {"seed":"Optional<Product> findByName(String name);"} {"seed":"List<Product> findByProductStatus(ProductStatus productStatus);"} {"seed":"void exit(int exitCode);"} {"seed":"public ProjectEntity createFrom(String name, String code) {\n        return null;\n    }"} {"seed":"e PictureProvider() {\n\n\t}\n\n\tpublic static PictureProvider getInstance(Context context) {\n\t\tmContext = context;\n\t\tinit();"} {"seed":"�些值\n\t * \n\t * @param mContext2\n\t */\n\tprivate static void init() {\n\t\tcontentResolver = mContext.getContentResolver();\n\t\turi = MediaSto"} {"seed":"Images.Media.EXTERNAL_CONTENT_URI;\n\t}\n\n\tpublic List<Picture> getPictureList() {\n\t\tif (pictureList.size() > 0) {\n\t\t\tpictureList.removeAll(pictureList);\n\t\t}\n\t\tString[] projection = new String[] { \"_data\", \"_size\", \"_display_name\",\n\t\t\t\t\"mime_type\", \"_id\" };\n\t\tCursor cursor = contentResolver\n\t\t\t\t.query(uri, projection, null, null, null);\n\t\tString name;\n\t\tString path;\n\t\tint size;\n\t\tPicture picture;\n\t\tString mime_type;\n\t\tif (cursor != null && cursor.getCount() > 0) {\n\t\t\twhile (cursor.moveToNext()) {\n\t\t\t\tname = cursor.getString(2);\n\t\t\t\tpath = cursor.getString(0);\n\t\t\t\tsize = cursor.getInt(1);\n\t\t\t\tint id = cursor.getInt(4);\n\t\t\t\tmime_type = cursor.getString(3);\n\t\t\t\tpicture = new Picture(name, path, size, mime_type, id);\n\t\t\t\tpictureList.add(picture);\n\t\t\t}\n\t\t\tcurso"} {"seed":"public int maxProfit2(int[] prices) {\n        int length = prices.length;\n        if (length == 0) return 0;\n        int min=Integer.MAX_VALUE;\n        int max=0;\n        for (int i = 0; i < length; i++) {\n          if(prices[i]<=min){\n              min=prices[i];\n          }  else {\n              int temp=prices[i]-min;\n              if(temp>max){\n                  max=temp;\n              }\n          }\n        }\n        return max;\n    }"} {"seed":"public int maxProfit1(int[] prices) {\n        int length = prices.length;\n        if (length == 0) return 0;\n        int max = 0;\n        for (int i = 0; i < length - 1; i++) {\n            for (int j = i + 1; j < length; j++) {\n                int profit = prices[j] - prices[i];\n                if (profit > max) max = profit;\n            }\n        }\n        return max;\n    }"} {"seed":"public int maxProfit(int[] prices) {\n        int length = prices.length;\n        if (length == 0) return 0;\n        int max = 0;\n        for (int i = 0; i < length; i++) {\n            for (int j = 0; j <= i; j++) {\n                max = Math.max(max, prices[i] - prices[j]);\n            }\n        }\n        return max < 0 ? 0 : max;\n    }"} {"seed":"public static void main(String[] args) {\n        Solution121 solution121 = new Solution121();\n        System.out.println(solution121.maxProfit2(new int[]{7, 6, 4, 3, 1}));\n    }"} {"seed":"public static void main(String[] args) {\n        \n        // NullPointerExceptionを出力する\n        try {\n            requireNonNull(null);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        \n        // 通過する\n        try {\n            requireNonNull(\"\");\n        } catch (Exception e) {\n            e.printStackTrace("} {"seed":"}\n    \n    \n    public static void requireNonNull(Object target"} {"seed":"@Transactional\n  public void insertAndInvalidateOldToken(Long userId, String token, Long timeExpired) {\n    // invalid old token\n    LambdaUpdateWrapper<UserToken> lambdaUpdateWrapper = new LambdaUpdateWrapper<>();\n    lambdaUpdateWrapper.eq(UserToken::getUserId, userId).set(UserToken::getStatus, AvailabilityStatus.DISABLED.code);\n    userTokenMapper.update(null, lambdaUpdateWrapper);\n\n    // insert new token\n    UserToken userToken = new UserToken();\n    Long now = Clock.now();\n    userToken.setUserId(userId);\n    userToken.setToken(token);\n    userToken.setStatus(AvailabilityStatus.ENABLED.code);\n    userToken.setTimeCreated(now);\n    userToken.setTimeUpdated(now);\n    userToken.setTimeExpired(timeExpired);\n    userTokenMapper.insert(userToken);\n  }"} {"seed":"public void verifyToken(String token) {\n    if (StringUtils.isBlank(token)) {\n      throw JobException.warn(JobExceptionType.SECURE_API_UNAUTHORIZED_USER, \"请重新登录\");\n    }\n    UserToken userToken = userTokenMapper.findValidByToken(token);\n    if (userToken == null) {\n      throw JobException.warn(JobExceptionType.SECURE_API_UNAUTHORIZED_USER, \"为保证账户安全，请重新登录\", \"User token cannot be found in DB, userToken {}\", token);\n    }\n    if (userToken.getTimeExpired() < Clock.now()) {\n      throw JobException.warn(JobExceptionType.SECURE_API_UNAUTHORIZED_USER, \"为保证账户安全，请重新�"} {"seed":"�\", \"ser login token expired, token {}\", token);\n    }\n  }\n\n  public UserToken getByToken(String token) {\n    UserToken userToken = userTokenMapper.findValidByToken(token);\n    if (userToken == null) {\n      throw JobException.error(\"can not fin"} {"seed":"cord by token {}\", token);\n    }\n    return userToken;\n  }\n\n  public void disableToken(String token) {\n    UserToken userToken = getByToken(token);\n    userToken.setStatus(AvailabilityStatus."} {"seed":"public static void main(String[] args) {\n        try {\n            CheckoutService checkoutService = new CheckoutService(new ProductDao());\n            checkoutService.scan(\"TICKET\");\n            checkoutService.scan(\"TICKET\");\n            checkoutService.scan(\"TICKET\");\n            checkoutService.scan(\"TICKET\");\n            checkoutService.scan(\"TICKET\");\n\n            double total = checkoutService.total();\n            System.out.println(total);\n        }finally {\n            CassandraConfig.close();\n        }\n        System.exit(0);\n    }"} {"seed":"public static void main(String[] args) {\n        for (int i = 0; i < TARGET_COLOR_COUNT; ++i) {\n            TARGET_COLORS[i] = new Color();\n        }\n\n        int targetIndex;\n        double minDistance, distance;\n        while (true) {\n            Color color = new Color();\n            if (color.r == -1 && color.g == -1 && color.b == -1) {\n                break;\n            }\n            targetIndex = -1;\n            minDistance = Double.MAX_VALUE;\n            for (int i = 0; i < TARGET_COLOR_COUNT; ++i) {\n                distance = Color.distance(color, TARGET_COLORS[i]);\n                if (minDistance > distance) {\n                    minDistance = distance;\n                    targetIndex = i;\n                }\n            }\n            System.out.println(String.format(\"%s maps to %s\", color.toString(),\n                    TARGET_COLORS[targetIndex].toString()));\n        }\n        \n    }"} {"seed":"public static double distance(Color left, Color right) {\n            return Math.sqrt(Math.pow(left.r - right.r, 2)\n                    + Math.pow(left.g - right.g, 2)\n                    + Math.pow(left.b - right.b, 2));\n        }"} {"seed":"@Override\n        public String toString() {\n            return String.format(\"(%d,%d,%d)\", r, g, b);\n        }"} {"seed":"public static void main(String args[]) throws NumberFormatException, IOException {\n\t\tTurtleRobot slowturtle = new TurtleRobot();\n\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tSystem.out.println(\"How many times?\");\n\t\tint n = Integer.parseInt(br.readLine());\n\n\t\twhile ((n--) > 0) {\n\t\t\tslowturtle.forward(25);\n\t\t\tslowturtle.right(90.0);\n\t\t\tslowturtle.forward(25);\n\t\t\tslowturtle.right(90.0);\n\t\t\tslowturtle.forward(25);// up-right-straight-right-down\n\n\t\t\tslowturtle.left(90.0);\n\t\t\tslowturtle.forward(25);// left-straight\n\n\t\t\tslowturtle.left(90.0);\n\n\t\t}\n\t}"} {"seed":"@Override\n    public void run() {\n        System.out.println(\"Timer task started at:\"+ new Date());\n        completeTask();\n\t\tfor (int i=0; i <= kilometers; i++) {\n            System.out.print(\"\\n\" + name + \" has run \" + i + \" kilometer\" + (i != 1 ? \"s\" : \"\"));\n\t\t}   \n        System.out.println(\"\\nTimer task finished at:\"+ new Date() + \" for \" + name);\n    }"} {"seed":"private void completeTask() {\n        try {\n            Thread.sleep(10000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }"} {"seed":"public void book(String title) {\n\t\tname.clear();\n\t\tname.sendKeys(title);\n\t\tsubmit.click();\n\t}"} {"seed":"public String toString ()\n\t{\n\t\treturn \"not\";\n\t}"} {"seed":"public Unary clone()\n\t{\n\t\treturn new Unary();\n\t}"} {"seed":"@Test\n    public void test1() {\n        BSTStringSet tester = new BSTStringSet();\n        tester.put(\"a\");\n        tester.put(\"b\");\n        tester.put(\"b\");\n        tester.put(\"c\");\n        List<String> Tester2 = tester.asList();\n        ArrayList ans = new ArrayList<String>();\n        ans.add(\"a\");\n        ans.add(\"b\");\n        ans.add(\"c\");\n        assertEquals(ans, Tester2);\n        assertTrue(tester.contains(\"b\"));\n        assertFalse(tester.contains(\"x\"));\n    }"} {"seed":"@Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        // 无标题\n//        requestWindowFeature(Window.FEATURE_NO_TITLE);\n        // 设置竖屏\n        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);\n\n        setWindowAt"} {"seed":"}\n\n    protected void setStatusBar() {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {//5.0及以上\n            View decorView = getWindow().getDecorView();\n            int option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n                    | View.SYSTEM_UI_FLAG_LAYOUT_STABLE;\n            decorView.setSystemUiVisibility(option);\n            if (mStatusBarColor == 0)\n                getWindow().setStatusBarColor(ContextCompat.getColor(this, R\n                        .color.colorPrimary));\n\n            else\n                getWindow().setStatusBarColor(ContextCompat.getColor\n                        (this, mStatusBarColor));\n        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT && Build.VERSION.SDK_INT <\n                Build.VERSION_CODES.LOLLIPOP) {//4.4到5.0\n            View view = new View(this);\n            if (mStatusBarColor == 0)\n                view.setBackgroundColor(ContextCompat.getColor(this, R\n                        .color.colorPrimary));\n            else\n                view.setBackgroundColor(ContextCompat.getColor\n                        (this, mStatusBarColor));\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup\n                    .LayoutParams.MATCH_PARENT,\n                    StatusBarUtils.getStatusBarHeight(this));\n            ViewGroup decorView = (ViewGroup) findViewById(android.R.id.content);\n            decorView.addView(view, par"} {"seed":"}\n\n    }\n\n\n    protected void setWindowAttrs() {\n//        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager\n//                .LayoutParams.F"} {"seed":"@PostConstruct\n\tpublic void initialize() {\n\t\t\n\t\tlog.info(\">>Initializing StartupBean\");\n\t\t\n\t\tSession session = HibernateUtil.getSessionFactory().openSession();\n\t\tTransaction tx = null;\n\t\ttry {\n\t\t\t\n\t\t\ttx = session.beginTransaction();\n\n\t\t\tI18NMessage i18n = new I18NMessage();\n\t\t\ti18n.setMessageCode(\"message.say.hello\");\n\t\t\ti18n.setMessageRU(\"Privet\");\n\t\t\ti18n.setMessagePT(\"Olá\");\n\t\t\ti18n.setMessageEN(\"Hi\");\n\t\t\t\n\t\t\tsession.save(i18n);\n\t         \n\t\t\ttx.commit();\n\t\t   \n\t\t} catch (Exception e) {\n\t\t\t\n\t\t\tif (tx != null){\n\t\t\t\ttx.rollback();\n\t\t\t}\n\t\t\te.printStackTrace(); \n\t\t\t\n\t\t} finally {\n\t\t\t\n\t\t   session.close();\n\t\t   \n\t\t}"} {"seed":"public void SendText(String Text) {\n\t\tSeachBar.sendKeys(Text);\n\t\tSeachBar.submit();\t\n\t}"} {"seed":"CategoryDto getById(Integer id);"} {"seed":"List<CategoryDto> getAll();"} {"seed":"CategoryDto create(CategoryRequest categoryRequest);"} {"seed":"CategoryDto update(Integer id,CategoryRequest categoryRequest);"} {"seed":"Boolean delete(Integer id);"} {"seed":"@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_login);\n\n        tutorialsWelcomeScreen = new WelcomeHelper(this, TutorialsActivity.class);\n        tutorialsWelcomeScreen.show(savedInstanceState);\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n            Window w = getWindow(); // in Activity's onCreate() for instance\n            w.setFlags(WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS, WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS);\n        }\n\n        init();\n    }"} {"seed":"private void init() {\n        btnSignIn = (Button) findViewById(R.id.sign_in_btn);\n\n        btnSignUp = (Button) findViewById(R.id.goto_reg_btn);\n        btnSignUp.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent generegistration  = new Intent(getApplicationContext(), GeneRegActivity.class);\n                startActivity(generegistration);\n            }\n        });\n\n        btnForgotP = (Button) findViewById(R.id.forgotP_btn);\n        btnForgotP.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent gotoFP  = new Intent(getApplicationContext(), ForgotPassActivity.class);\n                startActivity(gotoFP);\n            }\n        });\n\n        btnGuest = (Button) findViewById(R.id.guest_sign_in_btn);\n    }"} {"seed":"@Override\n    protected void onSaveInstanceState(Bundle outState) {\n        super.onSaveInstanceState(outState);\n        tutorialsWelcomeScreen.onSaveInstanceState(outState);\n    }"} {"seed":"@Override\n            public void onClick(View v) {\n                Intent generegistration  = new Intent(getApplicationContext(), GeneRegActivity.class);\n                startActivity(generegistration);\n            }"} {"seed":"@Override\n            public void onClick(View v) {\n                Intent gotoFP  = new Intent(getApplicationContext(), ForgotPassActivity.class);\n                startActivity(gotoFP);\n            }"} {"seed":"/**\n\t * Gets the vertical name.\n\t *\n\t * @return the vertical name\n\t */\npublic String getVerticalName() {\n\t\treturn verticalName;\n\t}"} {"seed":"/**\n\t * Sets the vertical name.\n\t *\n\t * @param verticalName the new vertical name\n\t */\npublic void setVerticalName(final String verticalName) {\n\t\tthis.verticalName = verticalName;\n\t}"} {"seed":"/**\n\t * Gets the cat group id - defines the search group details.\n\t *\n\t * @return the cat group id - defines the search group details\n\t */\npublic String getCatGroupId() {\n\t\treturn catGroupId;\n\t}"} {"seed":"/**\n\t * Sets the cat group id - defines the search group details.\n\t *\n\t * @param catGroupId the new cat group id - defines the search group details\n\t */\npublic void setCatGroupId(final String catGroupId) {\n\t\tthis.catGroupId = catGroupId;\n\t}"} {"seed":"/**\n\t * Gets the vertical url name.\n\t *\n\t * @return the vertical url name\n\t */\npublic String getVerticalUrlName() {\n\t\treturn verticalUrlName;\n\t}"} {"seed":"/**\n\t * Sets the vertical url name.\n\t *\n\t * @param verticalUrlName the new vertical url name\n\t */\npublic void setVerticalUrlName(final String verticalUrlName) {\n\t\tthis.verticalUrlName = verticalUrlName;\n\t}"} {"seed":"/**\n\t * Gets the vertical url.\n\t *\n\t * @return the vertical url\n\t */\npublic String getVerticalUrl() {\n\t\treturn VerticalUrl;\n\t}"} {"seed":"/**\n\t * Sets the vertical url.\n\t *\n\t * @param verticalUrl the new vertical url\n\t */\npublic void setVerticalUrl(final String verticalUrl) {\n\t\tVerticalUrl = verticalUrl;\n\t}"} {"seed":"/**\n\t * Sets the vertical url.\n\t *\n\t * @param verticalUrl the new vertical url\n\t */\n@Override\n\tpublic String toString() {\n\t\tfinal StringBuilder builder = new StringBuilder();\n\t\tbuilder.append(\"Verticals [verticalName=\").append(verticalName).append(\", catGroupId=\").append(catGroupId)\n\t\t\t\t.append(\", verticalUrlName=\").append(verticalUrlName).append(\", VerticalUrl=\").append(VerticalUrl)\n\t\t\t\t.append(\"]\");\n\t\treturn builder.toString();\n\t}"} {"seed":"@StreamListener(CanalesProducto.ESTADO_PEDIDO_IN)\n    public void compruebaEstadoPedido(EventoEstadoPedido eventoEstadoPedido) {\n\n    \tif (ESTADO_APROBADO.equals(eventoEstadoPedido.getEstadoPedido())) {\n    \t\tproductoService.rebajaSaldosProductos(eventoEstadoPedido.getProductosCantidades());\n    \t\tlog.info(\"Saldos de producto rebajados con pedido {}\", eventoEstadoPedido.getPedidoId());\n    \t}\n    }"} {"seed":"ME строка1\nстрока2                           REMOVED строка2\nстрока3        строка3            SAME строка3\nстрока5                           ADDED строка5\nстрока4        строка4            SAME строка4\nстрока5                           REMOVED строка5\n*/\n\npublic class Solution {\n    public static List<LineItem> lines = new ArrayList<LineItem>();\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\n        BufferedReader reader1 = new BufferedReader(new FileReader(bufferedReader.readLine()));\n        BufferedReader reader2 = new BufferedReader(new FileReader(bufferedReader.readLine()));\n        bufferedReader.close();\n        String s,s2;\n        ArrayList<String> arr1 = new ArrayList<>();\n        ArrayList<String> arr2 = new ArrayList<>();\n\n        while ((s = reader1.readLine()) != null){\n            arr1.add(s);\n        }\n        while ((s = reader2.readLine()) != null){\n            arr2.add(s);\n        }\n\n        int i=0;\n        while (arr1.size() > 0){\n            s = arr1.get(i);\n            if (arr2.size() == 0){\n                lines.add(new LineItem(Type.REMOVED, s));\n                arr1.remove(i);\n            }\n            else\n            {\n                s2 = arr2.get(i);\n                if (s.equals(s2))\n                {\n                    lines.add(new LineItem(Type.SAME, s));\n                    arr1.remove(i);\n                    arr2.remove(i);\n                } else\n                {\n                    if (s.equals(arr2.get(i + 1))){\n                        lines.add(new LineItem(Type.ADDED, s2));\n                        arr2.remove(i);"} {"seed":"public static void main(String[] args) {\n\t\t\n\t\tClassServiceV6 csV6 = new ClassServiceV6();\n\t\t\n\t\tint num1 = 88;\n\t\tint num2 = 99;\n\t\t//\t\t\t\t각각 method에 변수(에 담긴 값) num1과 num2를 전달하고\n\t\t//\t\t\t\t변수 num1과 num2에 담긴 값을 전달\n\t\tint add = csV6.add(num1, num2);\n\t\tint subst = csV6.substraction(num1, num2);\n\t\t\n\t\tSystem.out"} {"seed":"public ImmutableList getNumbers() {\n        return new ImmutableList(this.numbers);\n    }"} {"seed":"@Override\n    public boolean onTouchEvent(MotionEvent ev) {\n        return this.canScroll&&super.onTouchEvent(ev);\n    }"} {"seed":"@Override\n    public boolean onInterceptTouchEvent(MotionEvent ev) {\n        return this.canScroll&&super.onInterceptTouchEvent(ev);\n    }"} {"seed":"public void isCanScroll(boolean b){\n        this.canScroll =b;\n    }"} {"seed":"@Override  \n\t    protected void onActivityResult(int requestCode, int resultCode,  \n\t                                       Intent intent) {  \n\t     if(requestCode==FILECHOOSER_RESULTCODE)  \n\t     {  \n\t      if (null == mUploadMessage) return;  \n\t               Uri result = intent == null || resultCode != RESULT_OK ? null  \n\t                       : intent.getData();  \n\t               mUploadMessage.onReceiveValue(result);  \n\t               mUploadMessage = null;  \n\t     }\n\t     }"} {"seed":"@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_fileuploadsd);\n\t\t\n\t\tw1=(WebView)findViewById(R.id.webViewmapsd);\n      \tw1.setWebViewClient(new WebViewClient()); \n\t\tw1.getSettings().setJavaScriptEnabled(true);\n\t\t\n\t\tw1.getSettings().setJavaScriptCanOpenWindowsAutomatically(false);\n\t\tw1.getSettings().setLayoutAlgorithm(LayoutAlgorithm.NORMAL);\n\t\t webViewClient = new SimpleWebViewClient();\n\t        chromeClient = new SimpleChromeClient();\n\t        w1.setWebViewClient(webViewClient);\n\t        w1.setWebChromeClient(chromeClient);\n\t        \n\n\t\ttry\n\t    {\t   \n\t    \tw1.loadUrl(\"http://192.168.43.42/ImageMap/SourceToDestination.php\");\n\t    }\n\t    catch(Exception w){}\n\t    \n\t    w1.setWebViewClient(new WebViewClient() {\n\t        @Override\n\t\t    public void onReceivedError(WebView view, int errorCode,\n\t                 String description, String failingUrl) {\n\n\t        \t w1.loadUrl(\"about:blank\");\n\t             Toast.makeText(getApplication(), \"Oh no! Plz Check Data Connection\",Toast.LENGTH_SHORT).show();\n\n\t        }\n\t    });\n\t    \n\t    w1.setWebChromeClient(new WebChromeClient()  \n\t    {  \n\n            \n         //The undocumented magic method override  \n         //Eclipse will swear at you if you try to put @Override here  \n      // For Android 3.0+\n      public void openFileChooser(ValueCallback<Uri> uploadMsg) {  \n\n          mUploadMessage = uploadMsg;  \n          Intent i = new Intent(Intent.ACTION_GET_CONTENT);  \n          i.addCategory(Intent.CATEGORY_OPENABLE);  \n          i.setType(\"image/*\");  \n          Fileuploadsd.this.startActivityForResult(Intent.createChooser(i,\"File Chooser\"), FILECHOOSER_RESULTCODE);  \n\n         }\n\n      // For Android 3.0+\n         public void openFileChooser( ValueCallback uploadMsg, String acceptType ) {\n         mUploadMessage = uploadMsg;\n         Intent i = new Intent(Intent.ACTION_GET_CONTENT);\n         i.addCategory(Intent.CATEGORY_OPENABLE);\n         i.setType(\"*/*\");\n         Fileuploadsd.this.startActivityForResult(\n         Intent.createChooser(i, \"File Browser\"),\n         FILECHOOSER_RESULTCODE);\n         }\n\n      //For Android 4.1\n         public void openFileChooser(ValueCallback<Uri> uploadMsg, String acceptType, String capture){\n             mUploadMessage = uploadMsg;  \n             Intent i = new Intent(Intent.ACTION_GET_CONTENT);  \n             i.addCategory(Intent.CATEGORY_OPENABLE);  \n             i.setType(\"image/*\");  \n             Fileuploadsd.this.startActivityForResult( Intent.createChooser( i, \"File Chooser\" ), Fileuploadsd.FILECHOOSER_RESULTCODE );\n\n         }\n \n \t\t \n});\n\t    \n\t}"} {"seed":"private void takeScreenshot() {\n        Date now = new Date();\n        android.text.format.DateFormat.format(\"yyyy-MM-dd_hh:mm:ss\", now);\n\n        try {\n            // image naming and path  to include sd card  appending name you choose for file\n            String mPath = Environment.getExternalStorageDirectory().toString() + \"/\" + now + \".jpg\";\n\n            // create bitmap screen capture\n            View v1 = getWindow().getDecorView().getRootView();\n            v1.setDrawingCacheEnabled(true);\n            Bitmap bitmap = Bitmap.createBitmap(v1.getDrawingCache());\n            v1.setDrawingCacheEnabled(false);\n\n            File imageFile = new File(mPath);\n\n            FileOutputStream outputStream = new FileOutputStream(imageFile);\n            int quality = 100;\n            bitmap.compress(Bitmap.CompressFormat.JPEG, quality, outputStream);\n            outputStream.flush();\n            outputStream.close();\n\n            openScreenshot(imageFile);\n        } catch (Throwable e) {\n            // Several error may come out with file handling or OOM\n            e.printStackTrace();\n        }\n    }"} {"seed":"private void openScreenshot(File imageFile) {\n        Intent intent = new Intent();\n        intent.setAction(Intent.ACTION_VIEW);\n        Uri uri = Uri.fromFile(imageFile);\n        intent.setDataAndType(uri, \"image/*\");\n        startActivity(intent);\n    }"} {"seed":"public boolean onKeyDown(int keyCode, KeyEvent event) {\n\t\t// Check if the key event was the Back button and if there's history\n\t\tif ((keyCode == KeyEvent.KEYCODE_BACK) && w1.canGoBack()) {\n\t\tw1.goBack();\n\t\treturn true;\n\t\t}\n\t\t// If it wasn't the Back key or there's no web page history, bubble up to the default\n\t\t// system behavior (probably exit the activity)\n\t\treturn super.onKeyDown(keyCode, event);\n\t\t}"} {"seed":"@Override\n\tpublic boolean onOptionsItemSelected(MenuItem item) {\n\t    // Handle action bar item clicks here. The action bar will\n\t    // automatically handle clicks on the Home/Up button, so long\n\t    // as you specify a parent activity in AndroidManifest.xml.\n\t    int id = item.getItemId();\n\t    if (id == R.id.action_cpfusd) {\n\t\t\t\n\t    \ttakeScreenshot();\n\t    \t\n\t\t\t//Intent intent=new Intent(getApplicationContext(),MainActivity.class);\n\t\t\t//startActivity(intent);\n\n\t    }\n\t    return super.onOptionsItemSelected(item);\n\t}"} {"seed":"@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n\t// Inflate the menu; this adds items to the action bar if it is present.\n\tgetMenuInflater().inflate(R.menu.fileuploadsd, menu);\n\treturn true;\n}"} {"seed":"public void resetJsTimeout() {\n            timeoutCounter = 0;\n        }"} {"seed":"@Override\n        public void onReceivedTitle(WebView view, String title) {\n        \tFileuploadsd.this.setTitle(title);\n        }"} {"seed":"@Override\n        public void onPageStarted(WebView view, String url, Bitmap favicon) {\n            // TODO Auto-generated method stub\n            super.onPageStarted(view, url, favicon);\n        }"} {"seed":"@Override\n        public boolean shouldOverrideUrlLoading(WebView view, String url) {\n            // TODO Auto-generated method stub\n\n            view.loadUrl(url);\n            return true;\n\n        }"} {"seed":"@Override\n        public void onPageFinished(WebView view, String url) {\n            // TODO Auto-generated method stub\n            super.onPageFinished(view, url);\n\n            \n        }"} {"seed":"@Override\n        public void onReceivedError(WebView view, int errorCode, String description,\n                String failingUrl) {\n            pageErrorFlag = true;\n        }"} {"seed":"@Override\n\t\t    public void onReceivedError(WebView view, int errorCode,\n\t                 String description, String failingUrl) {\n\n\t        \t w1.loadUrl(\"about:blank\");\n\t             Toast.makeText(getApplication(), \"Oh no! Plz Check Data Connection\",Toast.LENGTH_SHORT).show();\n\n\t        }"} {"seed":"public void openFileChooser(ValueCallback<Uri> uploadMsg) {  \n\n          mUploadMessage = uploadMsg;  \n          Intent i = new Intent(Intent.ACTION_GET_CONTENT);  \n          i.addCategory(Intent.CATEGORY_OPENABLE);  \n          i.setType(\"image/*\");  \n          Fileuploadsd.this.startActivityForResult(Intent.createChooser(i,\"File Chooser\"), FILECHOOSER_RESULTCODE);  \n\n         }"} {"seed":"public void openFileChooser( ValueCallback uploadMsg, String acceptType ) {\n         mUploadMessage = uploadMsg;\n         Intent i = new Intent(Intent.ACTION_GET_CONTENT);\n         i.addCategory(Intent.CATEGORY_OPENABLE);\n         i.setType(\"*/*\");\n         Fileuploadsd.this.startActivityForResult(\n         Intent.createChooser(i, \"File Browser\"),\n         FILECHOOSER_RESULTCODE);\n         }"} {"seed":"public void openFileChooser(ValueCallback<Uri> uploadMsg, String acceptType, String capture){\n             mUploadMessage = uploadMsg;  \n             Intent i = new Intent(Intent.ACTION_GET_CONTENT);  \n             i.addCategory(Intent.CATEGORY_OPENABLE);  \n             i.setType(\"image/*\");  \n             Fileuploadsd.this.startActivityForResult( Intent.createChooser( i, \"File Chooser\" ), Fileuploadsd.FILECHOOSER_RESULTCODE );\n\n         }"} {"seed":"public void addChange(Change change) {\n        this.changer.add(change);\n    }"} {"seed":"public String change(String characterString) {\n        for (Change change: this.changer) {\n            characterString = change.change(characterString);\n        }\n\n        return characterString;\n    }"} {"seed":"protected abstract Set<?> getBindProperties( final T pojo );"} {"seed":"@Override\n    public void setBindings( final Class<?> namePropertyClass,\n                             final Map<Class, Class> baseTypes,\n                             final Map<Class, Set<String>> propertySetsFieldNames,\n                             final Map<Class, Set<String>> propertiesFieldNames,\n                             final Map<Class, Class> propertyGraphFactoryFieldNames,\n                             final Map<Class, String> propertyLabelsFieldNames,\n                             final Map<Class, String> propertyTitleFieldNames,\n                             final Map<Class, String> propertyCategoryFieldNames,\n                             final Map<Class, String> propertyDescriptionFieldNames ) {\n        this.namePropertyClass = namePropertyClass;\n        this.baseTypes = baseTypes;\n        this.propertySetsFieldNames = propertySetsFieldNames;\n        this.propertiesFieldNames = propertiesFieldNames;\n        this.propertyGraphFactoryFieldNames = propertyGraphFactoryFieldNames;\n        this.propertyLabelsFieldNames = propertyLabelsFieldNames;\n        this.propertyTitleFieldNames = propertyTitleFieldNames;\n        this.propertyCategoryFieldNames = propertyCategoryFieldNames;\n        this.propertyDescriptionFieldNames = propertyDescriptionFieldNames;\n    }"} {"seed":"@Override\n    @SuppressWarnings( \"unchecked\" )\n    public String getBaseType( final Class<?> type ) {\n        final Class<?> baseType = baseTypes.get( type );\n        if ( null != baseType ) {\n            return getDefinitionId( baseType );\n\n        }\n        return null;\n    }"} {"seed":"@Override\n    public String[] getTypes( final String baseType ) {\n        List<String> result = new LinkedList<>();\n        for ( Map.Entry<Class, Class> entry : baseTypes.entrySet() ) {\n            final Class type = entry.getKey();\n            final Class _baseType = entry.getValue();\n            final String _id = getDefinitionId( _baseType );\n            if ( baseType.equals( _id ) ) {\n                result.add( getDefinitionId( type ) );\n            }\n\n        }\n        if ( !result.isEmpty() ) {\n            return result.toArray( new String[ result.size() ] );\n\n        }\n        return null;\n    }"} {"seed":"public String getId( final T pojo ) {\n        return getDefinitionId( pojo.getClass() );\n    }"} {"seed":"public Object getNameProperty( final T pojo ) {\n        final Set<?> properties = getProperties( pojo );\n        if ( null != properties && !properties.isEmpty() ) {\n            for ( final Object property : properties ) {\n                if ( getNamePropertyClass().equals( property.getClass() ) ) {\n                    return property;\n                }\n            }\n        }\n        return null;\n    }"} {"seed":"public Set<?> getProperties( final T pojo ) {\n        final Set<Object> result = new HashSet<>();\n        // Obtain all properties from property sets.\n        final Set<?> propertySetProperties = definitionUtils.getPropertiesFromPropertySets( pojo );\n        if ( null != propertySetProperties ) {\n            result.addAll( propertySetProperties );\n        }\n        final Set<?> bindProperties = getBindProperties( pojo );\n        if ( null != bindProperties && !bindProperties.isEmpty() ) {\n            result.addAll( bindProperties );\n        }\n        return result;\n    }"} {"seed":"@Override\n    public Class<? extends ElementFactory> getGraphFactoryType( final T pojo ) {\n        return getGraphFactory( pojo.getClass() );\n    }"} {"seed":"@Override\n    @SuppressWarnings( \"unchecked\" )\n    public Class<? extends ElementFactory> getGraphFactory( final Class<?> type ) {\n        return getPropertyGraphFactoryFieldNames().get( type );\n    }"} {"seed":"public boolean accepts( final Class<?> type ) {\n        final boolean hasType = getPropertyCategoryFieldNames().containsKey( type );\n        // If not types found, check if it's a super type.\n        return hasType || baseTypes.values().contains( type );\n    }"} {"seed":"@Override\n    public boolean isPojoModel() {\n        return true;\n    }"} {"seed":"@Override\n    public int getPriority() {\n        return 0;\n    }"} {"seed":"protected Class<?> getNamePropertyClass() {\n        return namePropertyClass;\n    }"} {"seed":"protected Map<Class, Set<String>> getPropertySetsFieldNames() {\n        return propertySetsFieldNames;\n    }"} {"seed":"protected Map<Class, Set<String>> getPropertiesFieldNames() {\n        return propertiesFieldNames;\n    }"} {"seed":"protected Map<Class, Class> getPropertyGraphFactoryFieldNames() {\n        return propertyGraphFactoryFieldNames;\n    }"} {"seed":"protected Map<Class, String> getPropertyLabelsFieldNames() {\n        return propertyLabelsFieldNames;\n    }"} {"seed":"protected Map<Class, String> getPropertyTitleFieldNames() {\n        return propertyTitleFieldNames;\n    }"} {"seed":"protected Map<Class, String> getPropertyCategoryFieldNames() {\n        return propertyCategoryFieldNames;\n    }"} {"seed":"protected Map<Class, String> getPropertyDescriptionFieldNames() {\n        return propertyDescriptionFieldNames;\n    }"} {"seed":"protected String getDefinitionId( final Class<?> type ) {\n        return BindableAdapterUtils.getDefinitionId( type );\n    }"} {"seed":"public List<ProductDTO> productList(HttpServletRequest request) {\n\t\tProductDAO pdao = new ProductDAO();\n\t\tpdao.dbconnection();\n\t\tString search = request.getParameter(\"psearch\");\n\t\tList<ProductDTO> plist = pdao.ProductList(search);\n\t\tpdao.dbClose();\n\t\treturn plist;\n\t}"} {"seed":"public void notifyResult(Object result);"} {"seed":"@Test\n    void shouldSeeNodeInTransaction() throws Exception\n    {\n        long nodeId;\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            nodeId = tx.dataWrite().nodeCreate();\n            try ( NodeCursor node = tx.cursors().allocateNodeCursor() )\n            {\n                tx.dataRead().singleNode( nodeId, node );\n                assertTrue( node.next(), \"should access node\" );\n                assertEquals( nodeId, node.nodeReference() );\n                assertFalse( node.next(), \"should only find one node\" );\n            }\n            tx.commit();\n        }\n\n        try ( org.neo4j.graphdb.Transaction tx = graphDb.beginTx() )\n        {\n            assertEquals( nodeId, tx.getNodeById( nodeId ).getId() );\n        }\n    }"} {"seed":"@Test\n    void shouldSeeNewLabeledNodeInTransaction() throws Exception\n    {\n        long nodeId;\n        int labelId;\n        final String labelName = \"Town\";\n\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            nodeId = tx.dataWrite().nodeCreate();\n            labelId = tx.token().labelGetOrCreateForName( labelName );\n            tx.dataWrite().nodeAddLabel( nodeId, labelId );\n\n            try ( NodeCursor node = tx.cursors().allocateNodeCursor() )\n            {\n                tx.dataRead().singleNode( nodeId, node );\n                assertTrue( node.next(), \"should access node\" );\n\n                LabelSet labels = node.labels();\n                assertEquals( 1, labels.numberOfLabels() );\n                assertEquals( labelId, labels.label( 0 ) );\n                assertTrue( node.hasLabel( labelId ) );\n                assertFalse( node.hasLabel( labelId + 1 ) );\n                assertFalse( node.next(), \"should only find one node\" );\n            }\n            tx.commit();\n        }\n\n        try ( org.neo4j.graphdb.Transaction tx = graphDb.beginTx() )\n        {\n            assertThat( tx.getNodeById( nodeId ).getLabels() ).isEqualTo( Iterables.iterable( label( labelName ) ) );\n        }\n    }"} {"seed":"@Test\n    void shouldSeeLabelChangesInTransaction() throws Exception\n    {\n        long nodeId;\n        int toRetain, toDelete, toAdd, toRegret;\n        final String toRetainName = \"ToRetain\";\n        final String toDeleteName = \"ToDelete\";\n        final String toAddName = \"ToAdd\";\n        final String toRegretName = \"ToRegret\";\n\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            nodeId = tx.dataWrite().nodeCreate();\n            toRetain = tx.token().labelGetOrCreateForName( toRetainName );\n            toDelete = tx.token().labelGetOrCreateForName( toDeleteName );\n            tx.dataWrite().nodeAddLabel( nodeId, toRetain );\n            tx.dataWrite().nodeAddLabel( nodeId, toDelete );\n            tx.commit();\n        }\n\n        try ( org.neo4j.graphdb.Transaction tx = graphDb.beginTx() )\n        {\n            assertThat( tx.getNodeById( nodeId ).getLabels() ).contains( label( toRetainName ), label( toDeleteName ) );\n        }\n\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            toAdd = tx.token().labelGetOrCreateForName( toAddName );\n            tx.dataWrite().nodeAddLabel( nodeId, toAdd );\n            tx.dataWrite().nodeRemoveLabel( nodeId, toDelete );\n\n            toRegret = tx.token().labelGetOrCreateForName( toRegretName );\n            tx.dataWrite().nodeAddLabel( nodeId, toRegret );\n            tx.dataWrite().nodeRemoveLabel( nodeId, toRegret );\n\n            try ( NodeCursor node = tx.cursors().allocateNodeCursor() )\n            {\n                tx.dataRead().singleNode( nodeId, node );\n                assertTrue( node.next(), \"should access node\" );\n\n                assertLabels( node.labels(), toRetain, toAdd );\n                assertTrue( node.hasLabel( toAdd ) );\n                assertTrue( node.hasLabel( toRetain ) );\n                assertFalse( node.hasLabel( toDelete ) );\n                assertFalse( node.hasLabel( toRegret ) );\n                assertFalse( node.next(), \"should only find one node\" );\n            }\n            tx.commit();\n        }\n\n        try ( org.neo4j.graphdb.Transaction tx = graphDb.beginTx() )\n        {\n            assertThat( tx.getNodeById( nodeId ).getLabels() ).contains( label( toRetainName ), label( toAddName ) );\n        }\n    }"} {"seed":"@Test\n    void shouldDiscoverDeletedNodeInTransaction() throws Exception\n    {\n        long nodeId;\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            nodeId = tx.dataWrite().nodeCreate();\n            tx.commit();\n        }\n\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            assertTrue( tx.dataWrite().nodeDelete( nodeId ) );\n            try ( NodeCursor node = tx.cursors().allocateNodeCursor() )\n            {\n                tx.dataRead().singleNode( nodeId, node );\n                assertFalse( node.next() );\n            }\n            tx.commit();\n        }\n    }"} {"seed":"@Test\n    void shouldHandleMultipleNodeDeletions() throws Exception\n    {\n        long nodeId;\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            nodeId = tx.dataWrite().nodeCreate();\n            tx.commit();\n        }\n\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            assertTrue( tx.dataWrite().nodeDelete( nodeId ) );\n            assertFalse( tx.dataWrite().nodeDelete( nodeId ) );\n            tx.commit();\n        }\n    }"} {"seed":"@Test\n    void shouldSeeNewNodePropertyInTransaction() throws Exception\n    {\n        long nodeId;\n        String propKey1 = \"prop1\";\n        String propKey2 = \"prop2\";\n\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            nodeId = tx.dataWrite().nodeCreate();\n            int prop1 = tx.token().propertyKeyGetOrCreateForName( propKey1 );\n            int prop2 = tx.token().propertyKeyGetOrCreateForName( propKey2 );\n            assertEquals( tx.dataWrite().nodeSetProperty( nodeId, prop1, stringValue( \"hello\" ) ), NO_VALUE );\n            assertEquals( tx.dataWrite().nodeSetProperty( nodeId, prop2, stringValue( \"world\" ) ), NO_VALUE );\n\n            try ( NodeCursor node = tx.cursors().allocateNodeCursor();\n                  PropertyCursor property = tx.cursors().allocatePropertyCursor() )\n            {\n                tx.dataRead().singleNode( nodeId, node );\n                assertTrue( node.next(), \"should access node\" );\n\n                node.properties( property );\n                assertTrue( property.next() );\n                //First property\n                assertEquals( prop1, property.propertyKey() );\n                assertEquals( property.propertyValue(), stringValue( \"hello\" ) );\n                //second property\n                assertTrue( property.next() );\n                assertEquals( prop2, property.propertyKey() );\n                assertEquals( property.propertyValue(), stringValue( \"world\" ) );\n\n                assertFalse( property.next(), \"should only find two properties\" );\n                assertFalse( node.next(), \"should only find one node\" );\n            }\n            tx.commit();\n        }\n    }"} {"seed":"@Test\n    void shouldSeeAddedPropertyFromExistingNodeWithoutPropertiesInTransaction() throws Exception\n    {\n        // Given\n        long nodeId;\n        String propKey = \"prop1\";\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            nodeId = tx.dataWrite().nodeCreate();\n            tx.commit();\n        }\n\n        // When/Then\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            int propToken = tx.token().propertyKeyGetOrCreateForName( propKey );\n            assertEquals( tx.dataWrite().nodeSetProperty( nodeId, propToken, stringValue( \"hello\" ) ), NO_VALUE );\n\n            try ( NodeCursor node = tx.cursors().allocateNodeCursor();\n                  PropertyCursor property = tx.cursors().allocatePropertyCursor() )\n            {\n                tx.dataRead().singleNode( nodeId, node );\n                assertTrue( node.next(), \"should access node\" );\n\n                node.properties( property );\n                assertTrue( property.next() );\n                assertEquals( propToken, property.propertyKey() );\n                assertEquals( property.propertyValue(), stringValue( \"hello\" ) );\n\n                assertFalse( property.next(), \"should only find one properties\" );\n                assertFalse( node.next(), \"should only find one node\" );\n            }\n\n            tx.commit();\n        }\n\n        try ( org.neo4j.graphdb.Transaction tx = graphDb.beginTx() )\n        {\n            assertThat( tx.getNodeById( nodeId ).getProperty( propKey ) ).isEqualTo( \"hello\" );\n        }\n    }"} {"seed":"@Test\n    void shouldSeeAddedPropertyFromExistingNodeWithPropertiesInTransaction() throws Exception\n    {\n        // Given\n        long nodeId;\n        String propKey1 = \"prop1\";\n        String propKey2 = \"prop2\";\n        int propToken1;\n        int propToken2;\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            nodeId = tx.dataWrite().nodeCreate();\n            propToken1 = tx.token().propertyKeyGetOrCreateForName( propKey1 );\n            assertEquals( tx.dataWrite().nodeSetProperty( nodeId, propToken1, stringValue( \"hello\" ) ), NO_VALUE );\n            tx.commit();\n        }\n\n        // When/Then\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            propToken2 = tx.token().propertyKeyGetOrCreateForName( propKey2 );\n            assertEquals( tx.dataWrite().nodeSetProperty( nodeId, propToken2, stringValue( \"world\" ) ), NO_VALUE );\n\n            try ( NodeCursor node = tx.cursors().allocateNodeCursor();\n                  PropertyCursor property = tx.cursors().allocatePropertyCursor() )\n            {\n                tx.dataRead().singleNode( nodeId, node );\n                assertTrue( node.next(), \"should access node\" );\n\n                node.properties( property );\n\n                //property 2, start with tx state\n                assertTrue( property.next() );\n                assertEquals( propToken2, property.propertyKey() );\n                assertEquals( property.propertyValue(), stringValue( \"world\" ) );\n\n                //property 1, from disk\n                assertTrue( property.next() );\n                assertEquals( propToken1, property.propertyKey() );\n                assertEquals( property.propertyValue(), stringValue( \"hello\" ) );\n\n                assertFalse( property.next(), \"should only find two properties\" );\n                assertFalse( node.next(), \"should only find one node\" );\n            }\n            tx.commit();\n        }\n\n        try ( org.neo4j.graphdb.Transaction tx = graphDb.beginTx() )\n        {\n            assertThat( tx.getNodeById( nodeId ).getProperty( propKey1 ) ).isEqualTo( \"hello\" );\n            assertThat( tx.getNodeById( nodeId ).getProperty( propKey2 ) ).isEqualTo( \"world\" );\n        }\n    }"} {"seed":"@Test\n    void shouldSeeUpdatedPropertyFromExistingNodeWithPropertiesInTransaction() throws Exception\n    {\n        // Given\n        long nodeId;\n        String propKey = \"prop1\";\n        int propToken;\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            nodeId = tx.dataWrite().nodeCreate();\n            propToken = tx.token().propertyKeyGetOrCreateForName( propKey );\n            assertEquals( tx.dataWrite().nodeSetProperty( nodeId, propToken, stringValue( \"hello\" ) ), NO_VALUE );\n            tx.commit();\n        }\n\n        // When/Then\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            assertEquals( tx.dataWrite().nodeSetProperty( nodeId, propToken, stringValue( \"world\" ) ),\n                    stringValue( \"hello\" ) );\n            try ( NodeCursor node = tx.cursors().allocateNodeCursor();\n                  PropertyCursor property = tx.cursors().allocatePropertyCursor() )\n            {\n                tx.dataRead().singleNode( nodeId, node );\n                assertTrue( node.next(), \"should access node\" );\n\n                node.properties( property );\n\n                assertTrue( property.next() );\n                assertEquals( propToken, property.propertyKey() );\n                assertEquals( property.propertyValue(), stringValue( \"world\" ) );\n\n                assertFalse( property.next(), \"should only find one property\" );\n                assertFalse( node.next(), \"should only find one node\" );\n            }\n\n            tx.commit();\n        }\n\n        try ( org.neo4j.graphdb.Transaction tx = graphDb.beginTx() )\n        {\n            assertThat( tx.getNodeById( nodeId ).getProperty( propKey ) ).isEqualTo( \"world\" );\n        }\n    }"} {"seed":"@Test\n    void shouldSeeRemovedPropertyInTransaction() throws Exception\n    {\n        // Given\n        long nodeId;\n        String propKey = \"prop1\";\n        int propToken;\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            nodeId = tx.dataWrite().nodeCreate();\n            propToken = tx.token().propertyKeyGetOrCreateForName( propKey );\n            assertEquals( tx.dataWrite().nodeSetProperty( nodeId, propToken, stringValue( \"hello\" ) ), NO_VALUE );\n            tx.commit();\n        }\n\n        // When/Then\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            assertEquals( tx.dataWrite().nodeRemoveProperty( nodeId, propToken ), stringValue( \"hello\" ) );\n            try ( NodeCursor node = tx.cursors().allocateNodeCursor();\n                  PropertyCursor property = tx.cursors().allocatePropertyCursor() )\n            {\n                tx.dataRead().singleNode( nodeId, node );\n                assertTrue( node.next(), \"should access node\" );\n\n                node.properties( property );\n                assertFalse( property.next(), \"should not find any properties\" );\n                assertFalse( node.next(), \"should only find one node\" );\n            }\n\n            tx.commit();\n        }\n\n        try ( org.neo4j.graphdb.Transaction tx = graphDb.beginTx() )\n        {\n            assertFalse(\n                    tx.getNodeById( nodeId ).hasProperty( propKey ) );\n        }\n    }"} {"seed":"@Test\n    void shouldSeeRemovedThenAddedPropertyInTransaction() throws Exception\n    {\n        // Given\n        long nodeId;\n        String propKey = \"prop1\";\n        int propToken;\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            nodeId = tx.dataWrite().nodeCreate();\n            propToken = tx.token().propertyKeyGetOrCreateForName( propKey );\n            assertEquals( tx.dataWrite().nodeSetProperty( nodeId, propToken, stringValue( \"hello\" ) ), NO_VALUE );\n            tx.commit();\n        }\n\n        // When/Then\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            assertEquals( tx.dataWrite().nodeRemoveProperty( nodeId, propToken ), stringValue( \"hello\" ) );\n            assertEquals( tx.dataWrite().nodeSetProperty( nodeId, propToken, stringValue( \"world\" ) ), NO_VALUE );\n            try ( NodeCursor node = tx.cursors().allocateNodeCursor();\n                  PropertyCursor property = tx.cursors().allocatePropertyCursor() )\n            {\n                tx.dataRead().singleNode( nodeId, node );\n                assertTrue( node.next(), \"should access node\" );\n\n                node.properties( property );\n                assertTrue( property.next() );\n                assertEquals( propToken, property.propertyKey() );\n                assertEquals( property.propertyValue(), stringValue( \"world\" ) );\n\n                assertFalse( property.next(), \"should not find any properties\" );\n                assertFalse( node.next(), \"should only find one node\" );\n            }\n\n            tx.commit();\n        }\n\n        try ( org.neo4j.graphdb.Transaction tx = graphDb.beginTx() )\n        {\n            assertThat( tx.getNodeById( nodeId ).getProperty( propKey ) ).isEqualTo( \"world\" );\n        }\n    }"} {"seed":"@Test\n    void shouldSeeExistingNode() throws Exception\n    {\n        // Given\n        long node;\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            node = tx.dataWrite().nodeCreate();\n            tx.commit();\n        }\n\n        // Then\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            assertTrue( tx.dataRead().nodeExists( node ) );\n        }\n    }"} {"seed":"@Test\n    void shouldNotSeeNonExistingNode() throws Exception\n    {\n        // Given, empty db\n\n        // Then\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            assertFalse( tx.dataRead().nodeExists( 1337L ) );\n        }\n    }"} {"seed":"@Test\n    void shouldSeeNodeExistingInTxOnly() throws Exception\n    {\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            long node = tx.dataWrite().nodeCreate();\n            assertTrue( tx.dataRead().nodeExists( node ) );\n\n        }\n    }"} {"seed":"@Test\n    void shouldNotSeeDeletedNode() throws Exception\n    {\n        // Given\n        long node;\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            node = tx.dataWrite().nodeCreate();\n            tx.commit();\n        }\n\n        // Then\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            tx.dataWrite().nodeDelete( node );\n            assertFalse( tx.dataRead().nodeExists( node ) );\n        }\n    }"} {"seed":"@Test\n    void shouldNotFindDeletedNodeInLabelScan() throws Exception\n    {\n        // Given\n        Node node = createNode( \"label\" );\n\n        try ( KernelTransaction tx = beginTransaction();\n              NodeLabelIndexCursor cursor = tx.cursors().allocateNodeLabelIndexCursor() )\n        {\n            // when\n            tx.dataWrite().nodeDelete( node.node );\n            tx.dataRead().nodeLabelScan( node.labels[0], cursor );\n\n            // then\n            assertFalse( cursor.next() );\n        }\n    }"} {"seed":"@Test\n    void shouldNotFindNodeWithRemovedLabelInLabelScan() throws Exception\n    {\n        // Given\n        Node node = createNode( \"label\" );\n\n        try ( KernelTransaction tx = beginTransaction();\n              NodeLabelIndexCursor cursor = tx.cursors().allocateNodeLabelIndexCursor() )\n        {\n            // when\n            tx.dataWrite().nodeRemoveLabel( node.node, node.labels[0] );\n            tx.dataRead().nodeLabelScan( node.labels[0], cursor );\n\n            // then\n            assertFalse( cursor.next() );\n        }\n    }"} {"seed":"@Test\n    void shouldFindUpdatedNodeInInLabelScan() throws Exception\n    {\n        // Given\n        Node node = createNode(  );\n\n        try ( KernelTransaction tx = beginTransaction();\n              NodeLabelIndexCursor cursor = tx.cursors().allocateNodeLabelIndexCursor() )\n        {\n            // when\n            int label = tx.tokenWrite().labelGetOrCreateForName( \"label\" );\n            tx.dataWrite().nodeAddLabel( node.node, label );\n            tx.dataRead().nodeLabelScan( label, cursor );\n\n            // then\n            assertTrue( cursor.next() );\n            assertEquals( node.node, cursor.nodeReference() );\n        }\n    }"} {"seed":"@Test\n    void shouldFindSwappedNodeInLabelScan() throws Exception\n    {\n        // Given\n        Node node1 = createNode( \"label\" );\n        Node node2 = createNode();\n\n        try ( KernelTransaction tx = beginTransaction();\n              NodeLabelIndexCursor cursor = tx.cursors().allocateNodeLabelIndexCursor() )\n        {\n            // when\n            tx.dataWrite().nodeRemoveLabel( node1.node, node1.labels[0] );\n            tx.dataWrite().nodeAddLabel( node2.node, node1.labels[0] );\n            tx.dataRead().nodeLabelScan( node1.labels[0], cursor );\n\n            // then\n            assertTrue( cursor.next() );\n            assertEquals( node2.node, cursor.nodeReference() );\n        }\n    }"} {"seed":"@Test\n    void shouldCountNewLabelsFromTxState() throws Exception\n    {\n        // Given\n        Node node1 = createNode( \"label\" );\n        Node node2 = createNode();\n\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            // when\n            tx.dataWrite().nodeAddLabel( node2.node, node1.labels[0] );\n            long countTxState = tx.dataRead().countsForNode( node1.labels[0] );\n            long countNoTxState = tx.dataRead().countsForNodeWithoutTxState( node1.labels[0] );\n\n            // then\n            assertEquals( 2, countTxState );\n            assertEquals( 1, countNoTxState );\n        }\n    }"} {"seed":"@Test\n    void shouldCountNewNodesFromTxState() throws Exception\n    {\n        // Given\n        createNode();\n        createNode();\n\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            // when\n            tx.dataWrite().nodeCreate();\n            long countTxState = tx.dataRead().countsForNode( -1 );\n            long countNoTxState = tx.dataRead().countsForNodeWithoutTxState( -1 );\n\n            // then\n            assertEquals( 3, countTxState );\n            assertEquals( 2, countNoTxState );\n        }\n    }"} {"seed":"@Test\n    void shouldNotCountRemovedLabelsFromTxState() throws Exception\n    {\n        // Given\n        Node node1 = createNode( \"label\" );\n        Node node2 = createNode( \"label\" );\n\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            // when\n            tx.dataWrite().nodeRemoveLabel( node2.node, node2.labels[0] );\n            long countTxState = tx.dataRead().countsForNode( node1.labels[0] );\n            long countNoTxState = tx.dataRead().countsForNodeWithoutTxState( node1.labels[0] );\n\n            // then\n            assertEquals( 1, countTxState );\n            assertEquals( 2, countNoTxState );\n        }\n    }"} {"seed":"@Test\n    void shouldNotCountRemovedNodesFromTxState() throws Exception\n    {\n        // Given\n        Node node1 = createNode( \"label\" );\n        Node node2 = createNode( \"label\" );\n\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            // when\n            tx.dataWrite().nodeDelete( node2.node );\n            long countTxState = tx.dataRead().countsForNode( node1.labels[0] );\n            long countNoTxState = tx.dataRead().countsForNodeWithoutTxState( node1.labels[0] );\n\n            // then\n            assertEquals( 1, countTxState );\n            assertEquals( 2, countNoTxState );\n        }\n    }"} {"seed":"@Test\n    void shouldCountNewLabelsFromTxStateRestrictedUser() throws Exception\n    {\n        // Given\n        Node node1 = createNode( \"label\" );\n        Node node2 = createNode();\n\n        SecurityContext loginContext = new SecurityContext( AuthSubject.AUTH_DISABLED, new TestAccessMode( true, false, true, false ) );\n        try ( KernelTransaction tx = beginTransaction( loginContext ) )\n        {\n            // when\n            tx.dataWrite().nodeAddLabel( node2.node, node1.labels[0] );\n            long countTxState = tx.dataRead().countsForNode( node1.labels[0] );\n            long countNoTxState = tx.dataRead().countsForNodeWithoutTxState( node1.labels[0] );\n\n            // then\n            assertEquals( 2, countTxState );\n            assertEquals( 1, countNoTxState );\n        }\n    }"} {"seed":"@Test\n    void shouldCountNewNodesFromTxStateRestrictedUser() throws Exception\n    {\n        // Given\n        createNode();\n        createNode();\n\n        SecurityContext loginContext = new SecurityContext( AuthSubject.AUTH_DISABLED, new TestAccessMode( true, false, true, false ) );\n        try ( KernelTransaction tx = beginTransaction( loginContext ) )\n        {\n            // when\n            tx.dataWrite().nodeCreate();\n            long countTxState = tx.dataRead().countsForNode( -1 );\n            long countNoTxState = tx.dataRead().countsForNodeWithoutTxState( -1 );\n\n            // then\n            assertEquals( 3, countTxState );\n            assertEquals( 2, countNoTxState );\n        }\n    }"} {"seed":"@Test\n    void shouldNotCountRemovedLabelsFromTxStateRestrictedUser() throws Exception\n    {\n        // Given\n        Node node1 = createNode( \"label\" );\n        Node node2 = createNode( \"label\" );\n\n        SecurityContext loginContext = new SecurityContext( AuthSubject.AUTH_DISABLED, new TestAccessMode( true, false, true, false ) );\n        try ( KernelTransaction tx = beginTransaction( loginContext ) )\n        {\n            // when\n            tx.dataWrite().nodeRemoveLabel( node2.node, node2.labels[0] );\n            long countTxState = tx.dataRead().countsForNode( node1.labels[0] );\n            long countNoTxState = tx.dataRead().countsForNodeWithoutTxState( node1.labels[0] );\n\n            // then\n            assertEquals( 1, countTxState );\n            assertEquals( 2, countNoTxState );\n        }\n    }"} {"seed":"@Test\n    void shouldNotCountRemovedNodesFromTxStateRestrictedUser() throws Exception\n    {\n        // Given\n        Node node1 = createNode( \"label\" );\n        Node node2 = createNode( \"label\" );\n\n        SecurityContext loginContext = new SecurityContext( AuthSubject.AUTH_DISABLED, new TestAccessMode( true, false, true, false ) );\n        try ( KernelTransaction tx = beginTransaction( loginContext ) )\n        {\n            // when\n            tx.dataWrite().nodeDelete( node2.node );\n            long countTxState = tx.dataRead().countsForNode( node1.labels[0] );\n            long countNoTxState = tx.dataRead().countsForNodeWithoutTxState( node1.labels[0] );\n\n            // then\n            assertEquals( 1, countTxState );\n            assertEquals( 2, countNoTxState );\n        }\n    }"} {"seed":"@Test\n    void hasPropertiesShouldSeeNewlyCreatedProperties() throws Exception\n    {\n        // Given\n        long node;\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            node = tx.dataWrite().nodeCreate();\n            tx.commit();\n        }\n\n        // Then\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            try ( NodeCursor cursor = tx.cursors().allocateNodeCursor();\n                  PropertyCursor props = tx.cursors().allocatePropertyCursor() )\n            {\n                tx.dataRead().singleNode( node, cursor );\n                assertTrue( cursor.next() );\n                assertFalse( hasProperties( cursor, props ) );\n                tx.dataWrite().nodeSetProperty( node, tx.tokenWrite().propertyKeyGetOrCreateForName( \"prop\" ),\n                        stringValue( \"foo\" ) );\n                assertTrue( hasProperties( cursor, props ) );\n            }\n        }\n    }"} {"seed":"private boolean hasProperties( NodeCursor cursor, PropertyCursor props )\n    {\n        cursor.properties( props );\n        return props.next();\n    }"} {"seed":"@Test\n    void hasPropertiesShouldSeeNewlyCreatedPropertiesOnNewlyCreatedNode() throws Exception\n    {\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            long node = tx.dataWrite().nodeCreate();\n            try ( NodeCursor cursor = tx.cursors().allocateNodeCursor();\n                  PropertyCursor props = tx.cursors().allocatePropertyCursor() )\n            {\n                tx.dataRead().singleNode( node, cursor );\n                assertTrue( cursor.next() );\n                assertFalse( hasProperties( cursor, props ) );\n                tx.dataWrite().nodeSetProperty( node, tx.tokenWrite().propertyKeyGetOrCreateForName( \"prop\" ),\n                        stringValue( \"foo\" ) );\n                assertTrue( hasProperties( cursor, props ) );\n            }\n        }\n    }"} {"seed":"@Test\n    void hasPropertiesShouldSeeNewlyRemovedProperties() throws Exception\n    {\n        // Given\n        long node;\n        int prop1, prop2, prop3;\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            node = tx.dataWrite().nodeCreate();\n            prop1 = tx.tokenWrite().propertyKeyGetOrCreateForName( \"prop1\" );\n            prop2 = tx.tokenWrite().propertyKeyGetOrCreateForName( \"prop2\" );\n            prop3 = tx.tokenWrite().propertyKeyGetOrCreateForName( \"prop3\" );\n            tx.dataWrite().nodeSetProperty( node, prop1, longValue( 1 ) );\n            tx.dataWrite().nodeSetProperty( node, prop2, longValue( 2 ) );\n            tx.dataWrite().nodeSetProperty( node, prop3, longValue( 3 ) );\n            tx.commit();\n        }\n\n        // Then\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            try ( NodeCursor cursor = tx.cursors().allocateNodeCursor();\n                  PropertyCursor props = tx.cursors().allocatePropertyCursor() )\n            {\n                tx.dataRead().singleNode( node, cursor );\n                assertTrue( cursor.next() );\n\n                assertTrue( hasProperties( cursor, props ) );\n                tx.dataWrite().nodeRemoveProperty( node, prop1 );\n                assertTrue( hasProperties( cursor, props ) );\n                tx.dataWrite().nodeRemoveProperty( node, prop2 );\n                assertTrue( hasProperties( cursor, props ) );\n                tx.dataWrite().nodeRemoveProperty( node, prop3 );\n                assertFalse( hasProperties( cursor, props ) );\n            }\n        }\n    }"} {"seed":"@Test\n    void propertyTypeShouldBeTxStateAware() throws Exception\n    {\n        // Given\n        long node;\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            node = tx.dataWrite().nodeCreate();\n            tx.commit();\n        }\n\n        // Then\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            try ( NodeCursor nodes = tx.cursors().allocateNodeCursor();\n                  PropertyCursor properties = tx.cursors().allocatePropertyCursor() )\n            {\n                tx.dataRead().singleNode( node, nodes );\n                assertTrue( nodes.next() );\n                assertFalse( hasProperties( nodes, properties ) );\n                int prop = tx.tokenWrite().propertyKeyGetOrCreateForName( \"prop\" );\n                tx.dataWrite().nodeSetProperty( node, prop, stringValue( \"foo\" ) );\n                nodes.properties( properties );\n\n                assertTrue( properties.next() );\n                assertThat( properties.propertyType() ).isEqualTo( ValueGroup.TEXT );\n            }\n        }\n    }"} {"seed":"private void assertLabels( LabelSet labels, int... expected )\n    {\n        assertEquals( expected.length, labels.numberOfLabels() );\n        Arrays.sort( expected );\n        int[] labelArray = new int[labels.numberOfLabels()];\n        for ( int i = 0; i < labels.numberOfLabels(); i++ )\n        {\n            labelArray[i] = labels.label( i );\n        }\n        Arrays.sort( labelArray );\n        assertTrue( Arrays.equals( expected, labelArray ), \"labels match expected\" );\n    }"} {"seed":"public Node createNode( String... labels ) throws Exception\n    {\n        long node;\n        int[] labelIds = new int[labels.length];\n        try ( KernelTransaction tx = beginTransaction() )\n        {\n            Write write = tx.dataWrite();\n            node = write.nodeCreate();\n\n            for ( int i = 0; i < labels.length; i++ )\n            {\n                labelIds[i] = tx.tokenWrite().labelGetOrCreateForName( labels[i] );\n                write.nodeAddLabel( node, labelIds[i] );\n            }\n            tx.commit();\n        }\n        return new Node( node, labelIds );\n    }"} {"seed":"public long node()\n        {\n            return node;\n        }"} {"seed":"public int[] labels()\n        {\n            return labels;\n        }"} {"seed":"public String getName() {\n\t\treturn name;\n\t}"} {"seed":"public void setName(String name) {\n\t\tthis.name = name;\n\t}"} {"seed":"public String getAddress() {\n\t\treturn address;\n\t}"} {"seed":"public void setAddress(String address) {\n\t\tthis.address = address;\n\t}"} {"seed":"public Set<Client> getClientList() {\n\t\treturn clients;\n\t}"} {"seed":"public void setClientList(Set<Client> clientList) {\n\t\tthis.clients = clientList;\n\t}"} {"seed":"public String getCui() {\n\t\treturn cui;\n\t}"} {"seed":"public void setCui(String cui) {\n\t\tthis.cui = cui;\n\t}"} {"seed":"public Integer getId() {\n\t\treturn id;\n\t}"} {"seed":"public void setId(Integer id) {\n\t\tthis.id = id;\n\t}"} {"seed":"public int LecInt() {\n        Scanner sc = new Scanner(System.in);\n        boolean valor = true;\n        int x = 0;\n        do {\n            try {\n                x = Integer.parseInt(sc.nextLine());\n                valor = true;\n            } catch (Exception ex) {\n                System.out.println(\"Introdzca un valor valido\");\n                valor = false;\n            }\n        } while (valor == false);\n        return x;\n\n    }"} {"seed":"public String LecString() {\n        Scanner sc = new Scanner(System.in);\n        boolean valor = true;\n        String x = null;\n        do {\n            try {\n                x = sc.next();\n                valor = true;\n            } catch (Exception ex) {\n                System.out.println(\"Introdzca un valor valido\");\n                valor = false;\n            }\n        } while (valor == false);\n        return x;\n    }"} {"seed":"public double LecDou() {\n        Scanner sc = new Scanner(System.in);\n        boolean valor = true;\n        double x = 0;\n        do {\n            try {\n                x = Integer.parseInt(sc.nextLine());\n                valor = true;\n            } catch (Exception ex) {\n                System.out.println(\"Introdzca un valor valido\");\n                valor = false;\n            }\n        } while (valor == false);\n        return x;\n\n    }"} {"seed":"public static void main(String[] args) {\n\n        producto pd = new producto();\n        producto pd2 = new producto();\n        boolean resp = true;\n        while (resp = true) {\n            System.out.println(\"\\n\\t\\t\\t\\t\\tInventario\\n1) Agregar producto\\n2) Ver reporte\\n3) Salir\");\n            LectorDeTeclado lc = new LectorDeTeclado();\n            int x = lc.LecInt();\n            Scanner sca = new Scanner(System.in);\n            switch (x) {\n                case 1: {\n                    nuevoProducto();\n                    break;\n                }\n                case 2: {\n                    System.out.println(\"\\t\\t\\t\\t REPORTE\");\n                    for (int i = 0; i < ListadeProdutos.size(); i++) {\n                        pd2 = ListadeProdutos.get(i);\n                        System.out.println(i+1+\".-\\tNOMBRE:\\t\"+pd2.nombre+\"\\t\\tMARCA:\\t\"+ pd2.marca+\"\\t\\tNO. DE SERIE:\\t\"+ pd2.numerSerie+\"\\t\\tEXISTENCIA\\t\"+pd2.existencia+\"\\t\\tPUNTO DE REORDEN\\t\"+pd2.puntoDeReorden+\"\\t\\tUNIDAD\\t\"+ pd2.unidad);\n                    }\n                    break;\n\n                }\n                case 3:{\n                    break;\n                }\n\n            }\n        }\n\n    }"} {"seed":"private static void nuevoProducto (){\n        LectorDeTeclado lc = new LectorDeTeclado();\n        producto pd = new producto();\n        System.out.print(\"Ingresar el nombre del proucto: \");\n        pd.nombre = lc.LecString();\n        System.out.print(\"Ingrsear la marca: \");\n        pd.marca = lc.LecString();\n        System.out.print(\"Ingresar el numero de serie: \");\n        pd.numerSerie = lc.LecDou();\n        System.out.print(\"Ingresar el numero de re-orden: \");\n        pd.puntoDeReorden = lc.LecInt();\n        System.out.print(\"Ingresar el nummero de unidad: \");\n        pd.unidad = lc.LecInt();\n        if (pd.unidad == 0 || pd.unidad < 0) {\n            pd.existencia = false;\n        }\n        ListadeProdutos.add(pd);\n    }"} {"seed":"@GetMapping(\"/creditCard\")\n    @CrossOrigin\n    public List<CreditCardGetDTO> findAllCreditCard();"} {"seed":"@GetMapping(\"/creditCard/by-id/{id}\")\n    @CrossOrigin\n    public CreditCardGetDTO findById(@PathVariable Long id);"} {"seed":"@GetMapping(\"/creditCard/by-userid/{id}\")\n    @CrossOrigin\n    public List <CreditCardGetDTO> findCreditCardByUserId(@PathVariable Long id);"} {"seed":"@PostMapping(\"/create/creditCard\")\n    @ResponseStatus(HttpStatus.CREATED)\n    @CrossOrigin\n    public void create(@RequestBody @Valid CreditCardDTO creditCardDTO);"} {"seed":"@Override\n  public void initialize() {\n    m_drive.resetGyro();// first call\n    m_drive.resetEncoders();\n    m_drive.lockMotors();\n  }"} {"seed":"@Override\n  public void end(boolean interrupted) {\n    m_drive.resetGyro();// second call (just in case)\n    m_drive.resetEncoders();\n    m_drive.lockMotors();\n  }"} {"seed":"@Override\n  public boolean isFinished() {\n    return true;\n  }"} {"seed":"uitem[i].length; j++) {\n\t\t\t\tif(menuitem[i][j] == null) {\n\t\t\t\t\tmenu[i].addSeparator();\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tmenuitem[i][j].addActionListener(this);\n\t\t\t\tmenu[i].add(menuitem[i][j]);\n\t\t\t}\n\t\t}\n\t\tthis.setJMenuBar(menubar);\n\n\t\t// フレーム\n\t\tthis.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t\tthis.setVisible(true);\n\t}\n\n\t@Override\n\t/**\n\t * メニューの操作を受け取る．\n\t */\n\tpublic void actionPerformed(ActionEvent e) {\n\t\t// メニューバー\n\t\tif(e.getSource() == menuitem[0][0]) {\n\t\t\tmodel.renew();\n\t\t}else if(e.getSource() == menuitem[0][1]){\n\t\t\tmodel.load();\n\t\t}else if(e.getSource() == menuitem[0][3]){\n\t\t\tmodel.overSave();\n\t\t}else if(e.getSource() == menuitem[0][4]){\n\t\t\tmodel.save();\n\t\t}else if(e.getSource() == menuitem[0][5]){\n\t\t\tview.save();\n\t\t}else if(e.getSource() == menuitem[0][7]){\n\t\t\tSystem.exit(0);\n\t\t}else if(e.getSource() == menuitem[1][0]){\n\t\t\tmodel.undo();\n\t\t}else if(e.getSource() == menuitem[1][1]){\n\t\t\tmodel.redo();\n\t\t}else if(e.getSource() == menuitem[1][3]){\n\t\t\tmodel.cut();\n\t\t}else if(e.getSource() == menuitem[1][4]){\n\t\t\tmodel.copy();\n\t\t}else if(e.getSource() == menuitem[1][5]){\n\t\t\tmodel.paste();\n\t\t}else if(e.getSource() == menuitem[1][7]){\n\t\t\tmodel.setSelectMode(true);\n\t\t}else if(e.getSource() == menuitem[1][8]){\n\t\t\tmodel.deleteSelectedFigure();\n\t\t}else if(e.getSource() == menuitem[1][9]){\n\t\t\tmodel.grouping();\n\t\t}else if(e.getSource() == menuitem[1][10]){\n\t\t\tmodel.ungrouping();\n\t\t}else if(e.getSource() == menuitem[1][12]){\n\t\t\tview.setBackground(pen.getCurrentColor());\n\t\t}else if(e.getSource("} {"seed":"= menuitem[2][0]){\n\t\t\tshapeDlg.setVisible(true);\n\t\t}else if(e.getSource() == menuitem[2][1]){\n\t\t\tcolorDlg.setVisible(true);\n\t\t}else if(e.getSource() == menuitem[2][2]){\n\t\t\tcursorDlg.setVisible(true);\n\t\t}else if(e.getSource() == menuitem[2][3]){\n\t\t\tlayerDlg.setVisible(true);\n\t\t}else if(e.getSource() == menuitem[2][4]){\n\t\t\tanimationDlg.setVisible(true);\n\t\t}\n\n\t}\n\n\t@Override\n\t/**\n\t * メニューの選択可能・不可能を設定する．\n\t */\n\tpublic void update(Observable o, Object arg) {\n\t\t// 選択されている Figure の数\n\t\tint selectSize = model.getSelectedFigure().size();\n\t\t// ungroup できるかどうか\n\t\tboolean enable = false;\n\t\tArrayList<Figure> sc = model.getSelectedFigure();\n\t\tfor(int i=0; i<sc.size(); i++) {\n\t\t\tif(sc.get"} {"seed":"del.undoable());\n\t\tmenuitem[1][1].setEnabled(model.redoable());\n\t\tmenu"} {"seed":">= 1);\n\t\tmenuitem[1][5].setEnabled(model.pastable());"} {"seed":"ze >= 2);\n\t\tmenuitem[1][10].setEnabled(enable);\n\t}\n\n\t/**"} {"seed":"�りするための関数\n\t * @param x 色を取得したい�"} {"seed":"protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t//Instrucciones para evitar la cache del navegador\n\t\t\t\tresponse.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\"); \n\t\t\t\tresponse.setHeader(\"Pragma\", \"no-cache\"); \n\t\t\t\tresponse.setHeader(\"Expires\", \"0\");\n\t\t\t\t\n\t\t\t\t\n\t\tList<String> nombresPaises=servicePais.recuperarPaises().keySet().stream().sorted().collect(Collectors.toList());\n\t\t\n\t\tServletContext context= request.getServletContext();\n\t\t\n\t\tcontext.setAttribute(\"nombresPaises\", nombresPaises);\n\t\t\n\t}"} {"seed":"public boolean isClicked(int mX, int mY){\n\t\t\n\t\tif(mX >= x && mX < x+width && mY >= y && mY <= y+height){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}"} {"seed":"public abstract void function();"} {"seed":"public void render(Graphics g) {\n\t\tg.drawImage(sprite, x, y, this);\t\t\n\t}"} {"seed":"@Override\n\tpublic boolean imageUpdate(Image img, int infoflags, int x, int y, int width, int height) {\n\t\treturn false;\n\t}"} {"seed":"public void playSound(){\n\t\ttry{\n\t\t\tSoundPlayer.playSound(soundFile);\n\t\t}catch (NullPointerException e){\n\t\t\tSystem.out.println(\"Sound file missing\");\n\t\t}\n\t}"} {"seed":"@Override\n\tpublic void onCreate(Bundle savedInstanceState) {\n\t\tsetTheme(R.style.Sherlock___Theme_DarkActionBar);\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.layout_equipos);\n\t\tsetTitle(\"Equipos\");\n\t\t\n        FrameLayout EquiposFrameviewAndorra =(FrameLayout)findViewById(R.id.EquiposFrameviewAndorra);\n        EquiposFrameviewAndorra.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n            \t\n            \tTextView cambioFondo =(TextView)findViewById(R.id.EquipostextViewAndorra);\n            \tcambioFondo.setBackgroundResource(R.drawable.gradient_bg_hover);\n            \t            \t\n            \tIntent OpcionesActiviyStart = new Intent(EquiposActivity.this, EquiposDetallesActivity.class);\n            \tOpcionesActiviyStart.putExtra(\"cadenaEnviar\", \"Andorra\");\n            \tstartActivity(OpcionesActiviyStart);\n                   \n            }\n        }); \n        \n        FrameLayout EquiposFrameviewZaragoza =(FrameLayout)findViewById(R.id.EquiposFrameviewZaragoza);\n        EquiposFrameviewZaragoza.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n            \t\n            \tTextView cambioFondo =(TextView)findViewById(R.id.EquipostextViewZaragoza);\n            \tcambioFondo.setBackgroundResource(R.drawable.gradient_bg_hover);\n            \t            \t\n            \tIntent OpcionesActiviyStart = new Intent(EquiposActivity.this, EquiposDetallesActivity.class);\n            \tOpcionesActiviyStart.putExtra(\"cadenaEnviar\", \"Zaragoza\");\n            \tstartActivity(OpcionesActiviyStart);\n                   \n            }\n        }); \n        \n        FrameLayout EquiposFrameviewTeruel =(FrameLayout)findViewById(R.id.EquiposFrameviewTeruel);\n        EquiposFrameviewTeruel.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n            \t\n            \tTextView cambioFondo =(TextView)findViewById(R.id.EquipostextViewTeruel);\n            \tcambioFondo.setBackgroundResource(R.drawable.gradient_bg_hover);\n            \t            \t\n            \tIntent OpcionesActiviyStart = new Intent(EquiposActivity.this, EquiposDetallesActivity.class);\n            \tOpcionesActiviyStart.putExtra(\"cadenaEnviar\", \"Teruel\");\n            \tstartActivity(OpcionesActiviyStart);\n                   \n            }\n        });\n        \n        FrameLayout EquiposFrameviewCajasol =(FrameLayout)findViewById(R.id.EquiposFrameviewCajasol);\n        EquiposFrameviewCajasol.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n            \t\n            \tTextView cambioFondo =(TextView)findViewById(R.id.EquipostextViewCajasol);\n            \tcambioFondo.setBackgroundResource(R.drawable.gradient_bg_hover);\n            \t            \t\n            \tIntent OpcionesActiviyStart = new Intent(EquiposActivity.this, EquiposDetallesActivity.class);\n            \tOpcionesActiviyStart.putExtra(\"cadenaEnviar\", \"Cajasol\");\n            \tstartActivity(OpcionesActiviyStart);\n                   \n            }\n        });\n        \n        \n        FrameLayout EquiposFrameviewVigo =(FrameLayout)findViewById(R.id.EquiposFrameviewVigo);\n        EquiposFrameviewVigo.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n            \t\n            \tTextView cambioFondo =(TextView)findViewById(R.id.EquipostextViewVigo);\n            \tcambioFondo.setBackgroundResource(R.drawable.gradient_bg_hover);\n            \t            \t\n            \tIntent OpcionesActiviyStart = new Intent(EquiposActivity.this, EquiposDetallesActivity.class);\n            \tOpcionesActiviyStart.putExtra(\"cadenaEnviar\", \"Vigo\");\n            \tstartActivity(OpcionesActiviyStart);\n                   \n            }\n        });\n        \n        FrameLayout EquiposFrameviewNumancia =(FrameLayout)findViewById(R.id.EquiposFrameviewNumancia);\n        EquiposFrameviewNumancia.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n            \t\n            \tTextView cambioFondo =(TextView)findViewById(R.id.EquipostextViewNumancia);\n            \tcambioFondo.setBackgroundResource(R.drawable.gradient_bg_hover);\n            \t            \t\n            \tIntent OpcionesActiviyStart = new Intent(EquiposActivity.this, EquiposDetallesActivity.class);\n            \tOpcionesActiviyStart.putExtra(\"cadenaEnviar\", \"Soria\");\n            \tstartActivity(OpcionesActiviyStart);\n                   \n            }\n        });\n        \n        \n        FrameLayout EquiposFrameviewLilla =(FrameLayout)findViewById(R.id.EquiposFrameviewLilla);\n        EquiposFrameviewLilla.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n            \t\n            \tTextView cambioFondo =(TextView)findViewById(R.id.EquipostextViewLilla);\n            \tcambioFondo.setBackgroundResource(R.drawable.gradient_bg_hover);\n            \t            \t\n            \tIntent OpcionesActiviyStart = new Intent(EquiposActivity.this, EquiposDetallesActivity.class);\n            \tOpcionesActiviyStart.putExtra(\"cadenaEnviar\", \"Lilla\");\n            \tstartActivity(OpcionesActiviyStart);\n                   \n            }\n        });\n        \n        FrameLayout EquiposFrameviewAlmeria =(FrameLayout)findViewById(R.id.EquiposFrameviewAlmeria);\n        EquiposFrameviewAlmeria.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n            \t\n            \tTextView cambioFondo =(TextView)findViewById(R.id.EquipostextViewAlmeria);\n            \tcambioFondo.setBackgroundResource(R.drawable.gradient_bg_hover);\n            \t            \t\n            \tIntent OpcionesActiviyStart = new Intent(EquiposActivity.this, EquiposDetallesActivity.class);\n            \tOpcionesActiviyStart.putExtra(\"cadenaEnviar\", \"Almeria\");\n            \tstartActivity(OpcionesActiviyStart);\n                   \n            }\n        });\n        \n        FrameLayout EquiposFrameviewIbiza =(FrameLayout)findViewById(R.id.EquiposFrameviewIbiza);\n        EquiposFrameviewIbiza.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n            \t\n            \tTextView cambioFondo =(TextView)findViewById(R.id.EquipostextViewIbiza);\n            \tcambioFondo.setBackgroundResource(R.drawable.gradient_bg_hover);\n            \t            \t\n            \tIntent OpcionesActiviyStart = new Intent(EquiposActivity.this, EquiposDetallesActivity.class);\n            \tOpcionesActiviyStart.putExtra(\"cadenaEnviar\", \"Ibiza\");\n            \tstartActivity(OpcionesActiviyStart);\n                   \n            }\n        });\n        \n        FrameLayout EquiposFrameviewVecindario =(FrameLayout)findViewById(R.id.EquiposFrameviewVecindario);\n        EquiposFrameviewVecindario.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n            \t\n            \tTextView cambioFondo =(TextView)findViewById(R.id.EquipostextViewVecindario);\n            \tcambioFondo.setBackgroundResource(R.drawable.gradient_bg_hover);\n            \t            \t\n            \tIntent OpcionesActiviyStart = new Intent(EquiposActivity.this, EquiposDetallesActivity.class);\n            \tOpcionesActiviyStart.putExtra(\"cadenaEnviar\", \"Vecindario\");\n            \tstartActivity(OpcionesActiviyStart);\n                   \n            }\n        });\n\t\t\n\t}"} {"seed":"@Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        MenuInflater inflater = getSupportMenuInflater();\n        inflater.inflate(R.menu.items, menu);\n        return true;\n    }"} {"seed":"@Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        if (item.getItemId() == R.id.btnActualizar) {\n        \tfinish();\n        \tstartActivity(getIntent());\n        } else if (item.getItemId() == R.id.btnBack) {\n        \t finish();\n        \tstartActivity(new Intent(this, Principal.class));\n        }\n        return true;\n    }"} {"seed":"@Override\n    public void onBackPressed() {\n    \t finish();\n    \tstartActivity(new Intent(this, Principal.class));\n    }"} {"seed":"public void onClick(View v) {\n            \t\n            \tTextView cambioFondo =(TextView)findViewById(R.id.EquipostextViewAndorra);\n            \tcambioFondo.setBackgroundResource(R.drawable.gradient_bg_hover);\n            \t            \t\n            \tIntent OpcionesActiviyStart = new Intent(EquiposActivity.this, EquiposDetallesActivity.class);\n            \tOpcionesActiviyStart.putExtra(\"cadenaEnviar\", \"Andorra\");\n            \tstartActivity(OpcionesActiviyStart);\n                   \n            }"} {"seed":"public void onClick(View v) {\n            \t\n            \tTextView cambioFondo =(TextView)findViewById(R.id.EquipostextViewZaragoza);\n            \tcambioFondo.setBackgroundResource(R.drawable.gradient_bg_hover);\n            \t            \t\n            \tIntent OpcionesActiviyStart = new Intent(EquiposActivity.this, EquiposDetallesActivity.class);\n            \tOpcionesActiviyStart.putExtra(\"cadenaEnviar\", \"Zaragoza\");\n            \tstartActivity(OpcionesActiviyStart);\n                   \n            }"} {"seed":"public void onClick(View v) {\n            \t\n            \tTextView cambioFondo =(TextView)findViewById(R.id.EquipostextViewTeruel);\n            \tcambioFondo.setBackgroundResource(R.drawable.gradient_bg_hover);\n            \t            \t\n            \tIntent OpcionesActiviyStart = new Intent(EquiposActivity.this, EquiposDetallesActivity.class);\n            \tOpcionesActiviyStart.putExtra(\"cadenaEnviar\", \"Teruel\");\n            \tstartActivity(OpcionesActiviyStart);\n                   \n            }"} {"seed":"public void onClick(View v) {\n            \t\n            \tTextView cambioFondo =(TextView)findViewById(R.id.EquipostextViewCajasol);\n            \tcambioFondo.setBackgroundResource(R.drawable.gradient_bg_hover);\n            \t            \t\n            \tIntent OpcionesActiviyStart = new Intent(EquiposActivity.this, EquiposDetallesActivity.class);\n            \tOpcionesActiviyStart.putExtra(\"cadenaEnviar\", \"Cajasol\");\n            \tstartActivity(OpcionesActiviyStart);\n                   \n            }"} {"seed":"public void onClick(View v) {\n            \t\n            \tTextView cambioFondo =(TextView)findViewById(R.id.EquipostextViewVigo);\n            \tcambioFondo.setBackgroundResource(R.drawable.gradient_bg_hover);\n            \t            \t\n            \tIntent OpcionesActiviyStart = new Intent(EquiposActivity.this, EquiposDetallesActivity.class);\n            \tOpcionesActiviyStart.putExtra(\"cadenaEnviar\", \"Vigo\");\n            \tstartActivity(OpcionesActiviyStart);\n                   \n            }"} {"seed":"public void onClick(View v) {\n            \t\n            \tTextView cambioFondo =(TextView)findViewById(R.id.EquipostextViewNumancia);\n            \tcambioFondo.setBackgroundResource(R.drawable.gradient_bg_hover);\n            \t            \t\n            \tIntent OpcionesActiviyStart = new Intent(EquiposActivity.this, EquiposDetallesActivity.class);\n            \tOpcionesActiviyStart.putExtra(\"cadenaEnviar\", \"Soria\");\n            \tstartActivity(OpcionesActiviyStart);\n                   \n            }"} {"seed":"public void onClick(View v) {\n            \t\n            \tTextView cambioFondo =(TextView)findViewById(R.id.EquipostextViewLilla);\n            \tcambioFondo.setBackgroundResource(R.drawable.gradient_bg_hover);\n            \t            \t\n            \tIntent OpcionesActiviyStart = new Intent(EquiposActivity.this, EquiposDetallesActivity.class);\n            \tOpcionesActiviyStart.putExtra(\"cadenaEnviar\", \"Lilla\");\n            \tstartActivity(OpcionesActiviyStart);\n                   \n            }"} {"seed":"public void onClick(View v) {\n            \t\n            \tTextView cambioFondo =(TextView)findViewById(R.id.EquipostextViewAlmeria);\n            \tcambioFondo.setBackgroundResource(R.drawable.gradient_bg_hover);\n            \t            \t\n            \tIntent OpcionesActiviyStart = new Intent(EquiposActivity.this, EquiposDetallesActivity.class);\n            \tOpcionesActiviyStart.putExtra(\"cadenaEnviar\", \"Almeria\");\n            \tstartActivity(OpcionesActiviyStart);\n                   \n            }"} {"seed":"public void onClick(View v) {\n            \t\n            \tTextView cambioFondo =(TextView)findViewById(R.id.EquipostextViewIbiza);\n            \tcambioFondo.setBackgroundResource(R.drawable.gradient_bg_hover);\n            \t            \t\n            \tIntent OpcionesActiviyStart = new Intent(EquiposActivity.this, EquiposDetallesActivity.class);\n            \tOpcionesActiviyStart.putExtra(\"cadenaEnviar\", \"Ibiza\");\n            \tstartActivity(OpcionesActiviyStart);\n                   \n            }"} {"seed":"public void onClick(View v) {\n            \t\n            \tTextView cambioFondo =(TextView)findViewById(R.id.EquipostextViewVecindario);\n            \tcambioFondo.setBackgroundResource(R.drawable.gradient_bg_hover);\n            \t            \t\n            \tIntent OpcionesActiviyStart = new Intent(EquiposActivity.this, EquiposDetallesActivity.class);\n            \tOpcionesActiviyStart.putExtra(\"cadenaEnviar\", \"Vecindario\");\n            \tstartActivity(OpcionesActiviyStart);\n                   \n            }"} {"seed":"/**\n\t * get input stream\n\t * @return input stream\n\t */\npublic InputStream getInputStream() {\n        return inputStream;\n    }"} {"seed":"/**\n\t * get input stream\n\t * @return input stream\n\t */\npublic String execute() {\n\t//\tsetDisplay(\"/pages/dynamicChart.jsp\");\n\t//\tdouble access_count = 0; // number of access/second\n\t\t//List<Double> access_rate_list = null;\n\t\t/*if(session.get(\"access_rate_list\") != null){\n\t\t\taccess_rate_list = (List<Double>) session.get(\"access_rate_list\");\n\t\t}else{\n\t\t\taccess_rate_list = new LinkedList<Double>();\n\t\t}*/\n\t\t\t\t\n\t\t//for (int i = 0; i < 3; i++) {\n\n\t\t\tString line = \"wc -l \"\n\t\t\t\t\t+ HTRCLogConfig.AUDIT_LOG_HOME + \"data-api-audit.log\";\n\n\t\t\tString result1 = Utility.exec(line);\n\n\t\t\tdouble new_line_count1 = Double.parseDouble(result1.split(\" \")[0]);\n\t\t\t\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t\tString result2 = Utility.exec(line);\n\n\t\t\tdouble new_line_count2 = Double.parseDouble(result2.split(\" \")[0]);\n\n\t\t\tdouble access_count = new_line_count2 - new_line_count1 ;\n\t\t\t\n\t\t\tString result = access_count + \"\";\n\t\t\t\n\t\t\t// inputStream = new ByteArrayInputStream(result.getBytes(\"UTF-8\"));\n\t\t\ttry {\n\t\t\t\tinputStream = new ByteArrayInputStream(result.getBytes(\"UTF-8\"));\n\t\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t    \n\t\t\t\n\t\t\t/*if(access_rate_list.size() > 80){\n\t\t\t\taccess_rate_list.remove(0);\n\t\t\t\taccess_rate_list.add((access_count/4));\n\t\t\t}else{\n\t\t\t\taccess_rate_list.add((access_count/4));\n\t\t\t}\n\t\t\t\n\t\tsession.put(\"access_rate_list\", access_rate_list);*/\n\t\t\n\t\treturn SUCCESS;\n\t}"} {"seed":"public Student[] getConscripters();"} {"seed":"/**\n\t * check reply code\n\t * @param code\n\t * @return\n\t */\npublic static boolean isCode(short code){\n\t\treturn Response.MIN_REPLYCODE <= code && code <= Response.MAX_REPLYCODE;\n\t}"} {"seed":"@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_sms);\n        send=findViewById(R.id.btnsend);\n        send.setEnabled(false);\n        if (checkPermission((Manifest.permission.SEND_SMS)))\n        {\n            send.setEnabled(true);\n        }\n        else\n        {\n            ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.SEND_SMS},SEND_SMS_PERMISSION_REQUEST_CODE);\n        }\n    }"} {"seed":"public void onSend(View view) {\n        String phoneNumber= number.getText().toString();\n        String smsMessage=message.getText().toString();\n        if (phoneNumber==null||phoneNumber.length()==0||smsMessage==null||smsMessage.length()==0)\n        {return;}\n        if(checkPermission((Manifest.permission.SEND_SMS)))\n        {\n            SmsManager smsManager=SmsManager.getDefault();\n            smsManager.sendTextMessage(phoneNumber,null,smsMessage,null ,null );\n            Toast.makeText(this,\"Message Sent\",Toast.LENGTH_SHORT).show();\n        }\n        else{\n            Toast.makeText(this,\"Permission Denied\", Toast.LENGTH_SHORT).show();\n        }\n\n    }"} {"seed":"public boolean checkPermission(String permission)\n    {\n        int check = ContextCompat.checkSelfPermission(this, permission);\n        return (check== PackageManager.PERMISSION_GRANTED);\n    }"} {"seed":"public static void main(String[] args) {\n\t\tScanner teclado = new Scanner(System.in);\n\t\t\n\t\tint op = 0;\n\t\tdo {\n\t\t\top = menu();\n\n\t\t\tswitch (op) {\n\t\t\tcase 1:\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t}\n\t\t} while (op != 5);\n\t}"} {"seed":"public static int menu() {\n\t\tScanner teclado = new Scanner(System.in);\n\t\tSystem.out.println(\"1-. Crear nuevo usuario.\");\n\t\tSystem.out.println(\"2-. .\");\n\t\tSystem.out.println(\"3-. .\");\n\t\tSystem.out.println(\"4-. .\");\n\t\tSystem.out.println(\"5-. Sal del sistema\");\n\n\t\tint op = teclado.nextInt();\n\t\treturn op;\n\t}"} {"seed":"��两个表达式相减\n     *\n     * @param var\n     * @return\n     */\n    @Override\n    public int interpreter(HashMap<String, Integer> var) {"} {"seed":"public String getMoney() {\n        return money;\n    }"} {"seed":"public void setMoney(String money) {\n        this.money = money;\n    }"} {"seed":"public String getAdd_time() {\n        return add_time;\n    }"} {"seed":"public void setAdd_time(String add_time) {\n        this.add_time = add_time;\n    }"} {"seed":"@Override\n\tpublic void afterPropertiesSet() throws Exception {\n\t\t\tProperties properties = ConfigProperties.newInstance();\n\t\t\tif(properties != null){\n//\t\t\t\tif(StringUtils.isNotBlank(properties.getProperty(\"redis.maxTotal\")))\n//\t\t\t\t\tsetMaxTotal(Integer.parseInt(properties.getProperty(\"redis.maxTotal\").trim()));\n\t\t\t\tif(StringUtils.isNotBlank(properties.getProperty(\"redis.maxIdle\")))\n\t\t\t\tsetMaxIdle(Integer.parseInt(properties.getProperty(\"redis.maxIdle\").trim()));\n\t\t\t\tif(StringUtils.isNotBlank(properties.getProperty(\"redis.minIdle\")))\n\t\t\t\tsetMinIdle(Integer.parseInt(properties.getProperty(\"redis.minIdle\").trim()));\n//\t\t\t\t\tif(StringUtils.isNotBlank(properties.getProperty(\"redis.maxWaitMillis\")))\n//\t\t\t\t\tsetMaxWaitMillis(Integer.parseInt(properties.getProperty(\"redis.maxWaitMillis\").trim()));\n\t\t\t\tif(StringUtils.isNotBlank(properties.getProperty(\"redis.testOnBorrow\")))\n\t\t\t\tsetTestOnBorrow(Boolean.valueOf(properties.getProperty(\"redis.testOnBorrow\").trim()));\n\t\t\t}\n\t}"} {"seed":"public void fixOut(Bicycle_Deploy bicycle_deploy);"} {"seed":"�，同时填写状态为1，意为已调出\n\tpub"} {"seed":"//补完维修调度单，即修改--状态为1"} {"seed":"@Override\n    public void initialize(StringSize constraintAnnotation) {\n        stringSize = constraintAnnotation;\n    }"} {"seed":"@Override\n    public boolean isValid(String value, ConstraintValidatorContext context) {\n        //null\n        if (value == null) {\n            if (stringSize.allowNull()) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        //length\n        List<Integer> integerList = new ArrayList<>();\n        for (int i : stringSize.lengths()) {\n            integerList.add(i);\n        }\n        return integerList.contains(value.length());\n    }"} {"seed":"/**\n\t * When the command use is entered, this code runs and calls the item's function\n\t * \n\t * @param command String[] that holds the string the user enters (from Parser.java)\n\t */\npublic void doSomething(String[] command) {\n\t\tHashMap<String, Item> items = p1.getItemList();\n\t\tif (!items.containsKey(command[1])) {\n\t\t\tSystem.out.println(\"Inventory does not contain this item\");\n\t\t\treturn;\n\t\t}\n\t\titems.get(command[1]).function(p1);\n\t}"} {"seed":"/**\n\t * Returns the purpose of the use command\n\t * \n\t * @return String of the purpose of the use command\n\t */\npublic String getDescription() {return \"Use an item in your inventory\"; }"} {"seed":"public static Command createCommand(String action) {\n        Command c = null;\n        if (action == null) {\n            action = \"\";\n        }\n\n        switch (action) {\n\n            case \"login\":\n                c = new LoginCommand();\n                break;\n            case \"signUp\":\n                c = new SignUpCommand();\n                break;\n            case \"viewUserDetails\":\n                c = new ViewUserDetailsCommand();\n                break;\n            case \"changeUserDetails\":\n                c = new ChangeUserDetailsCommand();\n                break;\n                 case \"displayBooksAndAuthors\":\n                c = new DisplayBooksAndAuthorsCommand();\n                break;  \n            case \"borrowBook\":\n                c = new BorrowBookCommand();\n                break;\n            case \"returnBook\":\n                c = new ReturnBookCommand();\n                break;\n            case \"OverdueFees\":\n                c = new MyOverdueFeesCommand();\n                break;\n            case \"searchBooks\":\n                c = new SearchBookCommand();\n                break;\n            case \"displayBooks\":\n                c = new DisplayBooksCommand();\n                break;\n            case \"viewCurrentLoans\":\n                c =  new ViewCurrentLoansCommand();\n                break;\n            case \"viewPreviousLoans\":\n                c = new ViewPreviousLoansCommand();\n                break;\n            case \"changeLanguage\":\n                c = new ChangeLanguageCommand();\n                break;                \n            case \"logout\":\n                c = new LogoutCommand();\n                break;\n            default:\n                c = new NoActionSuppliedCommand();\n\n        }\n        return c;\n\n    }"} {"seed":"protected IServiceConfiguration getDefaultConfiguration() {\n        return new CcpPM();\n    }"} {"seed":"@Test\n    @Sql(\"classpath:db/test-recommendation-data.sql\")\n    public void findByCustomerId_with_limit()\n    {\n        // GIVEN\n        Long customerId = 1L;\n        Pageable pageable = new PageRequest(0, 1);\n\n        // WHEN\n        List<Recommendation> recommendations = objectUnderTest.findByCustomerId(customerId, pageable);\n\n        // THEN\n        assertThat(recommendations, hasSize(1));\n    }"} {"seed":"@Test\n    @Sql(\"classpath:db/test-recommendation-data.sql\")\n    public void findByCustomerId_with_ignoring_inactive_recommendations()\n    {\n        // GIVEN\n        Long customerId = 1L;\n        Pageable pageable = new PageRequest(0, Integer.MAX_VALUE);\n\n        // WHEN\n        List<Recommendation> recommendations = objectUnderTest.findByCustomerId(customerId, pageable);\n\n        // THEN\n        assertThat(recommendations, hasSize(2));\n    }"} {"seed":"@Test(expected = DataIntegrityViolationException.class)\n    @Sql(\"classpath:db/test-recommendation-data.sql\")\n    public void save_with_unique_constraint_violation()\n    {\n        // GIVEN\n        Recommendation recommendation = Recommendation.builder()\n            .customerId(1L)\n            .name(\"bingo\")\n            .active(false)\n            .build();\n\n        // WHEN\n        objectUnderTest.save(recommendation);\n\n        // THEN\n        // expect unique constraint violation\n    }"} {"seed":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     *\n @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jPanel1 = new javax.swing.JPanel();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        jTable1 = new javax.swing.JTable();\n        jPanel2 = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n        jButton1 = new javax.swing.JButton();\n        jLabel2 = new javax.swing.JLabel();\n        jButton3 = new javax.swing.JButton();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n        setName(\"Form\"); // NOI18N\n\n        jPanel1.setName(\"jPanel1\"); // NOI18N\n\n        jScrollPane1.setName(\"jScrollPane1\"); // NOI18N\n\n        jTable1.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n\n            },\n            new String [] {\n\n            }\n        ));\n        jTable1.setName(\"jTable1\"); // NOI18N\n        jScrollPane1.setViewportView(jTable1);\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)\n                .addContainerGap())\n        );\n        jPanel1Layout.setVerticalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)\n                .addContainerGap())\n        );\n\n        jPanel2.setName(\"jPanel2\"); // NOI18N\n\n        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(textmining.TextMiningApp.class).getContext().getResourceMap(IndexFrame.class);\n        jLabel1.setText(resourceMap.getString(\"jLabel1.text\")); // NOI18N\n        jLabel1.setName(\"jLabel1\"); // NOI18N\n\n        jButton1.setText(resourceMap.getString(\"jButton1.text\")); // NOI18N\n        jButton1.setName(\"jButton1\"); // NOI18N\n        jButton1.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButton1ActionPerformed(evt);\n            }\n        });\n\n        jLabel2.setText(resourceMap.getString(\"jLabel2.text\")); // NOI18N\n        jLabel2.setName(\"jLabel2\"); // NOI18N\n\n        jButton3.setText(resourceMap.getString(\"jButton3.text\")); // NOI18N\n        jButton3.setName(\"jButton3\"); // NOI18N\n        jButton3.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButton3ActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);\n        jPanel2.setLayout(jPanel2Layout);\n        jPanel2Layout.setHorizontalGroup(\n            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel2Layout.createSequentialGroup()\n                .addGap(22, 22, 22)\n                .addComponent(jButton3)\n                .addContainerGap(132, Short.MAX_VALUE))\n            .addGroup(jPanel2Layout.createSequentialGroup()\n                .addGap(18, 18, 18)\n                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(123, Short.MAX_VALUE))\n            .addGroup(jPanel2Layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(jButton1)\n                .addGap(41, 41, 41))\n        );\n        jPanel2Layout.setVerticalGroup(\n            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()\n                .addContainerGap(90, Short.MAX_VALUE)\n                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(29, 29, 29)\n                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(jLabel2)\n                    .addComponent(jButton1))\n                .addGap(253, 253, 253)\n                .addComponent(jButton3)\n                .addGap(52, 52, 52))\n        );\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n\n        pack();"} {"seed":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     *\n private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed\n        // TODO add your handling code here:\n        DefaultTableModel model=(DefaultTableModel) jTable1.getModel();\n        while(model.getRowCount() > 0)\n                    {\n                         model.removeRow(0);\n                        }\n        try{\n        FileInputStream fis=new FileInputStream(\"C:/ressources/indexOptim.ser\");\n        ObjectInputStream ois= new ObjectInputStream(fis);\n        \n        HashMap temp=new HashMap();\n        \n        TreeMap <String,HashMap>h;\n        h=new TreeMap<String,HashMap> ((HashMap)ois.readObject());\n        Set s=new TreeSet() ;\n        for(Object k : h.keySet()){\n            \n            s.add(k);\n        }\n        \n        Object[] o;\n        o=s.toArray();\n        \n        for (int i=s.size();i>0;i--)\n            {   Object k=o[i-1];\n                temp=(HashMap)h.get(k);\n                for (Object k2 : temp.keySet())\n                {\n                    model.insertRow(0, new Object [] {(String) k,(Integer )k2,(Integer)temp.get(k2)  });\n                }\n            }\n        \n        \n        }\n        catch(Exception e )\n        {e.printStackTrace();\n        }"} {"seed":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     *\n private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed\n    this.dispose();\n    new Principale().setVisible(true);"} {"seed":"/**\n     * @param args the command line arguments\n     *\n public static void main(String args[]) {\n        /* Set the Nimbus look and feel */\n        //<editor-fold defaultstate=\"collapsed\" desc=\" Look and feel setting code (optional) \">\n        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.\n         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html \n         */\n        try {\n            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\n                if (\"Nimbus\".equals(info.getName())) {\n                    javax.swing.UIManager.setLookAndFeel(info.getClassName());\n                    break;\n                }\n            }\n        } catch (ClassNotFoundException ex) {\n            java.util.logging.Logger.getLogger(IndexFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (InstantiationException ex) {\n            java.util.logging.Logger.getLogger(IndexFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (IllegalAccessException ex) {\n            java.util.logging.Logger.getLogger(IndexFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (javax.swing.UnsupportedLookAndFeelException ex) {\n            java.util.logging.Logger.getLogger(IndexFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        }\n        //</editor-fold>\n\n        /* Create and display the form */\n        java.awt.EventQueue.invokeLater(new Runnable() {\n\n            public void run() {\n                new IndexFrame().setVisible(true);\n            }\n        });"} {"seed":"public boolean isCellEditable(int rowIndex, int columnIndex) {\n            return canEdit [columnIndex];"} {"seed":"public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButton1ActionPerformed(evt);"} {"seed":"public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButton3ActionPerformed(evt);"} {"seed":"public void run() {\n                new IndexFrame().setVisible(true);"} {"seed":"public String getNazwisko() {\n\t\treturn nazwisko;\n\t}"} {"seed":"public void setNazwisko(String nazwisko) {\n\t\tthis.nazwisko = nazwisko;\n\t}"} {"seed":"public String getImie() {\n\t\treturn imie;\n\t}"} {"seed":"public void setImie(String imie) {\n\t\tthis.imie = imie;\n\t}"} {"seed":"public int getWiek() {\n\t\treturn wiek;\n\t}"} {"seed":"public void setWiek(int wiek) {\n\t\tthis.wiek = wiek;\n\t}"} {"seed":"public String toString()\n\t{\n\t\treturn imie+\" \"+nazwisko+\" (\"+wiek+\")\";\n\t}"} {"seed":"public double calcularIMC() {\n        return (peso/(altura*altura));\n    }"} {"seed":"public void diagnostico() {\n        if (calcularIMC() < 16) {\n            System.out.println(\"Baixo peso muito grave = IMC abaixo de 16 kg/m²\");\n        } else if (calcularIMC() >= 16 && calcularIMC() <= 16.99) {\n            System.out.println(\"Baixo peso grave = IMC entre 16 e 16,99 kg/m²\");\n        } else if (calcularIMC() >= 17 && calcularIMC() <= 18.49) {\n            System.out.println(\"Baixo peso = IMC entre 17 e 18,49 kg/m²\");\n        } else if (calcularIMC() >= 18.50 && calcularIMC() <= 24.99) {\n            System.out.println(\"Peso normal = IMC entre 18,50 e 24,99 kg/m²\");\n        } else if (calcularIMC() >= 25 && calcularIMC() <= 29.99) {\n            System.out.println(\"Sobrepeso = IMC entre 25 e 29,99 kg/m²\");\n        } else if (calcularIMC() >= 30 && calcularIMC() <= 34.99) {\n            System.out.println(\"Obesidade grau I = IMC entre 30 e 34,99 kg/m²\");\n        }  else if (calcularIMC() >= 35 && calcularIMC() <= 39.99) {\n            System.out.println(\"Obesidade grau II = IMC entre 35 e 39,99 kg/m²\");\n        } else if (calcularIMC() >= 40) {\n            System.out.println(\"Obesidade grau III (obesidade mórbida) = IMC igual ou maior que 40 kg/m²\");"} {"seed":"@Before\n    public void setup(){\n        for(CrapsBet thisBet : CrapsBet.values()){\n            thisBet.placeBet(0);\n        }\n    }"} {"seed":"@Test\n    public void crapsConstructorTest(){\n        expectedBalance = 500;\n        String expectedString = \"test\";\n        Craps testCraps = new Craps(new CrapsPlayer(expectedString,expectedBalance),console);\n        actualBalance = crapsPlayer.getBalance();\n        String actualString = crapsPlayer.name;\n        Assert.assertEquals(expectedBalance,actualBalance);\n        Assert.assertEquals(expectedString,actualString);\n    }"} {"seed":"@Test\n    public void nullaryConstructor(){\n        expectedBalance = 500;\n        String expectedName = \"test\";\n        Craps nullCraps = new Craps();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n        Assert.assertEquals(expectedName,crapsPlayer.name);\n    }"} {"seed":"@Test\n    public void rollPhaseTest(){\n        String shoot = \"shoot\";\n        if(\"shoot\".equalsIgnoreCase(shoot)|| \"r\".equalsIgnoreCase(shoot)){\n            craps.rollDiceAndPrintResult();\n        }\n        else {\n            console.println(\"Cmon... shooter's gotta shoot!\");\n\n        }\n\n    }"} {"seed":"@Test\n    public void rollPhaseTest2(){\n        String shoot = \"sahdiuh\";\n        if(\"shoot\".equalsIgnoreCase(shoot)|| \"r\".equalsIgnoreCase(shoot)){\n            craps.rollDiceAndPrintResult();\n        }\n        else {\n            console.println(\"Cmon... shooter's gotta shoot!\");\n\n        }\n\n    }"} {"seed":"@Test\n    public void betLoopTest() {\n        String response = \"passline\";\n        CrapsBet actualBet = CrapsBet.DONTPASS;\n        CrapsBet expectedBetType = CrapsBet.PASSLINE;\n        actualBet = craps.cycleThroughPossibleBetsReturnBetEnum(response);\n        Assert.assertEquals(expectedBetType, actualBet);\n        }"} {"seed":"@Test\n    public void betLoopTest2() {\n        String response = \"any7\";\n        CrapsBet actualBet = CrapsBet.DONTPASS;\n        CrapsBet expectedBetType = CrapsBet.ANY7;\n        actualBet = craps.cycleThroughPossibleBetsReturnBetEnum(response);\n        Assert.assertEquals(expectedBetType, actualBet);\n    }"} {"seed":"@Test\n    public void removeBalance(){\n      expectedBet = 50;\n      crapsPlayer.placeBet(expectedBet);\n      expectedBalance = 450;\n      actualBalance = crapsPlayer.balance;\n       Assert.assertEquals(expectedBalance,actualBalance);\n   }"} {"seed":"@Test\n    public void printBetChoicesTest(){\n       craps.printBetChoices();\n   }"} {"seed":"@Test\n    public void correctBetPlacedTest(){\n       CrapsBet givenBet = CrapsBet.PASSLINE;\n       String givenString = \"passline\";\n       CrapsBet returnBet = null;\n       for (CrapsBet thisBet : CrapsBet.values()) {\n           if (thisBet.name().equalsIgnoreCase(givenString)) {\n                returnBet = thisBet;\n           }\n       }\n       Assert.assertEquals(givenBet,returnBet);\n   }"} {"seed":"@Test\n    public void incorrectStringBetPlacedTest(){\n        CrapsBet givenBet = CrapsBet.PASSLINE;\n        String givenString = \"iuhfiuhiu\";\n        CrapsBet returnBet = null;\n        for (CrapsBet thisBet : CrapsBet.values()) {\n            if (thisBet.name().equalsIgnoreCase(givenString)) {\n                returnBet = thisBet;\n            }\n        }\n        Assert.assertNull(returnBet);\n    }"} {"seed":"@Test\n    public void passWinTest(){\n       expectedBet = 50;\n       expectedBalance = 550;\n       CrapsBet.PASSLINE.placeBet(expectedBet);\n       craps.passWin();\n       Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n\n    }"} {"seed":"@Test\n    public void passWinFailTest(){\n        expectedBet = 50;\n        expectedBalance = 500;\n        Integer expectedClear = 0;\n        CrapsBet.DONTPASS.placeBet(expectedBet);\n        craps.passWin();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n        Assert.assertEquals(expectedClear,CrapsBet.DONTPASS.currentBet);\n    }"} {"seed":"@Test\n    public void crapsWinTest(){\n        expectedBet = 50;\n        expectedBalance = 550;\n        CrapsBet.DONTPASS.placeBet(expectedBet);\n        craps.craps();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n\n    }"} {"seed":"@Test\n    public void crapsFailTest(){\n        expectedBet = 50;\n        expectedBalance = 500;\n        Integer expectedClear = 0;\n        CrapsBet.PASSLINE.placeBet(expectedBet);\n        craps.craps();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n        Assert.assertEquals(expectedClear,CrapsBet.PASSLINE.currentBet);\n    }"} {"seed":"@Test\n    public void establishPointTest(){\n      Integer expectedPoint = 8;\n       craps.establishPoint(expectedPoint);\n      Assert.assertEquals(expectedPoint,craps.point);\n    }"} {"seed":"@Test\n    public void sevenOutTest(){\n        expectedBet = 50;\n        expectedBalance = 500;\n        CrapsBet.PASSLINE.placeBet(expectedBet);\n       Integer startingPoint = 8;\n       Integer expectedPoint = 0;\n       craps.establishPoint(startingPoint);\n       craps.sevenOutPointAway();\n       Assert.assertEquals(expectedPoint,craps.point);\n       Assert.assertEquals(expectedPoint,CrapsBet.PASSLINE.currentBet);\n    }"} {"seed":"@Test\n    public void PayoutTest1(){\n        expectedBet = 50;\n        expectedBalance = 550;\n        Integer startingPoint = 0;\n        Integer expectedPoint = 8;\n        craps.setDiceSum(4,4);\n        craps.point = startingPoint;\n        CrapsBet.PASSLINE.placeBet(expectedBet);\n        craps.payoutPhase();\n        Assert.assertEquals(expectedPoint,craps.point);\n    }"} {"seed":"@Test\n    public void PayoutTest2(){\n        expectedBet = 50;\n        expectedBalance = 550;\n        Integer startingPoint = 0;\n        Integer expectedRoll = 7;\n        craps.setDiceSum(3,4);\n        craps.point = startingPoint;\n        CrapsBet.PASSLINE.placeBet(expectedBet);\n        craps.payoutPhase();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n    }"} {"seed":"@Test\n    public void PayoutTest3(){\n        expectedBet = 50;\n        expectedBalance = 550;\n        Integer startingPoint = 0;\n        Integer expectedRoll = 11;\n        craps.setDiceSum(6,5);\n        craps.point = startingPoint;\n        CrapsBet.PASSLINE.placeBet(expectedBet);\n        craps.payoutPhase();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n    }"} {"seed":"@Test\n    public void PayoutTest4(){\n        expectedBet = 50;\n        expectedBalance = 550;\n        Integer startingPoint = 0;\n        Integer expectedRoll = 2;\n        craps.setDiceSum(1,1);\n        craps.point = startingPoint;\n        CrapsBet.DONTPASS.placeBet(expectedBet);\n        craps.payoutPhase();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n    }"} {"seed":"@Test\n    public void PayoutTest5(){\n        expectedBet = 50;\n        expectedBalance = 550;\n        Integer startingPoint = 0;\n        Integer expectedRoll = 3;\n        craps.setDiceSum(2,1);\n        craps.point = startingPoint;\n        CrapsBet.DONTPASS.placeBet(expectedBet);\n        craps.payoutPhase();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n    }"} {"seed":"@Test\n    public void PayoutTest6(){\n        expectedBet = 50;\n        expectedBalance = 550;\n        Integer startingPoint = 0;\n        Integer expectedRoll = 12;\n        craps.setDiceSum(6,6);\n        craps.point = startingPoint;\n        CrapsBet.DONTPASS.placeBet(expectedBet);\n        craps.payoutPhase();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n    }"} {"seed":"@Test\n    public void PayoutTest7(){\n        expectedBet = 50;\n        expectedBalance = 550;\n        Integer startingPoint = 6;\n        Integer expectedRoll = 6;\n        craps.setDiceSum(3,3);\n        craps.point = startingPoint;\n        CrapsBet.PASSLINE.placeBet(expectedBet);\n        craps.payoutPhase();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n    }"} {"seed":"@Test\n    public void PayoutTest8(){\n        expectedBet = 50;\n        expectedBalance = 550;\n        Integer startingPoint = 6;\n        Integer expectedRoll = 7;\n        craps.setDiceSum(3,4);\n        craps.point = startingPoint;\n        CrapsBet.DONTPASS.placeBet(expectedBet);\n        craps.payoutPhase();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n    }"} {"seed":"@Test\n    public void PayoutTest9(){\n        expectedBet = 50;\n        expectedBalance = 500;\n        Integer startingPoint = 6;\n        Integer expectedRoll = 12;\n        craps.setDiceSum(6,6);\n        craps.point = startingPoint;\n        CrapsBet.PASSLINE.placeBet(expectedBet);\n        craps.payoutPhase();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n    }"} {"seed":"@Test\n    public void PayoutTest10(){\n        expectedBet = 50;\n        expectedBalance = 2000;\n        Integer startingPoint = 6;\n        Integer expectedRoll = 2;\n        craps.setDiceSum(1,1);\n        craps.point = startingPoint;\n        CrapsBet.ACES.placeBet(expectedBet);\n        craps.payoutPhase();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n    }"} {"seed":"@Test\n    public void PayoutTest11(){\n        expectedBet = 50;\n        expectedBalance = 2000;\n        Integer startingPoint = 0;\n        Integer expectedRoll = 12;\n        craps.setDiceSum(6,6);\n        craps.point = startingPoint;\n        CrapsBet.BOXCAR.placeBet(expectedBet);\n        craps.payoutPhase();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n    }"} {"seed":"@Test\n    public void PayoutTest12(){\n        expectedBet = 50;\n        expectedBalance = 500 + (15 * expectedBet);\n        Integer startingPoint = 0;\n        Integer expectedRoll = 3;\n        craps.setDiceSum(1,2);\n        craps.point = startingPoint;\n        CrapsBet.ACEDEUCE.placeBet(expectedBet);\n        craps.payoutPhase();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n    }"} {"seed":"@Test\n    public void PayoutTest13(){\n        expectedBet = 50;\n        expectedBalance = 500 + (7 * expectedBet);\n        Integer startingPoint = 0;\n        Integer expectedRoll = 3;\n        craps.setDiceSum(1,2);\n        craps.point = startingPoint;\n        CrapsBet.ANYCRAPS.placeBet(expectedBet);\n        craps.payoutPhase();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n    }"} {"seed":"@Test\n    public void PayoutTest14(){\n        expectedBet = 50;\n        expectedBalance = 500 + (7 * expectedBet);\n        Integer startingPoint = 0;\n        Integer expectedRoll = 2;\n        craps.setDiceSum(1,1);\n        craps.point = startingPoint;\n        CrapsBet.ANYCRAPS.placeBet(expectedBet);\n        craps.payoutPhase();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n    }"} {"seed":"@Test\n    public void PayoutTest15(){\n        expectedBet = 50;\n        expectedBalance = 500 + (7 * expectedBet);\n        Integer startingPoint = 8;\n        Integer expectedRoll = 12;\n        craps.setDiceSum(6,6);\n        craps.point = startingPoint;\n        CrapsBet.ANYCRAPS.placeBet(expectedBet);\n        craps.payoutPhase();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n    }"} {"seed":"@Test\n    public void PayoutTest16(){\n        expectedBet = 50;\n        expectedBalance = 500 + (15 * expectedBet);\n        Integer startingPoint = 6;\n        Integer expectedRoll = 11;\n        craps.setDiceSum(5,6);\n        craps.point = startingPoint;\n        CrapsBet.ANY11.placeBet(expectedBet);\n        craps.payoutPhase();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n    }"} {"seed":"@Test\n    public void PayoutTest17(){\n        expectedBet = 50;\n        expectedBalance = 500 + (4 * expectedBet);\n        Integer startingPoint = 4;\n        Integer expectedRoll = 7;\n        craps.setDiceSum(3,4);\n        craps.point = startingPoint;\n        CrapsBet.ANY7.placeBet(expectedBet);\n        craps.payoutPhase();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n    }"} {"seed":"@Test\n    public void PayoutTest20(){\n        expectedBet = 50;\n        expectedBalance = 500;\n        Integer startingPoint = 0;\n        Integer expectedRoll = 12;\n        craps.setDiceSum(3,6);\n        craps.point = startingPoint;\n        CrapsBet.BOXCAR.placeBet(expectedBet);\n        craps.payoutPhase();\n        craps.setDiceSum(6,6);\n        craps.payoutPhase();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n    }"} {"seed":"@Test\n    public void testOddsSimpleBet(){\n        expectedBet =50;\n        expectedBalance = 500 + (160);\n        Integer startingPoint = 6;\n        craps.setDiceSum(3,3);\n        craps.point = startingPoint;\n        CrapsBet.PASSLINE.placeBet(expectedBet);\n        if(craps.point == 6 || craps.point == 8){\n            CrapsBet.ODDS6OR8.placeBet(CrapsBet.PASSLINE.currentBet);\n\n        }\n        craps.payoutPhase();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n    }"} {"seed":"@Test\n    public void testOddsBet(){\n        expectedBet =50;\n        expectedBalance = 500 + (160);\n        Integer startingPoint = 0;\n        craps.setDiceSum(3,3);\n        craps.point = startingPoint;\n        CrapsBet.PASSLINE.placeBet(expectedBet);\n        craps.payoutPhase();\n        CrapsBet.ODDS6OR8.placeBet(expectedBet);\n        craps.payoutPhase();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n    }"} {"seed":"@Test\n    public void testOddsBet2(){\n        expectedBet =50;\n        expectedBalance = 500 + (175);\n        Integer startingPoint = 0;\n        craps.setDiceSum(2,3);\n        craps.point = startingPoint;\n        CrapsBet.PASSLINE.placeBet(expectedBet);\n        craps.payoutPhase();\n        CrapsBet.ODDS5OR9.placeBet(expectedBet);\n        craps.payoutPhase();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n    }"} {"seed":"@Test\n    public void testOddsBet3(){\n        expectedBet =50;\n        expectedBalance = 500 + (200);\n        Integer startingPoint = 0;\n        craps.setDiceSum(2,2);\n        craps.point = startingPoint;\n        CrapsBet.PASSLINE.placeBet(expectedBet);\n        craps.payoutPhase();\n        CrapsBet.ODDS4OR10.placeBet(expectedBet);\n        craps.payoutPhase();\n        Assert.assertEquals(expectedBalance,crapsPlayer.getBalance());\n    }"} {"seed":"@Before\n    public void setUp() {\n\n    }"} {"seed":"@Test\n    public void chooseGameMode() {\n\n    }"} {"seed":"@Test\n    public void updateBoard() {\n    }"} {"seed":"@Test\n    public void resolveClick() {\n        // select non-playable tiles results in no change\n        Coordinates coords = new Coordinates(0, 0);\n        game.resolveClick(coords);\n        assertEquals(64, game.getDataSet().size());\n        assertEquals(64, game.getBackgroundSet().size());\n\n        // selecting movable pieces results in dataSet changes\n        game.resolveClick(redManOccupiedCoords);\n        assertEquals(64, game.getDataSet().size());\n        assertEquals(64, game.getBackgroundSet().size());\n\n        // down-left should be selectable...\n        Coordinates downLeft = redManOccupiedCoords.moveDownLeft(1);\n        assertEquals(TileColor.SELECTED,\n                game.getBackgroundSet().get(downLeft.getPosition()));\n\n        // ...and down-right too\n        Coordinates downRight = redManOccupiedCoords.moveDownRight(1);\n        assertEquals(TileColor.SELECTED,\n                game.getBackgroundSet().get(downRight.getPosition()));\n\n        // but not up-left...\n        Coordinates upLeft = redManOccupiedCoords.moveUpLeft(1);\n        assertNotEquals(TileColor.SELECTED,\n                game.getBackgroundSet().get(upLeft.getPosition()));\n\n        // ... nor up-right\n        Coordinates upRight = redManOccupiedCoords.moveUpRight(1);\n        assertNotEquals(TileColor.SELECTED,\n                game.getBackgroundSet().get(upRight.getPosition()));\n\n        // pressing on blue tile should move piece and deselect that tile...\n        coords = redManOccupiedCoords.moveDownLeft(1);\n        game.resolveClick(coords);\n        assertEquals(2, game.getDataSet().get(coords.getPosition()).intValue());\n        assertNotEquals(TileColor.SELECTED,\n                game.getBackgroundSet().get(coords.getPosition()));\n\n        // ...and it should also deselect other tiles\n        coords = redManOccupiedCoords.moveDownRight(1);\n        assertNotEquals(TileColor.SELECTED,\n                game.getBackgroundSet().get(coords.getPosition()));\n\n        // TODO: capturing moves, canAnyCapture check\n        // TODO: wrong team check, outside board check\n    }"} {"seed":"@Test\n    public void endTurn() {\n    }"} {"seed":"@Test\n    public void gameOver() {\n    }"} {"seed":"@Test\n    public void initialiseDatabase() {\n    }"} {"seed":"@Test\n    public void getRoom() {\n    }"} {"seed":"@Test\n    public void setRoom() {\n    }"} {"seed":"@Test\n    public void getAdapter() {\n    }"} {"seed":"@Test\n    public void setAdapter() {\n    }"} {"seed":"@Test\n    public void stopGame() {\n    }"} {"seed":"@Test\n    public void setFirstTurn() {\n    }"} {"seed":"@Test\n    public void endMove() {\n    }"} {"seed":"@Test\n    public void getDataSet() {\n    }"} {"seed":"@Test\n    public void getBackgroundSet() {\n    }"} {"seed":"void removeItem(long itemId, int position);"} {"seed":"private static String randomString()\n\t{\n\t\treturn Long.toString(random.nextLong(), 36);\n\t}"} {"seed":"private void connect() throws IOException\n\t{\n\t\tif (os == null)\n\t\t\tos = connection.getOutputStream();\n\t}"} {"seed":"private void write(String s) throws IOException\n\t{\n\t\tconnect();\n\t\tos.write(s.getBytes());\n\t}"} {"seed":"private void writeln(String s) throws IOException\n\t{\n\t\twrite(s + \"\\r\\n\");\n\t}"} {"seed":"private void newline() throws IOException\n\t{\n\t\twrite(\"\\r\\n\");\n\t}"} {"seed":"private void boundary() throws IOException\n\t{\n\t\twrite(\"--\");\n\t\twrite(boundary);\n\t}"} {"seed":"private void writeName(String name) throws IOException\n\t{\n\t\tnewline();\n\t\twrite(\"Content-Disposition: form-data; name=\\\"\" + name + '\"');\n\t}"} {"seed":"private void setParameter(String name, String value) throws IOException\n\t{\n\t\tboundary();\n\t\twriteName(name);\n\t\tnewline();\n\t\tnewline();\n\t\twriteln(value);\n\t}"} {"seed":"private void pipe(InputStream in, OutputStream out) throws IOException\n\t{\n\t\tbyte[] buf = new byte[500000];\n\t\t\n\t\tsynchronized(in)\n\t\t{\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tint nread = in.read(buf, 0, buf.length);\n\t\t\t\t\n\t\t\t\tif(nread < 0)\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tout.write(buf, 0, nread);\n\t\t\t}\n\t\t}\n\t\t\n\t\tout.flush();\n\t\tin.close();\n\t\tbuf = null;\n\t}"} {"seed":"private void setParameter(String name, String filename, InputStream is) throws IOException\n\t{\n\t\tboundary();\n\t\twriteName(name);\n\t\twriteln(\"; filename=\\\"\" + filename + '\"');\n\t\t\n\t\tString type = URLConnection.guessContentTypeFromName(filename);\n\t\t\n\t\tif(type == null)\n\t\t\ttype = \"application/octet-stream\";\n\t\t\n\t\twriteln(\"Content-Type: \" + type);\n\t\t\n\t\tnewline();\n\t\tpipe(is, os);\n\t\tnewline();\n\t}"} {"seed":"private void setParameter(String name, File file) throws IOException\n\t{\n\t\tsetParameter(name, file.getPath(), new FileInputStream(file));\n\t}"} {"seed":"private void setParameter(String name, Object object) throws IOException\n\t{\n\t\tif(object instanceof File)\n\t\t\tsetParameter(name, (File) object);\n\t\telse \n\t\t\tsetParameter(name, object.toString());\n\t}"} {"seed":"private void setParameters(Object[] parameters) throws IOException\n\t{\n\t\tif(parameters == null)\n\t\t\treturn;\n\t\t\n\t\tfor(int i = 0; i < parameters.length - 1; i += 2)\n\t\t\tsetParameter(parameters[i].toString(), parameters[i + 1]);\n\t}"} {"seed":"private void post() throws IOException\n\t{\n\t\tboundary();\n\t\twriteln(\"--\");\n\t\tos.close();\n\t}"} {"seed":"public void post(Object[] parameters) throws IOException\n\t{\n\t\tsetParameters(parameters);\n\t\tpost();\n\t}"} {"seed":"public String getResponse()\n\t{\n\t\ttry\n\t\t{\n\t\t\tSystem.out.println(\"Openning stream: \" + connection.getURL());\n\n\t\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n\n\t\t\tStringBuffer response = new StringBuffer();\n\t\t\t\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tString line = rd.readLine();\t\n\t\t\t\tif(line == null)break;\t\n\t\t\t\tresponse.append(line);\n\t\t\t}\n\t\t\t\n\t\t\trd.close();\n\n\t\t\tString str = response.toString().trim();\n\t\t\t\n\t\t\tSystem.out.println(\"Stream opened for \" + connection.getURL() + \" completed\");\n\t\t\treturn str;\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tSystem.out.println(\"Error: Stream for \" + connection.getURL() + \" not ensablished\");\n\t\t\treturn null;\n\t\t}\n\t}"} {"seed":"public static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner input = new Scanner (System.in);\n\t\tSystem.out.println(\"Enter a point with two coordinates:\");\n\t\tdouble x = input.nextDouble();\n\t\tdouble y = input.nextDouble();\n\t\t\n\t\tdouble d1=Math.pow((Math.pow(x, 2)), 0.5);\n\t\tdouble d2=Math.pow((Math.pow(y, 2)), 0.5);\n\t\t\n\t\tif (d1 <=10/2 && d2 <=5.0/2) {\n\t\t\tSystem.out.print(\"point(\" + x+ \",\" + y+\") is in the circle\");\n\t\t}\n\t\telse {\n\t\t\tSystem.out.print(\"point(\" + x+ \",\" + y+\") is not in the circle\");\n\t\t}\n\n\t}"} {"seed":"boolean isValid(Cell cell, Grid grid);"} {"seed":"@Override\n\tprotected void postInit(String pluginName, double x, double y, double z, float yaw, float pitch) throws Exception {\n\t\tclearGoalSelector();\n\t\tclearTargetSelector();\n\n\t\tsuper.postInit(pluginName, x, y, z, yaw, pitch);\n\t}"} {"seed":"public Object getGoalSelector() throws ReflectiveOperationException {\n\t\treturn AccessUtil.setAccessible(Reflection.nmsClassResolver.resolve(\"EntityInsentient\").getDeclaredField(\"goalSelector\")).get(getNpcEntity());\n\t}"} {"seed":"public Collection<?> getGoalListB() throws ReflectiveOperationException {\n\t\treturn (Collection<?>) AccessUtil.setAccessible(Reflection.nmsClassResolver.resolve(\"PathfinderGoalSelector\").getDeclaredField(\"b\")).get(getGoalSelector());\n\t}"} {"seed":"public Collection<?> getGoalListC() throws ReflectiveOperationException {\n\t\treturn (Collection<?>) AccessUtil.setAccessible(Reflection.nmsClassResolver.resolve(\"PathfinderGoalSelector\").getDeclaredField(\"c\")).get(getGoalSelector());\n\t}"} {"seed":"public void clearGoalSelector() {\n\t\ttry {\n\t\t\tgetGoalListB().clear();\n\t\t\tgetGoalListC().clear();\n\t\t} catch (ReflectiveOperationException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}"} {"seed":"public Object getTargetSelector() throws ReflectiveOperationException {\n\t\treturn AccessUtil.setAccessible(Reflection.nmsClassResolver.resolve(\"EntityInsentient\").getDeclaredField(\"targetSelector\")).get(getNpcEntity());\n\t}"} {"seed":"public Collection<?> getTargetListB() throws ReflectiveOperationException {\n\t\treturn (Collection<?>) AccessUtil.setAccessible(Reflection.nmsClassResolver.resolve(\"PathfinderGoalSelector\").getDeclaredField(\"b\")).get(getTargetSelector());\n\t}"} {"seed":"public Collection<?> getTargetListC() throws ReflectiveOperationException {\n\t\treturn (Collection<?>) AccessUtil.setAccessible(Reflection.nmsClassResolver.resolve(\"PathfinderGoalSelector\").getDeclaredField(\"c\")).get(getTargetSelector());\n\t}"} {"seed":"public void clearTargetSelector() {\n\t\ttry {\n\t\t\tgetTargetListB().clear();\n\t\t\tgetTargetListC().clear();\n\t\t} catch (ReflectiveOperationException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}"} {"seed":"��인 \n\tpublic ChatDto checkRoom(String name)throws Ex"} {"seed":"/방만들기 \n\tpublic void createChatRoom(ChatDto dto)t"} {"seed":"//방 정보 리스트\n\tpublic List<ChatDto> ge"} {"seed":"ion;\n\t\n\t// 현재 유저 지정한 방에 입장\n\tpublic void"} {"seed":"mem)throws Exception;\n\t\n\t// 현재 유저가 어떤 방에 있는지"} {"seed":"etRoomMember(ChatMemberDto mem)throws Exception;\n\t\n\t//같은 방에 존재�"} {"seed":"모두가져오기\n\tpublic List<ChatMemberDto> sameRoomList(Cha"} {"seed":"ws Exception;\n\t\n\t//유저의 방정보 수정\n\tpublic void updat"} {"seed":"to mem)throws Exception;\n\t\n\t//유저의 방 정보 삭제\n\tp"} {"seed":"mber(ChatMemberDto mem)throws Exception;\n\t\n\t//remainCount  �"} {"seed":"c void updateChatCountInc(ChatDto dto)thr"} {"seed":"n;\n\t\n\t//remainCount  감소\n\tpublic void updateChatCountDec(Chat"} {"seed":"public static void main(String[] args) {\n        boolean flagM = true;\n        while(flagM){\n            try {\n                Socket socketOfClient = new Socket(\"localhost\",  6268);\n                ClientSK cl = new ClientSK();\n                Scanner in = new Scanner(System.in);\n\n                System.out.println(\"\\nFurniture system\");\n                System.out.println(\"------------------------\");\n                System.out.println(\"1. Login\");\n                System.out.println(\"2. Register\");\n                System.out.println(\"3. Exit\");\n                System.out.print(\"Enter choice number: \");\n                int num = in.nextInt();\n\n                switch (num) {\n                    case 1:\n                        in.nextLine();\n                        System.out.print(\"Enter User: \");\n                        cl.clUser = in.nextLine();\n                        System.out.print(\"Enter Password: \");\n                        cl.clPw = in.nextLine();\n                        \n                        cl.clOut = \"custLogin,\" + cl.clUser + \",\" + cl.clPw;\n                        \n                        if(cl.clUser!=null){\n                            cl.loginSK(cl.clOut);\n                        }\n                        System.out.println(\"cl.ipStream\" + cl.ipStream);\n                        break;\n                    default:\n                        throw new AssertionError();\n                }\n            }catch (IOException ex) {\n                System.out.println(\"IOException\");;\n            }\n        } \n    }"} {"seed":"public void loginSK(String str) throws IOException{\n        ClientSK cl = new ClientSK();\n        String delimiter = \",\";\n        String[] tempArray = str.split(delimiter);\n        \n        Scanner in = new Scanner(System.in);\n        Socket socketOfClient = new Socket(\"localhost\",  6268);\n        \n        boolean flag = true;\n        while(flag){\n            System.out.print(\"Client: \");\n            try{\n                // Tạo luồng đầu ra tại client (Gửi dữ liệu tới server)\n                BufferedWriter os = new BufferedWriter(new OutputStreamWriter(socketOfClient.getOutputStream()));\n                \n                // Ghi dữ liệu vào luồng đầu ra của Socket tại Client.\n                os.write(str);// + \" \" + new Date());\n                os.newLine(); // kết thúc dòng\n                os.flush();  // đẩy dữ liệu đi.\n                System.out.println(\"str: \" + str);\n                \n                // Luồng đầu vào tại Client (Nhận dữ liệu từ server).\n                BufferedReader is = new BufferedReader(new InputStreamReader(socketOfClient.getInputStream()));\n                \n                // Đọc dữ liệu trả lời từ phía server\n                // Bằng cách đọc luồng đầu vào của Socket tại Client.\n                String responseLine = is.readLine();\n//                System.out.println(\"responseLine: \" + responseLine);\n                cl.ipStream = is.readLine();\n                if(cl.ipStream.equals(\"LoginOK\")){\n//                    socketOfClient.close();\n                    cl.custManagement();\n//                    break;\n                }\n                if(responseLine.equals(\"QUIT\")){\n                    os.close();\n                    is.close();\n                    socketOfClient.close();\n//                    System.exit(0);\n                    break;\n                }\n            }catch (UnknownHostException e) {\n                System.err.println(\"Trying to connect to unknown host: \" + e);\n                flag = false;\n            }catch(NullPointerException ex){\n                System.out.println(\"Error: NullPointerException\");\n                flag = false;\n            }catch (IOException e) {\n                System.err.p"} {"seed":"ntln(\"IOException:  \" + e);\n                flag = false;\n            }\n        }\n    }\n\npublic void custManagement(){\n        Scanner ip = new Scanner(System.in);\n        boolean flagAdm = true;\n        while(flagAdm){\n            try{\n                System.out.println(\"\\nCustomer Form - \" + clUser);\n                System.out.println(\"-----------------------------\");\n                System.out.println(\"1. Account Management\");\n                System.out.println(\"2. Product Management\");\n                System.out.println(\"3. Exit\");\n                System.out.print(\"Enter choice number: \");\n                int num = ip.nextInt();\n                switch (num) {\n                    case 1:\n                        System.out.println(\"1. Account Management\");\n//                        custAccManagement();\n                        break;\n                    case 2:\n//                        custProductManagement();\n                        break;\n                    case 3:\n                        flagAdm = false;\n                        System.out.println(\"Thanks for using our service! \");\n                        System.exit(0);\n                        break;\n                    default:\n                        System.out.println(\"\");\n                        break;\n                }\n            }catch(InputMismatchException ex){\n                System.out.println(\"Invalid choice - Error: InputMismatchException\");\n                ip.nextLine();\n            }catch(Exception ex){"} {"seed":"@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_carema_test);\n        sv = findViewById(R.id.sv);\n        tv = findViewById(R.id.tv);\n        test1();\n        PermissionManager permissionManager = new PermissionManager(this);\n    }"} {"seed":"private void test1() {\n        h264Encoder = new H264Encoder(320,240,25);\n        sv.getHolder().addCallback(this);\n        tv.setSurfaceTextureListener(this);\n        h264Encoder.start();\n\n    }"} {"seed":"@Override\n    public void surfaceCreated(SurfaceHolder holder) {\n        startPreview(holder);\n    }"} {"seed":"private void startPreview(SurfaceHolder holder) {\n        camera = Camera.open(Camera.CameraInfo.CAMERA_FACING_FRONT);\n        Camera.Parameters parameters = camera.getParameters();\n        //设置图像格式 、 预览、图片尺寸 、数据回调设置、 数据回显\n        parameters.setPreviewFormat(ImageFormat.NV21);\n        Camera.Size optimalPreviewSize = getOptimalPreviewSize();\n        parameters.setPreviewSize(320,240);\n        parameters.setPictureSize(320,240);\n        camera.setParameters(parameters);\n\n        camera.setDisplayOrientation(90);\n        byte[] bytes = new byte[480 * 320 * 4];\n        camera.addCallbackBuffer(bytes);\n        camera.setPreviewCallbackWithBuffer(this);\n        try {\n            camera.setPreviewDisplay(holder);\n//            camera.setPreviewTexture(this.surface);\n            camera.startPreview();\n        } catch (IOException e"} {"seed":"e.printStackTrace();\n        }\n    }\n\n    public void stopPreview(){\n        if(camera!=null"} {"seed":"camera.stopPreview();\n        }\n    }\n    public void release(){\n        stopPreview();"} {"seed":"camera.release();\n        camera = null;\n    }\n\n    @Override\n    public void surfaceChanged(SurfaceHolder"} {"seed":"r, int format, int width, int height) {\n\n    }\n\n    @Override\n    public void surfaceDestroyed(SurfaceHolder holder) {\n        stopPreview();\n        if (h264Encoder != nul"} {"seed":"h264Encoder.stop();\n        }\n    }\n\n    @Override\n    public void onPreviewFrame(byte[] data, Camera camera) {\n        if(camera !=null){\n            camera.addCallbackBuffer(data);"} {"seed":"shData(data);\n    }\n    SurfaceTexture surface;\n    @Override\n    public void onSurfaceTextureAvailable(SurfaceTexture surface, int width,"} {"seed":"eight) {\n        this.surface = surface;\n    }\n\n    @Override\n    public void onSurfaceTextureSizeChanged(Sur"} {"seed":"xture surface, int width, int height) {\n\n    }\n\n    @Override\n    public boolean onSurfaceTextureDestroyed(S"} {"seed":"Texture surface) {\n        return false;\n    }\n\n    @Override\n    public void onSu"} {"seed":"extureUpdated(SurfaceTexture surface) {\n\n    }\n\n    private Camera.Size getOptimalPreviewSize() {\n        List<Camera.Size> sizes = camera.getParameters().getSupportedPreviewSizes();\n        int width = sv.getWidth();\n        int height = sv.getHeight();\n//        if (DisplayUtils.getScreenOrientation(this) == Configuration.ORIENTATION_PORTRAIT) {\n//            int portraitWidth = h;\n//            h = w;\n//            w = portraitWidth;\n//        }\n\n        if (sizes == null) return null;\n\n        Camera.Size optimalSize = null;\n        double minDiff = Double.MAX_VALUE;\n\n        int targetHeight = 0;\n        Collections.sort(sizes, new Comparator<Camera.Size>() {\n            @Override\n            public int compare(Camera.Size lhs, Camera.Size rhs) {\n                return lhs.height - rhs.height;\n            }\n        });\n\n//        int orientation = DisplayUtils.getScreenOrientation(this);\n//        int width;\n//        int height;\n//        if(mSquareViewFinder) {\n//            if(orientation != Configuration.ORIENTATION_PORTRAIT) {\n//                height = (int) (getHeight() * DEFAULT_SQUARE_DIMENSION_RATIO);\n//                width = height;\n//            } else {\n//                width = (int) (getWidth() * DEFAULT_SQUARE_DIMENSION_RATIO);\n//                height = width;\n//            }\n//        } else {\n//            if(orientation != Configuration.ORIENTATION_PORTRAIT) {\n//                height = (int) (getHeight() * LANDSCAPE_HEIGHT_RATIO);\n//                width = (int) (LANDSCAPE_WIDTH_HEIGHT_RATIO * height);\n//            } else {\n//                width = (int) (getWidth() * PORTRAIT_WIDTH_RATIO);\n//                height = (int) (PORTRAIT_WIDTH_HEIGHT_RATIO * width);\n//            }\n//        }\n//\n//        if(width > getWidth()) {\n//            width = getWidth() - MIN_DIMENSION_DIFF;\n//        }\n//        if(height > getHeight()) {\n//            height = getHeight() - MIN_DIMENSION_DIFF;\n//        }\n\n        for (Camera.Size size : sizes) {\n            if (size.height > height && size.width > width) {\n                optimalSize = size;\n                break;\n            }\n        }\n\n        if (optimalSize == null) {\n            minDiff = Double.MAX_VALUE;\n            for (Camera.Size size : sizes) {\n                if (Math.abs(size.height - targetHeight) < minDiff) {\n                    optimalSize = size;\n                    minDiff = Math.abs(size.height - targetHeight);\n                }"} {"seed":"(sizes, new Comparator<Camera.Size>() {\n            @Override\n            public int compare(Camera.Size lhs, Camera.Size rhs) {"} {"seed":"@JsonValue\n    public String toJson() {\n        return name().toLowerCase();\n    }"} {"seed":"@JsonCreator\n    public static ShipmentStatus fromJson(String value) {\n        return Enum.valueOf(ShipmentStatus.class, value.toUpperCase());\n    }"} {"seed":"@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_pigdice_game);\n\n        playerTurn = getIntent().getIntExtra(\"playerToBegin\", -1);\n\n        NamesArr = getIntent().getStringArrayExtra(\"NameArr\");\n        Scores = getIntent().getIntArrayExtra(\"ScoresArr\");\n\n        //Activate Shaker\n        shakeManager = (SensorManager) getSystemService(SENSOR_SERVICE);\n        Shaker.setNameOfGame(\"Pigdice\");\n        Shaker.startShaker(shakeManager);\n\n        //Get input from previous intent\n        final TextView player1name = (TextView) findViewById(R.id.pigDice_PlayerName_Player1);\n        final TextView player2name = (TextView) findViewById(R.id.pigDice_PlayerName_Player2);\n        player1name.setText(NamesArr[0]);\n        player2name.setText(NamesArr[1]);\n\n        //Sets the arrow for the next game\n        final ImageButton btnMute = (ImageButton) findViewById(R.id.Pigdice_game_btn_mute);\n        if (Sounds.getIsMute()) btnMute.setImageResource(R.drawable.mute);\n        else btnMute.setImageResource(R.drawable.unmute);\n\n        diceShakeSound = MediaPlayer.create(this, R.raw.shakerdice1);\n\n        currentScorePlayer1 = (TextView) findViewById(R.id.pigDice_currentScore_Player1);\n        currentScorePlayer2 = (TextView) findViewById(R.id.pigDice_currentScorePlayer2);\n\n        totalScorePlayer1 = (TextView) findViewById(R.id.pigDice_totalScore_Player1);\n        totalScorePlayer2 = (TextView) findViewById(R.id.pigDice_totalScore_Player2);\n\n        dice = (ImageView) findViewById(R.id.pigDice_dice);\n        arrow = (ImageView) findViewById(R.id.pigDice_turnArrow);\n        SaveScoreBTN = (Button) findViewById(R.id.pigDice_btn_saveScore);\n        arrowSound = MediaPlayer.create(this, R.raw.arrowturn);\n\n\n        Button RollDiceBTN = (Button) findViewById(R.id.pigDice_btn_diceRoll);\n        SaveScoreBTN.setVisibility(View.GONE);\n\n        changeArrowTo1 = AnimationUtils.loadAnimation(PigdiceGame.this, R.anim.arrorflipto1);\n        changeArrowTo2 = AnimationUtils.loadAnimation(PigdiceGame.this, R.anim.arrowflipto2);\n        if (playerTurn == 2) arrow.setImageResource(R.drawable.playerturnarrowto2);\n\n\n        SaveScoreBTN.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n\n                SaveScoreBTN.setVisibility(View.GONE);\n\n                int sum;\n\n\n                if (playerTurn == 1) {\n                    sum = Integer.parseInt(currentScorePlayer1.getText().toString());\n                    sum += Integer.parseInt(totalScorePlayer1.getText().toString());\n                    totalScorePlayer1.setText(String.valueOf(sum));\n\n                    //If Player 1 has >=100 the game ends and player 1 is the winner\n                    if (sum >= 100) weHaveWinner(0);\n                    else endTurn(currentScorePlayer1);\n\n                } else {\n\n\n                    sum = Integer.parseInt(currentScorePlayer2.getText().toString());\n                    sum += Integer.parseInt(totalScorePlayer2.getText().toString());\n                    totalScorePlayer2.setText(String.valueOf(sum));\n\n                    //If Player 2 has >=100 the game ends and player 2 is the winner\n                    if (sum >= 100) weHaveWinner(1);\n                    else endTurn(currentScorePlayer2);\n                }\n\n            }\n        });\n\n        btnMute.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Sounds.buttonMutePress(btnMute);\n            }\n        });\n\n\n        RollDiceBTN.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                UniversalShake();\n            }\n        });\n    }"} {"seed":"@Override\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n        if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {\n\n            shakeManager.unregisterListener(Shaker.sensorListener); //stops physical shake\n\n            final Intent intent = new Intent(this, PigdiceEntrance.class);\n            intent.putExtra(\"NameArr\", NamesArr);\n            intent.putExtra(\"ScoresArr\", Scores);\n            startActivity(intent);\n            finish();\n\n            return true;\n        }\n\n        return super.onKeyDown(keyCode, event);\n    }"} {"seed":"static void UniversalShake() {\n        if (!Sounds.getIsMute()) diceShakeSound.start();\n\n        diceNum = GameFunctions.rollDice(\"Pigdice\", dice);\n\n        if (diceNum == 1) {\n            if (playerTurn == 1) {\n                endTurn(currentScorePlayer1);\n            } else {\n                endTurn(currentScorePlayer2);\n            }\n        } else {\n            if (playerTurn == 1)\n                currentScorePlayer1.setText(String.valueOf(Integer.parseInt\n                        (currentScorePlayer1.getText().toString()) + diceNum));\n\n            else\n                currentScorePlayer2.setText(String.valueOf(Integer.parseInt\n                        (currentScorePlayer2.getText().toString()) + diceNum));\n        }\n    }"} {"seed":"static void turnArrow() {\n        if (!Sounds.getIsMute()) arrowSound.start();\n\n        if (playerTurn == 1)\n            arrow.startAnimation(changeArrowTo1);\n\n        else {\n            arrow.startAnimation(changeArrowTo2);\n        }\n    }"} {"seed":"static void endTurn(TextView currentScore) {\n\n        currentScore.setText(\"0\");\n\n        playerTurn = 1 + ((playerTurn) % 2);\n        turnArrow();\n    }"} {"seed":"void weHaveWinner(int nameIndex) {\n\n        Scores[nameIndex]++; //adds a point to the winner\n\n        shakeManager.unregisterListener(Shaker.sensorListener); //stops physical shake\n\n        final Intent intent = new Intent(this, WinnerScreen.class);\n        intent.putExtra(\"NameArr\", NamesArr);\n        intent.putExtra(\"ScoresArr\", Scores);\n        intent.putExtra(\"WinnerName\", NamesArr[nameIndex]);\n        intent.putExtra(\"GameToReplay\", \"Pigdice\");\n        startActivity(intent);\n        finish();\n    }"} {"seed":"@Override\n            public void onClick(View view) {\n\n                SaveScoreBTN.setVisibility(View.GONE);\n\n                int sum;\n\n\n                if (playerTurn == 1) {\n                    sum = Integer.parseInt(currentScorePlayer1.getText().toString());\n                    sum += Integer.parseInt(totalScorePlayer1.getText().toString());\n                    totalScorePlayer1.setText(String.valueOf(sum));\n\n                    //If Player 1 has >=100 the game ends and player 1 is the winner\n                    if (sum >= 100) weHaveWinner(0);\n                    else endTurn(currentScorePlayer1);\n\n                } else {\n\n\n                    sum = Integer.parseInt(currentScorePlayer2.getText().toString());\n                    sum += Integer.parseInt(totalScorePlayer2.getText().toString());\n                    totalScorePlayer2.setText(String.valueOf(sum));\n\n                    //If Player 2 has >=100 the game ends and player 2 is the winner\n                    if (sum >= 100) weHaveWinner(1);\n                    else endTurn(currentScorePlayer2);\n                }\n\n            }"} {"seed":"@Override\n            public void onClick(View v) {\n                Sounds.buttonMutePress(btnMute);\n            }"} {"seed":"@Override\n            public void onClick(View v) {\n                UniversalShake();\n            }"} {"seed":"@Override\n    public AdapterViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());\n        View view = layoutInflater.inflate(R.layout.item_menu, parent, false);\n        return new AdapterViewHolder(view);\n    }"} {"seed":"@Override\n    public void onBindViewHolder(AdapterViewHolder holder, int position) {\n        final modelMinuman item = data.get(position);\n        holder.bindTo(item);\n        holder.itemView.setOnClickListener(new View.OnClickListener(){\n            @Override\n            public void onClick(View view){\n                Intent go = new Intent(view.getContext().getApplicationContext(),MenuDetail.class);\n                go.putExtra(\"etitle\",item.getNama_merk());\n                go.putExtra(\"edesc\",item.getDeskripsi());\n                go.putExtra(\"eimg\",item.getGambar());\n                view.getContext().startActivity(go);\n            }\n        });\n\n\n\n    }"} {"seed":"@Override\n    public int getItemCount() {\n        return data.size();\n    }"} {"seed":"public void bindTo(modelMinuman item) {\n            mMinuman = item;\n            mLblMinumanImg.setImageResource(item.getGambar());\n            mLblMinumanJudul.setText(item.getNama_merk());\n            mLblMinumanInfo.setText(item.getInfo());\n\n        }"} {"seed":"@Override\n            public void onClick(View view){\n                Intent go = new Intent(view.getContext().getApplicationContext(),MenuDetail.class);\n                go.putExtra(\"etitle\",item.getNama_merk());\n                go.putExtra(\"edesc\",item.getDeskripsi());\n                go.putExtra(\"eimg\",item.getGambar());\n                view.getContext().startActivity(go);\n            }"} {"seed":"public void addTask(View view){\n        EditText taskInput = (EditText) findViewById(R.id.taskInput);\n\n        String newTask = taskInput.getText().toString();\n\n        taskArray.add(newTask);\n        taskInput.setText(\"\");\n\n        ((LinearLayout) findViewById(R.id.dummy_id)).requestFocus();\n\n        taskInput.requestFocus();\n\n        arrayAdapter.notifyDataSetChanged();\n\n\n    }"} {"seed":"@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        taskList = (ListView) findViewById(R.id.tasksList);\n\n\n\n        arrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,taskArray);\n        taskList.setAdapter(arrayAdapter);\n\n        taskList.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n            @Override\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n\n                String delete = taskArray.get(position);\n                System.out.println(position);\n\n                int index = taskArray.indexOf(delete);\n\n                taskArray.remove(index);\n\n                arrayAdapter.notifyDataSetChanged();\n\n            }\n        });\n\n        ((LinearLayout) findViewById(R.id.dummy_id)).requestFocus();\n\n\n\n\n\n    }"} {"seed":"@Override\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n\n                String delete = taskArray.get(position);\n                System.out.println(position);\n\n                int index = taskArray.indexOf(delete);\n\n                taskArray.remove(index);\n\n                arrayAdapter.notifyDataSetChanged();\n\n            }"} {"seed":"ice userRoleService;\n\n    @RequestMapping(value = \"\", method = RequestMethod.GET)\n    @ApiOperation(value = \"查询所有用户角色\", notes = \"查询所有用户角色\")\n    public Object findAll(PageVo pageVo,\n                          @ApiParam(name = \"search\", value = \"模糊查询字段\", required = false) @RequestParam(required ="} {"seed":"defaultValue = \"\") String search) {\n        return null;\n    }\n\n\n    @RequestMapping(value = \"/{id}\", method = RequestMethod.GET)\n    @ApiOperation(value = \"查询用户角色详情\", notes = \"查询用户角色详情\", httpMethod = \"GET\")\n    public UserRole findById(@ApiParam(name = \"id\", value = \"用户�"} {"seed":"d\", required = true) @PathVariable(\"id\") Integer id) {\n        return userRoleService.getById(id);\n    }\n\n    @RequestMapping(value = \"/{id}\", method = RequestMethod.PUT)\n    @ApiOperation(value = \"修改用户角色"} {"seed":"es = \"修改用户角色\")\n    public void updateById(UserRole userRole) {\n        userRoleService.saveOrUpdate(userRole);\n    }\n\n    @RequestMapping(value = \"\", method = RequestMethod.POST)\n    @ApiOperation(value = \"添加用户角色\", notes = \"添加用户角色\")\n    public void save(\n\n            @ApiParam(name = \"userId\", value = \"用户id\")\n            @RequestParam(required = false, name = \"userId\") Long userId\n            ,\n            @ApiParam(name = \"roleId\", value = \"角色id\")\n            @RequestParam(required ="} {"seed":", name = \"roleId\") Long roleId\n    ) {\n        UserRole userRole = new UserRole(\n\n                userId, roleId);\n        userRoleService.save(userRole);\n    }\n\n    @RequestMapping(value = \"/{id}\", method = RequestMethod.DELETE)\n    @ApiOperation(value = \"删除用户角色\", note"} {"seed":"public abstract boolean isBlocking();"} {"seed":"public abstract boolean isNeedRead();"} {"seed":"public abstract boolean isNeedWrite();"} {"seed":"public abstract int readMore(ByteBuffer bytebuffer)\n        throws SSLException;"} {"seed":"public abstract void writeMore()\n        throws IOException;"} {"seed":"/**\n\t * Method isGlobalAI.\n\t * @return boolean\n\t */\n@Override\n\tpublic boolean isGlobalAI()\n\t{\n\t\treturn true;\n\t}"} {"seed":"/**\n\t * Method checkAggression.\n\t * @param target Creature\n\t * @return boolean\n\t */\n@Override\n\tpublic boolean checkAggression(Creature target)\n\t{\n\t\tfinal NpcInstance actor = getActor();\n\t\t\n\t\tif (actor.isDead())\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif ((getIntention() != CtrlIntention.AI_INTENTION_ACTIVE) && (current_point > -1))\n\t\t{\n\t\t\tcurrent_point--;\n\t\t}\n\t\t\n\t\tactor.getAggroList().addDamageHate(target, 0, 1);\n\t\tsetIntention(CtrlIntention.AI_INTENTION_ATTACK, target);\n\t\treturn true;\n\t}"} {"seed":"/**\n\t * Method thinkActive.\n\t * @return boolean\n\t */\n@Override\n\tpublic boolean thinkActive()\n\t{\n\t\tfinal NpcInstance actor = getActor();\n\t\t\n\t\tif (actor.isDead())\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif (_def_think)\n\t\t{\n\t\t\tif (doTask())\n\t\t\t{\n\t\t\t\tclearTasks();\n\t\t\t}\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif (super.thinkActive())\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif ((System.currentTimeMillis() > wait_timeout) && ((current_point > -1) || Rnd.chance(5)))\n\t\t{\n\t\t\tif (!wait && (current_point == 31))\n\t\t\t{\n\t\t\t\twait_timeout = System.currentTimeMillis() + 30000;\n\t\t\t\twait = true;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\twait_timeout = 0;\n\t\t\twait = false;\n\t\t\tcurrent_point++;\n\t\t\t\n\t\t\tif (current_point >= points.length)\n\t\t\t{\n\t\t\t\tcurrent_point = 0;\n\t\t\t}\n\t\t\t\n\t\t\tactor.setWalking();\n\t\t\taddTaskMove(points[current_point], true);\n\t\t\tdoTask();\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif (randomAnimation())\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn false;\n\t}"} {"seed":"/**\n\t * Method randomWalk.\n\t * @return boolean\n\t */\n@Override\n\tprotected boolean randomWalk()\n\t{\n\t\treturn false;\n\t}"} {"seed":"�数据\n    public Book getBook(int bid){\n        System.out.println(bid);\n        return hibernateTemplate.get(Book.class,"} {"seed":"获取总的记录数\n    public int getCount(){\n        return hibernateTemplate.execute(new HibernateCallback(){\n\n            @Override\n            public Object doInHibernate(Session session) throws HibernateException {\n                    String hql = \"select count(*) from Book\";\n                    Query query = session.createQuery(hql);\n                    int count = ((Long)query.iterate().next()).intValue();\n                    return count;\n            }"} {"seed":"}\n    //分页显示所有书籍信息\n    public List<Book> getBookList(final int currentpage,final int currentnum){\n        return hibernateTemplate.execute(new HibernateCallback(){\n\n                @Override\n                public Object doInHibernate(Session session) throws HibernateException {\n                        String hql = \"select b from Book b\";\n                        Query query = session.createQuery(hql);\n                        query.setFirstResult(currentpage);\n                        query.setMaxResults(currentnum);\n                        List list = query.list(); \n                        return list;"} {"seed":"});\n    }\n        \n     //根据ID删除\n       public void deleteById(final int bid){\n           hibernateTemplate.execute(new HibernateCallback(){\n\n               @Override\n               public Object doInHibernate(Session session) throws HibernateException {\n                       \n                       String hql = \"delete from book where bid = ?\";\n                       Query query = session.createSQLQuery(hql);\n                       query.setInteger(0,bid);\n                       query.executeUpdate();\n                       \n                       return nul"} {"seed":"});\n      }\n       //注册书籍信息\n       public void RegisterBook(final Book book){\n           hibernateTemplate.execute(new HibernateCallback(){\n               \n               @Override\n               public Object doInHibernate(Session session) throws HibernateException {\n                   \n                   session.save(book);\n                  \n                   \n                   ret"} {"seed":"});\n       }\n       \n     //更新书籍信息\n       public void UpdateBook(final Book book){\n           hibernateTemplate.execute(new HibernateCallback(){\n               \n               @Override\n               public Object doInHibernate(Session session) throws HibernateException {\n\n                   String hql = \"update book set bname = ?,btype = ?, bauthor = ?,\"\n                           + \" bprice = ?,bdiscount = ?, bnumber = ?, btext = ? where bid = ?\";\n                   Query query = session.createSQLQuery(hql);\n                   query.setString(0, book.getBname());\n                   query.setString(1, book.getBtype());\n                   query.setString(2, book.getBauthor());\n                   query.setDouble(3, book.getBprice());\n                   query.setString(4, book.getBdiscount());\n                   query.setInteger(5, book.getBnumber());\n                   query.setString(6, book.getBtext());\n                   query.setInteger(7, book.getBid());\n\n                   query.executeUpdate();"} {"seed":"eCallback(){\n\n            @Override\n            public Object doInHibernate(Session session) throws HibernateException {\n                    String hql = \"select count(*) from Book\";\n                    Query query = session.createQuery(hql);\n                    int count = ((Long)query.iterate().next()).intValue();\n                    r"} {"seed":"ute(new HibernateCallback(){\n\n                @Override\n                public Object doInHibernate(Session session) throws HibernateException {\n                        String hql = \"select b from Book b\";\n                        Query query = session.createQuery(hql);\n                        query.setFirstResult(currentpage);\n                        query.setMaxResults(currentnum);\n                        List list = query.list();"} {"seed":"late.execute(new HibernateCallback(){\n\n               @Override\n               public Object doInHibernate(Session session) throws HibernateException {\n                       \n                       String hql = \"delete from book where bid = ?\";\n                       Query query = session.createSQLQuery(hql);\n                       query.setInteger(0,bid);\n                       query.executeUpdate();"} {"seed":"e.execute(new HibernateCallback(){\n               \n               @Override\n               public Object doInHibernate(Session session) throws HibernateException {\n                   \n                   session.save(book);"} {"seed":"rnateTemplate.execute(new HibernateCallback(){\n               \n               @Override\n               public Object doInHibernate(Session session) throws HibernateException {\n\n                   String hql = \"update book set bname = ?,btype = ?, bauthor = ?,\"\n                           + \" bprice = ?,bdiscount = ?, bnumber = ?, btext = ? where bid = ?\";\n                   Query query = session.createSQLQuery(hql);\n                   query.setString(0, book.getBname());\n                   query.setString(1, book.getBtype());\n                   query.setString(2, book.getBauthor());\n                   query.setDouble(3, book.getBprice());\n                   query.setString(4, book.getBdiscount());\n                   query.setInteger(5, book.getBnumber());\n                   query.setString(6, book.getBtext());\n                   query.setInteger(7, book.getBid());\n\n                   query.executeU"} {"seed":"String getGroupId();"} {"seed":"String getArtifactId();"} {"seed":"String getVersion();"} {"seed":"String getClassifier();"} {"seed":"String getExtension();"} {"seed":"String getProperty(String type, String s);"} {"seed":"File getFile();"} {"seed":"/**\n     * Instantiates a new Jwt request filter.\n     *\n     * @param jwtTokenUtil the jwt token util\n     * @param authService  the auth service\n     */\n@Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n            throws ServletException, IOException {\n        // allow token to be in Cookie or Authorization header\n        String token = extractFromAuthorization(request.getHeader(\"Authorization\"));\n        if (token.isEmpty()) {\n            token = extractFromCookie(request.getHeader(\"Cookie\"));\n        }\n        // token is found\n        String username = null;\n        if (!token.isEmpty()) {\n            try {\n                username = jwtTokenUtil.getUsernameFromToken(token);\n            } catch (IllegalArgumentException | ExpiredJwtException | SignatureException | MalformedJwtException e) {\n                logger.warn(\"Invalid token provided\");\n            }\n        } else {\n            logger.warn(\"JWT Token is not found\");\n        }\n\n        // Once we get the token validate it.\n        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {\n            UserDetails userDetails = this.authService.loadUserByUsername(username);\n\n            // if token is valid configure Spring Security to manually set\n            // authentication\n            if (jwtTokenUtil.validateToken(token, userDetails)) {\n                UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken(\n                        userDetails, null, userDetails.getAuthorities());\n                usernamePasswordAuthenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\n                // After setting the Authentication in the context, we specify\n                // that the current user is authenticated. So it passes the\n                // Spring Security Configurations successfully.\n                SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);\n            }\n        }\n        chain.doFilter(request, response);\n    }"} {"seed":"/**\n     * Instantiates a new Jwt request filter.\n     *\n     * @param jwtTokenUtil the jwt token util\n     * @param authService  the auth service\n     */\nprivate String extractFromAuthorization(String str) {\n        if (str != null && str.startsWith(\"Bearer \")) {\n            return str.substring(7);\n        }\n        return \"\";\n    }"} {"seed":"/**\n     * Instantiates a new Jwt request filter.\n     *\n     * @param jwtTokenUtil the jwt token util\n     * @param authService  the auth service\n     */\nprivate String extractFromCookie(String str) {\n        String token = \"\";\n        if (str != null) {\n            int pos = str.indexOf(\"token=\");\n            if (pos >= 0) {\n                token = str.substring(pos + 6);\n                pos = token.indexOf(';');\n                if (pos >= 0) {\n                    token = token.substring(0, pos);\n                }\n            }\n        }\n        return token;\n    }"} {"seed":"per;\n\n    @Override\n    public R queryAll() {\n\n        return R.setOK(\"OK\", tKnowledgeMapper.queryAll"} {"seed":"@Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.fm1, container, false);\n    }"} {"seed":"@Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n//        tv1 = view.findViewById(R.id.tv1);\n        studentViewModel = ViewModelProviders.of(getActivity()).get(StudentViewModel.class);\n//        tv1.setOnClickListener(new View.OnClickListener() {\n//            @Override\n//            public void onClick(View v) {\n                viewModel.getData();\n//            }\n//        });\n\n        viewModel.gettMutableLiveData().observe(this, new Observer<String>() {\n            @Override\n            public void onChanged(@Nullable String s) {\n//                tv1.setText(String.valueOf(System.currentTimeMillis())+s);\n            }\n        });\n    }"} {"seed":"@Override\n            public void onChanged(@Nullable String s) {\n//                tv1.setText(String.valueOf(System.currentTimeMillis())+s);\n            }"} {"seed":"public void performAction() {\n        TopComponent c = NbSheet.findDefault();\n        c.open ();\n        c.requestActive();\n    }"} {"seed":"protected boolean asynchronous() {\n        return false;\n    }"} {"seed":"public String getName() {\n        return NbBundle.getBundle(GlobalPropertiesAction.class).getString(\"GlobalProperties\"); // NOI18N\n    }"} {"seed":"public HelpCtx getHelpCtx() {\n        return new HelpCtx (GlobalPropertiesAction.class);\n    }"} {"seed":"protected String iconResource () {\n        return \"org/netbeans/core/windows/resources/properties.gif\"; // NOI18N\n    }"} {"seed":"e  PropertyUtils Instance;\n\n    public static PropertyUtils getNewInstance() {\n        if (Instance == null) {\n            synchronized (PropertyUtils.class) {\n                if (Instance == null) {\n                    Instance = new PropertyUtils();\n                }\n            }"} {"seed":"Name()));\n            }\n        }, dir);\n    }\n\n    public void loads(final FileFilter filter, final String fPath) {\n        File path = new File(fPath);\n        File[] list = path.listFiles(filter);\n        if (list != null) {\n            for (File f : list) {"} {"seed":"load(f, false);\n            }\n        }\n    }\n\n    public boolean load(final Stri"} {"seed":"th) {\n        return load(fPath, false);\n    }\n\n    public boolean load(final String fPath, final boolean reload) {\n        if (fPath == null || \"\".equals(fPath.trim())\n                || (!reload && pool.containsKey(FilenameUtils.getName(fPath)))) {\n            return false;\n        }\n        final File f = new File(fPath);\n        if (f.exists() && f.isFile()\n                && (!pool.containsKey(f.getName()) || reload)) {\n            Properties p = new Properties();\n            FileReader fr = null;\n            try {\n                fr = new FileReader(f);\n                p.load(fr);\n                lock.acquire();\n                pool.put(f.getName(), new FileContext(f.getName(), fPath, p));\n                return true;\n            } catch (FileNotFoundException e) {\n                log.error(e.getMessage(), e);\n            } catch (IOException e) {\n                log.error(e.getMessage(), e);\n            } catch (InterruptedException e) {\n                log.error(e.getMessage(), e);\n            } finally {\n                lock.release();\n                try {\n                    if (fr != null) {\n                        fr.close();\n                    }\n                } catch (IOException e) {\n                    log.error(e.getMessage(), e);\n                }"} {"seed":"}\n        }\n        return false;\n    }\n\n    public boolean load(final File f, final boolean reload) {\n        if (f == null) {\n            return false;\n        }\n        if (f.exists() && f.isFile()\n                && (!pool.containsKey(f.getName()) || reload)) {\n            Properties p = new Properties();\n            FileReader fr = null;\n            try {\n                fr = new FileReader(f);\n                p.load(fr);\n                lock.acquire();\n                pool.put(f.getName(),\n                        new FileContext(f.getName(), f.getAbsolutePath(), p));\n                return true;\n            } catch (FileNotFoundException e) {\n                log.error(e.getMessage(), e);\n            } catch (IOException e) {\n                log.error(e.getMessage(), e);\n            } catch (InterruptedException e) {\n                log.error(e.getMessage(), e);\n            } finally {\n                lock.release();\n                try {\n                    if (fr != null) {\n                        fr.close();\n                    }\n                } catch (IOException e) {\n                    log.error(e.getMessage(), e);\n                }"} {"seed":"}\n        }\n        return false;\n    }\n\n    public boolean reload(final String name) {\n        if (name == null || \"\".equals(name.trim())\n                || !pool.containsKey(FilenameUtils.getName(name))) {\n            return false;\n        }\n        FileContext fc = pool.get(FilenameUtils.getName(name));\n        final File f = new File(fc.fPath);\n        if (f.exists() && f.isFile()) {\n            Properties p = new Properties();\n            FileReader fr = null;\n            try {\n                fr = new FileReader(f);\n                p.load(fr);\n                lock.acquire();\n                pool.put(fc.name, new FileContext(fc.name, fc.fPath, p));\n                return true;\n            } catch (FileNotFoundException e) {\n                log.error(e.getMessage(), e);\n            } catch (IOException e) {\n                log.error(e.getMessage(), e);\n            } catch (InterruptedException e) {\n                log.error(e.getMessage(), e);\n            } finally {\n                lock.release();\n                try {\n                    if (fr != null) {\n                        fr.close();\n                    }\n                } catch (IOException e) {\n                    log.error(e.getMessage(), e);\n                }"} {"seed":"}\n        }\n        return false;\n    }\n\n    public Properties getProperty(final String fPath) {\n        FileContext fc = pool.get(FilenameUtils.getName(fPa"} {"seed":"return fc != null ? fc.p : null;\n    }\n\n    public String getValue(String name, String key, String defualtValue) {\n        if (name == null || key == null || \"\".equals(name.trim())\n                || \"\".equals(key.trim())) {\n            return \"\";\n        }\n        FileContext fc = pool.get(FilenameUtils.getName(name));"} {"seed":"urn fc.p.getProperty(key, defualtValue);\n    }\n\n    public String getValue(String key) {\n        if (key == null || \"\".equals(key.trim())) {\n            return \"\";\n        }\n\n        for (Map.Entry<String, FileContext> e : pool.entrySet()) {\n            if (e.getValue().p.containsKey(key)) {\n                return e.getValue().p.getProperty(ke"} {"seed":"}\n        }\n        return \"\";\n    }\n\n    public String getValue(String key, String defualtValue) {\n        if (key == null || \"\".equals(key.trim())) {\n            return \"\";\n        }\n\n        for (Map.Entry<String, FileContext> e : pool.entrySet()) {\n            if (e.getValue().p.containsKey(key)) {\n                return e.getValue().p.getProperty(key, defualtValue);"} {"seed":";\n        this.loads(new FileFilter() {\n            @Override\n            public boolean accept(File f) {\n                return \"conf\"\n                        .equalsIgnoreCase(Fil"} {"seed":"public T getResult ();"} {"seed":"public void setResult(T result);"} {"seed":"public void reduce(WordKey key, Iterator<WordStatOrAdviewWritable> value,\n\t\t\tOutputCollector<WordKey, WordStatOrAdviewWritable> output, Reporter reporter)\n\t\t\tthrows IOException {\t\t\n\t\tlong adviews=0;\n\t\twhile(value.hasNext()){\n\t\t\tWordStatOrAdviewWritable ws = value.next();\n\t\t\tadviews += ws.getAdview();\n\t\t}\n\t\t\n\t\tWordStatOrAdviewWritable avg = new WordStatOrAdviewWritable();\n\t\tavg.setTag(WordStatOrAdviewWritable.TAG_ADVIEW);\n\t\tavg.setAdview(getWeekAvg(adviews));\n\t\t\n\t\toutput.collect(key, avg);\t\t\n\t}"} {"seed":"private long getWeekAvg(long sum){\n\t\tif(sum==0){\n\t\t\treturn 0;\n\t\t}\n\t\treturn sum/7;\n\t}"} {"seed":"public String toString() {\n        return super.toString() +\n            \",errors=[\" +\n                errors.stream().map(e->\"{\"+e.toString()+\"}\").collect(Collectors.joining(\",\")) +\n            \"]\";\n    }"} {"seed":"public List<ValidationError> getErrors() {\n\t\treturn errors;\n\t}"} {"seed":"public void setErrors(List<ValidationError> errors) {\n\t\tthis.errors = errors;\n\t}"} {"seed":"public int getId() {\n        return getData();\n    }"} {"seed":"public static File getappDir() {\n\t\tURL u = url;\n\t\tString url = u.toString();\n\t\tFile outdir = new File(\".\");\n\t\tif (url.indexOf(\"!\") > 0) {\n\t\t\tint p = url.indexOf(\"!\");\n\t\t\turl = url.substring(0, p);\n\t\t\tif (url.startsWith(\"jar:\"))\n\t\t\t\turl = url.substring(4);\n\t\t\tif (url.startsWith(\"file:\"))\n\t\t\t\turl = url.substring(5);\n\n\t\t\tp = url.indexOf(\"/lib/\");\n\t\t\tif (p > 0) {\n\t\t\t\turl = url.substring(0, p);\n\t\t\t\toutdir = new File(url);\n\t\t\t}\n\n\t\t} else {\n\t\t\tint p = url.indexOf(\"/classes/\");\n\t\t\tif (p > 0) {\n\t\t\t\turl = url.substring(0, p);\n\t\t\t\tif (url.startsWith(\"file:\"))\n\t\t\t\t\turl = url.substring(5);\n\t\t\t\toutdir = new File(url);\n\t\t\t}\n\t\t}\n\t\treturn outdir;\n\t}"} {"seed":"/**\n\t * 返回 classes/专项开发\n\t * \neturn\n\t */\n\tpublic static File getZxdir(){\n\t\treturn new File(getappDir(),\"classe"} {"seed":"/**\n\t * 返回 classes/专项开发\n\t * \n�项开发\");\n\t}\n\n\n\tpublic static File getLibdir(){\n\t\treturn new File(ge"} {"seed":"/**\n\t * 返回 classes/专项开发\n\t * \npDir(),\"lib\");\n\t}\n\n\tpublic static File getClassdir(){\n\t\treturn new File(getapp"} {"seed":"public NewsData getData(){\n            return data;\n        }"} {"seed":"/** \n     * Return the collection of vertices of this graph\n     * @return the vertices as a collection (which is anything iterable)\n     */\npublic Collection<Vertex> vertices() {      \n        //return myGraph.keySet(); OLD\n        //create a copy of all the vertices in the map to restrict any reference\n        //to the interals of this class\n        Collection<Vertex> copyOfVertices = new ArrayList<Vertex>();\n        copyOfVertices.addAll(myGraph.keySet());\n        return copyOfVertices;\n    }"} {"seed":"/** \n     * Return the collection of edges of this graph\n     * @return the edges as a collection (which is anything iterable)\n     */\npublic Collection<Edge> edges() {\n        Collection<Collection<Edge>> copyOfEdges = new ArrayList<Collection<Edge>>();\n        //values = myGraph.values(); OLD\n        //create a copy of all the edges in the map to restrict any reference\n        //to interals of this class\n        copyOfEdges.addAll(myGraph.values());\n        Collection<Edge> allValues = new ArrayList<Edge>();\n        Iterator<Collection<Edge>> eachColl = copyOfEdges.iterator();\n        while(eachColl.hasNext()){\n            allValues.addAll(eachColl.next());\n        }\n\n        return allValues;\n    }"} {"seed":"/**\n     * Return a collection of vertices adjacent to a given vertex v.\n     *   i.e., the set of all vertices w where edges v -> w exist in the graph.\n     * Return an empty collection if there are no adjacent vertices.\n     * @param v one of the vertices in the graph\n     * @return an iterable collection of vertices adjacent to v in the graph\n     * @throws IllegalArgumentException if v does not exist.\n     */\npublic Collection<Vertex> adjacentVertices(Vertex v) {\n        Vertex parameterVertex = new Vertex(v.getLabel());\n        if(!myGraph.containsKey(parameterVertex)){\n            throw new IllegalArgumentException(\"Vertex is not valid\");\n        }\n\n        //create a copy of the passed in vertex to restrict any reference\n        //to interals of this class\n        Collection<Vertex> adjVertices = new ArrayList<Vertex>();\n\n        Iterator<Edge> edges = myGraph.get(parameterVertex).iterator();\n        while(edges.hasNext()) {\n            adjVertices.add(edges.next().getDestination());\n        }\n        return adjVertices;\n    }"} {"seed":"/**\n     * Test whether vertex b is adjacent to vertex a (i.e. a -> b) in a directed graph.\n     * Assumes that we do not have negative cost edges in the graph.\n     * @param a one vertex\n     * @param b another vertex\n     * @return cost of edge if there is a directed edge from a to b in the graph, \n     * return -1 otherwise.\n     * @throws IllegalArgumentException if a or b do not exist.\n     */\npublic int edgeCost(Vertex a, Vertex b) {\n        if (!myGraph.containsKey(b) || !myGraph.containsKey(a)) {\n            throw new IllegalArgumentException(\"Vertex is not valid\");\n        }\n        int cost = -1;\n        if (adjacentVertices(a).contains(b)) {\n            //create a copy of all the edges at the passed in Vertex a\n            //to restrict any reference to interals of this class\n            Collection<Edge> copyOfEdges = new ArrayList<Edge>();\n            copyOfEdges.addAll(myGraph.get(a));\n\n            Iterator<Edge> edges = copyOfEdges.iterator();\n            while(edges.hasNext()){\n                Edge currEdge = edges.next();\n                if(currEdge.getDestination().equals(b)) {\n                    cost =  currEdge.getWeight();\n                }\n            }\n        }\n        return cost;\n    }"} {"seed":"/**\n     * Returns the shortest path from a to b in the graph, or null if there is\n     * no such path.  Assumes all edge weights are nonnegative.\n     * Uses Dijkstra's algorithm.\n     * @param a the starting vertex\n     * @param b the destination vertex\n     * @return a Path where the vertices indicate the path from a to b in order\n     *   and contains a (first) and b (last) and the cost is the cost of \n     *   the path. Returns null if b is not reachable from a.\n     * @throws IllegalArgumentException if a or b does not exist.\n     */\npublic Path shortestPath(Vertex a, Vertex b) {\n        // If a or b aren't present in the set of vertices throw an exception\n        if (!myGraph.containsKey(b) || !myGraph.containsKey(a)) {\n            throw new IllegalArgumentException(\"One of the vertices isn't valid\");\n        }\n        /* Create a map of Vertices to VertexInfos. Fill it with VertexInfos for all\n           vertices that each have no previous vertex and and a cost of INFINITY */\n        Map<Vertex, VertexInfo> vertInfos = new HashMap<Vertex, VertexInfo>();\n        for (Vertex v : vertices()) {\n            vertInfos.put(v, new VertexInfo(v, null, INFINITY));\n        }\n        /* Create a PriorityQueue for VertexInfos */\n        PriorityQueue<VertexInfo> viQueue = new PriorityQueue<VertexInfo>();\n        /* Create a VertexInfo for the start Vertex 'a' with a cost of 0. This uses a copy of Vertex a&b for immutability */\n        Vertex copyA = new Vertex(a.getLabel());\n        Vertex copyB = new Vertex(b.getLabel());\n\n        VertexInfo vi_a = new VertexInfo(copyA, null, 0);\n        /* Add VerxtexInfo for a to PQ and map it to it's VertexInfo */\n        viQueue.add(vi_a);\n        vertInfos.put(a, vi_a);\n        while(!viQueue.isEmpty()) {\n            /* Remove the VertexInfo with lowest cost */\n            Vertex curr = viQueue.poll().getVertex();\n            /* Check all adjacent Vertices of curr Vertex */\n            for (Vertex v : adjacentVertices(curr)) {\n                /* Calculate cost to get to v through curr */\n                int cost = vertInfos.get(curr).getCost() + edgeCost(curr, v);\n                /* If cost through curr is lower than previous */\n                if (cost < vertInfos.get(v).getCost()) {\n                    /* Remove v's VertexInfo from PQ */\n                    viQueue.remove(vertInfos.get(v));\n                    /* Overwrite previous value of v in map\n                       Add updated VerexInfo to PQ */\n                    VertexInfo vi = new VertexInfo(v, curr, cost);\n                    vertInfos.put(v,vi);\n                    viQueue.add(vi);\n                }\n            }\n        }\n        /* Create ArrayList for path */\n        List<Vertex> path = new ArrayList<Vertex>();\n        \n        /* Add each vertex and it's previous vertex to path until a null vertex is reached */\n        for (Vertex vert = copyB; vert != null; vert = vertInfos.get(vert).getPrev()) {\n            path.add(vert);\n        }\n\n        /* Reverse order of path */ \n        Collections.reverse(path);\n        /* Create new Path object with corresponding parameters */\n        if(path.contains(copyA)){\n            Path pathToB = new Path(path, vertInfos.get(copyB).getCost());\n            return pathToB;\n        } else {\n            return null;\n        }\n    }"} {"seed":"public int compareTo(VertexInfo other) {\n            return this.cost - other.getCost();\n        }"} {"seed":"public Vertex getVertex() {\n            return curr;\n        }"} {"seed":"public Vertex getPrev() {\n            return prev;\n        }"} {"seed":"public int getCost() {\n            return cost;\n        }"} {"seed":"g msgType;\n\tpublic DataImpManagerInf getDataImpManager() {\n\t\treturn dataIm"} {"seed":"nager;\n\t}\n\n\tpublic void setDataImpManager(DataImpManagerInf dataImpManager) {\n\t\tthis.dataImpManager = dataIm"} {"seed":"}\n\t//导入文件\n\tpublic String uploadArchives(){\n\t\tActionResult result = new ActionResult();\n\t\tString lang = getLang();\n\t\ttry {\n\t\t\tMap<String, String> param=new HashMap<String, String>();\n\t\t\tString czyid=(String) session.getAttribute(Constants.CURR_STAFFID);\n\t\t\tString dwdm=(String) session.getAttribute(Constants.UNIT_CODE);\n\t\t\tString byqid=(String) session.getAttribute(Constants.FIRST_TRANS_ID);\n\t\t\tparam.put(\"CURR_STAFFID\", czyid);\n\t\t\tparam.put(\"UNIT_CODE\", dwdm);\n\t\t\tparam.put(\"first_trans_id\", byqid);\n\t\t\t\n\t\t\t//gprs\n\t\t\tif (MeterUpload!=null) {\n\t\t\t\tFileInputStream fis = new FileInputStream(MeterUpload);\n\t\t\t\tparam.put(\"bjlxbz\", \"02\");\n\t\t\t\tresult = dataImpManager.parseExcel(fis, param,Constants.DA_BJ_GPRS,lang);\n\t\t\t\t//删除临时文件\n\t\t\t\tMeterUpload.delete();\n\t\t\t}\n\t\t\t\n\t\t\t//用户\n\t\t\tif (custUpload!=null) {\n\t\t\t\tFileInputStream fis = new FileInputStream(custUpload);\n\t\t\t\tresult = dataImpManager.parseExcel(fis, param,Constants.DA_YH,lang);\n\t\t\t\t//删除临时文件\n\t\t\t\tcustUpload.delete();\n\t\t\t}\n\t\t\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(getText(\"basicModule.dagl.dadr.import.failure\")+StringUtil.getExceptionDetailInfo(e));\n\t\t\tresult.setSuccess(false);\n\t\t\tresult.setMsg(\"basicModule.dagl.dadr.importFail\",getLang());\n\t\t}finally{\n\t\t\t\n\t\t}\n\t\t//输出信息\n\t\tresponse.setContentType(\"text/html;charset=UTF-8\"); \n\t\ttry {\n\t\t\tresponse.getWriter().print(\"{success:'\" + StringUtil.getString(result.isSuccess())\n\t\t\t\t\t+ \"',msgType:'\"+ StringUtil.getString(result.getDataObject()) +\"', errMsg:'\"\n\t\t\t\t\t+ StringUtil.getString(result.getMsg()) + \"'}\");\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(Strin"} {"seed":"il.getExceptionDetailInfo(e));\n\t\t} \n\t\treturn null;\n\t}"} {"seed":"blic File getMeterUpload() {\n\t\treturn MeterUpload;\n\t}\n\n\tpublic void setMeterUp"} {"seed":"d(File meterUpload) {\n\t\tMeterUpload = meterUpload;\n\t}"} {"seed":"public File getCustUpload() {\n\t\treturn custUpload;\n\t}\n\n\tpublic void setCustUplo"} {"seed":"File custUpload) {\n\t\tthis.custUpload = custUpload;\n\t}\n\n\tpub"} {"seed":"String getImportResult() {\n\t\treturn importResult;\n\t}\n\n\tpublic void setImportResult(Strin"} {"seed":"mportResult) {\n\t\tthis.importResult = importResult"} {"seed":"}\n\n\tpublic String getMsgType() {\n\t\treturn msgType;\n\t}\n\n\tpublic void s"} {"seed":"public static void main(String[] args) {\n\t\t\n\t\tList<Object> aaa = new ArrayList<Object>();\n\t\t\n\t\tList<String> bbb = new ArrayList<String>();\n\t\t\n\t\tList<String> ccc = new ArrayList<String>();\n\t\t\n\t\t\n\t\t//System.out.println(bbb.equals(ccc));\n\t\t\n\t\t//aaa.add(bbb);\n\t\tbbb.add(\"이종민\");\n\t\tccc.add(\"이종민\");\n\n\t\taaa.add(bbb);\n\t\t\n\t\tSystem.out.println(aaa.contains("} {"seed":"@Override\n    public Ficha clone() {\n        return new Peon(tipo, getX(), getY(), icon, (Rey) rey.clone(), ajedrez);\n    }"} {"seed":"public boolean puede(int posx, int posy) {\n\n        if (tipo == 1 && posx == getX()\n                && ((0 < posy / 60 - getY() / 60 && posy / 60 - getY() / 60 < 2)\n                || (0 < posy / 60 - getY() / 60 && posy / 60 - getY() / 60 < 3 && posy / 60 == 3))) {\n            return true;\n        }\n\n        if (tipo == 2 && posx == getX()\n                && ((0 < getY() / 60 - posy / 60 && getY() / 60 - posy / 60 < 2)\n                || (0 < getY() / 60 - posy / 60 && getY() / 60 - posy / 60 < 3 && posy / 60 == 4))) {\n            return true;\n        }\n\n        return false;\n    }"} {"seed":"public boolean come(Ficha f) {\n        if (tipo == 2) {\n            return (tipo != f.tipo && f.icon != \"\" && Math.abs(getX() / 60 - f.getX() / 60) == 1 && getY() / 60 - f.getY() / 60 == 1);\n        } else {\n            return (tipo != f.tipo && f.icon != \"\" && Math.abs(getX() / 60 - f.getX() / 60) == 1 && f.getY() / 60 - getY() / 60 == 1);\n        }\n    }"} {"seed":"/**\n     * Checks if a given string is NULL or is empty.\n     *\n     * @param string Given string to check.\n     *\n     * @return True if the given string is null or empty, otherwise false.\n     \n  public static final boolean isBlank(final String string) {\n        return Objects.isNull(string) || string.isEmpty();"} {"seed":"/**\n     * Checks if a given string is NULL or is empty.\n     *\n     * @param string Given string to check.\n     *\n     * @return True if the given string is null or empty, otherwise false.\n     \n  public static final boolean nonBlank(final String string) {\n        return !Objects.isNull(string) && !string.isEmpty();"} {"seed":"/**\n     * Checks if one contains one of the others. The method returns true for the first match, otherwise false.\n     *\n     * @param one    The string which is tested for matching any other string.\n     * @param others List of strings that potentially match the first string.\n     *\n     * @throws NullPointerException Thrown if one or both parameters are null or empty.\n     * @return True if the first element of the list is contained in the first parameter.\n     \n  public boolean containsAny(final String one, final String... others) {\n        if (isBlank(one)) {\n            throw new NullPointerException(\"String cannot be null or empty.\");\n        }\n\n        if (Objects.isNull(others) || others.length == 0) {\n            throw new NullPointerException(\"Matches cannot be null or empty.\");\n        }\n\n        return Stream.of(others).anyMatch(other -> one.contains(other));"} {"seed":"public static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\t\n\t\tSystem.out.println(Character.getNumericValue('s'));\n\t\t//10 a\n\t\t//35 z\n\t\t//28 s\n\t\twhile(true) {\n\t\t\tString s = sc.nextLine();\n\t\t\tif(s.equals(\"halt\")) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tchar prev = ' ';\n\t\t\t\tfor(int i = 0; i<s.length(); i++) {\n\t\t\t\t\tchar c = s.charAt(i);\n\t\t\t\t\tint numericValue = Character.getNumericValue(c);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\n\t}"} {"seed":"public int maxProfit(int[] prices) {\n        int N = prices.length;\n        int res = 0;  // min, buy and sell on the same day\n        for (int i = 0; i < N; i++) {\n            for (int j = i; j < N; j++) {\n                res = Math.max(res, prices[j] - prices[i]);\n            }\n        }\n        return res;\n    }"} {"seed":"public int maxProfit2(int[] prices) {\n        // input validation\n        if (prices == null || prices.length <= 1) {\n            return 0;\n        }\n\n        // record the min up util now\n        int min = Integer.MAX_VALUE;\n        int res = 0;\n        for (int i : prices) {\n            min = Math.min(min, i);\n            res = Math.max(res, i - min);\n        }\n        return res;\n    }"} {"seed":"public int maxProfit3(int[] prices) {\n        // input validation\n        if (prices == null || prices.length == 0) {\n            return 0;\n        }\n\n        // calculate the result\n        int sum = 0;\n        int res = 0;\n        for (int i = 0; i < prices.length; i++) {\n            int diff = prices[i + 1] - prices[i];  // get the diff\n            sum = Math.max(0, sum + diff);  // local\n            res = Math.max(res, sum);       // global\n        }\n        return res;\n    }"} {"seed":"private static void test(BestTimeBuyAndSellStock m, int[] A) {\n        System.out.println(Arrays.toString(A));\n        System.out.println(m.maxProfit(A) + \"\\n\");\n    }"} {"seed":"public static void main(String[] args) {\n        BestTimeBuyAndSellStock solution = new BestTimeBuyAndSellStock();\n        int[] prices1 = {1, 2, 5, 3, 4, 6, 2, 8};\n        int[] prices2 = {7, 1, 5, 3, 6, 4};\n        test(solution, prices1);\n        test(solution, prices2);\n    }"} {"seed":"public String sizeNegative(int s) {\n\t\treturn null;\n\t\t\n\t}"} {"seed":"public String nullPointer(int a[],int s) {\n\t\treturn null;\n\t\t\n\t}"} {"seed":"public String outofbound(int a[],int s) {\n\t\treturn null;\n\t\t\n\t\t\n\t\t\n\t}"} {"seed":"@Override\n    public int getCount() {\n        if(mData == null) return 0;\n        return mData.size();\n    }"} {"seed":"@Override\n    public Object getItem(int position) {\n        return null;\n    }"} {"seed":"@Override\n    public long getItemId(int position) {\n        return 0;\n    }"} {"seed":"@Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n\n        ImageView imageItemView;\n        if (convertView == null) {\n            imageItemView = new ImageView(mContext);\n            Utils.setPosterImageSizeParams(mContext, imageItemView);\n        } else {\n            imageItemView = (ImageView) convertView;\n        }\n\n        String imageName = Utils.extractValueFromMovieInfo(Utils.MOVIE_POSTER_FIELD,mData.get(position));\n        Glide.with(mContext).load(Utils.buildPosterImageUrl(imageName)).into(imageItemView);\n\n        return imageItemView;\n    }"} {"seed":"private static void addJson(JsonObject dst, String qName, Object value)\n\t\t\tthrows BerylliumHttpBadRequestException {\n\t\tif (value instanceof Object[]) {\n\t\t\taddJsonArray(dst, qName, (Object[]) value);\n\t\t} else {\n\t\t\taddJsonSingle(dst, qName, value);\n\t\t}\n\t}"} {"seed":"private static void addJsonArray(JsonObject dst, String qName, Object[] zptValues)\n\t\t\tthrows BerylliumHttpBadRequestException {\n\t\tif (zptValues.length == 0) return;\n\t\tif (zptValues.length == 1) {\n\t\t\taddJsonSingle(dst, qName, zptValues[0]);\n\t\t} else {\n\t\t\tfinal DecodeRule decodeRule = newDecodeRule(qName);\n\t\t\tfinal JsonArray array = JsonArray.newMutable(zptValues.length);\n\t\t\tfor (int i = 0; i < zptValues.length; i++) {\n\t\t\t\tfinal Object oval = zptValues[i];\n\t\t\t\tif (oval != null) {\n\t\t\t\t\taddJsonValue(decodeRule, array, oval.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t\tdst.put(qName, array);\n\t\t}\n\t}"} {"seed":"private static void addJsonSingle(JsonObject dst, String qName, Object oValue)\n\t\t\tthrows BerylliumHttpBadRequestException {\n\t\tassert dst != null;\n\t\tassert qName != null && qName.length() > 0;\n\t\tif (oValue != null) {\n\t\t\taddJsonValue(dst, qName, oValue.toString());\n\t\t}\n\t}"} {"seed":"private static void addJsonValue(DecodeRule decodeRule, JsonArray dst, String zValue)\n\t\t\tthrows BerylliumHttpBadRequestException {\n\t\tif (zValue.equals(ReservedValue_null)) {\n\t\t\tdst.addNull();\n\t\t} else {\n\t\t\tdecodeRule.add(dst, zValue);\n\t\t}\n\t}"} {"seed":"private static void addJsonValue(JsonObject dst, String qName, String zValue)\n\t\t\tthrows BerylliumHttpBadRequestException {\n\t\tif (zValue.equals(ReservedValue_null)) {\n\t\t\tdst.putNull(qName);\n\t\t} else {\n\t\t\tfinal DecodeRule decodeRule = newDecodeRule(qName);\n\t\t\tdecodeRule.put(dst, zValue);\n\t\t}\n\t}"} {"seed":"static DecodeRule newDecodeRule(String qName) {\n\t\tassert qName != null;\n\t\tfinal int posType = qName.indexOf('$');\n\t\tif (posType <= 0) return new DecodeRuleDefault(qName);\n\t\tfinal String qBase = qName.substring(0, posType);\n\t\tfinal String zType = qName.substring(posType + 1);\n\t\tfinal String pname = qBase + zType;\n\t\tif (zType.equals(TypeSuffix_Time)) return new DecodeRuleTime(pname);\n\t\tif (zType.equals(TypeSuffix_Name)) return new DecodeRuleName(pname);\n\t\tif (zType.equals(TypeSuffix_Count)) return new DecodeRuleCount(pname);\n\t\tif (zType.equals(TypeSuffix_Elapsed)) return new DecodeRuleElapsed(pname);\n\t\tif (zType.equals(TypeSuffix_Flag)) return new DecodeRuleFlag(pname);\n\t\treturn new DecodeRuleDefault(qName);\n\t}"} {"seed":"public static Binary readBinaryInput(Request rq, int bcQuota)\n\t\t\tthrows ArgonQuotaException, ArgonStreamReadException, IOException {\n\t\tif (rq == null) throw new IllegalArgumentException(\"object is null\");\n\t\tfinal String sourceName = rq.getPathInfo();\n\t\tfinal String ozContentLength = rq.getHeader(HttpHeaders.CONTENT_LENGTH);\n\t\tfinal Long oContentLength = ArgonText.parseLong(ozContentLength, null);\n\t\tfinal long bcContentLength = oContentLength == null ? DefaultContentLength : oContentLength.longValue();\n\t\tfinal ServletInputStream ins = rq.getInputStream();\n\t\treturn Binary.newFromInputStream(ins, bcContentLength, sourceName, bcQuota);\n\t}"} {"seed":"public static JsonObject transformParameterMapToJson(Request rq)\n\t\t\tthrows BerylliumHttpBadRequestException {\n\t\tMap<?, ?> oparameterMap = null;\n\t\ttry {\n\t\t\toparameterMap = rq.getParameterMap();\n\t\t} catch (final RuntimeException ex) {\n\t\t}\n\t\tif (oparameterMap == null || oparameterMap.isEmpty()) return JsonObject.Empty;\n\t\tfinal int keyCount = oparameterMap.size();\n\t\tfinal JsonObject neo = JsonObject.newMutable(keyCount);\n\t\tfor (final Object key : oparameterMap.keySet()) {\n\t\t\tif (key == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfinal Object oValue = oparameterMap.get(key);\n\t\t\tif (oValue == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfinal String ozName = key.toString();\n\t\t\tif (ozName == null || ozName.length() == 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\taddJson(neo, ozName, oValue);\n\t\t}\n\t\treturn neo;\n\t}"} {"seed":"public static String w3c_form_urlencoded(String ozValue, Charset charset) {\n\t\tif (ozValue == null || ozValue.length() == 0) return \"\";\n\t\tif (charset == null) throw new IllegalArgumentException(\"object is null\");\n\t\ttry {\n\t\t\treturn URLEncoder.encode(ozValue, ArgonText.charsetName(charset));\n\t\t} catch (final UnsupportedEncodingException ex) {\n\t\t\tthrow new UnsupportedOperationException(\"No UTF-8 support\", ex);\n\t\t}\n\t}"} {"seed":"public abstract void add(JsonArray dst, String zValue)\n\t\t\t\tthrows BerylliumHttpBadRequestException;"} {"seed":"public abstract void put(JsonObject dst, String zValue)\n\t\t\t\tthrows BerylliumHttpBadRequestException;"} {"seed":"@Override\n\t\tpublic void add(JsonArray dst, String zValue)\n\t\t\t\tthrows BerylliumHttpBadRequestException {\n\t\t\tfinal String ztwValue = zValue.trim();\n\t\t\tif (ztwValue.length() == 0) {\n\t\t\t\tdst.addNull();\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tdst.addInteger(Integer.parseInt(ztwValue));\n\t\t\t\t} catch (final NumberFormatException ex) {\n\t\t\t\t\tthrow new BerylliumHttpBadRequestException(ex, \"integer\", pname);\n\t\t\t\t}\n\t\t\t}\n\t\t}"} {"seed":"@Override\n\t\tpublic final void put(JsonObject dst, String zValue)\n\t\t\t\tthrows BerylliumHttpBadRequestException {\n\t\t\tfinal String ztwValue = zValue.trim();\n\t\t\tif (ztwValue.length() == 0) {\n\t\t\t\tdst.putNull(pname);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tdst.putInteger(pname, Integer.parseInt(ztwValue));\n\t\t\t\t} catch (final NumberFormatException ex) {\n\t\t\t\t\tthrow new BerylliumHttpBadRequestException(ex, \"integer\", pname);\n\t\t\t\t}\n\t\t\t}\n\t\t}"} {"seed":"@Override\n\t\tpublic void add(JsonArray dst, String zValue) {\n\t\t\tdst.addString(zValue);\n\t\t}"} {"seed":"@Override\n\t\tpublic final void put(JsonObject dst, String zValue)\n\t\t\t\tthrows BerylliumHttpBadRequestException {\n\t\t\tdst.putString(pname, zValue);\n\t\t}"} {"seed":"@Override\n\t\tpublic void add(JsonArray dst, String zValue)\n\t\t\t\tthrows BerylliumHttpBadRequestException {\n\t\t\tfinal String ztwValue = zValue.trim();\n\t\t\tif (ztwValue.length() == 0) {\n\t\t\t\tdst.addNull();\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tdst.addElapsed(ElapsedFactory.newElapsed(ztwValue));\n\t\t\t\t} catch (final ArgonFormatException ex) {\n\t\t\t\t\tthrow new BerylliumHttpBadRequestException(ex, pname);\n\t\t\t\t}\n\t\t\t}\n\t\t}"} {"seed":"@Override\n\t\tpublic final void put(JsonObject dst, String zValue)\n\t\t\t\tthrows BerylliumHttpBadRequestException {\n\t\t\tfinal String ztwValue = zValue.trim();\n\t\t\tif (ztwValue.length() == 0) {\n\t\t\t\tdst.putNull(pname);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tdst.putElapsed(pname, ElapsedFactory.newElapsed(ztwValue));\n\t\t\t\t} catch (final ArgonFormatException ex) {\n\t\t\t\t\tthrow new BerylliumHttpBadRequestException(ex, pname);\n\t\t\t\t}\n\t\t\t}\n\t\t}"} {"seed":"@Override\n\t\tpublic void add(JsonArray dst, String zValue)\n\t\t\t\tthrows BerylliumHttpBadRequestException {\n\t\t\tfinal String ztwValue = zValue.trim();\n\t\t\tif (ztwValue.length() == 0) {\n\t\t\t\tdst.addNull();\n\t\t\t} else {\n\t\t\t\tdst.addBoolean(Boolean.parseBoolean(ztwValue));\n\t\t\t}\n\t\t}"} {"seed":"@Override\n\t\tpublic final void put(JsonObject dst, String zValue)\n\t\t\t\tthrows BerylliumHttpBadRequestException {\n\t\t\tfinal String ztwValue = zValue.trim();\n\t\t\tif (ztwValue.length() == 0) {\n\t\t\t\tdst.putNull(pname);\n\t\t\t} else {\n\t\t\t\tdst.putBoolean(pname, Boolean.parseBoolean(ztwValue));\n\t\t\t}\n\t\t}"} {"seed":"@Override\n\t\tpublic void add(JsonArray dst, String zValue)\n\t\t\t\tthrows BerylliumHttpBadRequestException {\n\t\t\tfinal String ztwValue = zValue.trim();\n\t\t\tif (ztwValue.length() == 0) {\n\t\t\t\tdst.addNull();\n\t\t\t} else {\n\t\t\t\tdst.addString(ztwValue);\n\t\t\t}\n\t\t}"} {"seed":"@Override\n\t\tpublic final void put(JsonObject dst, String zValue)\n\t\t\t\tthrows BerylliumHttpBadRequestException {\n\t\t\tfinal String ztwValue = zValue.trim();\n\t\t\tif (ztwValue.length() == 0) {\n\t\t\t\tdst.putNull(pname);\n\t\t\t} else {\n\t\t\t\tdst.putString(pname, ztwValue);\n\t\t\t}\n\t\t}"} {"seed":"@Override\n\t\tpublic void add(JsonArray dst, String zValue)\n\t\t\t\tthrows BerylliumHttpBadRequestException {\n\t\t\tfinal String ztwValue = zValue.trim();\n\t\t\tif (ztwValue.length() == 0) {\n\t\t\t\tdst.addNull();\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tdst.addTime(DateFactory.newTsFromT8(ztwValue));\n\t\t\t\t} catch (final ArgonFormatException ex) {\n\t\t\t\t\tthrow new BerylliumHttpBadRequestException(ex, pname);\n\t\t\t\t}\n\t\t\t}\n\t\t}"} {"seed":"@Override\n\t\tpublic final void put(JsonObject dst, String zValue)\n\t\t\t\tthrows BerylliumHttpBadRequestException {\n\t\t\tfinal String ztwValue = zValue.trim();\n\t\t\tif (ztwValue.length() == 0) {\n\t\t\t\tdst.putNull(pname);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tdst.putTime(pname, DateFactory.newTsFromT8(ztwValue));\n\t\t\t\t} catch (final ArgonFormatException ex) {\n\t\t\t\t\tthrow new BerylliumHttpBadRequestException(ex, pname);\n\t\t\t\t}\n\t\t\t}\n\t\t}"} {"seed":"@Override\n\tpublic String toString() {\n\t\t// \n\t\tStringBuilder builder = new StringBuilder(); \n\t\t\n\t\tbuilder.append(\"Name:\").append(name); \n\t\tbuilder.append(\", contact name:\").append(contactName); \n\t\tbuilder.append(\", contact number:\").append(contactNumber); \n\t\tbuilder.append(\", site url:\").append(siteUrl); \n\t\t\n\t\treturn builder.toString(); \n\t}"} {"seed":"@Override\n\tpublic String getId() {\n\t\treturn name; \n\t}"} {"seed":"public String getIdFormat() {\n\t\treturn \"%s\"; \n\t}"} {"seed":"public static Institute getSample() {\n\t\t// \n\t\tInstitute sample = new Institute(\"KOSTA\"); \n\t\tsample.setContactName(\"Kim,Kildong\");\n\t\tsample.setContactNumber(\"070-0100-8877\");\n\t\tsample.setSiteUrl(\"www.kosta.or.kr\"); \n\t\t\n\t\treturn sample; \n\t}"} {"seed":"public String getName() {\n\t\treturn name;\n\t}"} {"seed":"public void setName(String name) {\n\t\tthis.name = name;\n\t}"} {"seed":"public String getContactName() {\n\t\treturn contactName;\n\t}"} {"seed":"public void setContactName(String contactName) {\n\t\tthis.contactName = contactName;\n\t}"} {"seed":"public String getContactNumber() {\n\t\treturn contactNumber;\n\t}"} {"seed":"public void setContactNumber(String contactNumber) {\n\t\tthis.contactNumber = contactNumber;\n\t}"} {"seed":"public String getSiteUrl() {\n\t\treturn siteUrl;\n\t}"} {"seed":"public void setSiteUrl(String siteUrl) {\n\t\tthis.siteUrl = siteUrl;\n\t}"} {"seed":"\";\n    private SharedPreferences mPrefs;\n\n    public static TempOrderManager getInstance(Context context){\n        if(sInstance==null){\n            sInstance = new TempOrderManager(conte"} {"seed":"prefName,0);\n    }\n\n    /**\n     * 异步保存订单信息\n     */\n    public void saveTempOrderAsync(TempOrder order){\n        Observable.fromCallable(()-> saveTempOrder(order))\n                .subscribeOn(Schedulers.io())\n                .obser"} {"seed":"}\n\n    /**\n     * 保存订单信息\n     * @param order\n     * @return\n     */\n    public Void saveTempOrder(TempOrder order){"} {"seed":"return null;\n    }\n\n    /**\n     * 获取提交中的订单列表\n     *\n     * @return\n     */\n    public List<TempOrder> getTempOrders(){\n        List<TempOrder> dataList = new ArrayList<>();\n        try {\n            Map<String,?> mapAll = mPrefs.getAll();\n            for(Map.Entry entry:mapAll.entrySet()){\n                String string = (String)entry.getValue();\n                if (TextUtils.isEmpty(string)) {\n                    continue;\n                } else {\n                    //将16进制的数据转为数组，准备反序列化\n                    byte[] stringToBytes = SPUtils.StringToBytes(string);\n                    ByteArrayInputStream bis = new ByteArrayInputStream(stringToBytes);\n                    ObjectInputStream is = new ObjectInputStream(bis);\n                    //返回反序列化得到的对象\n                    Object readObject = is.readObject();\n                    dataList.add((TempOrder) readObject);\n                }\n            }\n\n        } catch (StreamCorruptedException e) {\n            e.printStackTrace();\n        } catch (IOExcept"} {"seed":"NotFoundException e) {\n            e.printStackTrace();\n        }\n        return dataList;\n    }\n\n    /**\n     * 异步获取所有提交中订单\n     * @param callback\n     */\n    public void getTempOrdersAsync(IGetTempOrdersCallback callback){\n        Observable.fromCallable(this"} {"seed":"On(Schedulers.io())\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe(callback::o"} {"seed":"return new TempOrder(source);\n            }\n\n            @Override\n            public TempOrder[] ne"} {"seed":"��删除对应的订单\n     */\n    public v"} {"seed":"eDate;\n        private String hashKey;//标记提交中的订单，由本地�"} {"seed":"private boolean isFailed;//是否提交失败，后台返回\n        private double totalMoney;\n        pri"} {"seed":"e totalPieces;\n        private String firstLineName;\n\n        public St"} {"seed":"rstLineName() {\n            return firstLineName;\n        }\n\n        public void setFirstLineName(S"} {"seed":"mount() {\n            return linesAmount;\n        }\n\n        public void set"} {"seed":"t(int linesAmount) {\n            this.linesAmount = linesAmount;"} {"seed":"private int linesAmount;\n        private ArrayList<ProductBasicList.ListBean> productList;"} {"seed":"String getEstimateDate() {\n            return estimateDate;\n        }\n\n        public String getHashKey()"} {"seed":"return hashKey;\n        }\n\n        public ArrayList<ProductBasicList.ListBean> ge"} {"seed":"st() {\n            return productList;\n        }\n\n        public void setEstimateDate(String estimateDate) {\n            this.estimateDate = estimateDate;\n        }\n\n        public void setHashKey(String hashKey) {\n            this.hashKey = hashKey;\n        }\n\n        public void setProductList(ArrayList<ProductBasicList.ListBean> productList) {\n            this.productList = productList;\n            totalMoney = 0;\n            totalPieces = 0;\n            if(productLis"} {"seed":"for(ProductBasicList.ListBean bean:productList){"} {"seed":"totalMoney = totalMoney + bean.getActualQty() * bean.getPrice();"} {"seed":"totalPieces = totalPieces + bean.getActualQty();\n                }"} {"seed":"}\n        }\n\n        public boolean isFailed() {\n            return isFai"} {"seed":"}\n\n        public void setFailed(boolean failed) {\n            isFailed = failed;\n        }"} {"seed":"ic double getTotalMoney() {\n            return totalMoney;\n        }\n\n        public double getTota"} {"seed":"{\n            return totalPieces;\n        }\n\n        public void setTotalMoney(do"} {"seed":"Money) {\n            this.totalMoney = totalMoney;\n        }\n\n        public void setTotalPieces(int totalPieces) {\n            this.totalPieces = totalPieces;\n        }\n\n        @Override\n        public int describeContents() {\n            return 0;\n        }\n\n        @Override\n        public void writeToParcel(Parcel dest, int flags) {\n            dest.writeString(this.estimateD"} {"seed":"oney = in.readDouble();\n            this.totalPieces = in.readDouble();\n            this.productList = in.createTypedArrayList(Produ"} {"seed":"stBean.CREATOR);\n        }\n\n        public static final Creator<TempOrder> CREATOR = new Creator<TempOrder>() {"} {"seed":"public static void main(String[] args) throws Exception {\n    String url = \"jdbc:postgresql://localhost/rdb\";\n    Properties props = new Properties();\n    props.setProperty(\"user\",\"postgres\");\n    props.setProperty(\"password\",\"superpostg\");\n    try (Connection conn = DriverManager.getConnection(url, props)) {\n      String sql = \"select * from ALL_PETS;\";\n      PreparedStatement statement = conn.prepareStatement(sql);\n      try(ResultSet result = statement.executeQuery()) {\n        while (result.next()) {\n          String type = result.getString(\"species\");\n\n          int id = result.getInt(\"pet_id\");\n          String name = result.getString(\"name\");\n          int age = result.getInt(\"age\");\n\n          String barkpitch = result.getString(\"barkPitch\");\n\n          Integer lifeCount = result.getInt(\"liveCount\"); //Returns 0 even if the value should be null\n\n\n\n\n\n          System.out.println(\"id: \" + id + \", Name: \" + name + \", Age: \" + age + \", Species: \" + type + \", barkPitch: \" + barkpitch + \", lifeCount: \" + lifeCount);\n\n          //  System.out.println(\"\"+result.getInt(1)+\" \"+result.getString(2));\n          }\n        }\n      }\n\n\n\n    //String url = \"jdbc:postgresql://localhost/test?user=fred&password=secret&ssl=true\";\n    //Connection conn = DriverManager.getConnection(url);\n    }"} {"seed":"@SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jProgressBar1 = new javax.swing.JProgressBar();\n        jLabel1 = new javax.swing.JLabel();\n        jLabel2 = new javax.swing.JLabel();\n        jLabel3 = new javax.swing.JLabel();\n        jLabel4 = new javax.swing.JLabel();\n        jLabel5 = new javax.swing.JLabel();\n        jLabel6 = new javax.swing.JLabel();\n        jLabel7 = new javax.swing.JLabel();\n        jLabel8 = new javax.swing.JLabel();\n        jLabel9 = new javax.swing.JLabel();\n        jLabel10 = new javax.swing.JLabel();\n        jLabel11 = new javax.swing.JLabel();\n        jLabel12 = new javax.swing.JLabel();\n        jLabel13 = new javax.swing.JLabel();\n        jLabel14 = new javax.swing.JLabel();\n        jLabel15 = new javax.swing.JLabel();\n        jLabel16 = new javax.swing.JLabel();\n        jButton1 = new javax.swing.JButton();\n        jLabel17 = new javax.swing.JLabel();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());\n\n        jLabel1.setFont(new java.awt.Font(\"Garamond\", 3, 36)); // NOI18N\n        jLabel1.setText(\"Recibo De Pago\");\n        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(79, 11, 240, -1));\n\n        jLabel2.setFont(new java.awt.Font(\"Garamond\", 3, 14)); // NOI18N\n        jLabel2.setText(\"El Sr.(A)\");\n        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 59, -1, -1));\n\n        jLabel3.setFont(new java.awt.Font(\"Garamond\", 3, 14)); // NOI18N\n        jLabel3.setText(\"nombre\");\n        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(79, 59, 160, -1));\n\n        jLabel4.setFont(new java.awt.Font(\"Garamond\", 3, 14)); // NOI18N\n        jLabel4.setText(\"realizo el pago para poder\");\n        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(257, 59, 160, -1));\n\n        jLabel5.setFont(new java.awt.Font(\"Garamond\", 3, 14)); // NOI18N\n        jLabel5.setText(\"colocar un nuevo registro de toma de agua en la calle :\");\n        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 94, 374, -1));\n\n        jLabel6.setFont(new java.awt.Font(\"Garamond\", 3, 14)); // NOI18N\n        jLabel6.setText(\"calle\");\n        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 129, 212, -1));\n\n        jLabel7.setFont(new java.awt.Font(\"Garamond\", 3, 14)); // NOI18N\n        jLabel7.setText(\"con las calle de referencia \");\n        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(228, 129, 177, -1));\n\n        jLabel8.setFont(new java.awt.Font(\"Garamond\", 3, 14)); // NOI18N\n        jLabel8.setText(\"Calle 2\");\n        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 157, 201, -1));\n\n        jLabel9.setFont(new java.awt.Font(\"Garamond\", 3, 14)); // NOI18N\n        jLabel9.setText(\"y\");\n        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(255, 157, 119, -1));\n\n        jLabel10.setFont(new java.awt.Font(\"Garamond\", 3, 14)); // NOI18N\n        jLabel10.setText(\"Calle 3\");\n        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 192, 166, -1));\n\n        jLabel11.setFont(new java.awt.Font(\"Garamond\", 3, 14)); // NOI18N\n        jLabel11.setText(\"El pago se realizo el dia\");\n        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 192, 156, -1));\n\n        jLabel12.setFont(new java.awt.Font(\"Garamond\", 3, 14)); // NOI18N\n        jLabel12.setText(\"Fecha\");\n        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(344, 192, 85, -1));\n\n        jLabel13.setFont(new java.awt.Font(\"Garamond\", 3, 14)); // NOI18N\n        jLabel13.setText(\"a las\");\n        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 227, 47, -1));\n\n        jLabel14.setFont(new java.awt.Font(\"Garamond\", 3, 14)); // NOI18N\n        jLabel14.setText(\"Hora\");\n        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(63, 227, 82, -1));\n\n        jLabel15.setFont(new java.awt.Font(\"Garamond\", 3, 14)); // NOI18N\n        jLabel15.setText(\"HRS, con un monto pagado de:\");\n        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(151, 227, 196, -1));\n\n        jLabel16.setFont(new java.awt.Font(\"Garamond\", 3, 14)); // NOI18N\n        jLabel16.setText(\"Monto\");\n        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(365, 227, 64, -1));\n\n        jButton1.setBackground(new java.awt.Color(255, 255, 255));\n        jButton1.setFont(new java.awt.Font(\"Sitka Heading\", 3, 14)); // NOI18N\n        jButton1.setText(\"Aceptar\");\n        jButton1.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButton1ActionPerformed(evt);\n            }\n        });\n        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(164, 271, -1, -1));\n        getContentPane().add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 440, 300));\n\n        pack();\n    }"} {"seed":"private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed\nNvoRegistro registro = new NvoRegistro();\nregistro.setVisible(true);\nthis.dispose();\n    }"} {"seed":"/**\n     * @param args the command line arguments\n     */\npublic static void main(String args[]) {\n        /* Set the Nimbus look and feel */\n        //<editor-fold defaultstate=\"collapsed\" desc=\" Look and feel setting code (optional) \">\n        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.\n         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html \n         */\n        try {\n            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\n                if (\"Nimbus\".equals(info.getName())) {\n                    javax.swing.UIManager.setLookAndFeel(info.getClassName());\n                    break;\n                }\n            }\n        } catch (ClassNotFoundException ex) {\n            java.util.logging.Logger.getLogger(ReciboNvoRegistro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (InstantiationException ex) {\n            java.util.logging.Logger.getLogger(ReciboNvoRegistro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (IllegalAccessException ex) {\n            java.util.logging.Logger.getLogger(ReciboNvoRegistro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (javax.swing.UnsupportedLookAndFeelException ex) {\n            java.util.logging.Logger.getLogger(ReciboNvoRegistro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        }\n        //</editor-fold>\n\n        /* Create and display the form */\n        java.awt.EventQueue.invokeLater(new Runnable() {\n            public void run() {\n                new ReciboNvoRegistro().setVisible(true);\n            }\n        });\n    }"} {"seed":"public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButton1ActionPerformed(evt);\n            }"} {"seed":"public void run() {\n                new ReciboNvoRegistro().setVisible(true);\n            }"} {"seed":"public LoginPage clickFormAuthentication(){\n        PageFactory.initElements(driver ,this) ;\n        loginLink.click();\n        return new LoginPage(driver);\n    }"} {"seed":"public static void main(String[] args) {\n        //declaring scanner into our program\n        Scanner input = new Scanner(System.in);\n        //declaring variables\n        int nCount = 0; //LCV\n        int nNumber = 0; // //varibale to recieve the number entered by the user\n        int nSumOfNumbers = 0; // to get the values of everyrthing\n        int nSumOfEven = 0;//to get the total sum of even numbers\n        int nSumOfOdd = 0;//to get the total sum of odd numbers\n        int nEven = 0;//even variable\n        int nOdd = 0;//odd variable\n        int nNumEven = 0;//hold this variable to be able to solve the average and sum of even numbers\n        int nNumOdd = 0;//hold this variable to be able to solve the average and sum of odd numbers\n        int nMaxOdd= 0;//store greatest odd number\n        int nMaxEven = 0;//store greatest even number     \n        String sName = \"\";//varibale holding the name of user\n        double dAverageTotal = 0.0; // average for total numbers\n        double dAverageEven = 0.0; // average for even numbers\n        double dAverageOdd = 0.0; // average for odd numbers\n        \n        \n        \n        //declaring constant variable that is a sentinal value that goes in the while loop\n       final int SENTINAL = 99;//adding a sentinal value of 99 since it wont change\n       \n        \n        \n        \n        //Displaying what the user will be inputing \n        System.out.println(\"*************************************\");//printing out asterisk like program sample\n        System.out.print(\"Please enter student name: \");//asking user to print student name\n        sName = input.nextLine();//users input\n        System.out.println(\"*************************************\");//printing out asterisk like program sample\n        \n        System.out.println(\"\");//printing blank line\n        System.out.println(\"Hello, \"+ sName);//printing users name to say hi\n        System.out.println(\"This program will run until you type 99\"); //telling user that this program will run until they put the number 99\n        \n        System.out.println(\"\");// space break based on sample run\n        \n        System.out.print(\"Please enter a positive number: \");//printing out for the user to input a \n        nNumber = input.nextInt();//users input\n        \n        while (nNumber != SENTINAL){ // sentinal varibale is 99\n         //validating only taking postive numbers\n         if (nNumber > 0 && nNumber%2==0){//have formula to set postive number, set even number, and set max even number\n             nCount++;//variable holding the amount of numbers there are\n             nEven++;//storing even numbers in this variable\n             nSumOfNumbers = nSumOfNumbers + nNumber;//equation of sum of numbers\n             nNumEven = nNumEven + nNumber;//will store number here if its even in this bracket\n             if (nNumber > nMaxEven){//logic for finding even number\n                nMaxEven = nNumber;//will set max even number to this every time it loops\n             }\n             System.out.print(\"Please enter a positive number: \");//asking user for input after they put a postivie number\n             nNumber = input.nextInt();//users input\n         }//positive number if statements\n         \n         else if (nNumber > 0 && nNumber%2!=0 ) {//have formula to set postive number, set odd number, and set max odd number\n             nCount++;//variable holding the amount of numbers there are\n             nOdd++;//storing odd numbers in this variable\n             nSumOfNumbers = nSumOfNumbers + nNumber;//equation of sum of numbers\n             nNumOdd = nNumOdd + nNumber;//will store number here if its odd in this bracket\n             if (nNumber > nMaxOdd){//logic for finding odd number\n                nMaxOdd = nNumber;//will set max odd number to this every time it loops\n             }\n             System.out.print(\"Please enter a positive number: \");//asking user for input after they put a postivie number\n             nNumber = input.nextInt();//users input\n         }//odd number else else if statement if its not even\n         \n         else {\n               System.out.println(\"Sorry, the number must be > 0\");//asking user to enter a positive number instead of a negative or lower than 0\n               System.out.print(\"Please enter a positive number: \");//asking user to enter a positive number\n               nNumber = input.nextInt();//users input\n           }//end of program \n           \n       }// end of while loop for program that will recieve the postive number only\n        \n        \n        dAverageTotal = (double) nSumOfNumbers / nCount;//formula for average in total\n        dAverageEven =  (double) nNumEven / nEven;//formula for average for even numbers\n        dAverageOdd = (double) nNumOdd / nOdd;//formula for average for odd numbers\n        \n  \n        \n        System.out.println(\"\");//space break for sample run format\n        \n        System.out.println(\"*********************************************************\");//sample run format\n        System.out.println(\"*                 SUMARY REPORT                         *\");//printing summary report\n        System.out.println(\"*********************************************************\");//sample run format\n        \n        System.out.println(\"you entered \"+ nCount + \" numbers\");//printing out the amount of numbers that were written\n        System.out.println(nEven + \" of them are even numbers\");//printing the amount of even numbers there were\n        System.out.println(nOdd + \" of them are odd numbers\");//printing the amount of odd numbers there were\n        System.out.println(\"The sum of the numbers is: \" + nSumOfNumbers);//printing out the sum of numbers in total\n        System.out.println(\"The average of the numbers is: \" + dAverageTotal);//printing out the average of total of all numbers\n        System.out.println(\"The sum of the odd numbers is: \" + nNumOdd);//printing out the sum of odd numbers in total\n        System.out.println(\"The average of the odd number is: \" + dAverageOdd);//printing out the average of total odd numbers\n        System.out.println(\"The sum of the even numbers is: \" + nNumEven);//printing out the sum of even numbers in total\n        System.out.println(\"The average of the even number is: \" + dAverageEven );//printing out the average of total even numbers\n        System.out.println(\"The greatest odd number is \" + nMaxOdd);//showcasing the greatest odd number depending on what the user put\n        System.out.println(\"The greatest even number is \" + nMaxEven);//showcasing the greatest even number depending on what the user put\n        \n        \n                \n    }"} {"seed":"public void permute( ){\n\t\t//if we have passed the last position of the input string, return\n\t\tif( out.length() == in.length() ){\n\t\t\tSystem.out.println( out );\n\t\t\treturn;\n\t\t}\n\t\t//for each character in the input\n\t\tfor( int i = 0; i < in.length(); ++i ){\n\t\t\t//if already marked then skip\n\t\t\tif( used[i] ) \n\t\t\t\tcontinue;\n\t\t\t//otherwise put the character in current position of permuted string\n\t\t\tout.append( in.charAt(i) );\n\t\t\t//mark the position as visited\n\t\t\tused[i] = true;\n\t\t\t//permute remaining characters\n\t\t\tpermute();\n\t\t\t//unmark the position\n\t\t\tused[i] = false;\n\t\t\t//clear the permuted string to start over again\n\t\t\tout.setLength( out.length() - 1 );\n\t\t}\n\t}"} {"seed":"public void permuteAnotherWay(String prefix, String str){\n\t\tint n = str.length();\n\t\tif (n == 0)\n\t\t\tSystem.out.println(prefix);\n\t\telse {\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tpermuteAnotherWay(prefix + str.charAt(i), str.substring(0, i) + str.substring(i + 1, n));\n\t\t}\n\t}"} {"seed":"public void permuteBySwap(String str){\n\t\tchar[] input = str.toCharArray();\n\t\tint start = 0;\n\t\tint end = str.length();\n\t\tpermuteBySwap(input,start,end);\n\t}"} {"seed":"private void permuteBySwap(char[] input, int start, int end) {\n\t\tif(start == end){\n\t\t\tSystem.out.println(new String(input));\n\t\t}\n\t\telse{\n\t\t\t//swap start and i\n\t\t\tfor(int i=start;i<end;i++){\n\t\t\t\tchar temp = input[start];\n\t\t\t\tinput[start] = input[i];\n\t\t\t\tinput[i] = temp;\n\t\t\t\tpermuteBySwap(input, start+1, end);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t}"} {"seed":"public void permuteWithoutRecursion(String input){\n\t\tchar[] inputChars = input.toCharArray();\n\t\tList output = new ArrayList();\n\t\t//add first character to the output list\n\t\toutput.add(\"\"+inputChars[0]);\n\t\t//loop over the remaining elements in the input array\n\t\tfor(int i=1;i<inputChars.length;i++){\n\t\t\t//get the next char in the input array\n\t\t\tchar next = inputChars[i];\n\t\t\tint sizeOfList = output.size();\n\t\t\t//loop over the list\n\t\t\tfor(int j=0;j<sizeOfList;j++){\n\t\t\t\t//remove current element from list\n\t\t\t\tString str = (String)output.remove(0);\n\t\t\t\tfor(int k=0;k<=str.length();k++){\n\t\t\t\t\t//add the next character between each character in the permuted string\n\t\t\t\t\t//eg: for abc... b is next character. so two string ba and ab will be added to list now\n\t\t\t\t\toutput.add(str.substring(0, k)+next+str.substring(k));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//the output list contains the permuted string\n\t\tSystem.out.println(output);\n\t\t\n\t}"} {"seed":"public static void main(String args[]){\n\t\tStringPermute p = new StringPermute(\"abc\");\n\t\t/*System.out.println(\"Permutation with recursion:\");\n\t\tp.permute();\n\t\tSystem.out.println(\"Permutation without recursion:\");\n\t\tp.permuteWithoutRecursion(\"abc\");\n\t\tSystem.out.println(\"Permute another way\");\n\t\tp.permuteAnotherWay(\"\", \"abc\");*/\n\t\t\n\t\tp.permuteBySwap(\"abc\");\n\t}"} {"seed":"/**\n     * Creates a new instance of itemController\n     *\n     * @return\n     */\npublic List<Articles> getAll() {\n\n        return articlesFacade.findAll();\n    }"} {"seed":"/**\n     * Creates a new instance of itemController\n     *\n     * @return\n     */\npublic int count() {\n\n        return articlesFacade.count();\n    }"} {"seed":"/**\n     * Creates a new instance of itemController\n     *\n     * @return\n     */\npublic String delete(Articles x) {\n\n        articlesFacade.remove(x);\n\n        return null;\n\n    }"} {"seed":"/**\n     * Creates a new instance of itemController\n     *\n     * @return\n     */\npublic String add() {\n\n        Articles y = new Articles();\n        y.setIdArticle(Integer.SIZE);\n        y.setDescription(articleBean.getDescription());\n        y.setInventory(articleBean.getInventory());\n        y.setPrice(articleBean.getPrice());\n       // y.setOwner(articleBean.getOwner());\n        \n//        y.setCategory(articleBean.getCategory());\n//        y.setSubCategory(articleBean.getSubcategory());\n\n\n        articlesFacade.create(y);\n\n        return \"index\";\n    }"} {"seed":"/**\n     * Creates a new instance of itemController\n     *\n     * @return\n     */\npublic String edit(Articles i) {\n        articleBean.setIdArticle(i.getIdArticle());\n        articleBean.setDescription(i.getDescription());\n        articleBean.setInventory(i.getInventory());\n        articleBean.setPrice(i.getPrice());\n\n        return \"update\";\n    }"} {"seed":"/**\n     * Creates a new instance of itemController\n     *\n     * @return\n     */\npublic String save() {\n\n        Articles i = new Articles(articleBean.getIdArticle());\n\n        i.setDescription(articleBean.getDescription());\n        i.setInventory(articleBean.getIdArticle());\n        i.setPrice(articleBean.getPrice());\n\n        articlesFacade.edit(i);\n\n        return \"index\";\n\n    }"} {"seed":"public static void main(String[] args) {\n\t\t\n\t\tFunctionOverloading obj = new FunctionOverloading();\n\t\t//System.out.println(obj.sum(10, 20));\n\t\tSystem.out.println(obj.sum(10, 20, 30));\n\t\t\n\t}"} {"seed":"public static void main(String[] args) {\n\t\t\n\t\t//declarationof array\n\t\t\n//\t\tint[] x;\n//\t\tint y [];\n//\t\tint z[];\n//\t\t//int[4] a; //invalid\n\t\t\n\t\t//2D\n//\t\tint[][] a1;\n//\t\tint [][]a2;\n//\t\tint a3[][];\n//\t\tint[] []a4;\n//\t\tint[] a5[];\n//\t\tint []a6[];\n\t\t\n\t\t//2D\n\t\t//int[] a,b; // a-->1,b-->1\n\t\t//int[] a[],b; // a-->2,b-->1\n\t\t//int[] a[],b[]; // a-->2,b-->2\n\t\t//int[] []a,b; // a-->2,b-->2\n\t\t//int[] []a,b[]; // a-->2,b-->3\n\t\t//int[] a[],[]b; //invalid\n\t\t\n\t\t//3D\n\t\t//int[][][] a; // a-->3\n\t\t//int [][][]a; // a-->3\n\t\t//int[] a[][][]; // a-->3\n\t\t//int[] [][]a; // a-->3\n\t\t//int[] a[][]; // a-->3\n\t\t//int[] []a[]\n\t\t//int[][] []a\n\t\t//int[][] a[]\n\t\t//int [][]a[]\n\t\t//int []a[][]\n\t\t\n//\t\tint[] a=new int[3];\n//\t\tSystem.out.println(a.getClass().getName());//[I\n\n//\t\tint[][] a=new int[3][2];\n//\t\tSystem.out.println(a.getClass().getName());//[[I\n\t\t\n//\t\tdouble[][] a=new double[3][2];\n//\t\tSystem.out.println(a.getClass().getName());//[[D\n\t\t\n\t\t\n//\t\tlong[][] a=new long[3][2];\n//\t\tSystem.out.println(a.getClass().getName());//[[J\n\t\t\n//\t\tbyte[][] a=new byte[3][2];\n//\t\tSystem.out.println(a.getClass().getName());//[[B\n\t\t\n//\t\tboolean[][] a=new boolean[3][2];\n//\t\tSystem.out.println(a.getClass().getName());//[[Z\n\t\t\n//\t\tObject[][] a=new Object[3][2];\n//\t\tSystem.out.println(a.getClass().getName());//[[Ljava.lang.Object;\n\t\t\n\t\t//int[] x = new int[];//invalid\n\t\t//int[] x = new int[2];\n\t\t\n//\t\tint[] x = new int[0];\n//\t\tint[] x = new int[-3];\n//\t\tSystem.out.println(x.length);//NegativeArraySizeException\n\n//\t\tint[] x = new int[10];\n//\t\tint[] xx = new int['A'];\n//\t\txx[64]=110;\n//\t\tSystem.out.println(xx.length+\" \"+xx[64]);\n//\t\t\n//\t\tbyte b = 20;\n//\t\tint[] y = new int[b];\n//\t\tshort s = 30;\n//\t\tint[] z = new int[s];\n\t\t\n\t\t/*\n\t\tbyte-->short-->int-->long-->float-->double\n\t\t\t\t\t\t|\n\t\tchar-------------\n\t\t*/\n//\t\tint[] xxx = new int[2147483647];\n//\t\tSystem.out.println(xxx.length);//OutOfMemoryError\n\t\t\n//\t\tint[] xxx = new int[2147483648];//invalid\n//\t\tSystem.out.println(xxx.length);//out of range\n\t\t\n\t\t\n\t\t/*\n\t\t2D Array\n\t\tMatrix is the 2d array\n\t\tArray of Arrays\n\t\tjava follow array of arrays to create 2d array not matrix way\n\t\t     ........\n\t\ts--> |\t|\t|\n\t\t     ........\n\t\t\t   |   |\n\t\t\t .....  .......\n\t\t\t | | |  | | | |\n\t\t     .....  .......\n\t\t*/\n\t\tint[][] s = new int[2][];\n\t\ts[0]=new int[2];\n\t\ts[1]=new int[3];\n\t\t//[[0, 0], [0, 0, 0]]\n\t\t\n\t\t//3D array\n\t\tint[][][] t = new int[2][][];\n\t\tt[0] = new int[3][];\n\t\tt[0][0] = new int[1];\n\t\tt[0][1] = new int[2];\n\t\tt[0][2] = new int[3];\n\t\t\n\t\tt[1] = new int[2][2];\n\t\t\n//\t\tint[] x = new int[3]; \n//\t\tSystem.out.println(x);\n//\t\tSystem.out.println(x[0]);//classname@hashcode_in_hexadecimalform\n//\t\t\n//\t\tint[][] y = new int[2][3];\n//\t\tSystem.out.println(y);\n//\t\tSystem.out.println(y[0]);\n//\t\tSystem.out.println(y[0][0]);\n\t\t\n//\t\tint[][] y = new int[2][];\n//\t\tSystem.out.println(y);\n//\t\tSystem.out.println(y[0]);\n//\t\tSystem.out.println(y[0][0]);\n\t\t\n\t\tint[] y = new int[6];\n\t\t\n\t\ty[-4]=40;\n\t\t//y[6]=60;\n\t\tSystem.out.println(y);\n\t\tThread\n\t}"} {"seed":"private void setUpPieces(){\n        setPiece(35, dataUtil.blackKing);\n        setPiece(36, dataUtil.whiteRook);\n        setPiece(34, dataUtil.whiteRook);\n        setPiece(43, dataUtil.whiteRook);\n        setPiece(26, dataUtil.whiteRook);\n        setPiece(27, dataUtil.whiteRook);\n        setPiece(28, dataUtil.whiteRook);\n        setPiece(42, dataUtil.whiteRook);\n        setPiece(52, dataUtil.whitePawn);\n        setPiece(4, dataUtil.whitePawn);\n        setPiece(58, dataUtil.blackPawn);\n        setPiece(43, dataUtil.whitePawn);\n        setPiece(23, dataUtil.blackQueen);\n        gridUtil.printGrid(g);\n    }"} {"seed":"private void setPiece(int location, ImageIcon img) {\n        ArrayList<Integer> loc = linkEngineToGui.arrayListToArray(location);\n        int row = loc.get(0);\n        int col = loc.get(1);\n        tiles[row][col].setIcon(img);\n        pieceUtil.addPiece(g, img, location);\n    }"} {"seed":"private boolean isValidMove(int i, int j) {\n        int finalPos = linkEngineToGui.arrayToArrayList(i, j);\n        int currentPos;\n        try {\n            currentPos = pieceTile.piece.location;\n        }catch (NullPointerException e){\n            currentPos = 0;\n        }\n\n        return pieceTile.piece.getLegalMoves(g).contains((currentPos - finalPos) * -1);\n    }"} {"seed":"private void processClick(int i, int j) {\n        if (!isValidMove(i, j)) {\n            pieceTile = null;\n            return;\n        }\n        tiles[pieceTile.row][pieceTile.col].setIcon(null);\n        tiles[i][j].setIcon(pieceTile.img);\n    }"} {"seed":"@Override\n        public void actionPerformed(ActionEvent e) {\n            if(pieceTile == null) {\n                Object source = e.getSource();\n                for (int i = 0; i < 8; i++) {\n                    for (int j = 0; j < 8; j++) {\n                        if (source == tiles[i][j]) {\n                            if(g.emptyPiecesGrid.get(linkEngineToGui.arrayToArrayList(i, j)).alliance == BLACK) {\n                                pieceTile = clickedTile.assignClickedTile(linkEngineToGui.arrayToArrayList(i, j), tiles[i][j]);\n                                try {\n                                    highlightValidMove(pieceTile.piece);\n                                }catch (Exception ex) {}\n                            }else if(g.emptyPiecesGrid.get(linkEngineToGui.arrayToArrayList(i, j)).alliance == WHITE){\n                                pieceTile = clickedTile.assignClickedTile(linkEngineToGui.arrayToArrayList(i, j), tiles[i][j]);\n                                try {\n                                    highlightValidMove(pieceTile.piece);\n                                }catch (Exception ex) {}\n                            }\n                        }\n                    }\n                }\n            }else{\n                Object source = e.getSource();\n                int iLoc=0, jLoc=0;\n                for (int i = 0; i < 8; i++) {\n                    for (int j = 0; j < 8; j++) {\n                        if (source == tiles[i][j]) {\n                            pieceAtDestination = gridUtil.findPieceFromLocation(linkEngineToGui.arrayToArrayList(i, j), g);\n                            processClick(i, j);\n                            iLoc = i;\n                            jLoc = j;\n                            removeHighlight();\n                        }\n                    }\n                }\n                try {\n                    Move move = new Move(linkEngineToGui.arrayToArrayList(iLoc, jLoc), pieceTile.piece);\n                    g.emptyPiecesGrid = move.normalMove(g);\n                    gridUtil.printGrid(g);\n                }catch(Exception exc){}\n                pieceTile = null;\n            }\n        }"} {"seed":"private void highlightValidMove(Piece piece){\n            for(int currentLegalMove : piece.getLegalMoves(g)){\n                int currentLoc = piece.location + currentLegalMove;\n                int row = linkEngineToGui.arrayListToArray(currentLoc).get(0);\n                int col = linkEngineToGui.arrayListToArray(currentLoc).get(1);\n                tiles[row][col].setBackground(Color.GREEN);\n            }\n        }"} {"seed":"private void removeHighlight(){\n            for (int i = 0; i < 8; i++) {\n                for (int j = 0; j < 8; j++) {\n                    if ((i + j) % 2 != 0) {\n                        tiles[i][j].setBackground(tileShade);\n                    }else{\n                        tiles[i][j].setBackground(Color.WHITE);\n                    }\n                }\n            }\n        }"} {"seed":"@Override\n            public void windowClosing(WindowEvent e) {\n                System.exit(0);\n            }"} {"seed":"public static void main(String[] args) {\n        User user=new User();\n        System.out.println(user.toString());\n//        Object obj=new Integer(5);\n//        String str=(String)obj;\n//        System.out.println(str);\n\n    }"} {"seed":"public String getSpeakerName() {\n        return m_speakerName;\n    }"} {"seed":"public String getSpeakerId() {\n        return m_speakerId;\n    }"} {"seed":"public String getTwitterHandle() {\n        return m_twitterHandle;\n    }"} {"seed":"public String getSpeakerDetails() {\n        return m_speakerDetails;\n    }"} {"seed":"}\n\t}\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N=sc.nextInt();\n\t\tint M=sc.nextInt();\n\t\tint[][] map = new int[N][N];\n\t\t\n\t\t//int cR = 0,cC=0; //단 하나 존재하는 치킨집 위치 기억\n\t\tPoint chicken=null;\n\t\tList<Point> houses = new ArrayList<>();\n\t\tfor(int i=0;i<N;i++) {\n\t\t\tfor(int j=0;j<N;j++) {\n\t\t\t\tmap[i][j] = sc.nextInt();\n\t\t\t\tif(map[i][j]==2) {\n//\t\t\t\t\tcR=i;\n//\t\t\t\t\tcC=j;\n\t\t\t\t\tchicken = new Point(i,j);\n\t\t\t\t}\n\t\t\t\telse if(map[i][j]==1)\n\t\t\t\t\thouses.add(new Point(i,j)); //집들 기억\n\t\t\t}\n\t\t}\n\t\t//맵을 다시 순회하면서 집(1)마다 기억했던 cR cC까지의 거리를 구한다\n\t\tint sum=0;\n\t\tfor (int i = 0; i < houses.size(); i++) {\n\t\t\tPoint house ="} {"seed":"@Override\n    public EdgeOfTheDivinity copy() {\n        return new EdgeOfTheDivinity(this);\n    }"} {"seed":"�テントの発行\n\t */\n\tpublic void start(Activity caller, int requestCode) {\n\t\tIntent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);\n\t\tintent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);\n\t\tintent.putExtra(RecognizerIntent.EXTRA_PROMPT, \"なに？\");\n\t\t\n\t\tcaller.startActivityFo"} {"seed":"�け取ったdataから文字列のArrayListを取り出す\n\t */\n\tpublic ArrayList<String> getStringArrayList(Intent data) {\n\t\tretur"} {"seed":"S);\n\t}\n\t\n\t/*\n\t *  onActivityResultが受け取ったdataから一番最初の文字列を取り出す\n\t */\n\tpublic String getString(Intent data) {\n\t\tArrayList<String> result = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);\n\t\tfor(int i=0; i<result.size(); i++) {\n\t\t\tLog.i(\"Mike\", res"} {"seed":"public static void main(String[] args) {\n      \n        System.out.println(\"Пункт №1:\");\n        System.out.println(\"Здравствуй мир\");\n        System.out.println(\"\");\n        System.out.println(\"Пункт №2:\");\n        System.out.println(\"Не будь дураком! Будь тем, чем другие не были.\\n\" +\n        \"Не выходи из комнаты! То есть дай волю мебели\");\n        System.out.println(\"\");\n        System.out.println(\"Пункт №3:\");\n        String fio = \"Решетник Антон Евгеньевич\";\n        String day1 = \"Понедельник\";\n        String day2 = \"Пятница\";\n        short nomer = 1605;\n        byte time = 19;\n        System.out.println(\"�"} {"seed":"@Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        this.doGet(request, response);\n    }"} {"seed":"@Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        //设置编码\n        request.setCharacterEncoding(\"utf-8\");\n        //接收页面的值\n        String id = request.getParameter(\"id\");\n        MaintainService maintainService = new MaintainService();\n        maintainService.deleteOne(id);\n        //跳转\n        request.getRequestDispatcher(\"/List.action\").forward(r"} {"seed":"public String getCompanyCode() {\n        return companyCode;\n    }"} {"seed":"public void setCompanyCode(String newCompanyCode)\n    {\n        companyCode = newCompanyCode;\n    }"} {"seed":"public String getTableSubset() {\n        return tableSubset;\n    }"} {"seed":"public void setTableSubset(String newTableSubset)\n    {\n        tableSubset = newTableSubset;\n    }"} {"seed":"public String getEffectiveDate() {\n        return effectiveDate;\n    }"} {"seed":"public void setEffectiveDate(String newEffectiveDate)\n    {\n        effectiveDate = newEffectiveDate;\n    }"} {"seed":"public String getLobCode() {\n        return lobCode;\n    }"} {"seed":"public void setLobCode(String newLobCode)\n    {\n        lobCode = newLobCode;\n    }"} {"seed":"public String getCostBasisPolVal() {\n        return costBasisPolVal;\n    }"} {"seed":"public void setCostBasisPolVal(String newCostBasisPolVal)\n    {\n        costBasisPolVal = newCostBasisPolVal;\n    }"} {"seed":"public String getPuaImpact() {\n        return puaImpact;\n    }"} {"seed":"public void setPuaImpact(String newPuaImpact)\n    {\n        puaImpact = newPuaImpact;\n    }"} {"seed":"public String getAccumDivImpact() {\n        return accumDivImpact;\n    }"} {"seed":"public void setAccumDivImpact(String newAccumDivImpact)\n    {\n        accumDivImpact = newAccumDivImpact;\n    }"} {"seed":"public String getAccumDivintImp() {\n        return accumDivintImp;\n    }"} {"seed":"public void setAccumDivintImp(String newAccumDivintImp)\n    {\n        accumDivintImp = newAccumDivintImp;\n    }"} {"seed":"public String getAccumDivintWth() {\n        return accumDivintWth;\n    }"} {"seed":"public void setAccumDivintWth(String newAccumDivintWth)\n    {\n        accumDivintWth = newAccumDivintWth;\n    }"} {"seed":"public String getPremiumRedImp() {\n        return premiumRedImp;\n    }"} {"seed":"public void setPremiumRedImp(String newPremiumRedImp)\n    {\n        premiumRedImp = newPremiumRedImp;\n    }"} {"seed":"public String getCashDvdImpact() {\n        return cashDvdImpact;\n    }"} {"seed":"public void setCashDvdImpact(String newCashDvdImpact)\n    {\n        cashDvdImpact = newCashDvdImpact;\n    }"} {"seed":"public String getOneyrTermdivImp() {\n        return oneyrTermdivImp;\n    }"} {"seed":"public void setOneyrTermdivImp(String newOneyrTermdivImp)\n    {\n        oneyrTermdivImp = newOneyrTermdivImp;\n    }"} {"seed":"public String getDivapplToLoans() {\n        return divapplToLoans;\n    }"} {"seed":"public void setDivapplToLoans(String newDivapplToLoans)\n    {\n        divapplToLoans = newDivapplToLoans;\n    }"} {"seed":"public String getDivappltoloansInt() {\n        return divappltoloansInt;\n    }"} {"seed":"public void setDivappltoloansInt(String newDivappltoloansInt)\n    {\n        divappltoloansInt = newDivappltoloansInt;\n    }"} {"seed":"public String getDivappltoPayments() {\n        return divappltoPayments;\n    }"} {"seed":"public void setDivappltoPayments(String newDivappltoPayments)\n    {\n        divappltoPayments = newDivappltoPayments;\n    }"} {"seed":"public String getDivappltoAnnuity() {\n        return divappltoAnnuity;\n    }"} {"seed":"public void setDivappltoAnnuity(String newDivappltoAnnuity)\n    {\n        divappltoAnnuity = newDivappltoAnnuity;\n    }"} {"seed":"public String getTerminalDivs() {\n        return terminalDivs;\n    }"} {"seed":"public void setTerminalDivs(String newTerminalDivs)\n    {\n        terminalDivs = newTerminalDivs;\n    }"} {"seed":"public String getPuaWithdrawals() {\n        return puaWithdrawals;\n    }"} {"seed":"public void setPuaWithdrawals(String newPuaWithdrawals)\n    {\n        puaWithdrawals = newPuaWithdrawals;\n    }"} {"seed":"public String getDvdLoans() {\n        return dvdLoans;\n    }"} {"seed":"public void setDvdLoans(String newDvdLoans)\n    {\n        dvdLoans = newDvdLoans;\n    }"} {"seed":"public String getAccumDvdWth() {\n        return accumDvdWth;\n    }"} {"seed":"public void setAccumDvdWth(String newAccumDvdWth)\n    {\n        accumDvdWth = newAccumDvdWth;\n    }"} {"seed":"public String getPayMecRevDays() {\n        return payMecRevDays;\n    }"} {"seed":"public void setPayMecRevDays(String newPayMecRevDays)\n    {\n        payMecRevDays = newPayMecRevDays;\n    }"} {"seed":"public String getNpayMecRevDays() {\n        return npayMecRevDays;\n    }"} {"seed":"public void setNpayMecRevDays(String newNpayMecRevDays)\n    {\n        npayMecRevDays = newNpayMecRevDays;\n    }"} {"seed":"public String getReinMatChgDays() {\n        return reinMatChgDays;\n    }"} {"seed":"public void setReinMatChgDays(String newReinMatChgDays)\n    {\n        reinMatChgDays = newReinMatChgDays;\n    }"} {"seed":"public String getFlexRidDvdImp() {\n        return flexRidDvdImp;\n    }"} {"seed":"public void setFlexRidDvdImp(String newFlexRidDvdImp)\n    {\n        flexRidDvdImp = newFlexRidDvdImp;\n    }"} {"seed":"public String getReinstatMatlChg() {\n        return reinstatMatlChg;\n    }"} {"seed":"public void setReinstatMatlChg(String newReinstatMatlChg)\n    {\n        reinstatMatlChg = newReinstatMatlChg;\n    }"} {"seed":"public String getEtiExpirMecRev() {\n        return etiExpirMecRev;\n    }"} {"seed":"public void setEtiExpirMecRev(String newEtiExpirMecRev)\n    {\n        etiExpirMecRev = newEtiExpirMecRev;\n    }"} {"seed":"public String getReducePrmWthrawl() {\n        return reducePrmWthrawl;\n    }"} {"seed":"public void setReducePrmWthrawl(String newReducePrmWthrawl)\n    {\n        reducePrmWthrawl = newReducePrmWthrawl;\n    }"} {"seed":"public String getVpwthAccumDivds() {\n        return vpwthAccumDivds;\n    }"} {"seed":"public void setVpwthAccumDivds(String newVpwthAccumDivds)\n    {\n        vpwthAccumDivds = newVpwthAccumDivds;\n    }"} {"seed":"public String getVpwthPaidupAdds() {\n        return vpwthPaidupAdds;\n    }"} {"seed":"public void setVpwthPaidupAdds(String newVpwthPaidupAdds)\n    {\n        vpwthPaidupAdds = newVpwthPaidupAdds;\n    }"} {"seed":"public String getWthFlexPuaDivds() {\n        return wthFlexPuaDivds;\n    }"} {"seed":"public void setWthFlexPuaDivds(String newWthFlexPuaDivds)\n    {\n        wthFlexPuaDivds = newWthFlexPuaDivds;\n    }"} {"seed":"public String getWthFlexAccDivds() {\n        return wthFlexAccDivds;\n    }"} {"seed":"public void setWthFlexAccDivds(String newWthFlexAccDivds)\n    {\n        wthFlexAccDivds = newWthFlexAccDivds;\n    }"} {"seed":"public String getEndYrMecViolatn() {\n        return endYrMecViolatn;\n    }"} {"seed":"public void setEndYrMecViolatn(String newEndYrMecViolatn)\n    {\n        endYrMecViolatn = newEndYrMecViolatn;\n    }"} {"seed":"public void show() {\n\t\tEventQueue.invokeLater(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\thrview window = new hrview();\n\t\t\t\t\twindow.frame.setVisible(true);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}"} {"seed":"private void createEvents() {\n\t\t\n\t}"} {"seed":"private void initComponents() {\n\t\tframe = new JFrame();\n\t\tframe.setTitle(\"School Management System\");\n\t\tframe.setIconImage(Toolkit.getDefaultToolkit().getImage(\"./resources/icons/books.png\"));\n\t\tframe.setBounds(100, 100, 848, 516);\n\t\tframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t\tframe.getContentPane().setLayout(null);\n\t\t\n\t\tJPanel panelHrInfo = new JPanel();\n\t\tpanelHrInfo.setBorder(new LineBorder(new Color(0, 0, 0), 1, true));\n\t\tpanelHrInfo.setBounds(237, 31, 572, 423);\n\t\tframe.getContentPane().add(panelHrInfo);\n\t\t\n\t\tJPanel panelHr = new JPanel();\n\t\tpanelHr.setLayout(null);\n\t\tpanelHr.setBorder(new LineBorder(new Color(0, 0, 0), 1, true));\n\t\tpanelHr.setBounds(27, 31, 191, 423);\n\t\tframe.getContentPane().add(panelHr);\n\t\t\n\t\tJButton btnStaffDirectory = new JButton(\"Staff Directory\");\n\t\tbtnStaffDirectory.setBounds(33, 79, 127, 31);\n\t\tpanelHr.add(btnStaffDirectory);\n\t\t\n\t\tJButton btnStaffAttendance = new JButton(\"Staff Attendance\");\n\t\tbtnStaffAttendance.setBounds(33, 125, 127, 31);\n\t\tpanelHr.add(btnStaffAttendance);\n\t\t\n\t\tJButton btnStaffAttendanceReport = new JButton(\"Attendance Report\");\n\t\tbtnStaffAttendanceReport.setBounds(33, 167, 127, 31);\n\t\tpanelHr.add(btnStaffAttendanceReport);\n\t\t\n\t\tJButton btnLeaveType = new JButton(\"Leave Type\");\n\t\tbtnLeaveType.setBounds(33, 209, 127, 31);\n\t\tpanelHr.add(btnLeaveType);\n\t\t\n\t\tJButton btnDepartment = new JButton(\"Department\");\n\t\tbtnDepartment.setBounds(33, 251, 127, 31);\n\t\tpanelHr.add(btnDepartment);\n\t\t\n\t\tJButton btnDesignation = new JButton(\"Designation\");\n\t\tbtnDesignation.setBounds(33, 293, 127, 31);\n\t\tpanelHr.add(btnDesignation);\n\t\t\n\t\tJLabel lblStudentInformation = new JLabel(\"Human Resource\");\n\t\tlblStudentInformation.setFont(new Font(\"Times New Roman\", Font.BOLD, 18));\n\t\tlblStudentInformation.setBounds(33, 11, 141, 31);\n\t\tpanelHr.add(lblStudentInformation);\n\t\t\n\t\tJSeparator separatorNavigator = new JSeparator();\n\t\tseparatorNavigator.setForeground(Color.BLUE);\n\t\tseparatorNavigator.setBounds(33, 53, 127, 2);\n\t\tpanelHr.add(separatorNavigator);\n\t\t\n\t\tJButton btnApplyLeave = new JButton(\"Apply Leave\");\n\t\tbtnApplyLeave.setBounds(33, 333, 127, 31);\n\t\tpanelHr.add(btnApplyLeave);\n\t\t\n\t\tJButton btnApproveLeave = new JButton(\"Approve Leave\");\n\t\tbtnApproveLeave.setBounds(33, 375, 127, 31);\n\t\tpanelHr.add(btnApproveLeave);\n\t\t\n\t}"} {"seed":"public void run() {\n\t\t\t\ttry {\n\t\t\t\t\thrview window = new hrview();\n\t\t\t\t\twindow.frame.setVisible(true);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}"} {"seed":"public Duration scheduleWithDelay(Runnable connectTast) {\n        \n        // last schedule a while ago?\n        Duration delaySinceLastSchedule = Duration.between(lastSchedule, Instant.now());\n        if (retrySequence.getMaxDelay().multipliedBy(2).minus(delaySinceLastSchedule).isNegative()) {\n            // yes\n            lastDelay = Duration.ZERO;\n        } else {\n            // no\n            lastDelay = retrySequence.nextDelay(lastDelay)\n                                     .orElseThrow(() -> new RuntimeException(\"may retries reached\"));\n        }\n        \n        lastSchedule = Instant.now();\n        ScheduledExceutor.common().schedule(connectTast, lastDelay.toMillis(), TimeUnit.MILLISECONDS);\n        \n        return lastDelay;\n    }"} {"seed":"public Optional<Duration> nextDelay(Duration previous) {\n            return Optional.ofNullable(delayMap.get(previous));\n        }"} {"seed":"public Duration getMaxDelay() {\n            return lastDelay;\n        }"} {"seed":"private String unixToHHMMSS(String unixTime){\n\t\tlong unixSeconds = Long.parseLong(unixTime);\n\t\tDate date = new Date(unixSeconds*1000L);                 // convert seconds to milliseconds\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"HH:mm:ss\"); // date format\n\n\t\tString formattedDate = sdf.format(date);\n\t\treturn formattedDate;\n\t}"} {"seed":"public String getPassengerID(){\n\t\treturn passengerID;\n\t}"} {"seed":"public String getFlightID(){\n\t\treturn flightID;\n\t}"} {"seed":"public String getFrom(){\n\t\treturn from;\n\t}"} {"seed":"public String getTo(){\n\t\treturn to;\n\t}"} {"seed":"String convertArrivalTime(String seconds){\n\t\t//Convert unix epoch time to HH:MM:SS\n\t\treturn new String(seconds);\n\t}"} {"seed":"public String getDeptFAA()\n\t{\n\t\treturn deptFAA;\n\t}"} {"seed":"public String getDest()\n\t{\n\t\treturn destFAA;\n\t}"} {"seed":"public String toString(){\n\t\treturn passengerID + \" \" + to + \" \" + from + \" \" + arrivalTime + \" \" + flightTime + \" mins\";\n\t}"}