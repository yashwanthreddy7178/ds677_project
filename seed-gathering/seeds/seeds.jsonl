{"path":"downloaded/AddCategoryCommand.java","method_name":"exceedLengthLimit","content":"/**\n     * Constructs the command to add a category without a priority.\n     *\n     * @param moduleCode\n     *  The module code of the module to add the category\n     * @param categoryName\n     *  The name of the category\n     */\nprivate boolean exceedLengthLimit() {\n        return categoryName.length() > 15;\n    }"} {"path":"downloaded/ChangeSizeMeasurementPopupRows.java","method_name":"getContainer","content":"/**\n\t * \n\t * @param tableLayoutUtil\n\t */\nprivate TableLayoutPanel getContainer() {\n\t\treturn tableLayoutUtil.getContainer();\n\t}"} {"path":"downloaded/AddCategoryCommand.java","method_name":"execute","content":"/**\n     * Executes the <b>Add Category Command</b> to add a <b>Category</b> into the <b>Category List</b>.\n     *\n     * @return The <b>Command Result</b> of the execution\n     * @see Category\n     * @see CommandResult\n     */\n@Override\n    public CommandResult execute() {\n        if (exceedLengthLimit()) {\n            return new CommandResult(MESSAGE_CATEGORY_EXCEED_LIMIT);\n        }\n        try {\n            Module parentModule = DirectoryTraverser.getModuleDirectory(moduleCode);\n            Category toAdd = new Category(parentModule, categoryName, categoryPriority);\n            parentModule.getCategories().add(toAdd);\n            StorageManager.setIsSave();\n            return new CommandResult(messageAddCategorySuccess(categoryName));\n        } catch (ModuleManager.ModuleNotFoundException e) {\n            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);\n        } catch (CategoryManager.DuplicateCategoryException e) {\n            return new CommandResult(MESSAGE_DUPLICATE_CATEGORY);\n        } catch (IncorrectDirectoryLevelException e) {\n            return new CommandResult(MESSAGE_INCORRECT_DIRECTORY_LEVEL);\n        }\n    }"} {"path":"downloaded/ChangeSizeMeasurementPopupRows.java","method_name":"getValueFromUser","content":"/**\n\t * helper method to interact with the user to get values for the size of the row\n\t * \n\t * @param message\n\t * @return\n\t */\npublic double getValueFromUser(String message, boolean absolute) {\n\t\tString strValue = JOptionPane.showInputDialog(message);\n\t\tdouble value = -100;\n\t\ttry {\n\t\t\tvalue = Double.parseDouble(strValue);\n\t\t} catch (NumberFormatException e) {\n\t\t\t// NUCLEUSINT-281 \n\t\t\treturn -1;\n\t\t} catch (NullPointerException e) {\n\t\t\t// NUCLEUSINT-281\n\t\t\treturn -1;\n\t\t}\n\t\tif (absolute) {\n\t\t\tif (value < InterfaceGuidelines.MINIMUM_SIZE)\n\t\t\t\tvalue = InterfaceGuidelines.MINIMUM_SIZE;\n\n\t\t\tif (cellForEditing.getCellY() == 0) {\n\t\t\t\tif (value < InterfaceGuidelines.MARGIN_TOP)\n\t\t\t\t\tvalue = InterfaceGuidelines.MARGIN_TOP;\n\t\t\t}\n\n\t\t} else {\n\t\t\tif (value < 1)\n\t\t\t\tvalue = 1;\n\t\t\tif (value > 99)\n\t\t\t\tvalue = 99;\n\t\t}\n\n\t\treturn value;\n\t}"} {"path":"downloaded/RootCause.java","method_name":"getDest","content":"/**\n\t * @return the dest\n\t */\npublic int getDest() {\n\t\treturn dest;\n\t}"} {"path":"downloaded/RootCause.java","method_name":"equals","content":"/**\n\t * @param dest the dest to set\n\t */\npublic boolean equals(Object o) {\n\t\tRootCause r = (RootCause)o;\n\t\tif(r.rcAsn == this.rcAsn && r.updateNum == this.updateNum && r.getDest() == this.getDest())\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}"} {"path":"downloaded/RootCause.java","method_name":"toString","content":"/**\n\t * @param dest the dest to set\n\t */\npublic String toString() {\n\t\treturn \"\" + rcAsn + \".\" + updateNum;\n\t}"} {"path":"downloaded/MultiString.java","method_name":"] getLanguag","content":"  /**\n     * Returns the languages array used to construct this object\n     \n  public String[] getLanguages()\n    {\n        return languages;\n   "} {"path":"downloaded/MultiString.java","method_name":"] getValu","content":"  /**\n     * Returns the values array used to construct this object\n     \n  public String[] getValues()\n    {\n        return values;\n   "} {"path":"downloaded/MultiString.java","method_name":"g getVal","content":"  /**\n     * Return the value corresponding to the requested language. The default\n     * value is returned if a value in the requested language is not available\n     * or <code>language</code> is null.\n     \n  public String getValue(String language)\n    {\n        // Create the hashtable if not created during construction. This happens\n        // when the object is created via de-serialization.\n        if (mapping == null) createHashtable();\n\n        // Lookup the value\n        String value = null;\n        if (language != null) value = (String) mapping.get(language);\n        return (value == null) ? values[0] : value;\n   "} {"path":"downloaded/OpenApiInterceptor.java","method_name":"*/\n    @O","content":"/**\n     *  Token数据\n     * @param httpServletRequest 请求\n     * @param httpServletResponse 返回\n     * @param object 其他数据\n     * @return 验证消息\n     * @t\n Exception 异常信息\n     */\n    @Override\n    public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object object) throws Exception {\n        String key = httpServletRequest.getHeader(\"key\");\n        String nonce = httpServletRequest.getHeader(\"nonce\");\n        String timestamp = httpServletRequest.getHeader(\"timestamp\");\n        String sign = httpServletRequest.getHeader(\"sign\");\n        // 跨域的预请求OPTIONS 不做限制\n        if (RequestMethod.OPTIONS.name().equals(httpServletRequest.getMethod())) {\n            return true;\n        }\n        // 如果不是映射到方法直接通过\n        if (!(object instanceof HandlerMethod)) {\n            return true;\n        }\n\n        Boolean ret = this.verify(key,nonce, timestamp, sign);\n        if(!ret){\n            thro"} {"path":"downloaded/ClusterType.java","method_name":"getCacheJndiName","content":"/**\n     * Gets the value of the cacheJndiName property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\npublic String getCacheJndiName() {\n        return cacheJndiName;\n    }"} {"path":"downloaded/InventoryImpl.java","method_name":"bondCount","content":"/**\n     * counts the given bond product of the specific account\n     *\n     * @param account\n     * @param bondname\n     * @return\n     */\npublic int bondCount(String id, String bondname) {\n    \treturn accountFactory.bondCount(id, bondname);\n    }"} {"path":"downloaded/InventoryImpl.java","method_name":"stockCount","content":"/**\n     * counts the given stock product of the specific account\n     *\n     * @param account\n     * @param stockname\n     * @return\n     */\npublic int stockCount(String id, String stockname) {\n    \treturn accountFactory.stockCount(id, stockname);\n    }"} {"path":"downloaded/InventoryImpl.java","method_name":"bondCount","content":"/**\n     * counts the given bond product on all accounts\n     *\n     * @param bondname\n     * @return\n     */\npublic int bondCount(String bondname) {\n        return accountFactory.allBondCount(bondname);\n    }"} {"path":"downloaded/InventoryImpl.java","method_name":"stockCount","content":"/**\n     * counts the given stock product on all accounts\n     *\n     * @param stockname\n     * @return\n     */\npublic int stockCount(String stockname) {\n        return accountFactory.allStockCount(stockname);\n    }"} {"path":"downloaded/AnalizedEntityImpl.java","method_name":"getSimpleName","content":"/** The field. */\npublic String getSimpleName() {\n        return simpleName;\n    }"} {"path":"downloaded/AnalizedEntityImpl.java","method_name":"getFields","content":"/**\n     * Sets the simple name.\n     *\n     * @param simpleName the new simple name\n     */\npublic Collection<Field> getFields() {\n        return fields;\n    }"} {"path":"downloaded/ShiroManager.java","method_name":"cacheManager","content":"/**\n     *  ------------------ cache ----------------------\n     */\n@Bean(name = \"shiroCacheManager\")\n    @ConditionalOnMissingBean\n    @ConditionalOnClass(Cache.class)\n    public RedisCacheManager cacheManager(@Autowired Cache cache) {\n        RedisCacheManager redisCacheManager = new RedisCacheManager(cache);\n        return redisCacheManager;\n    }"} {"path":"downloaded/ShiroManager.java","method_name":"InitCache","content":"/**\n     *  ------------------ cache ----------------------\n     */\n@Bean\n    @ConditionalOnMissingBean\n    public Cache InitCache(@Autowired RedisTemplate redisTemplate) {\n        return new RedisCache(redisTemplate);\n    }"} {"path":"downloaded/Vector.java","method_name":"size","content":"/**\n     * Returns the number of elements in the Vector\n     *\n     * @return     count of the elements in Vector\n     */\npublic int size()\n    {\n        return count;\n    }"} {"path":"downloaded/Vector.java","method_name":"isEmpty","content":"/**\n     * Checks whether the vector is empty.\n     *\n     * @return     true if the vector is empty\n     */\npublic boolean isEmpty()\n    {\n        if (count > 0) return false;\n          else return true;\n    }"} {"path":"downloaded/Vector.java","method_name":"clone","content":"/**\n     * Returns a clone of this vector.\n     *\n     * @return     vector\n     */\npublic Vector clone()\n    {\n        Vector<O> v = new Vector<O>();\n            \n        VectorItem<O> vi = first;\n        while (vi != null)\n        {\n            v.pushBack (vi.getObject());\n            vi = vi.getNext();\n        }\n        \n        return v;\n    }"} {"path":"downloaded/Vector.java","method_name":"first","content":"/**\n     * Returns the first element\n     *\n     * @return     object\n     */\npublic O first()\n    {\n        if (isEmpty()) return null;        \n        return first.getObject();\n    }"} {"path":"downloaded/Vector.java","method_name":"firstVectorItem","content":"/**\n     * Returns the first element\n     *\n     * @return     VectorItem\n     */\npublic VectorItem<O> firstVectorItem()\n    {\n        if (isEmpty()) return null;        \n        return first;\n    }"} {"path":"downloaded/Vector.java","method_name":"last","content":"/**\n     * Returns the last element\n     *\n     * @return     object\n     */\npublic O last()\n    {\n        if (isEmpty()) return null;\n        return last.getObject();\n    }"} {"path":"downloaded/Vector.java","method_name":"popBack","content":"/**\n     * Removes and returns the last element of the vector.\n     *\n     * @return     object\n     */\npublic O popBack()\n    {\n        if (!isEmpty())\n        {\n            VectorItem<O> l = last;\n            last = last.getPrevious();\n\n            count--;\n            if (isEmpty()) first = null;\n              else last.setNext(null);\n            return l.getObject();\n        } else\n            return null;\n        \n    }"} {"path":"downloaded/Vector.java","method_name":"popFront","content":"/**\n     * Removes and returns the first element of the vector.\n     *\n     * @return     object\n     */\npublic O popFront()\n    {\n        if (!isEmpty())\n        {\n            VectorItem<O> l = first;\n            first = first.getNext();\n            \n            count--;\n            if (isEmpty()) last = null;\n              else first.setPrevious(null);\n            \n            return l.getObject();\n        } else\n          return null;\n    }"} {"path":"downloaded/Vector.java","method_name":"get","content":"/**\n     * Returns object at index given.\n     *\n     * @param  index   index of the element\n     * @return     object\n     */\npublic O get(int index)\n    {\n        if (index >= count || index < 0) return null;\n        \n        if (index > count/2)\n        {\n            //search from the end\n            VectorItem<O> vi = last;\n            for (int i=count-1;i>index;i--)\n            {\n                vi = vi.getPrevious();\n            }\n            return vi.getObject();            \n            \n        } else\n        {\n            //search from the beginning\n            VectorItem<O> vi = first;\n            \n            for (int i=0;i<index;i++)\n            {\n                vi = vi.getNext();\n            }\n            return vi.getObject();            \n        }\n    }"} {"path":"downloaded/Vector.java","method_name":"getVectorItem","content":"/**\n     * Returns the VectorItem at index given.\n     *\n     * @param  index   index of the element\n     * @return     Object\n     */\npublic VectorItem<O> getVectorItem(int index)\n    {\n        if (index >= count || index < 0) return null;\n        \n        if (index > count/2)\n        {\n            //search from the end\n            VectorItem<O> vi = last;\n            for (int i=count-1;i>index;i--)\n            {\n                vi = vi.getPrevious();\n            }\n            return vi;            \n            \n        } else\n        {\n            //search from the beginning\n            VectorItem<O> vi = first;\n            \n            for (int i=0;i<index;i++)\n            {\n                vi = vi.getNext();\n            }\n            return vi;            \n        }\n    }"} {"path":"downloaded/Vector.java","method_name":"set","content":"/**\n     * Sets object to the vector at position given.\n     *\n     * @param  o   object\n     * @param  index position\n     * @return true if operation was successful\n     */\npublic boolean set(O o, int index)\n    {\n        if (index >= count || index < 0) return false;\n        \n        VectorItem<O> vi = first;\n        \n        for (int i=0;i<=index-1;i++)\n        {\n            vi = vi.getNext();\n        }\n        \n        vi.setObject(o);\n        return true;\n        \n    }"} {"path":"downloaded/Vector.java","method_name":"indexOf","content":"/**\n     * Returns the index of first occurance of given object.\n     *\n     * @param  o    object to search for\n     * @return     index of the found object or -1 \n     */\npublic int indexOf(O o)\n    {\n        VectorItem<O> vi = first;\n        \n        for (int i=0;i<=count-1;i++)\n        {\n            if (vi.getObject().equals(o)) return i;\n            vi = vi.getNext();\n        }\n        return -1;\n    }"} {"path":"downloaded/Vector.java","method_name":"insertAt","content":"/**\n     * Inserts object given to the position given in Vector.\n     *\n     * @param  index    index where to insert\n     * @param  o        object to insert\n     * @return     true if successful\n     */\npublic boolean insertAt(int index, O o)\n    {\n        if (index < 0 || index > size()) return false; //out of range\n        if (index == size()) //last\n        {\n            pushBack (o);\n            return true;\n        } else if (index == 0)\n        {\n            pushFront (o);\n            return true;\n        } else \n        {\n            VectorItem<O> before, after;\n            before = getVectorItem(index-1);\n            after = getVectorItem(index);\n                        \n            VectorItem<O> vi = new VectorItem<O> (o,before,after);\n            before.setNext(vi);\n            after.setPrevious(vi);\n            return true;\n        }        \n    }"} {"path":"downloaded/Vector.java","method_name":"insertAfter","content":"/**\n     * Inserts the object given after the other given object.\n     *\n     * @param  where    object after which new object should be inserted\n     * @param  what     object to insert\n     * @return     true if successful\n     */\npublic boolean insertAfter(O where, O what)\n    {\n        return insertAt(indexOf(where)+1,what);\n    }"} {"path":"downloaded/Vector.java","method_name":"insertBefore","content":"/**\n     * Inserts the object given before the other given object.\n     *\n     * @param  where    object before which new object should be inserted\n     * @param  what     object to insert\n     * @return     true if successful\n     */\npublic boolean insertBefore(O where, O what)\n    {\n        return insertAt(indexOf(where)-1,what);\n    }"} {"path":"downloaded/Vector.java","method_name":"before","content":"/**\n     * Returns object which is situated in the Vector just\n     * before the object given or null\n     *\n     * @param  a    object to find\n     * @return     object before the object given\n     */\npublic O before(O a)\n    {\n        int index = indexOf(a);\n        if (index != -1 && index != 0) //is defined and not first\n          return get(index-1);\n        else return null;\n    }"} {"path":"downloaded/Vector.java","method_name":"after","content":"/**\n     * Returns object which is situated in the Vector just\n     * after the object given or null\n     *\n     * @param  a    object to find\n     * @return     object before the object given\n     */\npublic O after(O a)\n    {\n        int index = indexOf(a);\n        if (index != -1 && index != size()-1) //is defined and not last\n          return get(index+1);\n        else return null;\n    }"} {"path":"downloaded/Vector.java","method_name":"toArray","content":"/**\n     * Returns the content of the vector in an array\n     *\n     * @return     array of objects\n     */\npublic O[] toArray()\n    {\n\n        @SuppressWarnings(\"unchecked\")\n        O[] a = (O[]) new Object[count];\n        \n        VectorItem<O> vi = first;\n        \n        for (int i=0;i<=count-1;i++)\n        {\n            a[i] = vi.getObject();\n            vi = vi.getNext();\n        }\n\n        return a;       \n    }"} {"path":"downloaded/Vector.java","method_name":"toIntArray","content":"/**\n     * Returns the content of the vector in an array of Integers\n     *\n     * @return     array of int\n     */\npublic int[] toIntArray()\n    {\n        int[] a = new int[count];\n        \n        VectorItem<O> vi = first;\n        \n        for (int i=0;i<=count-1;i++)\n        {\n            a[i] = (Integer) vi.getObject();\n            vi = vi.getNext();\n        }\n\n        return a;       \n    }"} {"path":"downloaded/Vector.java","method_name":"toLongArray","content":"/**\n     * Returns the content of the vector in an array of Integers\n     *\n     * @return     array of int\n     */\npublic long[] toLongArray()\n    {\n        long[] a = new long[count];\n        \n        VectorItem<O> vi = first;\n        \n        for (int i=0;i<=count-1;i++)\n        {\n            a[i] = (Long) vi.getObject();\n            vi = vi.getNext();\n        }\n\n        return a;       \n    }"} {"path":"downloaded/Vector.java","method_name":"toItemArray","content":"/**\n     * Returns the content of the vector in an array of Items\n     *\n     * @return     array of Item\n     */\npublic Item[] toItemArray()\n    {\n        Item[] a = new Item[count];\n        \n        VectorItem<O> vi = first;\n        \n        for (int i=0;i<=count-1;i++)\n        {\n            a[i] = (Item) vi.getObject();\n            vi = vi.getNext();\n        }\n\n        return a;       \n    }"} {"path":"downloaded/Vector.java","method_name":"toDistributorArray","content":"/**\n     * Returns the content of the vector in an array of Distributors\n     *\n     * @return     array of Distributor\n     */\npublic Distributor[] toDistributorArray()\n    {\n        Distributor[] a = new Distributor[count];\n        \n        VectorItem<O> vi = first;\n        \n        for (int i=0;i<=count-1;i++)\n        {\n            a[i] = (Distributor) vi.getObject();\n            vi = vi.getNext();\n        }\n\n        return a;       \n    }"} {"path":"downloaded/Vector.java","method_name":"toStringArray","content":"/**\n     * Returns the content of the vector in an array of Strings\n     *\n     * @return     array of Strings\n     */\npublic String[] toStringArray()\n    {\n        String[] a = new String[count];\n        \n        VectorItem<O> vi = first;\n        \n        for (int i=0;i<=count-1;i++)\n        {\n            a[i] = (String) vi.getObject();\n            vi = vi.getNext();\n        }\n\n        return a;       \n    }"} {"path":"downloaded/Vector.java","method_name":"toString","content":"/**\n     * Returns the content of the vector in a String\n     *\n     * @return     string \n     */\npublic String toString()\n    {\n        String s = new String();\n        \n        VectorItem<O> vi = first;\n        \n        for (int i=0;i<=count-1;i++)\n        {\n            s += vi.getObject().toString()+ Static.defaultSeparator;\n            vi = vi.getNext();\n        }\n        \n        return s;\n    }"} {"path":"downloaded/Short2DPoint.java","method_name":"hashCode","content":"/**\n     * hash the two short coordinates into an integer hash code\n     * @return the y coordinate shifted 16 bits to the left plus the x coordinate\n     */\n@Override\n    public int hashCode() {\n        return Short.toUnsignedInt(x) + (Short.toUnsignedInt(y)<<16);\n    }"} {"path":"downloaded/Short2DPoint.java","method_name":"equals","content":"/**\n     * check if two Short2DPoint reference the same coordinates\n     * @param obj the object to compare to\n     * @return whether the objects are the same\n     */\n@Override\n    public boolean equals(Object obj) {\n        //if we compare a point to itself\n        if (this == obj) {\n            //it's the same\n            return true;\n        }\n        //it's not null\n        if (obj == null) {\n            return false;\n        }\n        //if it's not a Short2DPoint\n        if (!getClass().isInstance(obj)) {\n            //it's not the same\n            return false;\n        }\n        // convert the object into a Short2DPoint\n        final Short2DPoint other = (Short2DPoint) obj;\n        //if the x coordinate is different\n        if (this.x != other.x) {\n            //it's not the same\n            return false;\n        }\n        //if the x coordinate is different\n        if (this.y != other.y) {\n            //it's not the same\n            return false;\n        }\n        //they are the same\n        return true;\n    }"} {"path":"downloaded/ComposedIdKey.java","method_name":"equals","content":"/**\n\t * Constructor accepting same input as generated by toString().\n\t */\npublic boolean equals(Object obj) {\n\t\tif (obj == this) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!(obj instanceof ComposedIdKey)) {\n\t\t\treturn false;\n\t\t}\n\t\tComposedIdKey c = (ComposedIdKey) obj;\n\n\t\treturn Id_Event.equals(c.Id_Event) && Id_User.equals(c.Id_User);\n\t}"} {"path":"downloaded/ComposedIdKey.java","method_name":"hashCode","content":"/**\n\t * Constructor accepting same input as generated by toString().\n\t */\npublic int hashCode() {\n\t\treturn this.Id_Event.hashCode() ^ this.Id_User.hashCode();\n\t}"} {"path":"downloaded/ComposedIdKey.java","method_name":"toString","content":"/**\n\t * Constructor accepting same input as generated by toString().\n\t */\npublic String toString() {\n\t\t// Give output expected by String constructor\n\t\treturn this.getClass().getName() + \"::\" + this.Id_Event + \"::\"\n\t\t\t\t+ this.Id_User;\n\t}"} {"path":"downloaded/StructuredPostalAddress.java","method_name":"getRel","content":"/** The context for the address use. */\npublic String getRel() {\n    return rel;\n  }"} {"path":"downloaded/StructuredPostalAddress.java","method_name":"getLabel","content":"/** The context for the address use. */\npublic String getLabel() {\n    return label;\n  }"} {"path":"downloaded/StructuredPostalAddress.java","method_name":"getUsage","content":"/** The context for the address use. */\npublic String getUsage() {\n    return usage;\n  }"} {"path":"downloaded/StructuredPostalAddress.java","method_name":"getMailClass","content":"/** The context for the address use. */\npublic String getMailClass() {\n    return mailClass;\n  }"} {"path":"downloaded/StructuredPostalAddress.java","method_name":"isPrimary","content":"/** The context for the address use. */\npublic boolean isPrimary() {\n    return primary;\n  }"} {"path":"downloaded/StructuredPostalAddress.java","method_name":"getAgent","content":"/** The context for the address use. */\npublic String getAgent() {\n    return Agent;\n  }"} {"path":"downloaded/StructuredPostalAddress.java","method_name":"getCity","content":"/** The context for the address use. */\npublic String getCity() {\n    return City;\n  }"} {"path":"downloaded/StructuredPostalAddress.java","method_name":"getCountry","content":"/** The context for the address use. */\npublic String getCountry() {\n    return Country;\n  }"} {"path":"downloaded/StructuredPostalAddress.java","method_name":"getFormattedAddress","content":"/** The context for the address use. */\npublic String getFormattedAddress() {\n    return FormattedAddress;\n  }"} {"path":"downloaded/StructuredPostalAddress.java","method_name":"getHouseName","content":"/** The context for the address use. */\npublic String getHouseName() {\n    return HouseName;\n  }"} {"path":"downloaded/StructuredPostalAddress.java","method_name":"getNeighborhood","content":"/** The context for the address use. */\npublic String getNeighborhood() {\n    return Neighborhood;\n  }"} {"path":"downloaded/StructuredPostalAddress.java","method_name":"getPoBox","content":"/** The context for the address use. */\npublic String getPoBox() {\n    return PoBox;\n  }"} {"path":"downloaded/StructuredPostalAddress.java","method_name":"getPostCode","content":"/** The context for the address use. */\npublic String getPostCode() {\n    return PostCode;\n  }"} {"path":"downloaded/StructuredPostalAddress.java","method_name":"getRegion","content":"/** The context for the address use. */\npublic String getRegion() {\n    return Region;\n  }"} {"path":"downloaded/StructuredPostalAddress.java","method_name":"getStreet","content":"/** The context for the address use. */\npublic String getStreet() {\n    return Street;\n  }"} {"path":"downloaded/StructuredPostalAddress.java","method_name":"getSubregion","content":"/** The context for the address use. */\npublic String getSubregion() {\n    return Subregion;\n  }"} {"path":"downloaded/Game.java","method_name":"getCurrentPlayer","content":"/**\n\t * Get the char of the player who will be moving next.\n\t * \n\t * @return 'X', 'O', or '\\0' if the game is finished\n\t */\npublic char getCurrentPlayer() {\n\t\treturn currentPlayer;\n\t}"} {"path":"downloaded/Game.java","method_name":"isFinished","content":"/**\n\t * Check if the game is complete.\n\t * \n\t * @return true if the game is finished, false otherwise\n\t */\npublic boolean isFinished() {\n\t\tif ((player1_moves | player2_moves) == COMPLETE) {\n\t\t\tfinished = true;\n\t\t\tcurrentPlayer = '\\0';\n\t\t}\n\t\tfor (int i : winning_cases) {\n\t\t\tif ((player1_moves & i) == i) {\n\t\t\t\twinner = 'X';\n\t\t\t\tfinished = true;\n\t\t\t} else if ((player2_moves & i) == i) {\n\t\t\t\twinner = 'O';\n\t\t\t\tfinished = true;\n\t\t\t}\n\t\t}\n\t\treturn finished;\n\t}"} {"path":"downloaded/Game.java","method_name":"occupiedBy","content":"/**\n\t * Returns the player who occupies a space\n\t * \n\t * @param i\n\t *            the row coordinate\n\t * @param j\n\t *            the column coordinate\n\t * @return the character that occupies the given spot\n\t */\npublic char occupiedBy(int i, int j) {\n\t\tint index = i * 3 + j;\n\t\tint moves = player1_moves >> index;\n\t\tif ((moves & 1) == 1)\n\t\t\treturn 'X';\n\n\t\tmoves = player2_moves >> index;\n\t\tif ((moves & 1) == 1)\n\t\t\treturn 'O';\n\n\t\treturn '\\0';\n\t}"} {"path":"downloaded/Game.java","method_name":"isOccupied","content":"/**\n\t * Tests to see if a space is occupied\n\t * \n\t * @param i\n\t *            the row coordinate\n\t * @param j\n\t *            the column coordinate\n\t * @return true if the given spot is occupied, false otherwise\n\t */\npublic boolean isOccupied(int i, int j) {\n\t\tint index = i * 3 + j;\n\t\tint all_moves = this.player1_moves | this.player2_moves;\n\n\t\tall_moves >>= index;\n\t\treturn (all_moves & 1) == 1;\n\t}"} {"path":"downloaded/Game.java","method_name":"toMatrix","content":"/**\n\t * Get a 2D character matrix of the current game\n\t * \n\t * @return a 2D char matrix of 'X', 'O', and '\\0'\n\t */\npublic char[][] toMatrix() {\n\t\tint tmp1 = this.player1_moves;\n\t\tint tmp2 = this.player2_moves;\n\n\t\tchar[][] matrix = new char[3][3];\n\t\tfor (int n = 0; n < 9; n++) {\n\t\t\tint i = n / 3;\n\t\t\tint j = n % 3;\n\t\t\tif ((tmp1 & 1) == 1)\n\t\t\t\tmatrix[i][j] = 'X';\n\t\t\telse if ((tmp2 & 1) == 1)\n\t\t\t\tmatrix[i][j] = 'O';\n\t\t\ttmp1 >>= 1;\n\t\t\ttmp2 >>= 1;\n\t\t}\n\n\t\treturn matrix;\n\t}"} {"path":"downloaded/Game.java","method_name":"toString","content":"/**\n\t * A 3-line string representation of the current game.\n\t * \n\t * @return a String consisting of 'X', 'O', and '-' with newlines every 3\n\t *         chars\n\t */\npublic String toString() {\n\t\tString r = \"\";\n\t\tchar[][] a = toMatrix();\n\t\tfor (int i = 0; i < 3; i++) {\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tif (a[i][j] == '\\0')\n\t\t\t\t\tr += \"-\";\n\t\t\t\telse\n\t\t\t\t\tr += a[i][j];\n\t\t\t}\n\t\t\tr += \"\\n\";\n\t\t}\n\t\treturn r.substring(0, r.length() - 1);\n\t}"} {"path":"downloaded/Game.java","method_name":"getWinner","content":"/**\n\t * Return the character that has won the game.\n\t * \n\t * @return 'X', 'O', or '\\0' if there is no winner\n\t */\npublic char getWinner() {\n\t\treturn winner;\n\t}"} {"path":"downloaded/FactGroup.java","method_name":"evaluating","content":"/**\n\t * this method will evaluate all Facts in group and set <code>evaluated</code> to <code>true</code>.\n\t *\n\t * @param pattern the input pattern.\n\t * @return the Instance of Callee.\n\t * @see org.yetiz.service.rulengine.core.Evaluatable\n\t */\npublic FactGroup evaluating(Pattern pattern) {\n\t\tfor (Iterator<Fact> iterator = facts.iterator(); iterator.hasNext(); ) {\n\t\t\titerator.next().evaluate(pattern);\n\t\t}\n\t\tevaluated = true;\n\t\treturn this;\n\t}"} {"path":"downloaded/FactGroup.java","method_name":"add","content":"/**\n\t * this method will evaluate all Facts in group and set <code>evaluated</code> to <code>true</code>.\n\t *\n\t * @param pattern the input pattern.\n\t * @return the Instance of Callee.\n\t * @see org.yetiz.service.rulengine.core.Evaluatable\n\t */\npublic <T extends FactGroup> T add(Fact fact) {\n\t\tevaluated = false;\n\t\tfacts.add(fact);\n\t\treturn ((T) this);\n\t}"} {"path":"downloaded/FactGroup.java","method_name":"remove","content":"/**\n\t * this method will evaluate all Facts in group and set <code>evaluated</code> to <code>true</code>.\n\t *\n\t * @param pattern the input pattern.\n\t * @return the Instance of Callee.\n\t * @see org.yetiz.service.rulengine.core.Evaluatable\n\t */\npublic <T extends FactGroup> T remove(int index) {\n\t\tevaluated = false;\n\t\tfacts.remove(index);\n\t\treturn ((T) this);\n\t}"} {"path":"downloaded/FactGroup.java","method_name":"getFacts","content":"/**\n\t * this method will evaluate all Facts in group and set <code>evaluated</code> to <code>true</code>.\n\t *\n\t * @param pattern the input pattern.\n\t * @return the Instance of Callee.\n\t * @see org.yetiz.service.rulengine.core.Evaluatable\n\t */\npublic List<Fact> getFacts() {\n\t\treturn facts;\n\t}"} {"path":"downloaded/MateriasHasEspacioHasHorariosPK.java","method_name":"getMateriasIdmaterias","content":"/**\n\t * \n\t */\npublic int getMateriasIdmaterias() {\n        return materiasIdmaterias;\n    }"} {"path":"downloaded/MateriasHasEspacioHasHorariosPK.java","method_name":"getEspacioHasHorariosEspacioIdespacio","content":"/**\n\t * \n\t */\npublic int getEspacioHasHorariosEspacioIdespacio() {\n        return espacioHasHorariosEspacioIdespacio;\n    }"} {"path":"downloaded/MateriasHasEspacioHasHorariosPK.java","method_name":"getEspacioHasHorariosHorariosIdhorarios","content":"/**\n\t * \n\t */\npublic int getEspacioHasHorariosHorariosIdhorarios() {\n        return espacioHasHorariosHorariosIdhorarios;\n    }"} {"path":"downloaded/MateriasHasEspacioHasHorariosPK.java","method_name":"hashCode","content":"/**\n\t * \n\t */\n@Override\n    public int hashCode() {\n        int hash = 0;\n        hash += (int) materiasIdmaterias;\n        hash += (int) espacioHasHorariosEspacioIdespacio;\n        hash += (int) espacioHasHorariosHorariosIdhorarios;\n        return hash;\n    }"} {"path":"downloaded/MateriasHasEspacioHasHorariosPK.java","method_name":"equals","content":"/**\n\t * \n\t */\n@Override\n    public boolean equals(Object object) {\n        // TODO: Warning - this method won't work in the case the id fields are not set\n        if (!(object instanceof MateriasHasEspacioHasHorariosPK)) {\n            return false;\n        }\n        MateriasHasEspacioHasHorariosPK other = (MateriasHasEspacioHasHorariosPK) object;\n        if (this.materiasIdmaterias != other.materiasIdmaterias) {\n            return false;\n        }\n        if (this.espacioHasHorariosEspacioIdespacio != other.espacioHasHorariosEspacioIdespacio) {\n            return false;\n        }\n        if (this.espacioHasHorariosHorariosIdhorarios != other.espacioHasHorariosHorariosIdhorarios) {\n            return false;\n        }\n        return true;\n    }"} {"path":"downloaded/MateriasHasEspacioHasHorariosPK.java","method_name":"toString","content":"/**\n\t * \n\t */\n@Override\n    public String toString() {\n        return \"com.uisek.inscripciones.ec.entities.MateriasHasEspacioHasHorariosPK[ materiasIdmaterias=\" + materiasIdmaterias + \", espacioHasHorariosEspacioIdespacio=\" + espacioHasHorariosEspacioIdespacio + \", espacioHasHorariosHorariosIdhorarios=\" + espacioHasHorariosHorariosIdhorarios + \" ]\";\n    }"} {"path":"downloaded/RepeatableSampler.java","method_name":"repeatableSample","content":"/**\n   * Returns <code>sampleSize</code> values from the first <code>collectionSize</code>\n   * locations of <code>collection</code>, chosen using\n   * the <code>TRAVERSAL</code> algorithm. The sample values are not sorted.\n   * @param collection The values from which a sample is wanted.\n   * @param collectionSize The number of values (from the first) from which to draw the sample.\n   * @param sampleSize The number of values to return.\n   * @return An array of values chosen from the collection.\n   * @see Algorithm#TRAVERSAL\n   */\nprivate static int[] repeatableSample(ScoredDocIDs collection,\n      int collectionSize, int sampleSize)\n  throws IOException {\n    return repeatableSample(collection, collectionSize,\n        sampleSize, Algorithm.HASHING, Sorted.NO);\n  }"} {"path":"downloaded/RepeatableSampler.java","method_name":"repeatableSample","content":"/**\n   * Returns <code>sampleSize</code> values from the first <code>collectionSize</code>\n   * locations of <code>collection</code>, chosen using <code>algorithm</code>.\n   * @param collection The values from which a sample is wanted.\n   * @param collectionSize The number of values (from the first) from which to draw the sample.\n   * @param sampleSize The number of values to return.\n   * @param algorithm Which algorithm to use.\n   * @param sorted Sorted.YES to sort the sample values in ascending order before returning;\n   * Sorted.NO to return them in essentially random order.\n   * @return An array of values chosen from the collection.\n   */\nprivate static int[] repeatableSample(ScoredDocIDs collection,\n      int collectionSize, int sampleSize,\n      Algorithm algorithm, Sorted sorted)\n  throws IOException {\n    if (collection == null) {\n      throw new IOException(\"docIdSet is null\");\n    }\n    if (sampleSize < 1) {\n      throw new IOException(\"sampleSize < 1 (\" + sampleSize + \")\");\n    }\n    if (collectionSize < sampleSize) {\n      throw new IOException(\"collectionSize (\" + collectionSize + \") less than sampleSize (\" + sampleSize + \")\");\n    }\n    int[] sample = new int[sampleSize];\n    long[] times = new long[4];\n    if (algorithm == Algorithm.TRAVERSAL) {\n      sample1(collection, collectionSize, sample, times);\n    } else if (algorithm == Algorithm.HASHING) {\n      sample2(collection, collectionSize, sample, times);\n    } else {\n      throw new IllegalArgumentException(\"Invalid algorithm selection\");\n    }\n    if (sorted == Sorted.YES) {\n      Arrays.sort(sample);\n    }\n    if (returnTimings) {\n      times[3] = System.currentTimeMillis();\n      if (logger.isLoggable(Level.FINEST)) {\n        logger.finest(\"Times: \" + (times[1] - times[0]) + \"ms, \"\n            + (times[2] - times[1]) + \"ms, \" + (times[3] - times[2])+\"ms\");\n      }\n    }\n    return sample;\n  }"} {"path":"downloaded/RepeatableSampler.java","method_name":"findGoodStepSize","content":"/**\n   * Returns a value which will allow the caller to walk\n   * a collection of <code>collectionSize</code> values, without repeating or missing\n   * any, and spanning the collection from beginning to end at least once with\n   * <code>sampleSize</code> visited locations. Choosing a value\n   * that is relatively prime to the collection size ensures that stepping by that size (modulo\n   * the collection size) will hit all locations without repeating, eliminating the need to\n   * track previously visited locations for a \"without replacement\" sample. Starting with the\n   * square root of the collection size ensures that either the first or second prime tried will\n   * work (they can't both divide the collection size). It also has the property that N steps of\n   * size N will span a collection of N**2 elements once. If the sample is bigger than N, it will\n   * wrap multiple times (without repeating). If the sample is smaller, a step size is chosen\n   * that will result in at least one spanning of the collection.\n   * \n   * @param collectionSize The number of values in the collection to be sampled.\n   * @param sampleSize The number of values wanted in the sample.\n   * @return A good increment value for walking the collection.\n   */\nprivate static int findGoodStepSize(int collectionSize, int sampleSize) {\n    int i = (int) Math.sqrt(collectionSize);\n    if (sampleSize < i) {\n      i = collectionSize / sampleSize;\n    }\n    do {\n      i = findNextPrimeAfter(i);\n    } while (collectionSize % i == 0);\n    return i;\n  }"} {"path":"downloaded/RepeatableSampler.java","method_name":"findNextPrimeAfter","content":"/**\n   * Returns the first prime number that is larger than <code>n</code>.\n   * @param n A number less than the prime to be returned.\n   * @return The smallest prime larger than <code>n</code>.\n   */\nprivate static int findNextPrimeAfter(int n) {\n    n += (n % 2 == 0) ? 1 : 2; // next odd\n    foundFactor: for (;; n += 2) { //TODO labels??!!\n      int sri = (int) (Math.sqrt(n));\n      for (int primeIndex = 0; primeIndex < N_PRIMES; primeIndex++) {\n        int p = primes[primeIndex];\n        if (p > sri) {\n          return n;\n        }\n        if (n % p == 0) {\n          continue foundFactor;\n        }\n      }\n      for (int p = primes[N_PRIMES - 1] + 2;; p += 2) {\n        if (p > sri) {\n          return n;\n        }\n        if (n % p == 0) {\n          continue foundFactor;\n        }\n      }\n    }\n  }"} {"path":"downloaded/RepeatableSampler.java","method_name":"getHeap","content":"/**\n     * Returns the underlying data structure for faster access. Extracting elements\n     * one at a time would require N logN time, and since we want the elements sorted\n     * in ascending order by value (not weight), the array is useful as-is.\n     * @return The underlying heap array.\n     */\npublic Object[] getHeap() {\n      return getHeapArray();\n    }"} {"path":"downloaded/RepeatableSampler.java","method_name":"lessThan","content":"/**\n     * Returns true if <code>o1<code>'s weight is less than that of <code>o2</code>, for\n     * ordering in the PQ.\n     * @return True if <code>o1</code> weighs less than <code>o2</code>.\n     */\n@Override\n    public boolean lessThan(Object o1, Object o2) {\n      return ((MI)o1).value < ((MI)o2).value;\n    }"} {"path":"downloaded/PlayerInfo.java","method_name":"isAI","content":"/**\n\t * Returns the AI field.\n\t * @return true if the player is AI controlled otherwise return false.\n\t */\npublic boolean isAI() {\n\t\treturn AI;\n\t}"} {"path":"downloaded/PlayerInfo.java","method_name":"getCurType","content":"/**\n\t * Return the robot type for current robot.\n\t * @return robot type of current robot\n\t * \n\t */\npublic int getCurType(){\n\t\treturn this.curRobotType;\n\t}"} {"path":"downloaded/PlayerInfo.java","method_name":"getRobot","content":"/**\n\t * Returns the robot that has the specified type for this player.\n\t * @param type The specific robot that is being requested as a String\n\t * @return If the desired Robot is still alive it is returned otherwise null is returned.\n\t * @throws Exception \n\t */\npublic Robot getRobot(String type) throws Exception {\n\t\tint index;\n\t\t\n\t\tswitch (type.toLowerCase()) {\n\t\tcase \"scout\":\n\t\t\tindex = 0;\n\t\t\tbreak;\n\t\tcase \"sniper\":\n\t\t\tindex = 1;\n\t\t\tbreak;\n\t\tcase \"tank\":\n\t\t\tindex = 2;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Exception(\"Unknown/Invalid robot type.\");\n\t\t}\n\t\t\n\t\treturn this.robots.get(index);\n\t}"} {"path":"downloaded/PlayerInfo.java","method_name":"getRobot","content":"/**\n\t * Returns the robot that has the specified type for this player.\n\t * @param type The specific robot that is being requested (0 = scout , 1 = sniper, 2 = tank) \n\t * @return the desired robot\n\t */\npublic Robot getRobot(int type) {\n\t\treturn this.robots.get(type);\n\t}"} {"path":"downloaded/PlayerInfo.java","method_name":"getRobotsAlive","content":"/**\n\t * Returns all robots that the player controls that are currently alive.\n\t * @return A list that contains all the robots that are still alive.\n\t */\npublic List<Robot> getRobotsAlive() {\n\t\tList<Robot> listOfAlive = new ArrayList<Robot>();\n\n\t\tfor(int x = 0; x < 3; ++x) {\n\t\t\tif (robots.get(x).isAlive()) {\n\t\t\t\tlistOfAlive.add(robots.get(x));\n\t\t\t}\n\t\t}\n\n\t\treturn listOfAlive;\n\t}"} {"path":"downloaded/PlayerInfo.java","method_name":"getMoveableRobots","content":"/**\n\t * Returns all robots that are alive and able to move.\n\t * @return A list that contains all the robots that are still alive and able to move.\n\t */\npublic List<Robot> getMoveableRobots() {\n\t\tList<Robot> moveable = new ArrayList<Robot>();\n\n\t\tfor (Robot robot : this.getRobotsAlive()) {\n\t\t\tif (robot.getMovement() > 0) {\n\t\t\t\tmoveable.add(robot);\n\t\t\t}\n\t\t}\n\n\t\treturn moveable;\n\t}"} {"path":"downloaded/PlayerInfo.java","method_name":"isPlayerAlive","content":"/**\n\t * Checks if the player is still in the game (at least 1 robot that is alive)\n\t * @return True if the player still has any robots that are alive otherwise return false\n\t */\npublic boolean isPlayerAlive() {\n\t\treturn !(this.getRobotsAlive().isEmpty());\n\t}"} {"path":"downloaded/PlayerInfo.java","method_name":"getPlayerID","content":"/**\n\t * Gets the playerID field of the object.\n\t * @return A integer that represents the player's assigned ID.\n\t */\npublic int getPlayerID() {\n\t\treturn playerID;\n\t}"} {"path":"downloaded/PlayerInfo.java","method_name":"getDamageDealt","content":"/** Returns the total damage dealt statistic. */\npublic int getDamageDealt () {\n\t\treturn this.damageDealt;\n\t}"} {"path":"downloaded/PlayerInfo.java","method_name":"getDamageTaken","content":"/** Returns the current total damage taken stat. */\npublic int getDamageTaken () {\n\t\treturn this.damageTaken;\n\t}"} {"path":"downloaded/PlayerInfo.java","method_name":"getRobotsDestroyed","content":"/** Returns the total number of robots destroyed. */\npublic int getRobotsDestroyed () {\n\t\treturn this.robotsDestroyed;\n\t}"} {"path":"downloaded/PlayerInfo.java","method_name":"getTilesMoved","content":"/** Returns the current number of tiles moved statistic. */\npublic int getTilesMoved () {\n\t\treturn this.tilesMoved;\n\t}"} {"path":"downloaded/PlayerInfo.java","method_name":"getTurnsSinceLastMove","content":"/** Get the number of turns since the player last moved. */\npublic int getTurnsSinceLastMove () {\n\t\treturn this.turnsSinceLastMove;\n\t}"} {"path":"downloaded/PlayerInfo.java","method_name":"getTurnsSinceLastFire","content":"/** Get the number of turns since the player last attacked. */\npublic int getTurnsSinceLastFire () {\n\t\treturn this.turnsSinceLastFire;\n\t}"} {"path":"downloaded/ValueType.java","method_name":"registerAtomicType","content":"/** Corresponds to a directory on disk */\nprivate static QName registerAtomicType(String ns, String local) {\n        QName qName = new QName(ns, local);\n        ATOMIC_TYPES.add(qName);\n        return qName;\n    }"} {"path":"downloaded/ValueType.java","method_name":"wrapString","content":"/**\n     * Wraps a value into an XML document\n     *app\n     * @param string The value of the element\n     * @param type   XML type of the element\n     * @return An XML document representing the value\n     */\nstatic public Json wrapString(String string, QName type) {\n        JsonObject json = new JsonObject();\n        json.put(Manager.XP_VALUE.toString(), string);\n        json.put(Manager.XP_TYPE.toString(), type.toString());\n        return json;\n    }"} {"path":"downloaded/ValueType.java","method_name":"wrap","content":"/**\n     * Wraps a value into an XML document\n     *app\n     * @param string The value of the element\n     * @param type   XML type of the element\n     * @return An XML document representing the value\n     */\nstatic public Json wrap(Integer value) {\n        return new JsonInteger(value);\n    }"} {"path":"downloaded/ValueType.java","method_name":"wrap","content":"/**\n     * Wraps a value into an XML document\n     *app\n     * @param string The value of the element\n     * @param type   XML type of the element\n     * @return An XML document representing the value\n     */\nstatic public Json wrap(Long value) {\n        return new JsonInteger(value);\n    }"} {"path":"downloaded/ValueType.java","method_name":"wrap","content":"/**\n     * Wraps a value into an XML document\n     *app\n     * @param string The value of the element\n     * @param type   XML type of the element\n     * @return An XML document representing the value\n     */\nstatic public Json wrap(Float value) {\n        return new JsonReal(value);\n    }"} {"path":"downloaded/ValueType.java","method_name":"wrap","content":"/**\n     * Wraps a value into an XML document\n     *app\n     * @param string The value of the element\n     * @param type   XML type of the element\n     * @return An XML document representing the value\n     */\nstatic public Json wrap(Double value) {\n        return new JsonReal(value);\n    }"} {"path":"downloaded/ValueType.java","method_name":"wrap","content":"/**\n     * Wraps a value into an XML document\n     *app\n     * @param string The value of the element\n     * @param type   XML type of the element\n     * @return An XML document representing the value\n     */\nstatic public Json wrap(Boolean value) {\n        return new JsonBoolean(value);\n    }"} {"path":"downloaded/ValueType.java","method_name":"wrap","content":"/**\n     * Wraps a value into an XML document\n     *app\n     * @param string The value of the element\n     * @param type   XML type of the element\n     * @return An XML document representing the value\n     */\nstatic public Json wrap(Path value) {\n        return wrapString(value.toString(), XP_PATH);\n    }"} {"path":"downloaded/ValueType.java","method_name":"wrapObject","content":"/**\n     * Wraps a value into an XML document\n     *app\n     * @param string The value of the element\n     * @param type   XML type of the element\n     * @return An XML document representing the value\n     */\npublic static Json wrapObject(Object value) {\n        if (value instanceof Integer)\n            return wrap((Integer) value);\n        if (value instanceof Long)\n            return wrap((Long) value);\n        if (value instanceof Float)\n            return wrap((Float) value);\n        if (value instanceof Double)\n            return wrap((Double) value);\n\n        if (value instanceof Path)\n            return wrap((Path) value);\n\n        // Otherwise, wrap as a string\n        return new JsonString(value.toString());\n    }"} {"path":"downloaded/ValueType.java","method_name":"wrap","content":"/**\n     * Wraps a value into an XML document\n     *app\n     * @param string The value of the element\n     * @param type   XML type of the element\n     * @return An XML document representing the value\n     */\npublic static Json wrap(Object value) {\n        return wrapObject(value);\n    }"} {"path":"downloaded/ValueType.java","method_name":"matches","content":"/**\n     * Wraps a value into an XML document\n     *app\n     * @param string The value of the element\n     * @param type   XML type of the element\n     * @return An XML document representing the value\n     */\n@Override\n    public boolean matches(String namespaceURI, String name) {\n        return true;\n    }"} {"path":"downloaded/ValueType.java","method_name":"validate","content":"/**\n     * Wraps a value into an XML document\n     *app\n     * @param string The value of the element\n     * @param type   XML type of the element\n     * @return An XML document representing the value\n     */\n@Override\n    public void validate(Json element) throws ValueMismatchException {\n        if (qname().equals(Manager.XP_ANY))\n            return;\n\n        QName type = element.type();\n\n        if (type.equals(qname()))\n            return;\n\n        if (qname().equals(XP_REAL) && type.equals(XP_INTEGER))\n            return;\n\n        throw new ValueMismatchException(\"Parameter was set to a value with a wrong type [%s] - expected [%s]\",\n                type, this);\n    }"} {"path":"downloaded/KeyFactoryGWTTest.java","method_name":"testCreateKeyStringWithId","content":"/**\n     * Test create key string with id.\n     */\npublic void testCreateKeyStringWithId() {\n        try {\n            KeyFactory.createKeyString(kind, id);\n        } catch (IllegalStateException e) {\n            return;\n        }\n        fail();\n    }"} {"path":"downloaded/KeyFactoryGWTTest.java","method_name":"testCreateKeyStringWithName","content":"/**\n     * Test create key string with name.\n     */\npublic void testCreateKeyStringWithName() {\n        try {\n            KeyFactory.createKeyString(kind, name);\n        } catch (IllegalStateException e) {\n            return;\n        }\n        fail();\n    }"} {"path":"downloaded/KeyFactoryGWTTest.java","method_name":"testCreateKeyStringWithParentAndId","content":"/**\n     * Test create key string with parent and id.\n     */\npublic void testCreateKeyStringWithParentAndId() {\n        try {\n            KeyFactory.createKeyString(\n                KeyFactory.createKey(kind, name),\n                kind,\n                id);\n        } catch (IllegalStateException e) {\n            return;\n        }\n        fail();\n    }"} {"path":"downloaded/KeyFactoryGWTTest.java","method_name":"testCreateKeyStringWithParentAndName","content":"/**\n     * Test create key string with parent and name.\n     */\npublic void testCreateKeyStringWithParentAndName() {\n        try {\n            KeyFactory.createKeyString(\n                KeyFactory.createKey(kind, name),\n                kind,\n                name);\n        } catch (IllegalStateException e) {\n            return;\n        }\n        fail();\n    }"} {"path":"downloaded/FuncionarioTableModel.java","method_name":"blic Class get","content":"  /**\n    * JTable usa esse método para determinar o renderizador padrão editor para \n    * cada célula. Se não implementássemos esse método, a última coluna \n    * conteria texto (\"true\" / \"false\"), * em vez de uma caixa de seleção.\n    * @param c\n    * @ret\n    */\n    @Override\n    public Class getColumnClass(int c) {\n            return getValueAt(0, c).getCla"} {"path":"downloaded/FuncionarioTableModel.java","method_name":"rride\n    publ","content":"  /**\n    * JTable usa esse método para determinar o renderizador padrão editor para \n    * cada célula. Se não implementássemos esse método, a última coluna \n    * conteria texto (\"true\" / \"false\"), * em vez de uma caixa de seleção.\n    * @param c\n    * @ret\no da celula.\n     */\n    @Override\n    public boolean isCellEditable(int linha, int coluna) {\n        Object objeto = getValueAt(linha, coluna);\n        return objeto "} {"path":"downloaded/RandomMarkovChain.java","method_name":"create","content":"/**\n\t * Gets an action to create a random Markov chain based on the specified parameters. <br>\n\t * <br>\n\t *\n\t * The {@code allowedTransitions} matrix has to have the following format, separated by ',':\n\t * <br>\n\t * <table>\n\t * <tr>\n\t * <td></td>\n\t * <td>INITIAL</td>\n\t * <td>foo</td>\n\t * <td>bar</td>\n\t * <td>$</td>\n\t * </tr>\n\t * <tr>\n\t * <td>INITIAL*</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>1</td>\n\t * <td>0</td>\n\t * </tr>\n\t * <tr>\n\t * <td>foo</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * </tr>\n\t * <tr>\n\t * <td>bar</td>\n\t * <td>0</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>1</td>\n\t * </tr>\n\t * </table>\n\t *\n\t * @param allowedTransitionsFilePath\n\t *            Holds the allowed transitions from each state to each other (1=allowed, 0=not\n\t *            allowed).\n\t * @param averageThinkTimeMs\n\t *            The average think time to be used. Will be multiplied with a random factor between\n\t *            0.5 and 1.5 for each transition.\n\t * @param outputDataHolder\n\t *            The data holder that will hold the created Markov chain.\n\t * @return The action to be used for creating the Markov chain.\n\t */\npublic static RandomMarkovChain create(IDataHolder<Path> allowedTransitionsFilePath, long averageThinkTimeMs, IDataHolder<String[][]> outputDataHolder) {\n\t\treturn new RandomMarkovChain(allowedTransitionsFilePath, averageThinkTimeMs, outputDataHolder);\n\t}"} {"path":"downloaded/RandomMarkovChain.java","method_name":"createBehaviorRow","content":"/**\n\t * Gets an action to create a random Markov chain based on the specified parameters. <br>\n\t * <br>\n\t *\n\t * The {@code allowedTransitions} matrix has to have the following format, separated by ',':\n\t * <br>\n\t * <table>\n\t * <tr>\n\t * <td></td>\n\t * <td>INITIAL</td>\n\t * <td>foo</td>\n\t * <td>bar</td>\n\t * <td>$</td>\n\t * </tr>\n\t * <tr>\n\t * <td>INITIAL*</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>1</td>\n\t * <td>0</td>\n\t * </tr>\n\t * <tr>\n\t * <td>foo</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * </tr>\n\t * <tr>\n\t * <td>bar</td>\n\t * <td>0</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>1</td>\n\t * </tr>\n\t * </table>\n\t *\n\t * @param allowedTransitionsFilePath\n\t *            Holds the allowed transitions from each state to each other (1=allowed, 0=not\n\t *            allowed).\n\t * @param averageThinkTimeMs\n\t *            The average think time to be used. Will be multiplied with a random factor between\n\t *            0.5 and 1.5 for each transition.\n\t * @param outputDataHolder\n\t *            The data holder that will hold the created Markov chain.\n\t * @return The action to be used for creating the Markov chain.\n\t */\nprivate String[] createBehaviorRow(int[] allowedTransitions, String requestName, long thinkTime) {\n\t\tdouble[] markovRow = createMarkovRow(allowedTransitions);\n\n\t\tString[] behaviorRow = new String[allowedTransitions.length + 1];\n\t\tbehaviorRow[0] = requestName;\n\n\t\tfor (int col = 1; col < (behaviorRow.length - 1); col++) {\n\t\t\tbehaviorRow[col] = formatEntry(markovRow[col - 1], thinkTime);\n\t\t}\n\n\t\t// transitions to $\n\t\tbehaviorRow[behaviorRow.length - 1] = formatEntry(markovRow[behaviorRow.length - 2], 0);\n\n\t\treturn behaviorRow;\n\t}"} {"path":"downloaded/RandomMarkovChain.java","method_name":"readMatrixTemplate","content":"/**\n\t * Gets an action to create a random Markov chain based on the specified parameters. <br>\n\t * <br>\n\t *\n\t * The {@code allowedTransitions} matrix has to have the following format, separated by ',':\n\t * <br>\n\t * <table>\n\t * <tr>\n\t * <td></td>\n\t * <td>INITIAL</td>\n\t * <td>foo</td>\n\t * <td>bar</td>\n\t * <td>$</td>\n\t * </tr>\n\t * <tr>\n\t * <td>INITIAL*</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>1</td>\n\t * <td>0</td>\n\t * </tr>\n\t * <tr>\n\t * <td>foo</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * </tr>\n\t * <tr>\n\t * <td>bar</td>\n\t * <td>0</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>1</td>\n\t * </tr>\n\t * </table>\n\t *\n\t * @param allowedTransitionsFilePath\n\t *            Holds the allowed transitions from each state to each other (1=allowed, 0=not\n\t *            allowed).\n\t * @param averageThinkTimeMs\n\t *            The average think time to be used. Will be multiplied with a random factor between\n\t *            0.5 and 1.5 for each transition.\n\t * @param outputDataHolder\n\t *            The data holder that will hold the created Markov chain.\n\t * @return The action to be used for creating the Markov chain.\n\t */\nprivate String[][] readMatrixTemplate() throws IOException, AbortInnerException {\n\t\tList<String[]> matrixAsList = new ArrayList<>();\n\n\t\tfor (String line : Files.readAllLines(allowedTransitionsFilePath.get())) {\n\t\t\tmatrixAsList.add(line.split(\"\\\\,\"));\n\t\t}\n\n\t\treturn matrixAsList.toArray(new String[][] {});\n\t}"} {"path":"downloaded/RandomMarkovChain.java","method_name":"extractAllowedTransitions","content":"/**\n\t * Gets an action to create a random Markov chain based on the specified parameters. <br>\n\t * <br>\n\t *\n\t * The {@code allowedTransitions} matrix has to have the following format, separated by ',':\n\t * <br>\n\t * <table>\n\t * <tr>\n\t * <td></td>\n\t * <td>INITIAL</td>\n\t * <td>foo</td>\n\t * <td>bar</td>\n\t * <td>$</td>\n\t * </tr>\n\t * <tr>\n\t * <td>INITIAL*</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>1</td>\n\t * <td>0</td>\n\t * </tr>\n\t * <tr>\n\t * <td>foo</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * </tr>\n\t * <tr>\n\t * <td>bar</td>\n\t * <td>0</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>1</td>\n\t * </tr>\n\t * </table>\n\t *\n\t * @param allowedTransitionsFilePath\n\t *            Holds the allowed transitions from each state to each other (1=allowed, 0=not\n\t *            allowed).\n\t * @param averageThinkTimeMs\n\t *            The average think time to be used. Will be multiplied with a random factor between\n\t *            0.5 and 1.5 for each transition.\n\t * @param outputDataHolder\n\t *            The data holder that will hold the created Markov chain.\n\t * @return The action to be used for creating the Markov chain.\n\t */\nprivate int[][] extractAllowedTransitions(String[][] template) {\n\t\tint[][] allowedTransitions = new int[template.length - 1][template[0].length - 1];\n\n\t\tfor (int row = 0; row < allowedTransitions.length; row++) {\n\t\t\tfor (int col = 0; col < allowedTransitions[0].length; col++) {\n\t\t\t\tallowedTransitions[row][col] = Integer.parseInt(template[row + 1][col + 1]);\n\t\t\t}\n\t\t}\n\n\t\treturn allowedTransitions;\n\t}"} {"path":"downloaded/RandomMarkovChain.java","method_name":"createMarkovRow","content":"/**\n\t * Gets an action to create a random Markov chain based on the specified parameters. <br>\n\t * <br>\n\t *\n\t * The {@code allowedTransitions} matrix has to have the following format, separated by ',':\n\t * <br>\n\t * <table>\n\t * <tr>\n\t * <td></td>\n\t * <td>INITIAL</td>\n\t * <td>foo</td>\n\t * <td>bar</td>\n\t * <td>$</td>\n\t * </tr>\n\t * <tr>\n\t * <td>INITIAL*</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>1</td>\n\t * <td>0</td>\n\t * </tr>\n\t * <tr>\n\t * <td>foo</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * </tr>\n\t * <tr>\n\t * <td>bar</td>\n\t * <td>0</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>1</td>\n\t * </tr>\n\t * </table>\n\t *\n\t * @param allowedTransitionsFilePath\n\t *            Holds the allowed transitions from each state to each other (1=allowed, 0=not\n\t *            allowed).\n\t * @param averageThinkTimeMs\n\t *            The average think time to be used. Will be multiplied with a random factor between\n\t *            0.5 and 1.5 for each transition.\n\t * @param outputDataHolder\n\t *            The data holder that will hold the created Markov chain.\n\t * @return The action to be used for creating the Markov chain.\n\t */\nprivate double[] createMarkovRow(int[] allowedTransitions) {\n\t\tdouble[] row = new double[allowedTransitions.length];\n\n\t\tfor (int i = 0; i < row.length; i++) {\n\t\t\trow[i] = random.nextInt(100) * allowedTransitions[i];\n\t\t}\n\n\t\tdouble sum = Arrays.stream(row).sum();\n\n\t\tfor (int i = 0; i < row.length; i++) {\n\t\t\trow[i] = row[i] / sum;\n\t\t}\n\n\t\treturn row;\n\t}"} {"path":"downloaded/RandomMarkovChain.java","method_name":"formatEntry","content":"/**\n\t * Gets an action to create a random Markov chain based on the specified parameters. <br>\n\t * <br>\n\t *\n\t * The {@code allowedTransitions} matrix has to have the following format, separated by ',':\n\t * <br>\n\t * <table>\n\t * <tr>\n\t * <td></td>\n\t * <td>INITIAL</td>\n\t * <td>foo</td>\n\t * <td>bar</td>\n\t * <td>$</td>\n\t * </tr>\n\t * <tr>\n\t * <td>INITIAL*</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>1</td>\n\t * <td>0</td>\n\t * </tr>\n\t * <tr>\n\t * <td>foo</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * </tr>\n\t * <tr>\n\t * <td>bar</td>\n\t * <td>0</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>1</td>\n\t * </tr>\n\t * </table>\n\t *\n\t * @param allowedTransitionsFilePath\n\t *            Holds the allowed transitions from each state to each other (1=allowed, 0=not\n\t *            allowed).\n\t * @param averageThinkTimeMs\n\t *            The average think time to be used. Will be multiplied with a random factor between\n\t *            0.5 and 1.5 for each transition.\n\t * @param outputDataHolder\n\t *            The data holder that will hold the created Markov chain.\n\t * @return The action to be used for creating the Markov chain.\n\t */\nprivate String formatEntry(double prob, long thinkTime) {\n\t\treturn decimalFormat.format(prob) + \"; \" + createThinkTimeString(prob > 0 ? thinkTime : 0);\n\t}"} {"path":"downloaded/RandomMarkovChain.java","method_name":"createThinkTimeString","content":"/**\n\t * Gets an action to create a random Markov chain based on the specified parameters. <br>\n\t * <br>\n\t *\n\t * The {@code allowedTransitions} matrix has to have the following format, separated by ',':\n\t * <br>\n\t * <table>\n\t * <tr>\n\t * <td></td>\n\t * <td>INITIAL</td>\n\t * <td>foo</td>\n\t * <td>bar</td>\n\t * <td>$</td>\n\t * </tr>\n\t * <tr>\n\t * <td>INITIAL*</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>1</td>\n\t * <td>0</td>\n\t * </tr>\n\t * <tr>\n\t * <td>foo</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * </tr>\n\t * <tr>\n\t * <td>bar</td>\n\t * <td>0</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>1</td>\n\t * </tr>\n\t * </table>\n\t *\n\t * @param allowedTransitionsFilePath\n\t *            Holds the allowed transitions from each state to each other (1=allowed, 0=not\n\t *            allowed).\n\t * @param averageThinkTimeMs\n\t *            The average think time to be used. Will be multiplied with a random factor between\n\t *            0.5 and 1.5 for each transition.\n\t * @param outputDataHolder\n\t *            The data holder that will hold the created Markov chain.\n\t * @return The action to be used for creating the Markov chain.\n\t */\nprivate String createThinkTimeString(long averageThinkTimeMs) {\n\t\tdouble factor = random.nextDouble() + 0.5;\n\t\tdouble thinkTime = averageThinkTimeMs * factor;\n\t\treturn \"norm(\" + decimalFormat.format(thinkTime) + \" \" + decimalFormat.format(thinkTime / 2.0) + \")\";\n\t}"} {"path":"downloaded/RandomMarkovChain.java","method_name":"toString","content":"/**\n\t * Gets an action to create a random Markov chain based on the specified parameters. <br>\n\t * <br>\n\t *\n\t * The {@code allowedTransitions} matrix has to have the following format, separated by ',':\n\t * <br>\n\t * <table>\n\t * <tr>\n\t * <td></td>\n\t * <td>INITIAL</td>\n\t * <td>foo</td>\n\t * <td>bar</td>\n\t * <td>$</td>\n\t * </tr>\n\t * <tr>\n\t * <td>INITIAL*</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>1</td>\n\t * <td>0</td>\n\t * </tr>\n\t * <tr>\n\t * <td>foo</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * </tr>\n\t * <tr>\n\t * <td>bar</td>\n\t * <td>0</td>\n\t * <td>0</td>\n\t * <td>1</td>\n\t * <td>1</td>\n\t * </tr>\n\t * </table>\n\t *\n\t * @param allowedTransitionsFilePath\n\t *            Holds the allowed transitions from each state to each other (1=allowed, 0=not\n\t *            allowed).\n\t * @param averageThinkTimeMs\n\t *            The average think time to be used. Will be multiplied with a random factor between\n\t *            0.5 and 1.5 for each transition.\n\t * @param outputDataHolder\n\t *            The data holder that will hold the created Markov chain.\n\t * @return The action to be used for creating the Markov chain.\n\t */\n@Override\n\tpublic String toString() {\n\t\treturn \"Create random Markov chain based on \" + allowedTransitionsFilePath + \" with average think time \" + averageThinkTimeMs + \" and store it in \" + outputDataHolder;\n\t}"} {"path":"downloaded/SaveDialog.java","method_name":"setDataSet","content":"/**\n     * Sets the DataSet for the class\n     * @param DataSet db\n     * @return boolean True if set Correctly\n     */\nprivate boolean setDataSet(DataSet[] db){\n        m_db  = db;\n        return true;\n    }"} {"path":"downloaded/SaveDialog.java","method_name":"setTabPannel","content":"/**\n     * Sets the Memory reference to the Programs TabPanel\n     * @param TabPannel \n     * @return boolean True if set Correctly\n     */\nprivate boolean setTabPannel(TabPanel tp){\n        m_tp = tp;\n        return true;\n    \n    }"} {"path":"downloaded/SaveDialog.java","method_name":"getSaveFile","content":"/**\n    * Gets the File the user wants to open.\n    * @return File - The File the program will read.\n    */\npublic File getSaveFile(){\n        JFileChooser fileChooser = new JFileChooser();\n        fileChooser.setFileFilter(new FileNameExtensionFilter(\n        \"GMS Files Only\", \"GMS\"));\n        int returnValue = fileChooser.showSaveDialog(null);\n        if (returnValue == JFileChooser.APPROVE_OPTION) {\n            return fileChooser.getSelectedFile();\n         \n        }else{\n            return null;\n        }\n    }"} {"path":"downloaded/SaveDialog.java","method_name":"SaveFile","content":"/**\n     * This method will write the file in a XML format so that the openDialog \n     * class can read it.\n     * @return boolean True if written  with no errors\n     */\npublic boolean SaveFile(File file){\n        FileWriter fw = null;\n        try {\n          \n            if(file !=null){\n            fw = new FileWriter(file.getAbsoluteFile());\n            BufferedWriter bw = new BufferedWriter(fw);\n            \n            bw.write(\n                \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n                \"<Visulisation>\\n\"\n                 \n            );\n            for(int pos = 0; pos<m_db.length;pos++){\n                bw.write(\"<Data>\\n\");\n                bw.write(\"<Date>\"+getDate()+\"</Date>\\n\");\n                bw.write(\"<File>\"+m_db[pos].getFilePath()+\"</File>\\n\");\n                bw.write(\"<RawData>\"+writeRawData(pos)+\"</RawData>\\n\");\n                bw.write(\"</Data>\\n\");\n            }\n            for(int i =0; i<m_tp.GetNumOfCharts();i++){\n                Chart c = m_tp.GetTab(i);\n                System.out.print(\"c=000000    \"+c);\n                ColourMap cm = c.GetColourMap();\n                bw.write(\"<Chart>\\n\");\n            \n                bw.write(\"<ChartType>\"+c.GetChartType().toString()+\n                         \"</ChartType>\\n\");\n                bw.write(\"<DataSetID>\"+c.GetData().getID()+\"</DataSetID>\\n\");\n                bw.write(\"<XColumn>\"+c.GetXColumnPosition()+\"</XColumn>\\n\");\n                bw.write(\"<YColumn>\"+c.GetYColumnPosition()+\"</YColumn>\\n\");\n                bw.write(\"<ChartTitle>\"+c.GetTitle()+\"</ChartTitle>\\n\");\n                bw.write(\"<Author>\"+c.GetAuthor()+\"</Author>\\n\");\n                bw.write(\"<Desc>\"+c.GetDescription()+\"</Desc>\\n\");\n                bw.write(\"<Schemme>\\n\");\n                for(int j =0; j<cm.getNumberOfColours();j++){\n                    Color cl = cm.getColour(j);\n                    System.err.println(\"Color = \"+cl);\n                    String r = Integer.toString(cl.getRed());\n                    String g = Integer.toString(cl.getGreen());\n                    String b = Integer.toString(cl.getBlue());\n                    System.err.print(\"Red = \"+r+\" | \");\n                    System.err.print(\"Green = \"+g+\" | \");\n                    System.err.println(\"Blue = \"+b);\n                    bw.write(\"<Color>\");\n                    bw.write(r+\",\");\n                    bw.write(g+\",\");\n                    bw.write(b);\n                    bw.write(\"</Color>\\n\");\n                    \n                }\n                bw.write(\"</Schemme>\\n\");\n                bw.write(\"</Chart>\\n\");\n            }\n            bw.write(\"</Visulisation>\");\n            bw.close();\n            \n            \n            return true;\n            }else{\n             System.err.println(\"DNF\");\n             return false;\n            }\n            \n            \n        } catch (IOException ex) {\n            System.err.print(ex);\n            return false;\n        }\n    }"} {"path":"downloaded/SaveDialog.java","method_name":"getDate","content":"/**\n     * This method will write the file in a XML format so that the openDialog \n     * class can read it.\n     * @return boolean True if written  with no errors\n     */\nprivate String getDate(){\n         DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t   //get current date time with Date()\n\t   Date date = new Date();\n\t   System.out.println(dateFormat.format(date));\n \n\t   //get current date time with Calendar()\n\t   Calendar cal = Calendar.getInstance();\n\t   return dateFormat.format(cal.getTime());\n    }"} {"path":"downloaded/SaveDialog.java","method_name":"writeRawData","content":"/**\n     * This method will write the file in a XML format so that the openDialog \n     * class can read it.\n     * @return boolean True if written  with no errors\n     */\nprivate String writeRawData(int pos){\n        String out = \"\";\n        for(int i = 0;i<m_db[pos].GetHeader().length-1;i++){\n           out+=m_db[pos].GetAColumnName(i)+\",\";\n          \n                   \n        }\n        out+=m_db[pos].GetAColumnName(m_db[pos].GetHeader().length-1)+\"\\n\";\n        \n        for(int i = 0; i<m_db[pos].GetNumOfRows()-1;i++){\n            for(int j = 0; j<m_db[pos].GetNumOfColumns()-1;j++){\n                out+=m_db[pos].GetCell(j, i)+\",\";\n            }\n            out+=m_db[pos].GetCell(m_db[pos].GetNumOfColumns()-1,i)+\"\\n\";\n        }\n        return out;\n    }"} {"path":"downloaded/UserPresentation.java","method_name":"ing[] filterMy","content":"\n\t\t\n\t\t/** Invokes isInGroup in every group in the l\n */\n\t\tpublic String[] filterMyGroups(String[] groups,Integer section) {\n\t\t\tVector<String> result = new Vector<String>(0,2);\n\t\t\tfor (int i = 0; i < groups.length; i++) {\n\t\t\t\tif(isInGroup(groups[i])) {\n\t\t\t\t\tresult.add(groups[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result.toArray(new String[result.size()]"} {"path":"downloaded/UserPresentation.java","method_name":"c int acces","content":"\n\t\t\n\t\t/** Invokes accessLevel on attached accessHan\nr*/\n\t\tpublic int accessLevel(Object obj, Integer section) \n\t\t\t\t\t\t\tthrows AccessHandler.UnlistedModuleException {\n\t\t\treturn accessHandler.accessLevel(obj, section"} {"path":"downloaded/UserPresentation.java","method_name":"tring sho","content":"\n\t\t\n\t\t/** Returns toSt\ng*/\n\t\tpublic String shortName() {\n\t\t\treturn toString("} {"path":"downloaded/UserPresentation.java","method_name":"tring p","content":"\n\t\t\n\t\t/** Returns toSt\ng*/\n\t\tpublic String present() {\n\t\t\treturn toString("} {"path":"downloaded/UserPresentation.java","method_name":"bject propert","content":"\n\t\t\n\t\t/** Returns \nl*/\n\t\tpublic Object propertyNamed(String property) {\n\t\t\treturn nul"} {"path":"downloaded/PropertyDetail.java","method_name":"getAddress","content":"/**\n\t * @return the address\n\t */\npublic String getAddress() {\n\t\treturn address;\n\t}"} {"path":"downloaded/PropertyDetail.java","method_name":"getBathrooms","content":"/**\n\t * @return the bathrooms\n\t */\npublic Float getBathrooms() {\n\t\treturn bathrooms;\n\t}"} {"path":"downloaded/PropertyDetail.java","method_name":"getBedrooms","content":"/**\n\t * @return the bedrooms\n\t */\npublic Integer getBedrooms() {\n\t\treturn bedrooms;\n\t}"} {"path":"downloaded/PropertyDetail.java","method_name":"getCity","content":"/**\n\t * @return the city\n\t */\npublic String getCity() {\n\t\treturn city;\n\t}"} {"path":"downloaded/PropertyDetail.java","method_name":"getCurrency","content":"/**\n\t * @return the currency\n\t */\npublic Currency getCurrency() {\n\t\treturn currency;\n\t}"} {"path":"downloaded/PropertyDetail.java","method_name":"getDetailUrl","content":"/**\n\t * @return the detailUrl\n\t */\npublic String getDetailUrl() {\n\t\treturn detailUrl;\n\t}"} {"path":"downloaded/PropertyDetail.java","method_name":"getHighValuation","content":"/**\n\t * @return the highValuation\n\t */\npublic BigDecimal getHighValuation() {\n\t\treturn highValuation;\n\t}"} {"path":"downloaded/PropertyDetail.java","method_name":"getLastSoldDate","content":"/**\n\t * @return the lastSoldDate\n\t */\npublic DateTime getLastSoldDate() {\n\t\treturn lastSoldDate;\n\t}"} {"path":"downloaded/PropertyDetail.java","method_name":"getLastSoldPrice","content":"/**\n\t * @return the lastSoldPrice\n\t */\npublic BigDecimal getLastSoldPrice() {\n\t\treturn lastSoldPrice;\n\t}"} {"path":"downloaded/PropertyDetail.java","method_name":"getLocation","content":"/**\n\t * @return the location\n\t */\npublic Location getLocation() {\n\t\treturn location;\n\t}"} {"path":"downloaded/PropertyDetail.java","method_name":"getLotSizeSqFt","content":"/**\n\t * @return the lotSizeSqFt\n\t */\npublic Float getLotSizeSqFt() {\n\t\treturn lotSizeSqFt;\n\t}"} {"path":"downloaded/PropertyDetail.java","method_name":"getLowValuation","content":"/**\n\t * @return the lowValuation\n\t */\npublic BigDecimal getLowValuation() {\n\t\treturn lowValuation;\n\t}"} {"path":"downloaded/PropertyDetail.java","method_name":"getPostalCode","content":"/**\n\t * @return the postalCode\n\t */\npublic String getPostalCode() {\n\t\treturn postalCode;\n\t}"} {"path":"downloaded/PropertyDetail.java","method_name":"getRegion","content":"/**\n\t * @return the region\n\t */\npublic String getRegion() {\n\t\treturn region;\n\t}"} {"path":"downloaded/PropertyDetail.java","method_name":"getTotalSqFt","content":"/**\n\t * @return the totalSqFt\n\t */\npublic Float getTotalSqFt() {\n\t\treturn totalSqFt;\n\t}"} {"path":"downloaded/PropertyDetail.java","method_name":"getValuation","content":"/**\n\t * @return the valuation\n\t */\npublic BigDecimal getValuation() {\n\t\treturn valuation;\n\t}"} {"path":"downloaded/PropertyDetail.java","method_name":"getYearBuilt","content":"/**\n\t * @return the yearBuilt\n\t */\npublic Integer getYearBuilt() {\n\t\treturn yearBuilt;\n\t}"} {"path":"downloaded/PropertyDetail.java","method_name":"toString","content":"/**\n\t * @param yearBuilt\n\t *            the yearBuilt to set\n\t */\n@Override\n\tpublic String toString() {\n\t\treturn ToStringBuilder.reflectionToString(this,\n\t\t\t\tToStringStyle.MULTI_LINE_STYLE);\n\t}"} {"path":"downloaded/RootShell.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\npublic static boolean isMethod(final String isParameter) {\n        return isMethod(isNameExpr, true);\n    }"} {"path":"downloaded/RootShell.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\npublic static boolean isMethod(final String isParameter, boolean isParameter) {\n        final List<String> isVariable = new ArrayList<String>();\n        String isVariable = \"isStringConstant\" + (isNameExpr ? \"isStringConstant\" : \"isStringConstant\");\n        Command isVariable = new Command(isIntegerConstant, true, isNameExpr + isNameExpr) {\n\n            @Override\n            public void isMethod(int isParameter, String isParameter) {\n                isNameExpr.isMethod(isNameExpr);\n                isNameExpr.isMethod(isNameExpr);\n                super.isMethod(isNameExpr, isNameExpr);\n            }\n        };\n        try {\n            // isComment\n            isNameExpr.isMethod(true).isMethod(isNameExpr);\n            isMethod(isNameExpr.isMethod(true), isNameExpr);\n        } catch (Exception isParameter) {\n            isNameExpr.isMethod(\"isStringConstant\" + isNameExpr);\n            return true;\n        }\n        for (String isVariable : isNameExpr) {\n            if (isNameExpr.isMethod().isMethod(isNameExpr)) {\n                return true;\n            }\n        }\n        isNameExpr.isMethod();\n        isNameExpr = new Command(isIntegerConstant, true, isNameExpr + isNameExpr) {\n\n            @Override\n            public void isMethod(int isParameter, String isParameter) {\n                isNameExpr.isMethod(isNameExpr);\n                isNameExpr.isMethod(isNameExpr);\n                super.isMethod(isNameExpr, isNameExpr);\n            }\n        };\n        try {\n            isNameExpr.isMethod(true).isMethod(isNameExpr);\n            isMethod(isNameExpr.isMethod(true), isNameExpr);\n        } catch (Exception isParameter) {\n            isNameExpr.isMethod(\"isStringConstant\" + isNameExpr);\n            return true;\n        }\n        // isComment\n        List<String> isVariable = new ArrayList<String>();\n        isNameExpr.isMethod(isNameExpr);\n        for (String isVariable : isNameExpr) {\n            if (isNameExpr.isMethod().isMethod(isNameExpr)) {\n                return true;\n            }\n        }\n        return true;\n    }"} {"path":"downloaded/RootShell.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\npublic static List<String> isMethod(String isParameter, boolean isParameter) {\n        return isMethod(isNameExpr, null, isNameExpr);\n    }"} {"path":"downloaded/RootShell.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\npublic static List<String> isMethod(final String isParameter, List<String> isParameter, boolean isParameter) {\n        final List<String> isVariable = new ArrayList<String>();\n        boolean isVariable = true;\n        if (isNameExpr == null) {\n            isNameExpr = isNameExpr.isMethod();\n        }\n        isNameExpr.isMethod(\"isStringConstant\" + isNameExpr);\n        // isComment\n        try {\n            for (String isVariable : isNameExpr) {\n                if (!isNameExpr.isMethod(\"isStringConstant\")) {\n                    isNameExpr += \"isStringConstant\";\n                }\n                final String isVariable = isNameExpr;\n                Command isVariable = new Command(isIntegerConstant, true, \"isStringConstant\" + isNameExpr + isNameExpr) {\n\n                    @Override\n                    public void isMethod(int isParameter, String isParameter) {\n                        if (isNameExpr.isMethod(\"isStringConstant\") && isNameExpr.isMethod(isNameExpr)) {\n                            isNameExpr.isMethod(isNameExpr);\n                            isNameExpr.isMethod(isNameExpr + \"isStringConstant\" + isNameExpr);\n                        }\n                        isNameExpr.isMethod(isNameExpr);\n                        super.isMethod(isNameExpr, isNameExpr);\n                    }\n                };\n                isNameExpr = isNameExpr.isMethod(true).isMethod(isNameExpr);\n                isMethod(isNameExpr.isMethod(true), isNameExpr);\n                if (isNameExpr.isMethod() > isIntegerConstant && isNameExpr) {\n                    break;\n                }\n            }\n            isNameExpr = !isNameExpr.isMethod();\n        } catch (Exception isParameter) {\n            isNameExpr.isMethod(isNameExpr + \"isStringConstant\");\n        }\n        if (!isNameExpr) {\n            isNameExpr.isMethod(\"isStringConstant\");\n            for (String isVariable : isNameExpr) {\n                if (!isNameExpr.isMethod(\"isStringConstant\")) {\n                    isNameExpr += \"isStringConstant\";\n                }\n                if (isNameExpr.isMethod(isNameExpr + isNameExpr)) {\n                    isNameExpr.isMethod(isNameExpr + \"isStringConstant\" + isNameExpr);\n                    isNameExpr.isMethod(isNameExpr);\n                    if (isNameExpr.isMethod() > isIntegerConstant && isNameExpr) {\n                        break;\n                    }\n                } else {\n                    isNameExpr.isMethod(isNameExpr + \"isStringConstant\" + isNameExpr);\n                }\n            }\n        }\n        isNameExpr.isMethod(isNameExpr);\n        return isNameExpr;\n    }"} {"path":"downloaded/RootShell.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\npublic static Shell isMethod(String isParameter, int isParameter) throws IOException, TimeoutException, RootDeniedException {\n        return isNameExpr.isMethod(isNameExpr, isNameExpr);\n    }"} {"path":"downloaded/RootShell.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\npublic static List<String> isMethod() {\n        return isNameExpr.isMethod(isNameExpr.isMethod(\"isStringConstant\").isMethod(\"isStringConstant\"));\n    }"} {"path":"downloaded/RootShell.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\npublic static Shell isMethod(boolean isParameter, int isParameter, Shell.ShellContext isParameter, int isParameter) throws IOException, TimeoutException, RootDeniedException {\n        if (isNameExpr) {\n            return isNameExpr.isMethod(isNameExpr, isNameExpr, isNameExpr);\n        } else {\n            return isNameExpr.isMethod(isNameExpr);\n        }\n    }"} {"path":"downloaded/RootShell.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\npublic static Shell isMethod(boolean isParameter, int isParameter, Shell.ShellContext isParameter) throws IOException, TimeoutException, RootDeniedException {\n        return isMethod(isNameExpr, isNameExpr, isNameExpr, isIntegerConstant);\n    }"} {"path":"downloaded/RootShell.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\npublic static Shell isMethod(boolean isParameter, Shell.ShellContext isParameter) throws IOException, TimeoutException, RootDeniedException {\n        return isMethod(isNameExpr, isIntegerConstant, isNameExpr, isIntegerConstant);\n    }"} {"path":"downloaded/RootShell.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\npublic static Shell isMethod(boolean isParameter, int isParameter) throws IOException, TimeoutException, RootDeniedException {\n        return isMethod(isNameExpr, isNameExpr, isNameExpr.isFieldAccessExpr, isIntegerConstant);\n    }"} {"path":"downloaded/RootShell.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\npublic static Shell isMethod(boolean isParameter) throws IOException, TimeoutException, RootDeniedException {\n        return isNameExpr.isMethod(isNameExpr, isIntegerConstant);\n    }"} {"path":"downloaded/RootShell.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\npublic static boolean isMethod() {\n        return isMethod(isIntegerConstant, isIntegerConstant);\n    }"} {"path":"downloaded/RootShell.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\npublic static boolean isMethod(int isParameter, int isParameter) {\n        final Set<String> isVariable = new HashSet<String>();\n        final int isVariable = isIntegerConstant;\n        try {\n            isNameExpr.isMethod(\"isStringConstant\");\n            Command isVariable = new Command(isNameExpr, true, \"isStringConstant\") {\n\n                @Override\n                public void isMethod(int isParameter, String isParameter) {\n                    if (isNameExpr == isNameExpr) {\n                        isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isMethod(\"isStringConstant\")));\n                    }\n                    super.isMethod(isNameExpr, isNameExpr);\n                }\n            };\n            isNameExpr.isMethod().isMethod(isNameExpr);\n            isMethod(isNameExpr.isMethod(), isNameExpr);\n            // isComment\n            for (String isVariable : isNameExpr) {\n                isNameExpr.isMethod(isNameExpr);\n                if (isNameExpr.isMethod().isMethod(\"isStringConstant\")) {\n                    isNameExpr.isMethod(\"isStringConstant\");\n                    return true;\n                }\n            }\n            return true;\n        } catch (Exception isParameter) {\n            isNameExpr.isMethod();\n            return true;\n        }\n    }"} {"path":"downloaded/RootShell.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\npublic static boolean isMethod() {\n        return (isMethod(\"isStringConstant\", true)).isMethod() > isIntegerConstant;\n    }"} {"path":"downloaded/RootShell.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\npublic static boolean isMethod() {\n        return (isMethod(\"isStringConstant\", true)).isMethod() > isIntegerConstant;\n    }"} {"path":"downloaded/RootShell.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\npublic static boolean isMethod() {\n        return isNameExpr;\n    }"} {"path":"downloaded/Profile.java","method_name":"toString","content":"/**\n     * Creates a string that describes this Profile.\n     * @return a string with the location, direction, and color of this actor\n     */\npublic String toString()\n    {\n        return getClass().getName() + \n        \t\t\" name=\" + name +\n        \t\t\"\\n  Movement=\" + movement + \n        \t\t\"\\n  Weapon Skill=\" + weaponSkill + \n        \t\t\"\\n  Balistic Skill=\" + balisticSkill +\n        \t\t\"\\n  Strength=\" + strength +\n        \t\t\"\\n  Toughness=\" + toughness +\n        \t\t\"\\n  Wounds=\" + wounds +\n        \t\t\"\\n  Initiative=\" + strength +\n        \t\t\"\\n  Attacks=\" + attacks ;\n    }"} {"path":"downloaded/Compteur.java","method_name":"t lireCou","content":"\n\t/**\n\t * Fonction permettant de retourner le compteur\n\t * @return int cpt\n\t \n\n\tpublic int lireCount() {\n\t\treturn cpt;\n"} {"path":"downloaded/DefiniteNPOps.java","method_name":"getDefiniteNPSpan","content":"/**\n\t * Gets the span of the definite NP that subsumes a given textual unit, if any.   \n\t * \n\t * @param surf\tthe textual unit\n\t * @return the span of the definite NP that subsumes <var>surf</var>, \n\t * \t\t\tnull if it is not subsumed by a definite NP. \n\t */\npublic static SpanList getDefiniteNPSpan(SurfaceElement surf) {\n\t\tif (surf == null || surf.isNominal() == false) return null;\n\t\tSentence sent = surf.getSentence();\n\t\tif (sent == null) return null;\n\t\tList<SynDependency> embeddings = sent.getEmbeddings();\n\t\tif (embeddings == null || embeddings.size() == 0) return null;\n\t\tList<SynDependency> outDeps = SynDependency.outDependencies(surf,embeddings);\n\t\t// Is this always true? If we apply all embedding transformations, probably not.\n\t\tif (outDeps.size() ==  0) {\n\t\t\tif (surf.toWordList().size() < 2) return null;\n\t\t\tif (startsWithDefiniteDeterminer(surf)) return surf.getSpan();\n\t\t\treturn null;\n\t\t} \n\t\tCollection<SynDependency> dets = \n\t\t\t\tSynDependency.dependenciesWithTypes(outDeps, Arrays.asList(\"det\",\"amod\"), true);\n\t\tif (dets.size() == 0) {\n\t\t\t// no determiner dependencies but with determiner POS\n\t\t\t// in other words, already chunked as a definite NP\n\t\t\tif (startsWithDefiniteDeterminer(surf)) return surf.getSpan();\n\t\t}\n\t\telse {\n\t\t\tSpanList sp = surf.getSpan();\n\t\t\tfor (SynDependency d: dets) {\n\t\t\t\tSurfaceElement dep = d.getDependent();\n\t\t\t\tif (startsWithDefiniteDeterminer(dep)) {\n\t\t\t\t\tsp = SpanList.union(sp,dep.getSpan());\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn (sp.equals(surf.getSpan()) ? null: new SpanList(sp.asSingleSpan()));\n\t\t}\n\t\treturn null;\n\t}"} {"path":"downloaded/DefiniteNPOps.java","method_name":"startsWithDefiniteDeterminer","content":"/**\n\t * Gets the span of the definite NP that subsumes a given textual unit, if any.   \n\t * \n\t * @param surf\tthe textual unit\n\t * @return the span of the definite NP that subsumes <var>surf</var>, \n\t * \t\t\tnull if it is not subsumed by a definite NP. \n\t */\nprivate static boolean startsWithDefiniteDeterminer(SurfaceElement si) {\n\t\treturn (DEFINITE_DETERMINERS.contains(si.toWordList().get(0).getLemma().toLowerCase()));\n\t}"} {"path":"downloaded/Applicability.java","method_name":"toString","content":"/**\n     * The class used as the input for the document\n     */\n@Override\n    public String toString() {\n        return ObjectContracts.toString(this, \"documentTemplate\", \"domainClassName\", \"rendererModelFactoryClassName\", \"attachmentAdvisorClassName\");\n    }"} {"path":"downloaded/Applicability.java","method_name":"compareTo","content":"/**\n     * The class used as the input for the document\n     */\n@Override\n    public int compareTo(final Applicability other) {\n        return ObjectContracts.compare(this, other, \"documentTemplate\", \"domainClassName\", \"rendererModelFactoryClassName\", \"attachmentAdvisorClassName\");\n    }"} {"path":"downloaded/WorkloadIntensityEvent.java","method_name":"getTimestampMillis","content":"/**\n\t * @return the timestampMillis\n\t */\npublic final long getTimestampMillis() {\n\t\treturn this.timestampMillis;\n\t}"} {"path":"downloaded/WorkloadIntensityEvent.java","method_name":"getWorkloadIntensity","content":"/**\n\t * @return the workloadIntensity\n\t */\npublic final long getWorkloadIntensity() {\n\t\treturn this.workloadIntensity;\n\t}"} {"path":"downloaded/WorkloadIntensityEvent.java","method_name":"toString","content":"/**\n\t * @return the workloadIntensity\n\t */\n@Override\n\tpublic String toString() {\n\t\tfinal StringBuilder strB = new StringBuilder();\n\t\tstrB.append(\"timestampMillis: \").append(this.timestampMillis);\n\t\tstrB.append(\"; workloadIntensity: \").append(this.workloadIntensity);\n\t\treturn strB.toString();\n\t}"} {"path":"downloaded/CodeGenerator.java","method_name":"generateCode","content":"/** Main generate code for this tree. */\npublic Procedures generateCode(DeclNode.ProcedureNode node) {\n        beginGen(\"Program\");\n        staticLevel = node.getBlock().getBlockLocals().getLevel();\n        assert staticLevel == 1;  // Main program is at static level 1\n        /* Generate the code for the main program and all procedures */\n        visitProcedureNode(node);\n        endGen(\"Program\");\n        return procedures;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"visitBlockNode","content":"/** Generate code for a block. */\npublic Code visitBlockNode(BlockNode node) {\n        beginGen(\"Block\");\n        /** Generate code to allocate space for local variables on\n         * procedure entry.\n         */\n        Code code = new Code();\n        code.genAllocStack(node.getBlockLocals().getVariableSpace());\n        /* Generate the code for the body */\n        code.append(node.getBody().genCode(this));\n        /** Generate code for local procedures. */\n        /* Static level is one greater for the procedures. */\n        staticLevel++;\n        node.getProcedures().accept(this);\n        staticLevel--;\n        endGen(\"Block\");\n        return code;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"visitStatementErrorNode","content":"/** Code generation for an erroneous statement should not be attempted. */\npublic Code visitStatementErrorNode(StatementNode.ErrorNode node) {\n        errors.fatal(\"PL0 Internal error: generateCode for Statement Error Node\",\n                node.getLocation());\n        return null;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"visitAssignmentNode","content":"/** Code generation for an assignment statement. */\npublic Code visitAssignmentNode(StatementNode.AssignmentNode node) {\n        beginGen(\"Assignment\");\n        /* Generate code to evaluate the expression */\n        Code code = new Code();\n        /* Generate the code to load the address of the variable */\n        for(int i= 0; i < node.getExps().size(); i++) {\n        \tExpNode exp = node.getExps().get(i);\n        \tcode.append(exp.genCode(this));\n        }\n        for(int i = node.getLValues().size() - 1; i >= 0; i--) {\n        \tExpNode lValue = node.getLValues().get(i);\n        \tcode.append(lValue.genCode(this));\n        \tcode.genStore(lValue.getType());\n        }\n        endGen(\"Assignment\");\n        return code;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"visitAssignmentListNode","content":"/** Code generation for an assignment statement. */\npublic Code visitAssignmentListNode(StatementNode.AssignmentListNode node) {\n        beginGen(\"AssignmentList\");\n        /* Generate code to evaluate the expression */\n        Code code = new Code();\n        /* Generate the code to load the address of the variable */\n        for(int i= 0; i < node.getExps().size(); i++) {\n        \tExpNode exp = node.getExp(i);\n        \tcode.append(exp.genCode(this));\n        }\n        for(int i = node.getLValues().size() - 1; i >= 0; i--) {\n        \tExpNode lValue = node.getVariable(i);\n        \tcode.append(lValue.genCode(this));\n        \tcode.genStore(lValue.getType());\n        }\n        endGen(\"AssignmentList\");\n        return code;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"visitWriteNode","content":"/** Generate code for a \"write\" statement. */\npublic Code visitWriteNode(StatementNode.WriteNode node) {\n        beginGen(\"Write\");\n        Code code = node.getExp().genCode(this);\n        code.generateOp(Operation.WRITE);\n        endGen(\"Write\");\n        return code;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"visitCallNode","content":"/** Generate code for a \"call\" statement. */\npublic Code visitCallNode(StatementNode.CallNode node) {\n        beginGen(\"Call\");\n        SymEntry.ProcedureEntry proc = node.getEntry();\n        Code code = new Code();\n        /* Generate the call instruction. The second parameter is the\n         * procedure's symbol table entry. The actual address is resolved \n         * at load time.\n         */\n        code.genCall(staticLevel - proc.getLevel(), proc);\n        endGen(\"Call\");\n        return code;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"visitStatementListNode","content":"/** Generate code for a statement list */\npublic Code visitStatementListNode(StatementNode.ListNode node) {\n        beginGen(\"StatementList\");\n        Code code = new Code();\n        for(StatementNode s : node.getStatements()) {\n            code.append(s.genCode(this));\n        }\n        endGen(\"StatementList\");\n        return code;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"visitIfNode","content":"/** Generate code for an \"if\" statement. */\npublic Code visitIfNode(StatementNode.IfNode node) {\n        beginGen(\"If\");\n        /* Generate code to evaluate the condition and then and else parts */\n        Code code = node.getCondition().genCode(this);\n        Code thenCode = node.getThenStmt().genCode(this);\n        Code elseCode = node.getElseStmt().genCode(this);\n        /* Append a branch over then part code */\n        code.genJumpIfFalse(thenCode.size() + Code.SIZE_JUMP_ALWAYS);\n        /* Next append the code for the then part */\n        code.append(thenCode);\n        /* Append branch over the else part */\n        code.genJumpAlways(elseCode.size());\n        /* Finally append the code for the else part */\n        code.append(elseCode);\n        endGen(\"If\");\n        return code;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"visitWhileNode","content":"/** Generate code for a \"while\" statement. */\npublic Code visitWhileNode(StatementNode.WhileNode node) {\n        beginGen(\"While\");\n        /* Generate the code to evaluate the condition. */\n        Code code = node.getCondition().genCode(this);\n        /* Generate the code for the loop body */\n        Code bodyCode = node.getLoopStmt().genCode(this);\n        /* Add a branch over the loop body on false.\n         * The offset is the size of the loop body code plus \n         * the size of the branch to follow the body.\n         */\n        code.genJumpIfFalse(bodyCode.size() + Code.SIZE_JUMP_ALWAYS);\n        /* Append the code for the body */\n        code.append(bodyCode);\n        /* Add a branch back to the condition.\n         * The offset is the total size of the current code plus the\n         * size of a Jump Always (being generated).\n         */\n        code.genJumpAlways(-(code.size() + Code.SIZE_JUMP_ALWAYS));\n        endGen(\"While\");\n        return code;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"visitSkipNode","content":"/** Generate code for a \"skip\" statement */\npublic Code visitSkipNode(StatementNode.SkipNode node) {\n        beginGen(\"Skip\");\n        Code code = new Code();\n        endGen(\"Skip\");\n        return code;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"visitDoStatementNode","content":"/** Generate code for a \"Do\" statement */\npublic Code visitDoStatementNode(StatementNode.DoStatementNode node) {\n        beginGen(\"Do\");\n        /* Generate the code to evaluate the condition. */\n        List<DoBranchNode> branches = node.getBranches();\n        Code code = new Code();\n        /* Calculate the length of the whole code */\n        for(int i = 0; i < branches.size(); i++) {\n        \tDoBranchNode branch = branches.get(i);\n        \tCode condCode = branch.getCondition().genCode(this);\n        \tcode.append(condCode);\n        \tCode thenCode = branch.getStmt().genCode(this);\n        \tcode.genJumpIfFalse(thenCode.size() + Code.SIZE_JUMP_ALWAYS); \n        \tcode.append(thenCode);\n        \tif(branch.getFlag() == 0) {\n        \t\t// Break. The offset does not make sense.\n        \t\tcode.genJumpAlways(1);\n        \t}else if (branch.getFlag() == 1) {\n        \t\t// Loop. The offset does not make sense.      \t\t\n        \t\tcode.genJumpAlways(1);\n        \t}\n        }\n        code.genLoadConstant(3);\n        code.generateOp(Operation.STOP);\n        int length = code.size();\n        code = new Code();\n        /* Generate the code for the loop body */      \n        for(int i = 0; i < branches.size(); i++) {\n        \tDoBranchNode branch = branches.get(i);\n        \tCode condCode = branch.getCondition().genCode(this);\n        \tcode.append(condCode);\n        \tCode thenCode = branch.getStmt().genCode(this);\n        \tcode.genJumpIfFalse(thenCode.size() + Code.SIZE_JUMP_ALWAYS); \n        \tcode.append(thenCode);\n        \tif(branch.getFlag() == 0) {\n        \t\t// Break.\n        \t\tcode.genJumpAlways(length - (code.size() + Code.SIZE_JUMP_ALWAYS));\n        \t}else if (branch.getFlag() == 1) {\n        \t\t// Loop.      \t\t\n        \t\tcode.genJumpAlways(- (code.size() + Code.SIZE_JUMP_ALWAYS));\n        \t}\n        }\n        code.genLoadConstant(3);\n        code.generateOp(Operation.STOP);\n        endGen(\"Do\");\n        return code;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"visitDoBranchNode","content":"/** Generate code for a \"Do branch\" statement */\npublic Code visitDoBranchNode(StatementNode.DoBranchNode node) {\n    \tbeginGen(\"Do branch\");\n        Code code = new Code();\n        endGen(\"Do branch\");\n    \treturn code;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"visitErrorExpNode","content":"/** Code generation for an erroneous expression should not be attempted. */\npublic Code visitErrorExpNode(ExpNode.ErrorNode node) { \n        errors.fatal(\"PL0 Internal error: generateCode for ErrorExpNode\",\n                node.getLocation());\n        return null;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"visitConstNode","content":"/** Generate code for a constant expression. */\npublic Code visitConstNode(ExpNode.ConstNode node) {\n        beginGen(\"Const\");\n        Code code = new Code();\n        if(node.getValue() == 0) {\n            code.generateOp(Operation.ZERO);\n        } else if(node.getValue() == 1) {\n            code.generateOp(Operation.ONE);\n        } else {\n            code.genLoadConstant(node.getValue());\n        }\n        endGen(\"Const\");\n        return code;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"visitReadNode","content":"/** Generate code for a \"read\" expression. */\npublic Code visitReadNode(ExpNode.ReadNode node) {\n        beginGen(\"Read\");\n        Code code = new Code();\n        code.generateOp(Operation.READ);\n        endGen(\"Read\");\n        return code;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"visitOperatorNode","content":"/** Generate code for a operator expression. */\npublic Code visitOperatorNode(ExpNode.OperatorNode node) {\n        beginGen(\"Operator\");\n        Code code;\n        ExpNode args = node.getArg();\n        switch (node.getOp()) {\n        case ADD_OP:\n            code = args.genCode(this);\n            code.generateOp(Operation.ADD);\n            break;\n        case SUB_OP:\n            code = args.genCode(this);\n            code.generateOp(Operation.NEGATE);\n            code.generateOp(Operation.ADD);\n            break;\n        case MUL_OP:\n            code = args.genCode(this);\n            code.generateOp(Operation.MPY);\n            break;\n        case DIV_OP:\n            code = args.genCode(this);\n            code.generateOp(Operation.DIV);\n            break;\n        case EQUALS_OP:\n            code = args.genCode(this);\n            code.generateOp(Operation.EQUAL);\n            break;\n        case LESS_OP:\n            code = args.genCode(this);\n            code.generateOp(Operation.LESS);\n            break;\n        case NEQUALS_OP:\n            code = args.genCode(this);\n            code.generateOp(Operation.EQUAL);\n            code.genBoolNot();\n            break;\n        case LEQUALS_OP:\n            code = args.genCode(this);\n            code.generateOp(Operation.LESSEQ);\n            break;\n        case GREATER_OP:\n            /* Generate argument values in reverse order and use LESS */\n            code = genArgsInReverse((ExpNode.ArgumentsNode)args);\n            code.generateOp(Operation.LESS);\n            break;\n        case GEQUALS_OP:\n            /* Generate argument values in reverse order and use LESSEQ */\n            code = genArgsInReverse((ExpNode.ArgumentsNode)args);\n            code.generateOp(Operation.LESSEQ);\n            break;\n        case NEG_OP:\n            code = args.genCode(this);\n            code.generateOp(Operation.NEGATE);\n            break;\n        default:\n            errors.fatal(\"PL0 Internal error: Unknown operator\",\n                    node.getLocation());\n            code = null;\n        }\n        endGen(\"Operator\");\n        return code;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"visitArgumentsNode","content":"/** Generate the code to load arguments (in order) */\npublic Code visitArgumentsNode(ExpNode.ArgumentsNode node) {\n        beginGen(\"Arguments\");\n        Code code = new Code();\n        for(ExpNode exp : node.getArgs()) {\n            code.append(exp.genCode(this));\n        }\n        endGen(\"Arguments\");\n        return code;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"genArgsInReverse","content":"/** Generate operator operands in reverse order */\nprivate Code genArgsInReverse(ExpNode.ArgumentsNode args) {\n        beginGen(\"ArgsInReverse\");\n        List<ExpNode> argList = args.getArgs();\n        Code code = new Code();\n        for(int i = argList.size()-1; 0 <= i; i--) {\n            code.append(argList.get(i).genCode(this));\n        }\n        endGen(\"ArgsInReverse\");\n        return code;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"visitDereferenceNode","content":"/** Generate code to dereference an RValue. */\npublic Code visitDereferenceNode(ExpNode.DereferenceNode node) {\n        beginGen(\"Dereference\");\n        Code code = node.getLeftValue().genCode(this);\n        code.genLoad(node.getType());\n        endGen(\"Dereference\");\n        return code;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"visitIdentifierNode","content":"/** Generate code for an identifier. */\npublic Code visitIdentifierNode(ExpNode.IdentifierNode node) {\n        /** Visit the corresponding constant or variable node. */\n        errors.fatal(\"Internal error: code generator called on IdentifierNode\",\n                node.getLocation());\n        return null;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"visitVariableNode","content":"/** Generate code for a variable (Exp) reference. */\npublic Code visitVariableNode(ExpNode.VariableNode node) {\n        beginGen(\"Variable\");\n        SymEntry.VarEntry var = node.getVariable();\n        Code code = new Code();\n        code.genMemRef(staticLevel - var.getLevel(), var.getOffset());\n        endGen(\"Variable\");\n        return code;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"visitNarrowSubrangeNode","content":"/** Generate code to perform a bounds check on a subrange. */\npublic Code visitNarrowSubrangeNode(ExpNode.NarrowSubrangeNode node) {\n        beginGen(\"NarrowSubrange\");\n        Code code = node.getExp().genCode(this);\n        code.genBoundsCheck(node.getSubrangeType().getLower(), \n                node.getSubrangeType().getUpper());\n        endGen(\"NarrowSubrange\");\n        return code;\n    }"} {"path":"downloaded/CodeGenerator.java","method_name":"visitWidenSubrangeNode","content":"/** Generate code to widen a subrange to an integer. */\npublic Code visitWidenSubrangeNode(ExpNode.WidenSubrangeNode node) {\n        beginGen(\"WidenSubrange\");\n        // Widening doesn't require anything extra\n        Code code = node.getExp().genCode(this);\n        endGen(\"WidenSubrange\");\n        return code;\n    }"} {"path":"downloaded/Token.java","method_name":"public static","content":"/**\n     * 将给定token 转换为token对象返回\n     * @param token\n  \n@return\n     */\n    public static Token parseTokenObj(String token) throws IllegalTokenException{\n        String[] tokenArr=token.split(\"\\\\.\");\n        if(tokenArr.length!=3){\n            throw new IllegalTokenException(\"非法Token！\");\n        }\n        String tokenHeaderStr= PracticalUtil.base64Decoder(tokenArr[0]);\n        String tokenPayloadStr=PracticalUtil.base64Decoder(tokenArr[1]);\n        String userSignature=tokenArr[2];\n        TokenHeader tokenHeader=JSONObject.parseObject(tokenHeaderStr,TokenHeader.class);\n        TokenPayload tokenPayload=JSONObject.parseObject(tokenPayloadStr,TokenPayload.class);\n        Token tokenObj=new Token(tokenHeader,tokenPayload,userSignature);\n    "} {"path":"downloaded/Token.java","method_name":"  * @return\n","content":"/**\n     * 将给定token 转换为token对象返回\n     * @param token\n  \n    * @param token\n     * @return\n     */\n    public static boolean isTokenValid(String token){\n        String[] tokenArr=token.split(\"\\\\.\");\n        String signature=DigestUtils.sha256Hex(tokenArr[0]+\".\"+tokenArr[1]+secret);\n        if(signature.equals(tokenArr[2])){\n            return true;\n        }e"} {"path":"downloaded/Token.java","method_name":"urn false;\n ","content":"/**\n     * 将给定token 转换为token对象返回\n     * @param token\n  \n           return false;\n        }\n    }\n\n    public String ge"} {"path":"downloaded/Token.java","method_name":"nature","content":"/**\n     * 将给定token 转换为token对象返回\n     * @param token\n  \n    return signature;\n    }\n\n    //header\n    public String ge"} {"path":"downloaded/Token.java","method_name":"kenHea","content":"/**\n     * 将给定token 转换为token对象返回\n     * @param token\n  \n) {\n        tokenHeader.typ = typ;\n    }\n\n    public String ge"} {"path":"downloaded/Token.java","method_name":" = alg","content":"/**\n     * 将给定token 转换为token对象返回\n     * @param token\n  \nokenHeader.alg = alg;\n    }\n    //payload\n    public String get"} {"path":"downloaded/Token.java","method_name":"enPayl","content":"/**\n     * 将给定token 转换为token对象返回\n     * @param token\n  \n {\n        tokenPayload.iss = iss;\n    }\n\n    public String get"} {"path":"downloaded/Token.java","method_name":"enPayl","content":"/**\n     * 将给定token 转换为token对象返回\n     * @param token\n  \n {\n        tokenPayload.sub = sub;\n    }\n\n    public String get"} {"path":"downloaded/Token.java","method_name":"enPayl","content":"/**\n     * 将给定token 转换为token对象返回\n     * @param token\n  \n {\n        tokenPayload.aud = aud;\n    }\n\n    public String get"} {"path":"downloaded/Token.java","method_name":"enPayl","content":"/**\n     * 将给定token 转换为token对象返回\n     * @param token\n  \n {\n        tokenPayload.exp = exp;\n    }\n\n    public String get"} {"path":"downloaded/Token.java","method_name":"enPayl","content":"/**\n     * 将给定token 转换为token对象返回\n     * @param token\n  \n {\n        tokenPayload.nbf = nbf;\n    }\n\n    public String get"} {"path":"downloaded/Token.java","method_name":"enPayl","content":"/**\n     * 将给定token 转换为token对象返回\n     * @param token\n  \n {\n        tokenPayload.iat = iat;\n    }\n\n    public String get"} {"path":"downloaded/Token.java","method_name":"enPayload.j","content":"/**\n     * 将给定token 转换为token对象返回\n     * @param token\n  \n {\n        tokenPayload.jti = jti;\n    }\n\n    public String getUserCode()"} {"path":"downloaded/NameUtil.java","method_name":"isValidUserDefinedDatabaseName","content":"/**\n   * Determines whether or not the given name is valid for a user-defined\n   * entity in the database. Valid names are determined to not begin with a\n   * single underscore, not to begin with a digit, and to contain only unicode\n   * appropriate word characters.\n   *\n   * @param name The string to be looked up in the list of definitely not allowed words\n   * @return true if valid else false\n   */\npublic static boolean isValidUserDefinedDatabaseName(String name) {\n    boolean matchHit = letterFirstPattern.matcher(name).matches();\n    // TODO: uppercase is bad...\n    boolean reserveHit =\n        Collections.binarySearch(reservedNamesSortedList, name.toUpperCase(Locale.US)) >= 0;\n    return !reserveHit && matchHit;\n  }"} {"path":"downloaded/NameUtil.java","method_name":"constructSimpleDisplayName","content":"/**\n   * Used in ColumnUtil, TableUtil, FormsProvider, OdkResolveConflictRowLoader,\n   * ODkResolveConflictFieldLoader, OdkResolveCheckpointRowLoader,\n   * OdkResolveCheckpointFieldLoader and SyncExecutionContext\n   *\n   * @param name a name that might have underscores\n   * @return A suitable display name given the passed string\n   */\n@SuppressWarnings(\"WeakerAccess\")\n  public static String constructSimpleDisplayName(String name) {\n    String displayName = name.replaceAll(\"_\", \" \");\n    if (displayName.startsWith(\" \")) {\n      displayName = \"_\" + displayName;\n    }\n    if (displayName.endsWith(\" \")) {\n      displayName += \"_\";\n    }\n    Map<String, Object> displayEntry = new HashMap<>();\n    displayEntry.put(\"text\", displayName);\n    try {\n      return ODKFileUtils.mapper.writeValueAsString(displayEntry);\n    } catch (JsonProcessingException e) {\n      WebLogger.getContextLogger().printStackTrace(e);\n      throw new IllegalStateException(\"constructSimpleDisplayName: \" + displayName);\n    }\n  }"} {"path":"downloaded/NameUtil.java","method_name":"normalizeDisplayName","content":"/**\n   * Used in MediaCaptureVideoActivity, MediaCaptureImageActivity, MediaDeleteAudioActivity,\n   * MediaChooseAudioActivity, MediaCaptureAudioActivity, MediaChooseImageActivity,\n   * DeviceSettingsFragment, MediaDeleteImageActivity, MediaChooseVideoActivity,\n   * MediaDeleteVideoActivity\n   *\n   * @param displayName a display name to normalize\n   * @return a normalized version of that display name\n   */\n@SuppressWarnings(\"WeakerAccess\")\n  public static String normalizeDisplayName(String displayName) {\n    // TODO this seems backwards\n    //noinspection UnnecessaryParentheses\n    if ((displayName.startsWith(\"\\\"\") && displayName.endsWith(\"\\\"\")) || (displayName.startsWith(\"{\")\n        && displayName.endsWith(\"}\"))) {\n      return displayName;\n    } else {\n      try {\n        return ODKFileUtils.mapper.writeValueAsString(displayName);\n      } catch (JsonProcessingException e) {\n        WebLogger.getContextLogger().printStackTrace(e);\n        throw new IllegalArgumentException(\n            \"normalizeDisplayName: Invalid displayName \" + displayName);\n      }\n    }\n  }"} {"path":"downloaded/AddElectiveToMajorWindow.java","method_name":"createScene","content":"/**\n     *\n     * @param codeName\n     * @return\n     */\npublic static Scene createScene(String codeName) {\n        majorCodeName = codeName;\n        //createListView(majorCodeName);\n        createListOfAllElectives();\n        addFields();\n        GridPane grid = createLayout();\n        Button btn = new Button();\n        StackPane root = new StackPane();\n        root.getChildren().add(grid);\n        \n        Scene scene = new Scene(root, 360, 200);\n        return scene;\n    }"} {"path":"downloaded/AddElectiveToMajorWindow.java","method_name":"createLayout","content":"/**\n     *\n     * @param codeName\n     * @return\n     */\nprivate static GridPane createLayout() {\n        GridPane grid = new GridPane();\n        grid.addColumn(0, totalCreditsLabel, cancelButton);\n        grid.addColumn(1, totalCreditsField, ELECTIVENAMELABEL, allElectives, addElectiveToMajorButton);\n        return grid;\n    }"} {"path":"downloaded/CommentListLazyModel.java","method_name":"count","content":"/**\n\t * \n\t */\n@Override\n\tpublic int count(Map<String, FilterMeta> filterBy) {\n\t\t\n\t\tQueryMeta.Builder<Comment> builder = LazyModelUtil.queryBuilder(Comment.class, filterBy);\n\t\t\n\t\tbuilder.filterMeta(\"discussion\", this.discussion, QueryFilterMeta.MatchMode.EQUALS);\n\t\t\n\t\treturn this.genericService.countEntities2(builder.build()).getDataObject().intValue();\n\t}"} {"path":"downloaded/CommentListLazyModel.java","method_name":"load","content":"/**\n\t * \n\t */\n@Override\n\tpublic List<Comment> load(int first, int pageSize, Map<String, SortMeta> sortBy, Map<String, FilterMeta> filterBy) {\n\t\tlogger.debug(\"first is \" + first + \", pageSize is \" + pageSize);\n\t\t\n\t\tQueryMeta.Builder<Comment> builder = LazyModelUtil.queryBuilder(Comment.class, sortBy, filterBy);\n\t\t\n\t\tbuilder.filterMeta(\"discussion\", this.discussion, QueryFilterMeta.MatchMode.EQUALS);\n\t\tbuilder.sortMeta(\"id\", SortOrder.ASCENDING, false);\n\t\t\n\t\treturn this.genericService.getEntities2(builder.startIndex(first).\n\t\t\t\tmaxResult(pageSize).build()).getDataObject();\n\t}"} {"path":"downloaded/SkinNotAvailable.java","method_name":"getSkinNotAvailable","content":"/**\n   * returns the singleton instance of this class.\n   */\npublic static SkinNotAvailable getSkinNotAvailable()\n  {\n    return _INSTANCE;\n  }"} {"path":"downloaded/SkinNotAvailable.java","method_name":"getStyleSheetName","content":"/**\n   * returns the singleton instance of this class.\n   */\n@Override\n  public String getStyleSheetName()\n  {\n    return null;\n  }"} {"path":"downloaded/SkinNotAvailable.java","method_name":"getTranslatedValue","content":"/**\n   * returns the singleton instance of this class.\n   */\npublic Object getTranslatedValue(\n    LocaleContext lContext,\n    String        namespace,\n    String        key\n    )\n  {\n    return \"!!!No Skin[\" + key + \"]!!!\";\n  }"} {"path":"downloaded/SkinNotAvailable.java","method_name":"getBundleName","content":"/**\n   * returns the singleton instance of this class.\n   */\n@Override\n  protected String getBundleName()\n  {\n    return null;\n  }"} {"path":"downloaded/SkinNotAvailable.java","method_name":"getTranslationSourceValueBinding","content":"/**\n   * returns the singleton instance of this class.\n   */\n@Override\n  protected ValueBinding getTranslationSourceValueBinding()\n  {\n    return null;\n  }"} {"path":"downloaded/DefaultBeanMapperRule.java","method_name":"public Strin","content":"/**\n     * 取表名\n     *\n     * @param className 类名\n     * @return \n�\n     */\n    @Override\n    public String getTableName(String className) {\n        return cl"} {"path":"downloaded/DefaultBeanMapperRule.java","method_name":"  @Overrid","content":"/**\n     * 取表名\n     *\n     * @param className 类名\n     * @return \n * @return 列名\n     */\n    @Override\n    public String getColName(String fieldName) {\n "} {"path":"downloaded/DefaultBeanMapperRule.java","method_name":"turn 类名\n","content":"/**\n     * 取表名\n     *\n     * @param className 类名\n     * @return \n tableName 表名\n     * @return 类名\n     */\n    @Override\n    public String getClassName"} {"path":"downloaded/DefaultBeanMapperRule.java","method_name":" colName\n   ","content":"/**\n     * 取表名\n     *\n     * @param className 类名\n     * @return \n�性名\n     *\n     * @param colName\n     * @return 属性名\n     */\n    @Override\n    "} {"path":"downloaded/PseudoRFRetrievalModel.java","method_name":"RetrieveQuery","content":"/**\n\t * Search for the topic with pseudo relevance feedback in 2020 Fall assignment 4.\n\t * Returned results (retrieved documents) should be ranked by the score (from the most relevant to the least).\n\t * This method will return the retrieved result of the given query, and this result is enhanced with pseudo RF.\n\t * \n\t * @param aQuery The query to be searched for\n\t * @param TopN The maximum number of returned documents\n\t * @param TopK The count of feedback documents\n\t * @param alpha parameter of relevance feedback model\n\t * @return TopN most relevant document, in List structure\n\t * @throws Exception\n\t */\npublic List<Classes.Document> RetrieveQuery(Classes.Query cQuery, int TopN, int TopK, double alpha) throws Exception { \n\t\t// Get P(token|feedback model)\n\t\tHashMap<String, Double> TokenRFScore = GetTokenRFScore(cQuery, TopK);\n\n\t\t// Store sorted top N results (from most relevant to least)\n\t\tList<Classes.Document> rankedList = new ArrayList<>();\n\t\t\n\t\t// Get query's content as input into retrieval model\n\t\tString[] tokens = cQuery.getQueryContent().split(\" \");\n\t\tList<DocScore> docScoreList = new ArrayList<>();\n\t\tqueryResult.forEach((luceneID, tfMap) -> {\n\t\t     int doclen = 0;\n\t\t     double score = 1.0;\n\t\t     try {\n\t\t         doclen = myireader.docLength(luceneID);\n\t\t     } catch (Exception e) {\n\t\t    \t e.printStackTrace();\n\t\t     };\n\t\t    \n\t\t     /**\n\t\t\t  * Dirichlet Prior Smoothing:\n\t\t\t  * p(w|D) = (|D|/(|D|+MU))*(c(w,D)/|D|) + (MU/(|D|+MU))*p(w|REF)\n\t\t      * score = λ*p_doc + (1-λ)*p_ref\n\t\t      *       = c1*p_doc + c2*p_ref\n\t\t\t  */\n\t\t     double c1 = doclen / (doclen + MU);\n\t\t     double c2 = MU / (doclen + MU);\n\t\t     for(String token : tokens) {\n\t\t    \t long cf = termFreq.get(token);\n\t\t    \t if(cf == 0) {\t\n\t\t    \t\t continue;\n\t\t    \t }\n\t\t         \n\t\t    \t int tf = tfMap.getOrDefault(token, 0);\n\t\t    \t double p_doc = (double) tf / doclen; // c(w, D)\n\t\t    \t double p_ref = (double) cf / CORPUS_SIZE; // p(w|REF)\n\t\t    \t \n\t\t    \t // Get the final probability of each token with pseudo RF score\n\t\t    \t score *= alpha * (c1 * p_doc + c2 * p_ref) + (1 - alpha) * TokenRFScore.get(token);\n\t\t     }\n\t\t      \n\t\t     DocScore docScore = new DocScore(luceneID, score);\n\t\t     docScoreList.add(docScore);\n\t\t}); // The end of forEach loop block\n\n\t\t// Sort the result List \n\t\tCollections.sort(docScoreList, new Comparator<DocScore>() {\n\t\t\t@Override\n\t\t\tpublic int compare(DocScore ds1, DocScore ds2) {\n\t\t\t\tif(ds1.score != ds2.score) {\n\t\t\t\t\treturn ds1.score < ds2.score ? 1 : -1;\n\t\t\t\t} else {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// Put all documents into result list\n\t\tfor(int n = 0; n < TopN; n++) {\n\t\t     DocScore docScore = docScoreList.get(n);\n\t\t     Classes.Document doc = null;\n\t\t     try {\n\t\t    \t int luceneID = docScore.getId(); // Get Lucene id\n\t\t    \t doc = new Document(Integer.toString(luceneID), \n\t\t    \t\t\t  \t\t\tmyireader.getDocno(luceneID), \n\t\t    \t\t\t            docScore.getScore(),\n\t\t    \t\t\t            dreader.document(luceneID).get(\"restName\"),\n\t\t    \t\t\t            dreader.document(luceneID).get(\"restUrl\"),\n\t\t    \t\t\t            dreader.document(luceneID).get(\"originalContent\"));\n\t\t     } catch(Exception e) {\n\t\t    \t e.printStackTrace();\n\t\t     };\n\t\t     \n\t\t     rankedList.add(doc);\n\t\t}\n\n\t\treturn rankedList;\n"} {"path":"downloaded/PseudoRFRetrievalModel.java","method_name":"> GetTokenRFSco","content":"\n\t/**\n\t * For each token in the query, calculate token's score in feedback documents: \n\t * P(token|feedback documents). Use Dirichlet smoothing.\n\t * \n\t * @param aQuery\n\t * @param TopK\n\t * @return\n\t * @throws Exception\n\t \n\n\tpublic HashMap<String, Double> GetTokenRFScore(Query aQuery, int TopK) throws Exception {\n\t\t// Store <token, score> for being returned\n\t\tHashMap<String, Double> TokenRFScore = new HashMap<>();\n\t\t\n\t\t// Get tokens in the given query\n\t    String[] tokens = aQuery.getQueryContent().split(\" \");\n\t    \n\t    // Get feedback docs by the given query using feedback retrieval model\n\t    List<Classes.Document> feedbackDocs = new QueryRetrievalModel().retrieveQuery(aQuery, TopK);\n\n\t    // Initiate qeuryResult map <docid, <term, tf>> and termFreq map <term, cf>\n\t    queryResult = new HashMap<>();\n\t    termFreq = new HashMap<>();\n\n\t    // Search each token appearing in the given query \n\t    for(String token : tokens) {\n\t    \t// Determine whether the current token exists in collection \n\t    \tlong cf = myireader.CollectionFreq(token);\n\t    \ttermFreq.put(token, cf);\n\t    \tif(cf == 0) {\n\t    \t\tcontinue;  \n\t    \t}\n\t        \n\t    \tint[][] postingList = myireader.getPostingList(token);\n\t    \tfor(int[] posting : postingList) {\n\t    \t\tif(!queryResult.containsKey(posting[0])) { // posting[0]: docid\n\t    \t\t\tHashMap<String, Integer> tfMap = new HashMap<>();\n\t    \t\t\ttfMap.put(token, posting[1]); // posting[1]: tf\n\t    \t\t\tqueryResult.put(posting[0], tfMap);\n\t    \t\t} else {\n\t    \t\t\tqueryResult.get(posting[0]).put(token, posting[1]);\n\t    \t\t}\n\t    \t}\n\t    }\n\t    /*\n\t\t * After the for loop, we have the map <docid, <term, term_freq>> for each doc to all terms in the query\n\t\t * tokens = [Hong, Kong, economics, Singapore]\n\t\t * \n\t\t * queryResult : <docid, <term, term_freq>>\n\t\t *                    1,  hong, 15\n\t\t *                        Singapore, 3\n\t\t *                    3,  Singapore, 1\n\t\t *                        kong, 10\n\t\t *                        economics, 30\n\t\t *                  ...,  ...\n\t\t */\t\n\n\t    // Here all feedback docs are treated as one big pseudo document!!!!!!\n\t    int len = 0;\n\t    // Store <term, tf>\n\t    Map<String, Integer> pseudoDoc = new HashMap<>();\n\t    for(Classes.Document doc : feedbackDocs) {\n\t    \tqueryResult.get(Integer.parseInt(doc.getLuceneID())).forEach((term, tf) -> { // Iterate each tfMap\n\t    \t\tif(!pseudoDoc.containsKey(term)) {\n\t    \t\t\tpseudoDoc.put(term, tf);\n\t    \t\t} else {\n\t    \t\t\tpseudoDoc.put(term, tf + pseudoDoc.get(term));\n\t    \t\t}\n\t    \t});\n\t    \t\n\t    \t// Accumulate by the current doc's length\n\t    \tlen += myireader.docLength(Integer.parseInt(doc.getLuceneID()));\n\t    }\n\t  \n\t    /**\n\t\t  * Dirichlet Prior Smoothing:\n\t\t  * p(w|D) = (|D|/(|D|+MU))*(c(w,D)/|D|) + (MU/(|D|+MU))*p(w|REF)\n\t      * score = λ*p_doc + (1-λ)*p_ref\n\t      *       = c1*p_doc + c2*p_ref\n\t\t  */\n\t    int pseudoLen = len;\n\t    double c1 = pseudoLen / (pseudoLen + MU);\n\t    double c2 = MU / (pseudoLen + MU);\n\t    // Calculate the probability of pseudoDoc generating each term\n\t    pseudoDoc.forEach((token, tf) -> {\n\t    \tlong cf = termFreq.get(token);\n\t    \tdouble pDoc = (double) tf / pseudoLen; // p(w|D)\n\t    \tdouble pRef = (double) cf / CORPUS_SIZE; // p(w|REF)\n\t    \tdouble score = c1 * pDoc + c2 * pRef;\n\t    \t\n\t    \t// Get the RF probability of each token  \n\t    \tTokenRFScore.put(token, score); \n\t    });\n\n\t\treturn TokenRFScore"} {"path":"downloaded/DipoleCorrectorAgent.java","method_name":"getFieldAdaptor","content":"/**\n\t * Get the electromagnet field adaptor.\n\t * @return the electromagnet field adaptor\n\t */\nprotected ElectromagnetFieldAdaptor getFieldAdaptor() {\n\t\treturn FIELD_ADAPTOR;\n\t}"} {"path":"downloaded/ExtendedRefHSDMW.java","method_name":"getHsExtendedRefSize","content":"/**\n     * @return The number of SomeRelation items.\n     */\npublic int getHsExtendedRefSize(){\n        return(((ExtendedRefHSDMO) core).getHsExtendedRefSize());\n    }"} {"path":"downloaded/ExtendedRefHSDMW.java","method_name":"getHsExtendedRefIsEmpty","content":"/**\n     * @return true if there are no SomeRelationDMO items.\n     */\npublic boolean getHsExtendedRefIsEmpty(){\n        if (((ExtendedRefHSDMO) core).getHsExtendedRefSize() == 0)\n            return(true);\n        return(false);\n    }"} {"path":"downloaded/ExtendedRefHSDMW.java","method_name":"getHsExtendedRefHasValue","content":"/**\n     * @return true if there are any SomeRelationDMO items.\n     */\npublic boolean getHsExtendedRefHasValue(){\n        if (((ExtendedRefHSDMO) core).getHsExtendedRefSize() == 0)\n            return(false);\n        return(true);\n    }"} {"path":"downloaded/ExtendedRefHSDMW.java","method_name":"getHsExtendedRefIterable","content":"/**\n     * @return An Iterator of SomeRelationDMO objects.\n     */\npublic SomeRelationIterableDMW getHsExtendedRefIterable(){\n        DmcAttribute<?> attr = core.get(DmtDMSAG.__hsExtendedRef);\n        if (attr == null)\n            return(SomeRelationIterableDMW.emptyList);\n        \n        return(new SomeRelationIterableDMW(((ExtendedRefHSDMO) core).getHsExtendedRef()));\n    }"} {"path":"downloaded/ExtendedRefHSDMW.java","method_name":"addHsExtendedRef","content":"/**\n     * Adds another hsExtendedRef value.\n     * @param value A value compatible with SomeRelation\n     */\npublic DmcAttribute<?> addHsExtendedRef(SomeRelation value){\n        DmcAttribute<?> attr = ((ExtendedRefHSDMO) core).addHsExtendedRef(value);\n        return(attr);\n    }"} {"path":"downloaded/ExtendedRefHSDMW.java","method_name":"getHsExtendedRefCopy","content":"/**\n     * @return A COPY of the collection of SomeRelation objects.\n     */\npublic HashSet<ObjWithRefs> getHsExtendedRefCopy(){\n        DmcAttribute<?> attr = ((ExtendedRefHSDMO) core).get(DmtDMSAG.__hsExtendedRef);\n        if (attr == null)\n            return(new HashSet<ObjWithRefs>());\n        \n        HashSet<ObjWithRefs> rc = new HashSet<ObjWithRefs>();\n        \n        SomeRelationIterableDMW it = getHsExtendedRefIterable();\n        while(it.hasNext()){\n            rc.add(it.next());\n        }\n        \n        return(rc);\n    }"} {"path":"downloaded/PermissionUsageStats.java","method_name":"isGranted","content":"/**\n     * {@inheritDoc}\n     */\npublic boolean isGranted() {\n        final String packageName = PackageUtils.getName(mContext);\n        final int uid;\n        try {\n            uid = mPackageManager.getApplicationInfo(packageName, 0).uid;\n        } catch (PackageManager.NameNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n\n        int result = getAppOpsManager().checkOp(AppOpsManager.OPSTR_GET_USAGE_STATS, uid, packageName);\n        return result == AppOpsManager.MODE_ALLOWED;\n    }"} {"path":"downloaded/PermissionUsageStats.java","method_name":"getAppOpsManager","content":"/**\n     * {@inheritDoc}\n     */\n@NonNull\n    private AppOpsManager getAppOpsManager() {\n        return (AppOpsManager) mContext.getSystemService(Context.APP_OPS_SERVICE);\n    }"} {"path":"downloaded/PermissionUsageStats.java","method_name":"getIntentSettings","content":"/**\n     * {@inheritDoc}\n     */\n@NonNull\n    @Override\n    public Intent getIntentSettings() {\n        return new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);\n    }"} {"path":"downloaded/PermissionUsageStats.java","method_name":"getIconResource","content":"/**\n     * {@inheritDoc}\n     */\n@DrawableRes\n    public int getIconResource() {\n        return R.drawable.ic_settings_apps_white;\n    }"} {"path":"downloaded/PermissionUsageStats.java","method_name":"getTitleResource","content":"/**\n     * {@inheritDoc}\n     */\n@StringRes\n    public int getTitleResource() {\n        return R.string.permissions_usage_stats;\n    }"} {"path":"downloaded/PermissionUsageStats.java","method_name":"getSummaryResource","content":"/**\n     * {@inheritDoc}\n     */\n@StringRes\n    public int getSummaryResource() {\n        return R.string.permissions_usage_stats_description;\n    }"} {"path":"downloaded/PermissionUsageStats.java","method_name":"getErrorResource","content":"/**\n     * {@inheritDoc}\n     */\n@StringRes\n    public int getErrorResource() {\n        return R.string.permissions_usage_stats_error;\n    }"} {"path":"downloaded/CostVisitor.java","method_name":"void ","content":"/**\n\t * Instanciation du visiteur destiné à calculer le cout d'un arbre de\n\t * requêtes sur un site\n\t * \n\t * @param site\n\t *            Le site depuis lequel on execute la requête\n\t * @param racine\n\t *            L'arbre de requêtes\n\t}\n\n\t@Override\n\tpublic void visit(VariableTable r) throws MVisitorException {\n\t\t// VariableTable : cas de base\n\n\t\t/*\n\t\t * si feuille : représente un résultat déjà calculé. Il ne faut pas le\n\t\t * prendre en compte dans le coût\n\t\t */\n\t\tif (r.getRelation() == null && !BD.isATable(r)) {\n\t\t\treturn;\n\t\t\t// TODO : vérifier que les res inter ont bien un fils nul\n\t\t}\n\n\t\t/*\n\t\t * Si ce n'est pas une feuille, c'est un soit une table, soit un\n\t\t * résultat intermédiaire à calculer et à envoyer sur un autre site\n\t\t */\n\t\t// Cas table : on la rapatrie sur le site courant\n\t\tif (BD.isATable(r)) {\n\t\t\tTable t = BD.getTable(r);\n\t\t\tString siteT = BD.isHostedOn(t);\n\t\t\tthis.nbtuples = t.tupleCount();\n\n\t\t\tif (siteT.equals(site)) {\n\t\t\t\t// super, on est déjà sur le bon site\n\t\t\t} else {\n\t\t\t\t// on calcule le cout de transfert par tuple\n\t\t\t\tfloat coutTransfert = cost(site, siteT);\n\t\t\t\t// on a le cout total grace au nb de tuples\n\t\t\t\tthis.cout = coutTransfert * this.nbtuples;\n\t\t\t\tprint(coutTransfert);\n\t\t\t}\n\t\t}\n\t\t// Cas res interm. Le site dest est indiqué par l'attribut site de la\n\t\t// VariableTable\n\t\telse {\n\t\t\t// on visite d'abord la descendance\n\t\t\tr.getRelation().maccept(this);\n\n\t\t\tString siteD = r.getSite();\n\t\t\tif (siteD == null || siteD == \"\")\n\t\t\t\t// Anomalie, on ne fait rien\n\t\t\t\treturn;\n\n\t\t\tif (siteD.equals(site)) {\n\t\t\t\t// à priori ne devrait pas arriver mais pourquoi pas\n\t\t\t\t// le cout ne change pas\n\t\t\t} else {\n\t\t\t\t// on calcule le cout de transfert par tuple\n\t\t\t\tfloat coutTransfert = cost(siteD, site);\n\t\t\t\t// ici le nb de tuples est celui calculé par les visites des\n\t\t\t\t// fils si le visiteur n'est pas tombé sur une VariableTable\n\t\t\t\t// représentant une table plutôt, on aura un cout faux\n\t\t\t\tthis.cout = coutTransfert * this.nbtuples;\n\t\t\t\tprint(cout"} {"path":"downloaded/CostVisitor.java","method_name":"\t@Ove","content":"/**\n\t * Instanciation du visiteur destiné à calculer le cout d'un arbre de\n\t * requêtes sur un site\n\t * \n\t * @param site\n\t *            Le site depuis lequel on execute la requête\n\t * @param racine\n\t *            L'arbre de requêtes\nthis.nbtuples=tmp;\n\t}\n\n\t@Override\n\tpublic void visit(Table r) throws MVisitorException {\n\t\t// ne devrait pas arriver mais pour le fun :\n\n\t\tif (BD.isHostedOn(r) == null)\n\t\t\t// la table n'est pas hébergée sur un site\n\t\t\treturn;\n\n\t\tString siteT = BD.isHostedOn(r);\n\t\tthis.nbtuples = r.tupleCount();\n\n\t\tif (siteT.equals(site)) {\n\t\t\t// super, on est déjà sur le bon site\n\t\t} else {\n\t\t\t// on calcule le cout de transfert par tuple\n\t\t\tfloat coutTransfert = cost(site, siteT);\n\t\t\t// on a le cout total grace au nb de tuples\n\t\t\tthis.cout = coutTransfert * this.nbtuples;\n\t\t\tp"} {"path":"downloaded/CostVisitor.java","method_name":"btuples","content":"/**\n\t * Instanciation du visiteur destiné à calculer le cout d'un arbre de\n\t * requêtes sur un site\n\t * \n\t * @param site\n\t *            Le site depuis lequel on execute la requête\n\t * @param racine\n\t *            L'arbre de requêtes\nsfert, this.nbtuples);\n\t}\n\n\tpublic float g"} {"path":"downloaded/CostVisitor.java","method_name":"lcul futur)","content":"/**\n\t * Instanciation du visiteur destiné à calculer le cout d'un arbre de\n\t * requêtes sur un site\n\t * \n\t * @param site\n\t *            Le site depuis lequel on execute la requête\n\t * @param racine\n\t *            L'arbre de requêtes\ns gauche (calcul futur)\n\t */\n\tprivate int BinaryVisit(BinaryRelation r) throws MVisitorException {\n\t\t// on stocke les couts initiaux\n\t\tfloat coutInit = this.cout;\n\t\tint nbTuplesInit = this.nbtuples;\n\n\t\tr.getLeft().maccept(this);\n\n\t\t// on stocke\n\t\tfloat coutLeft = this.cout;\n\t\tint nbTuplesLeft = this.nbtuples;\n\n\t\t//on remet les couts initiaux\n\t\tthis.cout = coutInit;\n\t\tthis.nbtuples = nbTuplesInit;\n\n\t\tr.getRight().maccept(this);\n\n\t\t// le cout total = coutLeft + coutRight\n\t\tthis.cout += coutLeft;\n\n\t\t// on retourne le nb de tuples de Left\n\t\t// car le nb de tuples à remonter dépend de left, right et de\n\t\t// l'opé"} {"path":"downloaded/CostVisitor.java","method_name":"alcul fut","content":"/**\n\t * Instanciation du visiteur destiné à calculer le cout d'un arbre de\n\t * requêtes sur un site\n\t * \n\t * @param site\n\t *            Le site depuis lequel on execute la requête\n\t * @param racine\n\t *            L'arbre de requêtes\n des n fils (calcul futur)\n\t */\n\tprivate int[] NAryVisit(NAryRelation r) throws MVisitorException {\n\t\t// on stocke les couts initiaux\n\t\tfloat coutInit = this.cout;\n\t\tint nbTuplesInit = this.nbtuples;\n\n\t\t//variables de stockage\n\t\tfloat[] coutTmp = new float[r.getArity()];\n\t\tint[] nbTuplesTmp = new int[r.getArity()];\n\n\t\tRelation relation;\n\t\tList<Relation> list = r.getRelations();\n\t\tfor (int i=0; i<r.getArity(); i++ ) {\n\t\t\trelation = list.get(i);\n\t\t\t//on mets les couts initiaux\n\t\t\tthis.cout = coutInit;\n\t\t\tthis.nbtuples = nbTuplesInit;;\n\t\t\t\n\t\t\trelation.maccept(this);\n\t\t\t\n\t\t\t//on commence à stocker\n\t\t\tcoutTmp[i]=cout;\n\t\t\tnbTuplesTmp[i]=nbtuples;\n\t\t}\n\t\tfloat c = 0;\n\t\tfor (int i = 0; i < coutTmp.length; i++) {\n\t\t\tc+=coutTmp[i];\n\t\t}\n\t\tthis.c"} {"path":"downloaded/CostVisitor.java","method_name":"smis","content":"/**\n\t * Instanciation du visiteur destiné à calculer le cout d'un arbre de\n\t * requêtes sur un site\n\t * \n\t * @param site\n\t *            Le site depuis lequel on execute la requête\n\t * @param racine\n\t *            L'arbre de requêtes\nrn le cout de la transmission\n\t */\n\tprivate static float cost(String siteDest, String siteInitial) {\n\t\tfloat res = 0;\n\t\tif (siteDest.equals(siteInitial))\n\t\t\t;\n\t\telse if (!BD.coutsStockage.containsKey(siteDest))\n\t\t\t;\n\t\telse if (BD.coutsComm.get(siteDest, siteInitial) < 0)\n\t\t\t;\n\t\telse\n\t\t\tres = BD.coutsStockage.get(siteDest)\n\t\t\t+ BD.coutsComm.get(siteDest, siteInitial);"} {"path":"downloaded/FirstInformation.java","method_name":"章**/\n\tp","content":"\t/** 单位�\n��险公司印章**/\n\tprivate String insuranceC"} {"path":"downloaded/FirstInformation.java","method_name":"�**/\n\tprivate String","content":"\t/** 单位�\nnt;\n\t/** 条款**/\n\tprivate String clause;\n\tpublic String getTeamId()"} {"path":"downloaded/FirstInformation.java","method_name":" {\n\t\tre","content":"\t/** 单位�\nficateNumber() {\n\t\treturn certificateNumber"} {"path":"downloaded/FirstInformation.java","method_name":"ertificateNum","content":"\t/** 单位�\ner) {\n\t\tthis.certificateNumber = certificateNumber;\n\t}\n"} {"path":"downloaded/FirstInformation.java","method_name":";\n\t}\n\tpublic ","content":"\t/** 单位�\nis.name = name;\n\t}\n\tpublic String getCustomerId() {\n\t\tr"} {"path":"downloaded/FirstInformation.java","method_name":";\n\t}\n\t","content":"\t/** 单位�\nd = customerId;\n\t}\n\tpublic String getOccu"} {"path":"downloaded/FirstInformation.java","method_name":"cupation) {","content":"\t/** 单位�\ntion(String occupation) {\n\t\tthis.occupation = occup"} {"path":"downloaded/FirstInformation.java","method_name":"is.sex = ","content":"\t/** 单位�\nng sex) {\n\t\tthis.sex = sex;\n\t}\n\tpublic String g"} {"path":"downloaded/FirstInformation.java","method_name":"this.birthd","content":"\t/** 单位�\nbirthday) {\n\t\tthis.birthday = birthday;\n\t}\n\tpublic "} {"path":"downloaded/FirstInformation.java","method_name":"ype = idTyp","content":"\t/** 单位�\n) {\n\t\tthis.idType = idType;\n\t}\n\tpublic String getId"} {"path":"downloaded/FirstInformation.java","method_name":"r = idNumber;\n\t}","content":"\t/** 单位�\n\t\tthis.idNumber = idNumber;\n\t}\n\tpublic String getUnitName() {"} {"path":"downloaded/FirstInformation.java","method_name":"g getInsuredN","content":"\t/** 单位�\n\n\tpublic String getInsuredNumber() {\n\t\treturn insuredNu"} {"path":"downloaded/FirstInformation.java","method_name":";\n\t}\n\tpublic Stri","content":"\t/** 单位�\n insuredNumber;\n\t}\n\tpublic String getUnitNumber() {\n\t\treturn un"} {"path":"downloaded/FirstInformation.java","method_name":"usinessNumber()","content":"\t/** 单位�\nic String getBusinessNumber() {\n\t\treturn businessNumber;\n\t}"} {"path":"downloaded/FirstInformation.java","method_name":" String getB","content":"\t/** 单位�\ner;\n\t}\n\tpublic String getBusinessName() {\n\t\treturn bu"} {"path":"downloaded/FirstInformation.java","method_name":"ssName;\n\t}\n\tpublic Stri","content":"\t/** 单位�\nsName = businessName;\n\t}\n\tpublic String getPrintTime() {\n\t\treturn printTime"} {"path":"downloaded/FirstInformation.java","method_name":"uranceCompanySeal;\n","content":"\t/** 单位�\n{\n\t\treturn insuranceCompanySeal;\n\t}\n\tpublic void setInsuranceCompan"} {"path":"downloaded/FirstInformation.java","method_name":"ent() {\n\t","content":"\t/** 单位�\ntSpecialAgreement() {\n\t\treturn specialAgreement"} {"path":"downloaded/AccountsController.java","method_name":"greeting","content":"/**\n     * Heartbeat monitor\n     * @return: String\n     */\n@ResponseBody\n    @RequestMapping(\"/greeting\")\n    public String greeting(){\n        return \"Hello!.. A message from AccountsController!\";\n    }"} {"path":"downloaded/AccountsController.java","method_name":"add","content":"/**\n     * Heartbeat monitor\n     * @return: String\n     */\n@RequestMapping(value=\"/add\", method=RequestMethod.GET)\n    public String add(){\n        return \"add\";\n    }"} {"path":"downloaded/AccountsController.java","method_name":"add","content":"/**\n     * Heartbeat monitor\n     * @return: String\n     */\n@RequestMapping(value=\"/add\", method=RequestMethod.POST)\n    public String add(/*@RequestBody*/ UserAccount form, Model model){\n        AccountsManager.AddUser(form);\n        model.addAttribute(\"accounts\", AccountsManager.displayAll());\n        return \"display\";\n    }"} {"path":"downloaded/AccountsController.java","method_name":"view","content":"/**\n     * Heartbeat monitor\n     * @return: String\n     */\n@RequestMapping(value=\"/{id}\", method=RequestMethod.GET)\n    public String view(@PathVariable(\"id\") int id, Model model) throws Exception{\n        if(AccountsManager.displayUser(id) == null)\n            throw new ResourceNotFoundException();\n        \n        List<UserAccount> results = new ArrayList<>();\n        results.add(AccountsManager.displayUser(id));\n        model.addAttribute(\"accounts\", results);\n        return \"display\";\n    }"} {"path":"downloaded/AccountsController.java","method_name":"viewAll","content":"/**\n     * Heartbeat monitor\n     * @return: String\n     */\n@RequestMapping(value=\"/all\", method=RequestMethod.GET)\n    public String viewAll(Model model){\n       model.addAttribute(\"accounts\", AccountsManager.displayAll()); \n       return \"display\";\n    }"} {"path":"downloaded/AccountsController.java","method_name":"emptyPage","content":"/**\n     * Heartbeat monitor\n     * @return: String\n     */\n@RequestMapping(\"/empty\")\n    public String emptyPage(){\n        return \"display\";\n    }"} {"path":"downloaded/ChampionConnector.java","method_name":"getChampions","content":"/**\n\t * Retrieve all champions\n\t * @param region (must be provided)\n\t * @param version (if null defaults to latest)\n\t * @param freeToPlay true returns only free to play champions\n\t * @return JSON champions\n\t */\npublic String getChampions(Region region, Version version, Boolean freeToPlay) \n\t\t\tthrows NotSupportedException, RequestException {\n\t\tString request = constructRequest(allChampionRequest, region, version);\n\t\t\n\t\tif (freeToPlay != null)\n\t\t\trequest = addParamToRequest(request, \"freeToPlay\", freeToPlay);\n\t\t\n\t\treturn Connector.getInstance().submitApiRequest(request);\n\t}"} {"path":"downloaded/ConstantInfo.java","method_name":"getIndex","content":"/**\n     * The index of this constant in the constant pool. Is -1 if the\n     * index has not yet been resolved. Constant pool indexes are resolved\n     * when the constant pool is written out.\n     */\npublic int getIndex() {\n        return mIndex;\n    }"} {"path":"downloaded/ConstantInfo.java","method_name":"hasPriority","content":"/**\n     * The index of this constant in the constant pool. Is -1 if the\n     * index has not yet been resolved. Constant pool indexes are resolved\n     * when the constant pool is written out.\n     */\nboolean hasPriority() {\n        return false;\n    }"} {"path":"downloaded/ConstantInfo.java","method_name":"getEntryCount","content":"/**\n     * The index of this constant in the constant pool. Is -1 if the\n     * index has not yet been resolved. Constant pool indexes are resolved\n     * when the constant pool is written out.\n     */\nint getEntryCount() {\n        return 1;\n    }"} {"path":"downloaded/PassiveEntity.java","method_name":"getAddHealth","content":"/**\n     * Gets the amount of additional health the entity can provide to an active\n     * entity.\n     *\n     * @return The additional health offered by the entity\n     */\npublic float getAddHealth()\n    {\n        return addHealth;\n    }"} {"path":"downloaded/PassiveEntity.java","method_name":"getAddSpeed","content":"/**\n     * Gets the amount of additional speed the entity can provide to an active\n     * entity.\n     *\n     * @return The additional speed offered by the entity\n     */\npublic float getAddSpeed()\n    {\n        return addSpeed;\n    }"} {"path":"downloaded/PSKeywordChoice.java","method_name":"getValue","content":"/**\n    * Get the keyword choice value.\n    * \n    * @return the keyword choice value, never <code>null</code>, may be empty.\n    */\npublic String getValue()\n   {\n      return value;\n   }"} {"path":"downloaded/PSKeywordChoice.java","method_name":"getLabel","content":"/**\n    * Get the keyword choice label.\n    * \n    * @return the keyword choice label, never <code>null</code> or empty.\n    */\npublic String getLabel()\n   {\n      return label;\n   }"} {"path":"downloaded/PSKeywordChoice.java","method_name":"getDescription","content":"/**\n    * Get the keyword choice description.\n    * \n    * @return the keyword choice description, may be <code>null</code> or empty.\n    */\npublic String getDescription()\n   {\n      return description;\n   }"} {"path":"downloaded/PSKeywordChoice.java","method_name":"getSequence","content":"/**\n    * Get the sortrank for this keyword choice.\n    * \n    * @return the 0 based display sequence of this keyword choice.\n    */\npublic Integer getSequence()\n   {\n      return sequence;\n   }"} {"path":"downloaded/PSKeywordChoice.java","method_name":"equals","content":"/**\n    * Set a new display sequence for this keyword choice.\n    * \n    * @param sequence the new display sequence for this keyword choice, may\n    *    be <code>null</code>, must >= 0 if provided.\n    */\n@Override\n   public boolean equals(Object o) {\n      if (this == o) return true;\n      if (!(o instanceof PSKeywordChoice)) return false;\n      PSKeywordChoice that = (PSKeywordChoice) o;\n      return Objects.equals(getValue(), that.getValue()) && Objects.equals(getLabel(), that.getLabel()) && Objects.equals(getDescription(), that.getDescription()) && Objects.equals(getSequence(), that.getSequence());\n   }"} {"path":"downloaded/PSKeywordChoice.java","method_name":"hashCode","content":"/**\n    * Set a new display sequence for this keyword choice.\n    * \n    * @param sequence the new display sequence for this keyword choice, may\n    *    be <code>null</code>, must >= 0 if provided.\n    */\n@Override\n   public int hashCode() {\n      return Objects.hash(getValue(), getLabel(), getDescription(), getSequence());\n   }"} {"path":"downloaded/PSKeywordChoice.java","method_name":"toString","content":"/**\n    * Set a new display sequence for this keyword choice.\n    * \n    * @param sequence the new display sequence for this keyword choice, may\n    *    be <code>null</code>, must >= 0 if provided.\n    */\n@Override\n   public String toString() {\n      final StringBuffer sb = new StringBuffer(\"PSKeywordChoice{\");\n      sb.append(\"value='\").append(value).append('\\'');\n      sb.append(\", label='\").append(label).append('\\'');\n      sb.append(\", description='\").append(description).append('\\'');\n      sb.append(\", sequence=\").append(sequence);\n      sb.append('}');\n      return sb.toString();\n   }"} {"path":"downloaded/PSKeywordChoice.java","method_name":"toXML","content":"/**\n    * Set a new display sequence for this keyword choice.\n    * \n    * @param sequence the new display sequence for this keyword choice, may\n    *    be <code>null</code>, must >= 0 if provided.\n    */\npublic String toXML() throws IOException, SAXException\n   {\n      return PSXmlSerializationHelper.writeToXml(this);\n   }"} {"path":"downloaded/EIDHelper.java","method_name":"getExternalEid","content":"/**\n\t * Given an {@link IAnyResource} representing a type supported by MDM, retrieve their externally-assigned EID,\n\t * represented as a {@link CanonicalEID}\n\t *\n\t * @param theResource the resource to extract the EID from.\n\t *\n\t * @return An optional {@link CanonicalEID} representing the external EID. Absent if the EID is not present.\n\t */\npublic List<CanonicalEID> getExternalEid(IBaseResource theResource) {\n\t\tString resourceType = myFhirContext.getResourceType(theResource);\n\t\treturn CanonicalEID.extractFromResource(\n\t\t\t\tmyFhirContext,\n\t\t\t\tmyMdmSettings.getMdmRules().getEnterpriseEIDSystemForResourceType(resourceType),\n\t\t\t\ttheResource);\n\t}"} {"path":"downloaded/EIDHelper.java","method_name":"getHapiEid","content":"/**\n\t * Given an {@link IAnyResource} representing a type supported by MDM, retrieve their internally-assigned EID,\n\t * represented as a {@link CanonicalEID}\n\t *\n\t * @param theResource the resource to extract the EID from.\n\t *\n\t * @return An optional {@link CanonicalEID} representing the internal EID. Absent if the EID is not present.\n\t */\npublic List<CanonicalEID> getHapiEid(IAnyResource theResource) {\n\t\treturn CanonicalEID.extractFromResource(\n\t\t\t\tmyFhirContext, MdmConstants.HAPI_ENTERPRISE_IDENTIFIER_SYSTEM, theResource);\n\t}"} {"path":"downloaded/EIDHelper.java","method_name":"eidMatchExists","content":"/**\n\t * Determines whether two lists of {@link CanonicalEID} have any intersection. Two resources are considered a match if\n\t * a single {@link CanonicalEID} matches between the two collections.\n\t *\n\t * @param theFirstResourceEids the first EID\n\t * @param theSecondResourceEids the second EID\n\t *\n\t * @return a boolean indicating whether there is a match between these two identifier sets.\n\t */\npublic boolean eidMatchExists(List<CanonicalEID> theFirstResourceEids, List<CanonicalEID> theSecondResourceEids) {\n\t\tList<String> collect =\n\t\t\t\ttheFirstResourceEids.stream().map(CanonicalEID::getValue).collect(Collectors.toList());\n\t\tList<String> collect1 =\n\t\t\t\ttheSecondResourceEids.stream().map(CanonicalEID::getValue).collect(Collectors.toList());\n\t\treturn !Collections.disjoint(collect, collect1);\n\t}"} {"path":"downloaded/EIDHelper.java","method_name":"hasEidOverlap","content":"/**\n\t * An incoming resource is a potential duplicate if it matches a source resource that has a golden resource with an\n\t * official EID, but the incoming resource also has an EID that does not match.\n\t */\npublic boolean hasEidOverlap(IAnyResource theExistingGoldenResource, IAnyResource theComparingGoldenResource) {\n\t\tList<CanonicalEID> firstEids = this.getExternalEid(theExistingGoldenResource);\n\t\tList<CanonicalEID> secondEids = this.getExternalEid(theComparingGoldenResource);\n\t\tif (firstEids.isEmpty() || secondEids.isEmpty()) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.eidMatchExists(firstEids, secondEids);\n\t}"} {"path":"downloaded/TicketContent.java","method_name":"getTicket","content":"/**\n     * Returns the underlying ticket.\n     *\n     * If this object represents a ticket included in request\n     * content, the underlying ticket does not have an owner, a key or\n     * a created date.\n     *\n     * If this object represents a ticket included in response\n     * content, the underlying ticket does not have an owner but\n     * rather an owner href.\n     * @return The ticket.\n     */\npublic Ticket getTicket() {\n        return ticket;\n    }"} {"path":"downloaded/TicketContent.java","method_name":"getOwnerHref","content":"/**\n     * Returns the href representing the ticket's owner.\n     *\n     * Only returns something useful when this object represents a\n     * ticket included in response content.\n     * @return The owner href.\n     */\npublic String getOwnerHref() {\n        return ownerHref;\n    }"} {"path":"downloaded/TicketContent.java","method_name":"toXml","content":"/**\n     * Converts the underlying ticket to an XML fragment suitable\n     * for use as request content (ignores any key, owner, created\n     * date).\n     * @param doc The document.\n     * @return The element.\n     */\npublic Element toXml(Document doc) {\n        Element e = DomUtil.createElement(doc, ELEMENT_TICKET_TICKETINFO,\n                                          NAMESPACE_TICKET);\n\n        Element timeout = DomUtil.createElement(doc, ELEMENT_TICKET_TIMEOUT,\n                                                NAMESPACE_TICKET);\n        DomUtil.setText(timeout, ticket.getTimeout());\n        e.appendChild(timeout);\n\n        DavPrivilegeSet privileges = new DavPrivilegeSet(ticket);\n        e.appendChild(privileges.toXml(doc));\n\n        return e;\n    }"} {"path":"downloaded/TicketContent.java","method_name":"createFromXml","content":"/**\n     * Returns a <code>TicketContent> populated with information from\n     * the given XML fragment which is assumed to be response content\n     * (containing an owner href rather than a <code>User</code>).\n     *\n     * The root element of the fragment must be a\n     * <code>ticket:ticketinfo</code> element.\n     * @param root The element.\n     * @return The ticket content.\n     * @throws Exception - if something is wrong this exception is thrown.\n     */\npublic static TicketContent createFromXml(Element root) throws Exception {\n        if (! DomUtil.matches(root, ELEMENT_TICKET_TICKETINFO,\n                              NAMESPACE_TICKET)) {\n            throw new Exception(\"root element not ticketinfo\");\n        }\n\n        Ticket ticket = new HibTicket();\n\n        String id = DomUtil.getChildTextTrim(root, ELEMENT_TICKET_ID,\n                                             NAMESPACE_TICKET);\n        ticket.setKey(id);\n\n        String timeout =\n            DomUtil.getChildTextTrim(root, ELEMENT_TICKET_TIMEOUT,\n                                     NAMESPACE_TICKET);\n        ticket.setTimeout(timeout);\n\n        Element pe = DomUtil.getChildElement(root, XML_PRIVILEGE, NAMESPACE);\n        DavPrivilegeSet privileges = DavPrivilegeSet.createFromXml(pe);\n        privileges.setTicketPrivileges(ticket);\n\n        Element owner = DomUtil.getChildElement(root, XML_OWNER, NAMESPACE);\n        String ownerHref =\n            DomUtil.getChildTextTrim(owner, XML_HREF, NAMESPACE);\n\n        return new TicketContent(ticket, ownerHref);\n    }"} {"path":"downloaded/VipFunctionImpl.java","method_name":"erride\n   ","content":"/**\n     * 单个数据进行查询, \n�id进行搜索\n     */\n    @Override\n    public VipEntity selectById(@Param(\"id\") String id) throws Exception {\n        //参数进行验证\n        VipEntity vipEntity = vipDao.select(\"i"} {"path":"downloaded/VipFunctionImpl.java","method_name":"��\n     */","content":"/**\n     * 单个数据进行查询, \n    }\n    /**\n     * 进行模糊查询\n     */\n    @Override\n    public List<VipEntity> selectLike(Map<String ,Object> map) throws Exception {\n        List<VipEntity> list "} {"path":"downloaded/AppInfoUtils.java","method_name":"  */\n    pu","content":"/**\n     * 返回一个签名的对应类型的字符串\n     *\n     * @param context\n     * @param packageName\n     * @par\npe\n     * @return\n     */\n    public static String getSingInfo(Context context, String packageName, String type) {\n        String tmp = null;\n        Signature[] signs = getSignatures(context, packageName);\n        for (Signature sig : signs) {\n            if (SHA1.equals(type)) {\n                tmp = getSignatureString(sig, SHA1);\n                break;\n            }\n     "} {"path":"downloaded/AppInfoUtils.java","method_name":"  * @return\n ","content":"/**\n     * 返回一个签名的对应类型的字符串\n     *\n     * @param context\n     * @param packageName\n     * @par\n  * @param packageName\n     * @return\n     */\n    public static Signature[] getSignatures(Context context, String packageName) {\n        PackageInfo packageInfo = null;\n        try {\n            packageInfo = context.getPackageManager().getPackageInfo(packageName, PackageManager.GET_SIGNATURES);\n            return packageInfo.signatures;\n        } catch (PackageManager.NameNotFoundException e) {\n            e.print"} {"path":"downloaded/AppInfoUtils.java","method_name":"��）\n     *\n     ","content":"/**\n     * 返回一个签名的对应类型的字符串\n     *\n     * @param context\n     * @param packageName\n     * @par\n信息转换成16进制）\n     *\n     * @param sig\n     * @param type\n     * @return\n     */\n    public static String getSignatureString(Signature sig, String type) {\n        byte[] hexBytes = sig.toByteArray();\n        String fingerprint = \"error!\";\n        try {\n            MessageDigest digest = MessageDigest.getInstance(type);\n            if (digest != null) {\n                byte[] digestBytes = digest.digest(hexBytes);\n                StringBuilder sb = new StringBuilder();\n                for (byte digestByte : digestBytes) {\n                    sb.append((Integer.toHexString((digestByte & 0xFF) | 0x100)).substring(1, 3));\n                }\n                fingerprint = sb.toString();\n            }\n        } catch (NoSuchAlg"} {"path":"downloaded/AppInfoUtils.java","method_name":" * 获取所有Activity\n  ","content":"/**\n     * 返回一个签名的对应类型的字符串\n     *\n     * @param context\n     * @param packageName\n     * @par\nanshu.com/p/ac0b237bac03\n     * 获取所有Activity\n     * @param application\n     * @return\n     */\n    public static List<Activity> getActivitiesByApplication(Application application) {\n        List<Activity> list = new ArrayList<>();\n        try {\n            Class<Application> applicationClass = Application.class;\n            Field mLoadedApkField = applicationClass.getDeclaredField(\"mLoadedApk\");\n            mLoadedApkField.setAccessible(true);\n            Object mLoadedApk = mLoadedApkField.get(application);\n            Class<?> mLoadedApkClass = mLoadedApk.getClass();\n            Field mActivityThreadField = mLoadedApkClass.getDeclaredField(\"mActivityThread\");\n            mActivityThreadField.setAccessible(true);\n            Object mActivityThread = mActivityThreadField.get(mLoadedApk);\n            Class<?> mActivityThreadClass = mActivityThread.getClass();\n            Field mActivitiesField = mActivityThreadClass.getDeclaredField(\"mActivities\");\n            mActivitiesField.setAccessible(true);\n            Object mActivities = mActivitiesField.get(mActivityThread);\n            // 注意这里一定写成Map，低版本这里用的是HashMap，高版本用的是ArrayMap\n            if (mActivities instanceof Map) {\n                @SuppressWarnings(\"unchecked\")\n                Map<Object, Object> arrayMap = (Map<Object, Object>) mActivities;\n                for (Map.Entry<Object, Object> entry : arrayMap.entrySet()) {\n                    Object value = entry.getValue();\n                    Class<?> activityClientRecordClass = value.getClass();\n                    Field activityField = activityClientRecordClass.getDeclaredField(\"activity\");\n                    activityField.setAccessible(true);\n                    Object o = activityField.get(value);\n                    list.add((Activity) o);\n    "} {"path":"downloaded/CacheReplicationTestCase.java","method_name":"getDeploymentA","content":"/**\n     * Wake-up cache on second node.\n     */\n@Deployment (name = \"dep1\") @TargetsContainer(\"openshift-node1\")\n    public static WebArchive getDeploymentA() {\n        return getDeployment();\n    }"} {"path":"downloaded/CacheReplicationTestCase.java","method_name":"getDeploymentB","content":"/**\n     * Wake-up cache on second node.\n     */\n@Deployment(name = \"dep2\") @TargetsContainer(\"openshift-node2\")\n    public static WebArchive getDeploymentB() {\n        return getDeployment();\n    }"} {"path":"downloaded/CacheReplicationTestCase.java","method_name":"getDeployment","content":"/**\n     * Wake-up cache on second node.\n     */\npublic static WebArchive getDeployment() {\n        return ShrinkWrap.create(WebArchive.class, \"cache-repl.war\")\n            .setWebXML(\"web.xml\")\n            .addAsManifestResource(\"jboss-deployment-structure.xml\");\n    }"} {"path":"downloaded/PainelCadastrarImoveis.java","method_name":" validarCamposImove","content":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n private boolean validarCamposImovel(){\n        if( (!campoProprietarioDoImovel.getText().isEmpty()) && (campoSelecioneTipoDoImovel.getSelectedIndex() != 0) && (campoSelecioneFinalidadeDoImovel.getSelectedIndex() != 0 ) && (!campoValorCobradoDoImovel.getText().isEmpty()) ){\n            return true;\n        }else{\n           return false; \n        }\n        \n    "} {"path":"downloaded/RzPmtPlanServiceImpl.java","method_name":"eturn\n\t */\n\t@Overri","content":"\n\t\n\t/**\n\t * 批量添加\n\t * @param List<rzPmtPlan>\n\t * \n�据)\n\t * @param id\n\t * @return\n\t */\n\t@Override\n\tpublic boolean deleteRzPmtPlanById(RzPmtPlanQuery rzPmtPlanQuery){\n\t\treturn rzPmtPlanDao.de"} {"path":"downloaded/RzPmtPlanServiceImpl.java","method_name":"* @param rzPmtPlanQuery\n\t ","content":"\n\t\n\t/**\n\t * 批量添加\n\t * @param List<rzPmtPlan>\n\t * \n�删除数据库数据)\n\t * @param rzPmtPlanQuery\n\t * @return\n\t */\n\t@Override\n\tpublic boolean deleteRzPmtPlanByCondition(RzPmtPlanQuery rzPmtPlanQuery){\n\t"} {"path":"downloaded/RzPmtPlanServiceImpl.java","method_name":"��正删除数据库数�","content":"\n\t\n\t/**\n\t * 批量添加\n\t * @param List<rzPmtPlan>\n\t * \n* 根据id批量删除 (真正删除数据库数据)\n\t * @param rzPmtPlanQuery\n\t * @return\n\t */\t\n\t@Override\n\tpublic Result deleteRzPmtPlanByBatchId(RzPmtPlanQuery rzPmtPlanQuery) {\n\t\tResult result = new Result(false);\n\t\ttry {\n\t\t\tMap<String, Object> data = new Hashtable<String, Object>();\n\t\t\t//TODO 如果是多主键修要修改，如果不是删除就可以\n\t\t\tString [] batchIdArr = rzPmtPlanQuery.getBatchId().split(\",\");\n\t\t\tdata.put(\"batchId1\",batchIdArr);\n\t\t\tboolean flat = rzPmtPlanDao.deleteRz"} {"path":"downloaded/RzPmtPlanServiceImpl.java","method_name":"\t\te.printStackTrace();\n\t","content":"\n\t\n\t/**\n\t * 批量添加\n\t * @param List<rzPmtPlan>\n\t * \nmberFormatException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn result;\n\t}\n\t/**\n\t * 根据Id逻辑删除 (修改数据库数据为删除状态)\n\t * @par"} {"path":"downloaded/RzPmtPlanServiceImpl.java","method_name":"\n\t\treturn rzPmtPlanDao.logicDel","content":"\n\t\n\t/**\n\t * 批量添加\n\t * @param List<rzPmtPlan>\n\t * \nPlanQuery rzPmtPlanQuery){\n\t\treturn rzPmtPlanDao.logicDeleteRzPmtPlanById(rzPmtPlanQuery);\t\n\t}\n\t\n\t/**\n\t * 根据条件逻辑删除 (修改数据库数据为删除�"} {"path":"downloaded/RzPmtPlanServiceImpl.java","method_name":"RzPmtPlanQuery rzPmtPlanQuery","content":"\n\t\n\t/**\n\t * 批量添加\n\t * @param List<rzPmtPlan>\n\t * \nleteRzPmtPlanByCondition(RzPmtPlanQuery rzPmtPlanQuery){\n\t\treturn rzPmtPlanDao.logicDeleteRzPmtPlanByCondition(rzPmtPlanQuery);\t\n\t}\n\t\n\t/**\n\t * 根据id逻辑批量删除 (修改数据库数据为删除状态)\n\t * @param rzPmtPlanQuery\n\t * @return\n\t */\t\n\t@Override\n\tpublic Result logicDeleteRzPmtPlanByBatchId(RzPmtPlanQuery rzPmtPlanQuery) {\n\t\tResult result = new Result();\n\t\tresult.setSuccess(false);\n\t\ttry {\n\t\t\tMap<String, Object> data = new Hashtable<String, Object>();\n\t\t\t//TODO 如果是多主键修要修改，如果不是删除就可以\n\t\t\tString [] batchIdArr = "} {"path":"downloaded/RzPmtPlanServiceImpl.java","method_name":"ut(\"batchId2\",","content":"\n\t\n\t/**\n\t * 批量添加\n\t * @param List<rzPmtPlan>\n\t * \n1\",batchIdArr);\n\t\t\tdata.put(\"batchId2\",batchIdArr);\n\t\t\tboolean flat = rzPmtPlanDao.logicDeleteRzPmtPlanByBatchId(data);\t\n\t\t\tresult.setSuccess(flat);\n\t\t} catch (NumberFormatException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t\n\t/**\n\t * 添加或修改\n\t * @param rzPmtPlan\n\t * @return\n\t */\t\n\t@Override\n\tpublic Result insertOrUpdate(RzPmtPlan rzPmtPlan) {\n\t\t//设置调用失败\n\t\tResult result = new Result(false);\n\t\ttry {\n\t\t\tif(rzPmtPlan!=null){\n\t\t\t\tif(StringUtil.isNotEmpty(rzPmtPlan.getPkPrjcontr())){\n\t\t\t\t\tupdateRzPmtPlanById(rzPmtPlan);\n\t\t\t\t}else{"} {"path":"downloaded/RzPmtPlanServiceImpl.java","method_name":"ult.setSuccess(true","content":"\n\t\n\t/**\n\t * 批量添加\n\t * @param List<rzPmtPlan>\n\t * \n异常设置成功\n\t\t\t\tresult.setSuccess(true);\n\t\t\t} else {\n\t\t\t\tresult.setErrorMessage(\"数据对象不能为空\");\n\t\t\t}\n\t\t\t"} {"path":"downloaded/RzPmtPlanServiceImpl.java","method_name":"\", obj)\n\t\t\tresult.addDefau","content":"\n\t\n\t/**\n\t * 批量添加\n\t * @param List<rzPmtPlan>\n\t * \nesult.addDefaultModel(\"key\", obj)\n\t\t\tresult.addDefaultModel(rzPmtPlan);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * 根据Id修改\n\t * @param rzPmtPlan\n\t * @return\n\t */\n\t@Override\n\tpublic boolean updateRzPmtPlanById(RzPmtPlan rzPmtPlan){\n\t\tretur"} {"path":"downloaded/RzPmtPlanServiceImpl.java","method_name":"\n\t * @param data\n\t * @re","content":"\n\t\n\t/**\n\t * 批量添加\n\t * @param List<rzPmtPlan>\n\t * \n��条件修改\n\t * @param data\n\t * @return\n\t */\n\t@Override\n\tpublic boolean updateRzPmtPlanByCondition(RzPmtPlanQuery record,RzPmtPlanQuery parameter){\n\t\tMap<String, Object> data = new Hashtable<String, Object>();\n\t\tdata.put(\"record\",record);\n\t\tdata.put(\"parameter\",parameter);\n\t\treturn rzPmtPlanDao.up"} {"path":"downloaded/RzPmtPlanServiceImpl.java","method_name":"y\n\t * @return\n\t ","content":"\n\t\n\t/**\n\t * 批量添加\n\t * @param List<rzPmtPlan>\n\t * \n改\n\t * @param rzPmtPlanQuery\n\t * @return\n\t */\n\tpublic Result updateRzPmtPlanByBatchId(List<RzPmtPlan> rzPmtPlanList){\n\t\tResult result "} {"path":"downloaded/RzPmtPlanServiceImpl.java","method_name":"ist);\n\t\t\tresult","content":"\n\t\n\t/**\n\t * 批量添加\n\t * @param List<rzPmtPlan>\n\t * \npdateRzPmtPlanByBatchId(rzPmtPlanList);\n\t\t\tresult.setSuccess(flag);\n\t\t} catch (NumberFormatException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tret"} {"path":"downloaded/RzPmtPlanServiceImpl.java","method_name":"c RzPmtPlan getRzP","content":"\n\t\n\t/**\n\t * 批量添加\n\t * @param List<rzPmtPlan>\n\t * \nQuery\n\t * @return\n\t */\n\t@Override\n\tpublic RzPmtPlan getRzPmtPlanById(RzPmtPlanQuery rzPmtPlanQuery){\n\t\treturn rzPmtPlanDao.getRzPmtPlanById(rzPmtPlanQuery);\n\t}\n\t\n\t/**\n\t * 查询所有\n\t * @param rzPmtPlanQuery\n\t * @return\n\t */\n\t@Override\n\tpublic List<RzPmtPlan> getRzPmtPlanAll(RzPmtPlanQuery rzPmtPlanQuery){\n\t\treturn rzPmtPlanDao.getRzPmtPlanAll(rzPmtPlanQuery);\n\t}\n\t\n\t/**\n\t * 分页查询\n\t * @param rzPmtPlanQuery\n\t * @return\n\t */\n\t@Override\n\tpublic GridResult<RzPmtPlan> getRzPmtPlanByPage(RzpmtplanVo rzPmtPlanQuery){\n\t\t//如果排序的字段是空或者空字符串\n\t\tif(rzPmtPlanQuery!=null&&StringUtils.isBlank(rzPmtPlanQuery.getSort())){\n\t\t\trzPmtPlanQuery."} {"path":"downloaded/RzPmtPlanServiceImpl.java","method_name":"nDao.getRzPmtPlanByPage","content":"\n\t\n\t/**\n\t * 批量添加\n\t * @param List<rzPmtPlan>\n\t * \n\t\tint total = rzPmtPlanDao.getRzPmtPlanByPageCount(rzPmtPlanQuery);\n\t\tPaginatedList<RzPmtPlan> rzPmtPlanPageList = new MysqlPaginatedArrayLi"} {"path":"downloaded/RzPmtPlanServiceImpl.java","method_name":"tPlanPageList","content":"\n\t\n\t/**\n\t * 批量添加\n\t * @param List<rzPmtPlan>\n\t * \ne(rzPmtPlanQuery);\n\t\trzPmtPlanPageList.addAll(rzPmtPlanList);\n\t\tGridResult<RzPmtPlan> result = new GridResult<RzPmtPlan>(rzPmtPlanPageList);\n\t\treturn result;\n\t}\n"} {"path":"downloaded/ImageContent.java","method_name":"getIDEStructureParameter","content":"/**\n     * Returns the (optional) IDE Structure parameter\n     * @return the IDE Structure parameter or null if none is set\n     */\npublic IDEStructureParameter getIDEStructureParameter() {\n        return this.ideStructureParameter;\n    }"} {"path":"downloaded/ImageContent.java","method_name":"needIDEStructureParameter","content":"/**\n     * Returns the (optional) IDE Structure parameter. If none is set an instance is prepared\n     * with defaults for a bi-level image.\n     * @return the IDE Structure parameter\n     */\npublic IDEStructureParameter needIDEStructureParameter() {\n        if (this.ideStructureParameter == null) {\n            setIDEStructureParameter(new IDEStructureParameter());\n        }\n        return getIDEStructureParameter();\n    }"} {"path":"downloaded/ImageContent.java","method_name":"getImageEncodingParameter","content":"/**\n     * Helper method to return the image encoding parameter.\n     *\n     * @return byte[] The data stream.\n     */\nprivate byte[] getImageEncodingParameter() {\n        final byte[] encodingData = new byte[] {\n            (byte)0x95, // ID\n            0x02, // Length\n            encoding,\n            (byte)(encoding == COMPID_JPEG ? 0xFE : 0x01), // RECID\n        };\n        return encodingData;\n    }"} {"path":"downloaded/ImageContent.java","method_name":"getExternalAlgorithmParameter","content":"/**\n     * Helper method to return the external algorithm parameter.\n     *\n     * @return byte[] The data stream.\n     */\nprivate byte[] getExternalAlgorithmParameter() {\n        if (encoding == COMPID_JPEG && compression != 0) {\n            final byte[] extAlgData = new byte[] {\n                (byte)0x9F, // ID\n                      0x00, // Length\n                      0x10, // ALGTYPE = Compression Algorithm\n                      0x00, // Reserved\n               COMPID_JPEG, // COMPRID = JPEG\n                      0x00, // Reserved\n                      0x00, // Reserved\n                      0x00, // Reserved\n               compression, // MARKER\n                      0x00, // Reserved\n                      0x00, // Reserved\n                      0x00, // Reserved\n            };\n            extAlgData[1] = (byte)(extAlgData.length - 2);\n            return extAlgData;\n        }\n        return new byte[0];\n    }"} {"path":"downloaded/ImageContent.java","method_name":"getImageIDESizeParameter","content":"/**\n     * Helper method to return the image encoding parameter.\n     *\n     * @return byte[] The data stream.\n     */\nprivate byte[] getImageIDESizeParameter() {\n        if (ideSize != 1) {\n            final byte[] ideSizeData = new byte[] {\n                    (byte)0x96, // ID\n                    0x01, // Length\n                    ideSize};\n            return ideSizeData;\n        } else {\n            return new byte[0];\n        }\n    }"} {"path":"downloaded/Attendance.java","method_name":" */\n\tpublic ","content":"/**\n\t * @param account 账号\n\t * @return 检查账\n�是否存在\n\t */\n\tpublic boolean queryAccount(String stuId) {\n\t\tString sql = \"SELECT * FROM zm_student_attendance WHERE stuId=?;\";\n\t\tAttendance att = Attendance.attendance.findFirst(sql, stuId);\n\t\tif (att != null) {\n\t\t\treturn true;\n\t\t"} {"path":"downloaded/UploadRequestData.java","method_name":"getVerifiedName","content":"/**\n\t * @return the verifiedName\n\t */\npublic String getVerifiedName() {\n\t\treturn verifiedName;\n\t}"} {"path":"downloaded/UploadRequestData.java","method_name":"getAcceptItem","content":"/**\n\t * @return the acceptItem\n\t */\npublic String getAcceptItem() {\n\t\treturn acceptItem;\n\t}"} {"path":"downloaded/UploadRequestData.java","method_name":"getDisplayUploadedDate","content":"/**\n\t * @param acceptItem the acceptItem to set\n\t */\npublic String getDisplayUploadedDate() {\n\t\treturn displayUploadedDate;\n\t}"} {"path":"downloaded/UploadRequestData.java","method_name":"getPaymentStatus","content":"/**\n\t * @param acceptItem the acceptItem to set\n\t */\npublic String getPaymentStatus() {\n\t\treturn paymentStatus;\n\t}"} {"path":"downloaded/UploadRequestData.java","method_name":"isCustomerWaiveCharge","content":"/**\n\t * @param acceptItem the acceptItem to set\n\t */\npublic boolean isCustomerWaiveCharge() {\n\t\treturn customerWaiveCharge;\n\t}"} {"path":"downloaded/UploadRequestData.java","method_name":"getNapsBatchDetail","content":"/**\n\t * @return the napsBatchDetail\n\t */\npublic BatchDetail getNapsBatchDetail() {\n\t\treturn napsBatchDetail;\n\t}"} {"path":"downloaded/EJBManageableEntityLogicImpl.java","method_name":"handleGetAlexandre","content":"/**\n     * @see org.andromda.cartridges.ejb.metafacades.EJBManageableEntity#getAlexandre()\n     */\nprotected java.lang.String handleGetAlexandre()\n    {\n        // TODO: put your implementation here.\n        return null;\n    }"} {"path":"downloaded/ContributionComparator.java","method_name":"compare","content":"/**\n* This implementation of {@link Comparator#compare(Object, Object)} does a\n* blind cast on each element to {@link IComparableContribution}.\n*/\n@Override\n    public int compare(Object o1, Object o2) {\n        IComparableContribution c1 = null, c2 = null;\n        if (o1 instanceof IComparableContribution)\n            c1 = (IComparableContribution) o1;\n        if (o2 instanceof IComparableContribution)\n            c2 = (IComparableContribution) o2;\n        // neither are comparable contributions, we need to be consistent\n        if (c1 == null && c2 == null) {\n            String s1 = getComparisonString(o1);\n            String s2 = getComparisonString(o2);\n            return Policy.getComparator().compare(s1, s2);\n        }\n        // if we're in a mixed scenario the comparable contribution wins.\n        if (c1 == null)\n            return 1;\n        if (c2 == null)\n            return -1;\n        return compare(c1, c2);\n    }"} {"path":"downloaded/ContributionComparator.java","method_name":"getComparisonString","content":"/**\n* Tries to extract a useful string for comparison from the provided object.\n* This method is a workaround for bug 226547. Looking forward we need a\n* more sensible answer to this problem.\n*\n* @param o\n* \t\tthe object to test\n* @return the comparison string\n* TODO : remove this method and replace it with a sensible solution\n*/\nprivate String getComparisonString(Object o) {\n        if (o instanceof IPreferenceNode) {\n            return ((IPreferenceNode) o).getLabelText();\n        }\n        return o.toString();\n    }"} {"path":"downloaded/ContributionComparator.java","method_name":"compare","content":"/**\n* Returns a negative, zero, or positive number depending on whether the\n* first element is less than, equal to, or greater than the second element.\n* <p>\n* The default implementation of this method is based on comparing the\n* elements' categories as computed by the <code>category</code> framework\n* method. Elements within the same category are further subjected to a case\n* insensitive compare of their label strings. Subclasses may override.\n* </p>\n*\n* @param c1\n*            the first element\n* @param c2\n*            the second element\n* @return a negative number if the first element is less than the second\n*         element; the value <code>0</code> if the first element is equal\n*         to the second element; and a positive number if the first element\n*         is greater than the second element\n*/\npublic int compare(IComparableContribution c1, IComparableContribution c2) {\n        int cat1 = category(c1);\n        int cat2 = category(c2);\n        if (cat1 != cat2) {\n            return cat1 - cat2;\n        }\n        String name1 = c1.getLabel();\n        String name2 = c2.getLabel();\n        if (name1 == null) {\n            //$NON-NLS-1$\n            name1 = \"\";\n        }\n        if (name2 == null) {\n            //$NON-NLS-1$\n            name2 = \"\";\n        }\n        // use the comparator to compare the strings\n        return Policy.getComparator().compare(name1, name2);\n    }"} {"path":"downloaded/ContributionComparator.java","method_name":"compare","content":"/**\n* Returns a negative, zero, or positive number depending on whether the\n* first element is less than, equal to, or greater than the second element.\n* <p>\n* The default implementation of this method is based on comparing the\n* elements' categories as computed by the <code>category</code> framework\n* method. Elements within the same category are further subjected to a case\n* insensitive compare of their label strings. Subclasses may override.\n* </p>\n*\n* @param c1\n*            the first element\n* @param c2\n*            the second element\n* @return a negative number if the first element is less than the second\n*         element; the value <code>0</code> if the first element is equal\n*         to the second element; and a positive number if the first element\n*         is greater than the second element\n*/\n@Override\n    public int compare(Viewer viewer, Object e1, Object e2) {\n        return compare(e1, e2);\n    }"} {"path":"downloaded/ContributionComparator.java","method_name":"category","content":"/**\n* Returns the category of the given element. The category is a number used\n* to allocate elements to bins; the bins are arranged in ascending numeric\n* order. The elements within a bin are arranged via a second level sort\n* criterion.\n* <p>\n* The default implementation of this framework method returns the result of\n* {@link IComparableContribution#getPriority()}. Subclasses may\n* re-implement this method to provide non-trivial categorization.\n* </p>\n*\n* @param c\n*            the element\n* @return the category\n*/\npublic int category(IComparableContribution c) {\n        return c.getPriority();\n    }"} {"path":"downloaded/ContributionComparator.java","method_name":"category","content":"/**\n* Returns the category of the given element. The category is a number used\n* to allocate elements to bins; the bins are arranged in ascending numeric\n* order. The elements within a bin are arranged via a second level sort\n* criterion.\n* <p>\n* The default implementation of this framework method returns the result of\n* {@link IComparableContribution#getPriority()}. Subclasses may\n* re-implement this method to provide non-trivial categorization.\n* </p>\n*\n* @param c\n*            the element\n* @return the category\n*/\n@Override\n    public int category(Object element) {\n        return category((IComparableContribution) element);\n    }"} {"path":"downloaded/Match.java","method_name":"getTeamOne","content":"/**\n\t * Get team one\n\t * \n\t * @return Team one\n\t */\npublic T getTeamOne()\n\t{\n\t\treturn team1;\n\t}"} {"path":"downloaded/Match.java","method_name":"getTeamTwo","content":"/**\n\t * Get team two\n\t * \n\t * @return Team two or null if bye match\n\t */\npublic T getTeamTwo() throws ByeMatchException\n\t{\n\t\tif (isByeMatch)\n\t\t{\n\t\t\tthrow new ByeMatchException();\n\t\t}\n\t\treturn team2;\n\t}"} {"path":"downloaded/Match.java","method_name":"getScoreTeamOne","content":"/**\n\t * Get the score of team one\n\t * \n\t * @return Score of team one\n\t * @throws ByeMatchException\n\t */\npublic int getScoreTeamOne() throws ByeMatchException\n\t{\n\t\tif (isByeMatch)\n\t\t{\n\t\t\tthrow new ByeMatchException();\n\t\t}\n\t\treturn score1;\n\t}"} {"path":"downloaded/Match.java","method_name":"getScoreTeamTwo","content":"/**\n\t * Get the score of team two\n\t * \n\t * @return Score of team two\n\t * @throws ByeMatchException\n\t */\npublic int getScoreTeamTwo() throws ByeMatchException\n\t{\n\t\tif (isByeMatch)\n\t\t{\n\t\t\tthrow new ByeMatchException();\n\t\t}\n\t\treturn score2;\n\t}"} {"path":"downloaded/Match.java","method_name":"addScoreTeamOne","content":"/**\n\t * Add points to team one's score\n\t * \n\t * @param points\n\t *            Number of points to add\n\t * @throws ByeMatchException\n\t */\npublic boolean addScoreTeamOne(int points) throws ByeMatchException\n\t{\n\t\tif (isByeMatch)\n\t\t{\n\t\t\tthrow new ByeMatchException();\n\t\t}\n\t\tscore1 = score1 + points;\n\t\treturn true;\n\t}"} {"path":"downloaded/Match.java","method_name":"addScoreTeamTwo","content":"/**\n\t * Add points to team two's score\n\t * \n\t * @param points\n\t *            Number of points to add\n\t * @throws ByeMatchException\n\t */\npublic boolean addScoreTeamTwo(int points) throws ByeMatchException\n\t{\n\t\tif (isByeMatch)\n\t\t{\n\t\t\tthrow new ByeMatchException();\n\t\t}\n\t\tscore2 = score2 + points;\n\t\treturn true;\n\t}"} {"path":"downloaded/Match.java","method_name":"setScoreTeamOne","content":"/**\n\t * Set team one's score to a new score\n\t * \n\t * @param score\n\t *            Team one's new score\n\t */\npublic boolean setScoreTeamOne(int score)\n\t{\n\t\tif (!editableMatch)\n\t\t\treturn false;\n\t\tscore1 = score;\n\t\treturn true;\n\t}"} {"path":"downloaded/Match.java","method_name":"setScoreTeamTwo","content":"/**\n\t * Set team two's score to a new score\n\t * \n\t * @param score\n\t *            Team two's new score\n\t */\npublic boolean setScoreTeamTwo(int score)\n\t{\n\t\tif (!editableMatch)\n\t\t\treturn false;\n\t\tscore2 = score;\n\t\treturn true;\n\t}"} {"path":"downloaded/Match.java","method_name":"getName","content":"/**\n\t * The name of the match\n\t * \n\t * @return Name of the match, null if it is not set\n\t */\npublic String getName()\n\t{\n\t\treturn name;\n\t}"} {"path":"downloaded/Match.java","method_name":"isByeMatch","content":"/**\n\t * If this match is a bye match\n\t * \n\t * @return is a bye match\n\t */\npublic boolean isByeMatch()\n\t{\n\t\treturn isByeMatch;\n\t}"} {"path":"downloaded/Match.java","method_name":"isEditableMatch","content":"/**\n\t * If this match is a bye match\n\t * \n\t * @return is a bye match\n\t */\npublic boolean isEditableMatch()\n\t{\n\t\treturn editableMatch;\n\t}"} {"path":"downloaded/Match.java","method_name":"toString","content":"/**\n\t * A string with the match number if the match was created with one and the two\n\t * teams\n\t * \n\t * @return String representation of a match\n\t */\n@Override\n\tpublic String toString()\n\t{\n\t\t// Header\n\t\tStringBuilder builder = new StringBuilder();\n\t\tif (matchNum != -1)\n\t\t{\n\t\t\tbuilder.append(\"Match \");\n\t\t\tbuilder.append(matchNum);\n\t\t\tbuilder.append(\": \");\n\t\t}\n\t\t// Team one\n\t\tbuilder.append(team1.toString());\n\t\t// Connection\n\t\tif (!isByeMatch)\n\t\t{\n\t\t\tbuilder.append(\" vs \");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbuilder.append(\" has a \");\n\t\t}\n\t\t// Team two\n\t\tbuilder.append(team2.toString());\n\t\t\n\t\treturn builder.toString();\n\t}"} {"path":"downloaded/ModelObject.java","method_name":"initStation","content":"/**\n     *\n     */\npublic Station initStation(){\n        return new Station();\n    }"} {"path":"downloaded/ModelObject.java","method_name":"initJunction","content":"/**\n     *\n     */\npublic Junction initJunction(){\n        return new Junction();\n    }"} {"path":"downloaded/ModelObject.java","method_name":"initTerminal","content":"/**\n     *\n     */\npublic Terminal initTerminal(){\n        return new Terminal();\n    }"} {"path":"downloaded/ModelObject.java","method_name":"initTrack","content":"/**\n     *\n     */\npublic Track initTrack(){\n        return new Track();\n    }"} {"path":"downloaded/ModelObject.java","method_name":"validateModel","content":"/**\n     *\n     */\npublic boolean validateModel(){\n        System.out.println(\"Validated!\");\n        return true;\n    }"} {"path":"downloaded/ServiceClient2.java","method_name":"createTODO","content":"/** Construct client connecting to GRPC server at {@code host:port}. */\npublic ServiceClient2 createTODO(String title, String desc) {\n\t\tInstant time = Instant.now();\n\t\tTimestamp timestamp = Timestamp.newBuilder().setSeconds(time.getEpochSecond()).setNanos(time.getNano()).build();\n\n\t\ttodo = ToDo.newBuilder().setTitle(title).setDescription(desc).setReminder(timestamp).build();\n\n\t\treturn this;\n\t}"} {"path":"downloaded/ServiceClient2.java","method_name":"updateTODO","content":"/** Construct client connecting to GRPC server at {@code host:port}. */\npublic ServiceClient2 updateTODO(int id, String title, String desc) {\n\t\tInstant time = Instant.now();\n\t\tTimestamp timestamp = Timestamp.newBuilder().setSeconds(time.getEpochSecond()).setNanos(time.getNano()).build();\n\n\t\ttodo = ToDo.newBuilder().setId(id).setTitle(title).setDescription(desc).setReminder(timestamp).build();\n\n\t\treturn this;\n\t}"} {"path":"downloaded/ServiceClient2.java","method_name":"createRequest","content":"/** Construct client connecting to GRPC server at {@code host:port}. */\npublic ServiceClient2 createRequest(ServiceClient2 client, String api, String title, String description) {\n\t\tclient = client.createTODO(title, description);\n\t\tcreateRequest = CreateRequest.newBuilder().setApi(api).setToDo(todo).build();\n\t\treturn this;\n\t}"} {"path":"downloaded/ServiceClient2.java","method_name":"sendCreateRequestToService","content":"/** Construct client connecting to GRPC server at {@code host:port}. */\npublic CreateResponse sendCreateRequestToService(ServiceClient2 client, String api, String title, String description) {\n\t\tclient = client.createRequest(client, api, title, description);\n\t\tCreateResponse createResponse = stub.withInterceptors(new HeaderClientInterceptor()).create(createRequest);\n\t\treturn createResponse;\n\t}"} {"path":"downloaded/ServiceClient2.java","method_name":"updateRequest","content":"/** Construct client connecting to GRPC server at {@code host:port}. */\npublic ServiceClient2 updateRequest(ServiceClient2 client, int id, String api, String title, String description) {\n\t\tclient = client.updateTODO(id, title, description);\n\t\tupdateRequest = UpdateRequest.newBuilder().setApi(api).setToDo(todo).build();\n\t\treturn this;\n\t}"} {"path":"downloaded/ServiceClient2.java","method_name":"sendUpdateRequestToService","content":"/** Construct client connecting to GRPC server at {@code host:port}. */\npublic UpdateResponse sendUpdateRequestToService(ServiceClient2 client, int id, String api, String title, String description) {\n\t\tclient = client.updateRequest(client, id, api, title, description);\n\t\tUpdateResponse updateResponse = stub.withInterceptors(new HeaderClientInterceptor()).update(updateRequest);\n\t\treturn updateResponse;\n\t}"} {"path":"downloaded/ServiceClient2.java","method_name":"readRequest","content":"/** Construct client connecting to GRPC server at {@code host:port}. */\npublic ServiceClient2 readRequest(String api, int id) {\n\t\treadRequest = ReadRequest.newBuilder().setApi(api).setId(id).build();\n\t\treturn this;\n\t}"} {"path":"downloaded/ServiceClient2.java","method_name":"sendReadRequestToService","content":"/** Construct client connecting to GRPC server at {@code host:port}. */\npublic ReadResponse sendReadRequestToService(ServiceClient2 client, String api, int id) {\n\t\tclient = client.readRequest(api, id);\n\t\treadResponse = stub.withInterceptors(new HeaderClientInterceptor()).read(readRequest);\n\t\treturn readResponse;\n\t}"} {"path":"downloaded/ServiceClient2.java","method_name":"readAllRequest","content":"/** Construct client connecting to GRPC server at {@code host:port}. */\npublic ServiceClient2 readAllRequest(String api) {\n\t\treadAllRequest = ReadAllRequest.newBuilder().setApi(api).build();\n\t\treturn this;\n\t}"} {"path":"downloaded/ServiceClient2.java","method_name":"sendReadAllRequestToService","content":"/** Construct client connecting to GRPC server at {@code host:port}. */\npublic ReadAllResponse sendReadAllRequestToService(ServiceClient2 client, String api) {\n\t\tclient = client.readAllRequest(api);\n\t\tReadAllResponse serverResponse = stub.withInterceptors(new HeaderClientInterceptor()).readAll(readAllRequest);\n\t\treturn serverResponse;\n\t}"} {"path":"downloaded/ServiceClient2.java","method_name":"deleteRequest","content":"/** Construct client connecting to GRPC server at {@code host:port}. */\npublic ServiceClient2 deleteRequest(String api, int id) {\n\t\tdeleteRequest = DeleteRequest.newBuilder().setApi(api).setId(id).build();\n\t\treturn this;\n\t}"} {"path":"downloaded/ServiceClient2.java","method_name":"sendDeleteRequestToService","content":"/** Construct client connecting to GRPC server at {@code host:port}. */\npublic DeleteResponse sendDeleteRequestToService(ServiceClient2 client, String api, int id) {\n\t\tclient = client.deleteRequest(api, id);\n\t\tdeleteResponse = stub.withInterceptors(new HeaderClientInterceptor()).delete(deleteRequest);\n\t\treturn deleteResponse;\n\t}"} {"path":"downloaded/LauncherClusterManager.java","method_name":"scaleDown","content":"/**\n     * Scale down by stepDown number of times, selecting the most recently created launchers to be killed.\n     */\npublic void scaleDown() {\n        log.info(\"Scaling down by [Step Down] \" + stepDown + \" instances...\");\n\n        // Scale down by (1 x stepDown) at a time\n        for (int i = 0; i < stepDown; i++) {\n            // Get free launchers\n            List<String> urlsToScaleDown = getFreeLaunchers();\n\n            log.info(\"URLs to scale down: \" + urlsToScaleDown.toString());\n\n            // Sort by launcher url. This will sort the oldest first, making it possible to take the youngest out of the\n            // tail\n            urlsToScaleDown.sort((o1, o2) -> {\n                int mySuffix = Integer.parseInt(o1.split(\"\\\\.\")[0].substring(\n                        (Constants.LAUNCHER_URL_PREFIX + \"-\").length()));\n\n                int theirSuffix = Integer.parseInt(o2.split(\"\\\\.\")[0].substring(\n                        (Constants.LAUNCHER_URL_PREFIX + \"-\").length()));\n\n                return Integer.compare(mySuffix, theirSuffix);\n            });\n\n            // Get the youngest free launcher URL\n            String launcherUrlToDelete = urlsToScaleDown.get(urlsToScaleDown.size() - 1);\n\n            log.info(\"Cutting down [Launcher URL] \" + launcherUrlToDelete + \"...\");\n\n            // Get object name from launcher URL\n            String deploymentName = getObjectNameFromLauncherUrl(launcherUrlToDelete);\n\n            // Delete deployment and service\n            if (!deleteLauncher(deploymentName)) {\n                log.error(\"Launcher deletion failed [Object Name] \" + deploymentName);\n            }\n        }\n    }"} {"path":"downloaded/LauncherClusterManager.java","method_name":"honourMaxCount","content":"/**\n     * Check max count, free buffer count, and scale down prioritizing free buffer count over\n     * max count.\n     */\npublic void honourMaxCount() {\n        // Get free and total counts\n        int freeCount = getFreeLaunchers().size();\n        int totalCount = getTotalLaunchers().size();\n\n        // Scale down if max is exceeded, irrespective of free buffer count\n        if (totalCount > maxCount) {\n            log.info(\"Scaling down until [freeBufferCount] \" + freeBufferCount + \" is met since [Max Count] \"\n                    + maxCount + \" has been exceeded.\");\n\n            while (freeCount <= freeBufferCount){\n                log.info(\"Scaling DOWN: REASON -> [Total Count] \" + totalCount + \" > [Max Count] \" + maxCount);\n                scaleDown();\n                freeCount = getFreeLaunchers().size();\n            }\n\n            totalCount = getTotalLaunchers().size();\n            freeCount = getFreeLaunchers().size();\n\n            log.info(\"Stats after scale down operation: [Total Count] \" + totalCount + \", [Free Count] \" + freeCount);\n\n            return;\n        }\n\n        // Don't scale down if there are not enough free launchers\n        if (freeCount <= freeBufferCount) {\n            log.info(\"Not scaling down since [Free Count] \" + freeCount + \" <= [Free Buffer Size] \" +\n                    freeBufferCount + \"...\");\n            return;\n        }\n\n        // Don't scale down if the desired count is not exceeded\n        if (totalCount <= desiredCount) {\n            log.info(\"Not scaling down since [Total Count] \" + totalCount + \" <= [Desired Count] \" +\n                    desiredCount + \"...\");\n            return;\n        }\n\n        // Scale down if desired count is exceeded, but with more free launchers than buffer count by stepDown count\n        // TODO: to test scale down\n        if ((freeCount - stepDown) >= freeBufferCount) {\n            log.info(\"Scaling DOWN: REASON -> [Total Count] \" + totalCount + \" > [Desired Count] \" + desiredCount +\n                    \" AND [Free Count] - [Step Down] \" + freeCount + \" - \" + stepDown +\n                    \" >= [Free Buffer Count] \" + freeBufferCount);\n\n            scaleDown();\n            return;\n        }\n\n        // If after scaling down there wouldn't be enough free launchers, don't scale down\n        log.info(\"Not scaling down since [Free Count] + [Step Down] \" + freeCount + \" + \" + stepDown +\n                \" < [Free Buffer Count] \" + freeBufferCount);\n    }"} {"path":"downloaded/LauncherClusterManager.java","method_name":"getServices","content":"/**\n     * Get the list of Services on the K8S Cluster.\n     *\n     * @return\n     */\npublic List<String> getServices() {\n        return runtimeClient.getServices();\n    }"} {"path":"downloaded/LauncherClusterManager.java","method_name":"getDeployments","content":"/**\n     * Get the list of Deployments on the K8S Cluster.\n     *\n     * @return\n     */\npublic List<String> getDeployments() {\n        return runtimeClient.getDeployments();\n    }"} {"path":"downloaded/LauncherClusterManager.java","method_name":"deploymentExists","content":"/**\n     * Check if a Deploymen exists by the given name.\n     *\n     * @param deploymentName\n     * @return\n     */\npublic boolean deploymentExists(String deploymentName) {\n        return runtimeClient.deploymentExists(deploymentName);\n    }"} {"path":"downloaded/LauncherClusterManager.java","method_name":"serviceExists","content":"/**\n     * Check if a Service exists by the given name.\n     *\n     * @param serviceName\n     * @return\n     */\npublic boolean serviceExists(String serviceName) {\n        return runtimeClient.serviceExists(serviceName);\n    }"} {"path":"downloaded/LauncherClusterManager.java","method_name":"getFreeLaunchers","content":"/**\n     * Get the list of free launchers from the persistence.\n     *\n     * @return\n     */\npublic List<String> getFreeLaunchers() {\n        return persistence.getFreeLauncherUrls();\n    }"} {"path":"downloaded/LauncherClusterManager.java","method_name":"getTotalLaunchers","content":"/**\n     * Get the full list of launchers from the persistence.\n     *\n     * @return\n     */\npublic List<String> getTotalLaunchers() {\n        return persistence.getTotalLauncherUrls();\n    }"} {"path":"downloaded/LauncherClusterManager.java","method_name":"markLauncherAsBusyBySubDomain","content":"/**\n     * Mark a launcher by the given subdomain as busy.\n     *\n     * @param launcherSubDomain\n     * @return\n     */\npublic boolean markLauncherAsBusyBySubDomain(String launcherSubDomain) {\n        return markLauncherAsBusy(launcherSubDomain + \".\" + rootDomainName);\n    }"} {"path":"downloaded/LauncherClusterManager.java","method_name":"markLauncherAsBusy","content":"/**\n     * Mark the given launcher URL as busy.\n     *\n     * @param launcherUrl\n     * @return\n     */\npublic boolean markLauncherAsBusy(String launcherUrl) {\n        if (persistence.launcherExists(launcherUrl)) {\n            return persistence.markLauncherAsBusy(launcherUrl);\n        }\n\n        return false;\n    }"} {"path":"downloaded/LauncherClusterManager.java","method_name":"markLauncherAsFreeBySubDomain","content":"/**\n     * Mark a launcher by the given subdomain as free.\n     *\n     * @param launcherSubDomain\n     * @return\n     */\npublic boolean markLauncherAsFreeBySubDomain(String launcherSubDomain) {\n        return markLauncherAsFree(launcherSubDomain + \".\" + rootDomainName);\n    }"} {"path":"downloaded/LauncherClusterManager.java","method_name":"markLauncherAsFree","content":"/**\n     * Makr the given launcher URL as free.\n     *\n     * @param launcherUrl\n     * @return\n     */\npublic boolean markLauncherAsFree(String launcherUrl) {\n        if (persistence.launcherExists(launcherUrl)) {\n            return persistence.markLauncherAsFree(launcherUrl);\n        }\n\n        return false;\n    }"} {"path":"downloaded/LauncherClusterManager.java","method_name":"deleteLauncher","content":"/**\n     * Delete launcher URL derived from the object name, from the list of launchers, if it exists, and delete from the K8S cluster.\n     *\n     * @param deploymentName\n     * @return\n     */\nprivate boolean deleteLauncher(String deploymentName) {\n        unregisterLauncherIfExistsByObjectName(deploymentName);\n\n        boolean svcDeleted = runtimeClient.deleteService(deploymentName);\n        boolean depDeleted = runtimeClient.deleteDeployment(deploymentName);\n\n        return svcDeleted && depDeleted;\n    }"} {"path":"downloaded/LauncherClusterManager.java","method_name":"createLauncher","content":"/**\n     * Add a new launcher URL by creating a K8S Deployment+Service pair and adding the entry to persistence.\n     *\n     * @param deploymentNameSuffix\n     * @param reason\n     * @return\n     */\nprivate boolean createLauncher(int deploymentNameSuffix, String reason) {\n        boolean depCreated = runtimeClient.createDeployment(deploymentNameSuffix, rootDomainName, reason);\n        boolean svcCreated = runtimeClient.createService(deploymentNameSuffix, rootDomainName, reason);\n\n        return depCreated && svcCreated;\n    }"} {"path":"downloaded/LauncherClusterManager.java","method_name":"getObjectNameFromLauncherUrl","content":"/**\n     * Get the object name used in the K8S cluster, from the launcher URL.\n     *\n     * @param launchUrl\n     * @return\n     */\nprivate String getObjectNameFromLauncherUrl(String launchUrl) {\n        if (launchUrl != null) {\n            String[] domainParts = launchUrl.split(\"\\\\.\");\n            return domainParts[0].replace(Constants.LAUNCHER_URL_PREFIX, Constants.BPG_APP_TYPE_LAUNCHER);\n        }\n\n        throw new IllegalArgumentException(\"Null launcher URL cannot be processed.\");\n    }"} {"path":"downloaded/LauncherClusterManager.java","method_name":"getLauncherUrlFromObjectName","content":"/**\n     * Get the launcher URL used in the persistence by the given object name in the K8S cluster.\n     *\n     * @param objectName\n     * @return\n     */\nprivate String getLauncherUrlFromObjectName(String objectName) {\n        if (objectName != null) {\n            return objectName.replace(Constants.BPG_APP_TYPE_LAUNCHER, Constants.LAUNCHER_URL_PREFIX) +\n                    \".\" +\n                    rootDomainName;\n        }\n\n        throw new IllegalArgumentException(\"Null Object name cannot be processed.\");\n    }"} {"path":"downloaded/LauncherClusterManager.java","method_name":"getLatestDeploymentNameSuffix","content":"/**\n     * Get the last created increment number of the Deployment/Service in the K8S cluster.\n     *\n     * @return\n     */\nprivate int getLatestDeploymentNameSuffix() {\n        List<String> deploymentList = getDeployments();\n//        log.info(\"Currently have \" + deploymentList.size() + \" deployments...\");\n        if (deploymentList.size() > 0) {\n            deploymentList.sort((o1, o2) -> {\n                int mySuffix = Integer.parseInt(o1.substring((Constants.BPG_APP_TYPE_LAUNCHER + \"-\").length()));\n                int theirSuffix = Integer.parseInt(o2.substring((Constants.BPG_APP_TYPE_LAUNCHER + \"-\").length()));\n\n                return Integer.compare(mySuffix, theirSuffix);\n            });\n\n//            log.info(\"Sorted deployments: \" + deploymentList.toString());\n            String lastElement = deploymentList.get(deploymentList.size() - 1);\n//            log.info(\"Last element: \" + lastElement);\n            String lastLauncherSuffix = lastElement.substring((Constants.BPG_APP_TYPE_LAUNCHER + \"-\").length());\n\n//            log.info(\"Picking last deployment suffix: \" + lastLauncherSuffix);\n            return Integer.parseInt(lastLauncherSuffix);\n        }\n\n        return 0;\n    }"} {"path":"downloaded/AddAssessmentCommandParser.java","method_name":"parse","content":"/**\n     * Parses the given {@code String} of arguments in the context of the AddCommand\n     * and returns an AddCommand object for execution.\n     * @throws ParseException if the user input does not conform the expected format\n     */\npublic AddAssessmentCommand parse(String args) throws ParseException {\n        ArgumentMultimap argMultimap =\n                ArgumentTokenizer.tokenize(args, PREFIX_ASSESSMENT);\n\n        if (argMultimap.getValue(PREFIX_ASSESSMENT).isEmpty()) {\n            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAssessmentCommand.MESSAGE_USAGE));\n        }\n\n        Assessment assessment = ParserUtil.parseAssessment(argMultimap.getValue(PREFIX_ASSESSMENT).get());\n\n        return new AddAssessmentCommand(assessment);\n    }"} {"path":"downloaded/GPSInfoController.java","method_name":"all","content":"/**\n     * GET all GPSInfo objects\n     * @return List of GPSInfo records\n     */\n@GetMapping(value=\"/gps\")\n    public List<GPSInfo> all() {\n        return repository.findAll();\n    }"} {"path":"downloaded/GPSInfoController.java","method_name":"GPSInfoByPk","content":"/**\n     * GET specified GPSInfo object (selected by id)\n     * @param id Id of GPSInfo Object\n     * @return GPSInfo record\n     */\n@GetMapping(value=\"/gps/{id}\")\n    public GPSInfo GPSInfoByPk(@PathVariable Long id) {\n        return repository.findById(id)\n                .orElseThrow(() -> new GPSInfoNotFoundException(id));\n    }"} {"path":"downloaded/GPSInfoController.java","method_name":"allOfDevice","content":"/**\n     * GET all GPSInfo objects associated with requested deviceId\n     * @param deviceId Id of requested device\n     * @return List of GPSInfo records\n     */\n@GetMapping(value=\"/gps\", params=\"deviceId\")\n    public List<GPSInfo> allOfDevice(@RequestParam Long deviceId) {\n        return repository.findByDeviceId(deviceId);\n    }"} {"path":"downloaded/GPSInfoController.java","method_name":"allFromDate","content":"/**\n     * GET all GPSInfo from requested day\n     * @param date Day of which GPSInfo is requested\n     * @return List of GPSInfo records\n     */\n@GetMapping(value=\"/gps\", params=\"date\")\n    @ResponseBody\n    public List<GPSInfo> allFromDate(@RequestParam @DateTimeFormat(pattern = \"yyyy-MM-dd\") LocalDate date) {\n        return repository.findByDate(date);\n    }"} {"path":"downloaded/GPSInfoController.java","method_name":"newGPSInfo","content":"/**\n     * POST - create and save new GPSInfo object\n     * @param newGPSInfo json with devideId, latitude and longtitude\n     * @return newly created and saved GPSInfo record\n     */\n@PostMapping(value=\"/gps\")\n    public GPSInfo newGPSInfo(@Valid @RequestBody  GPSInfo newGPSInfo) {\n        return repository.save(newGPSInfo);\n    }"} {"path":"downloaded/GPSInfoController.java","method_name":"deleteGPSInfoByDeviceId","content":"/**\n     * DELETE all GPSInfo records of passed deviceId\n     * @param deviceId id of device which GPSInfo records requested to delete\n     * @return deleted GPSInfo records\n     */\n@DeleteMapping(value=\"/gps\", params=\"deviceId\")\n    @Transactional\n    public List<GPSInfo> deleteGPSInfoByDeviceId(@RequestParam long deviceId) {\n        return repository.deleteByDeviceId(deviceId);\n    }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getMaxCount","content":"/**\n     * MaxCount : 3\n     * Transactions : [{\"Amount\":\"0\",\"Attribute\":[{\"Data\":\"61747472696275746573\",\"Usage\":0}],\"ConfirmStatus\":\"6+\",\"Direction\":\"Moved\",\"Fee\":10000,\"Height\":186,\"Inputs\":{\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999990000\"},\"Memo\":\"\",\"OutputPayload\":[{\"Amount\":\"10000000000\",\"Version\":0,\"VoteContent\":[{\"Candidates\":[\"03d916c2072fd8fb57224e9747e0f1e36a2c117689cedf39e0132f3cb4f8ee673d\"],\"Type\":0}]}],\"Outputs\":{\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999980000\"},\"Payload\":null,\"Status\":\"Confirmed\",\"Timestamp\":1560855293,\"TxHash\":\"965a30286ddd7df1803963c32195ea1348a5dcebf4017e4d9d47cc19f2e6d56a\",\"Type\":2}]\n     */\npublic int getMaxCount() {\n        return MaxCount;\n    }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getTransactions","content":"/**\n     * MaxCount : 3\n     * Transactions : [{\"Amount\":\"0\",\"Attribute\":[{\"Data\":\"61747472696275746573\",\"Usage\":0}],\"ConfirmStatus\":\"6+\",\"Direction\":\"Moved\",\"Fee\":10000,\"Height\":186,\"Inputs\":{\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999990000\"},\"Memo\":\"\",\"OutputPayload\":[{\"Amount\":\"10000000000\",\"Version\":0,\"VoteContent\":[{\"Candidates\":[\"03d916c2072fd8fb57224e9747e0f1e36a2c117689cedf39e0132f3cb4f8ee673d\"],\"Type\":0}]}],\"Outputs\":{\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999980000\"},\"Payload\":null,\"Status\":\"Confirmed\",\"Timestamp\":1560855293,\"TxHash\":\"965a30286ddd7df1803963c32195ea1348a5dcebf4017e4d9d47cc19f2e6d56a\",\"Type\":2}]\n     */\npublic List<TransactionsBean> getTransactions() {\n        return Transactions;\n    }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getPayload","content":"/**\n         * Amount : 0\n         * Attribute : [{\"Data\":\"61747472696275746573\",\"Usage\":0}]\n         * ConfirmStatus : 6+\n         * Direction : Moved\n         * Fee : 10000\n         * Height : 186\n         * Inputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999990000\"}\n         * Memo :\n         * OutputPayload : [{\"Amount\":\"10000000000\",\"Version\":0,\"VoteContent\":[{\"Candidates\":[\"03d916c2072fd8fb57224e9747e0f1e36a2c117689cedf39e0132f3cb4f8ee673d\"],\"Type\":0}]}]\n         * Outputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999980000\"}\n         * Payload : null\n         * Status : Confirmed\n         * Timestamp : 1560855293\n         * TxHash : 965a30286ddd7df1803963c32195ea1348a5dcebf4017e4d9d47cc19f2e6d56a\n         * Type : 2\n         */\npublic List<PayloadBean> getPayload() {\n            return Payload;\n        }"} {"path":"downloaded/ClientDAO.java","method_name":"getClientsByConseillerId","content":"/**\n\t * Get all clients of conseiller\n\t * @param conseillerId conseiller id \n\t * @return list of clients\n\t * @throws SQLException e\n\t */\npublic List<Client> getClientsByConseillerId(long idConseiller) throws SQLException {\n\t\tPreparedStatement st = null;\n\t\tResultSet rs =null;\n\t\tClient client = new Client();\n\t\tList<Client> clients = new ArrayList<Client>();\n\t\tConnection connection = null;\n\t\t\n\t\ttry {\n\t\t\tconnection = getConnection();\n\t\t\tString selectSQL = \"select surname, name, email , adress from client where idConseiller = ?\";\n\t\t\tst = connection.prepareStatement(selectSQL);\n\t\t\tst.setLong(1, idConseiller);\n\t\t\t\n\t\t\trs = st.executeQuery();\n\t\t\t\n\t\t\t\n\t\twhile (rs.next()) {\n\t\t\t\n\t\t\tclient = new Client();\n\t\t\tclient.setSurname(rs.getString(\"surname\"));\n\t\t\tclient.setName(rs.getString(\"name\"));\n\t\t\tclient.setEmail(rs.getString(\"email\"));\n\t\t\tclient.setAdress(rs.getString(\"adress\"));\n\t\t\t\n\t\t\tclients.add(client);\n\t\t  }\n\t\t\treturn clients;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (st != null)\n\t\t\t\t\tst.close();\n\t\t\t\tif (connection != null)\n\t\t\t\t\tconnection.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t}\n\t\t\tfor(int i=0; i<clients.size();i++) {\n\t\t\t\tSystem.out.println(\"la donnée associée à l'indice \"+ i + \" est \" + clients.get(i));\n\t\t\t}\n\t\t\treturn clients;\t\t\n\t\t"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getAmount","content":"/**\n         * Amount : 0\n         * Attribute : [{\"Data\":\"61747472696275746573\",\"Usage\":0}]\n         * ConfirmStatus : 6+\n         * Direction : Moved\n         * Fee : 10000\n         * Height : 186\n         * Inputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999990000\"}\n         * Memo :\n         * OutputPayload : [{\"Amount\":\"10000000000\",\"Version\":0,\"VoteContent\":[{\"Candidates\":[\"03d916c2072fd8fb57224e9747e0f1e36a2c117689cedf39e0132f3cb4f8ee673d\"],\"Type\":0}]}]\n         * Outputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999980000\"}\n         * Payload : null\n         * Status : Confirmed\n         * Timestamp : 1560855293\n         * TxHash : 965a30286ddd7df1803963c32195ea1348a5dcebf4017e4d9d47cc19f2e6d56a\n         * Type : 2\n         */\npublic String getAmount() {\n            return Amount;\n        }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getConfirmStatus","content":"/**\n         * Amount : 0\n         * Attribute : [{\"Data\":\"61747472696275746573\",\"Usage\":0}]\n         * ConfirmStatus : 6+\n         * Direction : Moved\n         * Fee : 10000\n         * Height : 186\n         * Inputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999990000\"}\n         * Memo :\n         * OutputPayload : [{\"Amount\":\"10000000000\",\"Version\":0,\"VoteContent\":[{\"Candidates\":[\"03d916c2072fd8fb57224e9747e0f1e36a2c117689cedf39e0132f3cb4f8ee673d\"],\"Type\":0}]}]\n         * Outputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999980000\"}\n         * Payload : null\n         * Status : Confirmed\n         * Timestamp : 1560855293\n         * TxHash : 965a30286ddd7df1803963c32195ea1348a5dcebf4017e4d9d47cc19f2e6d56a\n         * Type : 2\n         */\npublic String getConfirmStatus() {\n            return ConfirmStatus;\n        }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getDirection","content":"/**\n         * Amount : 0\n         * Attribute : [{\"Data\":\"61747472696275746573\",\"Usage\":0}]\n         * ConfirmStatus : 6+\n         * Direction : Moved\n         * Fee : 10000\n         * Height : 186\n         * Inputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999990000\"}\n         * Memo :\n         * OutputPayload : [{\"Amount\":\"10000000000\",\"Version\":0,\"VoteContent\":[{\"Candidates\":[\"03d916c2072fd8fb57224e9747e0f1e36a2c117689cedf39e0132f3cb4f8ee673d\"],\"Type\":0}]}]\n         * Outputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999980000\"}\n         * Payload : null\n         * Status : Confirmed\n         * Timestamp : 1560855293\n         * TxHash : 965a30286ddd7df1803963c32195ea1348a5dcebf4017e4d9d47cc19f2e6d56a\n         * Type : 2\n         */\npublic String getDirection() {\n            return Direction;\n        }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getFee","content":"/**\n         * Amount : 0\n         * Attribute : [{\"Data\":\"61747472696275746573\",\"Usage\":0}]\n         * ConfirmStatus : 6+\n         * Direction : Moved\n         * Fee : 10000\n         * Height : 186\n         * Inputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999990000\"}\n         * Memo :\n         * OutputPayload : [{\"Amount\":\"10000000000\",\"Version\":0,\"VoteContent\":[{\"Candidates\":[\"03d916c2072fd8fb57224e9747e0f1e36a2c117689cedf39e0132f3cb4f8ee673d\"],\"Type\":0}]}]\n         * Outputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999980000\"}\n         * Payload : null\n         * Status : Confirmed\n         * Timestamp : 1560855293\n         * TxHash : 965a30286ddd7df1803963c32195ea1348a5dcebf4017e4d9d47cc19f2e6d56a\n         * Type : 2\n         */\npublic int getFee() {\n            return Fee;\n        }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getHeight","content":"/**\n         * Amount : 0\n         * Attribute : [{\"Data\":\"61747472696275746573\",\"Usage\":0}]\n         * ConfirmStatus : 6+\n         * Direction : Moved\n         * Fee : 10000\n         * Height : 186\n         * Inputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999990000\"}\n         * Memo :\n         * OutputPayload : [{\"Amount\":\"10000000000\",\"Version\":0,\"VoteContent\":[{\"Candidates\":[\"03d916c2072fd8fb57224e9747e0f1e36a2c117689cedf39e0132f3cb4f8ee673d\"],\"Type\":0}]}]\n         * Outputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999980000\"}\n         * Payload : null\n         * Status : Confirmed\n         * Timestamp : 1560855293\n         * TxHash : 965a30286ddd7df1803963c32195ea1348a5dcebf4017e4d9d47cc19f2e6d56a\n         * Type : 2\n         */\npublic int getHeight() {\n            return Height;\n        }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getInputs","content":"/**\n         * Amount : 0\n         * Attribute : [{\"Data\":\"61747472696275746573\",\"Usage\":0}]\n         * ConfirmStatus : 6+\n         * Direction : Moved\n         * Fee : 10000\n         * Height : 186\n         * Inputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999990000\"}\n         * Memo :\n         * OutputPayload : [{\"Amount\":\"10000000000\",\"Version\":0,\"VoteContent\":[{\"Candidates\":[\"03d916c2072fd8fb57224e9747e0f1e36a2c117689cedf39e0132f3cb4f8ee673d\"],\"Type\":0}]}]\n         * Outputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999980000\"}\n         * Payload : null\n         * Status : Confirmed\n         * Timestamp : 1560855293\n         * TxHash : 965a30286ddd7df1803963c32195ea1348a5dcebf4017e4d9d47cc19f2e6d56a\n         * Type : 2\n         */\npublic String getInputs() {\n            return Inputs;\n        }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getMemo","content":"/**\n         * Amount : 0\n         * Attribute : [{\"Data\":\"61747472696275746573\",\"Usage\":0}]\n         * ConfirmStatus : 6+\n         * Direction : Moved\n         * Fee : 10000\n         * Height : 186\n         * Inputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999990000\"}\n         * Memo :\n         * OutputPayload : [{\"Amount\":\"10000000000\",\"Version\":0,\"VoteContent\":[{\"Candidates\":[\"03d916c2072fd8fb57224e9747e0f1e36a2c117689cedf39e0132f3cb4f8ee673d\"],\"Type\":0}]}]\n         * Outputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999980000\"}\n         * Payload : null\n         * Status : Confirmed\n         * Timestamp : 1560855293\n         * TxHash : 965a30286ddd7df1803963c32195ea1348a5dcebf4017e4d9d47cc19f2e6d56a\n         * Type : 2\n         */\npublic String getMemo() {\n            return Memo;\n        }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getOutputs","content":"/**\n         * Amount : 0\n         * Attribute : [{\"Data\":\"61747472696275746573\",\"Usage\":0}]\n         * ConfirmStatus : 6+\n         * Direction : Moved\n         * Fee : 10000\n         * Height : 186\n         * Inputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999990000\"}\n         * Memo :\n         * OutputPayload : [{\"Amount\":\"10000000000\",\"Version\":0,\"VoteContent\":[{\"Candidates\":[\"03d916c2072fd8fb57224e9747e0f1e36a2c117689cedf39e0132f3cb4f8ee673d\"],\"Type\":0}]}]\n         * Outputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999980000\"}\n         * Payload : null\n         * Status : Confirmed\n         * Timestamp : 1560855293\n         * TxHash : 965a30286ddd7df1803963c32195ea1348a5dcebf4017e4d9d47cc19f2e6d56a\n         * Type : 2\n         */\npublic String getOutputs() {\n            return Outputs;\n        }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getStatus","content":"/**\n         * Amount : 0\n         * Attribute : [{\"Data\":\"61747472696275746573\",\"Usage\":0}]\n         * ConfirmStatus : 6+\n         * Direction : Moved\n         * Fee : 10000\n         * Height : 186\n         * Inputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999990000\"}\n         * Memo :\n         * OutputPayload : [{\"Amount\":\"10000000000\",\"Version\":0,\"VoteContent\":[{\"Candidates\":[\"03d916c2072fd8fb57224e9747e0f1e36a2c117689cedf39e0132f3cb4f8ee673d\"],\"Type\":0}]}]\n         * Outputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999980000\"}\n         * Payload : null\n         * Status : Confirmed\n         * Timestamp : 1560855293\n         * TxHash : 965a30286ddd7df1803963c32195ea1348a5dcebf4017e4d9d47cc19f2e6d56a\n         * Type : 2\n         */\npublic String getStatus() {\n            return Status;\n        }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getTimestamp","content":"/**\n         * Amount : 0\n         * Attribute : [{\"Data\":\"61747472696275746573\",\"Usage\":0}]\n         * ConfirmStatus : 6+\n         * Direction : Moved\n         * Fee : 10000\n         * Height : 186\n         * Inputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999990000\"}\n         * Memo :\n         * OutputPayload : [{\"Amount\":\"10000000000\",\"Version\":0,\"VoteContent\":[{\"Candidates\":[\"03d916c2072fd8fb57224e9747e0f1e36a2c117689cedf39e0132f3cb4f8ee673d\"],\"Type\":0}]}]\n         * Outputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999980000\"}\n         * Payload : null\n         * Status : Confirmed\n         * Timestamp : 1560855293\n         * TxHash : 965a30286ddd7df1803963c32195ea1348a5dcebf4017e4d9d47cc19f2e6d56a\n         * Type : 2\n         */\npublic long getTimestamp() {\n            return Timestamp;\n        }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getTxHash","content":"/**\n         * Amount : 0\n         * Attribute : [{\"Data\":\"61747472696275746573\",\"Usage\":0}]\n         * ConfirmStatus : 6+\n         * Direction : Moved\n         * Fee : 10000\n         * Height : 186\n         * Inputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999990000\"}\n         * Memo :\n         * OutputPayload : [{\"Amount\":\"10000000000\",\"Version\":0,\"VoteContent\":[{\"Candidates\":[\"03d916c2072fd8fb57224e9747e0f1e36a2c117689cedf39e0132f3cb4f8ee673d\"],\"Type\":0}]}]\n         * Outputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999980000\"}\n         * Payload : null\n         * Status : Confirmed\n         * Timestamp : 1560855293\n         * TxHash : 965a30286ddd7df1803963c32195ea1348a5dcebf4017e4d9d47cc19f2e6d56a\n         * Type : 2\n         */\npublic String getTxHash() {\n            return TxHash;\n        }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getType","content":"/**\n         * Amount : 0\n         * Attribute : [{\"Data\":\"61747472696275746573\",\"Usage\":0}]\n         * ConfirmStatus : 6+\n         * Direction : Moved\n         * Fee : 10000\n         * Height : 186\n         * Inputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999990000\"}\n         * Memo :\n         * OutputPayload : [{\"Amount\":\"10000000000\",\"Version\":0,\"VoteContent\":[{\"Candidates\":[\"03d916c2072fd8fb57224e9747e0f1e36a2c117689cedf39e0132f3cb4f8ee673d\"],\"Type\":0}]}]\n         * Outputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999980000\"}\n         * Payload : null\n         * Status : Confirmed\n         * Timestamp : 1560855293\n         * TxHash : 965a30286ddd7df1803963c32195ea1348a5dcebf4017e4d9d47cc19f2e6d56a\n         * Type : 2\n         */\npublic int getType() {\n            return Type;\n        }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getAttribute","content":"/**\n         * Amount : 0\n         * Attribute : [{\"Data\":\"61747472696275746573\",\"Usage\":0}]\n         * ConfirmStatus : 6+\n         * Direction : Moved\n         * Fee : 10000\n         * Height : 186\n         * Inputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999990000\"}\n         * Memo :\n         * OutputPayload : [{\"Amount\":\"10000000000\",\"Version\":0,\"VoteContent\":[{\"Candidates\":[\"03d916c2072fd8fb57224e9747e0f1e36a2c117689cedf39e0132f3cb4f8ee673d\"],\"Type\":0}]}]\n         * Outputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999980000\"}\n         * Payload : null\n         * Status : Confirmed\n         * Timestamp : 1560855293\n         * TxHash : 965a30286ddd7df1803963c32195ea1348a5dcebf4017e4d9d47cc19f2e6d56a\n         * Type : 2\n         */\npublic List<AttributeBean> getAttribute() {\n            return Attribute;\n        }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getOutputPayload","content":"/**\n         * Amount : 0\n         * Attribute : [{\"Data\":\"61747472696275746573\",\"Usage\":0}]\n         * ConfirmStatus : 6+\n         * Direction : Moved\n         * Fee : 10000\n         * Height : 186\n         * Inputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999990000\"}\n         * Memo :\n         * OutputPayload : [{\"Amount\":\"10000000000\",\"Version\":0,\"VoteContent\":[{\"Candidates\":[\"03d916c2072fd8fb57224e9747e0f1e36a2c117689cedf39e0132f3cb4f8ee673d\"],\"Type\":0}]}]\n         * Outputs : {\"Ed8ZSxSB98roeyuRZwwekrnRqcgnfiUDeQ\":\"99999980000\"}\n         * Payload : null\n         * Status : Confirmed\n         * Timestamp : 1560855293\n         * TxHash : 965a30286ddd7df1803963c32195ea1348a5dcebf4017e4d9d47cc19f2e6d56a\n         * Type : 2\n         */\npublic List<OutputPayloadBean> getOutputPayload() {\n            return OutputPayload;\n        }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getCrossChainAddress","content":"/**\n             * CrossChainAddress : EKZ4YMJgYY4GajBQBhWck5C2nqdLPuJ12e\n             * CrossChainAmount : 339980000\n             * OutputIndex : 0\n             */\npublic String getCrossChainAddress() {\n                return CrossChainAddress;\n            }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getCrossChainAmount","content":"/**\n             * CrossChainAddress : EKZ4YMJgYY4GajBQBhWck5C2nqdLPuJ12e\n             * CrossChainAmount : 339980000\n             * OutputIndex : 0\n             */\npublic String getCrossChainAmount() {\n                return CrossChainAmount;\n            }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getOutputIndex","content":"/**\n             * CrossChainAddress : EKZ4YMJgYY4GajBQBhWck5C2nqdLPuJ12e\n             * CrossChainAmount : 339980000\n             * OutputIndex : 0\n             */\npublic int getOutputIndex() {\n                return OutputIndex;\n            }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getData","content":"/**\n             * Data : 61747472696275746573\n             * Usage : 0\n             */\npublic String getData() {\n                return Data;\n            }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getUsage","content":"/**\n             * Data : 61747472696275746573\n             * Usage : 0\n             */\npublic int getUsage() {\n                return Usage;\n            }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getAmount","content":"/**\n             * Amount : 10000000000\n             * Version : 0\n             * VoteContent : [{\"Candidates\":[\"03d916c2072fd8fb57224e9747e0f1e36a2c117689cedf39e0132f3cb4f8ee673d\"],\"Type\":0}]\n             */\npublic String getAmount() {\n                return Amount;\n            }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getVersion","content":"/**\n             * Amount : 10000000000\n             * Version : 0\n             * VoteContent : [{\"Candidates\":[\"03d916c2072fd8fb57224e9747e0f1e36a2c117689cedf39e0132f3cb4f8ee673d\"],\"Type\":0}]\n             */\npublic int getVersion() {\n                return Version;\n            }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getVoteContent","content":"/**\n             * Amount : 10000000000\n             * Version : 0\n             * VoteContent : [{\"Candidates\":[\"03d916c2072fd8fb57224e9747e0f1e36a2c117689cedf39e0132f3cb4f8ee673d\"],\"Type\":0}]\n             */\npublic List<VoteContentBean> getVoteContent() {\n                return VoteContent;\n            }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getType","content":"/**\n                 * Candidates : [\"03d916c2072fd8fb57224e9747e0f1e36a2c117689cedf39e0132f3cb4f8ee673d\"]\n                 * Type : 0\n                 */\npublic int getType() {\n                    return Type;\n                }"} {"path":"downloaded/TransferRecordDetailEntity.java","method_name":"getCandidates","content":"/**\n                 * Candidates : [\"03d916c2072fd8fb57224e9747e0f1e36a2c117689cedf39e0132f3cb4f8ee673d\"]\n                 * Type : 0\n                 */\npublic List<String> getCandidates() {\n                    return Candidates;\n                }"} {"path":"downloaded/NextDeployBuildSeqDTO.java","method_name":"nit true","content":"/**\n     * 用户标识\n   /**\n     * 是否开启Junit true 开启 false 不开启\n     */\n    @NotNull(message = \"switchJunit不能为空\")\n    private Boolean switchJunit;\n\n    public NextDeployBuildSeqDTO() {\n    }\n\n    @Override\n    public String toString() {\n        return \"NextDeployBuildSeqDTO{\" +\n                \"userSeq='\" + userSeq + '\\'' +\n                \", deploySeq='\" + deploySeq + '\\'' +\n                \", gitPath='\" + gitPath + '\\'' +\n                \", brchanName='\" + brchanName + '\\'' +\n                \", appName='\" + appName + '\\'' +\n                \", remarks='\" + remarks + '\\'' +\n                \", jvmParam='\" + jvmParam "} {"path":"downloaded/NextDeployBuildSeqDTO.java","method_name":"     \", ta","content":"/**\n     * 用户标识\n +\n                \", targetHost='\" + targetHost + '\\'' +\n"} {"path":"downloaded/NextDeployBuildSeqDTO.java","method_name":"nit +\n      ","content":"/**\n     * 用户标识\nt=\" + switchJunit +\n                '}';\n    }\n\n    public Str"} {"path":"downloaded/NextDeployBuildSeqDTO.java","method_name":"Seq = user","content":"/**\n     * 用户标识\n     this.userSeq = userSeq;\n    }\n\n    public String getD"} {"path":"downloaded/NextDeployBuildSeqDTO.java","method_name":"his.deploySeq","content":"/**\n     * 用户标识\nq) {\n        this.deploySeq = deploySeq;\n    }\n\n    public Strin"} {"path":"downloaded/NextDeployBuildSeqDTO.java","method_name":"gitPath;\n ","content":"/**\n     * 用户标识\nhis.gitPath = gitPath;\n    }\n\n    public String getBrchanN"} {"path":"downloaded/NextDeployBuildSeqDTO.java","method_name":"s.brchanNa","content":"/**\n     * 用户标识\n {\n        this.brchanName = brchanName;\n    }\n\n    public"} {"path":"downloaded/NextDeployBuildSeqDTO.java","method_name":"   this.app","content":"/**\n     * 用户标识\npName) {\n        this.appName = appName;\n    }\n\n    public S"} {"path":"downloaded/NextDeployBuildSeqDTO.java","method_name":"s.remarks = r","content":"/**\n     * 用户标识\n {\n        this.remarks = remarks;\n    }\n\n    public String getJ"} {"path":"downloaded/NextDeployBuildSeqDTO.java","method_name":"mParam;\n    }\n\n    p","content":"/**\n     * 用户标识\ns.jvmParam = jvmParam;\n    }\n\n    public String getTargetHost() {\n        retur"} {"path":"downloaded/NextDeployBuildSeqDTO.java","method_name":"atchDeploy() {","content":"/**\n     * 用户标识\nlean getSwitchBatchDeploy() {\n        return switchBatchDeploy;\n   "} {"path":"downloaded/OrderUI.java","method_name":"viewOrder","content":"/**\n\t * This function display a list of open orders and ask the user to select\n\t * one of them to view a list of ordered item/promotional packages.\n\t */\npublic static void viewOrder() {\n\t\tSystem.out.print(\"\\t\\t\");\n\t\tSystem.out.println(\"************Viewing existing orders************\");\n\t\t// TODO - implement RRPSS.viewOrder\n\t\tOrderManager orderManager = new OrderManager();\n\t\tList listOfOrders = orderManager.viewOrder();\n\n\t\tOrderedItemManager orderedItemManager = new OrderedItemManager();\n\t\tList listOfOrderedItems = null;\n\t\tOrderedPackageManager orderedPackageManager = new OrderedPackageManager();\n\t\tList listOfOrderedPromotionalPackage = null;\n\n\t\tint i = 0;\n\t\tint choice = 0;\n\t\tOrder order = null;\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tif (listOfOrders.size() == 0) {\n\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\tSystem.out.format(\"%-25s:\", \"TASK STATUS\");\n\t\t\tSystem.out.println(\"There is no orders!\");\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\t// print the list of orders for the user to select from.\n\t\t\tfor (i = 0; i < listOfOrders.size(); i++) {\n\t\t\t\torder = (Order) listOfOrders.get(i);\n\t\t\t\tSystem.out.print(\"\\t\\t\");\n\n\t\t\t\tSystem.out.println((i + 1) + \") Order: \" + order.getId()\n\t\t\t\t\t\t+ \" | Table: \" + order.getTable().getId());\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t\tSystem.out.print(\"\\t\\t\");\n\n\t\t\tSystem.out.print(\"Select an order to view the item ordered: \");\n\t\t\tchoice = Integer.parseInt(sc.nextLine());\n\n\t\t\torder = (Order) listOfOrders.get(choice - 1);\n\n\t\t\tlistOfOrderedItems = orderedItemManager\n\t\t\t\t\t.retrieveOrderedItemsByOrderID(order.getId());\n\t\t\tlistOfOrderedPromotionalPackage = orderedPackageManager\n\t\t\t\t\t.retrieveOrderedPackageByOrderID(order.getId());\n\n\t\t\tif (listOfOrderedItems.size() == 0\n\t\t\t\t\t&& listOfOrderedPromotionalPackage.size() == 0) {\n\t\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\t\tSystem.out.format(\"%-25s:\", \"TASK STATUS\");\n\t\t\t\tSystem.out.println(\"Order is empty!\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tSystem.out.println();\n\t\t\tif (listOfOrderedItems.size() > 0) {\n\t\t\t\tSystem.out.print(\"\\t\\t\");\n\n\t\t\t\tSystem.out.println(\"All Cart Items Ordered:\");\n\n\t\t\t\tfor (int j = 0; j < listOfOrderedItems.size(); j++) {\n\t\t\t\t\tOrderedItem orderedItem = (OrderedItem) listOfOrderedItems\n\t\t\t\t\t\t\t.get(j);\n\t\t\t\t\tSystem.out.print(\"\\t\\t\");\n\n\t\t\t\t\tSystem.out.println((j + 1) + \") ID: \"\n\t\t\t\t\t\t\t+ orderedItem.getItem().getId() + \" | Name: \"\n\t\t\t\t\t\t\t+ orderedItem.getItem().getName() + \" | $\"\n\t\t\t\t\t\t\t+ orderedItem.getPrice());\n\t\t\t\t}\n\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\n\t\t\tif (listOfOrderedPromotionalPackage.size() > 0) {\n\t\t\t\tSystem.out.print(\"\\t\\t\");\n\n\t\t\t\tSystem.out.println(\"Promotional Packages Ordered:\");\n\n\t\t\t\tfor (int j = 0; j < listOfOrderedPromotionalPackage.size(); j++) {\n\t\t\t\t\tOrderedPackage orderedPackage = (OrderedPackage) listOfOrderedPromotionalPackage\n\t\t\t\t\t\t\t.get(j);\n\t\t\t\t\tSystem.out.print(\"\\t\\t\");\n\n\t\t\t\t\tSystem.out.println((j + 1) + \") ID: \"\n\t\t\t\t\t\t\t+ orderedPackage.getPackage().getId() + \" | Name: \"\n\t\t\t\t\t\t\t+ orderedPackage.getPackage().getName() + \" | $\"\n\t\t\t\t\t\t\t+ orderedPackage.getPrice());\n\t\t\t\t}\n\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t}\n\n\t\tcatch (Exception e) {\n\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\tSystem.out.format(\"%-25s:\", \"TASK STATUS\");\n\t\t\tSystem.out.println(\"Invalid Input!\");\n\t\t}\n\t\tSystem.out.print(\"\\t\\t\");\n\t\tSystem.out.println(\"************End of viewing orders************\");\n\t}"} {"path":"downloaded/OrderUI.java","method_name":"addOrderedItem","content":"/**\n\t * This function display a list of orders for the user to select from, then\n\t * displays a list of items for the user to add it into the order.\n\t */\npublic static void addOrderedItem() {\n\t\tSystem.out.print(\"\\t\\t\");\n\t\tSystem.out.println(\"************Adding ordered item************\");\n\t\tOrderManager orderManager = new OrderManager();\n\t\tList listOfOrders = orderManager.viewOrder();\n\n\t\tOrderedItemManager orderedItemManager = new OrderedItemManager();\n\t\tList listOfOrderedItems = null;\n\n\t\tItemManager itemManager = new ItemManager();\n\t\tList listOfItems = itemManager.onStartUp();\n\n\t\tint i = 0;\n\t\tint choice = 0;\n\t\tOrder order = null;\n\t\tItem item = null;\n\t\tOrderedItem orderedItem = null;\n\t\tboolean check = false;\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tif (listOfOrders.size() == 0) {\n\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\tSystem.out.format(\"%-25s:\", \"TASK STATUS\");\n\t\t\tSystem.out.println(\"There is no orders!\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (listOfItems.size() == 0) {\n\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\tSystem.out.format(\"%-25s:\", \"TASK STATUS\");\n\t\t\tSystem.out.println(\"There is no items!\");\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\t// print the list of orders for the user to select from.\n\t\t\tfor (i = 0; i < listOfOrders.size(); i++) {\n\t\t\t\torder = (Order) listOfOrders.get(i);\n\t\t\t\tSystem.out.print(\"\\t\\t\");\n\n\t\t\t\tSystem.out.println((i + 1) + \") Order: \" + order.getId()\n\t\t\t\t\t\t+ \" | Table: \" + order.getTable().getId());\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t\tSystem.out.print(\"\\t\\t\");\n\n\t\t\tSystem.out.print(\"Select an order to add the item ordered: \");\n\t\t\tchoice = Integer.parseInt(sc.nextLine());\n\n\t\t\torder = (Order) listOfOrders.get(choice - 1);\n\n\t\t\tdo {\n\t\t\t\tfor (i = 0; i < listOfItems.size(); i++) {\n\t\t\t\t\titem = (Item) listOfItems.get(i);\n\t\t\t\t\tSystem.out.print(\"\\t\\t\");\n\n\t\t\t\t\tSystem.out.println((i + 1) + \") ID: \" + item.getId()\n\t\t\t\t\t\t\t+ \" | Name: \" + item.getName() + \" | Price: $\"\n\t\t\t\t\t\t\t+ item.getPrice());\n\t\t\t\t}\n\t\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\t\tSystem.out.println((i + 1) + \") Done\");\n\t\t\t\tSystem.out.println();\n\t\t\t\tSystem.out.print(\"\\t\\t\");\n\n\t\t\t\tSystem.out.print(\"Select an item to add into order: \");\n\t\t\t\tchoice = Integer.parseInt(sc.nextLine());\n\n\t\t\t\tif (choice != (i + 1)) {\n\t\t\t\t\titem = (Item) listOfItems.get(choice - 1);\n\n\t\t\t\t\torderedItem = new OrderedItem();\n\t\t\t\t\torderedItem.setItem(item);\n\t\t\t\t\torderedItem.setOrder(order);\n\t\t\t\t\torderedItem.setPrice(item.getPrice());\n\n\t\t\t\t\torder.addOrderedItem(orderedItem);\n\n\t\t\t\t\tcheck = orderedItemManager.createOrderedItem(orderedItem);\n\n\t\t\t\t\tif (check) {\n\t\t\t\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\t\t\t\tSystem.out.format(\"%-25s:\", \"TASK UPDATE\");\n\t\t\t\t\t\tSystem.out\n\t\t\t\t\t\t\t\t.println(\"Item added into order successfully!\");\n\t\t\t\t\t}\n\n\t\t\t\t\telse {\n\t\t\t\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\t\t\t\tSystem.out.format(\"%-25s:\", \"TASK STATUS\");\n\t\t\t\t\t\tSystem.out.println(\"Failed to add item into order!\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} while (choice != (i + 1));\n\n\t\t}\n\n\t\tcatch (Exception e) {\n\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\tSystem.out.format(\"%-25s:\", \"TASK STATUS\");\n\t\t\tSystem.out.println(\"Invalid Input!\");\n\t\t}\n\t\tSystem.out.print(\"\\t\\t\");\n\t\tSystem.out.println(\"************End of adding items************\");\n\t}"} {"path":"downloaded/OrderUI.java","method_name":"addOrderedPromotionalPackage","content":"/**\n\t * This function display a list of orders for the user to select from, then\n\t * displays a list of promotional packages for the user to add it into the\n\t * order.\n\t */\npublic static void addOrderedPromotionalPackage() {\n\t\tSystem.out.print(\"\\t\\t\");\n\t\tSystem.out\n\t\t\t\t.println(\"************Adding promotional Package************\");\n\t\tOrderManager orderManager = new OrderManager();\n\t\tList listOfOrders = orderManager.viewOrder();\n\n\t\tOrderedPackageManager orderedPromotionalPackageManager = new OrderedPackageManager();\n\t\tList listOfOrderedPromotionalPackage = null;\n\n\t\tPackageManager promotionalPackageManager = new PackageManager();\n\t\tList listOfPromotionalPackages = promotionalPackageManager.onStartUp();\n\n\t\tint i = 0;\n\t\tint choice = 0;\n\t\tOrder order = null;\n\t\tPromotionalPackage promotionalPackage = null;\n\t\tOrderedPackage orderedPromotionalPackage = null;\n\t\tboolean check = false;\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tif (listOfOrders.size() == 0) {\n\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\tSystem.out.format(\"%-25s:\", \"TASK STATUS\");\n\t\t\tSystem.out.println(\"There is no orders!\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (listOfPromotionalPackages.size() == 0) {\n\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\tSystem.out.format(\"%-25s:\", \"TASK STATUS\");\n\t\t\tSystem.out.println(\"There is no promotional packages!\");\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\t// print the list of orders for the user to select from.\n\t\t\tfor (i = 0; i < listOfOrders.size(); i++) {\n\t\t\t\torder = (Order) listOfOrders.get(i);\n\t\t\t\tSystem.out.print(\"\\t\\t\");\n\n\t\t\t\tSystem.out.println((i + 1) + \") Order: \" + order.getId()\n\t\t\t\t\t\t+ \" | Table: \" + order.getTable().getId());\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t\tSystem.out.print(\"\\t\\t\");\n\n\t\t\tSystem.out\n\t\t\t\t\t.print(\"Select an order to add the promotional package ordered: \");\n\t\t\tchoice = Integer.parseInt(sc.nextLine());\n\n\t\t\torder = (Order) listOfOrders.get(choice - 1);\n\n\t\t\tdo {\n\t\t\t\tfor (i = 0; i < listOfPromotionalPackages.size(); i++) {\n\t\t\t\t\tpromotionalPackage = (PromotionalPackage) listOfPromotionalPackages\n\t\t\t\t\t\t\t.get(i);\n\t\t\t\t\tSystem.out.print(\"\\t\\t\");\n\n\t\t\t\t\tSystem.out.println((i + 1) + \") ID: \"\n\t\t\t\t\t\t\t+ promotionalPackage.getId() + \" | Name: \"\n\t\t\t\t\t\t\t+ promotionalPackage.getName() + \" | Price: $\"\n\t\t\t\t\t\t\t+ promotionalPackage.getPrice());\n\t\t\t\t}\n\t\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\t\tSystem.out.println((i + 1) + \") Done\");\n\t\t\t\tSystem.out.println();\n\t\t\t\tSystem.out.print(\"\\t\\t\");\n\n\t\t\t\tSystem.out.print(\"Select an item to add into order: \");\n\t\t\t\tchoice = Integer.parseInt(sc.nextLine());\n\n\t\t\t\tif (choice != (i + 1)) {\n\t\t\t\t\tpromotionalPackage = (PromotionalPackage) listOfPromotionalPackages\n\t\t\t\t\t\t\t.get(choice - 1);\n\n\t\t\t\t\torderedPromotionalPackage = new OrderedPackage();\n\t\t\t\t\torderedPromotionalPackage.setPackage(promotionalPackage);\n\t\t\t\t\torderedPromotionalPackage.setOrder(order);\n\t\t\t\t\torderedPromotionalPackage.setPrice(promotionalPackage\n\t\t\t\t\t\t\t.getPrice());\n\n\t\t\t\t\torder.addOrderedPackage(orderedPromotionalPackage);\n\n\t\t\t\t\tcheck = orderedPromotionalPackageManager\n\t\t\t\t\t\t\t.createOrderedPackage(orderedPromotionalPackage);\n\n\t\t\t\t\tif (check) {\n\t\t\t\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\t\t\t\tSystem.out.format(\"%-25s:\", \"TASK STATUS\");\n\t\t\t\t\t\tSystem.out\n\t\t\t\t\t\t\t\t.println(\"Promotional package added into order successfully!\");\n\t\t\t\t\t}\n\n\t\t\t\t\telse {\n\t\t\t\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\t\t\t\tSystem.out.format(\"%-25s:\", \"TASK STATUS\");\n\t\t\t\t\t\tSystem.out\n\t\t\t\t\t\t\t\t.println(\"Failed to add promotional package into order!\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} while (choice != (i + 1));\n\n\t\t}\n\n\t\tcatch (Exception e) {\n\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\tSystem.out.format(\"%-25s:\", \"TASK STATUS\");\n\t\t\tSystem.out.println(\"Invalid Input!\");\n\t\t}\n\t\tSystem.out.print(\"\\t\\t\");\n\t\tSystem.out\n\t\t\t\t.println(\"************End of adding Promotional Package************\");\n\t}"} {"path":"downloaded/OrderUI.java","method_name":"removeOrderedItem","content":"/**\n\t * This function display a list of orders for the user to select from, then\n\t * displays a list of ordered items belonging to that order for the user to\n\t * remove it from the order.\n\t */\npublic static void removeOrderedItem() {\n\t\tSystem.out.print(\"\\t\\t\");\n\t\tSystem.out.println(\"************Removing ordered item************\");\n\t\tOrderManager orderManager = new OrderManager();\n\t\tList listOfOrders = orderManager.viewOrder();\n\n\t\tOrderedItemManager orderedItemManager = new OrderedItemManager();\n\t\tList listOfOrderedItems = null;\n\n\t\tint i = 0;\n\t\tint choice = 0;\n\t\tOrder order = null;\n\t\tOrderedItem orderedItem = null;\n\t\tboolean check = false;\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tif (listOfOrders.size() == 0) {\n\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\tSystem.out.format(\"%-25s:\", \"TASK STATUS\");\n\t\t\tSystem.out.println(\"There is no orders!\");\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\t// print the list of orders for the user to select from.\n\t\t\tfor (i = 0; i < listOfOrders.size(); i++) {\n\t\t\t\torder = (Order) listOfOrders.get(i);\n\t\t\t\tSystem.out.print(\"\\t\\t\");\n\n\t\t\t\tSystem.out.println((i + 1) + \") Order: \" + order.getId()\n\t\t\t\t\t\t+ \" | Table: \" + order.getTable().getId());\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t\tSystem.out.print(\"\\t\\t\");\n\n\t\t\tSystem.out.print(\"Select an order to remove the item ordered: \");\n\t\t\tchoice = Integer.parseInt(sc.nextLine());\n\n\t\t\torder = (Order) listOfOrders.get(choice - 1);\n\n\t\t\tlistOfOrderedItems = orderedItemManager\n\t\t\t\t\t.retrieveOrderedItemsByOrderID(order.getId());\n\n\t\t\tdo {\n\t\t\t\tSystem.out.println();\n\t\t\t\tif (listOfOrderedItems.size() == 0) {\n\t\t\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\t\t\tSystem.out.format(\"%-25s:\", \"TASK STATUS\");\n\t\t\t\t\tSystem.out.println(\"There is no ordered items!\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (i = 0; i < listOfOrderedItems.size(); i++) {\n\t\t\t\t\torderedItem = (OrderedItem) listOfOrderedItems.get(i);\n\t\t\t\t\tSystem.out.print(\"\\t\\t\");\n\n\t\t\t\t\tSystem.out.println((i + 1) + \") ID: \"\n\t\t\t\t\t\t\t+ orderedItem.getItem().getId() + \" | Name: \"\n\t\t\t\t\t\t\t+ orderedItem.getItem().getName() + \" | $\"\n\t\t\t\t\t\t\t+ orderedItem.getPrice());\n\t\t\t\t}\n\t\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\t\tSystem.out.println((i + 1) + \") Done\");\n\t\t\t\tSystem.out.println();\n\t\t\t\tSystem.out.print(\"\\t\\t\");\n\n\t\t\t\tSystem.out\n\t\t\t\t\t\t.print(\"Select an ordered item to remove from order: \");\n\t\t\t\tchoice = Integer.parseInt(sc.nextLine());\n\n\t\t\t\tif (choice != (i + 1)) {\n\t\t\t\t\torderedItem = (OrderedItem) listOfOrderedItems\n\t\t\t\t\t\t\t.get(choice - 1);\n\n\t\t\t\t\tcheck = orderedItemManager.removeOrderedItem(orderedItem);\n\n\t\t\t\t\tif (check) {\n\t\t\t\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\t\t\t\tSystem.out.format(\"%-25s:\", \"TASK STATUS\");\n\t\t\t\t\t\tSystem.out\n\t\t\t\t\t\t\t\t.println(\"Ordered item removed from order successfully!\");\n\t\t\t\t\t\tlistOfOrderedItems.remove(orderedItem);\n\t\t\t\t\t}\n\n\t\t\t\t\telse {\n\t\t\t\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\t\t\t\tSystem.out.format(\"%-25s:\", \"TASK STATUS\");\n\t\t\t\t\t\tSystem.out\n\t\t\t\t\t\t\t\t.println(\"Failed to remove ordered item from order!\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} while (choice != (i + 1));\n\n\t\t}\n\n\t\tcatch (Exception e) {\n\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\tSystem.out.format(\"%-25s:\", \"TASK STATUS\");\n\t\t\tSystem.out.println(\"Invalid Input!\");\n\t\t}\n\t\tSystem.out.print(\"\\t\\t\");\n\t\tSystem.out.println(\"************End of removing items************\");\n\t}"} {"path":"downloaded/OrderUI.java","method_name":"removeOrderedPromotionalPackage","content":"/**\n\t * This function display a list of orders for the user to select from, then\n\t * displays a list of ordered promotional package belonging to that order\n\t * for the user to remove it from the order.\n\t */\npublic static void removeOrderedPromotionalPackage() {\n\t\tSystem.out.print(\"\\t\\t\");\n\t\tSystem.out\n\t\t\t\t.println(\"************Removing ordered Promotional Package************\");\n\t\tOrderManager orderManager = new OrderManager();\n\t\tList listOfOrders = orderManager.viewOrder();\n\n\t\tOrderedPackageManager orderedPackageManager = new OrderedPackageManager();\n\t\tList listOfOrderedPromotionalPackages = null;\n\n\t\tint i = 0;\n\t\tint choice = 0;\n\t\tOrder order = null;\n\t\tOrderedPackage orderedPackage = null;\n\t\tboolean check = false;\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tif (listOfOrders.size() == 0) {\n\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\tSystem.out.format(\"%-25s:\", \"TASK STATUS\");\n\t\t\tSystem.out.println(\"There is no orders!\");\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\t// print the list of orders for the user to select from.\n\t\t\tfor (i = 0; i < listOfOrders.size(); i++) {\n\t\t\t\torder = (Order) listOfOrders.get(i);\n\t\t\t\tSystem.out.print(\"\\t\\t\");\n\n\t\t\t\tSystem.out.println((i + 1) + \") Order: \" + order.getId()\n\t\t\t\t\t\t+ \" | Table: \" + order.getTable().getId());\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t\tSystem.out.print(\"\\t\\t\");\n\n\t\t\tSystem.out\n\t\t\t\t\t.print(\"Select an order to remove the promotional package ordered: \");\n\t\t\tchoice = Integer.parseInt(sc.nextLine());\n\n\t\t\torder = (Order) listOfOrders.get(choice - 1);\n\n\t\t\tlistOfOrderedPromotionalPackages = orderedPackageManager\n\t\t\t\t\t.retrieveOrderedPackageByOrderID(order.getId());\n\n\t\t\tdo {\n\t\t\t\tSystem.out.println();\n\t\t\t\tif (listOfOrderedPromotionalPackages.size() == 0) {\n\t\t\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\t\t\tSystem.out.format(\"%-25s:\", \"TASK STATUS\");\n\t\t\t\t\tSystem.out\n\t\t\t\t\t\t\t.println(\"There is no ordered promotional package!\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (i = 0; i < listOfOrderedPromotionalPackages.size(); i++) {\n\t\t\t\t\torderedPackage = (OrderedPackage) listOfOrderedPromotionalPackages\n\t\t\t\t\t\t\t.get(i);\n\t\t\t\t\tSystem.out.print(\"\\t\\t\");\n\n\t\t\t\t\tSystem.out.println((i + 1) + \") ID: \"\n\t\t\t\t\t\t\t+ orderedPackage.getPackage().getId() + \" | Name: \"\n\t\t\t\t\t\t\t+ orderedPackage.getPackage().getName() + \" | $\"\n\t\t\t\t\t\t\t+ orderedPackage.getPrice());\n\t\t\t\t}\n\t\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\t\tSystem.out.println((i + 1) + \") Done\");\n\t\t\t\tSystem.out.println();\n\t\t\t\tSystem.out.print(\"\\t\\t\");\n\n\t\t\t\tSystem.out\n\t\t\t\t\t\t.print(\"Select an ordered promotional package to remove from order: \");\n\t\t\t\tchoice = Integer.parseInt(sc.nextLine());\n\n\t\t\t\tif (choice != (i + 1)) {\n\t\t\t\t\torderedPackage = (OrderedPackage) listOfOrderedPromotionalPackages\n\t\t\t\t\t\t\t.get(choice - 1);\n\n\t\t\t\t\tcheck = orderedPackageManager\n\t\t\t\t\t\t\t.removeOrderedPackage(orderedPackage);\n\n\t\t\t\t\tif (check) {\n\t\t\t\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\t\t\t\tSystem.out.format(\"%-25s:\", \"TASK STATUS\");\n\t\t\t\t\t\tSystem.out\n\t\t\t\t\t\t\t\t.println(\"Ordered promotional package removed from order successfully!\");\n\t\t\t\t\t\tlistOfOrderedPromotionalPackages.remove(orderedPackage);\n\t\t\t\t\t}\n\n\t\t\t\t\telse {\n\t\t\t\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\t\t\t\tSystem.out.format(\"%-25s:\", \"TASK STATUS\");\n\t\t\t\t\t\tSystem.out\n\t\t\t\t\t\t\t\t.println(\"Failed to remove ordered promotional package from order!\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} while (choice != (i + 1));\n\n\t\t}\n\n\t\tcatch (Exception e) {\n\t\t\tSystem.out.print(\"\\t\\t\");\n\t\t\tSystem.out.format(\"%-25s:\", \"TASK STATUS\");\n\t\t\tSystem.out.println(\"Invalid Input!\");\n\t\t}\n\t\tSystem.out.print(\"\\t\\t\");\n\t\tSystem.out\n\t\t\t\t.println(\"************End of removing promotional Package************\");\n\t}"} {"path":"downloaded/ConstraintExt.java","method_name":"n constraintIsRespect","content":"/**\n\t * Object Tuple avec les variables le même ordre que la contrainte\n\t * Si Object=null, c'est que la variable n'est pas affectée\n\t * @return\n\t \n\n\tpublic boolean constraintIsRespectee(ArrayList<Object> tuple) {\n\t\tfor (ArrayList<Object> tupleAVerifier : this.valTuples) {\n\t\t\t\n\t\t\tboolean allAreOk = true;\n\t\t\tfor (int i = 0; i < tuple.size(); i++) {\n\t\t\t\tif (tuple.get(i) != null) {\n\t\t\t\t\tif (!tuple.get(i).equals(tupleAVerifier.get(i))) {\n\t\t\t\t\t\tallAreOk = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (allAreOk) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t\t\n"} {"path":"downloaded/ConstraintExt.java","method_name":"> getValTupl","content":"/**\n\t * Object Tuple avec les variables le même ordre que la contrainte\n\t * Si Object=null, c'est que la variable n'est pas affectée\n\t * @return\n\t \n\n\tpublic Set<ArrayList<Object>> getValTuples() {\n\t\treturn valTuples;\n"} {"path":"downloaded/ConstraintExt.java","method_name":"g toStri","content":"/**\n\t * Object Tuple avec les variables le même ordre que la contrainte\n\t * Si Object=null, c'est que la variable n'est pas affectée\n\t * @return\n\t \n\n\tpublic String toString() {\n\t\treturn super.toString()+\" : EXT : \"+this.valTuples;\n"} {"path":"downloaded/ConceptMapper.java","method_name":"getId","content":"/**\n     * All purpose constructor\n     * @param id\n     * @param localPageDao\n     */\npublic int getId() {\n        return id;\n    }"} {"path":"downloaded/ColocatePreloader.java","method_name":"load","content":"/**\tPreloads colocates for words.\n\t *\n\t *\t<p>Loads the colocates preceding and following the word, plus\n\t *\tpreceding and following colocates for words following\n\t *\tthe word in its list.\n\t *\n\t *\t@param\tword\t\tThe word.\n\t *\n\t *\t@param\tdistance\tThe number of preceding and following\n\t *\t\t\t\t\t\tcolocates to preload.\n\t *\n\t *\t@param\tlookahead\tThis many additional words following the word\n\t *\t\t\t\t\t\tin its list also have their colocates preloaded.\n\t *\n\t *\t@throws\tPersistenceException\terror in persistence layer.\n\t */\npublic void load (Word word, int distance, int lookahead)\n\t\tthrows PersistenceException\n\t{\n\t\tInfo info = (Info)map.get(word);\n\t\tif (info == null || info.loaded) return;\n\t\tList list = info.list;\n\t\tint listSize = list.size();\n\t\tint pos = info.pos;\n\t\tint lastPos = Math.min(listSize, pos + lookahead + 1);\n\t\tArrayList words = new ArrayList();\n\t\tfor (int i = pos; i < lastPos; i++) {\n\t\t\tword = (Word)list.get(i);\n\t\t\tinfo = (Info)map.get(word);\n\t\t\tif (!info.loaded) {\n\t\t\t\twords.add(word);\n\t\t\t\tinfo.loaded = true;\n\t\t\t}\n\t\t}\n\t\tpm.getColocates(words, distance);\n//\t\tCollocateUtils.getColocates(pm, words, distance);\n\t}"} {"path":"downloaded/ExtDbResult.java","method_name":"*********","content":"\n    /**\n\t * 武器编号\n\n    /******************************************"} {"path":"downloaded/ExtDbResult.java","method_name":"/\n    private","content":"\n    /**\n\t * 武器编号\n主键值id\n\t */\n    private Integer GpsId;\n    /**\n\t * "} {"path":"downloaded/ExtDbResult.java","method_name":"\n\t */\n  ","content":"\n    /**\n\t * 武器编号\n�组织机构id\n\t */\n    private Integer GpsOr"} {"path":"downloaded/ExtDbResult.java","method_name":"* 定�","content":"\n    /**\n\t * 武器编号\nber;\n    /**\n\t * 定位设备名称\n\t */\n "} {"path":"downloaded/ExtDbResult.java","method_name":"\tpublic Integ","content":"\n    /**\n\t * 武器编号\nUrl;\n    \n    \n\tpublic Integer getDutyId() {\n\t\treturn du"} {"path":"downloaded/ExtDbResult.java","method_name":"ItemId() {\n\t\tre","content":"\n    /**\n\t * 武器编号\nnteger getDutyItemId() {\n\t\treturn dutyItemId;\n\t}\n\tpublic vo"} {"path":"downloaded/ExtDbResult.java","method_name":"turn or","content":"\n    /**\n\t * 武器编号\nOrgId() {\n\t\treturn orgId;\n\t}\n\tpublic void s"} {"path":"downloaded/ExtDbResult.java","method_name":") {\n\t\treturn","content":"\n    /**\n\t * 武器编号\neger getYmd() {\n\t\treturn ymd;\n\t}\n\tpublic void setYm"} {"path":"downloaded/ViewStudents1.java","method_name":"initComponents","content":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n@SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        buttonGroup1 = new javax.swing.ButtonGroup();\n        jPanel1 = new javax.swing.JPanel();\n        jLabel2 = new javax.swing.JLabel();\n        jLabel3 = new javax.swing.JLabel();\n        jLabel6 = new javax.swing.JLabel();\n        jLabel4 = new javax.swing.JLabel();\n        jLabel10 = new javax.swing.JLabel();\n        jLabel11 = new javax.swing.JLabel();\n        jLabel7 = new javax.swing.JLabel();\n        n1 = new javax.swing.JTextField();\n        f1 = new javax.swing.JTextField();\n        c1 = new javax.swing.JTextField();\n        m3 = new javax.swing.JTextField();\n        c2 = new javax.swing.JComboBox<>();\n        y1 = new javax.swing.JComboBox<>();\n        d1 = new com.toedter.calendar.JDateChooser();\n        jLabel8 = new javax.swing.JLabel();\n        jLabel16 = new javax.swing.JLabel();\n        jLabel9 = new javax.swing.JLabel();\n        jLabel15 = new javax.swing.JLabel();\n        jLabel12 = new javax.swing.JLabel();\n        jLabel14 = new javax.swing.JLabel();\n        jScrollPane2 = new javax.swing.JScrollPane();\n        a1 = new javax.swing.JTextArea();\n        s1 = new javax.swing.JComboBox<>();\n        e1 = new javax.swing.JTextField();\n        r1 = new javax.swing.JRadioButton();\n        r2 = new javax.swing.JRadioButton();\n        r3 = new javax.swing.JTextField();\n        f2 = new javax.swing.JComboBox<>();\n        update = new javax.swing.JButton();\n        jButton2 = new javax.swing.JButton();\n        jLabel1 = new javax.swing.JLabel();\n        jButton3 = new javax.swing.JButton();\n        cid = new javax.swing.JLabel();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        t2 = new javax.swing.JTable();\n        n = new javax.swing.JLabel();\n        t1 = new javax.swing.JTextField();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n        setTitle(\"View Students\");\n\n        jPanel1.setBackground(new java.awt.Color(204, 0, 102));\n\n        jLabel2.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        jLabel2.setText(\"Name:\");\n\n        jLabel3.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        jLabel3.setText(\"Father's Name:\");\n\n        jLabel6.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        jLabel6.setText(\"College Name:\");\n\n        jLabel4.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        jLabel4.setText(\"Mob No:\");\n\n        jLabel10.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        jLabel10.setText(\"Course:\");\n\n        jLabel11.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        jLabel11.setText(\"Year:\");\n\n        jLabel7.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        jLabel7.setText(\"DOB:\");\n\n        n1.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n\n        f1.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n\n        c1.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n\n        m3.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n\n        c2.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        c2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { \"BBA\", \"BCA\", \"BA\", \"BSC\", \"BCom\", \"BCom(hons)\", \"Btech\", \"BA+LLB\", \"MBA\", \"BPharma\", \"Others\", \" \" }));\n        c2.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                c2ActionPerformed(evt);\n            }\n        });\n\n        y1.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        y1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { \"1\", \"2\", \"3\", \"4\", \"5\" }));\n        y1.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                y1ActionPerformed(evt);\n            }\n        });\n\n        jLabel8.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        jLabel8.setText(\"Address:\");\n\n        jLabel16.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        jLabel16.setText(\"State\");\n\n        jLabel9.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        jLabel9.setText(\"Email:\");\n\n        jLabel15.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        jLabel15.setText(\"Room:\");\n\n        jLabel12.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        jLabel12.setText(\"Room No:\");\n\n        jLabel14.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        jLabel14.setText(\"Fees:\");\n\n        a1.setColumns(20);\n        a1.setRows(5);\n        jScrollPane2.setViewportView(a1);\n\n        s1.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        s1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { \"Andhra Pradesh\", \"Arunachal\", \"Assam\", \"Bihar \", \"Chattisgarh\", \"Goa\", \"Gujarat\", \"Haryana\", \"Himachal Pradesh\", \"Jammu and kashmir\", \"Jharkhand\", \"Karnataka\", \"Kerela\", \"Madhya Pradesh\", \"Maharashtra\", \"Manipur\", \"Meghalaya\", \"Mizoram\", \"Nagaland\", \"Odisha\", \"Punjab\", \"Rajasthan\", \"Sikkim\", \"Tami lNadu\", \"Tilangana\", \"Tripura\", \"Uttar Pradesh\", \"Uttarakhand\", \"WestBengal\" }));\n\n        e1.setFont(new java.awt.Font(\"Tahoma\", 1, 14)); // NOI18N\n        e1.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                e1ActionPerformed(evt);\n            }\n        });\n\n        buttonGroup1.add(r1);\n        r1.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        r1.setText(\"AC\");\n\n        buttonGroup1.add(r2);\n        r2.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        r2.setText(\"Non-AC\");\n\n        r3.setFont(new java.awt.Font(\"Tahoma\", 1, 14)); // NOI18N\n        r3.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                r3ActionPerformed(evt);\n            }\n        });\n\n        f2.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        f2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { \"1 Seater .......AC.......12,0000\", \"2 Seater .......AC.......1,00000\", \"3 Seater .......AC.......90,000\", \"4 Seater .......AC.......80,000\", \"1 Seater .......Non-AC.......1,00000\", \"2 Seater .......Non-AC.......90,000\", \"3 Seater .......Non-AC.......80,000\", \"4 Seater .......Non-AC.......65,000\" }));\n\n        update.setFont(new java.awt.Font(\"Tahoma\", 1, 48)); // NOI18N\n        update.setText(\"Update\");\n        update.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                updateActionPerformed(evt);\n            }\n        });\n\n        jButton2.setFont(new java.awt.Font(\"Tahoma\", 1, 48)); // NOI18N\n        jButton2.setText(\"Delete\");\n        jButton2.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButton2ActionPerformed(evt);\n            }\n        });\n\n        jLabel1.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        jLabel1.setText(\"Cid:\");\n\n        jButton3.setFont(new java.awt.Font(\"Tahoma\", 1, 48)); // NOI18N\n        jButton3.setText(\"LogOut\");\n        jButton3.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButton3ActionPerformed(evt);\n            }\n        });\n\n        cid.setFont(new java.awt.Font(\"Tahoma\", 1, 24)); // NOI18N\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()\n                .addGap(24, 24, 24)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                        .addGroup(jPanel1Layout.createSequentialGroup()\n                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                                .addGroup(jPanel1Layout.createSequentialGroup()\n                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))\n                                    .addGap(59, 59, 59))\n                                .addGroup(jPanel1Layout.createSequentialGroup()\n                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                    .addGap(105, 105, 105)))\n                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                                .addComponent(n1, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)\n                                .addComponent(c1)\n                                .addComponent(y1, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                .addComponent(m3, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                .addComponent(c2, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                .addComponent(d1, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                .addComponent(f1)\n                                .addComponent(cid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))\n                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))\n                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(51, 51, 51)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addGroup(jPanel1Layout.createSequentialGroup()\n                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                .addGap(0, 0, Short.MAX_VALUE))\n                            .addGroup(jPanel1Layout.createSequentialGroup()\n                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addGroup(jPanel1Layout.createSequentialGroup()\n                                .addComponent(r1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                .addGap(44, 44, 44)\n                                .addComponent(r2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))\n                            .addComponent(f2, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addGap(62, 62, 62))\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addGroup(jPanel1Layout.createSequentialGroup()\n                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                .addGap(18, 18, 18)\n                                .addComponent(s1, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE))\n                            .addGroup(jPanel1Layout.createSequentialGroup()\n                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                .addGap(18, 18, 18)\n                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE))\n                            .addGroup(jPanel1Layout.createSequentialGroup()\n                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                .addGap(18, 18, 18)\n                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addComponent(r3, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                    .addComponent(e1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE))))\n                        .addGap(65, 65, 65))))\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addGap(131, 131, 131)\n                .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(130, 130, 130)\n                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(131, 131, 131)\n                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n        jPanel1Layout.setVerticalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addGap(46, 46, 46)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                        .addComponent(cid, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addComponent(jLabel1))))\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addGroup(jPanel1Layout.createSequentialGroup()\n                                .addGap(140, 140, 140)\n                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                    .addComponent(c1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                            .addGroup(jPanel1Layout.createSequentialGroup()\n                                .addGap(12, 12, 12)\n                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                                    .addGroup(jPanel1Layout.createSequentialGroup()\n                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                            .addComponent(s1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))\n                                        .addGap(56, 56, 56)\n                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                            .addComponent(e1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))\n                                        .addGap(21, 21, 21))\n                                    .addGroup(jPanel1Layout.createSequentialGroup()\n                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                            .addComponent(n1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                                        .addGap(18, 18, 18)\n                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                            .addComponent(f1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))\n                                        .addGap(105, 105, 105)))\n                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addGroup(jPanel1Layout.createSequentialGroup()\n                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                            .addComponent(m3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))\n                                        .addGap(27, 27, 27)\n                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                            .addComponent(c2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                                    .addGroup(jPanel1Layout.createSequentialGroup()\n                                        .addGap(28, 28, 28)\n                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                            .addComponent(r1)\n                                            .addComponent(r2))))\n                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addGroup(jPanel1Layout.createSequentialGroup()\n                                        .addGap(43, 43, 43)\n                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                            .addComponent(y1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()\n                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                            .addComponent(r3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))\n                                        .addGap(26, 26, 26)))))\n                        .addGap(22, 22, 22)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addGroup(jPanel1Layout.createSequentialGroup()\n                                .addGap(3, 3, 3)\n                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                    .addComponent(f2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addGap(440, 440, 440)\n                        .addComponent(d1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                .addGap(41, 41, 41)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addContainerGap(35, Short.MAX_VALUE))\n        );\n\n        t2.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n\n            },\n            new String [] {\n                \"Cid\", \"Name\", \"Father's Name\", \"College Name\", \"Mob  No\", \"Course\", \"Year\", \"DOB\", \"Address\", \"State\", \"Email\", \"Room\", \"Room No\", \"Fees\"\n            }\n        ) {\n            boolean[] canEdit = new boolean [] {\n                false, false, false, false, false, false, false, false, false, false, false, false, false, false\n            };\n\n            public boolean isCellEditable(int rowIndex, int columnIndex) {\n                return canEdit [columnIndex];\n            }\n        });\n        t2.addMouseListener(new java.awt.event.MouseAdapter() {\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                t2MouseClicked(evt);\n            }\n        });\n        jScrollPane1.setViewportView(t2);\n\n        n.setFont(new java.awt.Font(\"Tahoma\", 1, 36)); // NOI18N\n        n.setText(\"Name:\");\n\n        t1.setFont(new java.awt.Font(\"Tahoma\", 1, 36)); // NOI18N\n        t1.setForeground(new java.awt.Color(204, 0, 0));\n        t1.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                t1ActionPerformed(evt);\n            }\n        });\n        t1.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyReleased(java.awt.event.KeyEvent evt) {\n                t1KeyReleased(evt);\n            }\n        });\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addGroup(layout.createSequentialGroup()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGap(5, 5, 5)\n                        .addComponent(n, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(t1))\n                    .addComponent(jScrollPane1))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addContainerGap(22, Short.MAX_VALUE)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(n, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n        );\n\n        pack();\n    }"} {"path":"downloaded/ExtDbResult.java","method_name":";\n\t}\n\tpubl","content":"\n    /**\n\t * 武器编号\nn dutyTypeId;\n\t}\n\tpublic void setDutyTypeId(Int"} {"path":"downloaded/ExtDbResult.java","method_name":" {\n\t\treturn d","content":"\n    /**\n\t * 武器编号\ntDutyTypeName() {\n\t\treturn dutyTypeName;\n\t}\n\tpublic void"} {"path":"downloaded/ExtDbResult.java","method_name":"() {\n\t\tre","content":"\n    /**\n\t * 武器编号\n String getName() {\n\t\treturn name;\n\t}\n\tpublic vo"} {"path":"downloaded/ExtDbResult.java","method_name":"rn begin","content":"\n    /**\n\t * 武器编号\nTime() {\n\t\treturn beginTime;\n\t}\n\tpublic void s"} {"path":"downloaded/ExtDbResult.java","method_name":"dTime() {\n\t","content":"\n    /**\n\t * 武器编号\nblic Date getEndTime() {\n\t\treturn endTime;\n\t}\n\tpubli"} {"path":"downloaded/ExtDbResult.java","method_name":"() {\n\t\treturn","content":"\n    /**\n\t * 武器编号\n getItemTypeId() {\n\t\treturn itemTypeId;\n\t}\n\tpublic void"} {"path":"downloaded/ExtDbResult.java","method_name":") {\n\t\treturn","content":"\n    /**\n\t * 武器编号\n getItemId() {\n\t\treturn itemId;\n\t}\n\tpublic void se"} {"path":"downloaded/ExtDbResult.java","method_name":"n level;\n\t}\n\tpublic voi","content":"\n    /**\n\t * 武器编号\n) {\n\t\treturn level;\n\t}\n\tpublic void setLevel(Integer level) {\n\t\tthis.lev"} {"path":"downloaded/ExtDbResult.java","method_name":"arentId;\n\t}\n\tpu","content":"\n    /**\n\t * 武器编号\narentId = parentId;\n\t}\n\tpublic String getFullIdPath() {\n"} {"path":"downloaded/ExtDbResult.java","method_name":"\t}\n\t\n\tpublic int","content":"\n    /**\n\t * 武器编号\n= fullIdPath;\n\t}\n\t\n\tpublic int getVehicleId() {\n\t\treturn vehi"} {"path":"downloaded/ExtDbResult.java","method_name":"icleTypeId() {\n\t\treturn","content":"\n    /**\n\t * 武器编号\n getVehicleVehicleTypeId() {\n\t\treturn vehicleVehicleTypeId;\n\t}\n\tpublic void"} {"path":"downloaded/ExtDbResult.java","method_name":"\n\t\treturn vehicleOrgId;\n","content":"\n    /**\n\t * 武器编号\nhicleOrgId() {\n\t\treturn vehicleOrgId;\n\t}\n\tpublic void setVehicleOrgId(int veh"} {"path":"downloaded/ExtDbResult.java","method_name":"mber(String veh","content":"\n    /**\n\t * 武器编号\netVehicleNumber(String vehicleNumber) {\n\t\tthis.vehicleNu"} {"path":"downloaded/ExtDbResult.java","method_name":"ublic void setVeh","content":"\n    /**\n\t * 武器编号\nomGroup;\n\t}\n\tpublic void setVehicleIntercomGroup(String vehicle"} {"path":"downloaded/ExtDbResult.java","method_name":"\n\t\treturn vehicle","content":"\n    /**\n\t * 武器编号\nrcomPerson() {\n\t\treturn vehicleIntercomPerson;\n\t}\n\tpublic void "} {"path":"downloaded/ExtDbResult.java","method_name":"public int getV","content":"\n    /**\n\t * 武器编号\nomPerson;\n\t}\n\tpublic int getVehicleGpsId() {\n\t\treturn vehic"} {"path":"downloaded/ExtDbResult.java","method_name":" String getVehicl","content":"\n    /**\n\t * 武器编号\nId;\n\t}\n\tpublic String getVehicleGpsName() {\n\t\treturn vehicleGps"} {"path":"downloaded/ExtDbResult.java","method_name":"String getVehicl","content":"\n    /**\n\t * 武器编号\nme;\n\t}\n\tpublic String getVehiclePurpose() {\n\t\treturn vehiclePu"} {"path":"downloaded/ExtDbResult.java","method_name":"lic String ","content":"\n    /**\n\t * 武器编号\nurpose;\n\t}\n\tpublic String getVehicleBrand() {\n\t\tretu"} {"path":"downloaded/ExtDbResult.java","method_name":" vehicleBrand;\n","content":"\n    /**\n\t * 武器编号\n.vehicleBrand = vehicleBrand;\n\t}\n\tpublic String getVehicleSi"} {"path":"downloaded/ExtDbResult.java","method_name":"SiteQty = veh","content":"\n    /**\n\t * 武器编号\n\t\tthis.vehicleSiteQty = vehicleSiteQty;\n\t}\n\tpublic Inte"} {"path":"downloaded/ExtDbResult.java","method_name":"eId) {\n\t\tthis.","content":"\n    /**\n\t * 武器编号\neger vehicleTypeId) {\n\t\tthis.vehicleTypeId = vehicleTypeId"} {"path":"downloaded/ExtDbResult.java","method_name":"\t\tthis.policeId =","content":"\n    /**\n\t * 武器编号\nr policeId) {\n\t\tthis.policeId = policeId;\n\t}\n\tpublic Integer ge"} {"path":"downloaded/ExtDbResult.java","method_name":"d = policeTypeI","content":"\n    /**\n\t * 武器编号\nis.policeTypeId = policeTypeId;\n\t}\n\tpublic String getPolice"} {"path":"downloaded/ExtDbResult.java","method_name":"Name;\n\t}\n\tpubl","content":"\n    /**\n\t * 武器编号\neName = policeName;\n\t}\n\tpublic Integer getPoliceOrgId() {"} {"path":"downloaded/ExtDbResult.java","method_name":"eOrgId;\n\t}\n\tpub","content":"\n    /**\n\t * 武器编号\neOrgId = policeOrgId;\n\t}\n\tpublic String getPoliceIdcardno()"} {"path":"downloaded/ExtDbResult.java","method_name":"o = policeIdcardno;\n","content":"\n    /**\n\t * 武器编号\n.policeIdcardno = policeIdcardno;\n\t}\n\tpublic String getPoliceNumber()"} {"path":"downloaded/ExtDbResult.java","method_name":" String getPoliceTitle","content":"\n    /**\n\t * 武器编号\ner;\n\t}\n\tpublic String getPoliceTitle() {\n\t\treturn policeTitle;\n\t}\n\tpublic"} {"path":"downloaded/ExtDbResult.java","method_name":"e;\n\t}\n\tpublic void setP","content":"\n    /**\n\t * 武器编号\nrn policeMobile;\n\t}\n\tpublic void setPoliceMobile(String policeMobile) {\n\t\tt"} {"path":"downloaded/ExtDbResult.java","method_name":"(String police","content":"\n    /**\n\t * 武器编号\nliceMobileShort(String policeMobileShort) {\n\t\tthis.policeM"} {"path":"downloaded/ExtDbResult.java","method_name":"p;\n\t}\n\tpublic vo","content":"\n    /**\n\t * 武器编号\nceIntercomGroup;\n\t}\n\tpublic void setPoliceIntercomGroup(Strin"} {"path":"downloaded/ExtDbResult.java","method_name":"rson() {\n\t\t","content":"\n    /**\n\t * 武器编号\noliceIntercomPerson() {\n\t\treturn policeIntercomPerso"} {"path":"downloaded/ExtDbResult.java","method_name":"comPerson = polic","content":"\n    /**\n\t * 武器编号\nis.policeIntercomPerson = policeIntercomPerson;\n\t}\n\tpublic Inte"} {"path":"downloaded/ExtDbResult.java","method_name":"Id = policeGpsI","content":"\n    /**\n\t * 武器编号\nthis.policeGpsId = policeGpsId;\n\t}\n\tpublic String getPolice"} {"path":"downloaded/ExtDbResult.java","method_name":"sName = policeG","content":"\n    /**\n\t * 武器编号\n\t\tthis.policeGpsName = policeGpsName;\n\t}\n\tpublic Integer get"} {"path":"downloaded/ExtDbResult.java","method_name":"}\n\tpublic Stri","content":"\n    /**\n\t * 武器编号\nd = weaponId;\n\t}\n\tpublic String getWeaponStandard() {\n\t\tre"} {"path":"downloaded/ExtDbResult.java","method_name":"eaponSta","content":"\n    /**\n\t * 武器编号\nponStandard = weaponStandard;\n\t}\n\tpublic Strin"} {"path":"downloaded/ExtDbResult.java","method_name":"(String weap","content":"\n    /**\n\t * 武器编号\nsetWeaponNumber(String weaponNumber) {\n\t\tthis.weaponNu"} {"path":"downloaded/ExtDbResult.java","method_name":"c void setW","content":"\n    /**\n\t * 武器编号\npeId;\n\t}\n\tpublic void setWeaponTypeId(Integer weapon"} {"path":"downloaded/TestRetryAnalyzer.java","method_name":"retry","content":"/**\n\t * This method decides how many times a test needs to be rerun. TestNg will\n\t * call this method every time a test fails. So we can put some code in here\n\t * to decide when to rerun the test.\n\t * \n\t * Note: This method will return true if a tests needs to be retried and\n\t * false it not.\n\t */\npublic boolean retry(ITestResult result) {\n\t\tif (counter < retryMaxLimit) {\n\t\t\tcounter++;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}"} {"path":"downloaded/LoginFragment.java","method_name":"ring g_imag","content":"\n\n        /** \nll;\n        public static String g_image = null;\n        \n        public static LoginF"} {"path":"downloaded/LoginFragment.java","method_name":"eturn mFragm","content":"\n\n        /** \ntInstance(){\n                return mFragment;\n        }\n\n        @Override\n        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n                View view = inflater.inflate(R.layout.fragment_login, container, false);\n                mContext = getActivity();\n                getRememberMeTag();\n                getUserRMAccount();\n                findView(view);\n                ini"} {"path":"downloaded/LoginFragment.java","method_name":"tate, Exception exception) {\n","content":"\n\n        /** \n SessionState state, Exception exception) {\n                if (state.isOpened()) {\n                        Log.d(TAG, \"Facebook session opened.\");\n          "} {"path":"downloaded/LoginFragment.java","method_name":"us api client\n    ","content":"\n\n        /** \n     // Initializing google plus api client\n                mGoogleApiClient = new GoogleApiClient.Builder(mContext).addConnectionCallbacks(this).addOnConnectionFailedListener(this).addApi(Plus.API, Plus.PlusOptions.builder().build()).addScope(Plus.SCOPE_PLUS_LOGIN).build();\n\n        }\n\n        @Override\n        public void onConnectionFailed(ConnectionResult result) {\n                if (!result.hasResolution()) {\n                        GooglePlayServicesUtil.getErrorDialog(result.getErrorCode(), getActivity(), 0).show();\n                        return;\n                }\n\n                if (!mIntentInProgress) {\n                        // Store the ConnectionResult for later usage\n                        mConnectionResult = result;\n\n                        if (mSignInClicked) {\n                                // The user has already clicked 'sign-in' so we\n                          "} {"path":"downloaded/MessageDto.java","method_name":"getMessage","content":"/**\n\t * @return the message\n\t */\npublic String getMessage() {\n\t\treturn message;\n\t}"} {"path":"downloaded/AbstractParsePomActionDelegate.java","method_name":"n isEnabl","content":"\n\t/**\n\t * Checks if is enabled.\n\t * \n\t * @return true, if checks if is enabled\n\t * \n\t * @see org.org.eclipse.dws.utils.platform.actions.AbstractObjectAction#isEnabled()\n\t \n\n\t@Override\n\tpublic boolean isEnabled() {\n\t\tboolean result = false;\n\t\tif (getSelection().size() == 1) {\n\t\t\tif (getSelection().getFirstElement() instanceof IResource) {\n\t\t\t\tIResource resource = (IResource) getSelection().getFirstElement();\n\t\t\t\tString pomFileNames = AggregatedProperties.getPomFileNames(resource.getProject());\n\t\t\t\tStringTokenizer tkz = new StringTokenizer(pomFileNames, ConfigurationConstants.POM_FILES_SEPARATOR, false);\n\t\t\t\twhile (tkz.hasMoreTokens()) {\n\t\t\t\t\tif (resource.getName().equalsIgnoreCase(tkz.nextToken())) {\n\t\t\t\t\t\tresult = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n"} {"path":"downloaded/AbstractParsePomActionDelegate.java","method_name":"l getShe","content":"\n\t/**\n\t * Gets the shell.\n\t * \n\t * @return the shell\n\t * \n\t * @see org.org.eclipse.dws.utils.platform.actions.AbstractObjectAction#getShell()\n\t \n\n\t@Override\n\tprotected Shell getShell() {\n\t\tShell result = null;\n\t\tif (this.getDefaultShell() != null) {\n\t\t\tresult = this.getDefaultShell();\n\t\t} else {\n\t\t\tresult = PluginToolBox.getActiveShell(DWSUIPlugin.getDefault());\n\t\t}\n\t\treturn result;\n"} {"path":"downloaded/SettingsActivity.java","method_name":"isXLargeTablet","content":"/**\n     * Helper method to determine if the device has an extra-large screen. For\n     * example, 10\" tablets are extra-large.\n     */\nprivate static boolean isXLargeTablet(Context context) {\n        return (context.getResources().getConfiguration().screenLayout\n                & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;\n    }"} {"path":"downloaded/SettingsActivity.java","method_name":"onIsMultiPane","content":"/**\n     * {@inheritDoc}\n     */\n@Override\n    public boolean onIsMultiPane() {\n        return isXLargeTablet(this);\n    }"} {"path":"downloaded/SettingsActivity.java","method_name":"isValidFragment","content":"/**\n     * This method stops fragment injection in malicious applications.\n     * Make sure to deny any unknown fragments here.\n     */\nprotected boolean isValidFragment(String fragmentName) {\n        return PreferenceFragment.class.getName().equals(fragmentName)\n                || GeneralPreferenceFragment.class.getName().equals(fragmentName)\n                || AutoSortFragment.class.getName().equals(fragmentName)\n                || Group1PreferenceFragment.class.getName().equals(fragmentName)\n                || Group2PreferenceFragment.class.getName().equals(fragmentName)\n                || Group3PreferenceFragment.class.getName().equals(fragmentName)\n                || Group4PreferenceFragment.class.getName().equals(fragmentName)\n                || Group5PreferenceFragment.class.getName().equals(fragmentName)\n                || Group6PreferenceFragment.class.getName().equals(fragmentName)\n                || Group7PreferenceFragment.class.getName().equals(fragmentName);\n    }"} {"path":"downloaded/SWTBotTwistie.java","method_name":"getLabelText","content":"/**\n\t * Returns text of the first sibling label\n\t * @return text of the first sibling Label (or CLabel) or null if there is no Label\n\t */\npublic String getLabelText(){\n\t\treturn syncExec(new StringResult() {\t\t\n\t\t\t@Override\n\t\t\tpublic String run() {\n\t\t\t\tControl[] aux = widget.getParent().getChildren();\n\t\t\t\tfor (Control control : aux) {\n\t\t\t\t\tif (control instanceof CLabel){\n\t\t\t\t\t\treturn ((CLabel)control).getText();\n\t\t\t\t\t}\n\t\t\t\t\tif (control instanceof Label){\n\t\t\t\t\t\treturn ((Label)control).getText();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t}"} {"path":"downloaded/SWTBotTwistie.java","method_name":"toggle","content":"/**\n\t * Toggles twistie (expands its section)\n\t */\npublic AbstractSWTBotControl<Twistie> toggle() {\n\t\tsetFocus();\n\t\tkeyboard().typeCharacter('\\r');\n\t\treturn this;\n\t}"} {"path":"downloaded/SWTBotTwistie.java","method_name":"isExpanded","content":"/**\n\t * Checks whether the Twistie is expanded\n\t * @return true if Twistie is expanded\n\t */\npublic boolean isExpanded(){\n\t\treturn syncExec(new BoolResult() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Boolean run() {\n\t\t\t\treturn widget.isExpanded();\n\t\t\t}\n\t\t});\n\t}"} {"path":"downloaded/MapAPIControllerTest.java","method_name":"getDeviceMock","content":"/**\n\t * Gets the device mock.\n\t * \n\t * @return the device mock\n\t */\nprivate DeviceBCFMockImpl getDeviceMock()\n\t{\n\t\treturn (DeviceBCFMockImpl)SensusAppContext.getApplicationContext().getBean(MapAPIController.class)\n\t\t\t\t.getDeviceBCF();\n\t}"} {"path":"downloaded/IMMData.java","method_name":"getCode","content":"/**\n\t * Get the code for the type of {@link IMMData} represented\n\t * by this object.  This is generally defined by the\n\t * class's {@link MMData} annotation.\n\t */\npublic default String getCode() {\n\t\tMMData annotation = this.getClass().getAnnotation(MMData.class);\n\t\tif (annotation == null) {\n\t\t\tthrow new RuntimeException(this.getClass().getSimpleName() +\n\t\t\t\t\t\" has no \" + MMData.class.getSimpleName() + \" annotation\");\n\t\t}\n\t\treturn annotation.code();\n\t}"} {"path":"downloaded/MapsFragment.java","method_name":"nt newInstan","content":" /**\n     * Crée une nouvelle instance de MapsFragment à partir d'un id.\n     * @param id id d'un endroit sous forme de String\n     * @author Yanick Bellavance et Olivier Chan\n     * @return retourne une nouvelle instance de Mapsfragment\n    \n   public static MapsFragment newInstance1(String id)\n    {\n        Bundle args = new Bundle();\n        args.putSerializable(ARG_ENDROIT_ID, id);\n\n        MapsFragment fragment = new MapsFragment();\n        fragment.setArguments(args);\n\n        return  fragment;\n  "} {"path":"downloaded/MapsFragment.java","method_name":"id onCre","content":" /**\n     * Crée une nouvelle instance de MapsFragment à partir d'un id.\n     * @param id id d'un endroit sous forme de String\n     * @author Yanick Bellavance et Olivier Chan\n     * @return retourne une nouvelle instance de Mapsfragment\n    \n   @Override\n    public void onCreate(Bundle bundle) {\n        super.onCreate(bundle);\n        if(getArguments().getSerializable(ARG_ENDROIT_ID) != null)\n            endroitID = UUID.fromString(getArguments().getSerializable(ARG_ENDROIT_ID).toString());\n\n        getMapAsync(new OnMapReadyCallback() {\n            @Override\n            public void onMapReady(GoogleMap googleMap) {\n                mMap = googleMap;\n\n                if (MapsActivity.actualMode == Mode.Aucun)\n                {\n                   AddAllMarkers(getContext());\n                }\n\n                if (MapsActivity.actualMode == Mode.Information)\n                {\n                    mEndroit = EndroitLog.get(getContext()).getEndroit(endroitID);\n                }\n\n                mMap.setOnMapClickListener(new GoogleMap.OnMapClickListener() {\n                    @Override\n                    public void onMapClick(LatLng latLng) {\n                        if (MapsActivity.actualMode == Mode.Ajout)\n                        {\n                            mPosition = new MarkerOptions().position(latLng);\n\n                            AjoutDialogueFragment dialog = AjoutDialogueFragment.\n                                    newInstance(null, null);\n\n                            dialog.setTargetFragment(MapsFragment.this, REQUEST_CODE);\n                            dialog.show(getFragmentManager(), DIALOG_TAG);\n\n                            mPosition.draggable(false);\n                            mMap.addMarker(mPosition);\n\n\n                            mCallBacks.onChangeMode(Mode.Aucun, null);\n                        }\n\n\n                        if (MapsActivity.actualMode == Mode.Modification)\n                        {\n                            mPosition = new MarkerOptions().position(latLng);\n\n                            mEndroit = EndroitLog.get(getContext()).getEndroit(endroitID);\n                            ModificationDialogueFragment dialog = ModificationDialogueFragment.\n                                    newInstance(mEndroit.getmNom(), mEndroit.getmDescription());\n\n                            dialog.setTargetFragment(MapsFragment.this, REQUEST_CODE);\n                            dialog.show(getFragmentManager(), DIALOG_TAG);\n\n                            mPosition.draggable(true);\n                            mMap.addMarker(mPosition);\n\n                            mCallBacks.onChangeMode(Mode.Aucun, null);\n                        }\n                    }\n                });\n\n                mMap.setOnMarkerClickListener(new GoogleMap.OnMarkerClickListener() {\n                    @Override\n                    public boolean onMarkerClick(Marker marker) {\n\n                        if (MapsActivity.actualMode == Mode.Aucun)\n                        {\n                            mCallBacks.onChangeMode(Mode.Information, marker.getTag().toString());\n                            return true;\n                        }\n\n                        if (MapsActivity.actualMode == Mode.Information)\n                        {\n                            mCallBacks.onChangeMode(Mode.Information, marker.getTag().toString());\n                        }\n\n                        if (MapsActivity.actualMode == Mode.Modification)\n                        {\n                            for (Endroit endroit: EndroitLog.get(getContext()).getEndroits()) {\n                                Marker marqueur = mMap.addMarker(new MarkerOptions()\n                                        .position(new LatLng(endroit.getmLatitude(),\n                                                endroit.getmLongitude())));\n                                if(marqueur != marker)\n                                    marqueur.setVisible(false);\n                            }\n                            marker.isDraggable();\n                            return true;\n                        }\n\n                        return false;\n                    }\n                });\n\n\n\n                mMap.setOnMarkerDragListener(new GoogleMap.OnMarkerDragListener() {\n                    @Override\n                    public void onMarkerDragStart(Marker marker) {\n\n                    }\n\n                    @Override\n                    public void onMarkerDrag(Marker marker) {\n\n                    }\n\n                    @Override\n                    public void onMarkerDragEnd(Marker marker) {\n                        EndroitLog.get(getContext()).updateEndroit(EndroitLog.get(getContext())\n                                .getEndroit(endroitID));\n                    }});\n                }\n            });\n      "} {"path":"downloaded/MapsFragment.java","method_name":"void onActivityR","content":"    /**\n     * Méthode qui ajoute des marqueurs sur la carte\n     * @param context contexte du fragment\n     * @author Yanick Bellavance et Olivier Chan\n  \n\n    @Override\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        if (resultCode != Activity.RESULT_OK){\n            return;\n        }\n\n        if (requestCode == REQUEST_CODE){\n            Endroit e = new Endroit();\n\n\n            String nom = (String) data.getSerializableExtra(AjoutDialogueFragment.EXTRA_NOM);\n            String descritpion = (String) data.getSerializableExtra(AjoutDialogueFragment.EXTRA_DESCRIPTION);\n\n            e.setmNom(nom);\n            e.setmDescription(descritpion);\n            e.setmLatitude(mPosition.getPosition().latitude);\n            e.setmLongitude(mPosition.getPosition().longitude);\n\n            EndroitLog.get(getContext()).AddEndroit(e);\n            mCallBacks.onChangeMode(Mode.Aucun, null);\n        }\n"} {"path":"downloaded/HRServiceAppModuleImpl.java","method_name":"getDepartments","content":"/**\n     * Container's getter for Departments.\n     * @return Departments\n     */\npublic ViewObjectImpl getDepartments() {\n        return (ViewObjectImpl)findViewObject(\"Departments\");\n    }"} {"path":"downloaded/HRServiceAppModuleImpl.java","method_name":"getEmployees","content":"/**\n     * Container's getter for Employees.\n     * @return Employees\n     */\npublic ViewObjectImpl getEmployees() {\n        return (ViewObjectImpl)findViewObject(\"Employees\");\n    }"} {"path":"downloaded/HRServiceAppModuleImpl.java","method_name":"getEmployeesForDepartment","content":"/**\n     * Container's getter for EmployeesForDepartment.\n     * @return EmployeesForDepartment\n     */\npublic ViewObjectImpl getEmployeesForDepartment() {\n        return (ViewObjectImpl)findViewObject(\"EmployeesForDepartment\");\n    }"} {"path":"downloaded/HRServiceAppModuleImpl.java","method_name":"getEmpDeptFkLink1","content":"/**\n     * Container's getter for EmpDeptFkLink1.\n     * @return EmpDeptFkLink1\n     */\npublic ViewLinkImpl getEmpDeptFkLink1() {\n        return (ViewLinkImpl)findViewLink(\"EmpDeptFkLink1\");\n    }"} {"path":"downloaded/HRServiceAppModuleImpl.java","method_name":"validateDepartment","content":"/**\n     * Container's getter for EmpDeptFkLink1.\n     * @return EmpDeptFkLink1\n     */\npublic String validateDepartment(){\n        \n        return \"continue\";\n    }"} {"path":"downloaded/HRServiceAppModuleImpl.java","method_name":"testAction","content":"/**\n     * Container's getter for EmpDeptFkLink1.\n     * @return EmpDeptFkLink1\n     */\npublic String testAction(String arg){\n        \n        return \"continue\";\n    }"} {"path":"downloaded/HRServiceAppModuleImpl.java","method_name":"getLocations","content":"/**\n     * Container's getter for LocationVO1.\n     * @return LocationVO1\n     */\npublic ViewObjectImpl getLocations() {\n        return (ViewObjectImpl)findViewObject(\"Locations\");\n    }"} {"path":"downloaded/HRServiceAppModuleImpl.java","method_name":"hasMinumumEmployees","content":"/**\n     * Container's getter for LocationVO1.\n     * @return LocationVO1\n     */\npublic boolean hasMinumumEmployees(){\n        System.out.println( \"hasMinumumEmployees - \" +getEmployeesForDepartment().getRowCount() );\n        if(getEmployeesForDepartment().getRowCount()>5){\n            return true;\n        }else{\n            return false;\n        }\n    }"} {"path":"downloaded/EquipmentShopPanel.java","method_name":"ntPack.li","content":"/**\n\t * \n\t */\n.get(i).setNumberGOT(EquipmentPack.listTable(equipment).get(i).getNumberGOT()-temp);\n\t\t\t\t//计算剩余的钱\n\t\t\t\tMoney.setCoins(Money.coins+listTable(equipment).get(i).getReduceMoney()*temp);\n\t\t\t\t//还剩的东西减少\n\t\t\t\tlistTable(equipment).get(i).setNumber(listTable(equipment).get(i).getNumber()+temp);\n\t\t\t\tlistTable(eq"} {"path":"downloaded/EquipmentShopPanel.java","method_name":"ge,\n\t\t\t\t\tani.get(2).g","content":"/**\n\t * \n\t */\n.drawImage(ani.get(2).image,\n\t\t\t\t\tani.get(2).getAnimationX(),ani.get(2).getAnimationY(),this);\n\t\tg.drawString(\"体\", 55, 30+2*150);\n\t\tg.drawImage(Reader.readImage(\"sources/Shop/按钮组件/体力.png\"),60,30+2*150,this);\n\t\tg.drawString(\"敏\", 55, 30+2*150+20);\n\t\tg.drawImage(Reader.readImage(\"sources/Shop/按钮组件/敏捷.png\"),60,30+2*150+20,this);\n\t\tg.drawString(\"武\", 55, 30+2*150+40);\n\t\tg.drawImage(Reader.readImage(\"sources/Shop/按钮组件/武力.png\"),60,30+2*150+40,this);\n\t\tg.drawString(\"精\", 55, 30+2*150+60);\n\t\tg.drawImage(Reader.readImage(\"sources/Shop/按钮组件/精气.png\"),60,30+2*150+60,this);\n\t\t}\n\t\tbackgroundGraphics.drawImage(ani.get(3).image,\n\t\t\t\tani.get(3).getAnimationX(),ani.get(3).getAnimationY(),this);\n\t\t\n\t\tg.drawImage(Reader.readImage(\"sourc"} {"path":"downloaded/BuildModule.java","method_name":"��）****/\n    pri","content":"/****将建筑信息打包�\n（去重逻辑）****/\n    private void addBuildInfoToList(List<M10.BuildingInfo> buildingInfos,M10.BuildingInfo info){\n        for (M10.BuildingInfo buildingInfo : buildingInfos){\n            if (buildingInfo.getIndex() == info.getIndex() && buildingInfo.getBuildingType() == info.getBuildingType()){\n                return;\n            }\n        }\n        bu"} {"path":"downloaded/ChargeNode.java","method_name":"getConnectionStatus","content":"/******* Public Get Status Methods: ***************************\n   * Returns the status of the ChargeNode, so other parts of the app\n   * can decide what to do.\n   * (I.e. whether to reset the charge node UI page)  \n   *************************************************************/\npublic int getConnectionStatus()\n    {  return connectionStatus;  }"} {"path":"downloaded/ChargeNode.java","method_name":"getChargeStatus","content":"/******* Public Get Status Methods: ***************************\n   * Returns the status of the ChargeNode, so other parts of the app\n   * can decide what to do.\n   * (I.e. whether to reset the charge node UI page)  \n   *************************************************************/\npublic int getChargeStatus()\n    {  return chargeStatus;  }"} {"path":"downloaded/ChargeNode.java","method_name":"makeChargeData","content":"/******** Charge Start / Stop: ********************************\n   * Sends a control request to the SolarNetworks server to \n   * turn the charger on or off.\n   * newSetting specifies whether to turn the switch ON or OFF \n   * (1 = ON, 0 = OFF). \n   *************************************************************/\nprivate Bundle makeChargeData(int conStatus, int chgStatus, float current, float ah)\n    {\n    // This makes a bundle of values containing the charge data: \n    // charge status, chrage current and charge amount (ah): \n    Bundle chargeData = new Bundle();\n    chargeData.putFloat( CONNECTION_STATUS,  (conStatus==STATUS_CONNECTED) ? 1.0f : 0.0f  );\n    chargeData.putFloat( CHARGE_STATUS,      (chgStatus==STATUS_CHARGING)  ? 1.0f : 0.0f  );\n    chargeData.putFloat( CHARGE_CURRENT,     current    );\n    chargeData.putFloat( CHARGE_AH,          ah         );\n    return chargeData;\n    }"} {"path":"downloaded/ChargeNode.java","method_name":"makeChargeControl","content":"/**** GET Method for setting switches: Doesn't work.   \n  private String makeChargeControl(int setTo)\n    {\n    // This makes a URL string containing a querystyring to control a switch, \n    // in a format suitable for use in a GET request. \n    //  setTo specifies the new status: 0 = OFF, 1 = ON.  \n    String chargeString = String.format(\n               Locale.US,\n               \"%s?nodeId=%s&topic=SetControlParameter&parameters[0].name=%s&parameters[0].value=%d\",\n               CONTROL_URL,\n               NODE_ID,\n               SWITCH_SOURCE_ID,\n               setTo       ); \n    return chargeString;\n    }\n*********/\nprivate Bundle makeChargeControl(int setTo)\n    {\n    // This makes a bundle of data (name / value pairs) which can be used in a \n    // POST HTTP request to set the charger status (ON or OFF). \n    //  setTo specifies the new status: 0 = OFF, 1 = ON.  \n    Bundle chargeData = new Bundle();\n    chargeData.putString( \"nodeId\",              NODE_ID                    );\n    chargeData.putString( \"topic\",               \"SetControlParameter\"      );\n    chargeData.putString( \"parameters[0].name\",  SWITCH_SOURCE_ID           );\n    chargeData.putString( \"parameters[0].value\", String.format(\"%d\",setTo)  );\n    return chargeData;\n    }"} {"path":"downloaded/ArticleBuilder.java","method_name":"getArcticle","content":"/**\n\t * Gets {@link Article} out of raw text.\n\t * \n\t * @param text -\n\t *            input text.\n\t * @return An {@link Article} object.\n\t */\npublic Article getArcticle(String text) {\n\n\t\tList<Paragraph> paras = this.paragraphBuilder.getParagraphs(text);\n\t\tArticle art = new ArticleImpl(paras);\n\t\treturn art;\n\n\t}"} {"path":"downloaded/ArticleBuilder.java","method_name":"getArcticle","content":"/**\n\t * Gets {@link Article} out of raw text.\n\t * \n\t * @param text -\n\t *            input text.\n\t * @param title -\n\t *            title of the article.\n\t * @return An {@link Article} object.\n\t */\npublic Article getArcticle(String text, String title) {\n\n\t\tList<Paragraph> paras = this.paragraphBuilder.getParagraphs(text);\n\t\tArticle art = new ArticleImpl(paras, title);\n\t\treturn art;\n\n\t}"} {"path":"downloaded/CustomerController.java","method_name":"buildCountryComboBox","content":"/**\n     * buildCountryComboBox() calls a query to build a list of all countries in the MySQL database. These countries\n     * are used to populate the choices for the Country ComboBox which is used for the user to select which country\n     * to associate with the customer.\n     * <p>\n     * For display, the country's name is shown.\n     * <p>\n     * This country is used to limit the following DivisionComboBox to only list divisions associated with the\n     * selected country.\n     * <p>\n     * Pulls from MySQL countries table.\n     */\nprivate void buildCountryComboBox() {\n        ResultSet rs = DatabaseConnection.performQuery(\n                session.getConn(),\n                Path.of(Constants.QUERY_SCRIPT_PATH_BASE + \"SelectCountryByID.sql\"),\n                Collections.singletonList(Constants.WILDCARD)\n        );\n\n        ObservableList<Country> countries = FXCollections.observableArrayList();\n        try {\n            if (rs != null) {\n                while (rs.next()) {\n                    int id = rs.getInt(\"Country_ID\");\n                    String name = rs.getString(\"Country\");\n                    countries.add(new Country(id, name));\n                }\n            }\n        } catch (Exception e) {\n            Common.handleException(e);\n        }\n\n        countryComboBox.setItems(countries);\n\n        countryComboBox.setConverter(new StringConverter<>() {\n            @Override\n            public String toString(Country item) {\n                return item.getCountryName();\n            }\n\n            @Override\n            public Country fromString(String string) {\n                return null;\n            }\n        });\n    }"} {"path":"downloaded/CustomerController.java","method_name":"buildDivisionComboBox","content":"/**\n     * buildDivisionComboBox() calls a query to build a list of all divisions in the MySQL database that have a matching\n     * Country_ID (FK) to the selected country in the CountryComboBox. These divisions are used to populate the choices\n     * for the DivisionComboBox which is used for the user to select which division to associate with the customer.\n     * <p>\n     * For display, the division's name is shown.\n     * <p>\n     * Pulls from MySQL first_level_divisions table.\n     */\nprivate void buildDivisionComboBox() {\n        List<String> args = Collections.singletonList(Constants.WILDCARD);\n        Country selectedCountry = countryComboBox.getSelectionModel().getSelectedItem();\n        if (selectedCountry != null) {\n            args = Collections.singletonList(String.valueOf(selectedCountry.getCountryID()));\n        }\n\n        ResultSet rs = DatabaseConnection.performQuery(\n                session.getConn(),\n                Path.of(Constants.QUERY_SCRIPT_PATH_BASE + \"SelectDivisionsByCountry.sql\"),\n                args\n        );\n\n        ObservableList<FirstLevelDivision> divisions = FXCollections.observableArrayList();\n        try {\n            if (rs != null) {\n                while (rs.next()) {\n                    int id = rs.getInt(\"Division_ID\");\n                    String name = rs.getString(\"Division\");\n                    int countryID = rs.getInt(\"Country_ID\");\n                    divisions.add(new FirstLevelDivision(id, name, countryID));\n                }\n            }\n        } catch (Exception e) {\n            Common.handleException(e);\n        }\n\n        divisionComboBox.setItems(divisions);\n\n        divisionComboBox.setConverter(new StringConverter<>() {\n            @Override\n            public String toString(FirstLevelDivision item) {\n                return item.getDivisionName();\n            }\n\n            @Override\n            public FirstLevelDivision fromString(String string) {\n                return null;\n            }\n        });\n    }"} {"path":"downloaded/CustomerController.java","method_name":"getDivisionByID","content":"/**\n     * getDivisionByID() sends a query to the MySQL database to find and return data for a specific division from the\n     * first_level_divisions table according to the passed-in Division_ID PK.\n     * <p>\n     * This division is used to fill in the DivisionComboBox and is only used when updating an existing customer.\n     *\n     * @param divisionID the division ID key to search for the desired division in the MySQL database\n     * @return the division found by the query\n     */\nprivate FirstLevelDivision getDivisionByID(int divisionID) {\n        ResultSet rs = DatabaseConnection.performQuery(\n                session.getConn(),\n                Path.of(Constants.QUERY_SCRIPT_PATH_BASE + \"SelectDivisionByID.sql\"),\n                Collections.singletonList(String.valueOf(divisionID)));\n\n        FirstLevelDivision division = null;\n        try {\n            if (rs != null) {\n                while (rs.next()) {\n                    int id = rs.getInt(\"Division_ID\");\n                    String name = rs.getString(\"Division\");\n                    int countryID = rs.getInt(\"Country_ID\");\n                    division = new FirstLevelDivision(id, name, countryID);\n                }\n            }\n        } catch (Exception e) {\n            Common.handleException(e);\n        }\n\n        return division;\n    }"} {"path":"downloaded/CustomerController.java","method_name":"getCountryByID","content":"/**\n     * getCountryByID() sends a query to the MySQL database to find and return data for a specific country from the\n     * countries table according to the passed-in Country_ID PK.\n     * <p>\n     * This country is used to fill in the CountryComboBox and is only used when updating an existing customer.\n     *\n     * @param countryID the country ID key to search for the desired country in the MySQL database\n     * @return the country found by the query\n     */\nprivate Country getCountryByID(int countryID) {\n        ResultSet rs = DatabaseConnection.performQuery(\n                session.getConn(),\n                Path.of(Constants.QUERY_SCRIPT_PATH_BASE + \"SelectCountryByID.sql\"),\n                Collections.singletonList(String.valueOf(countryID)));\n\n        Country country = null;\n        try {\n            if (rs != null) {\n                while (rs.next()) {\n                    int id = rs.getInt(\"Country_ID\");\n                    String name = rs.getString(\"Country\");\n                    country = new Country(id, name);\n                }\n            }\n        } catch (Exception e) {\n            Common.handleException(e);\n        }\n\n        return country;\n    }"} {"path":"downloaded/CustomerController.java","method_name":"isInputValid","content":"/**\n     * isInputValid() checks all input in the customer form's text fields to ensure they are valid according to\n     * business rules and expected data types.\n     * <p>\n     * These requirements include:\n     * <ul>\n     * <li>No field can be empty (Checked in noFieldsEmpty())</li>\n     * <li>Phone number must be all digits once the \"-\" delimiter is taken out</li>\n     * </ul>\n     * If any errors are found, they are collected and displayed to the user in a label below the fields.\n     *\n     * @return whether or not the input is valid according to business rules and expected data types.\n     */\npublic boolean isInputValid() {\n        if ( !noFieldsEmpty() ) {\n            return false;\n        }\n\n        String rawPhone = phoneField.getText().replaceAll(\"-\",\"\");\n        if (!rawPhone.matches(\"[0-9]*\")) {\n            errorLabel.setText(rb.getString(\"phoneIncorrect\"));\n            return false;\n        }\n\n        errorLabel.setText(\"\");\n        return true;\n    }"} {"path":"downloaded/CustomerController.java","method_name":"noFieldsEmpty","content":"/**\n     * noFieldsEmpty() checks to be sure that every single input field has data in it; nothing should be empty or null.\n     *\n     * @return whether or not every field had data\n     */\nprivate boolean noFieldsEmpty() {\n        if ( nameField.getText().isEmpty()\n                || addressField.getText().isEmpty()\n                || cityField.getText().isEmpty()\n                || countryComboBox.getSelectionModel().getSelectedItem() == null\n                || divisionComboBox.getSelectionModel().getSelectedItem() == null\n                || postalField.getText().isEmpty()\n                || phoneField.getText().isEmpty() ) {\n            errorLabel.setText(rb.getString(\"fieldBlank\"));\n            return false;\n        }\n        return true;\n    }"} {"path":"downloaded/CustomerController.java","method_name":"createCustomerData","content":"/**\n     * createCustomerData() inserts all the validated data from the form's fields (and the existing customer's\n     * data in the case of an update) into a Customer object that will be used to update the MySQL database.\n     *\n     * @return the Customer object created from the fields' data\n     */\nprivate Customer createCustomerData() {\n        int id = -1;\n        Timestamp createDate = DateTime.getUTCTimestampNow();\n        String createdBy = session.getUsername();\n\n        if (action.equals(Constants.UPDATE)) {\n            id = existingCustomer.getCustomerID();\n            createDate = existingCustomer.getCreateDate();\n            createdBy = existingCustomer.getCreatedBy();\n        }\n\n        String name = nameField.getText();\n        String address = addressField.getText() + \", \" + cityField.getText();\n        System.out.println(address);\n        String postal = postalField.getText();\n        String phone = phoneField.getText();\n        Timestamp lastUpdate = DateTime.getUTCTimestampNow();\n        String lastUpdatedBy = session.getUsername();\n\n        FirstLevelDivision division = divisionComboBox.getSelectionModel().getSelectedItem();\n        int divisionID = division.getDivisionID();\n\n        return new Customer(id, name, address, postal, phone, createDate, createdBy, lastUpdate, lastUpdatedBy, divisionID);\n    }"} {"path":"downloaded/JavaCodeGenerator.java","method_name":"parseLine","content":"/** Creates a new instance of JavaCodeGenerator */\nprotected String[] parseLine() {\n    //TODO 5 - Consider Comments\n    ArrayList<String> lines = new ArrayList<String>();\n    StringBuffer line = new StringBuffer(current);\n    while (line.length() > style.lineWidth) {\n      int index = split(line);\n      lines.add(line.substring(0, index));\n      line = new StringBuffer(line.substring(index));\n      if (line.length() != 0)\n        line.insert(0, continueIndentString());\n    }\n    if (line.length() != 0)\n      lines.add(line.toString());\n    return lines.toArray(new String[0]);\n  }"} {"path":"downloaded/JavaCodeGenerator.java","method_name":"split","content":"/** Creates a new instance of JavaCodeGenerator */\nprotected int split(StringBuffer line) {\n    int splitIndex = -1;\n    int sqIndex = 0;\n    int dqIndex = 0;\n    boolean singlequote = (line.charAt(0) == '\\'');\n    boolean doublequote = (line.charAt(0) == '\"');\n    boolean slash = (line.charAt(0) == '\\\\');\n    \n    for (int i = 1; i < style.lineWidth; i++) {\n      char c = line.charAt(i);\n      if (c == '\\\\') {\n        slash = !slash;\n      }\n      else {\n        if (c == '\"' && !slash) {\n          doublequote = !doublequote;\n          dqIndex = i;\n        }\n        else if (c == '\\'' && !slash) {\n          singlequote = !singlequote;\n          if (singlequote)\n            sqIndex = i;\n        }\n        slash = false;\n      }\n    }\n    if (doublequote) { //Line ends in midquote\n      if (dqIndex < style.lineWidth / 2) {\n        int insertIndex = style.lineWidth - 3;\n        boolean liveSlash = false;\n        int i = insertIndex - 1;\n        while (line.charAt(i) == '\\\\') {\n          liveSlash = !liveSlash;\n          i--;\n        }\n        if (liveSlash) {\n          insertIndex--;\n        }\n        else {\n          for (int j = 0; j < 4; j++) {\n            int k = insertIndex - 2 - j;\n            if (line.charAt(k) == '\\\\' && line.charAt(k + 1) == 'u') {\n              i = k - 1;\n              liveSlash = true;\n              while (line.charAt(i) == '\\\\') {\n                liveSlash = !liveSlash;\n                i--;\n              }\n              if (liveSlash)\n                insertIndex -= j + 2;\n            }\n          }\n        }\n        line.insert(insertIndex, \"\\\" +\\\"\");\n        splitIndex = insertIndex + 3;\n      }\n      else {\n        splitIndex = dqIndex;\n      }\n    }\n    else if (singlequote) {\n      splitIndex = sqIndex;\n    }\n    else {\n      splitIndex = -1;\n      int start = 0;\n      while (Character.isWhitespace(line.charAt(start)))\n        start++;\n      for (int i = style.lineWidth; i > start; i--) {\n        if (isValidSplit(line.charAt(i - 1), line.charAt(i))) {\n          splitIndex = i;\n          break;\n        }\n      }\n      if (splitIndex == -1) {\n        splitIndex = line.length();\n        for (int i = style.lineWidth + 1; i < line.length(); i++) {\n          if (isValidSplit(line.charAt(i - 1), line.charAt(i))) {\n            splitIndex = i;\n            break;\n          }\n        }\n      }\n    }\n    return splitIndex;\n  }"} {"path":"downloaded/JavaCodeGenerator.java","method_name":"isValidSplit","content":"/** Creates a new instance of JavaCodeGenerator */\nprotected boolean isValidSplit(char left, char right) {\n    if (Character.isWhitespace(left) || Character.isWhitespace(right))\n      return true;\n    else if (Character.isJavaIdentifierStart(left)) { // Identifier\n      if (Character.isJavaIdentifierPart(right))\n        return false;\n      else\n        return true;\n    }\n    else if (Character.isDigit(left)) { // Number\n      if (Character.isJavaIdentifierPart(right) || right == '.')\n        return false;\n      else\n        return true;\n    }\n    return !isSpecialPair(left, right);\n  }"} {"path":"downloaded/JavaCodeGenerator.java","method_name":"isSpecialPair","content":"/** Creates a new instance of JavaCodeGenerator */\nprotected boolean isSpecialPair(char left, char right) {\n    char[] doublePair = {'-', '+', '<', '>', '&', '|', '='};\n    char[] equalPair = {'!', '^', '&', '*', '-', '+', '|', '<', '>', '/'};\n    \n    if (left == right && ArraySupport.contains(doublePair, left))\n      return true;\n    else if (right == '=' && ArraySupport.contains(equalPair, left))\n      return true;\n    else\n      return false;\n  }"} {"path":"downloaded/JavaCodeGenerator.java","method_name":"tabString","content":"/** Creates a new instance of JavaCodeGenerator */\nprotected String tabString() {\n    String tab;\n    if (style.tabsToSpaces) {\n      tab = \"\";\n      for (int i = 0; i < style.tabLength; i++)\n         tab += \" \";\n    }\n    else {\n      tab = \"\\t\";\n    }\n    return tab;\n  }"} {"path":"downloaded/JavaCodeGenerator.java","method_name":"indentString","content":"/** Creates a new instance of JavaCodeGenerator */\nprotected String indentString() {\n    String s = \"\";\n    for (int i = 0; i < indent; i++)\n       s += tabString();\n    return s;\n  }"} {"path":"downloaded/JavaCodeGenerator.java","method_name":"continueIndentString","content":"/** Creates a new instance of JavaCodeGenerator */\nprotected String continueIndentString() {\n    String s = indentString();\n    for (int i = 0; i < style.getContinueIndent(); i++)\n      s+= tabString();\n    return s;\n  }"} {"path":"downloaded/JavaCodeGenerator.java","method_name":"getStyle","content":"/** Creates a new instance of JavaCodeGenerator */\npublic CodeStyle getStyle() {return style;}"} {"path":"downloaded/Pedidos.java","method_name":"getPizza","content":"/**\n     *\n     * @return devuelve la pizza pedida\n     */\npublic Pizza getPizza() {\n\n        return pizza;\n    }"} {"path":"downloaded/GestioneDocumentiDTO.java","method_name":"getIstitutoScolastico","content":"/**\n\t * scuola operante ( loggata )\n\t * valorizzato con oggetto in sessione se utente scuola\n\t */\npublic IstitutoScolasticoDTO getIstitutoScolastico() {\n\t\treturn istitutoScolastico;\n\t}"} {"path":"downloaded/FridgeTemperature.java","method_name":" outpu","content":"/** Temperature of the fridge in °C *\n\t@Override\n\tpublic Vector<EventI> output() {\n\t\treturn null;\n\t"} {"path":"downloaded/FridgeTemperature.java","method_name":" timeAdvanc","content":"/** Temperature of the fridge in °C *\n\t@Override\n\tpublic Duration timeAdvance() {\n\t\treturn new Duration(10.0, this.getSimulatedTimeUnit());\n\t"} {"path":"downloaded/FridgeTemperature.java","method_name":"\tgetFinalRepor","content":"\t/**\n\t * @see fr.sorbonne_u.devs_simulation.models.Model#getFinalReport()\n\t *\n\t@Override\n\tpublic SimulationReportI\tgetFinalReport() throws Exception\n\t{\n\t\tfinal String uri = this.getURI() ;\n\t\treturn new SimulationReportI() {\n\t\t\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t\t\t/**\n\t\t\t\t\t * @see fr.sorbonne_u.devs_simulation.interfaces.SimulationReportI#getModelURI()\n\t\t\t\t\t */\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getModelURI() { return uri ; }\n\n\t\t\t\t\t/**\n\t\t\t\t\t * @see java.lang.Object#toString()\n\t\t\t\t\t */\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String toString() { return \"FridgeTemperature()\" ; }\n\t\t};\n\t"} {"path":"downloaded/FridgeTemperature.java","method_name":" getModelUR","content":"\t/**\n\t\t\t\t\t * @see fr.sorbonne_u.devs_simulation.interfaces.SimulationReportI#getModelURI()\n\t\t\t\t\t *\n\t@Override\n\t\t\t\t\tpublic String getModelURI() { return uri ; "} {"path":"downloaded/FridgeTemperature.java","method_name":" toStrin","content":"\t/**\n\t\t\t\t\t * @see java.lang.Object#toString()\n\t\t\t\t\t *\n\t@Override\n\t\t\t\t\tpublic String toString() { return \"FridgeTemperature()\" ; "} {"path":"downloaded/SystemMessageSeriesVo.java","method_name":"getTypes","content":"/*************************/\npublic Set<Type> getTypes() {\n        return types;\n    }"} {"path":"downloaded/SystemMessageSeriesVo.java","method_name":"getShortFormat","content":"/*************************/\npublic String getShortFormat() {\n        return shortFormat;\n    }"} {"path":"downloaded/SystemMessageSeriesVo.java","method_name":"getNavtexFormat","content":"/*************************/\npublic String getNavtexFormat() {\n        return navtexFormat;\n    }"} {"path":"downloaded/SystemMessageSeriesVo.java","method_name":"getNumberSequenceType","content":"/*************************/\npublic NumberSequenceType getNumberSequenceType() {\n        return numberSequenceType;\n    }"} {"path":"downloaded/SystemMessageSeriesVo.java","method_name":"getNextMessageNumber","content":"/*************************/\npublic Integer getNextMessageNumber() {\n        return nextMessageNumber;\n    }"} {"path":"downloaded/SystemMessageSeriesVo.java","method_name":"getEditorFields","content":"/*************************/\npublic List<String> getEditorFields() {\n        return editorFields;\n    }"} {"path":"downloaded/SystemMessageSeriesVo.java","method_name":"getExcludeFromMessageIndex","content":"/*************************/\npublic Boolean getExcludeFromMessageIndex() {\n        return excludeFromMessageIndex;\n    }"} {"path":"downloaded/InstitutionManagerTM.java","method_name":"getSelectedInstitution","content":"/**\n     * Destroy the Manager bean when the session is over.\n     */\n@Override\n    public Institution getSelectedInstitution() {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"getSelectedInstitution\");\n        }\n\n        if (selectedInstitution == null) {\n            selectedInstitution = (Institution) Component.getInstance(\"selectedInstitution\");\n        }\n\n        return selectedInstitution;\n    }"} {"path":"downloaded/InstitutionManagerTM.java","method_name":"getSelectedInvoiceForInstitution","content":"/**\n     * Destroy the Manager bean when the session is over.\n     */\n@Override\n    public Invoice getSelectedInvoiceForInstitution() {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"getSelectedInvoiceForInstitution\");\n        }\n        return selectedInvoiceForInstitution;\n    }"} {"path":"downloaded/InstitutionManagerTM.java","method_name":"getSelectedContact","content":"/**\n     * Destroy the Manager bean when the session is over.\n     */\n@Override\n    public Person getSelectedContact() {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"getSelectedContact\");\n        }\n        return selectedContact;\n    }"} {"path":"downloaded/InstitutionManagerTM.java","method_name":"getFinancialSummary","content":"/**\n     * Destroy the Manager bean when the session is over.\n     */\n@Override\n    public FinancialSummary getFinancialSummary() {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"getFinancialSummary\");\n        }\n        return financialSummary;\n    }"} {"path":"downloaded/InstitutionManagerTM.java","method_name":"getFinancialSummaryForOneSystem","content":"/**\n     * Destroy the Manager bean when the session is over.\n     */\n@Override\n    public List<FinancialSummaryOneSystem> getFinancialSummaryForOneSystem() {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"getFinancialSummaryForOneSystem\");\n        }\n        return financialSummaryForOneSystem;\n    }"} {"path":"downloaded/InstitutionManagerTM.java","method_name":"saveInvoiceInformationsAndInstitution","content":"/**\n     * Check if an invoice exists for that institution and that testing session, if not, we instanciate the invoice object correlated to that\n     * institution\n     *\n     * @param Institution institution\n     */\n@Override\n    public String saveInvoiceInformationsAndInstitution() {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"saveInvoiceInformationsAndInstitution\");\n        }\n        try {\n\n            if (!ApplicationManager.instance().isProductRegistry()) {\n                if (selectedInvoiceForInstitution != null) {\n\n                    selectedInvoiceForInstitution = entityManager.merge(selectedInvoiceForInstitution);\n                    entityManager.flush();\n                    // Calculate new amounts for invoice - Fees and VAT changes when a system is deleted\n\n                    calculateFinancialSummaryDTO();\n\n                    if (selectedContact != null) {\n\n                        if ((!selectedContact.getFirstname().trim().equals(\"\"))\n                                || (!selectedContact.getLastname().trim().equals(\"\"))\n                                || (!selectedContact.getEmail().trim().equals(\"\"))\n                                || (!selectedContact.getPersonalFax().trim().equals(\"\"))\n                                || (!selectedContact.getPersonalPhone().trim().equals(\"\"))\n                                || (!selectedContact.getCellPhone().trim().equals(\"\"))) {\n\n                            boolean isContactValid = net.ihe.gazelle.users.action.PersonManager\n                                    .validateFinancialContactInformations(selectedContact);\n                            if (!isContactValid) {\n\n                                return null;\n                            }\n\n                            selectedContact = entityManager.merge(selectedContact);\n                            entityManager.flush();\n\n                        }\n\n                    } else {\n                        LOG.error(\"saveInvoiceInformationsAndInstitution - instanciation error for selectedContact (null)\");\n                    }\n                } else {\n                    LOG.error(\"selectedInvoiceForInstitution == null !!\");\n                }\n            }\n            if (selectedInstitution != null) {\n                selectedInstitution = entityManager.merge(selectedInstitution);\n                entityManager.flush();\n                FacesMessages.instance().add(StatusMessage.Severity.INFO, selectedInstitution.getKeyword() + \" saved\");\n            }\n\n        } catch (ConstraintViolationException e) {\n\n            ExceptionLogging.logException(e, LOG);\n            LOG.error(\"Error persisting invoice : \" + e.getMessage());\n        } catch (Exception e) {\n\n            ExceptionLogging.logException(e, LOG);\n            LOG.error(\"Error persisting invoice : \" + e.getMessage());\n        }\n\n        return \"/users/institution/editInstitution.seam\";\n    }"} {"path":"downloaded/InstitutionManagerTM.java","method_name":"updateInstitutionForTM","content":"/**\n     * TestManagement : Edit an institution from the database. This method is called when the users clicks on the 'Edit' button This method\n     * retrieves all the needed variables for editing the current\n     * institution. After that, this methods return the URL of the JSF page to render. This operation is allowed for some granted users (check the\n     * security.drl)\n     *\n     * @param u : Institution to edit\n     * @return String : JSF page to render\n     */\n@Override\n    @Restrict(\"#{s:hasPermission('InstitutionManager', 'updateInstitution', null)}\")\n    public String updateInstitutionForTM(final int inSelectedInstitutionId) {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"updateInstitutionForTM\");\n        }\n\n        selectedInstitution = entityManager.find(Institution.class, inSelectedInstitutionId);\n\n        Contexts.getSessionContext().set(\"selectedInstitution\", selectedInstitution);\n        // Initialization for Address\n\n        checkInvoiceIntanciation(selectedInstitution);\n\n        List<Person> foundContacts = Person.listAllBillingContacts(entityManager, selectedInstitution);\n\n        if ((foundContacts == null) || (foundContacts.size() == 0)) {\n\n            selectedContact = new Person();\n            selectedContact.setInstitution(selectedInstitution);\n\n            List<PersonFunction> functions = new ArrayList<PersonFunction>();\n            functions.add(PersonFunction.getBillingFunction(entityManager));\n            selectedContact.setPersonFunction(functions);\n\n        } else if (foundContacts.size() > 1) {\n            LOG.error(\"-----------------------------------------------------------------------------\");\n            LOG.error(\"Institution = Id(\" + selectedInstitution.getId() + \") \" + selectedInstitution.getName());\n            LOG.error(\"Several FINANCIAL contacts found for that institution ! ONE IS REQUIRED ! FATAL Error ! FOUND = \"\n                    + foundContacts.size());\n\n            for (int l = 0; l < foundContacts.size(); l++) {\n                LOG.error(l + \" - FINANCIAL contact = Id(\" + foundContacts.get(l).getId() + \") \"\n                        + foundContacts.get(l).getLastname() + \" \" + foundContacts.get(l).getFirstname());\n\n            }\n\n            LOG.error(\"-----------------------------------------------------------------------------\");\n\n            selectedContact = foundContacts.get(0);\n\n        } else if (foundContacts.size() == 1) {\n            selectedContact = foundContacts.get(0);\n        }\n\n        if (selectedContact != null) {\n            selectedContact.getAddress();\n        }\n        // We check the financial contact if it exists, we set it as currentConcact\n        Contexts.getSessionContext().set(\"selectedContact\", selectedContact);\n        Contexts.getSessionContext().set(\"selectedInstitution\", selectedInstitution);\n\n        return \"/users/institution/editInstitution.seam\";\n    }"} {"path":"downloaded/InstitutionManagerTM.java","method_name":"updateInstitutionForTMForLoggedUser","content":"/**\n     * TestManagement : Edit an institution from the database. This method is called when the users clicks on the 'Edit' button This method\n     * retrieves all the needed variables for editing the current\n     * institution. After that, this methods return the URL of the JSF page to render. This operation is allowed for some granted users (check the\n     * security.drl)\n     *\n     * @param u : Institution to edit\n     * @return String : JSF page to render\n     */\n@Override\n    public String updateInstitutionForTMForLoggedUser() {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"updateInstitutionForTMForLoggedUser\");\n        }\n        return updateInstitutionForTM(Institution.getLoggedInInstitution().getId());\n    }"} {"path":"downloaded/InstitutionManagerTM.java","method_name":"updateMissingContacts","content":"/**\n     * TestManagement : Edit an institution from the database. This method is called when the users clicks on the 'Edit' button This method\n     * retrieves all the needed variables for editing the current\n     * institution. After that, this methods return the URL of the JSF page to render. This operation is allowed for some granted users (check the\n     * security.drl)\n     *\n     * @param u : Institution to edit\n     * @return String : JSF page to render\n     */\n@Override\n    @Restrict(\"#{s:hasPermission('InstitutionManager', 'updateInstitution', null)}\")\n    public String updateMissingContacts(final Institution inSelectedInstitution) {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"updateMissingContacts\");\n        }\n        PersonManager pm = new PersonManager();\n        return pm.displayContactsForCompany(inSelectedInstitution);\n    }"} {"path":"downloaded/InstitutionManagerTM.java","method_name":"viewInstitutionForTM","content":"/**\n     * TestManagement ONLY !! Render the selected institution This operation is allowed for some granted users (check the security.drl)\n     *\n     * @param inst : institution to render\n     * @return String : JSF page to render\n     */\n@Override\n    @SuppressWarnings(\"unchecked\")\n    @Restrict(\"#{s:hasPermission('InstitutionManager', 'viewInstitution', null)}\")\n    public String viewInstitutionForTM(final Institution inSelectedInstitution) {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"viewInstitutionForTM\");\n        }\n        if (inSelectedInstitution == null) {\n            return null;\n        }\n        selectedInstitution = entityManager.find(Institution.class, inSelectedInstitution.getId());\n        Query query = entityManager\n                .createQuery(\"select p from Person p join p.personFunction function, Institution i where p.institution = i and p.institution = \" +\n                        \":inInstitution and function = :inFunction\");\n        query.setParameter(\"inFunction\", PersonFunction.getBillingFunction(entityManager));\n        query.setParameter(\"inInstitution\", selectedInstitution);\n\n        List<Person> foundContacts = query.getResultList();\n\n        if (foundContacts.size() > 1) {\n            LOG.error(\"-----------------------------------------------------------------------------\");\n            LOG.error(\"Institution = Id(\" + selectedInstitution.getId() + \") \" + selectedInstitution.getName());\n            LOG.error(\"Several FINANCIAL contacts found for that institution ! ONE IS REQUIRED ! FATAL Error ! FOUND = \"\n                    + foundContacts.size());\n\n            for (int l = 0; l < foundContacts.size(); l++) {\n                LOG.error(l + \" - FINANCIAL contact = Id(\" + foundContacts.get(l).getId() + \") \"\n                        + foundContacts.get(l).getLastname() + \" \" + foundContacts.get(l).getFirstname());\n\n            }\n            LOG.error(\"-----------------------------------------------------------------------------\");\n            selectedContact = foundContacts.get(0);\n\n        } else if (foundContacts.size() == 0) {\n\n            selectedContact = new Person();\n\n        } else if (foundContacts.size() == 1) {\n            selectedContact = foundContacts.get(0);\n        }\n\n        checkInvoiceIntanciation(selectedInstitution);\n\n        return \"/users/institution/showInstitution.seam\";\n    }"} {"path":"downloaded/InstitutionManagerTM.java","method_name":"viewInstitutionForTM","content":"/**\n     * TestManagement ONLY !! Render the selected institution page, depending on the logged in user (admin or vendor) This operation is allowed for\n     * some granted users (check the security.drl)\n     *\n     * @param inst : institution to render\n     * @return String : JSF page to render\n     */\n@Override\n    @Restrict(\"#{s:hasPermission('InstitutionManager', 'viewInstitution', null)}\")\n    public String viewInstitutionForTM() {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"viewInstitutionForTM\");\n        }\n        String jsfPage;\n\n        choosenInstitutionForAdmin = (Institution) Component.getInstance(\"choosenInstitutionForAdmin\");\n\n        if (Role.isLoggedUserAdmin() || Role.isLoggedUserProjectManager()) {\n            jsfPage = viewInstitutionForTM(choosenInstitutionForAdmin);\n        } else {\n            jsfPage = viewInstitutionForTM(Institution.getLoggedInInstitution());\n        }\n\n        return jsfPage;\n    }"} {"path":"downloaded/InstitutionManagerTM.java","method_name":"viewInstitutionDetailsFromDatatable","content":"/**\n     * Action performed when admin wants to consult institution details from a datatable where the institution name/keyword is rendered\n     *\n     * @return String : JSF page to render\n     */\n@Override\n    @SuppressWarnings(\"unchecked\")\n    public String viewInstitutionDetailsFromDatatable(String institutionKeyword) {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"viewInstitutionDetailsFromDatatable\");\n        }\n\n        if ((institutionKeyword == null) || (institutionKeyword.length() == 0)) {\n            LOG.error(\"Cannot display company details - institutionKeyword given as paramer is null\");\n            return \"/error.seam\";\n        }\n\n        List<Institution> list = null;\n        Session session = (Session) entityManager.getDelegate();\n        Criteria c = session.createCriteria(Institution.class);\n        c.add(Restrictions.eq(\"keyword\", institutionKeyword));\n\n        list = c.list();\n        if (list.size() == 0) {\n            StatusMessages.instance().addFromResourceBundle(StatusMessage.Severity.ERROR,\n                    \"gazelle.users.institution.CannotRenderThisPageCauseThisSystemBelongToSeveralCompany\");\n            return \"/systems/listSystems.xhtml\";\n        } else {\n            selectedInstitution = list.get(0);\n            return \"/users/institution/showInstitution.seam\";\n        }\n    }"} {"path":"downloaded/InstitutionManagerTM.java","method_name":"isAllowedToUpdate","content":"/**\n     * Action performed when admin wants to consult institution details from a datatable where the institution name/keyword is rendered\n     *\n     * @return String : JSF page to render\n     */\npublic boolean isAllowedToUpdate(Institution ins) {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"isAllowedToUpdate\");\n        }\n        Boolean result = false;\n        Boolean sameInstitution = false;\n        if (Institution.getLoggedInInstitution().equals(ins)) {\n            sameInstitution = true;\n        }\n        if (Role.isLoggedUserAdmin() || (Role.isLoggedUserVendorAdmin() && sameInstitution)) {\n            result = true;\n        }\n        return result;\n    }"} {"path":"downloaded/A280968.java","method_name":"next","content":"/** Construct the sequence. */\n@Override\n  public Z next() {\n    final Z b = mSeq1.next();\n    final Z result = b.add(mA);\n    mA = b;\n    return result;\n  }"} {"path":"downloaded/TokenLocationSearchAnalyzer.java","method_name":"getFoundLocations","content":"/**\n     * \n     * foundlocations method \n     * @return foundLocations \n     */\npublic Map<String, List<Integer>> getFoundLocations() {\n        return foundLocations;\n    }"} {"path":"downloaded/StockRecommendDto.java","method_name":"te re","content":"/**\n\t * 股票ID\n\n\n\tprivate Date recommendTime;\n\n\tpubli"} {"path":"downloaded/StockRecommendDto.java","method_name":"his.id ","content":"/**\n\t * 股票ID\n\nLong id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic Stri"} {"path":"downloaded/StockRecommendDto.java","method_name":"name = ","content":"/**\n\t * 股票ID\n\name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic Stri"} {"path":"downloaded/StockRecommendDto.java","method_name":"ode = c","content":"/**\n\t * 股票ID\n\node) {\n\t\tthis.code = code;\n\t}\n\n\tpublic Integ"} {"path":"downloaded/StockRecommendDto.java","method_name":"s.sort = sort;\n\t","content":"/**\n\t * 股票ID\n\nort) {\n\t\tthis.sort = sort;\n\t}\n\n\tpublic Date getRecommendTim"} {"path":"downloaded/DatabaseController.java","method_name":"getAppDatabaseFile","content":"/**\n     * getAppDatabase\n     * <p/>\n     * Download the most up to date version of the Securing The Cloud database.\n     * Note: Run this method in a background task\n     *\n     * @return a file object containing the updated database\n     */\nprivate File getAppDatabaseFile() {\n        Log.i(\"getAppDatabase\", \"Getting app database\");\n        try {\n            File file = new File(this.context.getFilesDir(), SecretConstants.DATABASE_NAME);\n            Log.i(\"getAppDatabase\", \"File name: \" + file.getName());\n            FileOutputStream outputStream = new FileOutputStream(file);\n            DropboxAPI.DropboxFileInfo info =\n                    MainActivity.mDBApi.getFile(file.getName(), null, outputStream, null);\n            Log.i(\"getAppDatabase\", \"The file's rev is: \" + info.getMetadata().rev);\n            return file;\n        } catch (Exception e) {\n            Log.e(\"getAppDatabase\", e.toString(), e);\n        }\n        return null;\n    }"} {"path":"downloaded/DatabaseController.java","method_name":"getUsersAndPermissionsFor","content":"/**\n     * get a hash table of the user names and permissions for a file that a user owns\n     *\n     * @param ownerPublicKey: the public key of the file owner\n     * @param fileName:       the file name\n     * @return the hash table\n     */\npublic Hashtable<String, Boolean> getUsersAndPermissionsFor(String ownerPublicKey, String fileName) {\n        Log.i(\"getUsersAndPermsFor\", \"Getting user and perms for \" + fileName);\n\n        Hashtable<String, Boolean> usersWithPerms = new Hashtable<>();\n\n        Cursor resultSet = database.rawQuery(\n                \"SELECT UserPublicKey, UserName FROM UserAccounts WHERE UserPublicKey != '\" + ownerPublicKey + \"'\", null);\n\n        resultSet.moveToFirst();\n        while (!resultSet.isAfterLast()) {\n            Log.i(\"getUsersAndPermsFor\", \"User: \" + resultSet.getString(0) + \" is permissioned \" + false);\n            usersWithPerms.put(resultSet.getString(0), false);\n            resultSet.moveToNext();\n        }\n\n        resultSet = database.rawQuery(\n                \"SELECT DISTINCT UserPublicKey FROM FileKeys \" +\n                        \"WHERE UserPublicKey != '\" + ownerPublicKey + \"' \" +\n                        \"AND isOwner = 0 \" +\n                        \"AND File = '\" + fileName + \"'\", null);\n\n        resultSet.moveToFirst();\n        while (!resultSet.isAfterLast()) {\n            Log.i(\"getUsersAndPermsFor\", \"User: \" + resultSet.getString(0) + \" is permissioned \" + true);\n            usersWithPerms.put(resultSet.getString(0), true);\n            resultSet.moveToNext();\n        }\n\n        resultSet = database.rawQuery(\n                \"SELECT UserPublicKey, UserName FROM UserAccounts WHERE UserPublicKey != '\" + ownerPublicKey + \"'\", null);\n\n        Hashtable<String, Boolean> userNamesWithPerms = new Hashtable<>();\n        resultSet.moveToFirst();\n        while (!resultSet.isAfterLast()) {\n            Log.i(\"getUsersAndPermsFor\", \"User Name: \" + resultSet.getString(1) + \", permission: \" + usersWithPerms.get(resultSet.getString(0)));\n            userNamesWithPerms.put(resultSet.getString(1), usersWithPerms.get(resultSet.getString(0)));\n            resultSet.moveToNext();\n        }\n\n        resultSet.close();\n        Log.i(\"getUsersAndPermsFor\", \"Have user names and perms\");\n        return userNamesWithPerms;\n    }"} {"path":"downloaded/DatabaseController.java","method_name":"getFilesOnServer","content":"/**\n     * get the files that the user has access to\n     *\n     * @return a list of file names that the user has access to\n     */\npublic String[] getFilesOnServer() {\n        Log.i(\"getFilesFor\", \"Getting all files on server available to \"\n                + new KeyGenerator(context).getPublicKeyAsString());\n        Cursor resultSet = database.rawQuery(\n                \"SELECT DISTINCT File FROM FileKeys WHERE UserPublicKey = \" +\n                        \"'\" + new KeyGenerator(context).getPublicKeyAsString() + \"'\", null);\n        String[] fileNames = new String[resultSet.getCount()];\n        resultSet.moveToFirst();\n        int i = 0;\n        while (!resultSet.isAfterLast()) {\n            Log.i(\"getFilesFor\", \"File namme: \" + resultSet.getString(0));\n            fileNames[i++] = resultSet.getString(0);\n            resultSet.moveToNext();\n        }\n        resultSet.close();\n        return fileNames;\n    }"} {"path":"downloaded/DatabaseController.java","method_name":"getFilesFor","content":"/**\n     * get a list of the files that the user owns\n     *\n     * @param userPublicKey: the public key of the user\n     * @return a list of file names that the user owns\n     */\npublic String[] getFilesFor(String userPublicKey) {\n        Log.i(\"getFilesFor\", \"Getting files for \" + userPublicKey);\n        Cursor resultSet = database.rawQuery(\"SELECT DISTINCT File FROM FileKeys \" +\n                \"WHERE UserPublicKey = '\" + userPublicKey + \"' AND isOwner = 1\", null);\n        String[] fileNames = new String[resultSet.getCount()];\n        resultSet.moveToFirst();\n        int i = 0;\n        while (!resultSet.isAfterLast()) {\n            Log.i(\"getFilesFor\", \"File namme: \" + resultSet.getString(0));\n            fileNames[i++] = resultSet.getString(0);\n            resultSet.moveToNext();\n        }\n        resultSet.close();\n        return fileNames;\n    }"} {"path":"downloaded/DatabaseController.java","method_name":"checkIfValidUser","content":"/**\n     * checks if a given user has been given access to the Dropbox account\n     *\n     * @param deviceId:  the device ID of the user\n     * @param publicKey: the public key of the user\n     * @return true or false\n     */\npublic boolean checkIfValidUser(String deviceId, String publicKey) {\n        Log.i(\"checkIfValidUser\", \"Checking if \" + deviceId + \" is a valid user\");\n        Cursor resultSet = database.rawQuery(\n                \"SELECT UserPublicKey, UniqueDeviceId FROM UserAccounts\", null);\n        // make sure that there are resulting rows\n        if (resultSet.getCount() > 0) {\n            String receivedPublicKey;\n            String receivedDeviceId;\n            resultSet.moveToFirst();\n            while (!resultSet.isAfterLast()) {\n                receivedPublicKey = resultSet.getString(0);\n                receivedDeviceId = resultSet.getString(1);\n                // if the deviceId is already in the table then return true\n                if (receivedDeviceId.equals(deviceId)\n                        && receivedPublicKey.equals(publicKey)) {\n                    Log.i(\"checkIfValidUser\", \"User is a valid user\");\n                    resultSet.close();\n                    return true;\n                }\n                resultSet.moveToNext();\n            }\n        }\n        Log.i(\"checkIfValidUser\", \"User is not a valid user\");\n        return false;\n    }"} {"path":"downloaded/DatabaseController.java","method_name":"getUserKeyFromUserName","content":"/**\n     * get the public key of a user given their user name\n     *\n     * @param userName: the user name\n     * @return the public key for the user\n     */\npublic String getUserKeyFromUserName(String userName) {\n        Cursor resultSet = database.rawQuery(\n                \"SELECT UserPublicKey FROM UserAccounts WHERE UserName = '\" + userName + \"'\", null);\n        resultSet.moveToFirst();\n        String retString = resultSet.getString(0);\n        resultSet.close();\n        return retString;\n    }"} {"path":"downloaded/DatabaseController.java","method_name":"getEncKeyFor","content":"/**\n     * Gets the encrypted symmetric key for a given file name. The selected key is the one that\n     * the user is able to decrpyt\n     *\n     * @param fileName: the file name to get the encrypted symmetric ket for\n     * @return the encrypted symmetric key\n     */\npublic String getEncKeyFor(String fileName) {\n        Log.i(\"getEncKeyFor\", \"Begining to get EncKey for file \" + fileName);\n        Cursor resultSet =\n                database.rawQuery(\"SELECT EncKey FROM FileKeys \" +\n                        \"WHERE UserPublicKey = '\" + new KeyGenerator(context).getPublicKeyAsString() + \"' \" +\n                        \"AND File = '\" + fileName + \"'\", null);\n        resultSet.moveToFirst();\n        Log.i(\"getEncKeyFor\", \"EncKey is \" + resultSet.getString(0));\n        String retString = resultSet.getString(0);\n        resultSet.close();\n        return retString;\n    }"} {"path":"downloaded/BigFileDocument.java","method_name":"isLineInformationRepairNeeded","content":"/**\n\t\t * Creates a new document with the given initial content.\n\t\t *\n\t\t * @param initialContent the document's initial content\n\t\t */\npublic boolean isLineInformationRepairNeeded(int offset, int length, String text) throws BadLocationException {\n\t\t\tif ((0 > offset) || (0 > length) || (offset + length > getLength()))\n\t\t\t\tthrow new BadLocationException();\n\n\t\t\treturn isLineInformationRepairNeeded(text) || isLineInformationRepairNeeded(get(offset, length));\n\t\t}"} {"path":"downloaded/BigFileDocument.java","method_name":"isLineInformationRepairNeeded","content":"/**\n\t\t * Checks whether the line information needs to be repaired.\n\t\t *\n\t\t * @param text the text to check\n\t\t * @return <code>true</code> if the line information must be repaired\n\t\t * @since 3.4\n\t\t */\nprivate boolean isLineInformationRepairNeeded(String text) {\n\t\t\tif (text == null)\n\t\t\t\treturn false;\n\n\t\t\tint length= text.length();\n\t\t\tif (length == 0)\n\t\t\t\treturn false;\n\n\t\t\tint rIndex= text.indexOf('\\r');\n\t\t\tint nIndex= text.indexOf('\\n');\n\t\t\tif (rIndex == -1 && nIndex == -1)\n\t\t\t\treturn false;\n\n\t\t\tif (rIndex > 0 && rIndex < length-1 && nIndex > 1 && rIndex < length-2)\n\t\t\t\treturn false;\n\n\t\t\tString defaultLD= null;\n\t\t\ttry {\n\t\t\t\tdefaultLD= getLineDelimiter(0);\n\t\t\t} catch (BadLocationException x) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (defaultLD == null)\n\t\t\t\treturn false;\n\n\t\t\tdefaultLD= getDefaultLineDelimiter();\n\n\t\t\tif (defaultLD.length() == 1) {\n\t\t\t\tif (rIndex != -1 && !\"\\r\".equals(defaultLD)) //$NON-NLS-1$\n\t\t\t\t\treturn true;\n\t\t\t\tif (nIndex != -1 && !\"\\n\".equals(defaultLD)) //$NON-NLS-1$\n\t\t\t\t\treturn true;\n\t\t\t} else if (defaultLD.length() == 2)\n\t\t\t\treturn rIndex == -1 || nIndex - rIndex != 1;\n\n\t\t\treturn false;\n\t\t}"} {"path":"downloaded/NoopEncryptionSpi.java","method_name":"masterKeyDigest","content":"/** {@inheritDoc} */\n@Override public byte[] masterKeyDigest() {\n        return masterKeyDigest(null);\n    }"} {"path":"downloaded/NoopEncryptionSpi.java","method_name":"masterKeyDigest","content":"/** {@inheritDoc} */\n@Override public byte[] masterKeyDigest(String masterKeyName) {\n        return null;\n    }"} {"path":"downloaded/NoopEncryptionSpi.java","method_name":"encryptKey","content":"/** {@inheritDoc} */\n@Override public byte[] encryptKey(Serializable key) {\n        return encryptKey(key, null);\n    }"} {"path":"downloaded/NoopEncryptionSpi.java","method_name":"decryptKey","content":"/** {@inheritDoc} */\n@Override public Serializable decryptKey(byte[] key) {\n        return decryptKey(key, null);\n    }"} {"path":"downloaded/NoopEncryptionSpi.java","method_name":"encryptedSize","content":"/** {@inheritDoc} */\n@Override public int encryptedSize(int dataSize) {\n        return dataSize;\n    }"} {"path":"downloaded/NoopEncryptionSpi.java","method_name":"encryptedSizeNoPadding","content":"/** {@inheritDoc} */\n@Override public int encryptedSizeNoPadding(int dataSize) {\n        return dataSize;\n    }"} {"path":"downloaded/NoopEncryptionSpi.java","method_name":"blockSize","content":"/** {@inheritDoc} */\n@Override public int blockSize() {\n        return 0;\n    }"} {"path":"downloaded/NoopEncryptionSpi.java","method_name":"getMasterKeyName","content":"/** {@inheritDoc} */\n@Override public String getMasterKeyName() {\n        return null;\n    }"} {"path":"downloaded/ConfigAutoApplication.java","method_name":"de\n    p","content":"/**\n     * Initialize the given application context.\n     *\n     * @param applicationContext the application to configure\n     */\nDENCE\n     */\n    @Override\n    public int getOrder() {\n        return HIGHEST"} {"path":"downloaded/GchCarLifeBbs.java","method_name":"getRecordType","content":"/**\n     * The class holding records for this type\n     */\n@Override\n    public Class<GchCarLifeBbsRecord> getRecordType() {\n        return GchCarLifeBbsRecord.class;\n    }"} {"path":"downloaded/GchCarLifeBbs.java","method_name":"liased <c","content":"/**\n     * The column <code>gouchehui2.0.gch_car_life_bbs.type_id</code>. 帖子分类ID\n\n\n    /**\n     * Create an aliased <code>gouchehui2.0.gch_car_life_bbs</code> table refer"} {"path":"downloaded/GchCarLifeBbs.java","method_name":"  }\n\n    priv","content":"/**\n     * The column <code>gouchehui2.0.gch_car_life_bbs.type_id</code>. 帖子分类ID\ng alias) {\n        this(alias, GCH_CAR_LIFE_BBS);\n    }\n\n    private GchCarLifeBbs(String alias, Table<GchCarLifeBbsRecord> a"} {"path":"downloaded/GchCarLifeBbs.java","method_name":"hCarLif","content":"/**\n     * The column <code>gouchehui2.0.gch_car_life_bbs.type_id</code>. 帖子分类ID\n);\n    }\n\n    private GchCarLifeBbs(String alias, Table<GchCarLifeBbsRecord> aliased, Field<?>[] parameters) {\n        super(alias, null, aliased, parameters, \"\\r\\n\");\n    "} {"path":"downloaded/GchCarLifeBbs.java","method_name":"em","content":" /**\n     * {@inheritDoc}\n     *\n @Override\n    public Schema getSchema() {\n        return Gouchehui2_0.GOUCHEHUI2_0;\n    }\n\n    /**\n     *"} {"path":"downloaded/GchCarLifeBbs.java","method_name":"BbsRec","content":" /**\n     * {@inheritDoc}\n     *\n UniqueKey<GchCarLifeBbsRecord> getPrimaryKey() {\n        return Keys.KEY_GCH_CAR_LIFE_BBS_PRI"} {"path":"downloaded/ServletCrearCupo.java","method_name":"getServletInfo","content":"/**\n     * Returns a short description of the servlet.\n     *\n     * @return a String containing servlet description\n     */\n@Override\n    public String getServletInfo() {\n        return \"Short description\";\n    }"} {"path":"downloaded/AnomalyEventsPipeline.java","method_name":"run","content":"/**\n   * Alternate constructor for use by RCAFrameworkLoader\n   *\n   * @param outputName pipeline output name\n   * @param inputNames input pipeline names\n   * @param ignore configuration properties (none)\n   */\n@Override\n  public PipelineResult run(PipelineContext context) {\n    Set<MetricEntity> metrics = context.filter(MetricEntity.class);\n\n    TimeRangeEntity current = TimeRangeEntity.getContextCurrent(context);\n    long start = new DateTime(current.getStart()).minusHours(START_OFFSET_HOURS).getMillis();\n    long end = current.getEnd();\n\n    Set<AnomalyEventEntity> entities = new HashSet<>();\n    for(MetricEntity me : metrics) {\n      List<MergedAnomalyResultDTO> anomalies = this.anomalyDAO.findAnomaliesByMetricIdAndTimeRange(me.getId(), start, end);\n\n      for(MergedAnomalyResultDTO dto : anomalies) {\n        double score = getScore(dto, start, end);\n        entities.add(AnomalyEventEntity.fromDTO(score, dto));\n      }\n    }\n\n    return new PipelineResult(context, EntityUtils.normalizeScores(entities));\n  }"} {"path":"downloaded/AnomalyEventsPipeline.java","method_name":"getScore","content":"/**\n   * Alternate constructor for use by RCAFrameworkLoader\n   *\n   * @param outputName pipeline output name\n   * @param inputNames input pipeline names\n   * @param ignore configuration properties (none)\n   */\nprivate double getScore(MergedAnomalyResultDTO dto, long start, long end) {\n    long duration = end - start;\n    long offset = dto.getEndTime() - start;\n    return Math.max(offset / (double)duration, 0);\n  }"} {"path":"downloaded/DBLPSQLs.java","method_name":"getCollaborationRel","content":"/**\n\t * @param mainauth - The specific author, for which we are looking its collaborating authors. If null or \"\", it means for all authors\n\t * @param collabAuth - The specific collaborating author who has collaborated with main author. If null, look for all collaborators\n\t * @param start - start of time period\n\t * @param end - end of time period\n\t * @return the SQL string that returns author, collabAuthor, collabCount\n\t * Note that mainauth = null and collabAuth not null- does not make a valid query\n\t */\npublic static final String getCollaborationRel(String viewname, String mainauth, String collabAuth, int start, int end) {\n\t\tString part1= \"SELECT a.author as author, coa.author as collabauth, COUNT(coa.author) as collabcnt FROM \" +\n\t\t\t\t\"dblp_author_ref_new a, dblp_author_ref_new coa, \"+ viewname + \" as p \" +\n\t\t\t\t\"WHERE a.id = coa.id AND a.id = p.id AND a.author != coa.author AND p.year >= \" + start + \" AND p.year <= \" + end;\n\t\tString part2=\"\";\n\t\tif (mainauth != null && !mainauth.equals(\"\")) {\n\t\t\tString str= \" AND a.author like \\\"\"+mainauth+\"\\\"\";\n\t\t\tif (collabAuth != null && !collabAuth.equals(\"\"))\n\t\t\t\tstr += \" AND coa.author like \\\"\"+collabAuth+\"\\\"\";\n\t\t\tpart2=str;\n\t\t}\n\t\tString coauthRelSQL= part1 + part2 + \" GROUP BY a.author, coa.author\";\n\t\treturn coauthRelSQL;\n\t}"} {"path":"downloaded/DBLPSQLs.java","method_name":"getCollabRelTableCreationSQL","content":"/**\n\t * @param mainauth - The specific author, for which we are looking its collaborating authors. If null or \"\", it means for all authors\n\t * @param collabAuth - The specific collaborating author who has collaborated with main author. If null, look for all collaborators\n\t * @param start - start of time period\n\t * @param end - end of time period\n\t * @return the SQL string that returns author, collabAuthor, collabCount\n\t * Note that mainauth = null and collabAuth not null- does not make a valid query\n\t */\npublic static final String getCollabRelTableCreationSQL(String domainName) {\n\t\tString crCollabTableSQL = \"CREATE TABLE IF NOT EXISTS dblp_collab_\" +domainName +\n\t\t\"(author varchar(70) NOT NULL, \" +\n\t\t\" collabauth varchar(70) NOT NULL, \" + \n\t\t\" collabcnt int NOT NULL, \" +\n\t\t\" PRIMARY KEY (author,collabauth)) \";\n\t\treturn crCollabTableSQL;\n\t}"} {"path":"downloaded/DBLPSQLs.java","method_name":"getOldAuthorsInTimeSlice","content":"/**\n\t * @param mainauth - The specific author, for which we are looking its collaborating authors. If null or \"\", it means for all authors\n\t * @param collabAuth - The specific collaborating author who has collaborated with main author. If null, look for all collaborators\n\t * @param start - start of time period\n\t * @param end - end of time period\n\t * @return the SQL string that returns author, collabAuthor, collabCount\n\t * Note that mainauth = null and collabAuth not null- does not make a valid query\n\t */\npublic static final String getOldAuthorsInTimeSlice(String viewname, int start, int end) {\n\t\tString sql = \"create table tmpt select ca from \" +\n\t\t\t\t\"(select distinct author as ca from dblp_author_ref_new a, \"+ viewname + \" as p \" +\n\t\t\t\t\"where a.id = p.id and p.year >= \" + start + \" and p.year <= \" + end + \") as currauths, \" +\n\t\t\t\t\"(select distinct author as pa from dblp_author_ref_new a, \"+ viewname + \" as p \" +\n\t\t\t\t\"where a.id = p.id and  p.year <= \" + (start -1) +\") as pastauths \" +\n\t\t\t\t\"where currauths.ca = pastauths.pa\";\n\t\treturn sql;\n\t}"} {"path":"downloaded/DBLPSQLs.java","method_name":"getOldOldCollaboration","content":"/**\n\t * @param mainauth - The specific author, for which we are looking its collaborating authors. If null or \"\", it means for all authors\n\t * @param collabAuth - The specific collaborating author who has collaborated with main author. If null, look for all collaborators\n\t * @param start - start of time period\n\t * @param end - end of time period\n\t * @return the SQL string that returns author, collabAuthor, collabCount\n\t * Note that mainauth = null and collabAuth not null- does not make a valid query\n\t */\npublic static final String getOldOldCollaboration(String viewname, int start, int end) {\n\t\tString part1 = \"SELECT a.author as author, coa.author as collabauth, COUNT(*) as collabcnt \" +\n\t\t\t\t\"FROM dblp_author_ref_new a, dblp_author_ref_new coa, tmpt t1, tmpt t2, \" + viewname + \" as p \" +\n\t\t\t\t\"WHERE a.id = coa.id AND a.id = p.id AND a.author != coa.author AND a.author = t1.ca \" +\n\t\t\t\t\"AND coa.author = t2.ca AND p.year >= \" + start + \" AND p.year <= \" + end ;\n\t\t\n\t\tString coauthRelSQL= part1 + \" GROUP BY a.author, coa.author\";\n\t\treturn coauthRelSQL;\n\t}"} {"path":"downloaded/DBLPSQLs.java","method_name":"getTopicTableCreationSQL","content":"/**\n\t * @param mainauth - The specific author, for which we are looking its collaborating authors. If null or \"\", it means for all authors\n\t * @param collabAuth - The specific collaborating author who has collaborated with main author. If null, look for all collaborators\n\t * @param start - start of time period\n\t * @param end - end of time period\n\t * @return the SQL string that returns author, collabAuthor, collabCount\n\t * Note that mainauth = null and collabAuth not null- does not make a valid query\n\t */\npublic static final String getTopicTableCreationSQL(String shortname) {\n\t\tString crTopicTableSQL = \"CREATE TABLE IF NOT EXISTS dblp_topic_\" +shortname +\n\t\t\"(tid varchar(50) NOT NULL, \" +\n\t\t\" keyword varchar(255) NOT NULL, \" + \n\t\t\" istop tinyint UNSIGNED ZEROFILL, \" + // Is this keyword a top keyword for this topic\n\t\t\" PRIMARY KEY (tid,keyword)) \";\n\t\treturn crTopicTableSQL;\n\t}"} {"path":"downloaded/DBLPSQLs.java","method_name":"getAuthKWRelTableCreationSQL","content":"/**\n\t * @param mainauth - The specific author, for which we are looking its collaborating authors. If null or \"\", it means for all authors\n\t * @param collabAuth - The specific collaborating author who has collaborated with main author. If null, look for all collaborators\n\t * @param start - start of time period\n\t * @param end - end of time period\n\t * @return the SQL string that returns author, collabAuthor, collabCount\n\t * Note that mainauth = null and collabAuth not null- does not make a valid query\n\t */\npublic static final String getAuthKWRelTableCreationSQL(String shortname) {\n\t\tString crTopicTableSQL = \"CREATE TABLE IF NOT EXISTS dblp_authkw_\" +shortname +\n\t\t\"(author varchar(70) NOT NULL, \" +\n\t\t\" keyword varchar(255) NOT NULL, \" + \n\t\t\" PRIMARY KEY (keyword,author)) \";\n\t\treturn crTopicTableSQL;\n\t}"} {"path":"downloaded/DBLPSQLs.java","method_name":"getAuthCollabOverKWTableCreationSQL","content":"/**\n\t * @param mainauth - The specific author, for which we are looking its collaborating authors. If null or \"\", it means for all authors\n\t * @param collabAuth - The specific collaborating author who has collaborated with main author. If null, look for all collaborators\n\t * @param start - start of time period\n\t * @param end - end of time period\n\t * @return the SQL string that returns author, collabAuthor, collabCount\n\t * Note that mainauth = null and collabAuth not null- does not make a valid query\n\t */\npublic static final String getAuthCollabOverKWTableCreationSQL(String shortname) {\n\t\tString crTopicTableSQL = \"CREATE TABLE IF NOT EXISTS dblp_authcollabkw_\" +shortname +\n\t\t\"(keyword varchar(255) NOT NULL, \" + \n\t\t\"author varchar(70) NOT NULL, \" + \n\t\t\" collabauth varchar(70) NOT NULL, \" +\n\t\t\"collabcnt int NOT NULL\" +\n\t\t\" ) \";\n\t\treturn crTopicTableSQL;\n\t}"} {"path":"downloaded/DBLPSQLs.java","method_name":"getTopicTableCreationSQLOld","content":"/**\n\t * @param mainauth - The specific author, for which we are looking its collaborating authors. If null or \"\", it means for all authors\n\t * @param collabAuth - The specific collaborating author who has collaborated with main author. If null, look for all collaborators\n\t * @param start - start of time period\n\t * @param end - end of time period\n\t * @return the SQL string that returns author, collabAuthor, collabCount\n\t * Note that mainauth = null and collabAuth not null- does not make a valid query\n\t */\n@Deprecated\n\tpublic static final String getTopicTableCreationSQLOld(String domainName) {\n\t\tString crTopicTableSQL = \"CREATE TABLE IF NOT EXISTS dblp_topic_\" +domainName +\n\t\t\"(tid varchar(50) NOT NULL, \" +\n\t\t\" topkw varchar(255) NOT NULL, \" + \n\t\t\" otherkw varchar(255), \" +\n\t\t\" PRIMARY KEY (tid)) \";\n\t\treturn crTopicTableSQL;\n\t}"} {"path":"downloaded/DBLPSQLs.java","method_name":"getDocTopicTableCreationSQL","content":"/**\n\t * @param mainauth - The specific author, for which we are looking its collaborating authors. If null or \"\", it means for all authors\n\t * @param collabAuth - The specific collaborating author who has collaborated with main author. If null, look for all collaborators\n\t * @param start - start of time period\n\t * @param end - end of time period\n\t * @return the SQL string that returns author, collabAuthor, collabCount\n\t * Note that mainauth = null and collabAuth not null- does not make a valid query\n\t */\npublic static final String getDocTopicTableCreationSQL(String domainName) {\n\t\tString crTopicTableSQL = \"CREATE TABLE IF NOT EXISTS dblp_doctopic_\" +domainName +\n\t\t\"(id int(11) NOT NULL, \" +\n\t\t\" tid varchar(50) NOT NULL, \" + \n\t\t\" prob float NOT NULL, \" +\n\t\t\" PRIMARY KEY (id,tid)) \";\n\t\treturn crTopicTableSQL;\n\t}"} {"path":"downloaded/DBLPSQLs.java","method_name":"getAbstractTableCreationSQL","content":"/**\n\t * @param mainauth - The specific author, for which we are looking its collaborating authors. If null or \"\", it means for all authors\n\t * @param collabAuth - The specific collaborating author who has collaborated with main author. If null, look for all collaborators\n\t * @param start - start of time period\n\t * @param end - end of time period\n\t * @return the SQL string that returns author, collabAuthor, collabCount\n\t * Note that mainauth = null and collabAuth not null- does not make a valid query\n\t */\npublic static final String getAbstractTableCreationSQL(String domainName) {\n\t\tString crTopicTableSQL = \"CREATE TABLE IF NOT EXISTS dblp_pub_abstracts_\" +domainName +\n\t\t\"(id int(8) NOT NULL COMMENT 'Maps to the id field db_pub_xxxx view', \" +\n\t\t\" redirected_url varchar(200) NOT NULL COMMENT 'Redirected URL from the ee field in the db_pub_xxxx view', \" +\n\t\t\"  abstract_content longtext COMMENT 'Abstract of this paper', \" + \n\t\t\"  PRIMARY KEY (id)) \";\n\t\treturn crTopicTableSQL;\n\t}"} {"path":"downloaded/DBLPSQLs.java","method_name":"getRawCitationRefTableCreationSQL","content":"/**\n\t * @param mainauth - The specific author, for which we are looking its collaborating authors. If null or \"\", it means for all authors\n\t * @param collabAuth - The specific collaborating author who has collaborated with main author. If null, look for all collaborators\n\t * @param start - start of time period\n\t * @param end - end of time period\n\t * @return the SQL string that returns author, collabAuthor, collabCount\n\t * Note that mainauth = null and collabAuth not null- does not make a valid query\n\t */\npublic static final String getRawCitationRefTableCreationSQL(String domainName) {\n\t\tString crTopicTableSQL = \"CREATE TABLE IF NOT EXISTS mas_\" +domainName + \"_citation_reference_links \" +\n\t\t\"(id int(8) NOT NULL COMMENT 'Our internal database key in dblp_pub_new', \" +\n\t\t\" publication_title longtext NOT NULL, \" + \n\t\t\" citation_count int(10) NOT NULL DEFAULT '0', \" +\n\t\t\"citation_link varchar(300) DEFAULT NULL, \" +\n\t\t\" PRIMARY KEY (id)) \";\n\t\treturn crTopicTableSQL;\n\t}"} {"path":"downloaded/DBLPSQLs.java","method_name":"getRawCitationTableCreationSQL","content":"/**\n\t * @param mainauth - The specific author, for which we are looking its collaborating authors. If null or \"\", it means for all authors\n\t * @param collabAuth - The specific collaborating author who has collaborated with main author. If null, look for all collaborators\n\t * @param start - start of time period\n\t * @param end - end of time period\n\t * @return the SQL string that returns author, collabAuthor, collabCount\n\t * Note that mainauth = null and collabAuth not null- does not make a valid query\n\t */\npublic static final String getRawCitationTableCreationSQL(String domainName) {\n\t\tString crTopicTableSQL = \"CREATE TABLE IF NOT EXISTS mas_\" +domainName + \"_pub_citations \" +\n\t\t\" ( citation_id int(8) NOT NULL AUTO_INCREMENT COMMENT 'Citation ID and primary Key', \" + \n\t\t\"  pub_id int(8) NOT NULL COMMENT 'ID of the publications refers to the key in dblp_pub_new', \" +\n\t\t\" pub_title longtext NOT NULL COMMENT 'Publication title whose citations are to be listed', \" +\n\t\t\" citation_title longtext NOT NULL COMMENT 'This paper has cited pub_title publication', \" +\n\t\t\" citation_title_year varchar(4) DEFAULT NULL COMMENT 'Year of publication of the Citation Title paper', \" +\n\t\t\" citation_authors longtext NOT NULL COMMENT 'Comma separated Authors in the citation paper', \" +\n\t\t\" PRIMARY KEY (citation_title(100),citation_id), \" +\n\t\t\" KEY `Index 2` (citation_id)\t)\";\t\n\t\treturn crTopicTableSQL;\n\t}"} {"path":"downloaded/DBLPSQLs.java","method_name":"getCitationMasterCreationSQL","content":"/**\n\t * @param mainauth - The specific author, for which we are looking its collaborating authors. If null or \"\", it means for all authors\n\t * @param collabAuth - The specific collaborating author who has collaborated with main author. If null, look for all collaborators\n\t * @param start - start of time period\n\t * @param end - end of time period\n\t * @return the SQL string that returns author, collabAuthor, collabCount\n\t * Note that mainauth = null and collabAuth not null- does not make a valid query\n\t */\npublic static final String getCitationMasterCreationSQL(String domainName) {\n\t\tString crCiteTableSQL = \"CREATE TABLE IF NOT EXISTS dblp_citation_\" +domainName +\n\t\t\"(id int(8) NOT NULL, \" +\n\t\t\" citation_title longtext NOT NULL, \" + \n\t\t\" citation_year int(4) unsigned, \" +\n\t\t\" citation_authors longtext, \" +\n\t\t\" INDEX(id)) \";\n\t\treturn crCiteTableSQL;\n\n\t}"} {"path":"downloaded/DBLPSQLs.java","method_name":"getRawCitationLoadSQL","content":"/**\n\t * @param mainauth - The specific author, for which we are looking its collaborating authors. If null or \"\", it means for all authors\n\t * @param collabAuth - The specific collaborating author who has collaborated with main author. If null, look for all collaborators\n\t * @param start - start of time period\n\t * @param end - end of time period\n\t * @return the SQL string that returns author, collabAuthor, collabCount\n\t * Note that mainauth = null and collabAuth not null- does not make a valid query\n\t */\npublic static final String[] getRawCitationLoadSQL(String domainName) {\n\t\tString [] res= new String[2];\n\t\tres[0] = \"SELECT pub_id, citation_title, citation_title_year, citation_authors\"  +\n\t\t\" FROM mas_\" + domainName + \"_pub_citations \";\n\t\tres[1] = \"INSERT INTO dblp_citation_\"+domainName+ \n\t\t\" (id, citation_title, citation_year, citation_authors) VALUES (?,?,?,?)\";\n\t\treturn res;\n\t}"} {"path":"downloaded/DBLPSQLs.java","method_name":"getTopicDistributionByPaperCount","content":"/**\n\t * @param mainauth - The specific author, for which we are looking its collaborating authors. If null or \"\", it means for all authors\n\t * @param collabAuth - The specific collaborating author who has collaborated with main author. If null, look for all collaborators\n\t * @param start - start of time period\n\t * @param end - end of time period\n\t * @return the SQL string that returns author, collabAuthor, collabCount\n\t * Note that mainauth = null and collabAuth not null- does not make a valid query\n\t */\npublic static final String getTopicDistributionByPaperCount(String domainName, String shortname, int start, int end) {\n\t\tString pubrangeview = \"(SELECT id FROM \" + domainName + \" WHERE year >= \" + start + \" AND year <=\" + end + \")\"; \n\t\tString topicPaperCount = \"SELECT td.tid as tid, COUNT(p.id) as pcount FROM dblp_doctopic_\" + shortname + \" AS td LEFT JOIN \" +\n\t\tpubrangeview + \" AS p ON td.id = p.id GROUP BY td.tid\";\n/*\t\t\n\t\tString topicPaperCount = \"SELECT td.tid, COUNT(p.id) as pcount FROM dblp_doctopic_\" + shortname + \" AS td LEFT JOIN \" +\n\t\tpubrangeview + \" AS p ON td.id = p.id, dblp_topic_\" + shortname + \n\t\t\" AS t WHERE t.tid = td.tid GROUP BY td.tid\";\n*/\n\n\t\tString sql = \"SELECT tp.tid, t.keyword, tp.pcount FROM (\" + topicPaperCount + \") AS tp, dblp_topic_\"+shortname+ \n\t\t\" AS t WHERE t.tid = tp.tid AND t.istop = 1 order by tp.tid\";\n\t\treturn sql;\n\t}"} {"path":"downloaded/DBLPSQLs.java","method_name":"getTopicDistributionByCitationOld","content":"/**\n\t * @param mainauth - The specific author, for which we are looking its collaborating authors. If null or \"\", it means for all authors\n\t * @param collabAuth - The specific collaborating author who has collaborated with main author. If null, look for all collaborators\n\t * @param start - start of time period\n\t * @param end - end of time period\n\t * @return the SQL string that returns author, collabAuthor, collabCount\n\t * Note that mainauth = null and collabAuth not null- does not make a valid query\n\t */\npublic static final String getTopicDistributionByCitationOld(String domainName, String shortname, int start, int end) {\n\t\tString pubrangeview = \"(SELECT p.id as id, count(*) as citationCount FROM dblp_ppr_cite c, \" + domainName + \n\t\t\" p WHERE p.id = c.paperid AND c.citationPaperId != -1 AND p.year >= \" + start + \" AND p.year <=\" + end +\n\t\t\" GROUP BY p.id )\" ;\n\t\tString topicCiteCount = \"SELECT td.tid as tid, SUM(pc.citationCount) as citationcount FROM dblp_doctopic_\" + shortname + \n\t\t\" AS td LEFT JOIN \" + pubrangeview + \" AS pc ON td.id = pc.id GROUP BY td.tid\";\n\n\t\tString sql = \"SELECT tp.tid, t.keyword, citationcount FROM (\" + topicCiteCount + \") AS tp, dblp_topic_\"+shortname+ \n\t\t\" AS t WHERE t.tid = tp.tid AND t.istop = 1 order by tp.tid\";\n\t\treturn sql;\n\t}"} {"path":"downloaded/DBLPSQLs.java","method_name":"getTopicDistributionByCitation","content":"/**\n\t * @param mainauth - The specific author, for which we are looking its collaborating authors. If null or \"\", it means for all authors\n\t * @param collabAuth - The specific collaborating author who has collaborated with main author. If null, look for all collaborators\n\t * @param start - start of time period\n\t * @param end - end of time period\n\t * @return the SQL string that returns author, collabAuthor, collabCount\n\t * Note that mainauth = null and collabAuth not null- does not make a valid query\n\t */\npublic static final String getTopicDistributionByCitation(String domainName, String shortname, int start, int end) {\n\t\tString pubrangeview = \"(SELECT p.id as id, count(*) as citationCount FROM mas_se_pub_citations c, \" + domainName + \n\t\t\" p WHERE p.id = c.pub_id AND c.citation_title_year != '' AND p.year >= \" + start + \" AND p.year <=\" + end +\n\t\t\" GROUP BY p.id )\" ;\n\t\tString topicCiteCount = \"SELECT td.tid as tid, SUM(pc.citationCount) as citationcount FROM dblp_doctopic_\" + shortname + \n\t\t\" AS td LEFT JOIN \" + pubrangeview + \" AS pc ON td.id = pc.id GROUP BY td.tid\";\n\n\t\tString sql = \"SELECT tp.tid, t.keyword, citationcount FROM (\" + topicCiteCount + \") AS tp, dblp_topic_\"+shortname+ \n\t\t\" AS t WHERE t.tid = tp.tid AND t.istop = 1 order by tp.tid\";\n\t\treturn sql;\n\t}"} {"path":"downloaded/DBLPSQLs.java","method_name":"getTopicDistributionByCitationVariation","content":"/**\n\t * @param mainauth - The specific author, for which we are looking its collaborating authors. If null or \"\", it means for all authors\n\t * @param collabAuth - The specific collaborating author who has collaborated with main author. If null, look for all collaborators\n\t * @param start - start of time period\n\t * @param end - end of time period\n\t * @return the SQL string that returns author, collabAuthor, collabCount\n\t * Note that mainauth = null and collabAuth not null- does not make a valid query\n\t */\npublic static final String getTopicDistributionByCitationVariation(String domainName, String shortname, int start, int end) {\n\t\tString pubrangeview = \"(SELECT c.id as id, count(*) as citationCount FROM dblp_citation_\" + shortname +\n\t\t\" c WHERE c.citation_year >= \" + start + \" AND c.citation_year <=\" + end +\n\t\t\" GROUP BY c.id )\" ;\n\t\tString topicCiteCount = \"SELECT td.tid as tid, SUM(pc.citationCount) as citationcount FROM dblp_doctopic_\" + shortname + \n\t\t\" AS td LEFT JOIN \" + pubrangeview + \" AS pc ON td.id = pc.id GROUP BY td.tid\";\n\n\t\tString sql = \"SELECT tp.tid, t.keyword, citationcount FROM (\" + topicCiteCount + \") AS tp, dblp_topic_\"+shortname+ \n\t\t\" AS t WHERE t.tid = tp.tid AND t.istop = 1 order by tp.tid\";\n\t\treturn sql;\n\t}"} {"path":"downloaded/DBLPSQLs.java","method_name":"getAuthorsGroupedByTopKW","content":"/**\n\t * @param mainauth - The specific author, for which we are looking its collaborating authors. If null or \"\", it means for all authors\n\t * @param collabAuth - The specific collaborating author who has collaborated with main author. If null, look for all collaborators\n\t * @param start - start of time period\n\t * @param end - end of time period\n\t * @return the SQL string that returns author, collabAuthor, collabCount\n\t * Note that mainauth = null and collabAuth not null- does not make a valid query\n\t */\npublic static final String getAuthorsGroupedByTopKW(String domainName, String shortname, int start, int end) {\n\t\tString sql= \"SELECT DISTINCT a.author, t.keyword FROM dblp_author_ref_new a, dblp_topic_\"+shortname+\" t, dblp_doctopic_\"+shortname+\" td,\" +\n\t\tdomainName + \" p \" + \n\t\t\" WHERE a.id = td.id AND td.tid = t.tid AND a.id = p.id AND p.year >= \" + start + \" AND p.year <=\" + end  +\n\t\t\" AND t.istop = 1 ORDER BY t.keyword, a.author\";\n\t\treturn sql;\n\t}"} {"path":"downloaded/DBLPSQLs.java","method_name":"getAuthorTopicAffinityDistribution","content":"/**\n\t * @param mainauth - The specific author, for which we are looking its collaborating authors. If null or \"\", it means for all authors\n\t * @param collabAuth - The specific collaborating author who has collaborated with main author. If null, look for all collaborators\n\t * @param start - start of time period\n\t * @param end - end of time period\n\t * @return the SQL string that returns author, collabAuthor, collabCount\n\t * Note that mainauth = null and collabAuth not null- does not make a valid query\n\t */\npublic static final String getAuthorTopicAffinityDistribution(String domainName, String shortname, int start, int end) {\n\t\tString sql= \"SELECT a.author as author, td.tid as tid, SUM(td.prob) as affinity FROM dblp_author_ref_new a, dblp_doctopic_\"+shortname+\" td,\" +\n\t\tdomainName + \" p \" + \n\t\t\" WHERE p.id = td.id AND a.id = p.id AND p.year >= \" + start + \" AND p.year <=\" + end  +\n\t\t\" GROUP BY a.author, td.tid ORDER BY author,tid\";\n\t\treturn sql;\n\t}"} {"path":"downloaded/RoomFile.java","method_name":"getRoomGuid","content":"/**\n     * @return room_guid\n     */\npublic String getRoomGuid() {\n        return roomGuid;\n    }"} {"path":"downloaded/RoomFile.java","method_name":"getMenuGuid","content":"/**\n     * @return menu_guid\n     */\npublic String getMenuGuid() {\n        return menuGuid;\n    }"} {"path":"downloaded/Jugador.java","method_name":"int cuantasCasasHotelesT","content":"  /**\n     * Devuelve el número de propiedades que posee el jugador.\n     * @return un entero con el número de propiedades.\n   \n    private int cuantasCasasHotelesTengo(){\n        return this.propiedades.size();\n "} {"path":"downloaded/Jugador.java","method_name":"esa devolverCartaLibe","content":"    /**\n     * Devuelve la carta libertad y se le anula al jugador.\n     * @return la carta libertad.\n   \n    Sorpresa devolverCartaLibertad(){\n        //Apuntamos a la carta libertad\n        Sorpresa cartaLibertadDevuelta = this.cartaLibertad;\n        \n        //Se anula la carta en el jugador\n        this.cartaLibertad = null;\n        \n        return cartaLibertadDevuelta;\n "} {"path":"downloaded/Jugador.java","method_name":"int obtenerCap","content":"    /**\n     * Devuelve el capital del que dispone el jugador.\n     * @return Variable entera con el capital total.\n   \n    int obtenerCapital(){\n        int capital, valorPropiedades = 0, numEdificaciones = 0;\n        \n        //Calculamos el valor de todas las propiedades del jugador.\n        for(TituloPropiedad propiedad: this.propiedades){\n            \n            //Obtenemos el número de edificacionesque tiene el titulo de propiedad. cada hotel equivale a cuatro casas mas coste edificación.\n            numEdificaciones = propiedad.getCasilla().getNumCasas() + propiedad.getCasilla().getNumHoteles();\n            \n            //Valor total de la propiedad\n            valorPropiedades = valorPropiedades + propiedad.getAlquilerBase() +(numEdificaciones * propiedad.getPrecioEdificar());\n            \n            if(propiedad.isHipotecada())\n                valorPropiedades = valorPropiedades - propiedad.getHipotecaBase();\n        }\n        \n        capital = valorPropiedades + this.saldo;\n        \n        return capital;"} {"path":"downloaded/Jugador.java","method_name":"olean tengoCartaLi","content":" \n    /**\n     * Comprueba si el jugador dispone de la carta libertad.\n     * @return TRUE: Si el atributo carta libertad no es nulo; FALSE: Cualquier otro caso.\n \n/\n    boolean tengoCartaLibertad(){\n        return this.cartaLibertad != null;"} {"path":"downloaded/Jugador.java","method_name":"olean esDeMipro","content":" \n    /**\n     * Comprueba si una casilla es de la propiedad del jugador.\n     * @param casilla Casilla a verificar.\n     * @return TRUE: Si la casilla se encuentra entre los titulos; FALSE: La casilla NO se encuentra entre los titulos de propiedad.\n \n/\n    private boolean esDeMipropiedad(Casilla casilla){\n        boolean encontrado = false;\n        \n            for(TituloPropiedad propiedad: this.propiedades){\n                if(propiedad.getCasilla() == casilla){\n                    encontrado = true;\n                    break;\n                }\n            }\n        return encontrado;        "} {"path":"downloaded/Jugador.java","method_name":"oolean puedoVenderPr","content":" \n    /**\n     * Verfica que una casilla es de la propiedad del jugador y no está hipotecada.\n     * @param casilla Casilla a verfificar\n     * @return TRUE: La casilla se puede vender; FALSE: La casilla NO se puede vender\n\n*/\n    boolean puedoVenderPropiedad(Casilla casilla){\n        return(esDeMipropiedad(casilla) && !casilla.estaHipotecada())"} {"path":"downloaded/Jugador.java","method_name":"ropiedad> obtenerPropiedadesH","content":"  \n    /**\n    * Devuelve las propiedades del jugadorActual que estén hipotecadas o que no estén hipotecadas.\n    * @param hipotecada TRUE: Devuelve las propiedades hipotecadas; FALSE: Devuelve las propiedades NO hipotecadas.\n    * @return TRUE: Array con los titulos de propiedad del jugadorActual que estén hipotecadas, FALSE: Con los que no lo est\n   */\n    ArrayList<TituloPropiedad> obtenerPropiedadesHipotecadas(boolean hipotecada){\n     \n        ArrayList<TituloPropiedad> propiedadesJugador = new ArrayList();      \n         \n        if(hipotecada){\n            for(TituloPropiedad titulo : this.propiedades )\n                if(titulo.isHipotecada())\n                    propiedadesJugador.add(titulo);          \n        }\n        else{\n            for(TituloPropiedad titulo : this.propiedades)\n                if(!titulo.isHipotecada())\n                    propiedadesJugador.add(titulo);  \n        }\n        \n        return propiedadesJuga"} {"path":"downloaded/Jugador.java","method_name":"c boolean tengoP","content":"\n    \n    /**\n     * Cmprueba si el jugador tiene alguna propiedad. \n     * @return TRUE: El jugador tiene al menos una propiedad; FALSE: El jugador no tiene ninguna propieda\n   */\n    public boolean tengoPropiedades(){\n        return this.propiedades.size() "} {"path":"downloaded/Jugador.java","method_name":"ic boolean","content":"\n    \n    /**\n     * Comprueba si el jugador dispone de la cantidad pasada como parámetro.\n     * @param cantidad Cantidad de saldo a verificar.\n     * @return TRUE: El jugador dispone de esa cantidad de saldo; FALSE: El jugador no dispone de esa catidad de sa\n    */\n    public boolean tengoSaldo(int cantidad){\n        return this.saldo >= cant"} {"path":"downloaded/Jugador.java","method_name":"    boolean actual","content":" \n    \n    /**\n     * Desplaza la posición de un jugador en el tablero.\n     * @param casilla Casilla destino del desplazamiento.\n     * @return TRUE: La casilla destino tiene propietario; FALSE: La casilla destino no tiene propietari\n     */\n    boolean actualizarPosicion(Casilla casilla){\n        //Pasando por la casilla de salida.\n        if(casilla.getNumeroCasilla() < casillaActual.getNumeroCasilla())\n            modificarSaldo(Qytetet.SALDO_SALIDA);\n        \n        boolean tienePropietario = false;\n                \n        //Actualizamos la casilla actual.\n        setCasillaActual(casilla);\n        \n        //Si la casilla es edificable.\n        if(casilla.soyEdificable()){\n             tienePropietario =  casilla.tengoPropietario();\n             \n            //Si la casilla tiene propietario.\n            if(tienePropietario){\n             \n                boolean propietarioEncarcelado = casilla.propietarioEncarcelado();\n                \n                //Comprobamos si el propietario NO está encarcelado.\n                if(!propietarioEncarcelado){\n                    //Ingresa el coste del alquiler al propietario.\n                    int costeAlquiler = casilla.cobrarAlquiler();\n                    //Resta el coste del alquiler al jugador que paga.\n                    this.modificarSaldo(-costeAlquiler);\n                }\n            }\n        }\n        else{//no es edificable\n            //Si es impuesto\n            if(casilla.getTipo() == TipoCasilla.IMPUESTO){\n                //Calculamos es coste del impuesto.\n                int costeImpuesto = casilla.getCosteHipoteca();\n                //Resta el coste del impuesto al jugador.\n                this.modificarSaldo(-costeImpuesto);\n            }\n        }\n        return tienePropi"} {"path":"downloaded/Jugador.java","method_name":" */\n    boole","content":"   \n    \n    /**\n     * Realiza la compra de un título.\n     * @return TRUE: Se pudo llevar a cabo la compra del título, FALSE: NO pudo realizarse la compra del \nlo.\n     */\n    boolean comprarTitulo(){\n        boolean puedoComprar = false;\n        \n        //obtenemos la casilla actual para facilitar la comprensión del método.\n        Casilla casilla = this.getCasillaActual();\n        \n        //Comprobar si la casilla es edificable.\n        if(casilla.soyEdificable()){\n            boolean tengoPropietario = casilla.getTituloPropiedad().tengoPropietario();\n            \n            //Comprobar que no tenga propietario.\n            if(!tengoPropietario){  \n                //Calcular su coste.\n                int costeCompra = casilla.getCosteHipoteca();\n                \n                //Comprobar si el jugador dispone de saldo para comprarla.\n                if(costeCompra <= this.saldo){\n                    //El jugador pasa a ser propietario del titulo de propiedad.\n                    TituloPropiedad titulo = casilla.asignarPropietario(this);\n                    this.propiedades.add(titulo);\n                    \n                    //Se cobra el coste de la compra al jugador.\n                    this.modificarSaldo(-costeCompra);\n                    \n                    //Compra satisfactoria.\n                    puedoComprar = true;\n                }\n            }\n        }\n        return puedo"} {"path":"downloaded/Jugador.java","method_name":"   */\n    boolean","content":"   \n    \n    /**\n     * Realiza la compra de un título.\n     * @return TRUE: Se pudo llevar a cabo la compra del título, FALSE: NO pudo realizarse la compra del \nruir.\n     */\n    boolean puedoEdificarCasa(Casilla casilla){\n        boolean puedoEdificar = false;\n        \n        //Se comprueba si el jugador es propietario de la casilla.\n        boolean esMia = this.esDeMipropiedad(casilla);\n        \n        if(esMia){\n            //Se obtiene el precio de edificación.\n            int costeEdificarCasa = casilla.getPrecioEdificar();\n            \n            //Se comprueba que el jugador tiene saldo para llevar a cabo la edificación.\n            boolean tengoSaldo = this.tengoSaldo(costeEdificarCasa);\n            \n            if(tengoSaldo){\n                puedoEdificar = true;\n            }   \n        }\n        return pued"} {"path":"downloaded/Jugador.java","method_name":"  \n    \n    boolea","content":"   \n    \n    /**\n     * Realiza la compra de un título.\n     * @return TRUE: Se pudo llevar a cabo la compra del título, FALSE: NO pudo realizarse la compra del \n\n    \n    \n    \n    boolean puedoEdificarHotel(Casilla casilla){\n        boolean puedoEdificar = false;\n        \n        //Se comprueba si el jugador es propietario de la casilla.\n        boolean esMia = this.esDeMipropiedad(casilla);\n        \n        if(esMia){\n            //Se obtiene el precio de edificación.\n            int costeEdificarHotel = casilla.getPrecioEdificar();\n            \n            //Se comprueba que el jugador tiene saldo para llevar a cabo la edificación.\n            boolean tengoSaldo = this.tengoSaldo(costeEdificarHotel);\n            \n            int numCasas = casilla.getNumCasas();\n            //Se comprueba si el judador tiene al menos 4 casas costruidas.\n            if(tengoSaldo && numCasas >= 4){\n                puedoEdificar = true;\n            }   \n        }\n        return p"} {"path":"downloaded/Jugador.java","method_name":".\n     */\n    ","content":"   \n             \n    /**\n     * Comprueba si el jugador puede hipotecar una casilla.\n     * @param casilla Casilla a comprobar.\n     * @return TRUE: Puede hipotecar; FALSE: No pu\nipotecar.\n     */\n    boolean puedoHipotecar(Casilla casilla){\n        //Para poder hipotecar la casilla tiene que ser propiedad del jugador.\n        return this.esDeMipro"} {"path":"downloaded/Jugador.java","method_name":"ertad.\n     *","content":"   \n             \n    /**\n     * Comprueba si el jugador puede hipotecar una casilla.\n     * @param casilla Casilla a comprobar.\n     * @return TRUE: Puede hipotecar; FALSE: No pu\nr su libertad.\n     */\n    boolean pagarLibertad(int PrecioLibertad){\n        boolean tengoSaldo = this.tengoSaldo(PrecioLibertad);\n        \n        if(tengoSaldo){\n            this.modificarSaldo(-PrecioLibertad);\n        }\n        \n     "} {"path":"downloaded/Jugador.java","method_name":"elarla.\n     */\n  ","content":"   \n             \n    /**\n     * Comprueba si el jugador puede hipotecar una casilla.\n     * @param casilla Casilla a comprobar.\n     * @return TRUE: Puede hipotecar; FALSE: No pu\nara cancelarla.\n     */\n    boolean puedoPagarHipoteca(Casilla casilla){\n        int valorHipoteca = casilla.calcularValorHipoteca();\n        int costeCancelacion = (valorHipoteca + (int)(valorHipoteca * 0.10));\n        \n        return (this.tengoSaldo(costeCancelacion) && this.esDe"} {"path":"downloaded/Jugador.java","method_name":"@Overrid","content":"   \n             \n    /**\n     * Comprueba si el jugador puede hipotecar una casilla.\n     * @param casilla Casilla a comprobar.\n     * @return TRUE: Puede hipotecar; FALSE: No pu\ncasilla));\n    }\n\n    \n\n    @Override\n    public String toString() {\n        String cadena;\n        \n        cadena = \"Jugador{\" + \"encarcelado=\" + encarcelado + \", nombre=\" + nombre + \", saldo=\" + saldo + \", casillaActual=\" + casillaActual.toString() + \", cartaLibertad=\" + cartaLibertad + '\\n';\n        for(TituloPropiedad titulo : propiedades)\n            cadena = cadena + \"propiedades=\" + titulo.toString() + '\\n';\n        \n"} {"path":"downloaded/Jugador.java","method_name":"   public ArrayList<","content":"   \n             \n    /**\n     * Comprueba si el jugador puede hipotecar una casilla.\n     * @param casilla Casilla a comprobar.\n     * @return TRUE: Puede hipotecar; FALSE: No pu\nde propiedades.\n     */\n    public ArrayList<String> getNombrePropiedades(){\n        ArrayList<String> listaPropiedades = new ArrayList();\n        \n        for(TituloPropiedad propiedad :propiedades){\n            listaPropiedades.add(propiedad.getNombre());\n        }\n        re"} {"path":"downloaded/Jugador.java","method_name":".\n     */\n  ","content":"   \n             \n    /**\n     * Comprueba si el jugador puede hipotecar una casilla.\n     * @param casilla Casilla a comprobar.\n     * @return TRUE: Puede hipotecar; FALSE: No pu\ne proporcionado.\n     */\n    public Casilla getMiCasilla(int indicePropiedad){\n       TituloPropiedad titulo = this.propiedades.get(indicePropiedad);\n       Casilla casilla = titulo.getCasilla();\n      \n"} {"path":"downloaded/DeviceBase.java","method_name":"createAgent","content":"/**\n     * Create a agent\n     * \n     * @param appType agent type\n     * @param platform agent platform\n     * @param agentImplPackageTemplate\n     * @return Agent\n     * @throws DeviceException\n     */\npublic Agent createAgent(AppType appType, String platform, String agentImplPackageTemplate)\n            throws DeviceException {\n        try {\n            String module = appType.toString().toLowerCase();\n            String[] modules = module.split(\"\\\\.\");\n            if (modules.length > 1) {\n                module = modules[1];\n            }\n            log.info(\"Creating a \" + platform + \" agent '\" + module + \"' type...\");\n            Agent agent = CoreUtils.getInstance(Agent.class, agentImplPackageTemplate,\n                    platform + \".\" + module);\n            log.info(\"New agent created.\");\n            return agent;\n        } catch (Exception e) {\n            throw new DeviceException(e);\n        }\n    }"} {"path":"downloaded/DeviceBase.java","method_name":"containsAnApplication","content":"/**\n     * Create a agent\n     * \n     * @param appType agent type\n     * @param platform agent platform\n     * @param agentImplPackageTemplate\n     * @return Agent\n     * @throws DeviceException\n     */\npublic String containsAnApplication(String partKey) throws DeviceException {\n        for (String application : applications.keySet()) {\n            if (application.contains(partKey)) {\n                return application;\n            }\n        }\n        return null;\n    }"} {"path":"downloaded/DeviceBase.java","method_name":"getApplications","content":"/**\n     * Create a agent\n     * \n     * @param appType agent type\n     * @param platform agent platform\n     * @param agentImplPackageTemplate\n     * @return Agent\n     * @throws DeviceException\n     */\npublic List<Application> getApplications() {\n        List<Application> applications = new ArrayList<Application>();\n        applications.addAll(this.applications.values());\n        return applications;\n    }"} {"path":"downloaded/DeviceBase.java","method_name":"getUtil","content":"/**\n     * Create a agent\n     * \n     * @param appType agent type\n     * @param platform agent platform\n     * @param agentImplPackageTemplate\n     * @return Agent\n     * @throws DeviceException\n     */\npublic Utils getUtil() {\n        Utils util = null;\n        try {\n            String className =\n                    getClass().getSimpleName().replace(\"DeviceImpl\", \"\").concat(\"UtilsImpl\");\n            Class<?> c = Class.forName(className);\n            util = (Utils) c.newInstance();\n        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n            e.printStackTrace();\n        }\n        return util;\n    }"} {"path":"downloaded/WsGestPed.java","method_name":"servFuncional","content":"/*******************************************************************************************/\n@WebMethod(operationName = \"servFuncional\", action = \"servFuncional\", exclude = false)\n\t@WebResult(name = \"resultServFuncional\")\n\tpublic ResultServFuncional servFuncional() {\n\t\tlogger.info(\"<<< # WS # >>> Inicia operacion servicioFuncional...\");\n\t\tResultServFuncional result = new ResultServFuncional();\n\t\tmsgCtx = wsCtx.getMessageContext();\n\t\tif(Authenticator.authenticateWsCAll(msgCtx)) {\n\t\t\tSincronizadorStatelessLocal sincSl = LookUps.lookUpEjb();\n\t\t\tresult = sincSl.servicioFuncional();\n\t\t} else {\n\t\t\tresult.setError(new ErrorServicio(ErroresServicioCod.CODERR_WSAUTH, ErroresServicioCod.WSERR_AUTH));\n\t\t\tlogger.warn(\"WARNING WsGestPed > servicioFuncional: Se registra un error al autenticar las credenciales\");\n\t\t}\n\t\tlogger.info(\"<<< # WS # >>> Finaliza operacion servicioFuncional...\");\n\t\treturn result;\n\t}"} {"path":"downloaded/WsGestPed.java","method_name":"obtenerPersonasNoSinc","content":"/*******************************************************************************************/\n@WebMethod(operationName = \"obtenerPersonasNoSinc\", action = \"obtenerPersonasNoSinc\", exclude = false)\n\t@WebResult(name = \"resultObtPersonasNoSinc\")\n\tpublic ResultObtPersonasNoSinc obtenerPersonasNoSinc(@WebParam(name = \"paramObtPersonasNoSinc\") ParamObtPersonasNoSinc paramObtPersonasNoSinc) {\n\t\tlogger.info(\"<<< # WS # >>> Inicia operacion obtenerPersonasNoSinc...\");\n\t\tResultObtPersonasNoSinc result = new ResultObtPersonasNoSinc();\n\t\tmsgCtx = wsCtx.getMessageContext();\n\t\tif(Authenticator.authenticateWsCAll(msgCtx)) {\n\t\t\tSincronizadorStatelessLocal sincSl = LookUps.lookUpEjb();\n\t\t\tresult = sincSl.obtPersonasNoSinc(paramObtPersonasNoSinc);\n\t\t} else {\n\t\t\tErrorServicio errorServ = new ErrorServicio(ErroresServicioCod.CODERR_WSAUTH, ErroresServicioCod.WSERR_AUTH);\n\t\t\tresult.getErroresServ().add(errorServ);\n\t\t\tlogger.warn(\"WARNING WsGestPed > obtenerPersonasNoSinc: Se registra un error al autenticar las credenciales\");\n\t\t}\n\n\t\tlogger.info(\"<<< # WS # >>> Finaliza operacion obtenerPersonasNoSinc...\");\n\t\treturn result;\n\t}"} {"path":"downloaded/WsGestPed.java","method_name":"recibirPersonasASinc","content":"/*******************************************************************************************/\n@WebMethod(operationName = \"recibirPersonasASinc\", action = \"recibirPersonasASinc\", exclude = false)\n\t@WebResult(name = \"resultRecPersonasASinc\")\n\tpublic ResultRecPersonasASinc recibirPersonasASinc(@WebParam(name = \"paramRecPersonasASinc\") ParamRecPersonasASinc paramRecPersonasASinc) {\n\t\tlogger.info(\"<<< # WS # >>> Inicia operacion recibirPersonasASinc...\");\n\t\tResultRecPersonasASinc result = new ResultRecPersonasASinc();\n\t\tmsgCtx = wsCtx.getMessageContext();\n\t\tif(Authenticator.authenticateWsCAll(msgCtx)) {\n\t\t\tSincronizadorStatelessLocal sincSl = LookUps.lookUpEjb();\n\t\t\tresult = sincSl.recPersonasASinc(paramRecPersonasASinc);\n\t\t} else {\n\t\t\tErrorServicio errorServ = new ErrorServicio(ErroresServicioCod.CODERR_WSAUTH, ErroresServicioCod.WSERR_AUTH);\n\t\t\tresult.getErroresServ().add(errorServ);\n\t\t\tlogger.warn(\"WARNING WsGestPed > recibirPersonasASinc: Se registra un error al autenticar las credenciales\");\n\t\t}\n\n\t\tlogger.info(\"<<< # WS # >>> Finaliza operacion recibirPersonasASinc...\");\n\t\treturn result;\n\t}"} {"path":"downloaded/WsGestPed.java","method_name":"recibirProductosASinc","content":"/*******************************************************************************************/\n@WebMethod(operationName = \"recibirProductosASinc\", action = \"recibirProductosASinc\", exclude = false)\n\t@WebResult(name = \"resultRecProductosASinc\")\n\tpublic ResultRecProductosASinc recibirProductosASinc(@WebParam(name = \"paramRecProductosASinc\") ParamRecProductosASinc paramRecProductosASinc) {\n\t\tlogger.info(\"<<< # WS # >>> Inicia operacion recibirProductosASinc...\");\n\t\tResultRecProductosASinc result = new ResultRecProductosASinc();\n\t\tmsgCtx = wsCtx.getMessageContext();\n\t\tif(Authenticator.authenticateWsCAll(msgCtx)) {\n\t\t\tSincronizadorStatelessLocal sincSl = LookUps.lookUpEjb();\n\t\t\tresult = sincSl.recProductosASinc(paramRecProductosASinc);\n\t\t} else {\n\t\t\tErrorServicio errorServ = new ErrorServicio(ErroresServicioCod.CODERR_WSAUTH, ErroresServicioCod.WSERR_AUTH);\n\t\t\tresult.getErroresServ().add(errorServ);\n\t\t\tlogger.warn(\"WARNING WsGestPed > recibirProductosASinc: Se registra un error al autenticar las credenciales\");\n\t\t}\n\t\tlogger.info(\"<<< # WS # >>> Finaliza operacion recibirProductosASinc...\");\n\t\treturn result;\n\t}"} {"path":"downloaded/WsGestPed.java","method_name":"obtenerPedidosNoSinc","content":"/*******************************************************************************************/\n@WebMethod(operationName = \"obtenerPedidosNoSinc\", action = \"obtenerPedidosNoSinc\", exclude = false)\n\t@WebResult(name = \"resultObtPedidosNoSinc\")\n\tpublic ResultObtPedidosNoSinc obtenerPedidosNoSinc(@WebParam(name = \"paramObtPedidosNoSinc\") ParamObtPedidosNoSinc paramObtPedidosNoSinc) {\n\t\tlogger.info(\"<<< # WS # >>> Inicia operacion obtenerPedidosASinc...\");\n\t\tResultObtPedidosNoSinc result = new ResultObtPedidosNoSinc();\n\t\tmsgCtx = wsCtx.getMessageContext();\n\t\tif(Authenticator.authenticateWsCAll(msgCtx)) {\n\t\t\tSincronizadorStatelessLocal sincSl = LookUps.lookUpEjb();\n\t\t\tresult = sincSl.obtPedidosNoSinc(paramObtPedidosNoSinc);\n\t\t} else {\n\t\t\tErrorServicio errorServ = new ErrorServicio(ErroresServicioCod.CODERR_WSAUTH, ErroresServicioCod.WSERR_AUTH);\n\t\t\tresult.getErroresServ().add(errorServ);\n\t\t\tlogger.warn(\"WARNING WsGestPed > obtenerPedidosNoSinc: Se registra un error al autenticar las credenciales\");\n\t\t}\n\t\tlogger.info(\"<<< # WS # >>> Finaliza operacion obtenerPedidosASinc...\");\n\t\treturn result;\n\t}"} {"path":"downloaded/WsGestPed.java","method_name":"recibirPedidosASinc","content":"/*******************************************************************************************/\n@WebMethod(operationName = \"recibirPedidosASinc\", action = \"recibirPedidosASinc\", exclude = false)\n\t@WebResult(name = \"resultRecPedidosASinc\")\n\tpublic ResultRecPedidosASinc recibirPedidosASinc(@WebParam(name = \"paramRecPedidosASinc\") ParamRecPedidosASinc paramRecPedidosASinc) {\n\t\tlogger.info(\"<<< # WS # >>> Inicia operacion recibirPedidosASinc...\");\n\t\tResultRecPedidosASinc result = new ResultRecPedidosASinc();\n\t\tmsgCtx = wsCtx.getMessageContext();\n\t\tif(Authenticator.authenticateWsCAll(msgCtx)) {\n\t\t\tSincronizadorStatelessLocal sincSl = LookUps.lookUpEjb();\n\t\t\tresult = sincSl.recPedidosASinc(paramRecPedidosASinc);\n\t\t} else {\n\t\t\tErrorServicio errorServ = new ErrorServicio(ErroresServicioCod.CODERR_WSAUTH, ErroresServicioCod.WSERR_AUTH);\n\t\t\tresult.getErroresServ().add(errorServ);\n\t\t\tlogger.warn(\"WARNING WsGestPed > recibirPedidosASinc: Se registra un error al autenticar las credenciales\");\n\t\t}\n\t\tlogger.info(\"<<< # WS # >>> Finaliza operacion recibirPedidosASinc...\");\n\t\treturn result;\n\t}"} {"path":"downloaded/DNAAlphabetFactory.java","method_name":"create","content":"/**\n\t * Create the alphabet if it doesn't exist or return the existing copy if it does.\n\t */\npublic static Alphabet create() {\n\t\tif (alphabet == null){\n\t\t\talphabet = new DNAAlphabetFactory.DNAAlphabet();\n\t\t}\n\t\treturn alphabet;\n\t}"} {"path":"downloaded/DNAAlphabetFactory.java","method_name":"bitsPerLetter","content":"/**\n\t\t * Create a bit mask that we can use to get the bits\n\t\t * in a int encoding the values we are interested in.\n\t\t */\npublic int bitsPerLetter () {\n\t\t\treturn bits_per_letter;\n\t\t}"} {"path":"downloaded/DNAAlphabetFactory.java","method_name":"letterMask","content":"/**\n\t\t * Return a byte mask which would return a single letter encoded the least\n\t\t * significant bits_per_letter bits.\n\t\t * @return\n\t\t */\npublic int letterMask(){\n\t\t\treturn letter_mask;\n\t\t}"} {"path":"downloaded/DNAAlphabetFactory.java","method_name":"intToLetter","content":"/**\n\t\t * Convert a byte value to the correct letter.\n\t\t * We do no error checking. You will get an out of bounds exception if the value\n\t\t * corresponds to a value greater than the number of characters in the alphabet.\n\t\t */\npublic char intToLetter(int val){\n\t\t\t// val is assumed to be an integer < MAXUINT so its unsigned value is the same\n\t\t\t// as the signed representation so we don't need to do any conversion.\n\t\t\treturn ALPHABET[val];\n\t\t}"} {"path":"downloaded/DNAAlphabetFactory.java","method_name":"letterToInt","content":"/**\n\t\t * Convert a letter into the specified int.\n\t\t * We do no error checking. You will get an exception if the letter isn't in the alphabet.\n\t\t * Case matters.\n\t\t */\npublic int letterToInt(char letter){\n\t\t\treturn letters_to_num.get(letter);\n\t\t}"} {"path":"downloaded/DNAAlphabetFactory.java","method_name":"size","content":"/**\n\t\t * Size of the alphabet. Includes the end of sequence character.\n\t\t */\npublic int size() {\n\t\t\treturn ALPHABET.length;\n\t\t}"} {"path":"downloaded/DNAAlphabetFactory.java","method_name":"validChars","content":"/**\n\t\t * The set of valid characters in the alphabet (i.e non end of sequence characters);\n\t\t */\npublic final char[] validChars() {\n\t\t\treturn VALID_ALPHABET;\n\t\t}"} {"path":"downloaded/DNAAlphabetFactory.java","method_name":"EOS","content":"/**\n\t\t * Return the end of sequence character\n\t\t */\npublic final char EOS () {\n\t\t\treturn EOS_CHAR;\n\t\t}"} {"path":"downloaded/DNAAlphabetFactory.java","method_name":"intEOS","content":"/**\n\t\t * Return the int value of the end of sequence character\n\t\t */\npublic int intEOS() {\n\t\t\treturn eos_int;\n\t\t}"} {"path":"downloaded/DNAAlphabetFactory.java","method_name":"utf8ToInt","content":"/**\n\t\t * Convert a byte encoding a UTF-8 character, into the appropriate value.\n\t\t *\n\t\t */\npublic int utf8ToInt(byte bval) {\n\t\t\treturn utf8_map[ByteUtil.byteToUint(bval)];\n\t\t}"} {"path":"downloaded/DNAAlphabetFactory.java","method_name":"utf8ToInt","content":"/**\n\t\t * Convert an array of bytes encoding a UTF-8 character, into an array\n\t\t *  of ints of the appropriate value.\n\t\t */\npublic int[] utf8ToInt(byte[] bval) {\n      return utf8ToInt(bval, bval.length);\n    }"} {"path":"downloaded/DNAAlphabetFactory.java","method_name":"utf8ToInt","content":"/**\n     * @param bval: The byte buffer.\n     * @param length: How many bytes in in bval to convert.\n     */\npublic int[] utf8ToInt(byte[] bval, int length) {\n      int[] nums = new int[length];\n      ByteUtil.byteToUint(bval, nums, length);\n      for (int i = 0; i < length; i++) {\n        nums[i] = utf8_map[nums[i]];\n      }\n      return nums;\n    }"} {"path":"downloaded/DNAAlphabetFactory.java","method_name":"hasEOS","content":"/**\n     * @param bval: The byte buffer.\n     * @param length: How many bytes in in bval to convert.\n     */\npublic boolean hasEOS() {\n\t    return false;\n\t  }"} {"path":"downloaded/IncorrectUpdateSemanticsDataAccessException.java","method_name":"wasDataUpdated","content":"/**\n\t * Return whether data was updated.\n\t * If this method returns false, there's nothing to roll back.\n\t * <p>The default implementation always returns true.\n\t * This can be overridden in subclasses.\n\t */\npublic boolean wasDataUpdated() {\n\t\treturn true;\n\t}"} {"path":"downloaded/SortableShow.java","method_name":"compareTo","content":"/**\n     * Adds an allocation that should not be\n     * booked on this show.\n     *\n     * @param Allocation\n     */\n@Override\n    public int compareTo(SortableShow o) {\n        return (int) ((this.tier * 100) - (o.getValue() * 100));\n    }"} {"path":"downloaded/SortableShow.java","method_name":"hashCode","content":"/**\n     * Adds an allocation that should not be\n     * booked on this show.\n     *\n     * @param Allocation\n     */\n@Override\n    public int hashCode() {\n       return show.hashCode();\n    }"} {"path":"downloaded/SortableShow.java","method_name":"equals","content":"/**\n     * Adds an allocation that should not be\n     * booked on this show.\n     *\n     * @param Allocation\n     */\n@Override\n    public boolean equals(Object other) {\n        if (other == null) {\n            return false;\n        }\n        if (this.getClass() != other.getClass()) {\n            return false;\n        }\n        SortableShow that = (SortableShow) other;\n        return that.getShowId().equals(this.getShowId());\n    }"} {"path":"downloaded/DHT11.java","method_name":"r loadDa","content":" /**\n     * DHT11 temperature and humidity sensor. Load data from sensor using python\n     * script which return two values. return Number value [in °C]; sensor : 11\n     * for DTH 11 or 22 for DHT22 sensor gpinPin : GPIO pin in which is sensor\n     * connected (use GPIO number no pin number)\n     \n  @Override\n    public Number loadData() {\n        String cmd = \"sudo python /home/pi/AdafruitDHT.py \" + sensor + \" \" + gpioPin;\n        String ret = \"\";\n        String output = \"\";\n\n        try {\n            String line;\n            Process p = Runtime.getRuntime().exec(cmd.split(\" \"));\n            p.waitFor();\n            try (BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()))) {\n                while ((line = input.readLine()) != null) {\n                    output += (line + '\\n');\n                }\n            }\n            System.out.println(output);\n\n        } catch (IOException | InterruptedException e) {\n        }\n\n        parseValue(output);\n        return this.temperature;\n   "} {"path":"downloaded/DHT11.java","method_name":"ring getUnitS","content":"  /**\n     * Split and trim outut string from loadData() to two Numbers – Temaperature\n     * and Humidity. First value is temperature in °C, second humidity in %.\n     * Trim string is \" \" (three spaces) Could be changed in python script.\n     * @param ret String with humidity ad temperature\n  \n\n    public String getUnitString() {\n        return getTemperature() + \"°C\";"} {"path":"downloaded/DHT11.java","method_name":"tring getHumidity","content":"  /**\n     * Split and trim outut string from loadData() to two Numbers – Temaperature\n     * and Humidity. First value is temperature in °C, second humidity in %.\n     * Trim string is \" \" (three spaces) Could be changed in python script.\n     * @param ret String with humidity ad temperature\n  \n\n\n    public String getHumidityString() {\n        return getHumidity() + \"%\";"} {"path":"downloaded/DHT11.java","method_name":"umber getHu","content":"  /**\n     * Split and trim outut string from loadData() to two Numbers – Temaperature\n     * and Humidity. First value is temperature in °C, second humidity in %.\n     * Trim string is \" \" (three spaces) Could be changed in python script.\n     * @param ret String with humidity ad temperature\n  \n\n\n    public Number getHumidity() {\n        return humidity;"} {"path":"downloaded/DHT11.java","method_name":"umber getTempe","content":"  /**\n     * Split and trim outut string from loadData() to two Numbers – Temaperature\n     * and Humidity. First value is temperature in °C, second humidity in %.\n     * Trim string is \" \" (three spaces) Could be changed in python script.\n     * @param ret String with humidity ad temperature\n  \n\n\n    public Number getTemperature() {\n        return temperature;"} {"path":"downloaded/DHT11.java","method_name":"c int getTempSe","content":"  /**\n     * Split and trim outut string from loadData() to two Numbers – Temaperature\n     * and Humidity. First value is temperature in °C, second humidity in %.\n     * Trim string is \" \" (three spaces) Could be changed in python script.\n     * @param ret String with humidity ad temperature\n  \n\n\n    public int getTempSensorID() {\n        return tempSensorID;"} {"path":"downloaded/DHT11.java","method_name":"c int getHumiditySe","content":"  /**\n     * Split and trim outut string from loadData() to two Numbers – Temaperature\n     * and Humidity. First value is temperature in °C, second humidity in %.\n     * Trim string is \" \" (three spaces) Could be changed in python script.\n     * @param ret String with humidity ad temperature\n  \n\n\n    public int getHumiditySensorID() {\n        return humiditySensorID;"} {"path":"downloaded/Tema17.java","method_name":"a","content":"/**\n     * @param args the command line arguments\n     */\npublic int a (int valorA) {\n        int valorFuncionB = this.b(valorA);\n        return valorFuncionB;\n        \n    }"} {"path":"downloaded/Tema17.java","method_name":"b","content":"/**\n     * @param args the command line arguments\n     */\nprivate int b (int valorB) {\n        int valorDecrementado = valorB -1;\n        int valorFuncionC = this.c(valorDecrementado);\n        return valorFuncionC;\n    }"} {"path":"downloaded/Tema17.java","method_name":"c","content":"/**\n     * @param args the command line arguments\n     */\nprivate int c (int valorC) {\n        int valorDecrementado = valorC -1;\n        return valorDecrementado;\n    }"} {"path":"downloaded/TagCloudActivity.java","method_name":"onCreateOptionsMenu","content":"/**\n     * The {@link android.support.v4.view.ViewPager} that will display the object collection.\n     */\n@Override\n\tpublic boolean onCreateOptionsMenu(Menu menu) {\n\t\t// Inflate the menu; \n\t\tif(!multiTag)\n\t\t\tgetMenuInflater().inflate(R.menu.tag_cloud, menu); \n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n\t\t\tActionBar actionBar = getActionBar();\n\t\t\tactionBar.setDisplayHomeAsUpEnabled(true);\n\t\t\tactionBar.setDisplayShowTitleEnabled(true);\n\t\t\t\n\t\t}\n\t\treturn true;\n\t}"} {"path":"downloaded/TagCloudActivity.java","method_name":"getButtonPressed","content":"/**\n     * The {@link android.support.v4.view.ViewPager} that will display the object collection.\n     */\npublic int getButtonPressed() {\n\t\treturn buttonPressed;\n\t}"} {"path":"downloaded/TagCloudActivity.java","method_name":"getViewPager","content":"/**\n     * The {@link android.support.v4.view.ViewPager} that will display the object collection.\n     */\npublic static ViewPager getViewPager(){\n    \treturn mViewPager;\n    }"} {"path":"downloaded/TagCloudActivity.java","method_name":"getAllTagsOfUser","content":"/**\n     * The {@link android.support.v4.view.ViewPager} that will display the object collection.\n     */\nprivate List<String> getAllTagsOfUser(Integer userId){\n    \t  List<String> openTags = new ArrayList<String>();\n    \t  DataLayerFactory factory = new DataLayerFactory(db);\n    \t  PostDataLayer postDataLayer = factory.createPostDataLayer();\n    \t  List<Question> userQuestions = postDataLayer.getQuestionsOfUser(userId, OrderCriteria.CREATION_DATE);\n    \t  for (Question question : userQuestions) \n    \t\t  for (String tag : question.getTags()) {\n\t\t\t\tif (!openTags.contains(tag)) {\n\t\t\t\t\topenTags.add(tag);\n\t\t\t\t}\n\t\t\t}\n  \t\t\t\n    \t  return openTags;\n  \t\t}"} {"path":"downloaded/TagCloudActivity.java","method_name":"onOptionsItemSelected","content":"/**\n     * The {@link android.support.v4.view.ViewPager} that will display the object collection.\n     */\n@Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case android.R.id.home:\n            \tonBackPressed();\n                return true;\n            case R.id.menu_heat_cloud:\n            \theat = !heat;\n            \tmDemoCollectionPagerAdapter.notifyDataSetChanged();\n            \treturn true;\n        }\n        return super.onOptionsItemSelected(item);\n    }"} {"path":"downloaded/GameWindow.java","method_name":"save","content":"/**\n     * Initializes the instance of the class so that it would work correctly.\n     * Called internally, only to call manually after deserialization.\n     */\npublic void save() {\n        try {\n            URL resource = Config.class.getResource(DEFAULT_SAVE);\n            File file;\n            try {\n                file = new File(resource.toURI());\n            }\n            catch (URISyntaxException e) {\n                e.printStackTrace();\n                return;\n            }\n            FileOutputStream fileStream = new FileOutputStream(file);\n            ObjectOutputStream out = new ObjectOutputStream(fileStream);\n            out.writeObject(this);\n            out.close();\n            fileStream.close();\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n            // TODO: make it notify\n        }\n    }"} {"path":"downloaded/GameWindow.java","method_name":"load","content":"/**\n     * Initializes the instance of the class so that it would work correctly.\n     * Called internally, only to call manually after deserialization.\n     */\npublic static GameWindow load(String savePath) {\n        try {\n            InputStream input = GameWindow.class.getResourceAsStream(DEFAULT_SAVE);\n            ObjectInputStream in = new ObjectInputStream(input);\n            GameWindow result = (GameWindow)in.readObject();\n            return result;\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n            return  null;\n        }\n        catch (ClassNotFoundException e) {\n            e.printStackTrace();\n            return  null;\n        }\n    }"} {"path":"downloaded/RedisConfig.java","method_name":"emplate<Strin","content":"/**\n     * 防止redis入库序列化乱码的问题\n     * @param connectionFactor\n  * @return\n     */\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory connectionFactory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(connectionFactory);\n        //使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\n\n        ObjectMapper objectMapper = new ObjectMapper();\n        // 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public\n        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        // 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常\n        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\n\n        //使用StringRedisSerializer来序列化和反序列化redis的key值\n        RedisSerializer redisSerializer = new StringRedisSerializer();\n\n        //使用StringRedisSerializer来序列化和反序列化redis的key值\n        redisTemplate.setKeySerializer(redisSerializer);\n        // 值采用json序列化\n        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);\n"} {"path":"downloaded/ModifyQuestionTFPanel.java","method_name":"getName","content":"/**\n\t * @return the titleField\n\t */\npublic String getName(){\n\t\treturn this.titleField.getText();\n\t}"} {"path":"downloaded/ModifyQuestionTFPanel.java","method_name":"getWeightText","content":"/**\n\t * \n\t * @return the weightField\n\t */\npublic String getWeightText(){\n\t\tif(this.weightField.isVisible() == false){\n\t\t\treturn null;\n\t\t}\n\t\treturn this.weightField.getText();\n\t}"} {"path":"downloaded/ModifyQuestionTFPanel.java","method_name":"getJp","content":"/**\n\t * @return the jp\n\t */\npublic JPanel getJp() {\n\t\treturn jp;\n\t}"} {"path":"downloaded/ModifyQuestionTFPanel.java","method_name":"getFirstLabel","content":"/**\n\t * @return the firstLabel\n\t */\npublic JLabel getFirstLabel() {\n\t\treturn firstLabel;\n\t}"} {"path":"downloaded/ModifyQuestionTFPanel.java","method_name":"getTitleLabel","content":"/**\n\t * @return the titleLabel\n\t */\npublic JLabel getTitleLabel() {\n\t\treturn titleLabel;\n\t}"} {"path":"downloaded/ModifyQuestionTFPanel.java","method_name":"getTitleField","content":"/**\n\t * @return the titleField\n\t */\npublic JTextField getTitleField() {\n\t\treturn titleField;\n\t}"} {"path":"downloaded/ModifyQuestionTFPanel.java","method_name":"getSolutionLabel","content":"/**\n\t * @return the solutionLabel\n\t */\npublic JLabel getSolutionLabel() {\n\t\treturn solutionLabel;\n\t}"} {"path":"downloaded/ModifyQuestionTFPanel.java","method_name":"getSolutionT","content":"/**\n\t * @return the solutionT\n\t */\npublic JRadioButton getSolutionT() {\n\t\treturn solutionT;\n\t}"} {"path":"downloaded/ModifyQuestionTFPanel.java","method_name":"getSolutionF","content":"/**\n\t * @return the solutionF\n\t */\npublic JRadioButton getSolutionF() {\n\t\treturn solutionF;\n\t}"} {"path":"downloaded/ModifyQuestionTFPanel.java","method_name":"getSolutionGroup","content":"/**\n\t * @return the solutionGroup\n\t */\npublic ButtonGroup getSolutionGroup() {\n\t\treturn solutionGroup;\n\t}"} {"path":"downloaded/ModifyQuestionTFPanel.java","method_name":"getSolutionPanel","content":"/**\n\t * @return the solutionPanel\n\t */\npublic JPanel getSolutionPanel() {\n\t\treturn solutionPanel;\n\t}"} {"path":"downloaded/ModifyQuestionTFPanel.java","method_name":"getWeightLabel","content":"/**\n\t * @return the weightLabel\n\t */\npublic JLabel getWeightLabel() {\n\t\treturn weightLabel;\n\t}"} {"path":"downloaded/ModifyQuestionTFPanel.java","method_name":"getWeightField","content":"/**\n\t * @return the weightField\n\t */\npublic JTextField getWeightField() {\n\t\treturn weightField;\n\t}"} {"path":"downloaded/ModifyQuestionTFPanel.java","method_name":"getCreate","content":"/**\n\t * @return the create\n\t */\npublic JButton getCreate() {\n\t\treturn create;\n\t}"} {"path":"downloaded/ModifyQuestionTFPanel.java","method_name":"getCancel","content":"/**\n\t * @return the cancel\n\t */\npublic JButton getCancel() {\n\t\treturn cancel;\n\t}"} {"path":"downloaded/ModifyQuestionTFPanel.java","method_name":"getLayout","content":"/**\n\t * @return the layout\n\t */\npublic SpringLayout getLayout() {\n\t\treturn layout;\n\t}"} {"path":"downloaded/ListFrame.java","method_name":"initComponents","content":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n@SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jScrollPane1 = new javax.swing.JScrollPane();\n        list2 = new javax.swing.JList<>();\n        jScrollPane2 = new javax.swing.JScrollPane();\n        list1 = new javax.swing.JList<>();\n        shiftAllLeftButton = new javax.swing.JButton();\n        shiftOneRightButton = new javax.swing.JButton();\n        shiftOneLeftButton = new javax.swing.JButton();\n        shiftAllRightButton = new javax.swing.JButton();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n        list2.setFont(new java.awt.Font(\"Tahoma\", 0, 24)); // NOI18N\n        list2.setModel(new javax.swing.AbstractListModel<String>() {\n            String[] strings = { \"Green Beans\", \"Lemons\", \"Limes\", \"Onion\", \"Oranges\", \"Potato\", \"Tomato\", \"Lady Finger\", \"Beans\" };\n            public int getSize() { return strings.length; }\n            public String getElementAt(int i) { return strings[i]; }\n        });\n        list2.addMouseListener(new java.awt.event.MouseAdapter() {\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                list2MouseClicked(evt);\n            }\n        });\n        jScrollPane1.setViewportView(list2);\n\n        list1.setFont(new java.awt.Font(\"Tahoma\", 0, 24)); // NOI18N\n        list1.setModel(new javax.swing.AbstractListModel<String>() {\n            String[] strings = { \"Banana\", \"Apple\", \"Watemelon\", \"Grapes\", \"Orange\", \"Cucumber\", \"Eggplant\", \"Garlic\", \"GrapeFruit\" };\n            public int getSize() { return strings.length; }\n            public String getElementAt(int i) { return strings[i]; }\n        });\n        list1.addMouseListener(new java.awt.event.MouseAdapter() {\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                list1MouseClicked(evt);\n            }\n        });\n        jScrollPane2.setViewportView(list1);\n\n        shiftAllLeftButton.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        shiftAllLeftButton.setText(\"<<\");\n        shiftAllLeftButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                shiftAllLeftButtonActionPerformed(evt);\n            }\n        });\n\n        shiftOneRightButton.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        shiftOneRightButton.setText(\">\");\n        shiftOneRightButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                shiftOneRightButtonActionPerformed(evt);\n            }\n        });\n\n        shiftOneLeftButton.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        shiftOneLeftButton.setText(\"<\");\n        shiftOneLeftButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                shiftOneLeftButtonActionPerformed(evt);\n            }\n        });\n\n        shiftAllRightButton.setFont(new java.awt.Font(\"Tahoma\", 1, 18)); // NOI18N\n        shiftAllRightButton.setText(\">>\");\n        shiftAllRightButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                shiftAllRightButtonActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(shiftAllRightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(shiftOneLeftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addComponent(shiftAllLeftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addComponent(shiftOneRightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addGap(44, 44, 44)\n                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(jScrollPane1)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addContainerGap(145, Short.MAX_VALUE)\n                .addComponent(shiftOneRightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(44, 44, 44)\n                .addComponent(shiftOneLeftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(41, 41, 41)\n                .addComponent(shiftAllRightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(45, 45, 45)\n                .addComponent(shiftAllLeftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(257, 257, 257))\n            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)\n        );\n\n        pack();\n    }"} {"path":"downloaded/TitleTag.java","method_name":"doEndTag","content":"/** Value to write if no title is found (optional). */\npublic final int doEndTag() {\n        try {\n            String title = getPage().getTitle();\n            if (title == null || title.trim().length() == 0) title = defaultTitle;\n            if (title != null) getOut().write(title);\n        }\n        catch (Exception e) {\n            trace(e);\n        }\n        return EVAL_PAGE;\n    }"} {"path":"downloaded/FiniteAutomaton.java","method_name":"getStates","content":"/**\n\t * returns all of the states contained in this finite automaton\n\t * \t\n\t * @return the states in the FA\n\t */\npublic ArrayList<State> getStates(){\n\t\treturn this.states;\n\t}"} {"path":"downloaded/FiniteAutomaton.java","method_name":"getStartState","content":"/**\n\t * Creates a start state and adds it to the set of states.\n\t */\npublic State getStartState(){\n\t\treturn this.startState;\n\t}"} {"path":"downloaded/FiniteAutomaton.java","method_name":"getAcceptingStates","content":"/**\n\t * \n\t * @return the array of accepting states.\n\t */\npublic ArrayList<State> getAcceptingStates(){\n\t\tArrayList<State> accepting = new ArrayList<State>();\n\t\tfor(State state : this.states){\n\t\t\tif(state.isAcceptingState()){\n\t\t\t\taccepting.add(state);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn accepting;\n\t}"} {"path":"downloaded/EventTimeline.java","method_name":"getTitleSize","content":"/**\n     * Private constructor used for deserialization.\n     * Set in the top left corner of the board with the default dimensions.\n     */\n@JsonIgnore\n    public int getTitleSize() {\n        return _titleSize;\n    }"} {"path":"downloaded/EventTimeline.java","method_name":"isTitleVisible","content":"/**\n     * Private constructor used for deserialization.\n     * Set in the top left corner of the board with the default dimensions.\n     */\n@JsonIgnore\n    public boolean isTitleVisible() {\n        return _titleVisible;\n    }"} {"path":"downloaded/EventTimeline.java","method_name":"getTitleAlignment","content":"/**\n     * Private constructor used for deserialization.\n     * Set in the top left corner of the board with the default dimensions.\n     */\n@JsonIgnore\n    public Alignment getTitleAlignment() {\n        return _titleAlignment;\n    }"} {"path":"downloaded/EventTimeline.java","method_name":"getTitle","content":"/**\n     * Private constructor used for deserialization.\n     * Set in the top left corner of the board with the default dimensions.\n     */\n@JsonIgnore\n    public String getTitle() {\n        return _title;\n    }"} {"path":"downloaded/EventTimeline.java","method_name":"getQuery","content":"/**\n     * The getter for the EventTimeline's query which will fuel the EventTimeline..\n     *\n     * @return The EventTimeline's query.\n     */\n@JsonIgnore\n    public String getQuery() {\n        return _query;\n    }"} {"path":"downloaded/EventTimeline.java","method_name":"getTimeframe","content":"/**\n     * The setter for the EventTimeline's query which will fuel the EventStream..\n     *\n     * @param query The EventTimeline's query.\n     */\n@JsonIgnore\n    public Timeframe getTimeframe() {\n        return _timeframe;\n    }"} {"path":"downloaded/EventTimeline.java","method_name":"toString","content":"/**\n     * The setter for the EventTimeline's query which will fuel the EventStream..\n     *\n     * @param query The EventTimeline's query.\n     */\n@JsonIgnore\n    public String toString() {\n        return \"EventTimeline[\" +\n                \"title=\" + getTitle() +\n                \", titleAlignment=\" + getTitleAlignment() +\n                \", titleSize=\" + getTitleSize() +\n                \", titleVisible=\" + isTitleVisible() +\n                \", query=\" + getQuery() +\n                \", timeframe=\" + getTimeframe() +\n                \"]\";\n    }"} {"path":"downloaded/CommonSenseAuthUserData.java","method_name":"getSession_id","content":"/**\n     * The session id.\n     * @return \n     */\npublic String getSession_id() {\n        return session_id;\n    }"} {"path":"downloaded/Minigames.java","method_name":"isValid","content":"/**\n     * Check whether the game name is valid.\n     * @param game Name of the mini-game.\n     * @return `true` if the mini-game name is valid; otherwise, `false`.\n     */\npublic static boolean isValid(String game) {\n        return BASE_SCORES.containsKey(game);\n    }"} {"path":"downloaded/Minigames.java","method_name":"getScore","content":"/**\n     * Calculate the score for two players playing a mini-game.\n     * @param history Of games played.\n     * @param game Name of mini-game.\n     * @param p1 UUID of player 1.\n     * @param p2 UUID of player 2.\n     * @return Integer score.\n     */\npublic static int getScore(FriendMiniGameHistory history, String game, String p1, String p2) {\n        int score = BASE_SCORES.get(game);\n        score += getNewPartnerBonus(history, game, p1, p2);\n        score += getContinuedPartnerBonus(history, game, p1, p2);\n        score += getFirstTimeBonus(history, game, p1);\n        return score;\n    }"} {"path":"downloaded/Minigames.java","method_name":"getNewPartnerBonus","content":"/**\n     * Calculate the score for two players playing a mini-game.\n     * @param history Of games played.\n     * @param game Name of mini-game.\n     * @param p1 UUID of player 1.\n     * @param p2 UUID of player 2.\n     * @return Integer score.\n     */\nprivate static int getNewPartnerBonus(FriendMiniGameHistory history, String game, String p1, String p2) {\n        //check if players have played this mini-game before\n        final int timesPlayed = history.getGamesPlayed(game, p1, p2);\n        boolean newgame = timesPlayed == 0;\n        if (newgame) {\n            //calculate bonus from minigame\n            return NEW_PARTNER_BONUSES.get(game);\n        }\n        return 0;\n    }"} {"path":"downloaded/Minigames.java","method_name":"getContinuedPartnerBonus","content":"/**\n     * Calculate the score for two players playing a mini-game.\n     * @param history Of games played.\n     * @param game Name of mini-game.\n     * @param p1 UUID of player 1.\n     * @param p2 UUID of player 2.\n     * @return Integer score.\n     */\nprivate static int getContinuedPartnerBonus(FriendMiniGameHistory history, String game, String p1, String p2) {\n        //see if players have played this mini-game before\n        final int gameCount = history.getGamesPlayed(game, p1, p2);\n        if (gameCount > 0) {\n            return 0;\n        }\n        // At this point, this is definitely a new game.\n        final int uniqueCount = history.getTotalGamesPlayed(p1, p2, true);\n        if (uniqueCount == 0) {\n            // Not a CONTINUED partner, since they have never played any game together before.\n            return 0;\n        }\n        // Minus 1 just so we can start the bonuses array at index 0.\n        return CONTINUED_PARTNER_BONUSES[uniqueCount - 1];\n    }"} {"path":"downloaded/Minigames.java","method_name":"getFirstTimeBonus","content":"/**\n     * Calculate the score for two players playing a mini-game.\n     * @param history Of games played.\n     * @param game Name of mini-game.\n     * @param p1 UUID of player 1.\n     * @param p2 UUID of player 2.\n     * @return Integer score.\n     */\nprivate static int getFirstTimeBonus(FriendMiniGameHistory history, String game, String p1) {\n        //check if this mini-game contains the player\n        final boolean firstTime = history.getGamesPlayed(game, p1) == 0;\n        if (firstTime){\n            //calculate bonus from mini-game\n            return FIRST_TIME_BONUSES.get(game);\n        }\n        return 0;\n    }"} {"path":"downloaded/CollisionHandler.java","method_name":"processGroundContact","content":"/**\n     * Created by Philip Deppen (Milestone 3, 11/18/18, issue 47)\n     * @param dudeFixture\n     * @param groundFixture\n     */\nprivate void processGroundContact(Fixture dudeFixture, Fixture groundFixture)\n    {\n    \t\t//System.out.println(\"Ground contact\");\n    \t    Dude dude = (Dude) groundFixture.getBody().getUserData();\n        Ground ground = (Ground) dudeFixture.getBody().getUserData();\n        // static ?\n        dude = Level.dude;\n        float heightDifference = Math.abs(dude.position.y - (  ground.position.y + ground.bounds.height));\n         \n         if (heightDifference > 0.25f) \n         {\n             boolean hitRightEdge = dude.position.x > (ground.position.x + ground.bounds.width / 2.0f);\n             if (hitRightEdge) \n             {\n            \t \tdude.position.x = ground.position.x + ground.bounds.width;\n             }\n             else \n             {\n            \t \tdude.position.x = ground.position.x - dude.bounds.width;\n             }\n             return;\n         }\n         \n         switch (dude.jumpState) \n         {\n             case GROUNDED:\n                 break;\n             case FALLING:\n             case JUMP_FALLING:\n            \t \tdude.position.y = ground.position.y + dude.bounds.height  + dude.origin.y;\n            \t \tdude.jumpState = JUMP_STATE.GROUNDED;\n            \t \tbreak;\n             case JUMP_RISING:\n            \t \tdude.position.y = ground.position.y + dude.bounds.height + dude.origin.y;\n                 break;\n         }\n    }"} {"path":"downloaded/CollisionHandler.java","method_name":"getListener","content":"/**\n\t * Created by Philip Deppen (Milestone 3, 11/26/18)\n\t * @param categoryA\n\t * @param categoryB\n\t * @return\n\t */\nprivate ContactListener getListener(short categoryA, short categoryB)\n\t{\n\t\tObjectMap<Short, ContactListener> listenerCollection = listeners.get(categoryA);\n\t\tif (listenerCollection == null)\n\t\t{\n\t\t    return null;\n\t\t}\n\t\treturn listenerCollection.get(categoryB);\n\t}"} {"path":"downloaded/Reporter.java","method_name":"closeTable","content":"/**\n   * Erzeugt den Tabellen-Header.\n   * \n   * @param tabellenbreiteinprozent\n   *          Breite der Tabelle in Prozent\n   * @param alignment\n   *          Horizontale Ausrichtung der Tabelle (siehe com.lowagie.Element.)\n   * @throws DocumentException\n   */\npublic void closeTable() throws DocumentException\n  {\n    if (table == null)\n    {\n      return;\n    }\n    rpt.add(table);\n    table = null;\n    headers = new ArrayList<PdfPCell>();\n    widths = new ArrayList<Integer>();\n  }"} {"path":"downloaded/Reporter.java","method_name":"getDetailCell","content":"/**\n   * Erzeugt eine Zelle der Tabelle.\n   * \n   * @param text\n   *          der anzuzeigende Text.\n   * @param align\n   *          die Ausrichtung.\n   * @param backgroundcolor\n   *          die Hintergundfarbe.\n   * @return die erzeugte Zelle.\n   */\nprivate PdfPCell getDetailCell(String text, int align, Color backgroundcolor)\n  {\n    PdfPCell cell = new PdfPCell(new Phrase(new Chunk(notNull(text),\n        FontFactory.getFont(FontFactory.HELVETICA, 8)).setHyphenation(hyph)));\n    cell.setHorizontalAlignment(align);\n    cell.setBackgroundColor(backgroundcolor);\n    return cell;\n  }"} {"path":"downloaded/Reporter.java","method_name":"getDetailCell","content":"/**\n   * Erzeugt eine Zelle der Tabelle.\n   * \n   * @param text\n   *          der anzuzeigende Text.\n   * @param align\n   *          die Ausrichtung.\n   * @param backgroundcolor\n   *          die Hintergundfarbe.\n   * @return die erzeugte Zelle.\n   */\nprivate PdfPCell getDetailCell(String text, int align, Color backgroundcolor,\n      int colspan)\n  {\n    PdfPCell cell = new PdfPCell(new Phrase(new Chunk(notNull(text),\n        FontFactory.getFont(FontFactory.HELVETICA, 8)).setHyphenation(hyph)));\n    cell.setHorizontalAlignment(align);\n    cell.setBackgroundColor(backgroundcolor);\n    cell.setColspan(colspan);\n    return cell;\n\n  }"} {"path":"downloaded/Reporter.java","method_name":"getDetailCell","content":"/**\n   * Erzeugt eine Zelle der Tabelle.\n   * \n   * @param text\n   *          der anzuzeigende Text.\n   * @param align\n   *          die Ausrichtung.\n   * @return die erzeugte Zelle.\n   */\nprivate PdfPCell getDetailCell(String text, int align)\n  {\n    return getDetailCell(text, align, Color.WHITE);\n  }"} {"path":"downloaded/Reporter.java","method_name":"getDetailCell","content":"/**\n   * Erzeugt eine Zelle fuer die uebergebene Zahl.\n   * \n   * @param value\n   *          die Zahl.\n   * @return die erzeugte Zelle.\n   */\nprivate PdfPCell getDetailCell(double value)\n  {\n    Font f = null;\n    if (value >= 0)\n    {\n      f = FontFactory.getFont(FontFactory.HELVETICA, 8, Font.NORMAL,\n          Color.BLACK);\n    }\n    else\n    {\n      f = FontFactory.getFont(FontFactory.HELVETICA, 8, Font.NORMAL, Color.RED);\n    }\n    PdfPCell cell = new PdfPCell(new Phrase(\n        Einstellungen.DECIMALFORMAT.format(value), f));\n    cell.setHorizontalAlignment(Element.ALIGN_RIGHT);\n    return cell;\n  }"} {"path":"downloaded/Reporter.java","method_name":"getDetailCell","content":"/**\n   * Erzeugt eine Zelle fuer das uebergebene Datum.\n   * \n   * @param value\n   *          das Datum.\n   * @return die erzeugte Zelle.\n   */\nprivate PdfPCell getDetailCell(Date value, int align)\n  {\n    if (value.equals(Einstellungen.NODATE))\n    {\n      return getDetailCell(\"\", Element.ALIGN_LEFT);\n    }\n    SimpleDateFormat sdf = new SimpleDateFormat(\"dd.MM.yyyy\");\n    return getDetailCell(sdf.format(value), align);\n  }"} {"path":"downloaded/Reporter.java","method_name":"notNull","content":"/**\n   * Gibt einen Leerstring aus, falls der Text null ist.\n   * \n   * @param text\n   *          der Text.\n   * @return der Text oder Leerstring - niemals null.\n   */\npublic String notNull(String text)\n  {\n    return text == null ? \"\" : text;\n  }"} {"path":"downloaded/SimpleArray.java","method_name":"�з�","content":"/**\n     * Размер массива объектов\n     * @return - т\n�щая позиция\n     */\n    public int size() {\n"} {"path":"downloaded/SimpleArray.java","method_name":"�о","content":"/**\n     * Размер массива объектов\n     * @return - т\nа на новый\n     * @param index - позиция объекта в массиве\n     * @param model - новый объект\n     * @return - вставленный объект\n     */\n    public T"} {"path":"downloaded/SimpleArray.java","method_name":"cts","content":"/**\n     * Размер массива объектов\n     * @return - т\ndex, objects.length - index - 1);\n            objects = tmp;\n        }\n"} {"path":"downloaded/SimpleArray.java","method_name":"учен","content":"/**\n     * Размер массива объектов\n     * @return - т\n\n    /**\n     * Метод получения объекта из массива\n     * @param index - позиция объекта в массиве\n     * @return - размер массива определяется параметром position\n     */\n    public T get(int index) {\n        return (T) this.objects[index];\n    }\n\n    @Override\n    public Iterator<T> iterator() {\n        Iterator<T> it = new Iterator<T>() {\n\n            private int currentIndex = 0;\n\n            @Override\n            public boolean hasNext() {\n                return currentIndex < objects.length;\n            }\n\n            @Override\n            public T next() {\n                if (hasNext())\n                    if (this.currentI"} {"path":"downloaded/SceneMeshShaderUtil.java","method_name":"getMeshDisplayProgram","content":"/**\n     * Vertex shader used for label rendering.\n     */\nstatic int getMeshDisplayProgram() {\n        return createGlProgram(SCENE_MESH_VERTEX, SCENE_MESH_FRAGMENT);\n    }"} {"path":"downloaded/SceneMeshShaderUtil.java","method_name":"getVirtualObjectProgram","content":"/**\n     * Vertex shader used for label rendering.\n     */\nstatic int getVirtualObjectProgram() {\n        return createGlProgram(VIRTUAL_OBJECT_VERTEX, VIRTUAL_OBJECT_FRAGMENT);\n    }"} {"path":"downloaded/SceneMeshShaderUtil.java","method_name":"createGlProgram","content":"/**\n     * Create the GL program.\n     *\n     * @param vertexCode vertexCode Vertex code.\n     * @param fragmentCode Fragment code.\n     * @return int Creation result.\n     */\nprivate static int createGlProgram(String vertexCode, String fragmentCode) {\n        int vertex = loadShader(GLES20.GL_VERTEX_SHADER, vertexCode);\n        if (vertex == 0) {\n            return 0;\n        }\n        int fragment = loadShader(GLES20.GL_FRAGMENT_SHADER, fragmentCode);\n        if (fragment == 0) {\n            return 0;\n        }\n        int program = GLES20.glCreateProgram();\n        if (program != 0) {\n            GLES20.glAttachShader(program, vertex);\n            GLES20.glAttachShader(program, fragment);\n            GLES20.glLinkProgram(program);\n            int[] linkStatus = new int[1];\n            GLES20.glGetProgramiv(program, GLES20.GL_LINK_STATUS, linkStatus, 0);\n            if (linkStatus[0] != GLES20.GL_TRUE) {\n                LogUtil.error(TAG, \"Could not link program \" + GLES20.glGetProgramInfoLog(program));\n                GLES20.glDeleteProgram(program);\n                program = 0;\n            }\n        }\n        return program;\n    }"} {"path":"downloaded/SceneMeshShaderUtil.java","method_name":"loadShader","content":"/**\n     * Load the shader.\n     *\n     * @param shaderType Type of the shader.\n     * @param source Source of the shader.\n     * @return int Shader.\n     */\nprivate static int loadShader(int shaderType, String source) {\n        int shader = GLES20.glCreateShader(shaderType);\n        if (shader != 0) {\n            GLES20.glShaderSource(shader, source);\n            GLES20.glCompileShader(shader);\n            int[] compiled = new int[1];\n            GLES20.glGetShaderiv(shader, GLES20.GL_COMPILE_STATUS, compiled, 0);\n            if (compiled[0] == 0) {\n                LogUtil.error(TAG, \"glError: Could not compile shader \" + shaderType);\n                LogUtil.error(TAG, \"GLES20 Error: \" + GLES20.glGetShaderInfoLog(shader));\n                GLES20.glDeleteShader(shader);\n                shader = 0;\n            }\n        }\n        return shader;\n    }"} {"path":"downloaded/LoginPersistenceServiceImpl.java","method_name":"userExists","content":"/**\n\t * Checks the database to see if a user is there\n\t */\n@Override\n\tpublic boolean userExists(String user) {\n\t\tLogin login = fetchUser(user);\n\t\treturn (login != null);\n\t}"} {"path":"downloaded/LoginPersistenceServiceImpl.java","method_name":"fetchUser","content":"/**\n\t * This will fetch all Login instances in the database with a given game\n\t */\n@Override\n\tpublic Login fetchUser(String user) {\n\t\tList<Login> list = em.createQuery(\"SELECT a FROM Login a WHERE a.username = :user\", Login.class)\n\t\t\t\t.setParameter(\"user\", user).getResultList();\n\n\t\tif (list.size() > 0) {\n\t\t\treturn list.get(0);\n\t\t}\n\n\t\treturn null;\n\t}"} {"path":"downloaded/KmsMigrationBoardItem.java","method_name":"is.boardItemDa","content":"/**\n\t * 파일 Dao\n\n)\n//\t\t\t\t\t\t\tthis.boardItemDao.createRefInfo(map);\n//\t\t\t\t\t}\n//\t\t\t\t}\n//\t\t\t\t\n//\t\t\t}\n//\t\t} catch (Exception e) {\n//\t\t\t// TODO: handle exception\n//\t\t\te.printStackTrace();\n//\t\t}\n//\t\t\n//\t}\n\t\n\tprivate Date makeDateFormat(String strDate) {\n\t\ttry {\n\t\t\t\n\t\t\tDateFormat df = new SimpleDateFo"} {"path":"downloaded/KmsMigrationBoardItem.java","method_name":"mm:ss\")","content":"/**\n\t * 파일 Dao\n\nt(\"yyyy-MM-dd hh:mm:ss\");\t\n\t\t\tDate date = df.parse(strDate);\n\t\t\treturn date;\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate FileData setFile(String fileName, String userId, String userName, String date){\n\t\t\n\t\ttry {\n\t\t\t\n\t\t\tString folder = \"/ikep4jfile/kms/sapmnt/MPP/global/common/Namo/editor/upload\";\n\t\t\tString fileId = StringUtil.replaceQuot(EncryptUtil\n\t\t\t\t\t.encryptText(idgenService.getNextId()));\n\t\t\t\n\t\t\tString fileExtension = StringUtil.getFileExtension(fileName);\n\t\t\tFile saveFile = new File(folder, UUID.randomUUID()\n\t\t\t\t\t.toString().replace(\"-\", \"\")\n\t\t\t\t\t+ \".\" + fileExtension);\n\t\t\t\n\t\t\tFileData fileData = new FileData();\n\t\t\tfileData.setFileId(fileId);\n\t\t\tfileData.setFilePath(folder);\n\t\t\tfileData.setFileRealName(fileName);\n\t\t\tfileData.setFileSize(0);\n\t\t\t//fileData.setFileName(saveFile.getName());\n\t\t\tfileData.setFileName(fileName);\n\t\t\tfileData.setFileContentsType(fileExtension);\n\t\t\tfileData.setFileExtension(fileExtension);\n\t\t\tfileData.setEditorAttach(0);\n\t\t\tfileData.setRegisterId(userId);\n\t\t\tfileData.setRegisterName(userName);\n\t\t\tfileData.setRegistDate(makeDateFormat(date));\n\t\t\tfileData.setUpdaterId(userId);\n\t\t\tfileData.setUpdaterName(userName);\n\t\t\tfileData.setUpdateDate("} {"path":"downloaded/KmsMigrationBoardItem.java","method_name":"boardAsse","content":"/**\n\t * 파일 Dao\n\nAssessItem.setItemId(itemId);\n\t\tboardAssessItem.setAssessItem(assessItem);\n\t\tboardAssessItem.setItemDisplay(value);\n\t\tthis.boardAssessItemDao.updateAssessItem( boardAssessItem);\n\t}\n\t"} {"path":"downloaded/KmsMigrationBoardItem.java","method_name":"tring, St","content":"/**\n\t * 파일 Dao\n\nivate HashMap<String, String> getUserId(String empNo){\n\t\t\n\t\tHashMap<String, String> userInfo = (HashMap<String, String>) this.userDao.empNoToUserId(empNo);\n\t\t\n\t\treturn userInfo;\n\t}\n\t\n\tprivate String getItemId(String date, String slipNo){\n\t\t\n\t\tMap<"} {"path":"downloaded/TypeDao.java","method_name":"tion\n\t */\n ","content":"/**\n\t * 根据版块更新点击数\n\t * @param typeId\n\t * @throws\n* @throws SQLException\n\t */\n  public List<Type> findAllType() throws SQLException{\n\t  List<Type> typeList = null;\n\t  QueryRunner queryRunner = new QueryRunner(JdbcUtil.getDataSource());\n\t  String sql = \"select * from type\";\n\t   typeList = (List<Type>) queryRunner.query(sql, new BeanListHandler(Type.class)"} {"path":"downloaded/ExaminationReportVo.java","method_name":"\n\tpublic Stri","content":"/**\n\t * 居民姓\ning docName;\n\t\n\tpublic String getPersonName() {\n\t\tretur"} {"path":"downloaded/Rental.java","method_name":"getRecordType","content":"/**\n\t * The class holding records for this type\n\t */\n@Override\n\tpublic Class<RentalRecord> getRecordType() {\n\t\treturn RentalRecord.class;\n\t}"} {"path":"downloaded/Rental.java","method_name":"getIdentity","content":"/**\n\t * {@inheritDoc}\n\t */\n@Override\n\tpublic Identity<RentalRecord, Integer> getIdentity() {\n\t\treturn Keys.IDENTITY_rental;\n\t}"} {"path":"downloaded/ExaminationReportVo.java","method_name":"\n\tpublic S","content":"/**\n\t * 居民姓\npersonName;\n\t}\n\tpublic String getDocName() {\n\t\tre"} {"path":"downloaded/Rental.java","method_name":"getPrimaryKey","content":"/**\n\t * {@inheritDoc}\n\t */\n@Override\n\tpublic UniqueKey<RentalRecord> getPrimaryKey() {\n\t\treturn Keys.keyRentalPrimary;\n\t}"} {"path":"downloaded/Rental.java","method_name":"getKeys","content":"/**\n\t * {@inheritDoc}\n\t */\n@Override\n\tpublic List<UniqueKey<RentalRecord>> getKeys() {\n\t\treturn Arrays.<UniqueKey<RentalRecord>>asList(Keys.keyRentalPrimary, Keys.keyRentalRentalDate);\n\t}"} {"path":"downloaded/Rental.java","method_name":"getReferences","content":"/**\n\t * {@inheritDoc}\n\t */\n@Override\n\tpublic List<ForeignKey<RentalRecord, ?>> getReferences() {\n\t\treturn Arrays.<ForeignKey<RentalRecord, ?>>asList(Keys.fkRentalInventory, Keys.fkRentalCustomer, Keys.fkRentalStaff);\n\t}"} {"path":"downloaded/Rental.java","method_name":"as","content":"/**\n\t * {@inheritDoc}\n\t */\n@Override\n\tpublic Rental as(String alias) {\n\t\treturn new Rental(alias, this);\n\t}"} {"path":"downloaded/Rental.java","method_name":"rename","content":"/**\n\t * Rename this table\n\t */\npublic Rental rename(String name) {\n\t\treturn new Rental(name, null);\n\t}"} {"path":"downloaded/InstaYakErrorTestOnValidSet.java","method_name":"data","content":"/**\n\t * Create test data\n\t * @return the collection of test data\n\t */\n@Parameters\n\tpublic static Collection<Object[]> data() {\n\t\treturn Arrays.asList(new Object[][] { \n\t\t    { \" \" }, \n\t\t    { \"     \" },\n\t\t    { \"12      34\" },\n\t\t    { \"12 asdfasdf\" }\n\t\t});\n\t}"} {"path":"downloaded/OpeningHoursService.java","method_name":"getOpeningHours","content":"/**\n     * @return null if the shop is closed on a given weekday\n     */\npublic Optional<DailyOpeningHours> getOpeningHours(LocalDateTime dateTime) {\n        return weekdays.get(dateTime.getDayOfWeek());\n    }"} {"path":"downloaded/OpeningHoursService.java","method_name":"isOpenAt","content":"/**\n     * @return null if the shop is closed on a given weekday\n     */\npublic boolean isOpenAt(LocalDateTime dateDateTime) {\n        return getOpeningHours(dateDateTime)\n            .filter(openingHours -> dateDateTime.toLocalTime().isAfter(openingHours.getOpeningHour()))\n            .filter(openingHours -> dateDateTime.toLocalTime().isBefore(openingHours.getClosingHour()))\n            .isPresent();\n    }"} {"path":"downloaded/Oracle4_RodCutting.java","method_name":"maxPrice","content":"/**\n\t * @param args\n\t */\nprivate static int maxPrice(int[] length, int[] price) \n\t{\n\t\tint[] val = new int[length.length+1];\n\t\tval[0] = 0;\n\t\t\n\t\tfor(int i=1; i<val.length; i++)\n\t\t{\n\t\t\tint maxval = Integer.MIN_VALUE;\n\t\t\tfor(int j=0; j<i; j++)\n\t\t\t{\n\t\t\t\tmaxval = Math.max(maxval, price[j] + val[i-j-1]);\n\t\t\t}\n\t\t\tval[i] = maxval;\n\t\t}\n\t\treturn val[val.length-1];\n\t}"} {"path":"downloaded/FusedLocationHardware.java","method_name":"registerSink","content":"/**\n     * @hide\n     */\npublic void registerSink(FusedLocationHardwareSink sink, Looper looper) {\n        if(sink == null || looper == null) {\n            throw new IllegalArgumentException(\"Parameter sink and looper cannot be null.\");\n        }\n\n        boolean registerSink;\n        synchronized (mSinkList) {\n            // register only on first insertion\n            registerSink = mSinkList.size() == 0;\n            // guarantee uniqueness\n            if(mSinkList.containsKey(sink)) {\n                return;\n            }\n\n            HashMap<FusedLocationHardwareSink, DispatcherHandler> newSinkList =\n                    new HashMap<FusedLocationHardwareSink, DispatcherHandler>(mSinkList);\n            newSinkList.put(sink, new DispatcherHandler(looper));\n            mSinkList = newSinkList;\n        }\n\n        if(registerSink) {\n            try {\n                mLocationHardware.registerSink(mInternalSink);\n            } catch(RemoteException e) {\n                Log.e(TAG, \"RemoteException at registerSink\");\n            }\n        }\n    }"} {"path":"downloaded/FusedLocationHardware.java","method_name":"unregisterSink","content":"/**\n     * @hide\n     */\npublic void unregisterSink(FusedLocationHardwareSink sink) {\n        if(sink == null) {\n            throw new IllegalArgumentException(\"Parameter sink cannot be null.\");\n        }\n\n        boolean unregisterSink;\n        synchronized(mSinkList) {\n            if(!mSinkList.containsKey(sink)) {\n                //done\n                return;\n            }\n\n            HashMap<FusedLocationHardwareSink, DispatcherHandler> newSinkList =\n                    new HashMap<FusedLocationHardwareSink, DispatcherHandler>(mSinkList);\n            newSinkList.remove(sink);\n            //unregister after the last sink\n            unregisterSink = newSinkList.size() == 0;\n\n            mSinkList = newSinkList;\n        }\n\n        if(unregisterSink) {\n            try {\n                mLocationHardware.unregisterSink(mInternalSink);\n            } catch(RemoteException e) {\n                Log.e(TAG, \"RemoteException at unregisterSink\");\n            }\n        }\n    }"} {"path":"downloaded/FusedLocationHardware.java","method_name":"getSupportedBatchSize","content":"/**\n     * @hide\n     */\npublic int getSupportedBatchSize() {\n        try {\n            return mLocationHardware.getSupportedBatchSize();\n        } catch(RemoteException e) {\n            Log.e(TAG, \"RemoteException at getSupportedBatchSize\");\n            return 0;\n        }\n    }"} {"path":"downloaded/FusedLocationHardware.java","method_name":"supportsDiagnosticDataInjection","content":"/**\n     * @hide\n     */\npublic boolean supportsDiagnosticDataInjection() {\n        try {\n            return mLocationHardware.supportsDiagnosticDataInjection();\n        } catch(RemoteException e) {\n            Log.e(TAG, \"RemoteException at supportsDiagnisticDataInjection\");\n            return false;\n        }\n    }"} {"path":"downloaded/FusedLocationHardware.java","method_name":"supportsDeviceContextInjection","content":"/**\n     * @hide\n     */\npublic boolean supportsDeviceContextInjection() {\n        try {\n            return mLocationHardware.supportsDeviceContextInjection();\n        } catch(RemoteException e) {\n            Log.e(TAG, \"RemoteException at supportsDeviceContextInjection\");\n            return false;\n        }\n    }"} {"path":"downloaded/FusedLocationHardware.java","method_name":"getVersion","content":"/**\n     * Returns the version of the FLP HAL.\n     *\n     * <p>Version 1 is the initial release.\n     * <p>Version 2 adds the ability to use {@link #flushBatchedLocations},\n     * {@link FusedLocationHardwareSink#onCapabilities}, and\n     * {@link FusedLocationHardwareSink#onStatusChanged}.\n     *\n     * <p>This method is only available on API 23 or later.  Older APIs have version 1.\n     */\npublic int getVersion() {\n        try {\n            return mLocationHardware.getVersion();\n        } catch(RemoteException e) {\n            Log.e(TAG, \"RemoteException at getVersion\");\n        }\n        return 1;\n    }"} {"path":"downloaded/SharedSecret.java","method_name":"generateShared","content":"/**\n\t * Generate shared secret\n\t * \n\t * @param data ECDH public key from browser\n\t * @param key ECDH server private key\n\t * @return 32 byte (256bit) master key used for AES\n\t * @throws DecoderException \n\t */\npublic static Aes generateShared(final String data, final PrivateKey key) throws DecoderException, IOException{\n\t\tfinal byte[] aesData = SharedSecret.generate(data, key);\n\t\treturn new Aes(aesData);\n\t}"} {"path":"downloaded/SharedSecret.java","method_name":"generate","content":"/**\n\t * Generate shared secret\n\t * \n\t * @param data ECDH public key from browser\n\t * @param key ECDH server private key\n\t * @return 32 byte (256bit) master key used for AES\n\t * @throws DecoderException \n\t */\npublic static byte[] generate(final String data, final PrivateKey key) throws DecoderException {\n\t\tfinal Decoder base64 = Base64.getDecoder();\n\t\tbyte[] bin = base64.decode(data);\n\t\treturn generate(bin, key);\n\t}"} {"path":"downloaded/SharedSecret.java","method_name":"generate","content":"/**\n\t * Decrypt data with private key and given mode\n\t * \n\t * @param buffer\n\t * @param key\n\t * @param mode\n\t * @return\n\t */\nprivate static byte[] generate(final byte[] buffer, final PrivateKey key) {\n\n\t\tbyte[] data = null;\n\n\t\ttry {\n\t\t\tfinal X509EncodedKeySpec spec = new X509EncodedKeySpec(buffer);\n\t\t\tfinal KeyFactory kf = getKeyFactory();\n\t\t\tfinal PublicKey pk = kf.generatePublic(spec);\n\t\t\tdata = SharedSecret.doKeyExchange(key, pk);\n\t\t} catch (Exception e) {\n\t\t\tfinal String msg = Utils.toMessage(e);\n\t\t\tLOG.error(msg);\n\t\t\tLOG.debug(msg, e);\n\t\t\tdata = new byte[0];\n\t\t}\n\n\t\treturn data;\n\t}"} {"path":"downloaded/SharedSecret.java","method_name":"flatten","content":"/**\n\t * Decrypt data with private key and given mode\n\t * \n\t * @param buffer\n\t * @param key\n\t * @param mode\n\t * @return\n\t */\nstatic String flatten(final KeyPair keyPair) {\n\t\tfinal ECPublicKey eckey = (ECPublicKey) keyPair.getPublic();\n\t\treturn Hex.toHexString(eckey.getQ().getEncoded(true));\n\t}"} {"path":"downloaded/ClientProxy.java","method_name":"public vo","content":"/**\n     * 实体缓存，在客户端会大量运用实体\n);\n    }\n\n    @Override\n    public void postInit(FMLPostInitializationEvent event) {\n        super.postInit(event);\n"} {"path":"downloaded/31_1800a2afd8f4a63864b61e1d634f317e5baca2ad_MorcFactory_t.java","method_name":"getInstance","content":"/**\n \t * \n \t */\npublic static MorcFactory getInstance() {\n \t\tassert (instance != null);\n \t\treturn instance;\n \t}"} {"path":"downloaded/31_1800a2afd8f4a63864b61e1d634f317e5baca2ad_MorcFactory_t.java","method_name":"getEnabled","content":"/**\n \t * \n \t */\n@Override\n \tpublic boolean getEnabled() {\n \t\treturn enabled;\n \t}"} {"path":"downloaded/31_1800a2afd8f4a63864b61e1d634f317e5baca2ad_MorcFactory_t.java","method_name":"getSourceName","content":"/**\n \t * \n \t */\n@Override\n \tpublic String getSourceName() {\n \t\treturn SOURCE_NAME;\n \t}"} {"path":"downloaded/31_1800a2afd8f4a63864b61e1d634f317e5baca2ad_MorcFactory_t.java","method_name":"getDefaultComposeUrl","content":"/**\n \t * \n \t */\n@Override\n \tpublic String getDefaultComposeUrl() {\n \t\treturn null;\n \t}"} {"path":"downloaded/31_1800a2afd8f4a63864b61e1d634f317e5baca2ad_MorcFactory_t.java","method_name":"getDefaultRequestUrl","content":"/**\n \t * \n \t */\n@Override\n \tpublic String getDefaultRequestUrl() {\n \t\treturn null;\n \t}"} {"path":"downloaded/31_1800a2afd8f4a63864b61e1d634f317e5baca2ad_MorcFactory_t.java","method_name":"getReportRetriever","content":"/**\n \t * \n \t */\n@Override\n \tpublic IReportRetriever getReportRetriever() {\n \t\treturn retriever;\n \t}"} {"path":"downloaded/31_1800a2afd8f4a63864b61e1d634f317e5baca2ad_MorcFactory_t.java","method_name":"getSourceSpecificXmlKey","content":"/**\n \t * \n \t */\n@Override\n \tpublic String getSourceSpecificXmlKey() {\n \t\treturn XML_TAG;\n \t}"} {"path":"downloaded/31_1800a2afd8f4a63864b61e1d634f317e5baca2ad_MorcFactory_t.java","method_name":"getSourceSpecificParser","content":"/**\n \t * \n \t */\n@Override\n \tpublic ISourceSpecificInfoParser getSourceSpecificParser() {\n \t\treturn parser;\n \t}"} {"path":"downloaded/31_1800a2afd8f4a63864b61e1d634f317e5baca2ad_MorcFactory_t.java","method_name":"getTrailInfoPool","content":"/**\n \t * \n \t */\npublic MorcInfoPool getTrailInfoPool() {\n \t\treturn pool;\n \t}"} {"path":"downloaded/31_1800a2afd8f4a63864b61e1d634f317e5baca2ad_MorcFactory_t.java","method_name":"getRegionManager","content":"/**\n \t * \n \t */\npublic RegionManager getRegionManager() {\n \t\treturn regions;\n \t}"} {"path":"downloaded/31_1800a2afd8f4a63864b61e1d634f317e5baca2ad_MorcFactory_t.java","method_name":"getUserSettingsSource","content":"/**\n \t * @return\n \t */\npublic IUserSettingsSource getUserSettingsSource() {\n \t\treturn null;\n \t}"} {"path":"downloaded/31_1800a2afd8f4a63864b61e1d634f317e5baca2ad_MorcFactory_t.java","method_name":"getAllReportsInfo","content":"/**\n \t * @return\n \t */\npublic TrailInfo getAllReportsInfo() {\n \t\treturn singleReportInfo;\n \t}"} {"path":"downloaded/31_1800a2afd8f4a63864b61e1d634f317e5baca2ad_MorcFactory_t.java","method_name":"getAllReportsDate","content":"/**\n \t * @return\n \t */\npublic Date getAllReportsDate() {\n\t\treturn singleReportDate;\n\t}"} {"path":"downloaded/cuartoPunto.java","method_name":"valorMin","content":"/**\n\t * @param args\n\t * @throws IOException \n\t */\npublic static int valorMin() \n\t{\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor (int i = 0; i < arreglo.length;i++) \n\t\t{\n\t\t\tif (Integer.parseInt(arreglo[i]) < min) \n\t\t\t{\n\t\t\t\tmin = Integer.parseInt(arreglo[i]);\n\t\t\t\tPosicionMin = i;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn min;\n\t}"} {"path":"downloaded/cuartoPunto.java","method_name":"valorMax","content":"/**\n\t * @param args\n\t * @throws IOException \n\t */\npublic static int valorMax() {\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor (int i = PosicionMin; i < arreglo.length;i++) \n\t\t{\n\t\t\tif (Integer.parseInt(arreglo[i]) > max) \n\t\t\t{\n\t\t\t\tmax = Integer.parseInt(arreglo[i]);\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}"} {"path":"downloaded/FileQueryOptions.java","method_name":"getExpression","content":"/**\n     * Gets the query expression.\n     *\n     * @return the query expression.\n     */\npublic String getExpression() {\n        return expression;\n    }"} {"path":"downloaded/FileQueryOptions.java","method_name":"getOutputStream","content":"/**\n     * Gets the outputStream where the downloaded data will be written.\n     *\n     * @return the outputStream.\n     */\npublic OutputStream getOutputStream() {\n        return this.outputStream;\n    }"} {"path":"downloaded/FileQueryOptions.java","method_name":"getInputSerialization","content":"/**\n     * Gets the input serialization.\n     *\n     * @return the input serialization.\n     */\npublic FileQuerySerialization getInputSerialization() {\n        return inputSerialization;\n    }"} {"path":"downloaded/FileQueryOptions.java","method_name":"setInputSerialization","content":"/**\n     * Sets the input serialization.\n     *\n     * @param inputSerialization The input serialization.\n     * @return the updated FileQueryOptions object.\n     */\npublic FileQueryOptions setInputSerialization(FileQuerySerialization inputSerialization) {\n        this.inputSerialization = inputSerialization;\n        return this;\n    }"} {"path":"downloaded/FileQueryOptions.java","method_name":"getOutputSerialization","content":"/**\n     * Gets the output serialization.\n     *\n     * @return the output serialization.\n     */\npublic FileQuerySerialization getOutputSerialization() {\n        return outputSerialization;\n    }"} {"path":"downloaded/FileQueryOptions.java","method_name":"setOutputSerialization","content":"/**\n     * Sets the output serialization.\n     *\n     * @param outputSerialization The output serialization.\n     * @return the updated FileQueryOptions object.\n     */\npublic FileQueryOptions setOutputSerialization(FileQuerySerialization outputSerialization) {\n        this.outputSerialization = outputSerialization;\n        return this;\n    }"} {"path":"downloaded/FileQueryOptions.java","method_name":"getRequestConditions","content":"/**\n     * Gets the request conditions.\n     *\n     * @return the request conditions.\n     */\npublic DataLakeRequestConditions getRequestConditions() {\n        return requestConditions;\n    }"} {"path":"downloaded/FileQueryOptions.java","method_name":"setRequestConditions","content":"/**\n     * Sets the request conditions.\n     *\n     * @param requestConditions The request conditions.\n     * @return the updated FileQueryOptions object.\n     */\npublic FileQueryOptions setRequestConditions(DataLakeRequestConditions requestConditions) {\n        this.requestConditions = requestConditions;\n        return this;\n    }"} {"path":"downloaded/FileQueryOptions.java","method_name":"getErrorConsumer","content":"/**\n     * Gets the error consumer.\n     *\n     * @return the error consumer.\n     */\npublic Consumer<FileQueryError> getErrorConsumer() {\n        return errorConsumer;\n    }"} {"path":"downloaded/FileQueryOptions.java","method_name":"setErrorConsumer","content":"/**\n     * Sets the error consumer.\n     *\n     * @param errorConsumer The error consumer.\n     * @return the updated FileQueryOptions object.\n     */\npublic FileQueryOptions setErrorConsumer(Consumer<FileQueryError> errorConsumer) {\n        this.errorConsumer = errorConsumer;\n        return this;\n    }"} {"path":"downloaded/FileQueryOptions.java","method_name":"getProgressConsumer","content":"/**\n     * Gets the progress consumer.\n     *\n     * @return the progress consumer.\n     */\npublic Consumer<FileQueryProgress> getProgressConsumer() {\n        return progressConsumer;\n    }"} {"path":"downloaded/FileQueryOptions.java","method_name":"setProgressConsumer","content":"/**\n     * Sets the progress consumer.\n     *\n     * @param progressConsumer The progress consumer.\n     * @return the updated FileQueryOptions object.\n     */\npublic FileQueryOptions setProgressConsumer(Consumer<FileQueryProgress> progressConsumer) {\n        this.progressConsumer = progressConsumer;\n        return this;\n    }"} {"path":"downloaded/Veiculo.java","method_name":"getMarca","content":"/**\n\t * \n\t */\npublic String getMarca() {\n\t\treturn marca;\n\t}"} {"path":"downloaded/Veiculo.java","method_name":"getModelo","content":"/**\n\t * \n\t */\npublic String getModelo() {\n\t\treturn modelo;\n\t}"} {"path":"downloaded/Veiculo.java","method_name":"getAnoFabricacao","content":"/**\n\t * \n\t */\npublic int getAnoFabricacao() {\n\t\treturn anoFabricacao;\n\t}"} {"path":"downloaded/Veiculo.java","method_name":"getAnoModelo","content":"/**\n\t * \n\t */\npublic int getAnoModelo() {\n\t\treturn anoModelo;\n\t}"} {"path":"downloaded/Veiculo.java","method_name":"getCor","content":"/**\n\t * \n\t */\npublic String getCor() {\n\t\treturn cor;\n\t}"} {"path":"downloaded/Veiculo.java","method_name":"getCategoria","content":"/**\n\t * \n\t */\npublic String getCategoria() {\n\t\treturn categoria;\n\t}"} {"path":"downloaded/Veiculo.java","method_name":"getPlaca","content":"/**\n\t * \n\t */\npublic String getPlaca() {\n\t\treturn placa;\n\t}"} {"path":"downloaded/Veiculo.java","method_name":"getRenavam","content":"/**\n\t * \n\t */\npublic String getRenavam() {\n\t\treturn renavam;\n\t}"} {"path":"downloaded/Veiculo.java","method_name":"getTipoCombustivel","content":"/**\n\t * \n\t */\npublic String getTipoCombustivel() {\n\t\treturn tipoCombustivel;\n\t}"} {"path":"downloaded/T1.java","method_name":"uplicados.\n    ","content":"\n    /**\n     * Método construtor.\n     * \n     * @param n int - Corresponde ao número de repetições.\n     * \n     * @param s int - Corresponde ao número de segmentos.\n     * \n     * @param r int - Corresponde ao raio do circulo.\n     * \n     * @param x0 int - Corresponde à coordenada x do ponto inicial.\n     * \n     * @param y0 int - Corresponde à coordenada y do ponto inicial.\n     * \n     * @param steps int - Corresponde ao número de iterações desejadas para a\n     * animação.\n     * \n     * @param time int - Corresponde ao sustain desejado para a \número de pontos duplicados.\n     */\n    public static int removeDuplicate()\n    {   \n        int count = 0;\n        \n        Point elected;\n        for (int i=0; i<points.size()-1; i++)\n        {   elected = points.get(i);\n            for (int j=i+1; j<points.size(); j++)\n                if (elected.getX()==points.get(j).getX() && elected.getY()==points.get(j).getY())\n                {   count++;\n                    points.remove(j);\n                }\n     "} {"path":"downloaded/T1.java","method_name":"�ão.\n   ","content":"\n    /**\n     * Método construtor.\n     * \n     * @param n int - Corresponde ao número de repetições.\n     * \n     * @param s int - Corresponde ao número de segmentos.\n     * \n     * @param r int - Corresponde ao raio do circulo.\n     * \n     * @param x0 int - Corresponde à coordenada x do ponto inicial.\n     * \n     * @param y0 int - Corresponde à coordenada y do ponto inicial.\n     * \n     * @param steps int - Corresponde ao número de iterações desejadas para a\n     * animação.\n     * \n     * @param time int - Corresponde ao sustain desejado para a \nntos usada\n     * para a animação.\n     */\n    public static ArrayList<Point> printRoad(Graphics2D g2d)\n    {   \n        int count, countSection, section = points.size()/s, prox = 0;\n        ArrayList<Point> segments = new ArrayList<>();\n        \n        // Desenho do caminho\n        for (int i=0; i<n; i++)\n        {   count = 0;\n            countSection = 0;\n            for (int j=0; j<points.size(); j++)\n            {   g2d.fillOval(points.get(j).getX()+prox, points.get(j).getY(), 1, 1);\n                if ((count == section && countSection < s) || count == 0)\n                {   segments.add(new Point(points.get(j).getX()+prox, points.get(j).getY()));\n                    count = 0;\n                    countSection++;                    \n                }\n                count++;                \n            }\n            prox = prox + 2 * r;\n        }\n        segments.add(new Point (points.get(0).getX()+prox, points.get(0).getY()));\n        \n        // Desenho dos segmentos\n        for (int i=0; i<segments.size(); i++)\n            g2d.fillOval(segments.get(i).getX(), segments.get(i).getY("} {"path":"downloaded/T1.java","method_name":"o \n     * final.\n    ","content":"\n    /**\n     * Método construtor.\n     * \n     * @param n int - Corresponde ao número de repetições.\n     * \n     * @param s int - Corresponde ao número de segmentos.\n     * \n     * @param r int - Corresponde ao raio do circulo.\n     * \n     * @param x0 int - Corresponde à coordenada x do ponto inicial.\n     * \n     * @param y0 int - Corresponde à coordenada y do ponto inicial.\n     * \n     * @param steps int - Corresponde ao número de iterações desejadas para a\n     * animação.\n     * \n     * @param time int - Corresponde ao sustain desejado para a \nao resultado da transformação \n     * final.\n     */\n    public static AffineTransform scaleWithoutTranslate(double x, double y, double xs, double ys)\n    {   \n        AffineTransform at = new AffineTransform();\n\n        at.translate(x,y);\n        at.scale(xs,"} {"path":"downloaded/T1.java","method_name":"onde à matriz da","content":"\n    /**\n     * Método construtor.\n     * \n     * @param n int - Corresponde ao número de repetições.\n     * \n     * @param s int - Corresponde ao número de segmentos.\n     * \n     * @param r int - Corresponde ao raio do circulo.\n     * \n     * @param x0 int - Corresponde à coordenada x do ponto inicial.\n     * \n     * @param y0 int - Corresponde à coordenada y do ponto inicial.\n     * \n     * @param steps int - Corresponde ao número de iterações desejadas para a\n     * animação.\n     * \n     * @param time int - Corresponde ao sustain desejado para a \nturn double[] - Corresponde à matriz da transformação convexa.\n     */\n    public static double[] convexCombination(double[] a, double[] b, double alpha)\n    {   \n        double[] result = new double[a.length];\n\n        for (int i=0; i<result.length; i++)\n  "} {"path":"downloaded/AbstractPaletteEntryTest.java","method_name":"getWizardWindowTitle","content":"/**\n\t * Override or modify if wizard window title will be different. \n\t * @return\n\t */\nprotected String getWizardWindowTitle() {\n\t\treturn DropWizardMessages.Wizard_Window_Title;\n\t}"} {"path":"downloaded/AbstractPaletteEntryTest.java","method_name":"getPaletteViewer","content":"/**\n\t * Override or modify if wizard window title will be different. \n\t * @return\n\t */\npublic PaletteViewer getPaletteViewer() {\n\t\tIWorkbenchPage page = WebUiPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();\n\t\t\n\t\tIViewPart view = page.findView(\"org.eclipse.gef.ui.palette_view\");\n\n\t\tif(view == null) {\n\t\t\ttry {\n\t\t\t\tview = page.showView(\"org.eclipse.gef.ui.palette_view\");\n\t\t\t} catch(PartInitException e) {\n\t\t\t\t fail(\"cannot open palette: \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t\tassertTrue(view instanceof PaletteView);\n\t\tPaletteView palette = (PaletteView)view;\n\t\tIPage viewPage = palette.getCurrentPage();\n\t\tassertTrue(viewPage instanceof PalettePageImpl);\n\t\tPalettePageImpl palettePage = (PalettePageImpl)viewPage;\n\t\tPaletteAdapter adapter = (PaletteAdapter)palettePage.getAdapter();\n\t\treturn adapter.getViewer();\n\t}"} {"path":"downloaded/AbstractPaletteEntryTest.java","method_name":"findEntry","content":"/**\n\t * Override or modify if wizard window title will be different. \n\t * @return\n\t */\npublic ToolEntry findEntry(PaletteViewer viewer, String category, String entry) {\n\t\tPaletteRoot root = viewer.getPaletteRoot();\n\t\tList<?> l = root.getChildren();\n\t\tfor (Object o: l) {\n\t\t\tPaletteDrawer d = (PaletteDrawer)o;\n\t\t\tif(category.equals(d.getLabel())) {\n\t\t\t\tList<?> l2 = d.getChildren();\n\t\t\t\tfor (Object o2: l2) {\n\t\t\t\t\tif(o2 instanceof ToolEntry) {\n\t\t\t\t\t\tToolEntry t = (ToolEntry)o2;\n//\t\t\t\t\t\tSystem.out.println(\"-->\" + t.getLabel());\n\t\t\t\t\t\tif(entry.equals(t.getLabel())) {\n\t\t\t\t\t\t\treturn t;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}"} {"path":"downloaded/AbstractPaletteEntryTest.java","method_name":"getInsertedText","content":"/**\n\t * Override or modify if wizard window title will be different. \n\t * @return\n\t */\nprotected String getInsertedText() {\n\t\tString content = textEditor.getDocumentProvider().getDocument(textEditor.getEditorInput()).get();\n\t\tint b = content.indexOf(getInsertAfterText()) + getInsertAfterText().length();\n\t\tint e = content.indexOf(getInsertBeforeText());\n\t\treturn content.substring(b, e);\n\t}"} {"path":"downloaded/AbstractPaletteEntryTest.java","method_name":"isSameHTML","content":"/**\n\t * Override or modify if wizard window title will be different. \n\t * @return\n\t */\nprotected boolean isSameHTML(String s1, String s2) {\n\t\treturn removeWhiteSpaces(s1).equals(removeWhiteSpaces(s2));\n\t}"} {"path":"downloaded/AbstractPaletteEntryTest.java","method_name":"removeWhiteSpaces","content":"/**\n\t * Override or modify if wizard window title will be different. \n\t * @return\n\t */\nprotected String removeWhiteSpaces(String s) {\n\t\tboolean insideTag = false;\n\t\tboolean quota = false;\n\t\tint whitespaces = 0;\n\t\tboolean beginning = true;\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tchar c = s.charAt(i);\n\t\t\tif(!quota && Character.isWhitespace(c)) {\n\t\t\t\tif(!beginning) {\n\t\t\t\t\twhitespaces++;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(!quota && c == '=' && insideTag) {\n\t\t\t\twhitespaces = 0;\n\t\t\t\tbeginning = true;\n\t\t\t}\n\t\t\tif(!quota && c == '<') {\n\t\t\t\tinsideTag = true;\n\t\t\t\twhitespaces = 0;\n\t\t\t}\n\t\t\tif(!quota && c == '>') {\n\t\t\t\tinsideTag = false;\n\t\t\t\tbeginning = true;\n\t\t\t} else if(!Character.isWhitespace(c)) {\n\t\t\t\tbeginning = false;\n\t\t\t}\n\t\t\tif(insideTag) {\n\t\t\t\tif(c == '\"') quota = !quota;\n\t\t\t\tif(quota) whitespaces = 0;\n\t\t\t}\n\t\t\tif(!quota && !Character.isWhitespace(c) && whitespaces > 0) {\n\t\t\t\tsb.append(' ');\n\t\t\t\twhitespaces = 0;\n\t\t\t}\n\t\t\tsb.append(c);\n\t\t}\n\t\treturn sb.toString();\n\t}"} {"path":"downloaded/DataIn.java","method_name":"getA","content":"/**\n   *  Returneaza extremitatea inferioara a intervalului de integrare.\n   */\npublic double getA(){\n    return a;\n  }"} {"path":"downloaded/DataIn.java","method_name":"getB","content":"/**\n   *  Returneaza extremitatea superioara a intervalului de integrare.\n   */\npublic double getB(){\n    return b;\n  }"} {"path":"downloaded/DataIn.java","method_name":"getEps","content":"/**\n   *  Returneaza toleranta.\n   */\npublic double getEps(){\n    return eps;\n  }"} {"path":"downloaded/DataIn.java","method_name":"getNmi","content":"/**\n   *  Returneaza numarul maxim admis de iteratii.\n   */\npublic int getNmi(){\n    return nmi;\n  }"} {"path":"downloaded/_936.java","method_name":"movesToStamp","content":"/**\n         * credit: https://leetcode.com/problems/stamping-the-sequence/discuss/201546/12ms-Java-Solution-Beats-100\n         * <p>\n         * Think reversely!\n         * How to change target to ****?!\n         */\npublic int[] movesToStamp(String stamp, String target) {\n            List<Integer> moves = new ArrayList<>();\n            char[] s = stamp.toCharArray();\n            char[] t = target.toCharArray();\n            int stars = 0;\n            boolean[] visited = new boolean[target.length()];\n            while (stars < target.length()) {\n                boolean doneReplace = false;\n                for (int i = 0; i <= target.length() - stamp.length(); i++) {\n                    if (!visited[i] && canReplace(t, i, s)) {\n                        stars = doReplace(t, i, s, stars);\n                        doneReplace = true;\n                        visited[i] = true;\n                        moves.add(i);\n                        if (stars == t.length) {\n                            break;\n                        }\n                    }\n                }\n                if (!doneReplace) {\n                    return new int[0];\n                }\n            }\n\n            int[] result = new int[moves.size()];\n            for (int i = 0; i < moves.size(); i++) {\n                result[i] = moves.get(moves.size() - i - 1);\n            }\n            return result;\n        }"} {"path":"downloaded/_936.java","method_name":"canReplace","content":"/**\n         * credit: https://leetcode.com/problems/stamping-the-sequence/discuss/201546/12ms-Java-Solution-Beats-100\n         * <p>\n         * Think reversely!\n         * How to change target to ****?!\n         */\nprivate boolean canReplace(char[] t, int i, char[] s) {\n            for (int j = 0; j < s.length; j++) {\n                if (t[i + j] != '*' && t[i + j] != s[j]) {\n                    return false;\n                }\n            }\n            return true;\n        }"} {"path":"downloaded/_936.java","method_name":"doReplace","content":"/**\n         * credit: https://leetcode.com/problems/stamping-the-sequence/discuss/201546/12ms-Java-Solution-Beats-100\n         * <p>\n         * Think reversely!\n         * How to change target to ****?!\n         */\nprivate int doReplace(char[] t, int i, char[] s, int stars) {\n            for (int j = 0; j < s.length; j++) {\n                if (t[i + j] != '*') {\n                    t[i + j] = '*';\n                    stars++;\n                }\n            }\n            return stars;\n        }"} {"path":"downloaded/S1948App.java","method_name":"getField3","content":"/** Setter injection */\npublic CdiManagedBean getField3() {\n        return field3;\n    }"} {"path":"downloaded/ExportCSV.java","method_name":"getExtension","content":"/**\n\t *\n\t * @return\n\t */\n@Override\n\tpublic String getExtension() {\n\t\treturn \"csv\";\n\t}"} {"path":"downloaded/ExportCSV.java","method_name":"getExtensionDescription","content":"/**\n\t *\n\t * @return\n\t */\n@Override\n\tpublic String getExtensionDescription() {\n\t\treturn \"CSV Documents (*.csv)\";\n\t}"} {"path":"downloaded/ExportCSV.java","method_name":"getExtensionFilter","content":"/**\n\t *\n\t * @return\n\t */\n@Override\n\tpublic FileNameExtensionFilter getExtensionFilter() {\n\t\treturn new FileNameExtensionFilter(this.getExtensionDescription(), this.\n\t\t\t\t\t\t\t\t\t\t   getExtension());\n\t}"} {"path":"downloaded/ExportCSV.java","method_name":"export","content":"/**\n\t *\n\t * @param data\n\t * @return\n\t */\npublic String export(Object data) {\n\t\tList<String[]> dataList = (List<String[]>) data;\n\t\tif (dataList != null) {\n\t\t\tStringBuilder stringBuilderFinal = new StringBuilder();\n\t\t\tfor (String[] line : dataList) {\n\t\t\t\tStringBuilder stringBuilder = new StringBuilder();\n\t\t\t\tfor (String column : line) {\n\t\t\t\t\tstringBuilder.append(\";\");\n\t\t\t\t\tstringBuilder.append(column);\n\t\t\t\t}\n\t\t\t\tstringBuilderFinal.append(stringBuilder.toString().substring(1));\n\t\t\t\tstringBuilderFinal.append(\"\\n\");\n\t\t\t}\n\t\t\treturn stringBuilderFinal.toString();\n\t\t}\n\t\tError.\n\t\t\tsetErrorMessage(\"Could not export to CSV because the conversion Object to List<String[]> failed.\");\n\t\treturn null;\n\t}"} {"path":"downloaded/ClientGroup.java","method_name":"getId","content":"/**\n\t * \n\t */\n@Override\n\tpublic Long getId() {\n\t\treturn groupId;\n\t}"} {"path":"downloaded/ClientGroup.java","method_name":"getGroupId","content":"/**\n\t * \n\t */\npublic long getGroupId() {\n\t\treturn groupId;\n\t}"} {"path":"downloaded/ClientGroup.java","method_name":"getPriParentEmail","content":"/**\n\t * \n\t */\npublic String getPriParentEmail() {\n\t\treturn priParentEmail;\n\t}"} {"path":"downloaded/ClientGroup.java","method_name":"getSecParentEmail","content":"/**\n\t * \n\t */\npublic String getSecParentEmail() {\n\t\treturn secParentEmail;\n\t}"} {"path":"downloaded/ClientGroup.java","method_name":"getPriParentContactNo","content":"/**\n\t * \n\t */\npublic String getPriParentContactNo() {\n\t\treturn priParentContactNo;\n\t}"} {"path":"downloaded/ClientGroup.java","method_name":"getSecParentContactNo","content":"/**\n\t * \n\t */\npublic String getSecParentContactNo() {\n\t\treturn secParentContactNo;\n\t}"} {"path":"downloaded/ClientGroup.java","method_name":"getClientInfo","content":"/**\n\t * \n\t */\npublic List<ClientInfo> getClientInfo() {\n\t\treturn clientInfo;\n\t}"} {"path":"downloaded/ListContainerAppsRequest.java","method_name":"build","content":"/**\n     * <p>The number of entries to return on each page. Valid values: 1 to 50.</p>\n     * <br>\n     * <p>Default value: 10.</p>\n     */\npublic static ListContainerAppsRequest build(java.util.Map<String, ?> map) throws Exception {\n        ListContainerAppsRequest self = new ListContainerAppsRequest();\n        return TeaModel.build(map, self);\n    }"} {"path":"downloaded/ListContainerAppsRequest.java","method_name":"setPageNumber","content":"/**\n     * <p>The number of entries to return on each page. Valid values: 1 to 50.</p>\n     * <br>\n     * <p>Default value: 10.</p>\n     */\npublic ListContainerAppsRequest setPageNumber(Integer pageNumber) {\n        this.pageNumber = pageNumber;\n        return this;\n    }"} {"path":"downloaded/ListContainerAppsRequest.java","method_name":"getPageNumber","content":"/**\n     * <p>The number of entries to return on each page. Valid values: 1 to 50.</p>\n     * <br>\n     * <p>Default value: 10.</p>\n     */\npublic Integer getPageNumber() {\n        return this.pageNumber;\n    }"} {"path":"downloaded/ListContainerAppsRequest.java","method_name":"setPageSize","content":"/**\n     * <p>The number of entries to return on each page. Valid values: 1 to 50.</p>\n     * <br>\n     * <p>Default value: 10.</p>\n     */\npublic ListContainerAppsRequest setPageSize(Integer pageSize) {\n        this.pageSize = pageSize;\n        return this;\n    }"} {"path":"downloaded/ListContainerAppsRequest.java","method_name":"getPageSize","content":"/**\n     * <p>The number of entries to return on each page. Valid values: 1 to 50.</p>\n     * <br>\n     * <p>Default value: 10.</p>\n     */\npublic Integer getPageSize() {\n        return this.pageSize;\n    }"} {"path":"downloaded/PaymentXml.java","method_name":"getAccount","content":"/**\n     * Gets the value of the account property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\npublic String getAccount() {\n        return account;\n    }"} {"path":"downloaded/PaymentXml.java","method_name":"getCurrentNumber","content":"/**\n     * Gets the value of the currentNumber property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\npublic String getCurrentNumber() {\n        return currentNumber;\n    }"} {"path":"downloaded/PaymentXml.java","method_name":"getAutomaticNumber","content":"/**\n     * Gets the value of the automaticNumber property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\npublic String getAutomaticNumber() {\n        return automaticNumber;\n    }"} {"path":"downloaded/PaymentXml.java","method_name":"getShowEntry","content":"/**\n     * Gets the value of the showEntry property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\npublic String getShowEntry() {\n        return showEntry;\n    }"} {"path":"downloaded/PaymentXml.java","method_name":"getSign","content":"/**\n     * Gets the value of the sign property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\npublic String getSign() {\n        return sign;\n    }"} {"path":"downloaded/PaymentXml.java","method_name":"getName","content":"/**\n     * Gets the value of the name property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\npublic String getName() {\n        return name;\n    }"} {"path":"downloaded/PaymentXml.java","method_name":"getNumber","content":"/**\n     * Gets the value of the number property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\npublic String getNumber() {\n        return number;\n    }"} {"path":"downloaded/ImageUtils.java","method_name":" public stati","content":"/**\n     * 转换图片成圆形\n     *\n     * @param bitmap 传入Bitmap对象\n\n* @return\n     */\n    public static Bitmap toRoundBitmap(Bitmap bitmap) {\n        int width = bitmap.getWidth();\n        int height = bitmap.getHeight();\n        float roundPx;\n        float left, top, right, bottom, dst_left, dst_top, dst_right, dst_bottom;\n        if (width <= height) {\n            roundPx = width / 2;\n            top = 0;\n            bottom = width;\n            left = 0;\n            right = width;\n            height = width;\n            dst_left = 0;\n            dst_top = 0;\n            dst_right = width;\n            dst_bottom = width;\n        } else {\n            roundPx = height / 2;\n            float clip = (width - height) / 2;\n            left = clip;\n            right = width - clip;\n            top = 0;\n            bottom = height;\n            width = height;\n            dst_left = 0;\n            dst_top = 0;\n            dst_right = height;\n            dst_bottom = height;\n        }\n        Bitmap output = Bitmap.createBitmap(width, height, Config.ARGB_8888);\n        Canvas canvas = new Canvas(output);\n        final int color = 0xff424242;\n        final Paint paint = new Paint();\n        final Rect src = new Rect((int) left, (int) top, (int) right, (int) bottom);\n        final Rect dst = new Rect((int) dst_left, (int) dst_top, (int) dst_right, (int) dst_bottom);\n        final RectF rectF = new RectF(dst);\n        paint.setAntiAlias(true);\n        canvas.drawARGB(0, 0, 0, 0);\n        paint.setColor(color);\n        canvas.drawRoundRect(rectF, roundPx, roundPx, paint);\n        paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));\n        canvas.drawBitmap(bitmap, src, dst, paint);\n      "} {"path":"downloaded/ImageUtils.java","method_name":"    public stati","content":"/**\n     * 转换图片成圆形\n     *\n     * @param bitmap 传入Bitmap对象\n\nn output;\n    }\n\n\n    public static int getClassImgIndex(String strIndex) {\n        int index = 0;\n        if (!TextUtils.isEmpty(strIndex)) {\n            if (strIndex.equals(\"1\")) {\n                index = R.mipmap.bg_class_one;\n            } else if (strIndex.equals(\"2\")) {\n                index = R.mipmap.bg_class_two;\n            } else if (strIndex.equals(\"3\")) {\n                index = R.mipmap.bg_class_three;\n            } else if (strIndex.equals(\"4\")) {\n                index = R.mipmap.bg_class_four;\n            } else if (strIndex.equals(\"5\")) {\n                index = R.mipmap.bg_class_five;\n            } else if (strIndex.equals(\"6\")) {\n                index = R.mipmap.bg_class_six;\n            } else if (strIndex.equals(\"7\")) {\n                index = R.mipmap.bg_class_seven;\n            } else if (strIndex.equals(\"8\")) {\n                index = R.mipmap.bg_class_eight;\n            } else if (strIndex.equals(\"9\")) {\n                index = R.mipmap.bg_class_nine;\n            } else if (strIndex.equals(\"10\")) {\n                index = R.mipmap.bg_class_ten;\n            } else if (strIndex.equals(\"11\")) {\n                index = R.mipmap.bg_class_eleven;\n            }\n        }\n\n      "} {"path":"downloaded/ConditionalSelectorImpl.java","method_name":"getSelectorType","content":"/** An integer indicating the type of <code>Selector</code> */\npublic short getSelectorType() {\n    return Selector.SAC_CONDITIONAL_SELECTOR;\n  }"} {"path":"downloaded/ConditionalSelectorImpl.java","method_name":"getSimpleSelector","content":"/**\n   * Returns the simple selector.\n   *\n   * <p>The simple selector can't be a <code>ConditionalSelector</code>.\n   */\npublic SimpleSelector getSimpleSelector() {\n    return simpleSelector;\n  }"} {"path":"downloaded/ConditionalSelectorImpl.java","method_name":"getCondition","content":"/** Returns the condition to be applied on the simple selector. */\npublic Condition getCondition() {\n    return condition;\n  }"} {"path":"downloaded/Settlement.java","method_name":"ng ta","content":"\n\t/**\n\t *  金额\n\t */\n\tprivate Double auomnt;\n\t\n\t/*\n\n\t@Transient\n\tpublic String taskName;\n\n\t@Transient\n\tpub"} {"path":"downloaded/Settlement.java","method_name":"ttribeName;\n\t\n\t\n\n","content":"\n\t/**\n\t *  金额\n\t */\n\tprivate Double auomnt;\n\t\n\t/*\nsient\n\tpublic String attribeName;\n\t\n\t\n\n\t@Override\n\tpublic Object getId("} {"path":"downloaded/Settlement.java","method_name":"\n\t * @par","content":"\n\t/**\n\t *  金额\n\t */\n\tprivate Double auomnt;\n\t\n\t/*\nItem;\n\t}\n\n\t/**\n\t * @param settlementItem the se"} {"path":"downloaded/Settlement.java","method_name":"uomnt(Double","content":"\n\t/**\n\t *  金额\n\t */\n\tprivate Double auomnt;\n\t\n\t/*\n auomnt\n\t */\n\tpublic Double getAuomnt() {\n\t\treturn auomnt;\n\t}\n\n\t/**\n\t * @param auomnt the auomnt to set\n\t */\n\tpublic void setAuomnt(Double auomnt) {\n\t\tthis.auomnt = "} {"path":"downloaded/Settlement.java","method_name":"(Date star","content":"\n\t/**\n\t *  金额\n\t */\n\tprivate Double auomnt;\n\t\n\t/*\nic Date getStartTime() {\n\t\treturn startTime;\n\t}\n\n\t/**\n\t * @param startTime the startTime to set\n\t */\n\tpublic void setStartTime(Date startTime) {\n\t\tthis.startTime"} {"path":"downloaded/Settlement.java","method_name":"public Date","content":"\n\t/**\n\t *  金额\n\t */\n\tprivate Double auomnt;\n\t\n\t/*\n\"GMT+8\") \n\tpublic Date getEndTime() {\n\t\treturn e"} {"path":"downloaded/Settlement.java","method_name":"int getDi","content":"\n\t/**\n\t *  金额\n\t */\n\tprivate Double auomnt;\n\t\n\t/*\n\n\t */\n\tpublic int getDiscount() {\n\t\treturn disc"} {"path":"downloaded/Settlement.java","method_name":"*/\n\tpubl","content":"\n\t/**\n\t *  金额\n\t */\n\tprivate Double auomnt;\n\t\n\t/*\n the number\n\t */\n\tpublic Double getNumber() {"} {"path":"downloaded/Settlement.java","method_name":"ce\n\t */\n\tpu","content":"\n\t/**\n\t *  金额\n\t */\n\tprivate Double auomnt;\n\t\n\t/*\nreturn the price\n\t */\n\tpublic Double getPrice() {\n\t"} {"path":"downloaded/Settlement.java","method_name":"getFlightN","content":"\n\t/**\n\t *  金额\n\t */\n\tprivate Double auomnt;\n\t\n\t/*\npublic String getFlightNO() {\n\t\treturn flightNO;\n"} {"path":"downloaded/Settlement.java","method_name":"ing getCraftn","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\n */\n\tpublic String getCraftno() {\n\t\treturn craftno;\n\t}\n\n"} {"path":"downloaded/Settlement.java","method_name":"eturn depAirp","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\nAirport() {\n\t\treturn depAirport;\n\t}\n\n\t/**\n\t * @param dep"} {"path":"downloaded/Settlement.java","method_name":"\t\tretur","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\ngetArrAirport() {\n\t\treturn arrAirport;\n\t}\n\n\t/**"} {"path":"downloaded/Settlement.java","method_name":"\n\tpublic vo","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\nrn the task\n\t */\n\tpublic FlightTask getTask() {\n\t\treturn task;\n\t}\n\n\t/**\n\t * @param task the task to set\n\t */\n\tpublic void setTask(FlightTask task"} {"path":"downloaded/Settlement.java","method_name":" getExecDate(","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\n\tpublic Date getExecDate() {\n\t\treturn execDate;\n\t}\n\n\t"} {"path":"downloaded/Settlement.java","method_name":"\treturn crea","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\ntCreateTime() {\n\t\treturn createTime;\n\t}\n\n\t/**\n\t * @param"} {"path":"downloaded/Settlement.java","method_name":"{\n\t\treturn","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\netCraftType() {\n\t\treturn craftType;\n\t}\n\n\t/**\n\t * "} {"path":"downloaded/Settlement.java","method_name":" String getR","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\nX\n\t */\n\tpublic String getRouteHX() {\n\t\treturn routeHX"} {"path":"downloaded/Settlement.java","method_name":"Code() {\n\t\t","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\n String getRouteCode() {\n\t\treturn routeCode;\n\t}\n\n\t/**"} {"path":"downloaded/Settlement.java","method_name":"Airlines()","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\nic Airlines getAirlines() {\n\t\treturn airlines;\n\t}\n"} {"path":"downloaded/Settlement.java","method_name":"arrier get","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\n */\n\tpublic Carrier getCarrier() {\n\t\treturn carr"} {"path":"downloaded/Settlement.java","method_name":" set\n\t */\n\tpublic voi","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\nram isOutIn the isOutIn to set\n\t */\n\tpublic void setIsOutIn(OutIn isOutIn) {\n\t\tthis"} {"path":"downloaded/Settlement.java","method_name":"tegory;\n\t}\n\n\t/**\n\t * ","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\nn settlementCategory;\n\t}\n\n\t/**\n\t * @param settlementCategory the settlementCategory to set\n\t */\n\tpublic void setSettlementCategory(SettlementCategory"} {"path":"downloaded/Settlement.java","method_name":"se{\n\t\t\treturn nul","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\nName();\n\t\t} else{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * @param settlementItemName the settlementItemName to set\n\t */\n\tpublic void setSettlement"} {"path":"downloaded/Settlement.java","method_name":"rport.getCnName()","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\nurn this.depAirport.getCnName();\n\t\t}else{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * @param depAirportName the depAirportName to set\n\t */\n\tpublic vo"} {"path":"downloaded/Settlement.java","method_name":".arrAirport","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\n\t\t\treturn this.arrAirport.getCnName();\n\t\t}else{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * @param arrAirportName the arrAirportName to "} {"path":"downloaded/Settlement.java","method_name":"is.task != null)","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\ne() {\n\t\tif (this.task != null){\n\t\t\treturn this.task.getCnShortName();\n\t\t}else{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * @param taskName the t"} {"path":"downloaded/Settlement.java","method_name":" this.craftType","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\nll){\n\t\t\treturn this.craftType.getCode();\n\t\t}else{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * @param craftTypeCode the craftTypeCode to set\n\t */\n\tpu"} {"path":"downloaded/Settlement.java","method_name":"n this.airline","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\null){\n\t\t\treturn this.airlines.getCnShortName();\n\t\t}else{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * @param airlinesName the airlinesName to set\n"} {"path":"downloaded/Settlement.java","method_name":"n this.carrier.getCnShort","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\null){\n\t\t\treturn this.carrier.getCnShortName();\n\t\t}else{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * @param carrierName the carrierName to set\n\t */\n\tpublic void setCarrierN"} {"path":"downloaded/Settlement.java","method_name":"rn null;\n\t","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\n\t}else{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * @param set"} {"path":"downloaded/Settlement.java","method_name":"\n\t * @return","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\nategoryName;\n\t}\n\n\t/**\n\t * @return the estimate\n\t */\n\tpublic "} {"path":"downloaded/Settlement.java","method_name":"attribute\n\t */","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\n* @return the attribute\n\t */\n\tpublic AreaAttribute getAttribute() {\n\t\treturn attribute;\n\t}\n\n\t/**\n\t * @param attribute the attribute to set"} {"path":"downloaded/Settlement.java","method_name":"l){\n\t\t\tre","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\nibute != null){\n\t\t\treturn this.attribute.getC"} {"path":"downloaded/Settlement.java","method_name":"e(String attribeN","content":"\n\t/**\n\t * @param flightNo the flightNo to set\n\n setAttribeName(String attribeName) {\n\t\tthis.attribeName = attr"} {"path":"downloaded/LLMakeUWMasterBL.java","method_name":"\n\t * 数�","content":"/** 传入数�\nBL() {\n\t}\n\n\t/**\n\t * 数据提交的公共方法\n\t * \n\t * @param: cInputData 传入的数据 cOperate 数据操作字符串\n\t * @return:\n\t */\n\tpublic boolean submitData(VData cInputData, String cOperate) {\n\t\t// 将传入的数据拷贝到本类中\n\t\tmInputData = (VData) cInputData.clone();\n\t\tthis.mOperate = cOperate;\n\t\tlogger.debug(\"now in ContBL submit\");\n\t\t// 将外部传入的数据分解到本类的属性中，准备处理\n\t\tif (this.getInputData() == false) {\n\t\t\treturn false;\n\t\t}\n\t\tlogger.debug(\"---getInputData---\");\n\t\tif (this.checkData() == false) {\n\t\t\treturn false;\n\t\t}\n\t\tlogger.debug(\"---checkData---\");\n\t\t// }\n\n\t\t// 根据业务逻辑对数据进行处理\n\t\tlogger.debug(\"---dealData start---\");\n\t\tif (this.dealData() == false) {\n\t\t\treturn false;\n\t\t}\n\t\tlogger.debug(\"---dealData  ended---\");\n\t\t// 装配处理好的数据，准备给后台进行保存\n\t\tthis.prepareOutputData();\n\t\tlogger.debug(\"---prepareOutputData---\");\n\n\t\t// 数据提交、保存\n\t\tPubSubmit tPubSubmit = new PubSubmit();\n\t\tlogger.debug(\"Start tPRnewManualDunBLS Submit...\");\n\n//\t\tif (!tPubSubmit.submitData(mInputData, mOperate)) {\n//\t\t\t// @@错误处理\n//\t\t\tthis.mErrors.copyAllErrors("} {"path":"downloaded/LLMakeUWMasterBL.java","method_name":"\";\n//\t\t\ttErr","content":"/** 传入数�\nleName = \"ContBL\";\n//\t\t\ttError.functionName = \"submitData\";\n//\t\t\ttError.errorMessage = \"数据提交失败!\";\n//\n//\t\t\tthis.mErrors.addOneError(tError);\n//\t\t\treturn false;\n//\t\t}\n\n\t\tlogger.debug(\"---commitData---\");\n\t\treturn true;\n\t}\n\n\t/**\n\t * 将外部传入的数据分解到本类的属性中\n\t * \n\t * @param: 无\n\t * @return: boolean\n\t */\n\tprivate boolean getInputData() {\n\t\ttry {\n\t\t\t// 全局变量\n\t\t\tmGlobalInput.setSchema((GlobalInput) mInputData\n\t\t\t\t\t.getObjectByObjectName(\"GlobalInput\", 0));\n\t\t\t// 合同表\n\n\t\t\tTransferData tTransferData = (TransferData) mInputData\n\t\t\t\t\t.getObjectByObjectName(\"TransferData\", 0);\n\t\t\tmCaseNo = (String) tTransferData.getValueByName(\"CaseNo\");\n\t\t\tmContNo = (String) tTransferData.getValueByName(\"ContNo\");\n\t\t\tmBatNo = (String) tTransferData.getValueByName(\"BatNo\");\n\t\t\tif(mCaseNo==null||\"\".equals(mCaseNo.trim())){\n\t\t\t\tCError.buildErr(this, \"前台传入赔案号失败！\");\n\t\t\t\treturn false;\n\t\t\t}\n//\t\t\tif(mContNo==null||\"\".equals(mContNo.trim())){\n//\t\t\t\tCError.buildErr(this, \"前台传入合同号失败！\");\n//\t\t\t\treturn false;\n//\t\t\t}\n\t\t\tif(mBatNo==null||\"\".equals(mBatNo.trim())){\n\t\t\t\tCError.buildErr(this, \"前台传入批次号失败！\");\n\t\t\t\treturn fa"} {"path":"downloaded/LLMakeUWMasterBL.java","method_name":"ContDB.ge","content":"/** 传入数�\no);\n//\t\t\tif(!mLCContDB.getInfo()){\n//\t\t\t\tCError.bu"} {"path":"downloaded/LLMakeUWMasterBL.java","method_name":"rue;\n\t\t}","content":"/** 传入数�\n\n\t\t\t\n\t\t\treturn true;\n\t\t} catch (Exception ex) {\n\t\t\tCError tError = new CError();\n\t\t\ttError.moduleName = \"ContBL\";\n\t\t\ttError.functionName = \"checkData\";\n\t\t\ttError.errorMessage = ex.toString();\n\t\t\tthis.mErrors.addOneError(tError);\n\t\t\treturn false;\n\n\t\t}\n\t\t\n\t\t\n\n\t}\n\n\t/**\n\t * 校验传入的数据\n\t * \n\t * @param: 无\n\t * @return: boolean\n\t */\n\tprivate boolean checkData() {\n\t\t\n\t\treturn true;\n\t}\n\n\t/**\n\t * 根据业务逻辑对数据进行处理\n\t * \n\t * @param: 无\n\t * @ret"} {"path":"downloaded/LLMakeUWMasterBL.java","method_name":"tchSet t","content":"/** 传入数�\nta() {\n\t\tLLCUWBatchSet tLLCUWBatchSet = new LLCUWBatchSet();\n\t\tLLCUWBatchDB tLLCUWBatchDB = new LLCUWBatchDB();\n\t\ttLLCUWBatchDB.setCaseNo(mCaseNo);\n\t\ttLLCUWBatchDB.setBatNo(mBatNo);\n\t\ttLLCUWBatchSet = tLLCUWBatchDB.query();\n\t\tfor(int i=1;i<=tLLCUWBatchSet.size();i++){\n\t\t\t\n\t\t\tif(!dealCont(tLLCUWBatchSet.get(i).getContNo())){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tif(!dealPol(tLLCUWBatchSet.get(i).getContNo())){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\t\n\t\n\t/**\n\t * 处理LLCUWMaster\n\t * \n\t * */\n\tprivate boolean dealCont(String tContNo){\n\t\tint batchNo=0;\n\t\tmLCContDB = new LCContDB();\n\t\tmLCContDB.setContNo(tContNo);\n\t\tif(!mLCContDB.getInfo()){\n\t\t\tCError.buildErr(this, \"查询合同信息失败！\");\n\t\t\treturn false;\n\t\t}\n\t\tLLCUWMasterSchema tLLCUWMasterSchema = new LLCUWMasterSchema();\n\t\tLLCUWMasterDB tLLCUWMasterDB = new LLCUWMasterDB();\n\t\ttLLCUWMasterDB.setContNo(tContNo);\n\t\ttLLCUWMasterDB.setCaseNo(mCaseNo);\n//\t\ttLLCUWMasterDB.setBatNo(mBatNo);\n\t\tLLCUWMasterSet tLLCUWMasterSet = new LLCUWMasterSet();\n\t\ttLLCUWMasterSet = tLLCUWMasterDB.query();\n\t\tif (tLLCUWMasterDB.mErrors.needDealError()) {\n\t\t\t// @@错误处理\n\t\t\tthis.mErrors.copyAllErrors(tLLCUWMasterDB.mErrors);\n\t\t\tCError tError = new CError();\n\t\t\ttError.moduleName = \"UWAtuoChkAfterInitService\";\n\t\t\ttError.functionName = \"prepareContUW\";\n\t\t\ttError.errorMessage = tContNo + \"合同核保总表取数失败!\";\n\t\t\tthis.mErrors.addOneError(tError);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (tLLCUWMasterSet.size() == 0) {\n\t\t\ttLLCUWMasterSchema.setContNo(tContNo);\n\t\t\ttLLCUWMasterSchema.setCaseNo(mCaseNo);\n\t\t\ttLLCUWMasterSchema.setGrpContNo(mLCContDB.getGrpContNo());\n\t\t\ttLLCUWMasterSchema.setProposalContNo(mLCContDB\n\t\t\t\t\t.getProposalContNo());\n\t\t\ttLLCUWMasterSchema.setBatNo(mBatNo);\n\t\t\ttLLCUWMasterSchema.setUWNo(1);\n\t\t\ttLLCUWMasterSchema.setInsuredNo(mLCContDB.getInsuredNo());\n\t\t\ttLLCUWMasterSchema.setInsuredName(mLCContDB.getInsuredName());\n\t\t\ttLLCUWMasterSchema.setAppntNo(mLCContDB.getAppntNo());\n\t\t\ttLLCUWMasterSchema.setAppntName(mLCContDB.getAgentCode());\n\t\t\ttLLCUWMasterSchema.setAgentGroup(mLCContDB.getAgentGroup());\n//\t\t\ttLLCUWMasterSchema.setUWGrade(mUWGrade); // 核保级别\n//\t\t\ttLLCUWMasterSchema.setAppGrade(mUWGrade); // 申报级别\n\t\t\ttLLCUWMasterSchema.setPostponeDay(\"\");\n\t\t\ttLLCUWMasterSchema.setPostponeDate(\"\");\n\t\t\ttLLCUWMasterSchema.setAutoUWFlag(\"1\"); // 1 自动核保 2 人工核保\n\t\t\ttLLCUWMasterSchema.setState(\"5\");\n\t\t\ttLLCUWMasterSchema.setPassFlag(\"5\");\n\t\t\ttLLCUWMasterSchema.setHealthFlag(\"0\");\n\t\t\ttLLCUWMasterSchema.setSpecFlag(\"0\");\n\t\t\ttLLCUWMasterSchema.setQuesFlag(\"0\");\n\t\t\ttLLCUWMasterSchema.setReportFlag(\"0\");\n\t\t\ttLLCUWMasterSchema.setChangePolFlag(\"0\");\n\t\t\ttLLCUWMasterSchema.setPrintFlag(\"0\");\n\t\t\ttLLCUWMasterSchema.setPrintFlag2(\"0\");\n\t\t\ttLLCUWMasterSchema.setManageCom(mLCContDB.getManageCom());\n\t\t\ttLLCUWMasterSchema.setUWIdea(\"\");\n\t\t\ttLLCUWMasterSchema.setUpReportContent(\"\");\n\t\t\ttLLCUWMasterSchema.setOperator(mGlobalInput.Operator); // 操作员\n\t\t\ttLLCUWMasterSchema.setMakeDate(PubFun.getCurrentDate());\n\t\t\ttLLCUWMasterSchema.setMakeTime(PubFun.getCurrentTime());\n\t\t\ttLLCUWMasterSchema.setModifyDate(PubFun.getCurrentDate());\n\t\t\ttLLCUWMasterSchema.setModifyTime(PubFun.getCurrentTime());\n\t\t} else {\n\t\t\ttLLCUWMasterSchema = tLLCUWMasterSet.get(1);\n\t\t\ttLLCUWMasterSchema.setUWNo(tLLCUWMasterSchema.getUWNo() + 1);\n\t\t\ttLLCUWMasterSchema.setBatNo(mBatNo);\n\t\t\ttLLCUWMasterSchema.setState(\"5\");\n\t\t\ttLLCUWMasterSchema.setPassFlag(\"5\");\n\t\t\ttLLCUWMasterSchema.setAutoUWFlag(\"1\"); // 1 自动核保 2 人工核保\n//\t\t\ttLLCUWMasterSchema.setUWGrade(mUWGrade); // 核保级别\n//\t\t\ttLLCUWMasterSchema.setAppGrade(mUWGrade); // 申报级别\n\t\t\ttLLCUWMasterSchema.setOperator(mGlobalInput.Operator); // 操作员\n\t\t\ttLLCUWMasterSchema.setModifyDate(PubFun.getCurrentDate());\n\t\t\ttLLCUWMasterSchema.setModifyTime(PubFun.getCurrentTime());\n\t\t}\n//\t\tbatchNo=nUWNo+1;\n//\t\tmLLCUWMasterSchema.setSchema(tLLCUWMasterSchema);\n\t\tmLLCUWMasterSet.add(tLLCUWMasterSchema);\n\t\t// 合同核保轨迹表\n\t\tLLCUWSubSchema tLLCUWSubSchema = new LLCUWSubSchema();\n\t\tLLCUWSubDB tLLCUWSubDB = new LLCUWSubDB();\n\t\ttLLCUWSubDB.setContNo(tContNo);\n\t\ttLLCUWSubDB.setCaseNo(mCaseNo);\n\t\ttLLCUWSubDB.setBatNo(mBatNo);\n\t\tLLCUWSubSet tLLCUWSubSet = new LLCUWSubSet();\n\t\ttLLCUWSubSet = tLLCUWSubDB.query();\n\t\tif (tLLCUWSubDB.mErrors.needDealError()) {\n\t\t\t// @@错误处理\n\t\t\tthis.mErrors.copyAllErrors(tLLCUWSubDB.mErrors);\n\t\t\tCError tError = new CError();\n\t\t\ttError.moduleName = \"UWAtuoChkAfterInitService\";\n\t\t\ttError.functionName = \"prepareContUW\";\n\t\t\ttError.errorMessage = tContNo + \"合同核保轨迹表查失败!\";\n\t\t\tthis.mErrors.addOneError(tError);\n\t\t\treturn false;\n\t\t}\n\n\t\tint nUWNo = tLLCUWSubSet.size();\n\t\t\n\t\ttLLCUWSubSchema.setUWNo(nUWNo+1); // 第几次核保\n\n\t\ttLLCUWSubSchema.setContNo(tLLCUWMasterSchema.getContNo());\n\t\ttLLCUWSubSchema.setCaseNo(mCaseNo);\n\t\ttLLCUWSubSchema.setGrpContNo(tLLCUWMasterSchema.getGrpContNo());\n\t\ttLLCUWSubSchema.setProposalContNo(tLLCUWMasterSchema\n\t\t\t\t.getProposalContNo());\n\t\ttLLCUWSubSchema.setInsuredNo(tLLCUWMasterSchema.getInsuredNo());\n\t\ttLLCUWSubSchema.setBatNo(mBatNo);\n\t\ttLLCUWSubSchema.setInsuredName(tLLCUWMasterSchema.getInsuredName());\n\t\ttLLCUWSubSchema.setAppntNo(tLLCUWMasterSchema.getAppntNo());\n\t\ttLLCUWSubSchema.setAppntName(tLLCUWMasterSchema.getAppntName());\n\t\ttLLCUWSubSchema.setAgentCode(tLLCUWMasterSchema.getAgentCode());\n\t\ttLLCUWSubSchema.setAgentGroup(tLLCUWMasterSchema.getAgentGroup());\n\t\ttLLCUWSubSchema.setUWGrade(tLLCUWMasterSchema.getUWGrade()); // 核保级别\n\t\ttLLCUWSubSchema.setAppGrade(tLLCUWMasterSchema.getAppGrade()); // 申请级别\n\t\ttLLCUWSubSchema.setAutoUWFlag(tLLCUWMasterSchema.getAutoUWFlag());\n\t\ttLLCUWSubSchema.setState(tLLCUWMasterSchema.getState());\n\t\ttLLCUWSubSchema.setPassFlag(tLLCUWMasterSchema.getState());\n\t\ttLLCUWSubSchema.setPostponeDay(tLLCUWMasterSchema.getPostponeDay());\n\t\ttLLCUWSubSchema.setPostponeDate(tLLCUWMasterSchema.getPostponeDate());\n\t\ttLLCUWSubSchema.setUpReportContent(tLLCUWMasterSchema\n\t\t\t\t.getUpReportContent());\n\t\ttLLCUWSubSchema.setHealthFlag(tLLCUWMasterSchema.getHealthFlag());\n\t\ttLLCUWSubSchema.setSpecFlag(tLLCUWMasterSchema.getSpecFlag());\n\t\ttLLCUWSubSchema.setSpecReason(tLLCUWMasterSchema.getSpecReason());\n\t\ttLLCUWSubSchema.setQuesFlag(tLLCUWMasterSchema.getQuesFlag());\n\t\ttLLCUWSubSchema.setReportFlag(tLLCUWMasterSchema.getReportFlag());\n\t\ttLLCUWSubSchema.setChangePolFlag(tLLCUWMasterSchema.getChangePolFlag());\n\t\ttLLCUWSubSchema.setChangePolReason(tLLCUWMasterSchema\n\t\t\t\t.getChangePolReason());\n\t\ttLLCUWSubSchema.setAddPremReason(tLLCUWMasterSche"} {"path":"downloaded/LLMakeUWMasterBL.java","method_name":"tLLCUWM","content":"/** 传入数�\nma.setPrintFlag(tLLCUWMasterSchema.getPrintFlag());\n\t\ttLLCUWSubSchema.setPrintFlag2(tLLCUWMasterSchema.getPrintFlag2());\n\t\ttLLCUWSubSchema.setUWIdea(tLLCUWMasterSchema.getUWIdea());\n\t\ttLLCUWSubSchema.setOperator(tLLCUWMasterSchema.getOperator()); // 操作员\n\t\ttLLCUWSubSchema.setManageCom(tLLCUWMasterSchema.getManageCom());\n\t\ttLLCUWSubSchema.setMakeDate(PubFun.getCurrentDate());\n\t\ttLLCUWSubSchema.setMakeTime(PubFun.getCurrentTime());\n\t\ttLLCUWSubSchema.setModifyDate(PubFun.getCurrentDate());\n\t\ttLLCUWSubSchema.setModifyTime(PubFun.getCurrentTime());\n\n\t\tmLLCUWSubSet.add(tLLCUWSubSchema);\n\n//\t\ttLLCUWMasterSchema.setBatchNo(1);\n\t\treturn true;\n\t\n\t}\n\n\t\n\t/**\n\t * 处理LLUWMaster\n\t * \n\t * */\n\tprivate boolean dealPol(String tContNo){\n\t\tLCPolSet tLCPolSet = new LCPolSet();\n\t\tLCPolDB tLCPolDB = new LCPolDB();\n\t\ttLCPolDB.setContNo(tContNo);\n\t\ttLCPolDB.setAppFlag(\"1\");\n\t\ttLCPolSet = tLCPolDB.query();\n\t\tfor(int i=1;i<=tLCPolSet.size();i++){\n\t\t\tString tAddFeeFlag=\"0\";\n\t\t\tint batchNo=0;\n\t\t\tLCPolSchema tLCPolSchema = new LCPolSchema();\n\t\t\ttLCPolSchema = tLCPolSet.get(i);\n\t\t\tint tuwno = 0;\n\t\t\tLLUWMasterSchema tLLUWMasterSchema = new LLUWMasterSchema();\n\t\t\tLLUWMasterDB tLLUWMasterDB = new LLUWMasterDB();\n\t\t\ttLLUWMasterDB.setPolNo(tLCPolSchema.getPolNo());\n//\t\t\ttLLUWMasterDB.setBatNo(mBatNo);\n\t\t\ttLLUWMasterDB.setCaseNo(mCaseNo);\n\t\t\tLLUWMasterSet tLLUWMasterSet = new LLUWMasterSet();\n\t\t\ttLLUWMasterSet = tLLUWMasterDB.query();\n\t\t\t//判断是否有加费信息\n//\t\t\tString addFeeSql=\"select * from lcprem  where polno='\"+tLCPolSchema.getPolNo()+\"' and payplancode like '000000%%'\";\n//\t\t\tSSRS tAddFee = new SSRS();\n//\t\t\tExeSQL tExeSQL = new ExeSQL();\n//\t\t\ttAddFee = tExeSQL.execSQL(addFeeSql);\n//\t\t\tif(tAddFee.MaxRow>0){\n//\t\t\t\ttAddFeeFlag=\"1\";\n//\t\t\t}\n\t\t\tint n = tLLUWMasterSet.size();\n\t\t\tif (n == 0) {\n\t\t\t\ttLLUWMasterSchema.setContNo(tContNo);\n\t\t\t\ttLLUWMasterSchema.setCaseNo(mCaseNo);\n\t\t\t\ttLLUWMasterSchema.setGrpContNo(tLCPolSchema.getGrpContNo());\n\t\t\t\ttLLUWMasterSchema.setPolNo(tLCPolSchema.getPolNo());\n\t\t\t\ttLLUWMasterSchema.setProposalContNo(mLCContDB.getProposalContNo());\n\t\t\t\ttLLUWMasterSchema.setProposalNo(tLCPolSchema.getProposalNo());\n\t\t\t\ttLLUWMasterSchema.setBatNo(mBatNo);\n\t\t\t\ttLLUWMasterSchema.setUWNo(1);\n\t\t\t\ttLLUWMasterSchema.setInsuredNo(tLCPolSchema.getInsuredNo());\n\t\t\t\ttLLUWMasterSchema.setInsuredName(tLCPolSchema.getInsuredName());\n\t\t\t\ttLLUWMasterSchema.setAppntNo(tLCPolSchema.getAppntNo());\n\t\t\t\ttLLUWMasterSchema.setAppntName(tLCPolSchema.getAppntName());\n\t\t\t\ttLLUWMasterSchema.setAgentCode(tLCPolSchema.getAgentCode());\n\t\t\t\ttLLUWMasterSchema.setAgentGroup(tLCPolSchema.getAgentGroup());\n\t\t\t\ttLLUWMasterSchema.setBatNo(mBatNo);\n//\t\t\t\ttLLUWMasterSchema.setUWGrade(mUWGrade); // 核保级别\n//\t\t\t\ttLLUWMasterSchema.setAppGrade(mUWGrade); // 申报级别\n\t\t\t\ttLLUWMasterSchema.setPostponeDay(\"\");\n\t\t\t\ttLLUWMasterSchema.setPostponeDate(\"\");\n\t\t\t\ttLLUWMasterSchema.setAutoUWFlag(\"1\"); // 1 自动核保 2 人工核保\n\t\t\t\ttLLUWMasterSchema.setState(\"5\");\n\t\t\t\ttLLUWMasterSchema.setPassFlag(\"5\");\n\t\t\t\ttLLUWMasterSchema.setHealthFlag(\"0\");\n\t\t\t\ttLLUWMasterSchema.setSpecFlag(\"0\");\n\t\t\t\ttLLUWMasterSchema.setQuesFlag(\"0\");\n\t\t\t\ttLLUWMasterSchema.setReportFlag(\"0\");\n\t\t\t\ttLLUWMasterSchema.setChangePolFlag(\"0\");\n\t\t\t\ttLLUWMasterSchema.setPrintFlag(\"0\");\n\t\t\t\ttLLUWMasterSchema.setManageCom(tLCPolSchema.getManageCom());\n\t\t\t\ttLLUWMasterSchema.setUWIdea(\"\");\n\t\t\t\ttLLUWMasterSchema.setUpReportContent(\"\");\n\t\t\t\ttLLUWMasterSchema.setOperator(mGlobalInput.Operator); // 操作员\n\t\t\t\ttLLUWMasterSchema.setAddPremFlag(\"0\");\n\t\t\t\ttLLUWMasterSchema.setMakeDate(PubFun.getCurrentDate());\n\t\t\t\ttLLUWMasterSchema.setMakeTime(PubFun.getCurrentTime());\n\t\t\t\ttLLUWMasterSchema.setModifyDate(PubFun.getCurrentDate());\n\t\t\t\ttLLUWMasterSchema.setModifyTime(PubFun.getCurrentTime());\n\t\t\t} else if (n == 1) {\n\t\t\t\ttLLUWMasterSchema = tLLUWMasterSet.get(1);\n\t\n\t\t\t\ttuwno = tLLUWMasterSchema.getUWNo();\n\t\t\t\ttuwno = tuwno + 1;\n\t\n\t\t\t\ttLLUWMasterSchema.setUWNo(tuwno);\n\t\t\t\ttLLUWMasterSchema.setProposalContNo(mLCContDB.getProposalContNo());\n//\t\t\t\ttLLUWMasterSchema.setState(mPolPassFlag);\n\t\t\t\ttLLUWMasterSchema.setPassFlag(\"5\");\n\t\t\t\ttLLUWMasterSchema.setBatNo(mBatNo);\n\t\t\t\ttLLUWMasterSchema.setAddPremFlag(tAddFeeFlag);\n\t\t\t\ttLLUWMasterSchema.setAutoUWFlag(\"1\"); // 1 自动核保 2 人工核保\n\t\t\t\ttLLUWMasterSchema.setUWGrade(\"5\"); // 核保级别\n\t\t\t\ttLLUWMasterSchema.setAppGrade(\"5\"); // 申报级别\n\t\t\t\ttLLUWMasterSchema.setOperator(mGlobalInput.Operator); // 操作员\n\t\t\t\ttLLUWMasterSchema.setModifyDate(PubFun.getCurrentDate());\n\t\t\t\ttLLUWMasterSchema.setModifyTime(PubFun.getCurrentTime());\n\t\t\t} else {\n\t\t\t\t// @@错误处理\n\t\t\t\tthis.mErrors.copyAllErrors(tLLUWMasterDB.mErrors);\n\t\t\t\tCError tError = new CError();\n\t\t\t\ttError.moduleName = \"UWAtuoChkBL\";\n\t\t\t\ttError.functionName = \"prepareUW\";\n\t\t\t\ttError.errorMessage = \"个人核保总表取数据不唯一!\";\n\t\t\t\tthis.mErrors.addOneError(tError);\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\t// 核保轨迹表 \n\t\t\tLLUWSubSchema tLLUWSubSchema = new LLUWSubSchema();\n\t\t\tLLUWSubDB tLLUWSubDB = new LLUWSubDB();\n\t\t\t//tLLUWSubDB.setPolNo(mOldPolNo);\n\t\t\tString sqlUwno = \"select * from lluwsub where polno ='\"+ \"?polno?\" +\"' and \"\n\t\t\t\t\t\t\t\t+\" caseno='\"+\"?caseno?\"+\"'\"\n\t\t\t\t\t\t\t\t+\" order by uwno desc \";\n\t\t\tSQLwithBindVariables sqlbv = new SQLwithBindVariables();\n\t\t\tsqlbv.sql(sqlUwno);\n\t\t\tsqlbv.put(\"polno\", tLCPolSchema.getPolNo());\n\t\t\tsqlbv.put(\"caseno\", mCaseNo);\n\t\t\tLLUWSubSet tLLUWSubSet = new LLUWSubSet();\n\t\t\ttLLUWSubSet = tLLUWSubDB.executeQuery(sqlbv);\n\t\n\t\t\tint m = tLLUWSubSet.size();\n\t\t\tint uwNo = 0;\n\t\t\t\n\t\t\tif(m>0){\n\t\t\t\tuwNo=tLLUWSubSet.get(1).getUWNo();\n\t\t\t\ttLLUWSubSchema.setUWNo(uwNo+1);\n\t\t\t}else{\n\t\t\t\ttLLUWSubSchema.setUWNo(1); // 第1次核保\n\t\t\t}\n\t\n\t\t\ttLLUWSubSchema.setContNo(tContNo);\n\t\t\ttLLUWSubSchema.setCaseNo(mCaseNo);\n\t\t\ttLLUWSubSchema.setPolNo(tLCPolSchema.getPolNo());\n\t\t\ttLLUWSubSchema.setGrpContNo(tLLUWMasterSchema.getGrpContNo());\n\t\t\ttLLUWSubSchema.setProposalContNo(tLLUWMasterSchema.getProposalContNo());\n\t\t\ttLLUWSubSchema.setProposalNo(tLLUWMasterSchema.getProposalNo());\n\t\t\ttLLUWSubSchema.setInsuredNo(tLLUWMasterSchema.getInsuredNo());\n\t\t\ttLLUWSubSchema.setBatNo(mBatNo);\n\t\t\ttLLUWSubSchema.setInsuredName(tLLUWMasterSchema.getInsuredName());\n\t\t\ttLLUWSubSchema.setAppntNo(tLLUWMasterSchema.getAppntNo());\n\t\t\ttLLUWSubSchema.setAppntName(tLLUWMasterSchema.getAppntName());\n\t\t\ttLLUWSubSchema.setAgentCode(tLLUWMasterSchema.getAgentCode());\n\t\t\ttLLUWSubSchema.setAgentGroup(tLLUWMasterSchema.getAgentGroup());\n\t\t\ttLLUWSubSchema.setUWGrade(tLLUWMasterSchema.getUWGrade()); // 核保级别\n\t\t\ttLLUWSubSchema.setAppGrade(tLLUWMasterSchema.getAppGrade()); // 申请级别\n\t\t\ttLLUWSubSchema.setAutoUWFlag(tLLUWMasterSchema.getAutoUWFlag());\n\t\t\ttLLUWSubSchema.setState(tLLUWMasterSchema.getState());\n\t\t\ttLLUWSubSchema.setPassFlag(tLLUWMasterSchema.getState());\n\t\t\ttLLUWSubSchema.setPostponeDay(tLLUWMasterSchema.getPostponeDay());\n\t\t\ttLLUWSubSchema.setPostponeDate(tLLUWMasterSchema.getPostponeDate());\n\t\t\ttLLUWSubSchema.setUpReportContent(tLLUWMasterSchema\n\t\t\t\t\t.getUpReportContent());\n\t\t\ttLLUWSubSchema.setHealthFlag(tLLUWMasterSchema.getHealthFlag());\n\t\t\ttLLUWSubSchema.setSpecFlag(tLLUWMasterSchema.getSpecFlag());\n\t\t\ttLLUWSubSchema.setSpecReason(tLLUWMasterSchema.getSpecReason());\n\t\t\ttLLUWSubSchema.setQuesFlag(tLLUWMasterSchema.getQuesFlag());\n\t\t\ttLLUWSubSchema.setReportFlag(tLLUWMasterSchema.getReportFlag());\n\t\t\ttLLUWSubSchema.setChangePolFlag(tLLUWMast"} {"path":"downloaded/LLMakeUWMasterBL.java","method_name":"Date(PubF","content":"/** 传入数�\nchema.setMakeDate(PubFun.getCurrentDate());\n\t\t\t"} {"path":"downloaded/OperacionServiceImpl.java","method_name":"getRows","content":"/**\n\t * Itera las filas y sus celdas para obtener los datos de la hoja de calculo.\n\t * @param workbook\n\t * @return\n\t */\n@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\tprivate List<List<HSSFCell>> getRows(HSSFWorkbook workbook) {\n\t\t/**\n\t\t * Create a new instance for cellDataList\n\t\t */\n\t\tList cellDataList = new ArrayList();\n\n\t\t/*\n\t\t * Create a new instance for HSSFWorkBook Class\n\t\t */\n\t\tHSSFSheet hssfSheet = workbook.getSheetAt(0);\n\t\t/**\n\t\t * Iterate the rows and cells of the spreadsheet to get all the datas.\n\t\t */\n\t\tIterator rowIterator = hssfSheet.rowIterator();\n\t\twhile (rowIterator.hasNext()) {\n\t\t\tHSSFRow hssfRow = (HSSFRow) rowIterator.next();\n\t\t\tIterator iterator = hssfRow.cellIterator();\n\t\t\tList cellTempList = new ArrayList();\n\t\t\twhile (iterator.hasNext()) {\n\t\t\t\tHSSFCell hssfCell = (HSSFCell) iterator.next();\n\t\t\t\tcellTempList.add(hssfCell);\n\t\t\t}\n\t\t\tcellDataList.add(cellTempList);\n\t\t}\n\t\treturn cellDataList;\n\t}"} {"path":"downloaded/OperacionServiceImpl.java","method_name":"loadLstOperacionesForm","content":"/**\n\t * Cada banco tiene su formato de archivo excel, para saber la posicion en la que se encuentra el dato,\n\t * indicamos el id del banco.\n\t * @param cellDataList\n\t * @return\n\t */\n@Transactional\n\tprivate List<OperacionForm> loadLstOperacionesForm(List<List<HSSFCell>> cellDataList, Integer idProducto){\n\t\tList<OperacionForm> lstOperacionesForm= new ArrayList<OperacionForm>();\n\t\t/*------------- Kutxabank --------------\n\t\tparametro[0] = fecha \t\tparametro[1] = concepto\t\n\t \tparametro[2] = fecha valor \tparametro[3] = importe\t\n\t \tparametro[4] = saldo\n\t\t */\n\t\t\n\t\t//Obtengo el banco para ver en que posiciones debe de obtener los datos de la hoja de calculo\n\t\tBanco banco=productoDao.findWithBancoById(idProducto).getBanco();\n\t\t\n\t\t\n\t\tfor (int i = banco.getFilaInicio(); i < cellDataList.size(); i++){\n\t\t\tList<HSSFCell> cellTempList = (List<HSSFCell>) cellDataList.get(i);\n\t\t\tOperacionForm operacion=new OperacionForm();\n\t\t\tBoolean pintarlinea=true;\n\t\t\tfor (int j = 0; j < cellTempList.size(); j++){\n\t\t\t\tHSSFCell hssfCell = (HSSFCell) cellTempList.get(j);\n\t\t\t\tString stringCellValue = hssfCell.toString();\n\t\t\t\tif(stringCellValue.isEmpty()){\n\t\t\t\t\tpintarlinea=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t \n\t\t\t\telse{\n\t\t\t\t\t//Fecha\n\t\t\t\t\tif (j==banco.getColumnaFecha()){\n\t\t\t\t\t\toperacion.setFecha(FechaUtil.formatearADate(stringCellValue));\n\t\t\t\t\t\tlog.info(\"Fecha: \"+stringCellValue);\n\t\t\t\t\t}\n\t\t\t\t\t//Concepto\n\t\t\t\t\telse if (j==banco.getColumnaConcepto()){\n\t\t\t\t\t\toperacion.setConcepto(stringCellValue);\n\t\t\t\t\t\tlog.info(\"Concepto: \"+stringCellValue);\n\t\t\t\t\t}\n\t\t\t\t\t//Importe\n\t\t\t\t\telse if (j==banco.getColumnaImporte()){\n\t\t\t\t\t\toperacion.setImporte(new BigDecimal(stringCellValue));\n\t\t\t\t\t\tlog.info(\"Importe: \"+stringCellValue);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\toperacion.setTraspaso(false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pintarlinea)\n\t\t\t\tlstOperacionesForm.add(operacion);\n\t\t}\n\t\t\n\t\treturn lstOperacionesForm;\n\t}"} {"path":"downloaded/GetCharactersCharacterIdBookmarks200Ok.java","method_name":"getBookmarkId","content":"/**\n   * bookmark_id integer\n   * @return bookmarkId\n  **/\n@ApiModelProperty(required = true, value = \"bookmark_id integer\")\n  public Integer getBookmarkId() {\n    return bookmarkId;\n  }"} {"path":"downloaded/GetCharactersCharacterIdBookmarks200Ok.java","method_name":"coordinates","content":"/**\n   * bookmark_id integer\n   * @return bookmarkId\n  **/\npublic GetCharactersCharacterIdBookmarks200Ok coordinates(GetCharactersCharacterIdBookmarksCoordinates coordinates) {\n    this.coordinates = coordinates;\n    return this;\n  }"} {"path":"downloaded/GetCharactersCharacterIdBookmarks200Ok.java","method_name":"getCoordinates","content":"/**\n   * Get coordinates\n   * @return coordinates\n  **/\n@ApiModelProperty(value = \"\")\n  public GetCharactersCharacterIdBookmarksCoordinates getCoordinates() {\n    return coordinates;\n  }"} {"path":"downloaded/GetCharactersCharacterIdBookmarks200Ok.java","method_name":"created","content":"/**\n   * Get coordinates\n   * @return coordinates\n  **/\npublic GetCharactersCharacterIdBookmarks200Ok created(OffsetDateTime created) {\n    this.created = created;\n    return this;\n  }"} {"path":"downloaded/GetCharactersCharacterIdBookmarks200Ok.java","method_name":"getCreated","content":"/**\n   * created string\n   * @return created\n  **/\n@ApiModelProperty(required = true, value = \"created string\")\n  public OffsetDateTime getCreated() {\n    return created;\n  }"} {"path":"downloaded/GetCharactersCharacterIdBookmarks200Ok.java","method_name":"creatorId","content":"/**\n   * created string\n   * @return created\n  **/\npublic GetCharactersCharacterIdBookmarks200Ok creatorId(Integer creatorId) {\n    this.creatorId = creatorId;\n    return this;\n  }"} {"path":"downloaded/GetCharactersCharacterIdBookmarks200Ok.java","method_name":"getCreatorId","content":"/**\n   * creator_id integer\n   * @return creatorId\n  **/\n@ApiModelProperty(required = true, value = \"creator_id integer\")\n  public Integer getCreatorId() {\n    return creatorId;\n  }"} {"path":"downloaded/GetCharactersCharacterIdBookmarks200Ok.java","method_name":"folderId","content":"/**\n   * creator_id integer\n   * @return creatorId\n  **/\npublic GetCharactersCharacterIdBookmarks200Ok folderId(Integer folderId) {\n    this.folderId = folderId;\n    return this;\n  }"} {"path":"downloaded/GetCharactersCharacterIdBookmarks200Ok.java","method_name":"getFolderId","content":"/**\n   * folder_id integer\n   * @return folderId\n  **/\n@ApiModelProperty(value = \"folder_id integer\")\n  public Integer getFolderId() {\n    return folderId;\n  }"} {"path":"downloaded/GetCharactersCharacterIdBookmarks200Ok.java","method_name":"item","content":"/**\n   * folder_id integer\n   * @return folderId\n  **/\npublic GetCharactersCharacterIdBookmarks200Ok item(GetCharactersCharacterIdBookmarksItem item) {\n    this.item = item;\n    return this;\n  }"} {"path":"downloaded/GetCharactersCharacterIdBookmarks200Ok.java","method_name":"getItem","content":"/**\n   * Get item\n   * @return item\n  **/\n@ApiModelProperty(value = \"\")\n  public GetCharactersCharacterIdBookmarksItem getItem() {\n    return item;\n  }"} {"path":"downloaded/GetCharactersCharacterIdBookmarks200Ok.java","method_name":"label","content":"/**\n   * Get item\n   * @return item\n  **/\npublic GetCharactersCharacterIdBookmarks200Ok label(String label) {\n    this.label = label;\n    return this;\n  }"} {"path":"downloaded/GetCharactersCharacterIdBookmarks200Ok.java","method_name":"getLabel","content":"/**\n   * label string\n   * @return label\n  **/\n@ApiModelProperty(required = true, value = \"label string\")\n  public String getLabel() {\n    return label;\n  }"} {"path":"downloaded/GetCharactersCharacterIdBookmarks200Ok.java","method_name":"locationId","content":"/**\n   * label string\n   * @return label\n  **/\npublic GetCharactersCharacterIdBookmarks200Ok locationId(Integer locationId) {\n    this.locationId = locationId;\n    return this;\n  }"} {"path":"downloaded/GetCharactersCharacterIdBookmarks200Ok.java","method_name":"getLocationId","content":"/**\n   * location_id integer\n   * @return locationId\n  **/\n@ApiModelProperty(required = true, value = \"location_id integer\")\n  public Integer getLocationId() {\n    return locationId;\n  }"} {"path":"downloaded/GetCharactersCharacterIdBookmarks200Ok.java","method_name":"notes","content":"/**\n   * location_id integer\n   * @return locationId\n  **/\npublic GetCharactersCharacterIdBookmarks200Ok notes(String notes) {\n    this.notes = notes;\n    return this;\n  }"} {"path":"downloaded/GetCharactersCharacterIdBookmarks200Ok.java","method_name":"getNotes","content":"/**\n   * notes string\n   * @return notes\n  **/\n@ApiModelProperty(required = true, value = \"notes string\")\n  public String getNotes() {\n    return notes;\n  }"} {"path":"downloaded/GetCharactersCharacterIdBookmarks200Ok.java","method_name":"equals","content":"/**\n   * notes string\n   * @return notes\n  **/\n@Override\n  public boolean equals(java.lang.Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    GetCharactersCharacterIdBookmarks200Ok getCharactersCharacterIdBookmarks200Ok = (GetCharactersCharacterIdBookmarks200Ok) o;\n    return Objects.equals(this.bookmarkId, getCharactersCharacterIdBookmarks200Ok.bookmarkId) &&\n        Objects.equals(this.coordinates, getCharactersCharacterIdBookmarks200Ok.coordinates) &&\n        Objects.equals(this.created, getCharactersCharacterIdBookmarks200Ok.created) &&\n        Objects.equals(this.creatorId, getCharactersCharacterIdBookmarks200Ok.creatorId) &&\n        Objects.equals(this.folderId, getCharactersCharacterIdBookmarks200Ok.folderId) &&\n        Objects.equals(this.item, getCharactersCharacterIdBookmarks200Ok.item) &&\n        Objects.equals(this.label, getCharactersCharacterIdBookmarks200Ok.label) &&\n        Objects.equals(this.locationId, getCharactersCharacterIdBookmarks200Ok.locationId) &&\n        Objects.equals(this.notes, getCharactersCharacterIdBookmarks200Ok.notes);\n  }"} {"path":"downloaded/GetCharactersCharacterIdBookmarks200Ok.java","method_name":"hashCode","content":"/**\n   * notes string\n   * @return notes\n  **/\n@Override\n  public int hashCode() {\n    return Objects.hash(bookmarkId, coordinates, created, creatorId, folderId, item, label, locationId, notes);\n  }"} {"path":"downloaded/GetCharactersCharacterIdBookmarks200Ok.java","method_name":"toString","content":"/**\n   * notes string\n   * @return notes\n  **/\n@Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"class GetCharactersCharacterIdBookmarks200Ok {\\n\");\n    \n    sb.append(\"    bookmarkId: \").append(toIndentedString(bookmarkId)).append(\"\\n\");\n    sb.append(\"    coordinates: \").append(toIndentedString(coordinates)).append(\"\\n\");\n    sb.append(\"    created: \").append(toIndentedString(created)).append(\"\\n\");\n    sb.append(\"    creatorId: \").append(toIndentedString(creatorId)).append(\"\\n\");\n    sb.append(\"    folderId: \").append(toIndentedString(folderId)).append(\"\\n\");\n    sb.append(\"    item: \").append(toIndentedString(item)).append(\"\\n\");\n    sb.append(\"    label: \").append(toIndentedString(label)).append(\"\\n\");\n    sb.append(\"    locationId: \").append(toIndentedString(locationId)).append(\"\\n\");\n    sb.append(\"    notes: \").append(toIndentedString(notes)).append(\"\\n\");\n    sb.append(\"}\");\n    return sb.toString();\n  }"} {"path":"downloaded/GetCharactersCharacterIdBookmarks200Ok.java","method_name":"toIndentedString","content":"/**\n   * Convert the given object to string with each line indented by 4 spaces\n   * (except the first line).\n   */\nprivate String toIndentedString(java.lang.Object o) {\n    if (o == null) {\n      return \"null\";\n    }\n    return o.toString().replace(\"\\n\", \"\\n    \");\n  }"} {"path":"downloaded/TestPlanTest.java","method_name":"getResourcePath","content":"/**\n\t * Tests if a {@link TestPlan} can be executed.\n\t */\nprivate String getResourcePath(String resource) {\n\t\ttry {\n\t\t\tEnumeration<URL> resources = TestPlanTest.class.getClassLoader().getResources(resource);\n\t\t\tif (resources.hasMoreElements())\n\t\t\t\treturn resources.nextElement().toString();\n\t\t} catch (IOException e) {\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\t\tthrow new IllegalArgumentException(\"no resources found\");\n\t}"} {"path":"downloaded/TestPlanTest.java","method_name":"createOutput","content":"/**\n\t * Creates an output file in the temporary folder for arbitrary key/value pairs coming from the given input\n\t * contract.\n\t * \n\t * @param input\n\t *        the input from which the values are read\n\t * @param outputFormatClass\n\t *        the output format\n\t * @return the {@link FileDataSinkContract} for the temporary file\n\t */\nprivate <K extends Key, V extends Value> FileDataSinkContract<K, V> createOutput(final Contract input,\n\t\t\tfinal Class<? extends FileOutputFormat<K, V>> outputFormatClass) {\n\t\ttry {\n\t\t\tfinal FileDataSinkContract<K, V> out = new FileDataSinkContract<K, V>(outputFormatClass, File.createTempFile(\n\t\t\t\t\"output\", null).toURI().toString(), \"Output\");\n\t\t\tout.setInput(input);\n\t\t\treturn out;\n\t\t} catch (IOException e) {\n\t\t\tfail(\"cannot create temporary output file\" + e);\n\t\t\treturn null;\n\t\t}\n\t}"} {"path":"downloaded/TestPlanTest.java","method_name":"createInput","content":"/**\n\t * Creates an {@link FileDataSourceContract} contract for the specified resource file in the temporary folder for\n\t * arbitrary key/value pairs coming from the given input\n\t * contract.\n\t * \n\t * @param input\n\t *        the input from which the values are read\n\t * @return the {@link FileDataSinkContract} for the temporary file\n\t */\nprivate <K extends Key, V extends Value> FileDataSourceContract<K, V> createInput(\n\t\t\tClass<? extends FileInputFormat<K, V>> inputFormat, String resource) {\n\t\tfinal FileDataSourceContract<K, V> read = new FileDataSourceContract<K, V>(inputFormat, getResourcePath(resource),\n\t\t\t\"Input\");\n\t\treturn read;\n\t}"} {"path":"downloaded/RegisterController.java","method_name":".POST})\n","content":"    /**\n     * 用户注册\n     * @re\n     */\n    @ApiOperation(value = \"用户注册 【客户端】\")\n    @RequestMapping(path = {\"/reg\"} ,method = {RequestMethod.POST})\n    public AjaxReturn redister(@ApiParam(name = \"account\", value = \"账号\") String account,\n                               @ApiParam(name = \"userPwd\", value = \"密码\") String userPwd,\n                               @ApiParam(name = \"nickName\", value = \"密码\") String nickName,\n                               HttpServletRequest request\n//                                ,\n//                               @ApiParam(name = \"code\", value = \"图片验证码\") String code,\n//                               @ApiParam(name = \"tokenKey\", value = \"图片验证码token\")  String tokenKey\n    ){\n        if (StringUtils.isBlank(account)){\n            return new AjaxReturn(501,\"手机号不能为空！\",null);\n        }\n        if (!PhoneUtil.isMobileNO(account)){\n            return new AjaxReturn(501,\"手机号不合法！\",null);\n        }\n        if (userPwd.length()<3){\n            return new AjaxReturn(501,\"密码应大于三位数！\",null);\n        }\n        if (StringUtils.isBlank(nickName)) {\n            return new AjaxReturn(501, \"昵称不能为空\", null);\n        }\n//        if (StringUtils.isBlank(code)) {\n//            return new AjaxReturn(501, \"验证码不能为空\", null);\n//        }\n//        String verification =(String) redisTemplate.opsForHash().get(Constants.KEY_VALIDATION, tokenKey);\n//        if (StringUtils.isBlank(verification) || StringUtils.isBlank(code)|| !StringUtils.equalsIgnoreCase(verification, code)) {\n//            return new AjaxReturn(501, \"验证码不正确\", null);\n//        }\n        FxUserInfo userInfo1 = userService.selectByUserName(account);\n        if (userInfo1==null) {\n            FxUserInfo userInfo = new FxUserInfo();\n            userInfo.setPhoneNo(account);\n            userInfo.setPassword(DigestUtils.md5Hex(userPwd));\n            userInfo.setCreateIp(RequestUtils.getIp(request));\n            userInfo.setNickName(nickName);\n            userInfo.setUserState(0);\n            userService.insertSelecti"} {"path":"downloaded/DrawDataParser.java","method_name":"doInBackground","content":"/**\n     * {@inheritDoc}\n     */\n@Override\n    protected DrawList doInBackground()\n    {\n        parseData();\n\n        return(drawList);\n    }"} {"path":"downloaded/SeleneseMethodListener.java","method_name":"resolveSelenesePaths","content":"/**\n     * locates all seleneses depends groups and annotation\n     * @param seleneseDir \n     * \n     * @param groups\n     * @param selenesePathsFromMethod\n     * @return\n     */\nprotected String[] resolveSelenesePaths(String seleneseDir, String[] groups, String[] selenesePathsFromMethod) {\n        SeleneseFileHandler seleneseFileHandler = new SeleneseFileHandler(seleneseDir, groups, selenesePathsFromMethod);\n        Set<String> absolutePathsSet = Arrays.stream(seleneseFileHandler.getAllFiles())\n            .map(file -> file.getAbsolutePath()).collect(Collectors.toSet());\n        if (absolutePathsSet.isEmpty())\n            new IllegalStateException(\"no seleneses were founded\");\n        return absolutePathsSet.toArray(new String[absolutePathsSet.size()]);\n    }"} {"path":"downloaded/SeleneseMethodListener.java","method_name":"afterInvocation","content":"/**\n     * locates all seleneses depends groups and annotation\n     * @param seleneseDir \n     * \n     * @param groups\n     * @param selenesePathsFromMethod\n     * @return\n     */\n@Override\n    public void afterInvocation(IInvokedMethod invokedMethod, ITestResult testResult) {\n        ITestNGMethod testMethod = invokedMethod.getTestMethod();\n        Method method = testMethod.getConstructorOrMethod().getMethod();\n        boolean annotationPresent = method != null && method.isAnnotationPresent(SeleneseMethodInfo.class);\n        if (!annotationPresent) {\n            return;\n        }\n        SeleneseMethodInfo seleneseMethodInfo = method.getAnnotation(SeleneseMethodInfo.class);\n        String globalConfParameter = testMethod.getXmlTest().getParameter(Constants.SELENESE_TEST_CONFIG_NAME);\n        Runner runner = SeleneseRunnerBuilder.getThreadLocalRunner(seleneseMethodInfo, globalConfParameter);\n        if (runner != null) {\n            runner.finish();\n        }\n    }"} {"path":"downloaded/DrawDataParser.java","method_name":"parseDrawInstruction","content":"/**\n     * Parse draw instruction.\n     */\nprivate Object parseDrawInstruction(String command)\n    {\n        splitConstructors(command);\n\n        return(null);\n    }"} {"path":"downloaded/DrawDataParser.java","method_name":"getDrawList","content":"/**\n     * Returns the parsed draw data.\n     *\n     * @return DrawList\n     */\npublic DrawList getDrawList()\n    {\n        return(drawList);\n    }"} {"path":"downloaded/LazyValue.java","method_name":"computedValue","content":"/** The model this is part of */\nprivate Value computedValue() {\n        if (computedValue == null)\n            computedValue = model.requireReferencedFunction(function).getBody().evaluate(context);\n        return computedValue;\n    }"} {"path":"downloaded/LazyValue.java","method_name":"type","content":"/** The model this is part of */\n@Override\n    public TensorType type() {\n        return model.requireReferencedFunction(function).returnType().get();\n    }"} {"path":"downloaded/LazyValue.java","method_name":"asDouble","content":"/** The model this is part of */\n@Override\n    public double asDouble() {\n        return computedValue().asDouble();\n    }"} {"path":"downloaded/LazyValue.java","method_name":"asTensor","content":"/** The model this is part of */\n@Override\n    public Tensor asTensor() {\n        return computedValue().asTensor();\n    }"} {"path":"downloaded/LazyValue.java","method_name":"hasDouble","content":"/** The model this is part of */\n@Override\n    public boolean hasDouble() {\n        return type().rank() == 0;\n    }"} {"path":"downloaded/LazyValue.java","method_name":"asBoolean","content":"/** The model this is part of */\n@Override\n    public boolean asBoolean() {\n        return computedValue().asBoolean();\n    }"} {"path":"downloaded/LazyValue.java","method_name":"negate","content":"/** The model this is part of */\n@Override\n    public Value negate() {\n        return computedValue().negate();\n    }"} {"path":"downloaded/LazyValue.java","method_name":"not","content":"/** The model this is part of */\n@Override\n    public Value not() {\n        return computedValue().not();\n    }"} {"path":"downloaded/LazyValue.java","method_name":"or","content":"/** The model this is part of */\n@Override\n    public Value or(Value value) {\n        return computedValue().or(value);\n    }"} {"path":"downloaded/LazyValue.java","method_name":"and","content":"/** The model this is part of */\n@Override\n    public Value and(Value value) {\n        return computedValue().and(value);\n    }"} {"path":"downloaded/LazyValue.java","method_name":"largerOrEqual","content":"/** The model this is part of */\n@Override\n    public Value largerOrEqual(Value value) {\n        return computedValue().largerOrEqual(value);\n    }"} {"path":"downloaded/LazyValue.java","method_name":"larger","content":"/** The model this is part of */\n@Override\n    public Value larger(Value value) {\n        return computedValue().larger(value);\n    }"} {"path":"downloaded/LazyValue.java","method_name":"smallerOrEqual","content":"/** The model this is part of */\n@Override\n    public Value smallerOrEqual(Value value) {\n        return computedValue().smallerOrEqual(value);\n    }"} {"path":"downloaded/LazyValue.java","method_name":"smaller","content":"/** The model this is part of */\n@Override\n    public Value smaller(Value value) {\n        return computedValue().smaller(value);\n    }"} {"path":"downloaded/LazyValue.java","method_name":"approxEqual","content":"/** The model this is part of */\n@Override\n    public Value approxEqual(Value value) {\n        return computedValue().approxEqual(value);\n    }"} {"path":"downloaded/LazyValue.java","method_name":"notEqual","content":"/** The model this is part of */\n@Override\n    public Value notEqual(Value value) {\n        return computedValue().notEqual(value);\n    }"} {"path":"downloaded/LazyValue.java","method_name":"equal","content":"/** The model this is part of */\n@Override\n    public Value equal(Value value) {\n        return computedValue().equal(value);\n    }"} {"path":"downloaded/LazyValue.java","method_name":"add","content":"/** The model this is part of */\n@Override\n    public Value add(Value value) {\n        return computedValue().add(value);\n    }"} {"path":"downloaded/LazyValue.java","method_name":"subtract","content":"/** The model this is part of */\n@Override\n    public Value subtract(Value value) {\n        return computedValue().subtract(value);\n    }"} {"path":"downloaded/LazyValue.java","method_name":"multiply","content":"/** The model this is part of */\n@Override\n    public Value multiply(Value value) {\n        return computedValue().multiply(value);\n    }"} {"path":"downloaded/LazyValue.java","method_name":"divide","content":"/** The model this is part of */\n@Override\n    public Value divide(Value value) {\n        return computedValue().divide(value);\n    }"} {"path":"downloaded/LazyValue.java","method_name":"modulo","content":"/** The model this is part of */\n@Override\n    public Value modulo(Value value) {\n        return computedValue().modulo(value);\n    }"} {"path":"downloaded/LazyValue.java","method_name":"power","content":"/** The model this is part of */\n@Override\n    public Value power(Value value) {\n        return computedValue().power(value);\n    }"} {"path":"downloaded/LazyValue.java","method_name":"function","content":"/** The model this is part of */\n@Override\n    public Value function(Function function, Value value) {\n        return computedValue().function(function, value);\n    }"} {"path":"downloaded/LazyValue.java","method_name":"asMutable","content":"/** The model this is part of */\n@Override\n    public Value asMutable() {\n        return computedValue().asMutable();\n    }"} {"path":"downloaded/LazyValue.java","method_name":"toString","content":"/** The model this is part of */\n@Override\n    public String toString() {\n        return \"value of \" + function;\n    }"} {"path":"downloaded/LazyValue.java","method_name":"equals","content":"/** The model this is part of */\n@Override\n    public boolean equals(Object other) {\n        if (other == this) return true;\n        if (!(other instanceof Value)) return false;\n        return computedValue().equals(other);\n    }"} {"path":"downloaded/LazyValue.java","method_name":"hashCode","content":"/** The model this is part of */\n@Override\n    public int hashCode() {\n        return computedValue().hashCode();\n    }"} {"path":"downloaded/LazyValue.java","method_name":"copyFor","content":"/** The model this is part of */\nLazyValue copyFor(Context context) {\n        return new LazyValue(this.function, context, model);\n    }"} {"path":"downloaded/CalEvent.java","method_name":"getEventID","content":"/**\n   * @return the eventID\n   */\npublic long getEventID() {\n    return eventID;\n  }"} {"path":"downloaded/CalEvent.java","method_name":"getOrigEmailID","content":"/**\n   * @return the origEmailID\n   */\npublic long getOrigEmailID() {\n    return origEmailID;\n  }"} {"path":"downloaded/CalEvent.java","method_name":"getDate","content":"/**\n   * @return the date\n   */\npublic String getDate() {\n    return date;\n  }"} {"path":"downloaded/CalEvent.java","method_name":"getTime","content":"/**\n   * @return the time\n   */\npublic String getTime() {\n    return time;\n  }"} {"path":"downloaded/CalEvent.java","method_name":"getMeetWithName","content":"/**\n   * @return the meetWithName\n   */\npublic String getMeetWithName() {\n    return meetWithName;\n  }"} {"path":"downloaded/CalEvent.java","method_name":"getMeetWithAddress","content":"/**\n   * @return the meetWithAddress\n   */\npublic String getMeetWithAddress() {\n    return meetWithAddress;\n  }"} {"path":"downloaded/CalEvent.java","method_name":"getHostUserID","content":"/**\n   * @return the hostUserID\n   */\npublic long getHostUserID() {\n    return hostUserID;\n  }"} {"path":"downloaded/CalEvent.java","method_name":"getSubject","content":"/**\n   * @return the subject\n   */\npublic String getSubject() {\n    return subject;\n  }"} {"path":"downloaded/CalEvent.java","method_name":"getEventNotes","content":"/**\n   * @return the eventNotes\n   */\npublic String getEventNotes() {\n    return eventNotes;\n  }"} {"path":"downloaded/CheckersEngine.java","method_name":"moveSquare","content":"/**\n\t * Creates a new row on the board\n\t * @param row is the row added to the board\n\t * @param start is the state the row begins with\n\t * @param end is the state the row ends with\n\t */\n@Override\n\tpublic void moveSquare(BoardSquareInfo target) {\n\t\tLog.d(LOG_TAG, \"Move square\");\n\t\t\n\t\t// Starting information must be set\n\t\tif (activeState == target.state) {\n\t\t\t\t\t\t\n\t\t\tif(isDevice())\n\t\t\t\treturn;\n\n\t\t\tif(activateSquare(target)) {\n\t\t\t\tLog.d(LOG_TAG, String.format(\"Square selected for play: %s\", target));\n\t\t\t}\n\t\t\treturn;\n\t\t} // end if\n\n\t\t// List of squares that should be modified between start and target squares\n\t\tArrayList<BoardSquareInfo> path = new ArrayList<BoardSquareInfo>();\n\t\t\n\t\tif (moveActiveSquare(activeSquare, target, PLAYER1_STATE, path) \n\t\t\t\t&& validatePath(activeSquare, target, path)) {\n\t\t\tLog.d(LOG_TAG, \"Move square completed\");\n\t\t\treturn; \n\t\t}\n\t\t\n\t\tif(moveActiveSquare(activeSquare, target, PLAYER2_STATE, path)\n\t\t\t\t&& validatePath(activeSquare, target, path)) {\n\t\t\tLog.d(LOG_TAG, \"Move square completed\");\n\t\t\treturn;\n\t\t}\n\n\t\tLog.d(LOG_TAG, \"Nothing was moved\");\n\t\tdetermineWinner();\n\t}"} {"path":"downloaded/CheckersEngine.java","method_name":"moveSquareForDevice","content":"/**\n\t * Creates a new row on the board\n\t * @param row is the row added to the board\n\t * @param start is the state the row begins with\n\t * @param end is the state the row ends with\n\t */\n@Override\n\tprotected void moveSquareForDevice() {\n\t\tLog.d(LOG_TAG, \"Moving square for device\");\n\t\t\n\t\tif(!isDevice())\n\t\t\treturn;\n\t\t\n\t\tint ubound = ROWS*COLUMNS;\n\t\tint tries = 0;\n\t\t\n\t\tBoardSquareInfo square = null;\n\t\twhile(!activateSquare(square) && tries++ <= ubound*NUM_OF_TRIES) {\n\t\t\tint id = random.nextInt(ubound);\n\t\t\tsquare = getData(id);\n\t\t} // end while\n\t\t\n\t\tif(activeSquare == null) {\n\t\t\tdetermineWinner();\n\t\t\treturn;\n\t\t} // end if\n\n\t\tpause(1);\n\t\t\n\t\t// 50/50 chance \n\t\tif(!activeSquare.isKing && random.nextInt(1) == 1) {\n\t\t\tBoardSquareInfo left = getData(activeSquare.row+1, activeSquare.column-1);\n\t\t\tBoardSquareInfo right = getData(activeSquare.row+1, activeSquare.column+1);\n\t\t\t\n\t\t\tif(left != null && left.state == EMPTY_STATE && \n\t\t\t   right != null && right.state == EMPTY_STATE) {\n\t\t\t\t\n\t\t\t\tactiveSquare.swap(((random.nextInt(1)==1)? right: left));\n\t\t\t\tswitchPlayer();\n\t\t\t\treturn;\n\t\t\t} \n\t\t\t\n\t\t\tif(left != null && left.state == EMPTY_STATE) {\n\t\t\t\tactiveSquare.swap(left);\n\t\t\t\tswitchPlayer();\n\t\t\t\treturn;\n\t\t\t} \n\t\t\t\n\t\t\tif(right != null && right.state == EMPTY_STATE) {\n\t\t\t\tactiveSquare.swap(right);\n\t\t\t\tswitchPlayer();\n\t\t\t\treturn;\n\t\t\t} // end if\n\t\t} // end if\n\t\t\n\t\ttries = 0;\n\t\twhile(isDevice() && tries++ <= ubound*NUM_OF_TRIES) {\n\t\t\tint id = random.nextInt(ubound);\n\t\t\tsquare = getData(id);\n\t\t\t\n\t\t\tif(square == null || square.state != EMPTY_STATE)\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\tmoveSquare(square);\n\t\t} // end while\n\t\t\n\t\tif(activeSquare != null) {\n\t\t\tLog.e(LOG_TAG, \"No available square for the device to move to\");\n\t\t\tdetermineWinner();\n\t\t\treturn;\n\t\t} // end if\n\t}"} {"path":"downloaded/CheckersEngine.java","method_name":"activateSquare","content":"/**\n\t * Tries to activate the current square\n\t * \n\t * @param target is a square to activate\n\t * @return\n\t */\nprivate boolean activateSquare(BoardSquareInfo target) {\n\t\tLog.d(LOG_TAG, \"Activating square info\");\n\n\t\tboolean active = false;\n\t\tif(target == null)\n\t\t\treturn active;\n\t\t\n\t\tif (activeState != target.state)\n\t\t\treturn active;\n\n\t\tif((active = target.equals(activeSquare)))\n\t\t\treturn active;\n\t\t\n\t\t// Check if square is movable\n\t\tif (isSquareMovable(target, PLAYER1_STATE,\ttarget.isKing) || \n\t\t\tisSquareMovable(target, PLAYER2_STATE,\ttarget.isKing)) {\n\n\t\t\tif (activeSquare != null) {\n\t\t\t\tactiveSquare.deactivate();\n\t\t\t\tLog.d(LOG_TAG, String.format(\"Deactivated square: %s\",\n\t\t\t\t\t\tactiveSquare));\n\t\t\t}\n\n\t\t\tactiveSquare = target;\n\t\t\tactiveSquare.activate();\n\t\t\tLog.d(LOG_TAG, String.format(\"Activated square: %s\", target));\n\n\t\t\tactive = true;\n\t\t} // end if\n\n\t\treturn active;\n\t}"} {"path":"downloaded/CheckersEngine.java","method_name":"isSquareMovable","content":"/**\n\t * Determines if the selected square is movable\n\t * \n\t * @param target is square to check\n\t * @param state is either PLAYER1_STATE or PLAYER2_STATE and used to determine row search direction\n\t * @isKing flag used to determine if search is greater than 1 level\n\t *  \n\t * @return false is successful, otherwise false\n\t */\nprivate boolean isSquareMovable(BoardSquareInfo target, int state, boolean isKing) {\n\t\tLog.d(LOG_TAG, String.format(\"Is square movable (recursive) square: %s, state: %s, isKing: %s\",target,state,isKing));\n\n\t\t// No need to check in opposite direction\n\t\tif (!isKing && state != activeState)\n\t\t\treturn false;\n\n\t\tif(ensureSquareMovable(target, state, isKing, /*backwards*/ true)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif(ensureSquareMovable(target, state, isKing, /*backwards*/ false)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}"} {"path":"downloaded/CheckersEngine.java","method_name":"ensureSquareMovable","content":"/**\n\t * Ensures the square is movable\n\t * \n\t * @param target is square to check\n\t * @param state is either PLAYER1_STATE or PLAYER2_STATE and used to determine row search direction\n\t * @isKing flag used to determine if search is greater than 1 level\n\t * @backwards flag used to determine column search direction\n\t * \n\t * @return false is successful, otherwise false\n\t */\nprivate boolean ensureSquareMovable(BoardSquareInfo target, int state,\tboolean isKing, boolean backwards) {\n\t\tLog.d(LOG_TAG, \"Ensure square movable\");\n\n\t\t// NOTE: THIS METHOD HELPS REDUCE DUPLICATE CODE\n\t\t\n\t\t// See note at class level\n\t\tint row = (state == PLAYER1_STATE) ? -1 : +1;\n\t\tint col = (backwards)? -1: +1;\n\t\t\n\t\tBoardSquareInfo square = getData(target.row + row, target.column + col);\t\t\n\t\tif (square != null) {\n\t\t\tLog.d(LOG_TAG, String.format(\"Square: %s\", square));\n\t\t\t\n\t\t\t// Square available\n\t\t\tif (square.state == EMPTY_STATE) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\t// Opponent square\n\t\t\tif(square.state != activeState) {\n\t\t\t\t// We need to peek at square directly after opponent's square\n\t\t\t\tboolean peekEmpty = isEmpty(square.row + row, square.column + col);\n\t\t\t\tif(peekEmpty) { \n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Continue checking at next level\n\t\t\t\tif(isKing && isSquareMovable(square, state, isKing)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} // end if\n\t\t} // end if\n\n\t\treturn false;\n\t}"} {"path":"downloaded/CheckersEngine.java","method_name":"moveActiveSquare","content":"/**\n\t * Tries to moving the active square to the target square\n\t * \n\t * @param start position of the selected square\n\t * @param target location for the selected square\n\t * @param state is either PLAYER1_STATE or PLAYER2_STATE and used to determine row search direction\n\t * @param path is the list of squares that should be modified between start and target squares\n\t * @return false is successful, otherwise false\n\t */\nprivate boolean moveActiveSquare(BoardSquareInfo start,\tBoardSquareInfo target, int state, ArrayList<BoardSquareInfo> path) {\n\t\tLog.d(LOG_TAG, \"Move active square (recursive)\");\n\t\tLog.d(LOG_TAG, String.format(\"*****start: %s\",start));\n\t\tLog.d(LOG_TAG, String.format(\"*****target: %s\",target));\n\t\tLog.d(LOG_TAG, String.format(\"*****state: %s\",state));\n\n\t\tif (start == null || target == null)\n\t\t\treturn false;\n\n\t\t// No need to check the opposite direction\n\t\tif (!activeSquare.isKing && state != activeState)\n\t\t\treturn false;\n\n\t\tif(searchBoardForTarget(start, target, state, /*backwards*/ true, path)) {\n\t\t\treturn true;\n\t\t} \n\n\t\tif(searchBoardForTarget(start, target, state, /*backwards*/ false, path)) {\n\t\t\treturn true;\n\t\t} \n\n\t\treturn false;\n\t}"} {"path":"downloaded/CheckersEngine.java","method_name":"searchBoardForTarget","content":"/**\n\t * Search the board for the target\n\t * \n\t * @param start position of the selected square\n\t * @param target location for the selected square\n\t * @param state is either PLAYER1_STATE or PLAYER2_STATE and used to determine row search direction\n\t * @backwards flag used to determine column search direction\n\t * @param path is the list of squares that should be modified between start and target squares\n\t *  \n\t * @return false is successful, otherwise false\n\t */\nprivate boolean searchBoardForTarget(BoardSquareInfo start, BoardSquareInfo target, int state, boolean backwards, ArrayList<BoardSquareInfo> path) {\n\t\tLog.d(LOG_TAG, \"Search board for target\");\n\t\tLog.d(LOG_TAG, String.format(\"*****start: %s\",start));\n\t\tLog.d(LOG_TAG, String.format(\"*****target: %s\",target));\n\t\tLog.d(LOG_TAG, String.format(\"*****state: %s\",state));\n\t\tLog.d(LOG_TAG, String.format(\"*****backwards: %s\",backwards));\n\t\t\n\t\t// NOTE: Revisit code to ensure logic correct, especially if \n\t\t//       I continue to add checks for cases not handled\n\t\t\n\t\t// See note at class level\n\t\tint row = (state == PLAYER1_STATE) ? -1 : +1;\n\t\tint col = (backwards)? -1: +1;\n\t\t\n\t\t// Check  side\n\t\tBoardSquareInfo square = getData(start.row + row, start.column + col);\n\t\tif (square == null) {\n\t\t\tLog.d(LOG_TAG, \"*****square evaluate to null\");\n\t\t\treturn false;\n\t\t}\n\n\t\tLog.d(LOG_TAG, String.format(\"*****square evaluated: %s\", square));\n\t\t\n\t\t// Found it\n\t\tif (target.equals(square)) {\n\t\t\tLog.d(LOG_TAG, \"*****target found\");\n\t\t\treturn true;\n\t\t} // end if\n\n\t\t// STOP, square states are the same\n\t\tif(square.state == activeState)\n\t\t\treturn false;\n\t\t\n\t\t// Peek at next square. \n\t\tBoardSquareInfo peek = getData(square.row + row, square.column + col);\n\t\tif(peek == null) {\n\t\t\tLog.d(LOG_TAG, \"*****peek is null\");\n\t\t\t\t\t\t\n\t\t\treturn false;\n\t\t} // end if\n\t\t\n\t\t// We know now that we can't jump move to peek\n\t\t// STOP, we can never find target on this path\n\t\tif(peek.state == activeState) {\n\t\t\tLog.d(LOG_TAG, \"*****stop, we can never move pass a square with same state\");\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// King allow to move over two consecutive empty squares\n \t\tif(activeSquare.isKing \n\t\t\t\t&& peek.state == EMPTY_STATE \n\t\t\t\t&& peek.state == square.state  \n\t\t\t\t&& moveActiveSquare(square,target,state,path)) {\n \t\t\tLog.d(LOG_TAG, \"*****king moved over two or more consecutive emtpy squares complete\");\n \t\t\tpath.add(square);\n\t\t\treturn true;\n \t\t}\n\t\t\n\t\t// We know peek isn't an empty square\n\t\t// STOP, never jump over two square with same state \n\t\tif(peek.state == square.state) {\n\t\t\tLog.d(LOG_TAG, \"*****stop, never jump over two squares with same state\");\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// Remove opponent\n\t\tif (square.state != EMPTY_STATE && moveActiveSquare(square, target, state,path)) {\n\t\t\tLog.d(LOG_TAG, String.format(\"*****removing opponent square: %s\", square));\n\t\t\tpath.add(square);\n\t\t\treturn true;\n\t\t}\n\n\t\t// Continue moving\n\t\tif(square.state == EMPTY_STATE && moveActiveSquare(square,target,state,path)) {\n\t\t\tLog.d(LOG_TAG, \"*****continue moving done\");\n\t\t\tpath.add(square);\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tLog.d(LOG_TAG, \"*****target not found on this path\");\n\t\treturn false;\n\t}"} {"path":"downloaded/CheckersEngine.java","method_name":"validatePath","content":"/**\n\t * Search the board for the target\n\t * \n\t * @param start position of the selected square\n\t * @param target location for the selected square\n\t * @param path is the list of squares that should be modified between start and target squares\n\t *  \n\t * @return false is successful, otherwise false\n\t */\nprivate boolean validatePath(BoardSquareInfo start, BoardSquareInfo target, ArrayList<BoardSquareInfo> path) {\n\t\tLog.d(LOG_TAG, String.format(\"Validating path: [%s]\",path));\n\t\t\n\t\t// Invalid if start and target row are separated \n\t\t// by 2 spaces and columns are the same\n\t\tboolean valid = !(Math.abs(start.row-target.row) == 2 \n\t\t\t\t&& start.column == target.column);\n\t\t\n\t\t// Invalid if start and target columns are separated \n\t\t// by 2 spaces and rows are the same\n\t\tvalid = valid && !(start.row == target.row\n\t\t\t\t&& Math.abs(start.column-target.column) == 2);\n\t\t\n\t\tif(valid && path.size() > 1) {\n\t\t\tBoardSquareInfo square = path.get(path.size()-2);\n\t\t\t\n\t\t\t// Invalid if start and target row are separated \n\t\t\t// by 2 spaces and columns are the same\n\t\t\tvalid = valid && !(Math.abs(square.row-target.row) == 2 \n\t\t\t\t\t&& square.column == target.column);\n\t\t\t\n\t\t\t// Invalid if start and target columns are separated \n\t\t\t// by 2 spaces and rows are the same\n\t\t\tvalid = valid && !(square.row == target.row\n\t\t\t\t\t&& Math.abs(square.column-target.column) == 2);\n\t\t}\n\t\t\n\t\tif(valid) {\n\t\t\tstart.swap(target);\n\t\t\tfor(BoardSquareInfo square : path) {\n\t\t\t\tsquare.makeEmpty();\n\t\t\t}\n\t\t\tswitchPlayer();\n\t\t}\n\t\t\n\t\treturn valid;\n\t}"} {"path":"downloaded/Debugger.java","method_name":"close","content":"/**\n     * Close the debugger.<br>\n     * Makes no action if the debugger was not initilized.\n     */\npublic static void close()\n    {\n        if(!info) return;\n        debugger.log.close();\n    }"} {"path":"downloaded/Debugger.java","method_name":"debugging","content":"/**\n     * Shows info if the debugger is working or not.<br>\n     * Makes no action if the debugger was not initilized.\n     * \n     * @return True if debugging, false otherwise\n     */\npublic static boolean debugging()\n    {\n        return info;\n    }"} {"path":"downloaded/Debugger.java","method_name":"print","content":"/** \n     * Print without a terminal newline.<br>\n     * Makes no action if the debugger was not initilized.\n     * \n     * @param strings Variable size list of objects,\n     *                which will have their 'toString()'\n     *                method used for being printed.\n     */\npublic static void print(Object ... strings)\n    {\n        if(!info) return;\n        for(Object s: strings) \n            debugger.log.print((s != null) ? s.toString() : \"null\");\n    }"} {"path":"downloaded/Debugger.java","method_name":"say","content":"/** \n     * Print with a terminal newline.<br>\n     * Makes no action if the debugger was not initilized.\n     * \n     * @param strings Variable size list of objects,\n     *                which will have their 'toString()'\n     *                method used for being printed.\n     */\npublic static void say(Object ... strings)\n    {\n        if(!info) return;\n        debugger.print(strings);\n        debugger.log.println();\n    }"} {"path":"downloaded/Debugger.java","method_name":"printf","content":"/** \n     * Print formatted.<br>\n     * Makes no action if the debugger was not initilized.\n     * \n     * @param format String with sequences of formats to\n     *               be printed.\n     * @param args   Variable size list of objects,\n     *               which will have their 'toString()'\n     *               method used for being printed.\n     */\npublic static void printf(String format, Object ... args)\n    {\n        if(!info) return;\n        debugger.log.printf(format, args);\n    }"} {"path":"downloaded/Phylum.java","method_name":"job","content":"/** {@inheritDoc} */\n@Override\n\tpublic org.apache.hadoop.mapreduce.Job job(final org.apache.hadoop.fs.Path[] ins, final org.apache.hadoop.fs.Path out, final boolean robust) throws java.io.IOException {\n\t\tfinal org.apache.hadoop.mapreduce.Job job = super.job(ins, out, robust);\n\n\t\tjob.setJobName(\"Phylum: \" + out);\n\n\t\tjob.setJarByClass(PhylumBoaMapper.class);\n\n\t\tjob.setMapperClass(PhylumBoaMapper.class);\n\t\tjob.setCombinerClass(PhylumBoaCombiner.class);\n\t\tjob.setReducerClass(PhylumBoaReducer.class);\n\n\t\treturn job;\n\t}"} {"path":"downloaded/Phylum.java","method_name":"run","content":"/** {@inheritDoc} */\n@Override\n\tpublic int run(String[] args) throws Exception {\n\t\tfinal org.apache.commons.cli.CommandLine line = parseArgs(args, getUsage());\n\t\targs = line.getArgs();\n\t\tif (args.length != 2) {\n\t\t\tSystem.err.println(\"Not enough arguments. Must give input directory and output directory.\");\n\t\t\tprintHelp(getUsage());\n\t\t}\n\n\t\tfinal boolean robust = line.hasOption(\"robust\");\n\t\tfinal int id;\n\t\tif (line.hasOption(\"job\"))\n\t\t\tid = Integer.parseInt(line.getOptionValue(\"job\"));\n\t\telse\n\t\t\tid = 0;\n\n\t\tfinal org.apache.hadoop.fs.Path[] ins = new org.apache.hadoop.fs.Path[1];\n\t\tins[0] = new org.apache.hadoop.fs.Path(args[0] + \"/annotations.seq\");\n\n\t\tfinal org.apache.hadoop.mapreduce.Job jb = job(ins, new org.apache.hadoop.fs.Path(args[1]), robust);\n\n\t\torg.apache.hadoop.conf.Configuration configuration = jb.getConfiguration();\n\n\t\tconfiguration.set(\"boa.input.dir\", args[0]);\n\t\tif (line.hasOption(\"ast\"))\n\t\t\tconfiguration.set(\"boa.ast.dir\", line.getOptionValue(\"ast\"));\n\t\tif (line.hasOption(\"comments\"))\n\t\t\tconfiguration.set(\"boa.comments.dir\", line.getOptionValue(\"comments\"));\n\n\t\tif (line.hasOption(\"splitsize\"))\n\t\t\tconfiguration.setInt(\"mapred.max.split.size\", Integer.parseInt(line.getOptionValue(\"splitsize\")));\n\t\telse\n\t\t\tconfiguration.setInt(\"mapred.max.split.size\", 67108864);\n\n\t\tif (line.hasOption(\"profile\")) {\n\t\t\tconfiguration.setBoolean(\"mapred.task.profile\", true);\n\t\t\tconfiguration.set(\"mapred.task.profile.maps\", \"1\");\n\t\t\tconfiguration.set(\"mapred.task.profile.reduces\", \"0\");\n\t\t\t//configuration.set(\"mapred.task.profile.params\", \"-agentlib:hprof=cpu=samples,heap=sites,force=n,thread=y,verbose=n,file=%s\");\n\t\t\tconfiguration.set(\"mapred.task.profile.params\", \"-agentlib:hprof=cpu=times,heap=sites,force=n,verbose=n,file=%s\");\n\t\t}\n\n\t\tjb.setInputFormatClass(org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat.class);\n\n\t\tjb.setNumReduceTasks(1);\n\n\t\tif (id > 0)\n\t\t\tconfiguration.setInt(\"boa.hadoop.jobid\", id);\n\t\tjb.waitForCompletion(false);\n\t\tif (id > 0)\n\t\t\tboa.io.BoaOutputCommitter.setJobID(jb.getJobID().toString(), id);\n\t\tSystem.err.println(\"Job ID: \" + jb.getJobID().toString());\n\n\t\tif (line.hasOption(\"block\")) {\n\t\t\tdouble lastSetup = -1;\n\t\t\tdouble lastMap = -1;\n\t\t\tdouble lastReduce = -1;\n\t\t\twhile (!jb.isComplete()) {\n\t\t\t\tfinal double newSetup = jb.setupProgress();\n\t\t\t\tfinal double newMap = jb.mapProgress();\n\t\t\t\tfinal double newReduce = jb.reduceProgress();\n\t\t\t\tif (newSetup != lastSetup) {\n\t\t\t\t\tlastSetup = newSetup;\n\t\t\t\t\tSystem.err.println(\"SETUP : \" + (newSetup * 100) + \"%\");\n\t\t\t\t}\n\t\t\t\tif (newMap != lastMap) {\n\t\t\t\t\tlastMap = newMap;\n\t\t\t\t\tSystem.err.println(\"MAP   : \" + (newMap * 100) + \"%\");\n\t\t\t\t}\n\t\t\t\tif (newReduce != lastReduce) {\n\t\t\t\t\tlastReduce = newReduce;\n\t\t\t\t\tSystem.err.println(\"REDUCE: \" + (newReduce * 100) + \"%\");\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep (500);\n\t\t\t\t} catch (final Exception e) {}\n\t\t\t}\n\t\t\tSystem.err.println(\"JOB FINISHED: \" + (jb.isSuccessful() ? \"Success\" : \"Failed\"));\n\t\t\treturn jb.isSuccessful() ? 0 : 1;\n\t\t}\n\t\treturn 0;\n\t}"} {"path":"downloaded/Phylum.java","method_name":"getUsage","content":"/** {@inheritDoc} */\npublic String getUsage() {\n\t\treturn \"<inputDir> <outputDir>\";\n\t}"} {"path":"downloaded/Phylum.java","method_name":"getMapper","content":"/** {@inheritDoc} */\n@Override\n\tpublic org.apache.hadoop.mapreduce.Mapper getMapper() {\n\t\treturn new PhylumBoaMapper();\n\t}"} {"path":"downloaded/Phylum.java","method_name":"getCombiner","content":"/** {@inheritDoc} */\n@Override\n\tpublic boa.runtime.BoaCombiner getCombiner() {\n\t\treturn new PhylumBoaCombiner();\n\t}"} {"path":"downloaded/Phylum.java","method_name":"getReducer","content":"/** {@inheritDoc} */\n@Override\n\tpublic boa.runtime.BoaReducer getReducer() {\n\t\treturn new PhylumBoaReducer();\n\t}"} {"path":"downloaded/BigramHistogram.java","method_name":"removeNonAlphabeticCharactersFrom","content":"/**\n     * This method removes all non-alphabetic characters from a string\n     * O(n), where n is the amount of strings per line\n     * @param text\n     * @return\n     */\npublic static String removeNonAlphabeticCharactersFrom(String text) {\n\n        // replacing \\r\\n\\t for a single space\n        text = text.replaceAll(\"[\\\\p{Cntrl}]\", \" \");\n\n        // strips off all non-alphabetic character:[\\p{Lower}\\p{Upper}] apart from a blank\n        text = text.replaceAll(\"[^\\\\p{Alpha}\\\\p{Blank}]\", \" \");\n\n        // remove extra spaces\n        text = text.replaceAll(\"\\\\s+\", \" \");\n\n        return text.trim();\n    }"} {"path":"downloaded/BigramHistogram.java","method_name":"buildBigramHistogramOf","content":"/**\n     * Main utility method that creates a bigram histogram, based on the provided filePath\n     *\n     * @param filePath\n     * @throws Exception\n     */\npublic Map<String, Integer> buildBigramHistogramOf(final File filePath) {\n        Map<String, Integer> bigramHistogramMap = new HashMap<>();\n\n        processFileEntries(filePath, bigramHistogramMap);\n\n        for (Map.Entry<String, Integer> entry : bigramHistogramMap.entrySet()) {\n            System.out.println(entry.getKey() + \" -> \" + entry.getValue());\n        }\n\n        return bigramHistogramMap;\n    }"} {"path":"downloaded/BigramHistogram.java","method_name":"addBigramHistogramEntry","content":"/**\n     * This method process a line of text that has been read from a BufferedReader,\n     * Removes all non alpha\n     *\n     * @param line\n     * @param previousWord\n     * @param bigramHistogramMap\n     * @return\n     */\npublic String addBigramHistogramEntry(String line, String previousWord,\n                                          Map<String, Integer> bigramHistogramMap) {\n\n        //-- O(n)\n        line = removeNonAlphabeticCharactersFrom(line);\n\n        if (line.equals(\"\")) {\n            return previousWord;\n        }\n\n        String[] tokens = line.split(\"\\\\s+\");\n        tokens[0] = tokens[0].toLowerCase();\n\n        String previousToken = previousWord.equals(\"\") ? tokens[0] : previousWord;\n\n        int offset = previousWord.equals(\"\") ? 1 : 0;\n\n        for (int i = offset; i < tokens.length; i++) {\n\n            if (tokens[i].equals(\"\")) {\n                continue;\n            }\n\n            tokens[i] = tokens[i].toLowerCase();\n\n            String key = previousToken + \" \" + tokens[i];\n            previousToken = tokens[i];\n\n            Integer frequency = bigramHistogramMap.get(key);\n\n            if (frequency == null) {\n                bigramHistogramMap.put(key, 1);\n            } else {\n                bigramHistogramMap.put(key, frequency + 1);\n            }\n        }\n\n        return previousToken;\n    }"} {"path":"downloaded/AddUser.java","method_name":"getOtp","content":"/**\n\t * \n\t */\npublic static String getOtp() {\n\t\treturn otp;\n\t}"} {"path":"downloaded/AddUser.java","method_name":"getProfilepic","content":"/**\n\t * \n\t */\npublic File getProfilepic() {\n\t\treturn profilepic;\n\t}"} {"path":"downloaded/AddUser.java","method_name":"getConfirmpassword","content":"/**\n\t * \n\t */\npublic String getConfirmpassword() {\n\t\treturn confirmpassword;\n\t}"} {"path":"downloaded/AddUser.java","method_name":"getCcode","content":"/**\n\t * \n\t */\npublic String getCcode() {\n\t\treturn ccode;\n\t}"} {"path":"downloaded/AddUser.java","method_name":"getUsername","content":"/**\n\t * \n\t */\npublic String getUsername() {\n\t\treturn username;\n\t}"} {"path":"downloaded/AddUser.java","method_name":"getEmail","content":"/**\n\t * \n\t */\npublic String getEmail() {\n\t\treturn email;\n\t}"} {"path":"downloaded/AddUser.java","method_name":"getPassword","content":"/**\n\t * \n\t */\npublic String getPassword() {\n\t\treturn password;\n\t}"} {"path":"downloaded/AddUser.java","method_name":"getGender","content":"/**\n\t * \n\t */\npublic String getGender() {\n\t\treturn gender;\n\t}"} {"path":"downloaded/AddUser.java","method_name":"getDob","content":"/**\n\t * \n\t */\npublic Date getDob() {\n\t\treturn dob;\n\t}"} {"path":"downloaded/AddUser.java","method_name":"getAddress","content":"/**\n\t * \n\t */\npublic String getAddress() {\n\t\treturn address;\n\t}"} {"path":"downloaded/AddUser.java","method_name":"getFirstname","content":"/**\n\t * \n\t */\npublic String getFirstname() {\n\t\treturn firstname;\n\t}"} {"path":"downloaded/AddUser.java","method_name":"getLastname","content":"/**\n\t * \n\t */\npublic String getLastname() {\n\t\treturn lastname;\n\t}"} {"path":"downloaded/AddUser.java","method_name":"getPhone","content":"/**\n\t * \n\t */\npublic long getPhone() {\n\t\treturn phone;\n\t}"} {"path":"downloaded/AddUser.java","method_name":"execute","content":"/**\n\t * \n\t */\npublic String execute() {\n\t\ttry {\n\t\t\tint i = getEmail().indexOf('@');\n\t\t\tString checkuser = getEmail().substring(0, i);\n\t\t\tcheckuser.replace(\"_\", \"__\");\n\t\t\tcheckuser.replace(\".\", \"_\");\n\t\t\tdate = new java.sql.Date(dob.getTime());\n\t\t\tSimpleDateFormat formatter = new SimpleDateFormat(\"yyyy/MM/dd\");\n\t\t\tstrDate = formatter.format(date);\n\t\t\tstrDate = strDate.replace('/', '-');\n\t\t\tSystem.out.println(\"date  show ====    \" + strDate);\n\t\t\t// Get the absolute path of file f\n\n\t\t\tConnection con = DBConnection.getConnection(); // creating\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// connection with\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// data base\n\t\t\tStatement st = (Statement) con.createStatement();\n\t\t\tResultSet rs = st.executeQuery(\"SELECT * FROM LOGIN WHERE email= '\" + checkuser + \"'\");\n\t\t\tif (!rs.next()) {\n\n\t\t\t\tif (getPassword().equals(getConfirmpassword())) {\n\t\t\t\t\tif (sendotp == 0) {\n\n\t\t\t\t\t\tnew Emailer().execute(email);\n\n\t\t\t\t\t\tsendotp = 1;\n\t\t\t\t\t\treturn \"1\";\n\n\t\t\t\t\t}\n\t\t\t\t\tif (otp.equals(Checkotp.otporg)) {\n\t\t\t\t\t\tSystem.out.println(\"otp sahi h +\");\n\t\t\t\t\t\ti = getEmail().indexOf('@');\n\t\t\t\t\t\tsetEmail(getEmail().substring(0, i));\n\t\t\t\t\t\tsetEmail(getEmail().replace(\"_\", \"__\"));\n\t\t\t\t\t\tsetEmail(getEmail().replace(\".\", \"_\"));\n\n\t\t\t\t\t\tinputStream = new FileInputStream(getProfilepic());\n\n\t\t\t\t\t\t// creating\n\t\t\t\t\t\t// connection with\n\t\t\t\t\t\tPreparedStatement ps1 = (PreparedStatement) con.prepareStatement(\n\t\t\t\t\t\t\t\t\"insert into register(username,email,password,firstname,lastname,gender,dateofbirth,phone,address,profilepic) values(?,?,?,?,?,?,?,?,?,?)\"); // Creating\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// PreparedStatement\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// object\n\t\t\t\t\t\tps1.setString(1, getUsername());\n\t\t\t\t\t\tps1.setString(2, getEmail());\n\t\t\t\t\t\tps1.setString(3, getPassword());\n\t\t\t\t\t\tps1.setString(4, getFirstname());\n\t\t\t\t\t\tps1.setString(5, getLastname());\n\t\t\t\t\t\tps1.setString(6, getGender());\n\t\t\t\t\t\tps1.setDate(7, date);\n\t\t\t\t\t\tps1.setLong(8, getPhone());\n\t\t\t\t\t\tps1.setString(9, getAddress());\n\t\t\t\t\t\tps1.setBinaryStream(10, inputStream);\n\t\t\t\t\t\tps1.executeUpdate();\n\t\t\t\t\t\tPreparedStatement ps = (PreparedStatement) con.prepareStatement(\"insert into login values(?,?,?)\"); // Creating PreparedStatement object\n\t\t\t\t\t\tps.setString(1, getUsername());\n\t\t\t\t\t\tps.setString(2, getEmail());\n\t\t\t\t\t\tps.setString(3, getPassword());\n\t\t\t\t\t\tps.executeUpdate(); // sending data of ps ( obj ) into database table named login\n\t\t\t\t\t\tCurrentUserInfo.setEmail(getEmail());\n\t\t\t\t\t\tCurrentUserInfo.setUsername(getUsername());\n\t\t\t\t\t\tCurrentUserInfo.setPassword(getPassword());\n\t\t\t\t\t\tSystem.out.println(CurrentUserInfo.getEmail());\n\t\t\t\t\t\tDBCreateTableFollower.CreateFollowerTable(CurrentUserInfo.getEmail());\n\t\t\t\t\t\tDBCreatePostTable.CreateTablePost(CurrentUserInfo.getEmail()); // Creating\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// post\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// table\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// of\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Users\n\t\t\t\t\t\tDBCreateNotify.CreateNotifyTable(CurrentUserInfo.getEmail());\n\t\t\t\t\t\tDBCreateStoryTable.CreateTableStory(CurrentUserInfo.getEmail());\n\t\t\t\t\t\tDBCreateInboxTable.CreateTableInbox(CurrentUserInfo.getEmail());\n\t\t\t\t\t\tDBCreateInboxTable.addToAllChats(CurrentUserInfo.getEmail(), CurrentUserInfo.getUsername());\n\t\t\t\t\t\tCurrentUserInfo.setEmail(getEmail());\n\t\t\t\t\t\tCurrentUserInfo.setPassword(getPassword());\n\t\t\t\t\t\tCurrentUserInfo.setUsername(getUsername());\n\t\t\t\t\t\t// post\n\t\t\t\t\t\treturn \"3\"; // sends to the welcome page\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tAddUser.errorOTPDoesNotMatch = 1;\n\t\t\t\t\t\tSystem.out.println(\"else chal raha\");\n\t\t\t\t\t\tsendotp = 0;\n\t\t\t\t\t\tusername = \"\";\n\t\t\t\t\t\temail = \"\";\n\t\t\t\t\t\tconfirmpassword = \"\";\n\t\t\t\t\t\tpassword = \"\";\n\t\t\t\t\t\tgender = \"\";\n\t\t\t\t\t\taddress = \"\";\n\t\t\t\t\t\tfirstname = \"\";\n\t\t\t\t\t\tlastname = \"\";\n\t\t\t\t\t\tccode = \"\";\n\t\t\t\t\t\tdob = null;\n\t\t\t\t\t\tsetPhone(0);\n\t\t\t\t\t\tstrDate = \"\";\n\t\t\t\t\t\tLogout.alert = 1;\n\t\t\t\t\t\treturn \"1\";\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\terrorPasswordIsDifferent = 1;\n\t\t\t\t\tSystem.out.println(\"password galat h\");\n\t\t\t\t\treturn \"1\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terrorAlreadyHaveAnAccount = 1;\n\t\t\t\tSystem.out.println(\"user already exist\");\n\t\t\t\treturn \"2\";\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"error aa rahi h\");\n\t\t\tSystem.out.println(e);\n\n\t\t}\n\n\t\treturn \"1\";// sends to error pages\n\n\t}"} {"path":"downloaded/AddUser.java","method_name":"getContext","content":"/**\n\t * \n\t */\npublic ServletContext getContext() {\n\t\treturn context;\n\t}"} {"path":"downloaded/DateUtil.java","method_name":"c static long ","content":"/**\n\t * 得到当前时间\n\t * @return　1358\n2733362\n\t */\n\tpublic static long getCurrentlong(){\n\t\treturn (new Date())"} {"path":"downloaded/DateUtil.java","method_name":"\n\t */\n\tpublic sta","content":"/**\n\t * 得到当前时间\n\t * @return　1358\neturn　1358822733362\n\t */\n\tpublic static String getCurrentlongStr(){\n\t\treturn String.v"} {"path":"downloaded/DateUtil.java","method_name":"\n\t */\n\tpubli","content":"/**\n\t * 得到当前时间\n\t * @return　1358\n=>yyyy-MM-dd HH:mm:ss\n\t */\n\tpublic static String dateToString(Date date) {\n\t\tjava.text.DateFormat df = new java.text.SimpleDateFormat(\n\t\t\t\t\"yyyy-MM-dd HH:mm:ss\");\n\t\tString s = df."} {"path":"downloaded/DateUtil.java","method_name":"\n\t */\n\tpubli","content":"/**\n\t * 得到当前时间\n\t * @return　1358\nn String====>yyyyMMdd\n\t */\n\tpublic static String dateToString(Date date, String format) {\n\t\tjava.text.DateFormat df = new java.text.SimpleDateFormat(format);\n\t\tString s = df."} {"path":"downloaded/DateUtil.java","method_name":"\n\t */\n\tpublic st","content":"/**\n\t * 得到当前时间\n\t * @return　1358\n=>2013-01-21 14:23:43\n\t */\n\tpublic static String longToDateString(long l) {\n\t\tSimpleDateFormat sdf= new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\t\tjava.util.Date dt = new Date(l);\n\t\tString sDateTime = null;\n\t\ttry {\n\t\t\t\n\t\t\tsDateTime = sdf.format(dt);  //得到精确到秒的表示：08/31/2006 21:08:00\n\t\t}catch(Exception e) {\n\t\t"} {"path":"downloaded/DateUtil.java","method_name":"22733362===>14:23:4","content":"/**\n\t * 得到当前时间\n\t * @return　1358\nm l\n\t * @return 1358822733362===>14:23:43\n\t */\n\tpublic static String longToDateStringHMS(long l) {\n\t\tSimpleDateFormat sdf= new SimpleDateFormat(\"HH:mm:ss\");\n\t\tjava.util.Date dt = new Date(l);\n\t\tString sDateTime = null;\n\t\ttry {\n\t\t\t\n\t\t\tsDateTime = sdf.format(dt);  //得到精确到秒的表示：08/31/2006 21:08:00\n\t\t}cat"} {"path":"downloaded/DateUtil.java","method_name":"\n\t * @return 135882","content":"/**\n\t * 得到当前时间\n\t * @return　1358\n/**\n\t * \n\t * @param l\n\t * @return 1358822733362===>2013-01-21\n\t */\n\tpublic static String longToDateStringYMD(long l) {\n\t\tSimpleDateFormat sdf= new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\tjava.util.Date dt = new Date(l);\n\t\tSt"} {"path":"downloaded/DateUtil.java","method_name":"aram strl\n\t * @r","content":"/**\n\t * 得到当前时间\n\t * @return　1358\n;\n\t}\n\t/**\n\t * \n\t * @param strl\n\t * @return 1358822733362===>2013-01-21 14:23:43\n\t */\n\tpublic static String longStrToDateStr(String strl) {\n\t\tif(null == strl || \"\".e"} {"path":"downloaded/DateUtil.java","method_name":" * @param longTime\n","content":"/**\n\t * 得到当前时间\n\t * @return　1358\ntrl));\n\t}\n\t/**\n\t * \n\t * @param longTime\n\t * @return 1358822733362===>2013-01-21\n\t */\n\tpublic static String longStrToDateStrYMD(String longTime) {\n\t\tif(null == lo"} {"path":"downloaded/DateUtil.java","method_name":"\t}\n\t\treturn long","content":"/**\n\t * 得到当前时间\n\t * @return　1358\nme) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn longToDateStringYMD(Long.parseLong(longTime));\n\t}\n\t\n\tpublic static String DateToLongString(Date d) {\n\t\tif(null == d || \"\".equals(d)) {\n\t\t\tretu"} {"path":"downloaded/DateUtil.java","method_name":"am str yyyy-","content":"/**\n\t * 得到当前时间\n\t * @return　1358\n358822733362\n\t * @param str yyyy-MM-dd\n\t * @return yyyy-MM-dd====>1358822733362\n\t */\n\tpublic static String StringToLong(String str) {\n\t\tif(null == str || str.equals(\"\")) {\n\t\t\treturn null; \n\t\t}\n\t\ttry {\n\t\t\tSimpleDateFormat sdf= new SimpleDateFormat(\"yy-MM-dd\");\n\t\t\tDate dt2 = sdf.parse(str);\n\t\t\tlong lTime = dt2.getT"} {"path":"downloaded/DateUtil.java","method_name":"hh:DD:ss\n\t * @","content":"/**\n\t * 得到当前时间\n\t * @return　1358\nparam str yyyy-MM-dd hh:DD:ss\n\t * @return yyyy-MM-dd hh:DD:ss====>1358822733362\n\t */\n\tpublic static String StringToLongss(String str) {\n\t\tif(null == str || str.equals(\"\")) {\n\t\t\treturn null; \n\t\t}\n\t\ttry {\n\t\t\tSimpleDateFormat sdf= new SimpleDateFormat(\"yy-MM-dd hh:DD:ss\");\n\t\t\tDate dt2 = sdf.parse(str);\n\t\t\tlong lTime = dt2.getT"} {"path":"downloaded/DateUtil.java","method_name":"3362\n\t * @param ","content":"/**\n\t * 得到当前时间\n\t * @return　1358\nMM-dd====>1358822733362\n\t * @param str\n\t * @return yyyy-MM-dd====>1358822733362\n\t */\n\tpublic static Long dateStringToLong(String str) {\n\t\tif(null == str || str.equals(\"\")) {\n\t\t\treturn null;\n\t\t}\n\t\ttry {\n\t\t\tSimpleDateFormat sdf= new SimpleDateFormat(\"yy-MM-dd\");\n\t\t\tDate dt2 = sdf.parse(str);\n\t\t\tlong "} {"path":"downloaded/DateUtil.java","method_name":"l;\n\t\t}\n\t}\n\t/**\n","content":"/**\n\t * 得到当前时间\n\t * @return　1358\non e) {\n\t\t\treturn null;\n\t\t}\n\t}\n\t/**\n\t * 加一天\n\t * @param str yy-MM-dd\n\t * @return\n\t */\n\tpublic static String addOneDayString(String str) {\n\t\tif(null == str || str.equals(\"\")) {\n\t\t\treturn null;\n\t\t}\n\t\ttry {\n\t\t\tSimpleDateFormat sdf= new SimpleDateFormat(\"yy-MM-dd\");\n\t\t\tDate dt2 = sdf.parse(str);\n\t\t\tlong lTime = dt2.getTime() + ON"} {"path":"downloaded/DateUtil.java","method_name":"}catch(Exception e) {\n\t","content":"/**\n\t * 得到当前时间\n\t * @return　1358\n.valueOf(lTime);\n\t\t}catch(Exception e) {\n\t\t\treturn null;\n\t\t}\n\t}\n\t/**\n\t * \n\t * @return\n\t */\n\tpublic static Date getFirstDateOfThisMonth(){\n\t\tCale"} {"path":"downloaded/DateUtil.java","method_name":".DATE,1);\n\t\treturn DelH","content":"/**\n\t * 得到当前时间\n\t * @return　1358\nce();\n\t\tcal.set(cal.DATE,1);\n\t\treturn DelHMS(cal.getTime());\n\t}\n\t/**\n\t * \n\t * @return\n\t */\n\tpublic static Date getFirstDateOfNextMonth() {\n\t\tCalendar cal = Calendar.getIn"} {"path":"downloaded/DateUtil.java","method_name":".MONTH, 1);\n\t\tcal.set(","content":"/**\n\t * 得到当前时间\n\t * @return　1358\nce();\n\t\tcal.add(cal.MONTH, 1);\n\t\tcal.set(cal.DATE,1);\n\t\treturn DelHMS(cal.getTime());\n\t}\n\t\n\tpublic static Date getLastDateOfThisMonth()  {\n\t\tCalendar cal = Calendar.getInstance();\n\t\tcal.add(cal.M"} {"path":"downloaded/DateUtil.java","method_name":".DATE,1);\n\t\tcal.add(ca","content":"/**\n\t * 得到当前时间\n\t * @return　1358\n, 1);\n\t\tcal.set(cal.DATE,1);\n\t\tcal.add(cal.DATE, -1);\n\t\treturn DelHMS(cal.getTime());\n\t}\n\t\n\tpublic static Date getFirstDateOfThisYear() {\n\t\tCalendar ca"} {"path":"downloaded/DateUtil.java","method_name":"e();\n\t\tcal.set(cal.DAY","content":"/**\n\t * 得到当前时间\n\t * @return　1358\nCalendar.getInstance();\n\t\tcal.set(cal.DAY_OF_YEAR,1);\n\t\treturn DelHMS(cal.getTime());\n\t}\n\t\n\tpublic static Date getFirstDateOfNextYear() {\n\t\tCalendar cal = Calendar.getInstance("} {"path":"downloaded/DateUtil.java","method_name":".getTime());\n\t}\n\t/**\n","content":"/**\n\t * 得到当前时间\n\t * @return　1358\n\t\treturn DelHMS(cal.getTime());\n\t}\n\t/**\n\t * \n\t * @return Tue Dec 31 00:00:00 CST 2013\n\t */\n\tpublic static Date getLastDateOfThisYear() {\n\t\tCalendar cal = Calendar.getInstance();\n\t\tcal.add(cal.YEAR, 1)"} {"path":"downloaded/DateUtil.java","method_name":"AR\t,1)","content":"/**\n\t * 得到当前时间\n\t * @return　1358\nl.set(cal.DAY_OF_YEAR\t,1);\n\t\tcal.add(cal.DATE, -1);\n\t\treturn DelHMS(cal.getTime());\n\t}\n\t\n\t\n\tpublic static Date DelHMS(Date d) {\n\t\tSimpleDateFormat sdf= new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\tString dateStr = sdf.format(d);\n\t\tDate d2 = null"} {"path":"downloaded/DateUtil.java","method_name":" d2;\n\t}\n\t\n\t/**\n","content":"/**\n\t * 得到当前时间\n\t * @return　1358\ne) {\n\t\t\t\n\t\t}\n\t\treturn d2;\n\t}\n\t\n\t/**\n\t * 某一天到1970年的天数差\n\t * @param dateLong\n\t * @return\n\t */\n\tpublic static String getDaysFrom1970(Long dateLong) {\n\t\tCalendar c = Calendar.getInstance();\n\t\tc.set(1970, 0"} {"path":"downloaded/DateUtil.java","method_name":"ays = (dateLong","content":"/**\n\t * 得到当前时间\n\t * @return　1358\n1,0,0,0);\n\t\t\n\t\tlong days = (dateLong - c.getTimeInMillis())/(ONE_HOUR*24);\n\t\treturn String.valueOf(days);\n\t}\n\tpublic static String getDaysFrom1970(String dateLong) {\n\t\ttry {\n\t\t\t\n\t\t\tLong date = Long.parseLong(date"} {"path":"downloaded/DateUtil.java","method_name":"rom1970(date);\n\t\t}catc","content":"/**\n\t * 得到当前时间\n\t * @return　1358\n);\n\t\t\treturn getDaysFrom1970(date);\n\t\t}catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn \"0\";\n\t\t}\n\t}\n\t\n\tpublic static String getDateFromDaysFromYMD(String date) {\n\t\tString result = \"0\";\n\t\ttry {\n\t\t\tCalendar c = Calendar.getInstance();\n\t\t\tc.set(1970, 0, 1,0,0,0);\n//\t\t\tSystem.out.println((Long.parseLong(date)) * ONE_HOUR *24-ONE_HOUR);\n\t\t\tresult = longStrToDateStrYMD(String.valueOf(((Long.pa"} {"path":"downloaded/DateUtil.java","method_name":"return resu","content":"/**\n\t * 得到当前时间\n\t * @return　1358\non e) {\n\t\t\t\n\t\t}\n\t\treturn result;\n\t}\n\t/**\n\t * \n\t * @param date1\n\t * @param date2\n\t * @return\t得到两个日期的天数之差\n\t */\n\tpublic static int daysBetween(Date date1,Date date2){  \n        Calendar cal = Calendar.getInstance();  \n        cal.setTime(date1);  \n        long time1 = cal.getTimeInMillis();               \n        cal.setTime(date2);  \n        long time2 = cal.getTimeInMillis();       \n        long "} {"path":"downloaded/DateUtil.java","method_name":"alueOf(betwee","content":"/**\n\t * 得到当前时间\n\t * @return　1358\n.parseInt(String.valueOf(between_days));         \n    }  \n\t/**\n\t * \n\t * @param date1\n\t * @param date2\n\t * @return 计算两个日期相差的月数\n\t */\n\tpublic static int monthsBetween( Date date2,Date date1) {\n\t\t  Calendar cal1 = new GregorianCalendar();\n\t\t  cal1.setTime(date1);\n\t\t  Calendar cal2 = new GregorianCalendar();\n\t\t  cal2.setTime(date2);\n\t\t  int c =(cal1.get(Calendar.YEAR) - cal2.get(Calendar.YEAR)) * 12 \n\t\t  \t\t + cal1.ge"} {"path":"downloaded/DateUtil.java","method_name":"r.DATE))/30;","content":"/**\n\t * 得到当前时间\n\t * @return　1358\n)-cal2.get(Calendar.DATE))/30;//计算两个日期之间的月数，如果天数有余数，则计算一个概要的月数\n\t\t  return c;\n\t}\n\t/**\n\t * \n\t * @param date1\n\t * @param date2\n\t * @return 计算两个日期相差的月数\n\t */\n\tpublic static int yearsBetween( Date date2,Date date1) {\n\t\t  Calendar cal1 = new GregorianCalendar();\n\t\t  cal1.setTime(date1);\n\t\t  Calendar cal2 = new GregorianCalendar();\n\t\t  cal2.setTime(date2);\n\t"} {"path":"downloaded/DateUtil.java","method_name":"AR)","content":"/**\n\t * 得到当前时间\n\t * @return　1358\n cal2.get(Calendar.YEAR)\n\t\t  \t\t + (cal1.get(Calendar.MONTH)- cal2.get(Calendar.MONTH))/12\n\t\t  \t\t +(cal1.get(Calendar.DATE)-cal2.get(Calendar.DATE))/365;//计算两个日期之间的年数，如果天数有余数，则计算一个概要的年数\n\t\t  return c;\n\t}\n\t/**\n\t * function:日期加n年n月n日\n\t */\n\tpublic static String add(String dateStr,Integer year,Integer month,Integer day){\n\t\tSimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\tCalendar calender = Calendar.getInstance();\n\t\ttry {\n\t\t\t\n\t\t\tDate date = format.parse(dateStr);\n\t\t\tcalender.setTime(date);\n\t\t\tif(year!=null && !\"\".equals(year)&& year != 0){\n\t\t\t\tcalender.add(Calendar.YEAR, year);\n\t\t\t}else if(month!=null &&"} {"path":"downloaded/JCardValue.java","method_name":"single","content":"/**\n\t * Creates a single-valued value.\n\t * @param value the value\n\t * @return the jCard value\n\t */\npublic static JCardValue single(Object value) {\n\t\treturn new JCardValue(new JsonValue(value));\n\t}"} {"path":"downloaded/JCardValue.java","method_name":"multi","content":"/**\n\t * Creates a multi-valued value.\n\t * @param values the values\n\t * @return the jCard value\n\t */\npublic static JCardValue multi(Object... values) {\n\t\treturn multi(Arrays.asList(values));\n\t}"} {"path":"downloaded/JCardValue.java","method_name":"multi","content":"/**\n\t * Creates a multi-valued value.\n\t * @param values the values\n\t * @return the jCard value\n\t */\npublic static JCardValue multi(List<?> values) {\n\t\tList<JsonValue> multiValues = new ArrayList<>(values.size());\n\t\tfor (Object value : values) {\n\t\t\tmultiValues.add(new JsonValue(value));\n\t\t}\n\t\treturn new JCardValue(multiValues);\n\t}"} {"path":"downloaded/JCardValue.java","method_name":"structured","content":"/**\n\t * <p>\n\t * Creates a structured value.\n\t * </p>\n\t * <p>\n\t * This method accepts a vararg of {@link Object} instances. {@link List}\n\t * objects will be treated as multi-valued components. Null objects will be\n\t * treated as empty components.\n\t * </p>\n\t * @param values the values\n\t * @return the jCard value\n\t */\npublic static JCardValue structured(Object... values) {\n\t\tList<List<?>> valuesList = new ArrayList<>(values.length);\n\t\tfor (Object value : values) {\n\t\t\tList<?> list = (value instanceof List) ? (List<?>) value : Collections.singletonList(value);\n\t\t\tvaluesList.add(list);\n\t\t}\n\t\treturn structured(valuesList);\n\t}"} {"path":"downloaded/JCardValue.java","method_name":"structured","content":"/**\n\t * Creates a structured value.\n\t * @param values the values\n\t * @return the jCard value\n\t */\npublic static JCardValue structured(List<List<?>> values) {\n\t\tList<JsonValue> array = new ArrayList<>(values.size());\n\n\t\tfor (List<?> list : values) {\n\t\t\tif (list.isEmpty()) {\n\t\t\t\tarray.add(new JsonValue(\"\"));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (list.size() == 1) {\n\t\t\t\tObject value = list.get(0);\n\t\t\t\tif (value == null) {\n\t\t\t\t\tvalue = \"\";\n\t\t\t\t}\n\t\t\t\tarray.add(new JsonValue(value));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tList<JsonValue> subArray = new ArrayList<>(list.size());\n\t\t\tfor (Object value : list) {\n\t\t\t\tif (value == null) {\n\t\t\t\t\tvalue = \"\";\n\t\t\t\t}\n\t\t\t\tsubArray.add(new JsonValue(value));\n\t\t\t}\n\t\t\tarray.add(new JsonValue(subArray));\n\t\t}\n\n\t\treturn new JCardValue(new JsonValue(array));\n\t}"} {"path":"downloaded/JCardValue.java","method_name":"getValues","content":"/**\n\t * Gets all the JSON values.\n\t * @return the JSON values\n\t */\npublic List<JsonValue> getValues() {\n\t\treturn values;\n\t}"} {"path":"downloaded/JCardValue.java","method_name":"asSingle","content":"/**\n\t * Gets the value of a single-valued property (such as {@link Note}).\n\t * @return the value or empty string if not found\n\t */\npublic String asSingle() {\n\t\tif (values.isEmpty()) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tJsonValue first = values.get(0);\n\t\tif (first.isNull()) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tObject obj = first.getValue();\n\t\tif (obj != null) {\n\t\t\treturn obj.toString();\n\t\t}\n\n\t\t//get the first element of the array\n\t\tList<JsonValue> array = first.getArray();\n\t\tif (array != null && !array.isEmpty()) {\n\t\t\tobj = array.get(0).getValue();\n\t\t\tif (obj != null) {\n\t\t\t\treturn obj.toString();\n\t\t\t}\n\t\t}\n\n\t\treturn \"\";\n\t}"} {"path":"downloaded/JCardValue.java","method_name":"asStructured","content":"/**\n\t * Gets the value of a structured property (such as {@link StructuredName}).\n\t * @return the values or empty list if not found\n\t */\npublic List<List<String>> asStructured() {\n\t\tif (values.isEmpty()) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\n\t\tJsonValue first = values.get(0);\n\n\t\t//[\"gender\", {}, \"text\", [\"M\", \"text\"] ]\n\t\tList<JsonValue> array = first.getArray();\n\t\tif (array != null) {\n\t\t\tList<List<String>> components = new ArrayList<>(array.size());\n\t\t\tfor (JsonValue value : array) {\n\t\t\t\tif (value.isNull()) {\n\t\t\t\t\tcomponents.add(Collections.<String>emptyList());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tObject obj = value.getValue();\n\t\t\t\tif (obj != null) {\n\t\t\t\t\tString s = obj.toString();\n\t\t\t\t\tList<String> component = s.isEmpty() ? Collections.<String>emptyList() : Collections.singletonList(s);\n\t\t\t\t\tcomponents.add(component);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tList<JsonValue> subArray = value.getArray();\n\t\t\t\tif (subArray != null) {\n\t\t\t\t\tList<String> component = new ArrayList<>(subArray.size());\n\t\t\t\t\tfor (JsonValue subArrayValue : subArray) {\n\t\t\t\t\t\tif (subArrayValue.isNull()) {\n\t\t\t\t\t\t\tcomponent.add(\"\");\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobj = subArrayValue.getValue();\n\t\t\t\t\t\tif (obj != null) {\n\t\t\t\t\t\t\tcomponent.add(obj.toString());\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (component.size() == 1 && component.get(0).isEmpty()) {\n\t\t\t\t\t\tcomponent.clear();\n\t\t\t\t\t}\n\t\t\t\t\tcomponents.add(component);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn components;\n\t\t}\n\n\t\t//get the first value if it's not enclosed in an array\n\t\t//[\"gender\", {}, \"text\", \"M\"]\n\t\tObject obj = first.getValue();\n\t\tif (obj != null) {\n\t\t\tList<List<String>> components = new ArrayList<>(1);\n\t\t\tString s = obj.toString();\n\t\t\tList<String> component = s.isEmpty() ? Collections.<String>emptyList() : Collections.singletonList(s);\n\t\t\tcomponents.add(component);\n\t\t\treturn components;\n\t\t}\n\n\t\t//[\"gender\", {}, \"text\", null]\n\t\tif (first.isNull()) {\n\t\t\tList<List<String>> components = new ArrayList<>(1);\n\t\t\tcomponents.add(Collections.<String>emptyList());\n\t\t\treturn components;\n\t\t}\n\n\t\treturn Collections.emptyList();\n\t}"} {"path":"downloaded/JCardValue.java","method_name":"asMulti","content":"/**\n\t * Gets the value of a multi-valued property (such as {@link Categories} ).\n\t * @return the values or empty list if not found\n\t */\npublic List<String> asMulti() {\n\t\tif (values.isEmpty()) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\n\t\tList<String> multi = new ArrayList<>(values.size());\n\t\tfor (JsonValue value : values) {\n\t\t\tif (value.isNull()) {\n\t\t\t\tmulti.add(\"\");\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tObject obj = value.getValue();\n\t\t\tif (obj != null) {\n\t\t\t\tmulti.add(obj.toString());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\treturn multi;\n\t}"} {"path":"downloaded/JCardValue.java","method_name":"equals","content":"/**\n\t * Gets the value of a multi-valued property (such as {@link Categories} ).\n\t * @return the values or empty list if not found\n\t */\n@Override\n\tpublic boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tJCardValue that = (JCardValue) o;\n\n\t\tif (values != null ? !values.equals(that.values) : that.values != null) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}"} {"path":"downloaded/JCardValue.java","method_name":"hashCode","content":"/**\n\t * Gets the value of a multi-valued property (such as {@link Categories} ).\n\t * @return the values or empty list if not found\n\t */\n@Override\n\tpublic int hashCode() {\n\t\treturn values != null ? values.hashCode() : 0;\n\t}"} {"path":"downloaded/ProtocolMessageFactory.java","method_name":"createBadProtocolMessage","content":"/**\n     * Create a protocol message with type BAD_REQUEST\n     * @param parameter the message parameter\n     * @return          a ProtocolMessage with\n     */\npublic static ProtocolMessage createBadProtocolMessage(String parameter) {\n        return new ProtocolMessage(ProtocolMessage.MessageType.BAD_REQUEST,\n                parameter);\n    }"} {"path":"downloaded/ProtocolMessageFactory.java","method_name":"createResponse","content":"/**\n     * Create a protocol message with type RESPONSE\n     * @param parameter\n     * @return\n     */\npublic static ProtocolMessage createResponse(String parameter) {\n        return new ProtocolMessage(ProtocolMessage.MessageType.RESPONSE,\n                parameter);\n    }"} {"path":"downloaded/ProtocolMessageFactory.java","method_name":"createRequest","content":"/**\n     * Create a protocol message with type REQUEST\n     * @param parameter\n     * @return\n     */\npublic static ProtocolMessage createRequest(String parameter) {\n        return new ProtocolMessage(ProtocolMessage.MessageType.REQUEST,\n                parameter);\n    }"} {"path":"downloaded/UboxHttp.java","method_name":"  * ","content":"/**\n\t * @author qipeng 2018/8/8\n\t * 测试参�\n��合ascii顺序)\n     * @param appKey 分配给第三方的app_key\n     */\n    public static String sign(TreeMap<String,Object> map,String appKey) throws Exception{\n        String datasSign=\"\";\n        for(String s:map.keySet()){\n        datasSign+=s+\"=\"+map.get(s);\n\n        }\n        datasSign+=\"_\"+appKey;\n\n        //签名算法\n        MessageDigest digest = java.security.MessageDigest.getInstance(\"SHA-1\");\n        digest.update(datasSign.getBytes());\n        byte messageDigest[] = digest.digest();\n\n        StringBuffer hexString = new StringBuffer();\n        // 字节数组转换为 十六进制 数\n        for (int i = 0; i < messageDigest.length; i++) {\n            String shaHex = Integer.toHexString(messageDigest[i] & 0xFF);\n            if (shaHex.length() < 2) {\n                hexString.app"} {"path":"downloaded/UboxHttp.java","method_name":"*\n     ","content":"/**\n\t * @author qipeng 2018/8/8\n\t * 测试参�\ning.toString();\n    }\n    \n    /**\n     * @param sortedMap\n     * @param url\n     * 请求uboxApi接口方法\n     * */\n    public static Map<String,Object> example(TreeMap<String,Object> sortedMap,String url) throws Exception{\n        \n        //请求地址\n        URL obj = new URL(url);\n        HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n        // http正文内，因此需要设为true, 默认情况下是false; \n        con.setDoOutput(true); \n\n        // 设置是否从httpUrlConnection读入，默认情况下是true; \n        con.setDoInput(true); \n\n        // Post 请求不能使用缓存 \n        con.setUseCaches(false); \n        con.setRequestProperty(\"Content-type\", \"application/x-www-form-urlencoded\"); \n        con.setRequestMethod(\"POST\");\n\n        //拼接url参数\n        String datas = \"\";\n        for(String s:sortedMap.keySet()){\n            datas+=s+\"=\"+sortedMap.get(s)+\"&\";\n        }\n\n        //拼接sign参数信息，获取sign\n        String datasWithSign=datas+\"sign=\"+sign(sortedMap,UboxConfigure.appKey);\n        //发送post请求  必须\n        con.setDoOutput(true);\n        DataOutputStream wr = new DataOutputStream(con.getOutputStream());\n        wr.write(datasWithSign.getBytes());\n        wr.flush();\n        wr.close();\n\n        BufferedReader in = new BufferedReader(\n        new InputStreamReader(con.getInputStream()));\n        String inputLine;\n        StringBuffer response = new StringBuffer();\n\n        while ((inputLine = in.readLine()) != null) {\n            response.append(inputLine);\n        }\n        in.close();\n        JSONObject parseObject = JSONObject.parseObject(response.toString());\n        System.out.println(\"parseObject\"+parseObject);\n        Map<String,Object> result = (Map)JSON.parse(parseObject.getString(\"head\"));\n        int object = (int) result.get(\"return_code\");\n        Map<String,Object> body = null;\n        if(object==200) {\n        \tbody = (Map)JSON.parse(parseObject.getString(\"body\"));\n        \tbody.put(\"return_code\", object);\n        }else {\n        \tbody = result;\n//        \tbody = new HashMap<>();\n//        \tint return_code =  ("} {"path":"downloaded/SnakeObj.java","method_name":"containsSnake","content":"/**\n\t * \n\t */\npublic boolean containsSnake(int xcoord, int ycoord) {\n\t\treturn (SnakeArray[xcoord][ycoord] == 1);\n\t}"} {"path":"downloaded/SnakeObj.java","method_name":"getPreferredSize","content":"/**\n\t * \n\t */\npublic Dimension getPreferredSize() {\n\t\treturn new Dimension(500, 500);\n\t}"} {"path":"downloaded/SurveyItemsService.java","method_name":"lic List<SurveyItems","content":"/**\n\t * 查询问卷调查题目下选项\n\t * @param surveySubjectId\n\t * @return\n\t * @throw\nDeodioException\n\t */\n\tpublic List<SurveyItems> querySurveyItemsList(String surveySubjectId) throws DeodioException {\n\t\t\n\t\tSurveyItemsExample example = new SurveyItemsExample();\n\t\texample.createCriteria().andSurveySubjectIdEqualTo(surveySubjectId);\n\t\texample.setOrderByClause(\"survey_items_order ASC\");\n\t\treturn surveyItemsMapper.select"} {"path":"downloaded/IdxWriter.java","method_name":"create","content":"/**\n\t * @param fc\n\t *            FeatureCollection\n\t * @param analyzedFields\n\t *            list of attributename\n\t */\npublic void create(FeatureCollection fc, List<String> analyzedFields) {\n\t\tif (writer == null)\n\t\t\treturn;\n\t\tfor (Iterator<Feature> it = fc.iterator(); it.hasNext();) {\n\t\t\tthis.write(it.next(), analyzedFields);\n\t\t}\n\t\tthis.close();\n\t}"} {"path":"downloaded/IdxWriter.java","method_name":": 控","content":"/**\n\t * build index writer,parameters contains:\n\t * <p>\n\t * mergeFactor(合并因子): 决定把磁盘上的索引块合并成一个大的索引块的频率，默认值为10 。 比如， 10个Segment 会被合并成一个新的 Segment\n\t * 。如果合并后的这个大的Segment的数量达到10的话还会被合并成一个更大的Segment 。直到 Segment中索引的文件数量达到maxMergeDocs时不在合并。\n\t * <p>\n\t * maxMergeDocs(最大合并文档数)：决定了一个索引块中的最大的文档数。默认值是 Integer.MAX_VALUE 。\n\t * <p>\n\t * maxBufferedDocs(\n�大内存文档数): 控制写入一个新的segment前内存中保存的document的数目， 设置较大的数目可以加快建索引速度，默认为10。\n\t * <p>\n\t * maxFieldLength(Field中最大Term数目)：超过部分忽略，不会index到field中，所以自然也就搜索不到。\n\t * <p>\n\t * RAMBufferSizeMB(缓存大小)：与maxBufferedDocs相当，默认值为16 。\n\t * \n\t * @param idxPath\n\t * @return\n\t */\n\tprivate IndexWriter build(String idxPath, Analyzer analyzer)"} {"path":"downloaded/IdxWriter.java","method_name":"onfig","content":"/**\n\t * build index writer,parameters contains:\n\t * <p>\n\t * mergeFactor(合并因子): 决定把磁盘上的索引块合并成一个大的索引块的频率，默认值为10 。 比如， 10个Segment 会被合并成一个新的 Segment\n\t * 。如果合并后的这个大的Segment的数量达到10的话还会被合并成一个更大的Segment 。直到 Segment中索引的文件数量达到maxMergeDocs时不在合并。\n\t * <p>\n\t * maxMergeDocs(最大合并文档数)：决定了一个索引块中的最大的文档数。默认值是 Integer.MAX_VALUE 。\n\t * <p>\n\t * maxBufferedDocs(\nIndexWriterConfig cfg = new IndexWriterConfig(Version.LUCENE_36, analyzer);\n\t\t\tcfg.setRAMBufferSizeMB(128);\n\t\t\tcfg.setMergePolicy(mergePolicy);\n\t\t\tIndexWriter writer = new IndexWriter(FSDirectory.open(new File(idxPath)), cfg);\n\t\t\treturn writer;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * @param f\n\t *            Feature\n\t * @param analyzedFields\n\t *            list of attributename\n\t */\n\tpublic void write(Feature f, List<String> analyzedFields) {\n\t\tif (writer == null)\n\t\t\treturn;\n\t\ttry {\n\t\t\tboolean afNull = (analyzedFields == null || analyzedFields.size() == 0);\n\t\t\tDocument doc = new Document();\n\t\t\tfor (int i = 0; i < f.getSchema().getAttributeCount(); i++) {\n\t\t\t\tString name = f.getSchema().getAttributeName(i);\n\t\t\t\tif (!afNull && analyzedFields.contains(name)) {\n\t\t\t\t\tdoc.add(new Field(name, f.getString(i), Field.Store.YES, Field.Index.ANALYZED_NO_NORMS));\n\t\t\t\t} else {\n\t\t\t\t\tAttributeType attrib = f.getSchema().getAttributeType(i);\n\t\t\t\t\tif (attrib == AttributeType.STRING && afNull) {\n\t\t\t\t\t\tdoc.add(new Field(name, f.getString(i), Field.Store.YES"} {"path":"downloaded/IdxWriter.java","method_name":"_NO_NORMS","content":"/**\n\t * build index writer,parameters contains:\n\t * <p>\n\t * mergeFactor(合并因子): 决定把磁盘上的索引块合并成一个大的索引块的频率，默认值为10 。 比如， 10个Segment 会被合并成一个新的 Segment\n\t * 。如果合并后的这个大的Segment的数量达到10的话还会被合并成一个更大的Segment 。直到 Segment中索引的文件数量达到maxMergeDocs时不在合并。\n\t * <p>\n\t * maxMergeDocs(最大合并文档数)：决定了一个索引块中的最大的文档数。默认值是 Integer.MAX_VALUE 。\n\t * <p>\n\t * maxBufferedDocs(\nield.Index.ANALYZED_NO_NORMS));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdoc.a"} {"path":"downloaded/IdxWriter.java","method_name":"me, f","content":"/**\n\t * build index writer,parameters contains:\n\t * <p>\n\t * mergeFactor(合并因子): 决定把磁盘上的索引块合并成一个大的索引块的频率，默认值为10 。 比如， 10个Segment 会被合并成一个新的 Segment\n\t * 。如果合并后的这个大的Segment的数量达到10的话还会被合并成一个更大的Segment 。直到 Segment中索引的文件数量达到maxMergeDocs时不在合并。\n\t * <p>\n\t * maxMergeDocs(最大合并文档数)：决定了一个索引块中的最大的文档数。默认值是 Integer.MAX_VALUE 。\n\t * <p>\n\t * maxBufferedDocs(\nnew Field(name, f.getString(i), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// geometry\n\t\t\tString str = f.getGeometry().toString();\n\t\t\tdoc."} {"path":"downloaded/MethodType.java","method_name":"getReturnType","content":"/**\n    * access for return_type field\n    *\n    * @return return type\n    */\nType getReturnType () { return return_type; }"} {"path":"downloaded/MethodType.java","method_name":"getArguments","content":"/**\n    * access for arguments \n    *\n    * @return arguemnets\n    */\nExpressionList getArguments () { return arguments; }"} {"path":"downloaded/MethodType.java","method_name":"getNumber","content":"/**\n    * access for number field\n    *\n    * @return number\n    */\nint getNumber () { return number; }"} {"path":"downloaded/MethodType.java","method_name":"getBody","content":"/**\n    * access for body field\n    *\n    * @return body\n    */\nCompoundSt getBody () { return body; }"} {"path":"downloaded/MethodType.java","method_name":"getMethod","content":"/**\n    * access for method field\n    *\n    * @return method\n    */\nClassMember getMethod () { return method; }"} {"path":"downloaded/SVGRectangle.java","method_name":"shapeConverter","content":"/**\n     * Get converter that translates an {@link SVGRectangle} to/from a {@link RectangularShape}.\n     * @return converter instance\n     */\npublic static Converter<SVGRectangle, RectangularShape> shapeConverter() {\n        return CONVERTER_INST;\n    }"} {"path":"downloaded/SVGRectangle.java","method_name":"getX","content":"/**\n     * Get converter that translates an {@link SVGRectangle} to/from a {@link RectangularShape}.\n     * @return converter instance\n     */\n@XmlAttribute\n    public double getX() {\n        return x;\n    }"} {"path":"downloaded/SVGRectangle.java","method_name":"getY","content":"/**\n     * Get converter that translates an {@link SVGRectangle} to/from a {@link RectangularShape}.\n     * @return converter instance\n     */\n@XmlAttribute\n    public double getY() {\n        return y;\n    }"} {"path":"downloaded/SVGRectangle.java","method_name":"getWidth","content":"/**\n     * Get converter that translates an {@link SVGRectangle} to/from a {@link RectangularShape}.\n     * @return converter instance\n     */\n@XmlAttribute\n    public double getWidth() {\n        return width;\n    }"} {"path":"downloaded/SVGRectangle.java","method_name":"getHeight","content":"/**\n     * Get converter that translates an {@link SVGRectangle} to/from a {@link RectangularShape}.\n     * @return converter instance\n     */\n@XmlAttribute\n    public double getHeight() {\n        return height;\n    }"} {"path":"downloaded/SVGRectangle.java","method_name":"getRx","content":"/**\n     * Get converter that translates an {@link SVGRectangle} to/from a {@link RectangularShape}.\n     * @return converter instance\n     */\n@XmlAttribute\n    public double getRx() {\n        return rx;\n    }"} {"path":"downloaded/SVGRectangle.java","method_name":"getRy","content":"/**\n     * Get converter that translates an {@link SVGRectangle} to/from a {@link RectangularShape}.\n     * @return converter instance\n     */\n@XmlAttribute\n    public double getRy() {\n        return ry;\n    }"} {"path":"downloaded/MethodType.java","method_name":"compare","content":"/**\n    * override\n    *\n    * @see Type\n    */\nint compare (Type type) throws TypeMismatch { \n    MethodType m_type;\n    int total_diff = 0;\n    \n    try {\n      m_type = (MethodType) type;\n    } catch (ClassCastException ex) {\n      throw new TypeMismatch ();\n    }\n\n    int diff;\n    int size = arguments.size ();\n    if (size != m_type.arguments.size ()) \n      throw new TypeMismatch ();\n\n    for (int i = 0; i < size; i++) {\n      Identifier this_arg = (Identifier) arguments.elementAt (i);\n      Expression target_arg = (Expression) m_type.arguments.elementAt (i);\n\n      diff = this_arg.type.compare (target_arg);\n      if (diff < 0) \n\tthrow new TypeMismatch ();\n      else if (diff > 0)\n\ttotal_diff = 1;\n    }\n\n    return total_diff;\n  }"} {"path":"downloaded/MethodType.java","method_name":"isMoreSpecific","content":"/**\n    * check this type is more specific, that is most applicable, than another\n    *\n    * @param type comparing signature\n    * @return if so true, otherwise false\n    */\nboolean isMoreSpecific (MethodType type) throws OverloadingAmbiguous {\n    boolean status = false;\n\n    try {\n      for (int i = 0, size = arguments.size (); i < size; i++) {\n\tIdentifier this_arg = (Identifier) arguments.elementAt (i);\n\tIdentifier target_arg = (Identifier) type.arguments.elementAt (i);\n\n\tint type_diff = this_arg.type.compare (target_arg.type);\n\tif (type_diff == 0)\n\t  continue;\n\telse if (type_diff > 0) {\n\t  if (status == true) throw new OverloadingAmbiguous ();\n\t} else {\n\t  if (i != 0) throw new OverloadingAmbiguous ();\n\t  status = true;\n\t}\n      }\n    } catch (OverloadingAmbiguous ex) {\n      throw ex;\n    } catch (TypeMismatch ex) {\n      throw new OverloadingAmbiguous ();\n    }\n\n    return status;\n  }"} {"path":"downloaded/MethodType.java","method_name":"toString","content":"/**\n    * override\n    */\npublic String toString () {\n    StringBuffer s = new StringBuffer ();\n  append:\n    if (Emitter.isEmitting ()) {\n      if (method.isNew ())\n\ts.append (\"Object\");\n      else\n\ts.append (return_type);\n      s.append(' ');\n      s.append(method);\n      s.append(\" (\");\n      s.append(arguments.toStringWithType());\n      s.append(')');\n\n      /* tempolary implmentation for exception test */\n      s.append (\" throws Exception \");\n    } else {\n      if (Emitter.isEmittingForBrowser ()) {\n\tif (method.isNew ()) {\n\t  s.append (\"c, \");\n\t  s.append (name);\n\t} else {\n\t  s.append (\"m, \");\n\t  s.append (name);\n\t  s.append (\", \");\n\t  s.append (\"0x\" + Integer.toHexString (method.getModifier () + \n\t\t\t\t\t\tmethod.getAccess ()));\n\t  s.append (\", \");\n\t  s.append (return_type);\n\t}\n\ts.append (\", (\");\n\tif (arguments.size () > 0) {\n\t  s.append (arguments.toStringOnlyType());\n\t}\n\ts.append (\")\");\n\n\tint start = method.getStart ();\n\tif (start == -1) break append;\n\n\ts.append (\", (\");\n\tif (referencing_classes != null) {\n\t  s.append (referencing_classes.toStringWithComma ());\n\t} \n\ts.append (\"), (\");\n\tif (instantiating_classes != null) {\n\t  s.append (instantiating_classes.toStringWithComma ());\n\t}\n\ts.append (\"), (\");\n\ts.append (start + \", \" + (method.getEnd () - start + 1));\n\ts.append (\", (\");\n\temitUsed (s);\n\ts.append (\"))\");\n      } else {\n\ts.append(name);\n\ts.append(\" (\");\n\ts.append(arguments.toStringOnlyType());\n\ts.append(')');\n      }\n    }\n    return s.toString ();\n  }"} {"path":"downloaded/MethodType.java","method_name":"emitBody","content":"/**\n    * pre-emit method body\n    *\n    * @param method_number method number\n    */\nvoid emitBody (int method_number) {\n    if (body == null) {\n      Emitter.emit (\";\");\n      return;\n    }\n\n    number = method_number;\n    \n    Emitter.emit (\"{\");\n    Emitter.indentPush ();\n\n    if (!method.isNew () && !method.isStatic () && \n\t(method.isPublic () || method.getDefinedClass ().isProtected ())) {\n      Emitter.emitln ();\n      Emitter.emit (\"checkSecureInvocation ();\");\n    }\n\n    if (method.isLocked () || method.isOnce ()) {\n      Emitter.emitln ();\n      Emitter.emitln (\"enter ();\");\n      Emitter.emit (\"try {\");\n      Emitter.indentPush ();\n    }\n\n    if (method.isOnce ()) \n      emitOnceBefore (method_number);\n\n    body.emitNoBrace ();\n\n    if (method.isNew () && need_return) {\n      Emitter.emitln ();\n      if (method.getDefinedClass ().isGlobal ())\n\tEmitter.emit (\"return null;\");\t\n      else\n\tEmitter.emit (\"return this;\");\n    }\n\n    if (method.isLocked () || method.isOnce ()) {\n      Emitter.indentPop ();\n      Emitter.emitln ();\n      Emitter.emit (\"} finally {\");\n      Emitter.indentPush ();\n      Emitter.emitln ();\n      Emitter.emit (\"leave ();\");\n      Emitter.indentPop ();\n      Emitter.emitln ();\n      Emitter.emit (\"}\");\n    }\n\n    Emitter.indentPop ();\n    Emitter.emitln ();\n    Emitter.emit (\"}\");\n    Emitter.emitln ();\n  }"} {"path":"downloaded/MethodType.java","method_name":"registerReferencing","content":"/**\n    * register class as referencing class to current method \n    *\n    * @param c class\n    */\nvoid registerReferencing (ClassType c) {\n    if (referencing_classes == null) \n      referencing_classes = new ClassList ();\n    else if (referencing_classes.contains (c)) \n      return;\n\n    referencing_classes.add (c);\n  }"} {"path":"downloaded/MethodType.java","method_name":"registerInstantiating","content":"/**\n    * register class as instantiating class to current method \n    *\n    * @param c class\n    */\nvoid registerInstantiating (ClassType c) {\n    if (instantiating_classes == null) \n      instantiating_classes = new ClassList ();\n    else if (instantiating_classes.contains (c)) \n      return;\n\n    instantiating_classes.add (c);\n  }"} {"path":"downloaded/MethodType.java","method_name":"emitUsed","content":"/**\n    * emit used classes for browser \n    *\n    * @param s string buffer for result\n    */\nvoid emitUsed (StringBuffer s) {\n    if (used_classes == null) return;\n\n    for (int i = 0, size = used_classes.size (); i < size; i++) {\n      ClassType c = (ClassType) used_classes.elementAt (i);\n      Integer pos = (Integer) used_class_offsets.elementAt (i);\n      s.append ('(');\n      s.append (pos.intValue ());\n      s.append (\", \");\n      s.append (c.getName ().length ());\n      s.append (\", \");\n      s.append (c.getFullyQualifiedClassID ());\n      if (i + 1 < size)\n\ts.append (\"), \");\n      else\n\ts.append (')');\n    }\n  }"} {"path":"downloaded/MethodType.java","method_name":"isAccessed","content":"/**\n    * check if an attribute was accessed here \n    *\n    * @param attr attribute\n    * @return if so true, otherwise false\n    */\nboolean isAccessed (ClassMember attr) {\n    if (accessed_attributes == null) {\n      accessed_attributes = new java.util.Vector ();\n    } else if (accessed_attributes.contains (attr)) {\n      return true;\n    } \n\n    accessed_attributes.addElement (attr);\n    return false;\n  }"} {"path":"downloaded/Engine.java","method_name":"draw","content":"/**\n\t * must invoke on main thread\n\t */\npublic void draw(Canvas canvas){\n\t\tRect rd = getDisplayRect();\n\t\tif(rd.isEmpty()){\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tcanvas.clipRect(rd);\n\t\t\n\t\tList<Component> cmpList = getComponentList();\n\t\tfor(Component c : cmpList){\n\t\t\tc.draw(canvas);\n\t\t}\n\t}"} {"path":"downloaded/Engine.java","method_name":"isEnabled","content":"/**\n\t * affect : touchevent, rotate method, crop method\n\t * @return\n\t */\npublic boolean isEnabled(){\n\t\treturn mEnabled;\n\t}"} {"path":"downloaded/Engine.java","method_name":"getView","content":"/**\n\t * affect : touchevent, rotate method, crop method\n\t * @return\n\t */\npublic View getView(){\n\t\tif(mView == null){\n\t\t\treturn null;\n\t\t}\n\t\treturn mView.get();\n\t}"} {"path":"downloaded/Engine.java","method_name":"getComponentList","content":"/**\n\t * affect : touchevent, rotate method, crop method\n\t * @return\n\t */\npublic List<Component> getComponentList(){\n\t\tif(mComponentList == null){\n\t\t\tmComponentList = new LinkedList<Component>();\n\t\t}\n\t\treturn mComponentList;\n\t}"} {"path":"downloaded/Engine.java","method_name":"getDisplayRect","content":"/**\n\t * affect : touchevent, rotate method, crop method\n\t * @return\n\t */\npublic Rect getDisplayRect(){\n\t\treturn mDisplayRect;\n\t}"} {"path":"downloaded/Engine.java","method_name":"getViewPaddingLeft","content":"/**\n\t * affect : touchevent, rotate method, crop method\n\t * @return\n\t */\npublic int getViewPaddingLeft(){\n\t\tView v = getView();\n\t\tif(v != null){\n\t\t\treturn v.getPaddingLeft();\n\t\t}\n\t\treturn 0;\n\t}"} {"path":"downloaded/Engine.java","method_name":"getViewPaddingTop","content":"/**\n\t * affect : touchevent, rotate method, crop method\n\t * @return\n\t */\npublic int getViewPaddingTop(){\n\t\tView v = getView();\n\t\tif(v != null){\n\t\t\treturn v.getPaddingTop();\n\t\t}\n\t\treturn 0;\n\t}"} {"path":"downloaded/Engine.java","method_name":"getViewPaddingRight","content":"/**\n\t * affect : touchevent, rotate method, crop method\n\t * @return\n\t */\npublic int getViewPaddingRight(){\n\t\tView v = getView();\n\t\tif(v != null){\n\t\t\treturn v.getPaddingRight();\n\t\t}\n\t\treturn 0;\n\t}"} {"path":"downloaded/Engine.java","method_name":"getViewPaddingBottom","content":"/**\n\t * affect : touchevent, rotate method, crop method\n\t * @return\n\t */\npublic int getViewPaddingBottom(){\n\t\tView v = getView();\n\t\tif(v != null){\n\t\t\treturn v.getPaddingBottom();\n\t\t}\n\t\treturn 0;\n\t}"} {"path":"downloaded/Climb.java","method_name":"getClimbMotorPercentPower","content":"/**\n\t * Returns the climb motor power setting\n\t * @return percentPower, -1 (climb) to +1 (fall)\n\t */\npublic double getClimbMotorPercentPower() {\n\t\treturn climbMotor2.getMotorOutputPercent();\n\t}"} {"path":"downloaded/BlockPane.java","method_name":"idDropped","content":"/**\n\t * Returns the ID of the items to drop on destruction.\n\t */\npublic int idDropped(int par1, EaglercraftRandom par2Random, int par3) {\n\t\treturn !this.canDropItself ? 0 : super.idDropped(par1, par2Random, par3);\n\t}"} {"path":"downloaded/BlockPane.java","method_name":"isOpaqueCube","content":"/**\n\t * Is this block (a) opaque and (b) a full 1m cube? This determines whether or\n\t * not to render the shared face of two adjacent blocks and also whether the\n\t * player can attach torches, redstone wire, etc to this block.\n\t */\npublic boolean isOpaqueCube() {\n\t\treturn false;\n\t}"} {"path":"downloaded/BlockPane.java","method_name":"renderAsNormalBlock","content":"/**\n\t * If this block doesn't render as an ordinary block it will return False\n\t * (examples: signs, buttons, stairs, etc)\n\t */\npublic boolean renderAsNormalBlock() {\n\t\treturn false;\n\t}"} {"path":"downloaded/BlockPane.java","method_name":"getRenderType","content":"/**\n\t * The type of render function that is called for this block\n\t */\npublic int getRenderType() {\n\t\treturn 18;\n\t}"} {"path":"downloaded/BlockPane.java","method_name":"canThisPaneConnectToThisBlockID","content":"/**\n\t * Gets passed in the blockID of the block adjacent and supposed to return true\n\t * if its allowed to connect to the type of blockID passed in. Args: blockID\n\t */\npublic final boolean canThisPaneConnectToThisBlockID(int par1) {\n\t\treturn Block.opaqueCubeLookup[par1] || par1 == this.blockID || par1 == Block.glass.blockID;\n\t}"} {"path":"downloaded/BlockPane.java","method_name":"canSilkHarvest","content":"/**\n\t * Return true if a player with Silk Touch can harvest this block directly, and\n\t * not its normal drops.\n\t */\nprotected boolean canSilkHarvest() {\n\t\treturn true;\n\t}"} {"path":"downloaded/BlockPane.java","method_name":"createStackedBlock","content":"/**\n\t * Returns an item stack containing a single instance of the current block type.\n\t * 'i' is the block's subtype/damage and is ignored for blocks which do not\n\t * support subtypes. Blocks which cannot be harvested should return null.\n\t */\nprotected ItemStack createStackedBlock(int par1) {\n\t\treturn new ItemStack(this.blockID, 1, par1);\n\t}"} {"path":"downloaded/ViewModel.java","method_name":"matchSizeOfTurtleActiveArrays","content":"/**\n\t * As we pop and push the active turtles, we will need to adjust the size of\n\t * the boolean arrays to reflect further turtle additions\n\t * \n\t * @param prevActive\n\t * @param nowActive\n\t */\nprivate List<Boolean> matchSizeOfTurtleActiveArrays(List<Boolean> prevActive, List<Boolean> nowActive) {\n\t\twhile (prevActive.size() > nowActive.size()) {\n\t\t\tnowActive.add(ViewModel.TELL_CMD_TURTLE_ACTIVE_DEFAULT);\n\t\t}\n\t\treturn nowActive;\n\t}"} {"path":"downloaded/ViewModel.java","method_name":"setPenColor","content":"/**\n\t * As we pop and push the active turtles, we will need to adjust the size of\n\t * the boolean arrays to reflect further turtle additions\n\t * \n\t * @param prevActive\n\t * @param nowActive\n\t */\n@Override\n\t    public double setPenColor(int index) throws PaletteException {\n\t        if(index >= colorListProperty.get().size()) {\n\t                throw new PaletteException(\"Out of Range\");\n\t        }\n\t        RGBColor newColor = colorListProperty.get(index);\n\t        penColor.set(newColor);\n\t        actors.actOnEachElement((a) -> a.setPenColor(newColor));\n\t        return index;\n\t    }"} {"path":"downloaded/ViewModel.java","method_name":"getStamps","content":"/**\n\t * As we pop and push the active turtles, we will need to adjust the size of\n\t * the boolean arrays to reflect further turtle additions\n\t * \n\t * @param prevActive\n\t * @param nowActive\n\t */\n@Override\n\tpublic List<Actor> getStamps() {\n\t\treturn stamps;\n\t}"} {"path":"downloaded/ViewModel.java","method_name":"getCurrentImage","content":"/**\n\t * As we pop and push the active turtles, we will need to adjust the size of\n\t * the boolean arrays to reflect further turtle additions\n\t * \n\t * @param prevActive\n\t * @param nowActive\n\t */\n@Override\n\tpublic ImageProperty getCurrentImage() {\n\t\treturn currentActiveImage;\n\t}"} {"path":"downloaded/Directuser.java","method_name":"onCreateOptionsMenu","content":"/** Called when the activity is first created. */\npublic boolean onCreateOptionsMenu(Menu menu) {\n        super.onCreateOptionsMenu(menu);\n        menu.add(0, 0, 0,\"Main Menu\");\n        return true;\n    }"} {"path":"downloaded/Directuser.java","method_name":"onMenuItemSelected","content":"/** Called when the activity is first created. */\n@Override\n    public boolean onMenuItemSelected(int featureId, MenuItem item) {\n        switch(item.getItemId()) {\n            case 0:\n            //    createNote();\n            \tfinish();\n                return true;\n        }\n\n        return super.onMenuItemSelected(featureId, item);\n    }"} {"path":"downloaded/Directuser.java","method_name":"isRouteDisplayed","content":"/** Called when the activity is first created. */\n@Override\n\tprotected boolean isRouteDisplayed() {\n\t\t// TODO Auto-generated method stub\n\t\treturn false;\n\t}"} {"path":"downloaded/PropertySheetTabOperator.java","method_name":"resolveParent","content":"/** In case contOper is operator of PropertySheet instance we need to \n     * return parent because in Property we search for PropertySheet in that\n     * parent.\n     */\nprivate static Container resolveParent(ContainerOperator contOper) {\n        if(contOper.getParent() == null) {\n            return (Container)contOper.getSource();\n        } else {\n            return contOper.getParent();\n        }\n    }"} {"path":"downloaded/PropertySheetTabOperator.java","method_name":"findPropertySheetTab","content":"/** Finds org.openide.explorer.propertysheet.PropertySheetTab in given\n     * container. On its parent (JTabbedPane) find a pane with given tabName\n     * and select that tab.\n     * @return JComponent representing PropertySheetTab, null if not found.\n     */\nprivate static JComponent findPropertySheetTab(ContainerOperator contOper, String tabName) {\n        ComponentChooser chooser = new PropertySheetTabChooser();\n        ComponentSearcher searcher = new ComponentSearcher((Container)contOper.getSource());\n        searcher.setOutput(TestOut.getNullOutput());\n        Component comp = searcher.findComponent(chooser);\n        if(comp == null) {\n            return null;\n        }\n        JTabbedPaneOperator tabbed = new JTabbedPaneOperator((JTabbedPane)comp.getParent());\n        int count = tabbed.getTabCount();\n        for(int i=0; i < count; i++) {\n            if(contOper.getComparator().equals(tabbed.getTitleAt(i), tabName)) {\n                tabbed.selectPage(i);\n                return (JComponent)tabbed.getSelectedComponent();\n            }\n        }\n        return null;\n    }"} {"path":"downloaded/PropertySheetTabOperator.java","method_name":"waitPropertySheetTab","content":"/** Waits for PropertySheetTab.\n     * @see #findPropertySheetTab()\n     */\nprivate static JComponent waitPropertySheetTab(final ContainerOperator contOper, \n                                                   final String tabName) {\n        try {\n            Waiter waiter = new Waiter(new Waitable() {\n                public Object actionProduced(Object obj) {\n                    return findPropertySheetTab(contOper, tabName);\n                }\n                public String getDescription() {\n                    return(\"Wait PropertySheetTab \\\"\"+tabName+\"\\\".\");\n                }\n            });\n            waiter.setOutput(JemmyProperties.getCurrentOutput());\n            return((JComponent)waiter.waitAction(null));\n        } catch(InterruptedException e) {\n            throw new JemmyException(\"Interrupted waiting for PropertySheetTab\");\n        }\n    }"} {"path":"downloaded/ScreenSize.java","method_name":" getWidt","content":" /**\n     * Obtiene el ancho de la pantalla\n     * @param display\n     * @return\n     *\n public static int getWidth(Display display){\n        int width;\n        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB_MR1) {  // > API 12\n            Point size = new Point();\n            display.getSize(size);\n            width = size.x;\n        } else {\n            width   = display.getWidth();\n        }\n        return  width;\n    "} {"path":"downloaded/ScreenSize.java","method_name":" getHeigh","content":" /**\n     * obtiene el alto de la pantalla\n     * @param display\n     * @return\n     *\n public static int getHeight(Display display){\n        int height;\n        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB_MR1) {  // > API 12\n            Point size = new Point();\n            display.getSize(size);\n            height = size.y;\n        } else {\n            height  = display.getHeight();\n        }\n        return height;\n    "} {"path":"downloaded/ScreenSize.java","method_name":"id setListViewHeightBasedOnChild","content":" /**\n     * Este método sirve para adaptar el listView al tamaño  de su contenido (Conflicto listView dentro de un scroll)\n     * @param listView\n    \n   public static void setListViewHeightBasedOnChildren(ListView listView) {\n        ListAdapter listAdapter = listView.getAdapter();\n        if (listAdapter == null) {\n            return;\n        }\n        int totalHeight = 0;\n        for (int i = 0, len = listAdapter.getCount(); i < len; i++) {\n            View listItem = listAdapter.getView(i, null, listView);\n            listItem.measure(0, 0);\n            totalHeight += listItem.getMeasuredHeight();\n        }\n        ViewGroup.LayoutParams params = listView.getLayoutParams();\n        params.height = totalHeight\n                + (listView.getDividerHeight() * (listAdapter.getCount() - 1));\n        listView.setLayoutParams(params);\n\n  "} {"path":"downloaded/CmsTagListDao.java","method_name":"urn\n\t *","content":"/**\n\t * 查询 内容标签 列表(不分页)\n\t * @author xxj add\n\t * @param CmsTagConte\n u \n\t * @return\n\t */\n\tpublic List getList(CmsTagList u){\n\t\treturn getList(\"CmsT"} {"path":"downloaded/CmsTagListDao.java","method_name":"\n\t\n\tpublic Cm","content":"/**\n\t * 查询 内容标签 列表(不分页)\n\t * @author xxj add\n\t * @param CmsTagConte\nst.getList\",u);\n\t}\n\t\n\tpublic CmsTagList getCmsTagList(CmsTagList u){\n\t\treturn (CmsTagList) getSqlSessionTemplate().selectOne(\n\t\t\t\t\"CmsTa"} {"path":"downloaded/ApprovalDAO.java","method_name":"\n\tpublic List qu","content":"/**\n\t * 查询待审批列表\n\t \n@return\n\t */\n\tpublic List queryApproveList(String userId, String posNo) {\n\t\tMap pMap = new HashMap();\n\t\tpMap.put(\"posNo\", posNo);\n\t\tpMap.put(\"userId\", userId);\n\t\t\n\t\treturn queryForList(\"QUERY_TO_APPROVE_LI"} {"path":"downloaded/ApprovalDAO.java","method_name":"aram posNo\n\t * @ret","content":"/**\n\t * 查询待审批列表\n\t \n\t * \n\t * @param posNo\n\t * @return\n\t */\n\tpublic Map queryApprovePosInfo(String posNo) {\n\t\tMap map = (Map)queryForObject(\"QUERY_POSINFO_FOR_APPROVE\", posNo);\n\t\t\n\t\tList<Map> list = queryForList(\"QUERY_POS_ATTACHMENT_LIST\", map.get(\"posNo\"));\n\t\tif(list!=null && list.size()>0){\n\t\t\tmap.put(\"attachFlag\", \"Y\");\n\t\t\tfor (int i = 0; i < list.size(); i++) {\n\t\t\t\tMap tmp = (Map)list.get(i);\n\t\t\t\tString phoneFileUrl = PlatformContext.getIMFileService().getFileURL((String)tmp.get(\"phoneFileId\"), new UrlSignature(), true, (String)tmp.get(\"phoneFileName\"), null, null);\n\t\t\t\ttmp.put(\"phoneFileUrl\", phoneFileUrl);\n\t\t\t}\n\t\t}\n\t\tmap.put(\""} {"path":"downloaded/ApprovalDAO.java","method_name":"��\n\t * \n\t * @para","content":"/**\n\t * 查询待审批列表\n\t \n��批的信息\n\t * \n\t * @param posNo、submitNo\n\t * @return\n\t */\n\tpublic List queryApprovedList(String posNo, String submitNo) {\n\t\tMap pMap = new HashMap();\n\t\tpMap.put(\"posNo\", posNo);\n\t\tpMap.put(\"submitNo\", "} {"path":"downloaded/ApprovalDAO.java","method_name":" 查询对应保","content":"/**\n\t * 查询待审批列表\n\t \n}\n\n\t/**\n\t * 查询对应保全相关问题件信息\n\t * \n\t * @param posNo\n\t * @return\n\t */\n\tpublic Map queryProblemInfo(String posNo) {\n\t\tMap pMap = new HashMap();\n\t\t\n\t\tList list = queryForList(\"QUERY_POS_PROBLEM_FLAG\", posNo);\n\t\tif (list != null && list.size() > 0) {\n\t\t\tpMap.put(\"problemFlag\", \"Y\");\n\t\t\tpMap.put(\"problemList\", list);\n\t\t\tfor (int i = 0; i < list.size(); i++) {\n\t\t\t\tMap map = (Map)list.get(i);\n\t\t\t\tif(\"2\".equals(map.get(\"PROBLEM_ITEM_TYPE\")) &&(\"1\".equals(map.get(\"PROBLEM_STATUS\"))||\"2\".equals(map.get("} {"path":"downloaded/ApprovalDAO.java","method_name":"n pMap;\n\t}\n\t\n\t/","content":"/**\n\t * 查询待审批列表\n\t \n\t}\n\t\t}\n\t\treturn pMap;\n\t}\n\t\n\t/**\n\t * 是否是审批不通过退回到受理人在审批\n\t * @param pMap\n\t * @"} {"path":"downloaded/ApprovalDAO.java","method_name":"�行及后�","content":"/**\n\t * 查询待审批列表\n\t \n�之前，插入行及后面的行序号增加1\n\t * @param pMap\n\t */\n\tpublic void updateApproveListNo(Map pMap) {\n\t\tgetSqlMapClientTemplate().update(sqlName(\"UPDATE_APPROVE_LIST_NO\"), pMap"} {"path":"downloaded/ApprovalDAO.java","method_name":"p = new HashMa","content":"/**\n\t * 查询待审批列表\n\t \nNo){\n\t\tMap pMap = new HashMap();\n\t\tpMap.put(\"posNo\", posNo);\n\t\t\n\t\tqueryForObject(\"PROC_APPROVE_POS\", pMap);\n\t\t\n\t\tif(\"2\".equals(pMap.get(\"approveFlag\"))){\n\t\t\tthrow new RuntimeException(\"\"+pMap.get(\"message\"));\n\t\t}\n\t}"} {"path":"downloaded/ApprovalDAO.java","method_name":"/\n\tpublic String po","content":"/**\n\t * posNo是否处于status状态\n\t * @param posNo\n\t * @param status\n\t *\nreturn Y N\n\t */\n\tpublic String posStatusCheck(String posNo, String status){\n\t\tMap pMap = new HashMap();\n\t\tpMap.put(\"posNo\", po"} {"path":"downloaded/ApprovalDAO.java","method_name":"\n\t\treturn (String)","content":"/**\n\t * posNo是否处于status状态\n\t * @param posNo\n\t * @param status\n\t *\nString posNo){\n\t\treturn (String)queryForObject(\"QUERY_POS_APPROVE_PROBLEM_CHECK\", posNo);\n\t}\n\n\t/**\n\t * 审批页面的提交操作有不能解决的重复提交问题\n\t * 在提交时锁定记录，防止重复操作\n\t * @param po"} {"path":"downloaded/ApprovalDAO.java","method_name":"oid lockPosApprov","content":"/**\n\t * posNo是否处于status状态\n\t * @param posNo\n\t * @param status\n\t *\n\t */\n\tpublic void lockPosApprove(String posNo){\n\t\tqueryForObject(\"SELECT_POS_APPROVE_FOR_UPDATE\", posNo);\n\t}\n\t\n\t/**\n\t * 审批前检查\n\t * @param posNo\n\t * @param submitNo\n\t * @param approveNo\n\t * @return\n\t */\n\tpublic String checkBeforeApprove(Map pMap){\n\t\tpMap.put(\"approver\", PlatformContext.getCurrentUser());\n\t\tString flag = (String)queryFor"} {"path":"downloaded/ApprovalDAO.java","method_name":"IT_APPROVE_N","content":"/**\n\t * posNo是否处于status状态\n\t * @param posNo\n\t * @param status\n\t *\nct(\"QUERY_SUBMIT_APPROVE_NO_CHECK\", pMap);\n\t\treturn StringUtils.isNotBlank(flag)?\"Y\":\"N\";\n\t}\n\t\n\tpublic String c"} {"path":"downloaded/ApprovalDAO.java","method_name":"ryForObject(\"QUERY_APP","content":"/**\n\t * posNo是否处于status状态\n\t * @param posNo\n\t * @param status\n\t *\n (String)queryForObject(\"QUERY_APPROVE_CHECK1\", posNo);//是否重复新建了审批流\n\t\t//String s2 = (String)queryForObj"} {"path":"downloaded/ApprovalDAO.java","method_name":"T\", userId);\n\t}\n\t","content":"/**\n\t * posNo是否处于status状态\n\t * @param posNo\n\t * @param status\n\t *\nIC_APPROVE_LIST\", userId);\n\t}\n\t\n\t/**\n\t * 移动保全\n\t * 更新pos_approve的审批人\n\t * @param pMap\n\t */\n\tpublic void updatePosApproveApp"} {"path":"downloaded/ApprovalDAO.java","method_name":"public void updateApprove","content":"/**\n\t * posNo是否处于status状态\n\t * @param posNo\n\t * @param status\n\t *\n�批\n\t * @param posNo\n\t */\n\tpublic void updateApproveDecisions(Map pMap){\n\t\t\n\t\tqueryForObject(\"update_approve_decisions\", pMap);\n\t\t\n\t"} {"path":"downloaded/ApprovalDAO.java","method_name":"\n\t\t\n\t\treturn posNo;","content":"/**\n\t * posNo是否处于status状态\n\t * @param posNo\n\t * @param status\n\t *\nPPROVE_DUPSUBMIT\", pMap);\n\t\t\n\t\t\n\t\treturn posNo;\n\t}\n\t\n\t/**\n\t * @Description: 根据oa回调的flowId查询审批表信息\n\t * @methodName: getPosApproveInfoByFlowId\n\t * @param flowId\n\t * @return\n\t * @return List<PosApproveInfo>\n\t * @author WangMingShun\n\t * @date 2015-11-20\n\t * @throws\n\t */\n\tpublic List<PosApproveInfo> getPosAppr"} {"path":"downloaded/ApprovalDAO.java","method_name":"* @return List<Po","content":"/**\n\t * posNo是否处于status状态\n\t * @param posNo\n\t * @param status\n\t *\nodName: getPosApproveInfo\n\t * @return List<PosApproveInfo>\n\t * @author WangMingShun\n\t * @date 2015-11-20\n\t * @throws\n\t */\n\tpublic List<PosApproveInfo> checkPosApproveInfo(String posNo,\n\t\t\tString submitNo, String approveNo) {\n\t\tMap<String, Object> paraMap = new Hash"} {"path":"downloaded/ApprovalDAO.java","method_name":"@methodName:","content":"/**\n\t * posNo是否处于status状态\n\t * @param posNo\n\t * @param status\n\t *\n生成的\n\t * @methodName: updateApproveOaApproveId\n\t * @param posNo\n\t * @param flowId\n\t * @return voi"} {"path":"downloaded/ApprovalDAO.java","method_name":"ing, Object>();\n\t\t","content":"/**\n\t * posNo是否处于status状态\n\t * @param posNo\n\t * @param status\n\t *\n HashMap<String, Object>();\n\t\tparaMap.put(\"posNo\", posNo);\n\t\tparaMap.put(\"submitNo\", submitNo);\n\t\tp"} {"path":"downloaded/FileEntryMap.java","method_name":"getName","content":"/**\n\t * @param b  \n\t */\npublic String getName() {\n\t\treturn file.getName();\n\t}"} {"path":"downloaded/28_55d0467c75307f8006c239ebf452c78d55f35cca_HMaster_t.java","method_name":"getInfoServer","content":"/** @return InfoServer object */\npublic InfoServer getInfoServer() {\n     return infoServer;\n   }"} {"path":"downloaded/28_55d0467c75307f8006c239ebf452c78d55f35cca_HMaster_t.java","method_name":"checkFileSystem","content":"/**\n    * Checks to see if the file system is still accessible.\n    * If not, sets closed\n    * @return false if file system is not available\n    */\nprotected boolean checkFileSystem() {\n     if (fsOk) {\n       try {\n         FSUtils.checkFileSystemAvailable(fs);\n       } catch (IOException e) {\n         LOG.fatal(\"Shutting down HBase cluster: file system not available\", e);\n         closed.set(true);\n         fsOk = false;\n       }\n     }\n     return fsOk;\n   }"} {"path":"downloaded/28_55d0467c75307f8006c239ebf452c78d55f35cca_HMaster_t.java","method_name":"getMasterAddress","content":"/** @return HServerAddress of the master server */\npublic HServerAddress getMasterAddress() {\n     return address;\n   }"} {"path":"downloaded/28_55d0467c75307f8006c239ebf452c78d55f35cca_HMaster_t.java","method_name":"getRootDir","content":"/**\n    * @return Hbase root dir.\n    */\npublic Path getRootDir() {\n     return this.rootdir;\n   }"} {"path":"downloaded/28_55d0467c75307f8006c239ebf452c78d55f35cca_HMaster_t.java","method_name":"getServersToServerInfo","content":"/**\n    * @return Read-only map of servers to serverinfo.\n    */\npublic Map<String, HServerInfo> getServersToServerInfo() {\n     return serverManager.getServersToServerInfo();\n   }"} {"path":"downloaded/28_55d0467c75307f8006c239ebf452c78d55f35cca_HMaster_t.java","method_name":"getServersToLoad","content":"/**\n    * @return Read-only map of servers to load.\n    */\npublic Map<String, HServerLoad> getServersToLoad() {\n     return serverManager.getServersToLoad();\n   }"} {"path":"downloaded/28_55d0467c75307f8006c239ebf452c78d55f35cca_HMaster_t.java","method_name":"getAverageLoad","content":"/** @return The average load */\npublic double getAverageLoad() {\n     return serverManager.getAverageLoad();\n   }"} {"path":"downloaded/28_55d0467c75307f8006c239ebf452c78d55f35cca_HMaster_t.java","method_name":"getRootRegionLocation","content":"/**\n    * @return Location of the <code>-ROOT-</code> region.\n    */\npublic HServerAddress getRootRegionLocation() {\n     HServerAddress rootServer = null;\n     if (!shutdownRequested && !closed.get()) {\n       rootServer = regionManager.getRootRegionLocation();\n     }\n     return rootServer;\n   }"} {"path":"downloaded/28_55d0467c75307f8006c239ebf452c78d55f35cca_HMaster_t.java","method_name":"getOnlineMetaRegions","content":"/**\n    * @return Read-only map of online regions.\n    */\npublic Map<byte [], MetaRegion> getOnlineMetaRegions() {\n     return regionManager.getOnlineMetaRegions();\n   }"} {"path":"downloaded/28_55d0467c75307f8006c239ebf452c78d55f35cca_HMaster_t.java","method_name":"processToDoQueue","content":"/**\n    * Try to get an operation off of the todo queue and perform it.\n    */\nprivate boolean processToDoQueue() {\n     RegionServerOperation op = null;\n     \n     // block until the root region is online\n     if (regionManager.getRootRegionLocation() != null) {\n       // We can't process server shutdowns unless the root region is online\n       op = delayedToDoQueue.poll();\n     }\n     \n     // if there aren't any todo items in the queue, sleep for a bit.\n     if (op == null ) {\n       try {\n         op = toDoQueue.poll(threadWakeFrequency, TimeUnit.MILLISECONDS);\n       } catch (InterruptedException e) {\n         // continue\n       }\n     }\n     \n     // at this point, if there's still no todo operation, or we're supposed to\n     // be closed, return.\n     if (op == null || closed.get()) {\n       return true;\n     }\n     \n     try {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Main processing loop: \" + op.toString());\n       }\n       \n       // perform the operation. \n       if (!op.process()) {\n         // Operation would have blocked because not all meta regions are\n         // online. This could cause a deadlock, because this thread is waiting\n         // for the missing meta region(s) to come back online, but since it\n         // is waiting, it cannot process the meta region online operation it\n         // is waiting for. So put this operation back on the queue for now.\n         if (toDoQueue.size() == 0) {\n           // The queue is currently empty so wait for a while to see if what\n           // we need comes in first\n           sleeper.sleep();\n         }\n         try {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Put \" + op.toString() + \" back on queue\");\n           }\n           toDoQueue.put(op);\n         } catch (InterruptedException e) {\n           throw new RuntimeException(\n             \"Putting into toDoQueue was interrupted.\", e);\n         }\n       }\n     } catch (Exception ex) {\n       // There was an exception performing the operation.\n       if (ex instanceof RemoteException) {\n         try {\n           ex = RemoteExceptionHandler.decodeRemoteException(\n             (RemoteException)ex);\n         } catch (IOException e) {\n           ex = e;\n           LOG.warn(\"main processing loop: \" + op.toString(), e);\n         }\n       }\n       // make sure the filesystem is still ok. otherwise, we're toast.\n       if (!checkFileSystem()) {\n         return false;\n       }\n       LOG.warn(\"Processing pending operations: \" + op.toString(), ex);\n       try {\n         // put the operation back on the queue... maybe it'll work next time.\n         toDoQueue.put(op);\n       } catch (InterruptedException e) {\n         throw new RuntimeException(\n           \"Putting into toDoQueue was interrupted.\", e);\n       } catch (Exception e) {\n         LOG.error(\"main processing loop: \" + op.toString(), e);\n       }\n     }\n     return true;\n   }"} {"path":"downloaded/BottomSheetChooserActivity.java","method_name":"onIntentChosen","content":"/**\n     * Called when user chooses from the chooser. Returning true will prevent the automatic\n     * handling which is to start the activity defined in the intent.\n     *\n     * Even if true is returned, history (if enabled) will be saved.\n     *\n     * @param intent      chosen intent\n     * @param resolveInfo resolveInfo related to chosen intent\n     * @return true to prevent automatic handling\n     */\npublic boolean onIntentChosen(Intent intent, ResolveInfo resolveInfo) {\n        return false;\n    }"} {"path":"downloaded/BottomSheetChooserActivity.java","method_name":"getHistory","content":"/**\n     * Sets the items which should be listed first in the chooser. First item in the list will be\n     * shown first. If history is enabled, history items will appear before the priority items.\n     *\n     * @param packageNames packageNames of the items which should be placed at the top\n     */\nprivate ChooserHistory getHistory() {\n        if (mHistory == null) {\n            mHistory = ChooserHistory.fromSettings(this);\n        }\n        return mHistory;\n    }"} {"path":"downloaded/28_55d0467c75307f8006c239ebf452c78d55f35cca_HMaster_t.java","method_name":"regionServerStartup","content":"/**\n    * Try to get an operation off of the todo queue and perform it.\n    */\n@SuppressWarnings(\"unused\")\n   public MapWritable regionServerStartup(HServerInfo serverInfo)\n   throws IOException {\n     // Set the address for now even tho it will not be persisted on\n     // the HRS side.\n     String rsAddress = Server.getRemoteAddress();\n     serverInfo.setServerAddress(new HServerAddress\n         (rsAddress, serverInfo.getServerAddress().getPort()));\n     // register with server manager\n     serverManager.regionServerStartup(serverInfo);\n     // send back some config info\n     return createConfigurationSubset();\n   }"} {"path":"downloaded/28_55d0467c75307f8006c239ebf452c78d55f35cca_HMaster_t.java","method_name":"createConfigurationSubset","content":"/**\n    * @return Subset of configuration to pass initializing regionservers: e.g.\n    * the filesystem to use and root directory to use.\n    */\nprotected MapWritable createConfigurationSubset() {\n     MapWritable mw = addConfig(new MapWritable(), HConstants.HBASE_DIR);\n     // Get the real address of the HRS.\n     String rsAddress = Server.getRemoteAddress();\n     if (rsAddress != null) {\n       mw.put(new Text(\"hbase.regionserver.address\"), new Text(rsAddress));\n     }\n     \n     return addConfig(mw, \"fs.default.name\");\n   }"} {"path":"downloaded/28_55d0467c75307f8006c239ebf452c78d55f35cca_HMaster_t.java","method_name":"addConfig","content":"/**\n    * @return Subset of configuration to pass initializing regionservers: e.g.\n    * the filesystem to use and root directory to use.\n    */\nprivate MapWritable addConfig(final MapWritable mw, final String key) {\n     mw.put(new Text(key), new Text(this.conf.get(key)));\n     return mw;\n   }"} {"path":"downloaded/28_55d0467c75307f8006c239ebf452c78d55f35cca_HMaster_t.java","method_name":"regionServerReport","content":"/**\n    * @return Subset of configuration to pass initializing regionservers: e.g.\n    * the filesystem to use and root directory to use.\n    */\npublic HMsg[] regionServerReport(HServerInfo serverInfo, HMsg msgs[], \n     HRegionInfo[] mostLoadedRegions)\n   throws IOException {\n     return serverManager.regionServerReport(serverInfo, msgs, \n       mostLoadedRegions);\n   }"} {"path":"downloaded/28_55d0467c75307f8006c239ebf452c78d55f35cca_HMaster_t.java","method_name":"isMasterRunning","content":"/**\n    * @return Subset of configuration to pass initializing regionservers: e.g.\n    * the filesystem to use and root directory to use.\n    */\npublic boolean isMasterRunning() {\n     return !closed.get();\n   }"} {"path":"downloaded/BottomSheetChooserActivity.java","method_name":"createAdapter","content":"/**\n     * Sets the items which should be listed first in the chooser. First item in the list will be\n     * shown first. If history is enabled, history items will appear before the priority items.\n     *\n     * @param packageNames packageNames of the items which should be placed at the top\n     */\nprivate ResolverAdapter createAdapter() {\n        Intent intent = getIntent();\n        if (intent.hasExtra(EXTRA_SHARE_INTENTS)) {\n            ArrayList<Intent> intents = intent.getParcelableArrayListExtra(EXTRA_SHARE_INTENTS);\n            return new ResolverAdapter(this, intents);\n        } else {\n            Intent shareIntent = intent.getParcelableExtra(EXTRA_SHARE_INTENT);\n            return new ResolverAdapter(this, shareIntent);\n        }\n    }"} {"path":"downloaded/28_55d0467c75307f8006c239ebf452c78d55f35cca_HMaster_t.java","method_name":"getTableRegions","content":"/**\n    * @return Subset of configuration to pass initializing regionservers: e.g.\n    * the filesystem to use and root directory to use.\n    */\nprivate List<Pair<HRegionInfo,HServerAddress>>\n   getTableRegions(final byte [] tableName) throws IOException {\n     List<Pair<HRegionInfo,HServerAddress>> result =\n         new ArrayList<Pair<HRegionInfo,HServerAddress>>();\n     Set<MetaRegion> regions = regionManager.getMetaRegionsForTable(tableName);\n     for (MetaRegion m: regions) {\n       byte [] metaRegionName = m.getRegionName();\n       HRegionInterface srvr = connection.getHRegionConnection(m.getServer());\n       long scannerid = \n         srvr.openScanner(metaRegionName, \n           new byte[][] {COL_REGIONINFO, COL_SERVER},\n           tableName, \n           LATEST_TIMESTAMP, \n           null);\n       try {\n         while (true) {\n           RowResult data = srvr.next(scannerid);\n           if (data == null || data.size() <= 0)\n             break;\n           HRegionInfo info = Writables.getHRegionInfo(data.get(COL_REGIONINFO));\n           if (Bytes.compareTo(info.getTableDesc().getName(), tableName) == 0) {\n             Cell cell = data.get(COL_SERVER);\n             if (cell != null) {\n               HServerAddress server =\n                 new HServerAddress(Bytes.toString(cell.getValue()));\n               result.add(new Pair<HRegionInfo,HServerAddress>(info, server));\n             }\n           } else {\n             break;\n           }\n         }\n       } finally {\n         srvr.close(scannerid);\n       }\n     }\n     return result;\n   }"} {"path":"downloaded/28_55d0467c75307f8006c239ebf452c78d55f35cca_HMaster_t.java","method_name":"getTableRegionClosest","content":"/**\n    * @return Subset of configuration to pass initializing regionservers: e.g.\n    * the filesystem to use and root directory to use.\n    */\nprivate Pair<HRegionInfo,HServerAddress>\n   getTableRegionClosest(final byte [] tableName, final byte [] rowKey)\n     throws IOException {\n     Set<MetaRegion> regions = regionManager.getMetaRegionsForTable(tableName);\n     for (MetaRegion m: regions) {\n       byte [] metaRegionName = m.getRegionName();\n       HRegionInterface srvr = connection.getHRegionConnection(m.getServer());\n       long scannerid = \n           srvr.openScanner(metaRegionName, \n             new byte[][] {COL_REGIONINFO, COL_SERVER},\n             tableName, \n             LATEST_TIMESTAMP, \n             null);\n       try {\n         while (true) {\n           RowResult data = srvr.next(scannerid);\n           if (data == null || data.size() <= 0)\n             break;\n           HRegionInfo info = Writables.getHRegionInfo(data.get(COL_REGIONINFO));\n           if (Bytes.compareTo(info.getTableDesc().getName(), tableName) == 0) {\n             if ((Bytes.compareTo(info.getStartKey(), rowKey) >= 0) &&\n                 (Bytes.compareTo(info.getEndKey(), rowKey) < 0)) {\n                 Cell cell = data.get(COL_SERVER);\n                 if (cell != null) {\n                   HServerAddress server =\n                     new HServerAddress(Bytes.toString(cell.getValue()));\n                   return new Pair<HRegionInfo,HServerAddress>(info, server);\n                 }\n             }\n           } else {\n             break;\n           }\n         }\n       } finally {\n         srvr.close(scannerid);\n       }\n     }\n     return null;\n   }"} {"path":"downloaded/28_55d0467c75307f8006c239ebf452c78d55f35cca_HMaster_t.java","method_name":"findRootRegion","content":"/**\n    * @return Subset of configuration to pass initializing regionservers: e.g.\n    * the filesystem to use and root directory to use.\n    */\npublic HServerAddress findRootRegion() {\n     HServerAddress rootServer = null;\n     if (!regionManager.inSafeMode()) {\n       rootServer = regionManager.getRootRegionLocation();\n     }\n     return rootServer;\n   }"} {"path":"downloaded/28_55d0467c75307f8006c239ebf452c78d55f35cca_HMaster_t.java","method_name":"getMetrics","content":"/**\n    * @return Server metrics\n    */\npublic MasterMetrics getMetrics() {\n     return this.metrics;\n   }"} {"path":"downloaded/28_55d0467c75307f8006c239ebf452c78d55f35cca_HMaster_t.java","method_name":"getConfiguration","content":"/**\n    * @return Return configuration being used by this server.\n    */\npublic HBaseConfiguration getConfiguration() {\n     return this.conf;\n   }"} {"path":"downloaded/28_55d0467c75307f8006c239ebf452c78d55f35cca_HMaster_t.java","method_name":"getHRegionInfo","content":"/**\n    * @return Return configuration being used by this server.\n    */\nHRegionInfo getHRegionInfo(final byte [] row, final Map<byte [], Cell> map)\n   throws IOException {\n     Cell regioninfo = map.get(COL_REGIONINFO);\n     if (regioninfo == null) {\n       StringBuilder sb =  new StringBuilder();\n       for (byte [] e: map.keySet()) {\n         if (sb.length() > 0) {\n           sb.append(\", \");\n         }\n         sb.append(Bytes.toString(e));\n       }\n       LOG.warn(Bytes.toString(COL_REGIONINFO) + \" is empty for row: \" +\n          Bytes.toString(row) + \"; has keys: \" + sb.toString());\n       return null;\n     }\n     return Writables.getHRegionInfo(regioninfo.getValue());\n   }"} {"path":"downloaded/UObjects.java","method_name":"��式\n \t *","content":"/**\n      * 将对象里面属性值为空（空白）字符串转\n��成为2017-7-20的格式\n \t * @param d\n \t * @return\n \t */\n \tpublic static String fomateDate(Date d) {\n\t\tString s=\"\";\n\t\ttry {\n\t\t\ts=new SimpleDateFormat(\"yyyy-MM-dd\")"} {"path":"downloaded/UObjects.java","method_name":" (Exc","content":"/**\n      * 将对象里面属性值为空（空白）字符串转\nrmat(d);\t\n\t\t} catch (Exception e) {\n\t\t\n\t\t}\t\n \t\treturn s;\n\t}\n\n\tpublic static Date parse(String ostimes) {\n\t\t\n\t\ttry {\n\t\t  return new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(ostimes);\n\t\t} catch (Exception e) {\n\t\t\t try {\n\t\t\t\treturn new SimpleDateFormat(\"yyyy-MM-dd HH:mm\").parse(ostimes"} {"path":"downloaded/UObjects.java","method_name":"tion e1) {\n\t\t\t\t","content":"/**\n      * 将对象里面属性值为空（空白）字符串转\n\n\t\t\t} catch (Exception e1) {\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\tpublic static int getIntervalDays(Date fDate, Date oDate) {\n\n\t       if (null == fDate || null == oDate) {\n\n\t           return -1;\n\n\t       }\n\n\t       long intervalMilli = oDate.getTime() - fDate.getTime();\n\n\t      "} {"path":"downloaded/MyRoutingDataSource.java","method_name":"determineCurrentLookupKey","content":"/**\n     * determineCurrentLookupKey\n     * @return obj\n     */\n@Nullable\n    @Override\n    protected Object determineCurrentLookupKey() {\n        DBTypeEnum dbTypeEnum = DBContextHolder.get();\n        if (dbTypeEnum != null && dbTypeEnum.equals(DBTypeEnum.SLAVE)) {\n            return dbTypeEnum;\n        } else {\n            return DBTypeEnum.MASTER;\n        }\n    }"} {"path":"downloaded/StatsController.java","method_name":"home","content":"/**\n     * The default constructor to initialize the page\n     * \n     * @param request\n     *            : the HttpRequest sent\n     * @return modelAndView\n     */\n@RequestMapping(method = RequestMethod.GET)\n    public ModelAndView home() {\n        page = new ModelAndView();\n        page.setViewName(\"Statistique\");\n        page.addObject(\"resources\", resourceService.listMainMenu());\n        page.addObject(\"proms\", articleService.getFiveLastProms());\n        page.addObject(\"mostPlayedClasses\", statsService.listXMostPlayedClasses(5));\n        page.addObject(\"mostPlayedRaces\", statsService.listXMostPlayedRaces(5));\n        page.addObject(\"mostPlayedSpecializations\", statsService.listXMostPlayedSpecialization(5));\n        page.addObject(\"usersWithoutAvatar\", statsService.listUsersWithoutAvatar());\n        page.addObject(\"mostActiveUsers\", statsService.listMostActiveUsers(5));\n        if (user != null)\n            page.addObject(\"userResources\", resourceService.listUserResources(user.getGroup().getId()));\n        return page;\n    }"} {"path":"downloaded/ChangePwdAction.java","method_name":"execute","content":"/**\n\t * \n\t */\npublic String execute() throws Exception {\n\t\t\n\t\tif(crudAction!=null && crudAction.length()!=0){\n\t\t\tSystem.out.println(account+\" \"+oldPassword+\" \"+newPassword);\n\t\t\tboolean change=service.changePassword(account, oldPassword, newPassword);\n\t\t\tif(change){\n\t\t\t\tSystem.out.println(\"成功\");\n\t\t\t\treturn Action.SUCCESS;\n\t\t\t}else{\n\t\t\t\tthis.addFieldError(\"changepwd\", this.getText(\"account.password.changepwd\"));\n\t\t\t\treturn Action.INPUT;\n\t\t\t}\n\t\t}else{\n\t\t\tthis.addFieldError(\"changepwd\", this.getText(\"account.password.input\"));\n\t\t\treturn Action.INPUT;\n\t\t"} {"path":"downloaded/ChangePwdAction.java","method_name":"ing getOldPass","content":"/**\n\t * \n\t */\n}\n\n\tpublic String getOldPassword() {\n\t\treturn oldPassword"} {"path":"downloaded/ChangePwdAction.java","method_name":"ing getNewPass","content":"/**\n\t * \n\t */\n}\n\n\tpublic String getNewPassword() {\n\t\treturn newPassword"} {"path":"downloaded/ChangePwdAction.java","method_name":"ing getAcc","content":"/**\n\t * \n\t */\n}\n\n\tpublic String getAccount() {\n\t\treturn account"} {"path":"downloaded/ChangePwdAction.java","method_name":"ing getCrudAc","content":"/**\n\t * \n\t */\n}\n\n\tpublic String getCrudAction() {\n\t\treturn crudAction"} {"path":"downloaded/TILDA__JOB_DETAIL_Factory.java","method_name":"Create","content":"/**\n Creates a new object in memory, which you can subsequently {@link #Write()} to the data store.\n current object to the destination. \n @param Id                     Id\n @param Job_Id                 Job Id\n*/\nstatic public tilda.data.Job_Detail_Data Create(int Id, int Job_Id) throws Exception\n     {\n       tilda.data._Tilda.TILDA__JOB_DETAIL Obj = new tilda.data.Job_Detail_Data();\n       Obj.initForCreate();\n\n\n       // Explicit setters\n       Obj.setId                    (Id                    );\n       Obj.setJob_Id                (Job_Id                );\n\n       // Default Create-time setters\n       Obj.setCreatedNow       ();\n       Obj.setLastUpdatedNow   ();\n\n       return (tilda.data.Job_Detail_Data) Obj;\n     }"} {"path":"downloaded/TILDA__JOB_DETAIL_Factory.java","method_name":"Create","content":"/**\n Creates a new object in memory, which you can subsequently {@link #Write()} to the data store.\n current object to the destination. \n @param Id                     Id\n @param Job_Id                 Job Id\n*/\nstatic public tilda.data.Job_Detail_Data Create(Map<String, String> Values, List<StringStringPair> Errors)\n   throws Exception\n     {\n       int IncomingErrors = Errors.size();\n\n       Integer        _Id                     =                       ParseUtil.parseInteger(\"Id\"                    , true , Values.get(\"Id\"                    ), Errors );\n       Integer        _Job_Id                 =                       ParseUtil.parseInteger(\"Job_Id\"                , true , Values.get(\"Job_Id\"                ), Errors );\n       String        _FileName               =                       ParseUtil.parseString(\"FileName\"              , false, Values.get(\"FileName\"              ), Errors );\n       Integer        _FileRecords            =                       ParseUtil.parseInteger(\"FileRecords\"           , false, Values.get(\"FileRecords\"           ), Errors );\n       ZonedDateTime        _FileProcessStartTime   =                       ParseUtil.parseZonedDateTime(\"FileProcessStartTime\"  , false, Values.get(\"FileProcessStartTime\"  ), Errors );\n       ZonedDateTime        _FileProcessEndTime     =                       ParseUtil.parseZonedDateTime(\"FileProcessEndTime\"    , false, Values.get(\"FileProcessEndTime\"    ), Errors );\n       String        _Status                 =                       ParseUtil.parseString(\"Status\"                , false, Values.get(\"Status\"                ), Errors );\n       String        _Error                  =                       ParseUtil.parseString(\"Error\"                 , false, Values.get(\"Error\"                 ), Errors );\n\n       if (IncomingErrors != Errors.size())\n        return null;\n\n      tilda.data.Job_Detail_Data Obj = tilda.data.Job_Detail_Factory.Create(_Id, _Job_Id);\n\n      if (_FileName              != null) Obj.setFileName              (_FileName              );\n      if (_FileRecords           != null) Obj.setFileRecords           (_FileRecords           );\n      if (_FileProcessStartTime  != null) Obj.setFileProcessStartTime  (_FileProcessStartTime  );\n      if (_FileProcessEndTime    != null) Obj.setFileProcessEndTime    (_FileProcessEndTime    );\n      if (_Status                != null) Obj.setStatus                (_Status                );\n      if (_Error                 != null) Obj.setError                 (_Error                 );\n\n      return Obj;\n     }"} {"path":"downloaded/TILDA__JOB_DETAIL_Factory.java","method_name":"LookupByJob_File_Id","content":"/**\n Creates a new object in memory, which you can subsequently {@link #Write()} to the data store.\n current object to the destination. \n @param Id                     Id\n @param Job_Id                 Job Id\n*/\nstatic public tilda.data.Job_Detail_Data LookupByJob_File_Id(int Id, int Job_Id) throws Exception\n     {\n       tilda.data._Tilda.TILDA__JOB_DETAIL Obj = new tilda.data.Job_Detail_Data();\n       Obj.initForLookup(0);\n\n       Obj.setId                    (Id                    ); \n       Obj.setJob_Id                (Job_Id                ); \n\n       return (tilda.data.Job_Detail_Data) Obj;\n     }"} {"path":"downloaded/TILDA__JOB_DETAIL_Factory.java","method_name":"newSelectQuery","content":"/**\n Creates a new object in memory, which you can subsequently {@link #Write()} to the data store.\n current object to the destination. \n @param Id                     Id\n @param Job_Id                 Job Id\n*/\npublic static SelectQuery newSelectQuery(Connection C) throws Exception { return new SelectQuery(C, SCHEMA_LABEL, TABLENAME_LABEL, true); }"} {"path":"downloaded/TILDA__JOB_DETAIL_Factory.java","method_name":"newWhereQuery","content":"/**\n Creates a new object in memory, which you can subsequently {@link #Write()} to the data store.\n current object to the destination. \n @param Id                     Id\n @param Job_Id                 Job Id\n*/\npublic static SelectQuery newWhereQuery (Connection C) throws Exception { return new SelectQuery(C, SCHEMA_LABEL, TABLENAME_LABEL, false); }"} {"path":"downloaded/TILDA__JOB_DETAIL_Factory.java","method_name":"runSelect","content":"/**\n Creates a new object in memory, which you can subsequently {@link #Write()} to the data store.\n current object to the destination. \n @param Id                     Id\n @param Job_Id                 Job Id\n*/\npublic static ListResults<tilda.data.Job_Detail_Data> runSelect(Connection C, SelectQuery Q, int Start, int Size) throws Exception\n     {\n       RecordProcessorInternal RPI = new RecordProcessorInternal(C, Start);\n       ReadMany(C, -7, RPI, null, Q, Start, Size);\n       return RPI._L;\n     }"} {"path":"downloaded/TILDA__JOB_DETAIL_Factory.java","method_name":"newUpdateQuery","content":"/**\n Creates a new object in memory, which you can subsequently {@link #Write()} to the data store.\n current object to the destination. \n @param Id                     Id\n @param Job_Id                 Job Id\n*/\npublic static UpdateQuery newUpdateQuery(Connection C) throws Exception { return new UpdateQuery(C, SCHEMA_LABEL, TABLENAME_LABEL); }"} {"path":"downloaded/TILDA__JOB_DETAIL_Factory.java","method_name":"newDeleteQuery","content":"/**\n Creates a new object in memory, which you can subsequently {@link #Write()} to the data store.\n current object to the destination. \n @param Id                     Id\n @param Job_Id                 Job Id\n*/\npublic static DeleteQuery newDeleteQuery(Connection C) throws Exception { return new DeleteQuery(C, SCHEMA_LABEL, TABLENAME_LABEL); }"} {"path":"downloaded/PanelAccordionRenderer.java","method_name":"encodeAll","content":"/**\n   *  First: If nothing is disclosed, makes the first child disclosed.\n   *\n   *  Makes sure that the child being disclosed has rendered = true\n   *  and is not disabled.\n   *\n   *  Second: Renders a vertical panel bar and children in individual panels.\n   *\n   *  For the panel bar, draws a DIV that forms the outline of panels.\n   *  Within the DIV, iteratively calls the encodeBegin, encodeChildren and\n   *  encodeEnd on the panel children (if they have rendered and disclosed\n   *  set to true).\n   *\n   *  Non UIXShowDetail children are ignored.\n   *  The title of each of the panels is the same as the text assigned to\n   *  UIXShowDetail child. When text attribute is not specified,\n   *  title remains blank.\n   * @param context the faces context object\n   * @param component the UIComponent object\n   * @throws IOException when some issues while writing output\n   */\n@SuppressWarnings(\"unchecked\")\n  @Override\n  protected void encodeAll(\n    FacesContext        context,\n    RenderingContext    arc,\n    UIComponent         component,\n    FacesBean           bean) throws IOException\n  {\n    FormData fData = arc.getFormData();\n    String formName = \"\";\n\n    if (fData != null)\n    {\n      formName = fData.getName();\n      if (formName == null)\n      {\n        _LOG.warning(\"PANELACCORDION_MUST_INSIDE_FORM\");\n        return;\n      }\n      // Hidden field to store parameter targetItem is needed for non\n      // Ajax browsers to pass the target item Id back to the server.\n      boolean pprEnabled =\n        PartialPageUtils.supportsPartialRendering(arc);\n      if (!pprEnabled)\n      {\n        fData.addNeededValue(XhtmlConstants.TARGETITEM_PARAM);\n      }\n    }\n\n    List<UIComponent> children = component.getChildren();\n    int numChildren = children.size();\n    UIComponent disclosedChild = null;\n    UIXShowDetail renderableChild = null;\n\n    for (int indxChild = 0; indxChild < numChildren ; indxChild++ )\n    {\n      UIComponent child =  children.get(indxChild);\n      if (! (child instanceof UIXShowDetail) )\n      {\n        continue;\n      }\n\n      UIXShowDetail detailChild =  (UIXShowDetail) children.get(indxChild);\n\n      if (detailChild.isRendered())\n      {\n        // Mark the first renderable child\n        if (_isItemDisabled(detailChild))\n        {\n          continue;\n        }\n        if (renderableChild == null)\n        {\n          renderableChild = detailChild;\n        }\n        if (detailChild.isDisclosed())\n        {\n          disclosedChild = detailChild;\n          // A diclosed child found. return.\n          break;\n        }\n      }\n    }\n\n    // If we have a minimum of 1 disclosed child and none have been disclosed\n    // yet, disclose the first rendered one:\n    if ( (disclosedChild == null) && !getDiscloseNone(bean) &&\n      (renderableChild != null) && !renderableChild.isDisclosedTransient())\n    {\n      renderableChild.setDisclosed(true);\n    }\n\n    ResponseWriter out = context.getResponseWriter();\n    String compId = component.getClientId(context);\n\n    out.startElement(\"div\", component);\n\n    renderId(context, component);\n    renderAllAttributes(context, arc, bean);\n\n    boolean discloseMany = getDiscloseMany(bean);\n    boolean discloseNone = getDiscloseNone(bean);\n    boolean disclosedFixed = false;\n    if (discloseMany && !discloseNone) // must keep at least one item disclosed\n    {\n      // This is a special case where we must determine if we have to fix the\n      // disclosure state of one of the items.\n      int disclosedCount = 0;\n      for (UIComponent child : (List<UIComponent>) component.getChildren())\n      {\n        if (!(child instanceof UIXShowDetail) ||\n            !child.isRendered())\n          continue;\n\n        UIXShowDetail detailItem = (UIXShowDetail) child;\n        if (detailItem.isDisclosed())\n        {\n          disclosedCount++;\n          if (disclosedCount > 1)\n          {\n            break; // we have enough information at this point to stop counting\n          }\n        }\n      }\n      if (disclosedCount <= 1)\n      {\n        disclosedFixed = true;\n      }\n    }\n\n    boolean childAlreadyRendered = false;\n    for (UIComponent child : (List<UIComponent>) component.getChildren())\n    {\n      if (!(child instanceof UIXShowDetail) ||\n          !child.isRendered())\n        continue;\n      \n      UIXShowDetail detailItem = (UIXShowDetail) child;\n      boolean disabled = _isItemDisabled(detailItem);\n      String titleText = (String)\n        detailItem.getAttributes().get(CoreShowDetailItem.TEXT_KEY.getName());\n      boolean disclosed = detailItem.isDisclosed();\n\n      if (childAlreadyRendered)\n      {\n        // The detail child should be disclosed only when all three criteria met\n        // 1. is marked as disclosed\n        // 2. is not disabled and\n        // 3. if a child is not already disclosed. This occurs when more than\n        //    one showDetail child has it's disclosed property set to true.\n        disclosed = false;\n      }\n\n      // Header renderer section.\n      out.startElement(\"div\", detailItem);\n\n      String detailItemId = detailItem.getClientId(context);\n      String itemStyleClass;\n      if (disabled)\n        itemStyleClass = getHeaderDisabledStyleClass();\n      else if (disclosed)\n        itemStyleClass = getHeaderExpandedStyleClass();\n      else\n        itemStyleClass = getHeaderCollapsedStyleClass();\n        \n      renderStyleClass(context, arc, itemStyleClass);\n\n      // Render the toolbar component, if any (we use float to keep\n      // the toolbar on the right - or left, in RTL languages - so\n      // it has to be rendered first)\n      UIComponent toolbar = getFacet(detailItem,\n                                     CoreShowDetailItem.TOOLBAR_FACET);\n      if (toolbar != null)\n      {\n        out.startElement(\"div\", detailItem);\n        renderStyleClass(context, arc, SkinSelectors.AF_PANELACCORDION_TOOLBAR_STYLE_CLASS);\n        encodeChild(context, toolbar);\n        out.endElement(\"div\");\n      }\n      \n      boolean javaScriptSupport = supportsScripting(arc);\n      \n      if (javaScriptSupport)\n      {\n        out.startElement(\"a\", null);\n        out.writeAttribute(\"name\", detailItemId, null);\n      }\n      else\n      {\n        // For Non-JavaScript browsers, render an input element(type=submit) to \n        // submit the page. Encode the name attribute with the parameter name \n        // and value thus it would enable the browsers to include the name of \n        // this element in its payLoad if it submits the page.\n        out.startElement(\"input\", null);\n        out.writeAttribute(\"type\", \"submit\", null);\n      }\n\n      renderStyleClass(context, arc,\n                       disabled\n                         ? getLinkDisabledStyleClass()\n                         : getLinkEnabledStyleClass());\n\n      // If the child is disclosable and enabled...\n      boolean disclosable =\n        discloseNone || (! disclosed) || (discloseMany && !disclosedFixed);\n      if ( disclosable && (! disabled) )\n      {\n        boolean isImmediate = detailItem.isImmediate();\n        String event = disclosed ? \"hide\" : \"show\";\n        \n        if (javaScriptSupport)\n        {\n          String onClickHandler = _getFormSubmitScript(component,\n                                                       arc,\n                                                       event,\n                                                       detailItemId,\n                                                       formName,\n                                                       compId,\n                                                       isImmediate);\n          out.writeAttribute(\"onclick\", onClickHandler, null);\n          out.writeAttribute(\"href\", \"#\", null);\n        }\n        else\n        {\n          String nameAttri = XhtmlUtils.getEncodedParameter\n                                          (XhtmlConstants.SOURCE_PARAM)\n                             + XhtmlUtils.getEncodedParameter(compId)\n                             + XhtmlUtils.getEncodedParameter\n                                         (XhtmlConstants.EVENT_PARAM)\n                             + XhtmlUtils.getEncodedParameter(event)\n                             + XhtmlUtils.getEncodedParameter\n                                         (XhtmlConstants.TARGETITEM_PARAM)\n                             + detailItemId;\n                             \n          out.writeAttribute(\"name\", nameAttri, null);\n        }\n      }\n      \n      if (javaScriptSupport)\n      { \n        // =-=rbaranwa Per the UI Review, no icon to be rendered when\n        // panel is disabled.\n        if (! disabled)\n        {\n          ShowDetailRenderer.renderDisclosureIcon(context,\n                                                   arc,\n                                                   disclosed,\n                                                   getDisclosedTipKey(),\n                                                   getUndisclosedTipKey());\n        }\n        if (titleText != null)\n        {\n          out.writeText(titleText, null);\n        }\n        out.endElement(\"a\");\n      }\n      else\n      {\n        // Since we cannot render any image element as a child of input element, \n        // just render the icon symbol along with the text.\n        String icon = disclosed ? XhtmlConstants.NON_JS_DETAIL_DISCLOSED_ICON :\n                                  XhtmlConstants.NON_JS_DETAIL_UNDISCLOSED_ICON;\n        if (titleText != null)\n        {\n          icon = icon + titleText;\n        }\n        \n        out.writeAttribute(\"value\", icon, null);\n        \n        if (disabled)\n        {\n          out.writeAttribute(\"disabled\", Boolean.TRUE, \"disabled\");\n        }\n        \n        out.endElement(\"input\");\n      }\n      \n      out.endElement(\"div\"); // Ending div for an individual panel\n\n\n      // The detail child should be disclosed only when all three criteria met\n      // 1. is marked as disclosed\n      // 2. is not disabled and\n      // 3. if a child is not already disclosed. This occurs when more than\n      //    one showDetail child has it's disclosed property set to true.\n      if (disclosed && (! disabled) && (! childAlreadyRendered) )\n      {\n        _encodeDetailItem(context, arc, component, detailItem, out);\n        if (!discloseMany)\n        {\n          childAlreadyRendered = true;\n        }\n      }\n    }\n    out.endElement(\"div\");\n  }"} {"path":"downloaded/PanelAccordionRenderer.java","method_name":"getDefaultStyleClass","content":"/**\n   *  First: If nothing is disclosed, makes the first child disclosed.\n   *\n   *  Makes sure that the child being disclosed has rendered = true\n   *  and is not disabled.\n   *\n   *  Second: Renders a vertical panel bar and children in individual panels.\n   *\n   *  For the panel bar, draws a DIV that forms the outline of panels.\n   *  Within the DIV, iteratively calls the encodeBegin, encodeChildren and\n   *  encodeEnd on the panel children (if they have rendered and disclosed\n   *  set to true).\n   *\n   *  Non UIXShowDetail children are ignored.\n   *  The title of each of the panels is the same as the text assigned to\n   *  UIXShowDetail child. When text attribute is not specified,\n   *  title remains blank.\n   * @param context the faces context object\n   * @param component the UIComponent object\n   * @throws IOException when some issues while writing output\n   */\n@Override\n  protected String getDefaultStyleClass(FacesBean bean)\n  {\n    return SkinSelectors.AF_PANELACCORDION_STYLE_CLASS;\n  }"} {"path":"downloaded/PanelAccordionRenderer.java","method_name":"getContentStyleClass","content":"/**\n   *  First: If nothing is disclosed, makes the first child disclosed.\n   *\n   *  Makes sure that the child being disclosed has rendered = true\n   *  and is not disabled.\n   *\n   *  Second: Renders a vertical panel bar and children in individual panels.\n   *\n   *  For the panel bar, draws a DIV that forms the outline of panels.\n   *  Within the DIV, iteratively calls the encodeBegin, encodeChildren and\n   *  encodeEnd on the panel children (if they have rendered and disclosed\n   *  set to true).\n   *\n   *  Non UIXShowDetail children are ignored.\n   *  The title of each of the panels is the same as the text assigned to\n   *  UIXShowDetail child. When text attribute is not specified,\n   *  title remains blank.\n   * @param context the faces context object\n   * @param component the UIComponent object\n   * @throws IOException when some issues while writing output\n   */\nprotected String getContentStyleClass()\n  {\n    return SkinSelectors.AF_PANELACCORDION_CONTENT_STYLE_CLASS;\n  }"} {"path":"downloaded/PanelAccordionRenderer.java","method_name":"getHeaderDisabledStyleClass","content":"/**\n   *  First: If nothing is disclosed, makes the first child disclosed.\n   *\n   *  Makes sure that the child being disclosed has rendered = true\n   *  and is not disabled.\n   *\n   *  Second: Renders a vertical panel bar and children in individual panels.\n   *\n   *  For the panel bar, draws a DIV that forms the outline of panels.\n   *  Within the DIV, iteratively calls the encodeBegin, encodeChildren and\n   *  encodeEnd on the panel children (if they have rendered and disclosed\n   *  set to true).\n   *\n   *  Non UIXShowDetail children are ignored.\n   *  The title of each of the panels is the same as the text assigned to\n   *  UIXShowDetail child. When text attribute is not specified,\n   *  title remains blank.\n   * @param context the faces context object\n   * @param component the UIComponent object\n   * @throws IOException when some issues while writing output\n   */\nprotected String getHeaderDisabledStyleClass()\n  {\n    return SkinSelectors.AF_PANELACCORDION_HEADER_DISABLED_STYLE_CLASS;\n  }"} {"path":"downloaded/PanelAccordionRenderer.java","method_name":"getHeaderExpandedStyleClass","content":"/**\n   *  First: If nothing is disclosed, makes the first child disclosed.\n   *\n   *  Makes sure that the child being disclosed has rendered = true\n   *  and is not disabled.\n   *\n   *  Second: Renders a vertical panel bar and children in individual panels.\n   *\n   *  For the panel bar, draws a DIV that forms the outline of panels.\n   *  Within the DIV, iteratively calls the encodeBegin, encodeChildren and\n   *  encodeEnd on the panel children (if they have rendered and disclosed\n   *  set to true).\n   *\n   *  Non UIXShowDetail children are ignored.\n   *  The title of each of the panels is the same as the text assigned to\n   *  UIXShowDetail child. When text attribute is not specified,\n   *  title remains blank.\n   * @param context the faces context object\n   * @param component the UIComponent object\n   * @throws IOException when some issues while writing output\n   */\nprotected String getHeaderExpandedStyleClass()\n  {\n    return SkinSelectors.AF_PANELACCORDION_HEADER_EXPANDED_STYLE_CLASS;\n  }"} {"path":"downloaded/PanelAccordionRenderer.java","method_name":"getHeaderCollapsedStyleClass","content":"/**\n   *  First: If nothing is disclosed, makes the first child disclosed.\n   *\n   *  Makes sure that the child being disclosed has rendered = true\n   *  and is not disabled.\n   *\n   *  Second: Renders a vertical panel bar and children in individual panels.\n   *\n   *  For the panel bar, draws a DIV that forms the outline of panels.\n   *  Within the DIV, iteratively calls the encodeBegin, encodeChildren and\n   *  encodeEnd on the panel children (if they have rendered and disclosed\n   *  set to true).\n   *\n   *  Non UIXShowDetail children are ignored.\n   *  The title of each of the panels is the same as the text assigned to\n   *  UIXShowDetail child. When text attribute is not specified,\n   *  title remains blank.\n   * @param context the faces context object\n   * @param component the UIComponent object\n   * @throws IOException when some issues while writing output\n   */\nprotected String getHeaderCollapsedStyleClass()\n  {\n    return SkinSelectors.AF_PANELACCORDION_HEADER_COLLAPSED_STYLE_CLASS;\n  }"} {"path":"downloaded/PanelAccordionRenderer.java","method_name":"getLinkDisabledStyleClass","content":"/**\n   *  First: If nothing is disclosed, makes the first child disclosed.\n   *\n   *  Makes sure that the child being disclosed has rendered = true\n   *  and is not disabled.\n   *\n   *  Second: Renders a vertical panel bar and children in individual panels.\n   *\n   *  For the panel bar, draws a DIV that forms the outline of panels.\n   *  Within the DIV, iteratively calls the encodeBegin, encodeChildren and\n   *  encodeEnd on the panel children (if they have rendered and disclosed\n   *  set to true).\n   *\n   *  Non UIXShowDetail children are ignored.\n   *  The title of each of the panels is the same as the text assigned to\n   *  UIXShowDetail child. When text attribute is not specified,\n   *  title remains blank.\n   * @param context the faces context object\n   * @param component the UIComponent object\n   * @throws IOException when some issues while writing output\n   */\nprotected String getLinkDisabledStyleClass()\n  {\n    return SkinSelectors.AF_PANELACCORDION_TITLE_LINK_DISABLED_STYLE_CLASS;\n  }"} {"path":"downloaded/PanelAccordionRenderer.java","method_name":"getLinkEnabledStyleClass","content":"/**\n   *  First: If nothing is disclosed, makes the first child disclosed.\n   *\n   *  Makes sure that the child being disclosed has rendered = true\n   *  and is not disabled.\n   *\n   *  Second: Renders a vertical panel bar and children in individual panels.\n   *\n   *  For the panel bar, draws a DIV that forms the outline of panels.\n   *  Within the DIV, iteratively calls the encodeBegin, encodeChildren and\n   *  encodeEnd on the panel children (if they have rendered and disclosed\n   *  set to true).\n   *\n   *  Non UIXShowDetail children are ignored.\n   *  The title of each of the panels is the same as the text assigned to\n   *  UIXShowDetail child. When text attribute is not specified,\n   *  title remains blank.\n   * @param context the faces context object\n   * @param component the UIComponent object\n   * @throws IOException when some issues while writing output\n   */\nprotected String getLinkEnabledStyleClass()\n  {\n    return SkinSelectors.AF_PANELACCORDION_TITLE_LINK_STYLE_CLASS;\n  }"} {"path":"downloaded/PanelAccordionRenderer.java","method_name":"getDisclosedTipKey","content":"/**\n   *  First: If nothing is disclosed, makes the first child disclosed.\n   *\n   *  Makes sure that the child being disclosed has rendered = true\n   *  and is not disabled.\n   *\n   *  Second: Renders a vertical panel bar and children in individual panels.\n   *\n   *  For the panel bar, draws a DIV that forms the outline of panels.\n   *  Within the DIV, iteratively calls the encodeBegin, encodeChildren and\n   *  encodeEnd on the panel children (if they have rendered and disclosed\n   *  set to true).\n   *\n   *  Non UIXShowDetail children are ignored.\n   *  The title of each of the panels is the same as the text assigned to\n   *  UIXShowDetail child. When text attribute is not specified,\n   *  title remains blank.\n   * @param context the faces context object\n   * @param component the UIComponent object\n   * @throws IOException when some issues while writing output\n   */\nprotected String getDisclosedTipKey()\n  {\n    return _DISCLOSED_TIP_KEY;\n  }"} {"path":"downloaded/PanelAccordionRenderer.java","method_name":"getUndisclosedTipKey","content":"/**\n   *  First: If nothing is disclosed, makes the first child disclosed.\n   *\n   *  Makes sure that the child being disclosed has rendered = true\n   *  and is not disabled.\n   *\n   *  Second: Renders a vertical panel bar and children in individual panels.\n   *\n   *  For the panel bar, draws a DIV that forms the outline of panels.\n   *  Within the DIV, iteratively calls the encodeBegin, encodeChildren and\n   *  encodeEnd on the panel children (if they have rendered and disclosed\n   *  set to true).\n   *\n   *  Non UIXShowDetail children are ignored.\n   *  The title of each of the panels is the same as the text assigned to\n   *  UIXShowDetail child. When text attribute is not specified,\n   *  title remains blank.\n   * @param context the faces context object\n   * @param component the UIComponent object\n   * @throws IOException when some issues while writing output\n   */\nprotected String getUndisclosedTipKey()\n  {\n    return _UNDISCLOSED_TIP_KEY;\n  }"} {"path":"downloaded/FriendsHelpfulBase.java","method_name":"blic Stri","content":"/**\n\t * 朋友圈�\nse;\n\t}\n\t\n\t\n\tpublic String getStatus() {\n\t\tretur"} {"path":"downloaded/PanelAccordionRenderer.java","method_name":"_getFormSubmitScript","content":"/**\n   *  Creates javascript used to submit the page.\n   */\nprivate String _getFormSubmitScript(UIComponent component,\n                                      RenderingContext arc,\n                                      String event,\n                                      String detailItemId,\n                                      String formName,\n                                      String compId,\n                                      boolean isImmediate)\n  {\n    // Check if PPR enabled, do a _submitPartialChange, else do a formSubmit.\n    String onClickHandler = \"\";\n    boolean pprEnabled =\n      PartialPageUtils.supportsPartialRendering(arc);\n\n    String validate = \"1\";\n    if (isImmediate)\n    {\n      validate = \"0\";\n    }\n\n    if (pprEnabled)\n    {\n      StringBuilder onClickHandlerBuff =\n            new StringBuilder(\"_submitPartialChange('\")\n            .append(formName)\n            .append(\"',\")\n            .append(validate)\n            .append(\", {event:'\")\n            .append(event)\n            .append(\"',source:'\")\n            .append(compId)\n            .append(\"',targetItem:'\")\n            .append(detailItemId)\n            .append(\"'});return false;\");\n\n      onClickHandler = onClickHandlerBuff.toString();            \n    }\n    else\n    {\n      StringBuilder onClickHandlerBuff = new StringBuilder(\"submitForm('\")\n                                  .append(formName)\n                                  .append(\"',\")\n                                  .append(validate)\n                                  .append(\", {event:'\")\n                              .append(event)\n                              .append(\"',source:'\")\n                              .append(compId)\n                              .append(\"',targetItem:'\")\n                              .append(detailItemId)\n                                  .append(\"'});return false;\");\n\n      onClickHandler = onClickHandlerBuff.toString();\n    }\n    return onClickHandler;\n  }"} {"path":"downloaded/FriendsHelpfulBase.java","method_name":"blic String getS","content":"/**\n\t * 朋友圈�\nstatus;\n\t}\n\tpublic String getStatusMessage() {\n\t\treturn statu"} {"path":"downloaded/FriendsHelpfulBase.java","method_name":"blic ","content":"/**\n\t * 朋友圈�\nessage;\n\t}\n\tpublic String getId() {\n\t\tr"} {"path":"downloaded/FriendsHelpfulBase.java","method_name":"blic Stri","content":"/**\n\t * 朋友圈�\nd = id;\n\t}\n\tpublic String getUserId() {\n\t\tretur"} {"path":"downloaded/PanelAccordionRenderer.java","method_name":"getDiscloseMany","content":"/**\n   *  Creates javascript used to submit the page.\n   */\nprotected boolean getDiscloseMany(FacesBean bean)\n  {\n    Object o = bean.getProperty(_discloseManyKey);\n    if (o == null)\n      o = _discloseManyKey.getDefault();\n\n    return Boolean.TRUE.equals(o);\n  }"} {"path":"downloaded/PanelAccordionRenderer.java","method_name":"getDiscloseNone","content":"/**\n   *  Creates javascript used to submit the page.\n   */\nprotected boolean getDiscloseNone(FacesBean bean)\n  {\n    Object o = bean.getProperty(_discloseNoneKey);\n    if (o == null)\n      o = _discloseNoneKey.getDefault();\n\n    return Boolean.TRUE.equals(o);\n  }"} {"path":"downloaded/FriendsHelpfulBase.java","method_name":"blic Strin","content":"/**\n\t * 朋友圈�\nuserId;\n\t}\n\tpublic String getNewFlag() {\n\t\treturn"} {"path":"downloaded/PanelAccordionRenderer.java","method_name":"_isItemDisabled","content":"/**\n   *  Creates javascript used to submit the page.\n   */\nprivate boolean _isItemDisabled(UIComponent component)\n  {\n    Object isDisabled = component.getAttributes().get(\n      CoreShowDetailItem.DISABLED_KEY.getName());\n    return Boolean.TRUE.equals(isDisabled);\n  }"} {"path":"downloaded/FriendsHelpfulBase.java","method_name":"blic String","content":"/**\n\t * 朋友圈�\newFlag;\n\t}\n\tpublic String getUserName() {\n\t\treturn "} {"path":"downloaded/FriendsHelpfulBase.java","method_name":"blic String ","content":"/**\n\t * 朋友圈�\nerName;\n\t}\n\tpublic String getCommentId() {\n\t\treturn c"} {"path":"downloaded/FriendsHelpfulBase.java","method_name":"blic String getLa","content":"/**\n\t * 朋友圈�\nmentId;\n\t}\n\tpublic String getLastUpdateTime() {\n\t\treturn lastUp"} {"path":"downloaded/FriendsHelpfulBase.java","method_name":"blic Stri","content":"/**\n\t * 朋友圈�\nteTime;\n\t}\n\tpublic String getRemark() {\n\t\tretur"} {"path":"downloaded/OTBASS.java","method_name":"noPredictorAttributeHasMoreThanOneValues","content":"/** Attribute used for splitting. */\nprivate boolean noPredictorAttributeHasMoreThanOneValues(Instances merged) {\n\n\t\treturn false;\n\t}"} {"path":"downloaded/OTBASS.java","method_name":"getClassvalueWithMostCount","content":"/** Attribute used for splitting. */\nprivate double getClassvalueWithMostCount(Instances data) {\n\t\tdouble[] distribution = new double[data.numClasses()];\n\t\tEnumeration instEnum = data.enumerateInstances();\n\t\twhile (instEnum.hasMoreElements()) {\n\t\t\tInstance inst = (Instance) instEnum.nextElement();\n\t\t\tdistribution[(int) inst.classValue()]++;\n\t\t}\n\t\tUtils.normalize(distribution);\n\t\treturn Utils.maxIndex(distribution);\n\t}"} {"path":"downloaded/OTBASS.java","method_name":"splitData","content":"/**\n\t   * Splits a dataset according to the values of a nominal attribute.\n\t   *\n\t   * @param data the data which is to be split\n\t   * @param att the attribute to be used for splitting\n\t   * @return the sets of instances produced by the split\n\t   */\nprivate Instances[] splitData(Instances data, Attribute att) {\n\n\t    Instances[] splitData = new Instances[att.numValues()];\n\t    for (int j = 0; j < att.numValues(); j++) {\n\t      splitData[j] = new Instances(data, data.numInstances());\n\t    }\n\t    Enumeration instEnum = data.enumerateInstances();\n\t    while (instEnum.hasMoreElements()) {\n\t      Instance inst = (Instance) instEnum.nextElement();\n\t      splitData[(int) inst.value(att)].add(inst);\n\t    }\n\t    for (int i = 0; i < splitData.length; i++) {\n\t      splitData[i].compactify();\n\t    }\n\t    //System.out.println(\"split data is \"+splitData[0].get(0));\n\t  //  System.out.println(\" @seperate by attribute:\"+att);\n\t    //for(Instances ii:splitData){\n\t\t\t//System.out.println(\" \");\n\t    //\tprintinsts(ii);\n\t    //}\n\t    \n\t    return splitData;\n\t  }"} {"path":"downloaded/VisitMultiplayerGame.java","method_name":"onCreateOptionsMenu","content":"/**\n\t * Erstellt eine VisitMultiplayerGame Activity\n\t */\n@Override\n\tpublic boolean onCreateOptionsMenu(Menu menu) {\n\t\t// Inflate the menu; this adds items to the action bar if it is present.\n\t\tgetMenuInflater().inflate(R.menu.visit_multiplayer_game, menu);\n\t\treturn true;\n\t}"} {"path":"downloaded/VisitMultiplayerGame.java","method_name":"onOptionsItemSelected","content":"/**\n\t * Dieser Toast muss ueber den UI Thread ausgefuehrt werden, da er von ausserhalb aufgerufen wird\n\t * @param message Text, der als Toast angezeigt wird\n\t */\n@Override\n\tpublic boolean onOptionsItemSelected(MenuItem item) {\n\t\t// Handle action bar item clicks here. The action bar will\n\t\t// automatically handle clicks on the Home/Up button, so long\n\t\t// as you specify a parent activity in AndroidManifest.xml.\n\t\tint id = item.getItemId();\n\t\tif (id == R.id.action_settings) {\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onOptionsItemSelected(item);\n\t}"} {"path":"downloaded/RaftServerProtocolServiceGrpc.java","method_name":"newStub","content":"/**\n   * Creates a new async stub that supports all call types for the service\n   */\npublic static RaftServerProtocolServiceStub newStub(org.apache.ratis.shaded.io.grpc.Channel channel) {\n    return new RaftServerProtocolServiceStub(channel);\n  }"} {"path":"downloaded/RaftServerProtocolServiceGrpc.java","method_name":"newBlockingStub","content":"/**\n   * Creates a new blocking-style stub that supports unary and streaming output calls on the service\n   */\npublic static RaftServerProtocolServiceBlockingStub newBlockingStub(\n      org.apache.ratis.shaded.io.grpc.Channel channel) {\n    return new RaftServerProtocolServiceBlockingStub(channel);\n  }"} {"path":"downloaded/RaftServerProtocolServiceGrpc.java","method_name":"newFutureStub","content":"/**\n   * Creates a new ListenableFuture-style stub that supports unary calls on the service\n   */\npublic static RaftServerProtocolServiceFutureStub newFutureStub(\n      org.apache.ratis.shaded.io.grpc.Channel channel) {\n    return new RaftServerProtocolServiceFutureStub(channel);\n  }"} {"path":"downloaded/RaftServerProtocolServiceGrpc.java","method_name":"getServiceDescriptor","content":"/**\n   */\npublic static org.apache.ratis.shaded.io.grpc.ServiceDescriptor getServiceDescriptor() {\n    org.apache.ratis.shaded.io.grpc.ServiceDescriptor result = serviceDescriptor;\n    if (result == null) {\n      synchronized (RaftServerProtocolServiceGrpc.class) {\n        result = serviceDescriptor;\n        if (result == null) {\n          serviceDescriptor = result = org.apache.ratis.shaded.io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)\n              .setSchemaDescriptor(new RaftServerProtocolServiceFileDescriptorSupplier())\n              .addMethod(getRequestVoteMethodHelper())\n              .addMethod(getAppendEntriesMethodHelper())\n              .addMethod(getInstallSnapshotMethodHelper())\n              .build();\n        }\n      }\n    }\n    return result;\n  }"} {"path":"downloaded/RaftServerProtocolServiceGrpc.java","method_name":"bindService","content":"/**\n     */\n@java.lang.Override public final org.apache.ratis.shaded.io.grpc.ServerServiceDefinition bindService() {\n      return org.apache.ratis.shaded.io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())\n          .addMethod(\n            getRequestVoteMethodHelper(),\n            asyncUnaryCall(\n              new MethodHandlers<\n                org.apache.ratis.shaded.proto.RaftProtos.RequestVoteRequestProto,\n                org.apache.ratis.shaded.proto.RaftProtos.RequestVoteReplyProto>(\n                  this, METHODID_REQUEST_VOTE)))\n          .addMethod(\n            getAppendEntriesMethodHelper(),\n            asyncUnaryCall(\n              new MethodHandlers<\n                org.apache.ratis.shaded.proto.RaftProtos.AppendEntriesRequestProto,\n                org.apache.ratis.shaded.proto.RaftProtos.AppendEntriesReplyProto>(\n                  this, METHODID_APPEND_ENTRIES)))\n          .addMethod(\n            getInstallSnapshotMethodHelper(),\n            asyncUnaryCall(\n              new MethodHandlers<\n                org.apache.ratis.shaded.proto.RaftProtos.InstallSnapshotRequestProto,\n                org.apache.ratis.shaded.proto.RaftProtos.InstallSnapshotReplyProto>(\n                  this, METHODID_INSTALL_SNAPSHOT)))\n          .build();\n    }"} {"path":"downloaded/RaftServerProtocolServiceGrpc.java","method_name":"requestVote","content":"/**\n     */\npublic org.apache.ratis.shaded.proto.RaftProtos.RequestVoteReplyProto requestVote(org.apache.ratis.shaded.proto.RaftProtos.RequestVoteRequestProto request) {\n      return blockingUnaryCall(\n          getChannel(), getRequestVoteMethodHelper(), getCallOptions(), request);\n    }"} {"path":"downloaded/ContainerChemistWorktable.java","method_name":"transferStackInSlot","content":"/**\n     * Called when a player shift-clicks on a slot. You must override this or you will crash when someone does that.\n     */\n@Override\n    public ItemStack transferStackInSlot(EntityPlayer par1EntityPlayer, int par2)\n    {\n\t\tItemStack stack = null;\n        Slot slot = (Slot)this.inventorySlots.get(par2);\n\n        if (slot != null && slot.getHasStack()) {\n            ItemStack stack1 = slot.getStack();\n            stack = stack1.copy();\n\n            if (par2 == 0) {\n                if (!this.mergeItemStack(stack1, 10, 46, true)) {\n                    return null;\n                }\n                slot.onSlotChange(stack1, stack);\n            }\n            else if (par2 >= 10 && par2 < 37) {\n                if (!this.mergeItemStack(stack1, 37, 46, false)) {\n                    return null;\n                }\n            }\n            else if (par2 >= 37 && par2 < 46) {\n                if (!this.mergeItemStack(stack1, 10, 37, false)) {\n                    return null;\n                }\n            }\n            else if (!this.mergeItemStack(stack1, 10, 46, false)) {\n                return null;\n            }\n\n            if (stack1.stackSize == 0) {\n                slot.putStack((ItemStack)null);\n            }\n            else {\n                slot.onSlotChanged();\n            }\n\n            if (stack1.stackSize == stack.stackSize) {\n                return null;\n            }\n\n            slot.onPickupFromSlot(par1EntityPlayer, stack1);\n        }\n\n        return stack;\n    }"} {"path":"downloaded/RaftServerProtocolServiceGrpc.java","method_name":"appendEntries","content":"/**\n     */\npublic org.apache.ratis.shaded.proto.RaftProtos.AppendEntriesReplyProto appendEntries(org.apache.ratis.shaded.proto.RaftProtos.AppendEntriesRequestProto request) {\n      return blockingUnaryCall(\n          getChannel(), getAppendEntriesMethodHelper(), getCallOptions(), request);\n    }"} {"path":"downloaded/RaftServerProtocolServiceGrpc.java","method_name":"installSnapshot","content":"/**\n     */\npublic org.apache.ratis.shaded.proto.RaftProtos.InstallSnapshotReplyProto installSnapshot(org.apache.ratis.shaded.proto.RaftProtos.InstallSnapshotRequestProto request) {\n      return blockingUnaryCall(\n          getChannel(), getInstallSnapshotMethodHelper(), getCallOptions(), request);\n    }"} {"path":"downloaded/RaftServerProtocolServiceGrpc.java","method_name":"requestVote","content":"/**\n     */\npublic org.apache.ratis.shaded.com.google.common.util.concurrent.ListenableFuture<org.apache.ratis.shaded.proto.RaftProtos.RequestVoteReplyProto> requestVote(\n        org.apache.ratis.shaded.proto.RaftProtos.RequestVoteRequestProto request) {\n      return futureUnaryCall(\n          getChannel().newCall(getRequestVoteMethodHelper(), getCallOptions()), request);\n    }"} {"path":"downloaded/RaftServerProtocolServiceGrpc.java","method_name":"appendEntries","content":"/**\n     */\npublic org.apache.ratis.shaded.com.google.common.util.concurrent.ListenableFuture<org.apache.ratis.shaded.proto.RaftProtos.AppendEntriesReplyProto> appendEntries(\n        org.apache.ratis.shaded.proto.RaftProtos.AppendEntriesRequestProto request) {\n      return futureUnaryCall(\n          getChannel().newCall(getAppendEntriesMethodHelper(), getCallOptions()), request);\n    }"} {"path":"downloaded/RaftServerProtocolServiceGrpc.java","method_name":"installSnapshot","content":"/**\n     */\npublic org.apache.ratis.shaded.com.google.common.util.concurrent.ListenableFuture<org.apache.ratis.shaded.proto.RaftProtos.InstallSnapshotReplyProto> installSnapshot(\n        org.apache.ratis.shaded.proto.RaftProtos.InstallSnapshotRequestProto request) {\n      return futureUnaryCall(\n          getChannel().newCall(getInstallSnapshotMethodHelper(), getCallOptions()), request);\n    }"} {"path":"downloaded/RouterProcessor.java","method_name":"ring> getSupportedAnnotatio","content":"/**\n     * 工具类\n \n\n\n    @Override\n    public Set<String> getSupportedAnnotationTypes() {\n        /**\n         * 这个注解处理器是给哪个注解使用的\n         */\n        HashSet<String> supportType=new LinkedHashSet<>(1);\n        supportType.add(Route.class.getCanonicalName"} {"path":"downloaded/RouterProcessor.java","method_name":"   @Override\n    public S","content":"/**\n     * 工具类\n \n       return supportType;\n    }\n\n    @Override\n    public SourceVersion getSupportedSourceVersion() {\n        //返回java版本\n       "} {"path":"downloaded/RouterProcessor.java","method_name":"ls();\n ","content":"/**\n     * 工具类\n \nsingEnvironment.getElementUtils();\n    }\n\n    @Override\n    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {\n        /**\n         * 得到所有包含Route注解的element集合\n         */\n        Set<? extends Element> elements = roundEnvironment.getElementsAnnotatedWith(Route.class);\n        for (Element element:\n             elements) {\n\n            VariableElement variableElement= (VariableElement) element;\n            TypeElement classElement = (TypeElement) variableElement.getEnclosingElement();\n            //获取包名和类名\n            String fullClassName = classElement.getQualifiedName().toString();\n\n            Route annotation = variableElement.getAnnotation(Route.class);\n "} {"path":"downloaded/EsApprover.java","method_name":"fromGroup","content":"/**\n   * Create and EsApprover from a group name.\n   * \n   * @param group group name.\n   * @return\n   */\npublic static EsApprover fromGroup(String group) {\n    return new EsApprover().withGroup(group);\n  }"} {"path":"downloaded/EsApprover.java","method_name":"fromUser","content":"/**\n   * Create and EsApprover from a user name.\n   * \n   * @param user user name.\n   * @return\n   */\npublic static EsApprover fromUser(String user) {\n    return new EsApprover().withUser(user);\n  }"} {"path":"downloaded/EsApprover.java","method_name":"getUser","content":"/**\n   * Create and EsApprover from a user name.\n   * \n   * @param user user name.\n   * @return\n   */\npublic String getUser() {\n    return user;\n  }"} {"path":"downloaded/EsApprover.java","method_name":"getGroup","content":"/**\n   * Create and EsApprover from a user name.\n   * \n   * @param user user name.\n   * @return\n   */\npublic String getGroup() {\n    return group;\n  }"} {"path":"downloaded/EsApprover.java","method_name":"getViewingCondition","content":"/**\n   * Create and EsApprover from a user name.\n   * \n   * @param user user name.\n   * @return\n   */\npublic String getViewingCondition() {\n    return viewingCondition;\n  }"} {"path":"downloaded/EsApprover.java","method_name":"getLevel","content":"/**\n   * Create and EsApprover from a user name.\n   * \n   * @param user user name.\n   * @return\n   */\npublic int getLevel() {\n    return level;\n  }"} {"path":"downloaded/EsApprover.java","method_name":"getApproverCount","content":"/**\n   * Create and EsApprover from a user name.\n   * \n   * @param user user name.\n   * @return\n   */\npublic int getApproverCount() {\n    return approverCount;\n  }"} {"path":"downloaded/EsApprover.java","method_name":"getTimeOut","content":"/**\n   * Create and EsApprover from a user name.\n   * \n   * @param user user name.\n   * @return\n   */\npublic int getTimeOut() {\n    return timeOut;\n  }"} {"path":"downloaded/EsApprover.java","method_name":"getType","content":"/**\n   * Create and EsApprover from a user name.\n   * \n   * @param user user name.\n   * @return\n   */\npublic EsApprover.Type getType() {\n    return type;\n  }"} {"path":"downloaded/EsApprover.java","method_name":"withType","content":"/**\n   * Create and EsApprover from a user name.\n   * \n   * @param user user name.\n   * @return\n   */\npublic EsApprover withType(EsApprover.Type type) {\n    this.type = type;\n    return this;\n  }"} {"path":"downloaded/EsApprover.java","method_name":"withUser","content":"/**\n   * Create and EsApprover from a user name.\n   * \n   * @param user user name.\n   * @return\n   */\npublic EsApprover withUser(String user) {\n    this.user = user;\n    return this;\n  }"} {"path":"downloaded/EsApprover.java","method_name":"withGroup","content":"/**\n   * Create and EsApprover from a user name.\n   * \n   * @param user user name.\n   * @return\n   */\npublic EsApprover withGroup(String group) {\n    this.group = group;\n    return this;\n  }"} {"path":"downloaded/EsApprover.java","method_name":"withViewingCondition","content":"/**\n   * Create and EsApprover from a user name.\n   * \n   * @param user user name.\n   * @return\n   */\npublic EsApprover withViewingCondition(String viewingCondition) {\n    this.viewingCondition = viewingCondition;\n    return this;\n  }"} {"path":"downloaded/EsApprover.java","method_name":"withLevel","content":"/**\n   * Create and EsApprover from a user name.\n   * \n   * @param user user name.\n   * @return\n   */\npublic EsApprover withLevel(int level) {\n    this.level = level;\n    return this;\n  }"} {"path":"downloaded/EsApprover.java","method_name":"withApproverCount","content":"/**\n   * Create and EsApprover from a user name.\n   * \n   * @param user user name.\n   * @return\n   */\npublic EsApprover withApproverCount(int approverCount) {\n    this.approverCount = approverCount;\n    return this;\n  }"} {"path":"downloaded/EsApprover.java","method_name":"withTimeOut","content":"/**\n   * Create and EsApprover from a user name.\n   * \n   * @param user user name.\n   * @return\n   */\npublic EsApprover withTimeOut(int timeOut) {\n    this.timeOut = timeOut;\n    return this;\n  }"} {"path":"downloaded/PageGridDrawer.java","method_name":"getPage","content":"/**\n     * Get the page that is currently being drawn.\n     *\n     * @return The page that is being drawn.\n     */\npublic PDPage getPage()\n    {\n        return page;\n    }"} {"path":"downloaded/PageGridDrawer.java","method_name":"getPageSize","content":"/**\n     * Get the size of the page that is currently being drawn.\n     *\n     * @return The size of the page that is being drawn.\n     */\npublic Dimension getPageSize()\n    {\n        return pageSize;\n    }"} {"path":"downloaded/PageGridDrawer.java","method_name":"fixY","content":"/**\n     * Fix the y coordinate.\n     *\n     * @param y The y coordinate.\n     * @return The updated y coordinate.\n     */\npublic double fixY( double y )\n    {\n        return pageSize.getHeight() - y;\n    }"} {"path":"downloaded/PageGridDrawer.java","method_name":"transformedPoint","content":"/**\n     * use the current transformation matrix to transform a single point.\n     * @param x x-coordinate of the point to be transform\n     * @param y y-coordinate of the point to be transform\n     * @return the transformed coordinates as Point2D.Double\n     */\npublic java.awt.geom.Point2D.Double transformedPoint(double x, double y)\n    {\n        double[] position = {x,y}; \n        getGraphicsState().getCurrentTransformationMatrix().createAffineTransform().transform(position, 0, position, 0, 1);\n        position[1] = fixY(position[1]);\n\n\t_pageAffineTransform.transform(position,0, position, 0, 1);\n        return new Point2D.Double(position[0],position[1]);\n    }"} {"path":"downloaded/PageGridDrawer.java","method_name":"getGrids","content":"/**\n     * Once the vertical and horizontal lines are extracted from the PDF stream, it is possible to determine the different grids.\n     **/\npublic List<Grid> getGrids() {\n\tList<Grid> grids = new ArrayList<Grid>();\n\tList<Line> currentLines = _path;\n\twhile(currentLines.size()>1) {\n\t    Grid grid = new Grid();\n\t    grids.add(grid);\n\t    List<Line> nonOverlappingLines = grid.overlapping(currentLines);\n\t    \t    \n\t    Double[] xs = grid.xs();\n\t    Double[] ys = grid.ys();\n\t    \n\t    if (xs.length>3 && ys.length>3) {\n\t\tDouble minx = xs[0];\n\t\tDouble maxx = xs[xs.length-1];\n\t\t\n\t\tDouble miny = ys[0];\n\t\tDouble maxy = ys[ys.length-1];\n\t\t\n\t\tfor(int i=0; i<xs.length; i++) {\n\t\t    System.out.println(\"Line: \" + xs[i].toString() + \",\" + miny.toString() + \",\" + xs[i].toString() + \",\" + maxy.toString());\n\t\t}\n\t\tfor(int i=0; i<ys.length; i++) {\n\t\t    System.out.println(\"Line: \" + minx.toString() + \",\" + ys[i].toString() +  \",\" + maxx.toString() + \",\" + ys[i].toString());\n\t\t}\n\t    }\n\n\t    currentLines = nonOverlappingLines;\n\t}\n\treturn grids;\n    }"} {"path":"downloaded/MapCell.java","method_name":"setNeighborsWall","content":"/**\n\t * sets the wall of the neighbor affected when a cell sets or changes its\n\t * wall status.  This keeps the maze updated correctly.  If the neighboring\n\t * cell is outside the maze, then this method returns without action.\n\t * @param neighbor the neighboring cell to the wall being set, use\n\t * \"east\", \"north\", \"west\", or \"south\" to indicate the neighbor.\n\t * @param value the value corresponds to whether a wall exists or not, a\n\t * 1 = wall and a 0 = no wall.\n\t */\npublic void setNeighborsWall(String neighbor, int value){\n\t\ttry{\t\t\t\t\n\t\t\tif(neighbor.equalsIgnoreCase(\"east\") && (value == 0 || value == 1)){\t\t\t\t\n\t\t\t\teastCell.westWall = value;\n\t\t\t}else if(neighbor.equalsIgnoreCase(\"north\") && (value == 0 || value == 1)){\t\t\t\t\n\t\t\t\tnorthCell.southWall = value;\n\t\t\t}else if(neighbor.equalsIgnoreCase(\"west\") && (value == 0 || value == 1)){\t\t\t\t\n\t\t\t\twestCell.eastWall = value;\n\t\t\t}else if(neighbor.equalsIgnoreCase(\"south\") && (value == 0 || value == 1)){\t\t\t\t\n\t\t\t\tsouthCell.northWall = value;\n\t\t\t}\n\t\t}catch(NullPointerException np){\n\t\t\treturn;\n\t\t}catch(Exception e){\n\t\t\treturn;\n\t\t}\n\t}"} {"path":"downloaded/MapCell.java","method_name":"getMapPosition","content":"/**\n\t * returns a 1 by 2 int array the position of the cell in terms of row \n\t * number and column number.  The bottom left corner of the map is [0][0]\n\t * and the top right is [9][9].\n\t * @return a 1 by 2 int array containing the position of the cell in terms \n\t * of row number and column number.\n\t */\npublic int[] getMapPosition(){\n\t\treturn position;\n\t}"} {"path":"downloaded/MapCell.java","method_name":"getMapPosition","content":"/**\n\t * Given a tuple representing the coordinates of the E-Puck on the\n\t * xz-plane, this method will estimate which cell the E-Puck is in and\n\t * return the row and column number of the estimated cell.\n\t * @param gpsCoord a a 1x3 array containing the x-coordinate, y-coordinate,\n\t * and z-coordinate of the E-Puck.  Only the 1st and 3rd value are dealt \n\t * with since the E-Puck does not change its y-coordinate in this simulation.\n\t * @return the estimated cell which corresponds to the coordinates given.\n\t * The position of the cell is notated by a row and column number.\n\t */\npublic int[] getMapPosition(double[] gpsCoord){\n\t\tint[] mapPosition = new int[2];\n\t\tmapPosition[0] = (int) Math.round(gpsCoord[0]*9);\n\t\tmapPosition[1] = (int) Math.round(gpsCoord[2]*9);\t\t\t\n\t\treturn mapPosition;\n\t}"} {"path":"downloaded/MapCell.java","method_name":"getCoordinates","content":"/**\n\t * Given the cell position in row/column number, this will return an\n\t * estimation of the corresponding x-coordinate and z-coordinate of the \n\t * middle of the cell in the ratslife maze.\n\t * @return a 1x2 array containing the x-coordinate and z-coordinate\n\t * respectively of the cell calling the method.\n\t */\npublic double[] getCoordinates(){\n\t\tdouble[] coord = new double[2];\n\t\tdouble xcoord = (double)position[0]/9;\n\t\tdouble zcoord = (double)position[1]/9;\n\t\tcoord[0] = xcoord;\n\t\tcoord[1] = zcoord;\t\t\n\t\treturn coord;\n\t}"} {"path":"downloaded/MapCell.java","method_name":"getManhattenDist","content":"/**\n\t * returns the Manhatten Distance between the cell calling the method\n\t * and the cell passed in as the parameter.\n\t * @param goal the MapCell from which the Manhatten Distance is being\n\t * calculated to the cell calling the method.\n\t * @return an integer representing the Manhatten Distance.\n\t */\npublic int getManhattenDist(MapCell goal){\n\t\tint rowDist = Math.abs(position[0] - goal.getMapPosition()[0]);\n\t\tint colDist = Math.abs(position[1] - goal.getMapPosition()[1]);\t\t\n\t\treturn (rowDist+colDist);\n\t}"} {"path":"downloaded/MapCell.java","method_name":"getWalls","content":"/**\t\n\t * returns a 1x4 int array containing values of 1 or 0, where 1 corresponds to \n\t * a wall and 0 corresponds to no wall.  The values are given in the order\n\t * of \"east\", \"north\", \"west\", and \"south\".\n\t * @return a 1x4 int array containing values of 1 or 0, where 1 corresponds to \n\t * a wall and 0 corresponds to no wall.  The values are given in the order\n\t * of \"east\", \"north\", \"west\", and \"south\".\n\t */\npublic int[] getWalls(){\n\t\tint[] walls = new int[4];\n\t\twalls[0] = eastWall;\n\t\twalls[1] = northWall;\n\t\twalls[2] = westWall;\n\t\twalls[3] = southWall;\n\t\treturn walls;\n\t}"} {"path":"downloaded/MapCell.java","method_name":"getNeighbors","content":"/** \t \n\t * returns a 1x4 MapCell array of all neighboring cells in the order of \"east\", \n\t * \"north\", \"west\", \"south\".\n\t * @return a 1x4 MapCell array of all neighboring cells in the order of \"east\", \n\t * \"north\", \"west\", \"south\".\n\t */\npublic MapCell[] getNeighbors(){\n\t\tMapCell[] neighbors = new MapCell[4];\n\t\tneighbors[0] = getNeighbor(\"east\");\n\t\tneighbors[1] = getNeighbor(\"north\");;\n\t\tneighbors[2] = getNeighbor(\"west\");\n\t\tneighbors[3] = getNeighbor(\"south\");\n\t\treturn neighbors;\n\t}"} {"path":"downloaded/MapCell.java","method_name":"getNeighbor","content":"/**\n\t * returns a single neighbor designated by the string parameter or a null.\n\t * @param neighbor the neighboring cell being returned.  Use the string\n\t * \"east\", \"north\", \"west\", or \"south\".\n\t * @return the neighboring cell specified by the string or a null value if\n\t * the neighbor does not exist (as is the case with cells along the edge).\n\t */\npublic MapCell getNeighbor(String neighbor){\n\t\tMapCell neighborCell = null;\n\t\ttry {\n\t\t\tif(neighbor.equalsIgnoreCase(\"east\")){\t\t\t\t\n\t\t\t\tneighborCell = eastCell;\n\t\t\t}else if(neighbor.equalsIgnoreCase(\"north\")){\t\t\t\t\n\t\t\t\tneighborCell = northCell;\n\t\t\t}else if(neighbor.equalsIgnoreCase(\"west\")){\t\t\t\t\n\t\t\t\tneighborCell = westCell;\n\t\t\t}else if(neighbor.equalsIgnoreCase(\"south\")){\t\t\t\t\n\t\t\t\tneighborCell = southCell;\n\t\t\t}\n\t\t}catch(NullPointerException np){\n\t\t\treturn neighborCell;\n\t\t}catch(Exception e){\n\t\t\treturn neighborCell;\n\t\t}\n\t\treturn neighborCell;\n\t}"} {"path":"downloaded/MapCell.java","method_name":"getWeight","content":"/**\t \n\t * returns the weight associated with the cell as an int, used for \n\t * path-planning.\n\t * @return the weight associated with the cell, used for path-planning.\n\t */\npublic int getWeight(){\n\t\treturn weight;\n\t}"} {"path":"downloaded/MapCell.java","method_name":"getNeighborsWeights","content":"/**\t \n\t * return a 1x4 integer array with the weights of the neighboring cells.  \n\t * Values given in the order \"east\", \"north\", \"west\", or \"south\".\n\t * @return a 1x4 integer array with the weights of the neighboring cells.  \n\t * Values given in the order \"east\", \"north\", \"west\", or \"south\".\n\t */\npublic int[] getNeighborsWeights(){\n\t\tint[] weights = new int[4];\n\t\tweights[0] = getNeighbor(\"east\").weight;\n\t\tweights[1] = getNeighbor(\"north\").weight;\n\t\tweights[2] = getNeighbor(\"west\").weight;\n\t\tweights[3] = getNeighbor(\"south\").weight;\t\t\n\t\treturn weights;\n\t}"} {"path":"downloaded/PB_RS_EXITROOM.java","method_name":"boolea","content":"/**\n   * ��ҽ�ɫU\n\n  }\n\n  @Override\n  public boolean equals(Object other) {\n    if (other == this) return true;\n    if (!(other instanceof PB_RS_EXITROOM)) return false;\n    return equals(userid, ((PB_RS_EXITROOM) other).user"} {"path":"downloaded/PB_RS_EXITROOM.java","method_name":"lic int ","content":"/**\n   * ��ҽ�ɫU\n\n  }\n\n  @Override\n  public int hashCode() {\n    int result = hashCode;\n    return result != 0 ? result : (hashCode = userid != null ? userid.hashCode() :"} {"path":"downloaded/TreasureChest.java","method_name":"getGold","content":"/**\n\t * @return the gold\n\t */\npublic int getGold() {\n\t\treturn gold;\n\t}"} {"path":"downloaded/TreasureChest.java","method_name":"getGoldPrice","content":"/**\n\t * @return the goldPrice\n\t */\npublic static BigDecimal getGoldPrice() {\n\t\treturn goldPrice;\n\t}"} {"path":"downloaded/TreasureChest.java","method_name":"removeGold","content":"/**\n\t * @param goldPrice the goldPrice to set\n\t */\npublic int removeGold(int numberOfCoins) {\n\t\tif(numberOfCoins<0||numberOfCoins>this.gold) {\n\t\t\tthrow new IllegalArgumentException(\"THis number of gold coins removed\"+\"from the treasure chest can't be greather than \"\n\t\t\t\t\t+ \"the number \"\n\t\t\t\t\t+ \"of gold coins available.it can't be negative either\");\n\t\t}this.gold-=numberOfCoins;\n\t\treturn this.gold;\n\t\t\n\t}"} {"path":"downloaded/TreasureChest.java","method_name":"valueInDollars","content":"/**\n\t * @param goldPrice the goldPrice to set\n\t */\npublic BigDecimal valueInDollars() {\n\t\t\n\t\treturn new BigDecimal(gold).multiply(GOLD_PER_COIN).multiply(goldPrice);\n\t\t\n\t}"} {"path":"downloaded/TreasureChest.java","method_name":"toString","content":"/**\n\t * @param goldPrice the goldPrice to set\n\t */\n@Override\n\tpublic String toString() {\n\t\treturn  \"[ \"+ gold + \"coins ]\";\n\t}"} {"path":"downloaded/AdminQueryUserLogs.java","method_name":"getLogId","content":"/**\n\t * \n\t */\npublic int getLogId() {\n\t\treturn logId;\n\t}"} {"path":"downloaded/AdminQueryUserLogs.java","method_name":"getUserId","content":"/**\n\t * \n\t */\npublic int getUserId() {\n\t\treturn userId;\n\t}"} {"path":"downloaded/AdminQueryUserLogs.java","method_name":"getMessageType","content":"/**\n\t * \n\t */\npublic String getMessageType() {\n\t\treturn messageType;\n\t}"} {"path":"downloaded/AdminQueryUserLogs.java","method_name":"getTimestamp","content":"/**\n\t * \n\t */\npublic String getTimestamp() {\n\t\treturn timestamp;\n\t}"} {"path":"downloaded/AdminQueryUserLogs.java","method_name":"getMessage","content":"/**\n\t * \n\t */\npublic String getMessage() {\n\t\treturn message;\n\t}"} {"path":"downloaded/AdminQueryUserLogs.java","method_name":"getArray","content":"/**\n\t * \n\t */\npublic List<AdminQueryUserLogs> getArray() {\n\t\treturn array;\n\t}"} {"path":"downloaded/GetTrackedBranches.java","method_name":"version","content":"/** Current Request. */\n@GET\n    @Path(\"version\")\n    @PermitAll\n    public Version version() {\n        return CtxListener.getInjector(ctx).getInstance(TcBotGeneralService.class).version();\n    }"} {"path":"downloaded/GetTrackedBranches.java","method_name":"getIds","content":"/** Current Request. */\n@GET\n    @Path(\"getIds\")\n    public List<String> getIds() {\n        return CtxListener.getTcHelper(ctx).getTrackedBranchesIds();\n    }"} {"path":"downloaded/GetTrackedBranches.java","method_name":"getSuites","content":"/** Current Request. */\n@GET\n    @Path(\"suites\")\n    public Set<ChainAtServer> getSuites() {\n        final ICredentialsProv prov = ICredentialsProv.get(req);\n\n        return HelperConfig.getTrackedBranches()\n                .getSuitesUnique()\n                .stream()\n                .filter(chainAtServer -> prov.hasAccess(chainAtServer.serverId))\n                .collect(Collectors.toSet());\n    }"} {"path":"downloaded/GetTrackedBranches.java","method_name":"getServerIds","content":"/** Current Request. */\n@GET\n    @Path(\"getServerIds\")\n    public Set<String> getServerIds() {\n        final ICredentialsProv prov = ICredentialsProv.get(req);\n\n        return HelperConfig.getTrackedBranches()\n                .getServerIds()\n                .stream()\n                .filter(prov::hasAccess)\n                .collect(Collectors.toSet());\n    }"} {"path":"downloaded/PaginationColumn.java","method_name":"getData","content":"/**\n     * Flag to indicate if the search term for this column should be treated as regular expression (true) or not\n     * (false). As with global search, normally server-side processing scripts will not perform regular expression\n     * searching for performance reasons on large data sets, but it is technically possible and at the discretion of\n     * your script.\n     */\npublic String getData() {\n        return data;\n    }"} {"path":"downloaded/PaginationColumn.java","method_name":"getName","content":"/**\n     * Flag to indicate if the search term for this column should be treated as regular expression (true) or not\n     * (false). As with global search, normally server-side processing scripts will not perform regular expression\n     * searching for performance reasons on large data sets, but it is technically possible and at the discretion of\n     * your script.\n     */\npublic String getName() {\n        return name;\n    }"} {"path":"downloaded/PaginationColumn.java","method_name":"isSearchable","content":"/**\n     * Flag to indicate if the search term for this column should be treated as regular expression (true) or not\n     * (false). As with global search, normally server-side processing scripts will not perform regular expression\n     * searching for performance reasons on large data sets, but it is technically possible and at the discretion of\n     * your script.\n     */\npublic boolean isSearchable() {\n        return searchable;\n    }"} {"path":"downloaded/PaginationColumn.java","method_name":"isOrderable","content":"/**\n     * Flag to indicate if the search term for this column should be treated as regular expression (true) or not\n     * (false). As with global search, normally server-side processing scripts will not perform regular expression\n     * searching for performance reasons on large data sets, but it is technically possible and at the discretion of\n     * your script.\n     */\npublic boolean isOrderable() {\n        return orderable;\n    }"} {"path":"downloaded/PaginationColumn.java","method_name":"getSearch","content":"/**\n     * Flag to indicate if the search term for this column should be treated as regular expression (true) or not\n     * (false). As with global search, normally server-side processing scripts will not perform regular expression\n     * searching for performance reasons on large data sets, but it is technically possible and at the discretion of\n     * your script.\n     */\npublic PaginationSearch getSearch() {\n        return search;\n    }"} {"path":"downloaded/ImagePanelView.java","method_name":"add","content":"/**\n\t * Override `add` method to make sure all\n\t * components added to this panel add the\n\t * corresponding mouse listener\n\t */\n@Override\n\tpublic Component add(Component comp) {\n\t\tcomp.addMouseListener(mouseListener);\n\t\treturn super.add(comp);\n\t}"} {"path":"downloaded/ImagePanelView.java","method_name":"isSelected","content":"/**\n\t * Checks whether the view has been selected\n\t * @return true if the panel has been selected by the user, false otherwise\n\t */\npublic boolean isSelected() {\n\t\treturn selected;\n\t}"} {"path":"downloaded/Connections.java","method_name":"getFlight","content":"/**\n\t * @param FlightNumber\n\t * @return departures info\n\t */\npublic Departures getFlight(String FlightNumber)\n\t{\n\t\treturn flightList.get(FlightNumber);\n\t}"} {"path":"downloaded/PageBean.java","method_name":"��有多少","content":"\n\t\n\t/**每页\n\n\t\n\t/**一共有多少页的数据*/\n\tprivate in"} {"path":"downloaded/PageBean.java","method_name":"e(int pageSiz","content":"\n\t\n\t/**每页\n setPageSize(int pageSize) {\n\t\tthis.pageSize = pageS"} {"path":"downloaded/PageBean.java","method_name":"allRecords) {\n\t\tt","content":"\n\t\n\t/**每页\necords(int allRecords) {\n\t\tthis.allRecords = allRecords;\n\t}\n"} {"path":"downloaded/PageBean.java","method_name":"{\n\t\tthis.cu","content":"\n\t\n\t/**每页\nurrentPageNum) {\n\t\tthis.currentPageNum = currentPage"} {"path":"downloaded/PageBean.java","method_name":"ageData) {\n\t\tthi","content":"\n\t\n\t/**每页\nPageData(List<T> pageData) {\n\t\tthis.pageData = pageData;\n\t}\n\n\tpub"} {"path":"downloaded/PageBean.java","method_name":" 计算一�","content":"\n\t\n\t/**每页\n\n\t\n\t/**\n\t * 计算一共有多少页的数据\n\t * @param totalCnt\n\t * @return\n\t */\n\tpublic int getPageSize(int totalCnt){\n\t\tif(totalCnt>0){\n\t\t\tif(totalCnt%pageRecordNum==0){\n\t\t\t\treturn totalCnt/pageRecordN"} {"path":"downloaded/Posts.java","method_name":"getId","content":"/**\n\t */\npublic Integer getId() {\n\t\treturn this.id;\n\t}"} {"path":"downloaded/Posts.java","method_name":"getTitle","content":"/**\n\t */\npublic String getTitle() {\n\t\treturn this.title;\n\t}"} {"path":"downloaded/Posts.java","method_name":"getContent","content":"/**\n\t */\npublic String getContent() {\n\t\treturn this.content;\n\t}"} {"path":"downloaded/Posts.java","method_name":"getShareDate","content":"/**\n\t */\npublic Calendar getShareDate() {\n\t\treturn this.shareDate;\n\t}"} {"path":"downloaded/Posts.java","method_name":"getIsPrivate","content":"/**\n\t */\npublic Integer getIsPrivate() {\n\t\treturn this.isPrivate;\n\t}"} {"path":"downloaded/Posts.java","method_name":"getUsers","content":"/**\n\t */\n@JsonIgnore\n\tpublic Users getUsers() {\n\t\treturn users;\n\t}"} {"path":"downloaded/Posts.java","method_name":"getCommentses","content":"/**\n\t */\n@JsonIgnore\n\tpublic Set<Comments> getCommentses() {\n\t\tif (commentses == null) {\n\t\t\tcommentses = new java.util.LinkedHashSet<com.ira.domain.Comments>();\n\t\t}\n\t\treturn commentses;\n\t}"} {"path":"downloaded/Posts.java","method_name":"toString","content":"/**\n\t * Returns a textual representation of a bean.\n\t *\n\t */\npublic String toString() {\n\n\t\tStringBuilder buffer = new StringBuilder();\n\n\t\tbuffer.append(\"id=[\").append(id).append(\"] \");\n\t\tbuffer.append(\"title=[\").append(title).append(\"] \");\n\t\tbuffer.append(\"content=[\").append(content).append(\"] \");\n\t\tbuffer.append(\"shareDate=[\").append(shareDate).append(\"] \");\n\t\tbuffer.append(\"isPrivate=[\").append(isPrivate).append(\"] \");\n\n\t\treturn buffer.toString();\n\t}"} {"path":"downloaded/Posts.java","method_name":"hashCode","content":"/**\n\t */\n@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tresult = (int) (prime * result + ((id == null) ? 0 : id.hashCode()));\n\t\treturn result;\n\t}"} {"path":"downloaded/Posts.java","method_name":"equals","content":"/**\n\t */\npublic boolean equals(Object obj) {\n\t\tif (obj == this)\n\t\t\treturn true;\n\t\tif (!(obj instanceof Posts))\n\t\t\treturn false;\n\t\tPosts equalCheck = (Posts) obj;\n\t\tif ((id == null && equalCheck.id != null) || (id != null && equalCheck.id == null))\n\t\t\treturn false;\n\t\tif (id != null && !id.equals(equalCheck.id))\n\t\t\treturn false;\n\t\treturn true;\n\t}"} {"path":"downloaded/TowardsMovement.java","method_name":"getEvent","content":"/**\n\t * Returns a consumer that moves the object in direction of the target defined when this strategy was created.\n\t */\n@Override\n\tpublic Consumer<GameEntity> getEvent(List<ReadOnlyEntity> entities, ButtonList keys, Spawner spawner, double timeDifference) {\n\t\treturn victim -> moveTowards(victim, target);\n\t}"} {"path":"downloaded/TowardsMovement.java","method_name":"getFields","content":"/**\n\t * Returns a consumer that moves the object in direction of the target defined when this strategy was created.\n\t */\n@Override\n\tpublic Collection<? extends Field<?>> getFields() {\n\t\tList<Field<?>> fields = new ArrayList<>();\n\t\tfields.add(new DoubleValueField(\"Target x\", target.getX()));\n\t\tfields.add(new DoubleValueField(\"Target y\", target.getY()));\n\t\treturn fields;\n\t}"} {"path":"downloaded/UoWFileFactory.java","method_name":"ensureUoWMeta","content":"/**\n         * Ensure UoW meta info tracking UoWFiles is present and UoW callback is registered.\n         */\nprivate static UoWFilesMetaInfo ensureUoWMeta( final UnitOfWork uow )\n        {\n            UoWFilesMetaInfo uowMeta = uow.metaInfo( UoWFilesMetaInfo.class );\n            if( uowMeta != null )\n            {\n                return uowMeta;\n            }\n\n            uowMeta = new UoWFilesMetaInfo();\n            uow.setMetaInfo( uowMeta );\n\n            uow.addUnitOfWorkCallback( new UnitOfWorkCallback()\n            {\n                @Override\n                public void beforeCompletion()\n                    throws UnitOfWorkCompletionException\n                {\n                    UoWFilesMetaInfo uowMeta = uow.metaInfo( UoWFilesMetaInfo.class );\n                    if( uowMeta != null && !uowMeta.isEmpty() )\n                    {\n                        List<UoWFile> concurrentlyModified = new ArrayList<>();\n                        for( UoWFile eachUoWFile : uowMeta.values() )\n                        {\n                            try\n                            {\n                                eachUoWFile.apply();\n                            }\n                            catch( ConcurrentUoWFileStateModificationException ex )\n                            {\n                                concurrentlyModified.add( ex.getUoWFile() );\n                            }\n                        }\n                        if( !concurrentlyModified.isEmpty() )\n                        {\n                            throw new ConcurrentUoWFileModificationException( concurrentlyModified, uow.usecase() );\n                        }\n                    }\n                }\n\n                @Override\n                public void afterCompletion( UnitOfWorkStatus status )\n                {\n                    UoWFilesMetaInfo uowMeta = uow.metaInfo( UoWFilesMetaInfo.class );\n                    if( uowMeta != null && !uowMeta.isEmpty() )\n                    {\n                        for( UoWFile eachUoWFile : uowMeta.values() )\n                        {\n                            if( status == UnitOfWorkStatus.DISCARDED )\n                            {\n                                eachUoWFile.rollback();\n                            }\n                            eachUoWFile.cleanup();\n                        }\n                        uow.metaInfo( UoWFilesMetaInfo.class ).clear();\n                    }\n                }\n            } );\n            return uowMeta;\n        }"} {"path":"downloaded/Store.java","method_name":"getInstance","content":"/**\n\t * applying singleton and double-checked locking to return an instance of the Store class.\n\t * @return an instance of the {@link Store} class.\n\t */\npublic static Store getInstance() {\n\t\tif(instance == null) {\n\t\t\tsynchronized (Store.class) {\n\t\t\t\tif(instance == null)\n\t\t\t\t\tinstance = new Store();\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}"} {"path":"downloaded/Store.java","method_name":"addBook","content":"/**\n\t * adds a book to the store. if the book is added before, just increase the quantity by 1.\n\t * @param book the book to be added.\n\t * @return {@link Integer} the new amount of the book in the store.\n\t */\npublic Integer addBook(Book book) {\n\t\treturn books.merge(book, 1, (oldV, newV) -> oldV+newV);\n\t}"} {"path":"downloaded/Store.java","method_name":"removeBook","content":"/**\n\t * decrease the amount by one only if the book exists in the store, or delete the book if the quantity reaches zero.\n\t * @param book the book to be removed.\n\t */\npublic void removeBook(Book book) {\n\t\tbooks.computeIfPresent(book, (k, v) -> {\n\t\t\tif(v == 0) return null;\n\t\t\telse return --v;\n\t\t});\n\t}"} {"path":"downloaded/Store.java","method_name":"getAllBooks","content":"/**\n\t * gets all books in the store as a map of each book with the quantity of that book in the store. \n\t * @return {@link Map} all books currently in the store.\n\t */\npublic Map<Book, Integer> getAllBooks(){\n\t\treturn this.books;\n\t}"} {"path":"downloaded/Store.java","method_name":"checkBookStatus","content":"/**\n\t * checks the quantity of a certain book in store, or null if none exists.\n\t * @param book the book to check how many items of it in the store if any.\n\t * @return {@link Integer} representing the amount of a certain book is in store currently.\n\t */\npublic Integer checkBookStatus(Book book) {\n\t\treturn books.get(book);\n\t}"} {"path":"downloaded/FailoverConnectionMonitor.java","method_name":"getInstance","content":"/**\n\t * Returns instance of the monitor for provider, if missing create it.\n\t *\n\t * @param provider\n\t * \t\tthe povider for the monitor we will return\n\t * @return the monitor for the provider.\n\t */\npublic static FailoverConnectionMonitor getInstance(ProtocolProviderServiceJabberImpl provider)\n\t{\n\t\tFailoverConnectionMonitor fov;\n\n\t\tsynchronized (providerFailOvers) {\n\t\t\tfov = providerFailOvers.get(provider);\n\n\t\t\tif (fov == null) {\n\t\t\t\tfov = new FailoverConnectionMonitor(provider);\n\t\t\t\tproviderFailOvers.put(provider, fov);\n\t\t\t}\n\t\t}\n\t\treturn fov;\n\t}"} {"path":"downloaded/FailoverConnectionMonitor.java","method_name":"isConnectedToPrimary","content":"/**\n\t * Whether we are connected to primary server for supplied records.\n\t *\n\t * @param recs\n\t * \t\tthe srv records.\n\t * @return whether we are connected to primary server for supplied records.\n\t */\nprivate boolean isConnectedToPrimary(SRVRecord[] recs)\n\t{\n\t\tString primaryAddress = getPrimaryServerRecord(recs).getTarget();\n\t\tif (primaryAddress != null && primaryAddress.equals(currentAddress))\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}"} {"path":"downloaded/FailoverConnectionMonitor.java","method_name":"getPrimaryServerRecord","content":"/**\n\t * Returns the primary server record, the one with highest priority.\n\t *\n\t * @param recs\n\t * \t\tthe srv records to search.\n\t * @return the primary server record.\n\t */\nprivate SRVRecord getPrimaryServerRecord(SRVRecord[] recs)\n\t{\n\t\tif (recs.length >= 1) {\n\t\t\tSRVRecord primary = recs[0];\n\t\t\tfor (SRVRecord srv : recs) {\n\t\t\t\tif (srv.getPriority() < primary.getPriority()) {\n\t\t\t\t\tprimary = srv;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn primary;\n\t\t}\n\t\telse\n\t\t\treturn null;\n\t}"} {"path":"downloaded/SupermarketPanel.java","method_name":"initializeButtons","content":"/**\n\t * Loops through all available products and creates a button\n\t * for each product.  products are currently defined in\n\t * com.nike.supermarket.entities.ItemData.java.\n\t */\npublic void initializeButtons() {\n\t\tif(null!=itemPanel)\n\t\t\tremove(itemPanel);\n\t\t\n\t\titemPanel = new JPanel();\n\t\titemPanel.setLayout(new FlowLayout());\n\t\tList<Item> allItems = itemDao.readAll();\n\t\t\n\t\t//Sort list of items based on item code.\n\t\tCollections.sort(allItems, new Comparator<Item>() {\n\t\t\t@Override\n\t\t\tpublic int compare(Item o1, Item o2) {\n\t\t\t\tCharacter c1 = o1.getCode();\n\t\t\t\tCharacter c2 = o2.getCode();\n\t\t\t\treturn c1.compareTo(c2);\n\t\t\t}\n\t\t});\n\t\t\n\t\tfor(final Item item : allItems){\n\t\t\tJButton addButton = new JButton(item.getName());\n\t\t\tDeal deal = item.getDeal();\n\t\t\tString dealName = deal == null ? \"\" : \"<br>\" + deal.getName();\n\t\t\t//Set tool tip as description and deal if available\n\t\t\taddButton.setToolTipText(\"<html>\"+item.getDescription()+\"<br>Price: $\"+item.getPrice()\n\t\t\t\t\t+ dealName+\"</html>\");\n\t\t\t//Add item to cart when pressed, also update cartLabel.\n\t\t\taddButton.addActionListener(new ActionListener() {\n\t\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t\tcart.addItem(item.getCode());\n\t\t\t\t\tcartLabel.setText(cart.size()+ \" items in your cart\");\n\t\t\t\t}\n\t\t\t});\n\t\t\t//addButton.setBounds(10, frameHeight, 75, 20);\n\t\t\taddButton.setSize(new Dimension(75, 20));\n\t\t\titemPanel.add(addButton);\n\t\t}\n\t\t\n\t\titemPanel.setBounds(10, 30, 280, 150);\n\t\tadd(itemPanel);\n\t\tMain.getFrame().setVisible(true);;\n\t}"} {"path":"downloaded/SupermarketPanel.java","method_name":"checkOut","content":"/**\n\t * Checks out all items currently in the cart.  If the cart is empty a\n\t * warning will be presented, otherwise an information dialog will be presented \n\t * displaying which items were sent to checkout and how much the total was.\n\t */\npublic boolean checkOut(boolean showMessage) {\n\t\tif(null==cart){\n\t\t\tcart = new Cart();\n\t\t}\n\t\t\n\t\tint total = 0;\n\t\tboolean success = false;\n\t\tString stringOfItems = cart.toString();\n\t\tif (stringOfItems.isEmpty()) {\n\t\t\tif(showMessage)\n\t\t\t\tJOptionPane.showMessageDialog(Main.getFrame(), \"Your Cart is Empty\",\n\t\t\t\t\t\t\"Warning\", JOptionPane.WARNING_MESSAGE);\n\t\t} else {\n\t\t\ttotal = supermarket.checkout(stringOfItems);\n\t\t\tcart.clearCart();\n\t\t\tcartLabel.setText(cart.size()+ \" items in your cart\");\n\t\t\tsuccess = true;\n\t\t\tif(showMessage)\n\t\t\t\tJOptionPane.showMessageDialog(Main.getFrame(),\n\t\t\t\t\t\tString.format(\"<html>Items Purchased: %s<br><br>Your total is: $%s</html>\"\n\t\t\t\t\t\t\t\t,stringOfItems, total), \"Total\",\n\t\t\t\t\t\tJOptionPane.INFORMATION_MESSAGE);\n\t\t}\n\t\treturn success;\n\t}"} {"path":"downloaded/RemoveTileChange.java","method_name":"addChangedTile","content":"/**\n\t * Creates a new Remove Tile Change\n\t */\n@Override\n\tpublic void addChangedTile(DisplayTile tile) {\n\t\tif (tile.isRoomTile() || tile.isPassage() || tile.hasSuspect() || \n\t\t\ttile.isRemovedTile() || changedTiles.contains(tile) || tile.hasDoorConnection())\n\t\t\treturn;\n\n\t\ttile.setRemoved();\n\t\tsuper.addChangedTile(tile);\n\t}"} {"path":"downloaded/RemoveTileChange.java","method_name":"applyChange","content":"/**\n\t * Creates a new Remove Tile Change\n\t */\n@Override\n\tpublic String applyChange() {\n\t\tif (changedTiles.isEmpty())\n\t\t\treturn \"Tiles must be empty non-room tiles, not connected to room doors before they can be removed.\";\n\t\t\t\t\n\t\treturn null;\n\t}"} {"path":"downloaded/NestAd.java","method_name":"getAddress","content":"/**\n     * address : string\n     * addressDetail : string\n     * addressLat : 0\n     * addressLng : 0\n     * contactPhone : string\n     * coverPicture : string\n     * introduction : string\n     * isCollection : 0\n     * linkText : string\n     * linkUrl : string\n     * nestInfoId : 0\n     * nestLocationId : 0\n     * nestLocationLat : 0\n     * nestLocationLng : 0\n     * nestTemplateId : 0\n     * nestTimeId : 0\n     * pictureList : [\"string\"]\n     * shortMsg : string\n     * title : string\n     * wechat : string\n     * weibo : string\n     */\npublic String getAddress() {\n        return address;\n    }"} {"path":"downloaded/NestAd.java","method_name":"getAddressDetail","content":"/**\n     * address : string\n     * addressDetail : string\n     * addressLat : 0\n     * addressLng : 0\n     * contactPhone : string\n     * coverPicture : string\n     * introduction : string\n     * isCollection : 0\n     * linkText : string\n     * linkUrl : string\n     * nestInfoId : 0\n     * nestLocationId : 0\n     * nestLocationLat : 0\n     * nestLocationLng : 0\n     * nestTemplateId : 0\n     * nestTimeId : 0\n     * pictureList : [\"string\"]\n     * shortMsg : string\n     * title : string\n     * wechat : string\n     * weibo : string\n     */\npublic String getAddressDetail() {\n        return addressDetail;\n    }"} {"path":"downloaded/NestAd.java","method_name":"getAddressLat","content":"/**\n     * address : string\n     * addressDetail : string\n     * addressLat : 0\n     * addressLng : 0\n     * contactPhone : string\n     * coverPicture : string\n     * introduction : string\n     * isCollection : 0\n     * linkText : string\n     * linkUrl : string\n     * nestInfoId : 0\n     * nestLocationId : 0\n     * nestLocationLat : 0\n     * nestLocationLng : 0\n     * nestTemplateId : 0\n     * nestTimeId : 0\n     * pictureList : [\"string\"]\n     * shortMsg : string\n     * title : string\n     * wechat : string\n     * weibo : string\n     */\npublic double getAddressLat() {\n        return addressLat;\n    }"} {"path":"downloaded/NestAd.java","method_name":"getAddressLng","content":"/**\n     * address : string\n     * addressDetail : string\n     * addressLat : 0\n     * addressLng : 0\n     * contactPhone : string\n     * coverPicture : string\n     * introduction : string\n     * isCollection : 0\n     * linkText : string\n     * linkUrl : string\n     * nestInfoId : 0\n     * nestLocationId : 0\n     * nestLocationLat : 0\n     * nestLocationLng : 0\n     * nestTemplateId : 0\n     * nestTimeId : 0\n     * pictureList : [\"string\"]\n     * shortMsg : string\n     * title : string\n     * wechat : string\n     * weibo : string\n     */\npublic double getAddressLng() {\n        return addressLng;\n    }"} {"path":"downloaded/NestAd.java","method_name":"getContactPhone","content":"/**\n     * address : string\n     * addressDetail : string\n     * addressLat : 0\n     * addressLng : 0\n     * contactPhone : string\n     * coverPicture : string\n     * introduction : string\n     * isCollection : 0\n     * linkText : string\n     * linkUrl : string\n     * nestInfoId : 0\n     * nestLocationId : 0\n     * nestLocationLat : 0\n     * nestLocationLng : 0\n     * nestTemplateId : 0\n     * nestTimeId : 0\n     * pictureList : [\"string\"]\n     * shortMsg : string\n     * title : string\n     * wechat : string\n     * weibo : string\n     */\npublic String getContactPhone() {\n        return contactPhone;\n    }"} {"path":"downloaded/NestAd.java","method_name":"getCoverPicture","content":"/**\n     * address : string\n     * addressDetail : string\n     * addressLat : 0\n     * addressLng : 0\n     * contactPhone : string\n     * coverPicture : string\n     * introduction : string\n     * isCollection : 0\n     * linkText : string\n     * linkUrl : string\n     * nestInfoId : 0\n     * nestLocationId : 0\n     * nestLocationLat : 0\n     * nestLocationLng : 0\n     * nestTemplateId : 0\n     * nestTimeId : 0\n     * pictureList : [\"string\"]\n     * shortMsg : string\n     * title : string\n     * wechat : string\n     * weibo : string\n     */\npublic String getCoverPicture() {\n        return coverPicture;\n    }"} {"path":"downloaded/NestAd.java","method_name":"getIntroduction","content":"/**\n     * address : string\n     * addressDetail : string\n     * addressLat : 0\n     * addressLng : 0\n     * contactPhone : string\n     * coverPicture : string\n     * introduction : string\n     * isCollection : 0\n     * linkText : string\n     * linkUrl : string\n     * nestInfoId : 0\n     * nestLocationId : 0\n     * nestLocationLat : 0\n     * nestLocationLng : 0\n     * nestTemplateId : 0\n     * nestTimeId : 0\n     * pictureList : [\"string\"]\n     * shortMsg : string\n     * title : string\n     * wechat : string\n     * weibo : string\n     */\npublic String getIntroduction() {\n        return introduction;\n    }"} {"path":"downloaded/NestAd.java","method_name":"getIsCollection","content":"/**\n     * address : string\n     * addressDetail : string\n     * addressLat : 0\n     * addressLng : 0\n     * contactPhone : string\n     * coverPicture : string\n     * introduction : string\n     * isCollection : 0\n     * linkText : string\n     * linkUrl : string\n     * nestInfoId : 0\n     * nestLocationId : 0\n     * nestLocationLat : 0\n     * nestLocationLng : 0\n     * nestTemplateId : 0\n     * nestTimeId : 0\n     * pictureList : [\"string\"]\n     * shortMsg : string\n     * title : string\n     * wechat : string\n     * weibo : string\n     */\npublic int getIsCollection() {\n        return isCollection;\n    }"} {"path":"downloaded/NestAd.java","method_name":"getLinkText","content":"/**\n     * address : string\n     * addressDetail : string\n     * addressLat : 0\n     * addressLng : 0\n     * contactPhone : string\n     * coverPicture : string\n     * introduction : string\n     * isCollection : 0\n     * linkText : string\n     * linkUrl : string\n     * nestInfoId : 0\n     * nestLocationId : 0\n     * nestLocationLat : 0\n     * nestLocationLng : 0\n     * nestTemplateId : 0\n     * nestTimeId : 0\n     * pictureList : [\"string\"]\n     * shortMsg : string\n     * title : string\n     * wechat : string\n     * weibo : string\n     */\npublic String getLinkText() {\n        return linkText;\n    }"} {"path":"downloaded/NestAd.java","method_name":"getLinkUrl","content":"/**\n     * address : string\n     * addressDetail : string\n     * addressLat : 0\n     * addressLng : 0\n     * contactPhone : string\n     * coverPicture : string\n     * introduction : string\n     * isCollection : 0\n     * linkText : string\n     * linkUrl : string\n     * nestInfoId : 0\n     * nestLocationId : 0\n     * nestLocationLat : 0\n     * nestLocationLng : 0\n     * nestTemplateId : 0\n     * nestTimeId : 0\n     * pictureList : [\"string\"]\n     * shortMsg : string\n     * title : string\n     * wechat : string\n     * weibo : string\n     */\npublic String getLinkUrl() {\n        return linkUrl;\n    }"} {"path":"downloaded/NestAd.java","method_name":"getNestInfoId","content":"/**\n     * address : string\n     * addressDetail : string\n     * addressLat : 0\n     * addressLng : 0\n     * contactPhone : string\n     * coverPicture : string\n     * introduction : string\n     * isCollection : 0\n     * linkText : string\n     * linkUrl : string\n     * nestInfoId : 0\n     * nestLocationId : 0\n     * nestLocationLat : 0\n     * nestLocationLng : 0\n     * nestTemplateId : 0\n     * nestTimeId : 0\n     * pictureList : [\"string\"]\n     * shortMsg : string\n     * title : string\n     * wechat : string\n     * weibo : string\n     */\npublic long getNestInfoId() {\n        return nestInfoId;\n    }"} {"path":"downloaded/NestAd.java","method_name":"getNestLocationId","content":"/**\n     * address : string\n     * addressDetail : string\n     * addressLat : 0\n     * addressLng : 0\n     * contactPhone : string\n     * coverPicture : string\n     * introduction : string\n     * isCollection : 0\n     * linkText : string\n     * linkUrl : string\n     * nestInfoId : 0\n     * nestLocationId : 0\n     * nestLocationLat : 0\n     * nestLocationLng : 0\n     * nestTemplateId : 0\n     * nestTimeId : 0\n     * pictureList : [\"string\"]\n     * shortMsg : string\n     * title : string\n     * wechat : string\n     * weibo : string\n     */\npublic long getNestLocationId() {\n        return nestLocationId;\n    }"} {"path":"downloaded/NestAd.java","method_name":"getNestLocationLat","content":"/**\n     * address : string\n     * addressDetail : string\n     * addressLat : 0\n     * addressLng : 0\n     * contactPhone : string\n     * coverPicture : string\n     * introduction : string\n     * isCollection : 0\n     * linkText : string\n     * linkUrl : string\n     * nestInfoId : 0\n     * nestLocationId : 0\n     * nestLocationLat : 0\n     * nestLocationLng : 0\n     * nestTemplateId : 0\n     * nestTimeId : 0\n     * pictureList : [\"string\"]\n     * shortMsg : string\n     * title : string\n     * wechat : string\n     * weibo : string\n     */\npublic double getNestLocationLat() {\n        return nestLocationLat;\n    }"} {"path":"downloaded/NestAd.java","method_name":"getNestLocationLng","content":"/**\n     * address : string\n     * addressDetail : string\n     * addressLat : 0\n     * addressLng : 0\n     * contactPhone : string\n     * coverPicture : string\n     * introduction : string\n     * isCollection : 0\n     * linkText : string\n     * linkUrl : string\n     * nestInfoId : 0\n     * nestLocationId : 0\n     * nestLocationLat : 0\n     * nestLocationLng : 0\n     * nestTemplateId : 0\n     * nestTimeId : 0\n     * pictureList : [\"string\"]\n     * shortMsg : string\n     * title : string\n     * wechat : string\n     * weibo : string\n     */\npublic double getNestLocationLng() {\n        return nestLocationLng;\n    }"} {"path":"downloaded/NestAd.java","method_name":"getNestTemplateId","content":"/**\n     * address : string\n     * addressDetail : string\n     * addressLat : 0\n     * addressLng : 0\n     * contactPhone : string\n     * coverPicture : string\n     * introduction : string\n     * isCollection : 0\n     * linkText : string\n     * linkUrl : string\n     * nestInfoId : 0\n     * nestLocationId : 0\n     * nestLocationLat : 0\n     * nestLocationLng : 0\n     * nestTemplateId : 0\n     * nestTimeId : 0\n     * pictureList : [\"string\"]\n     * shortMsg : string\n     * title : string\n     * wechat : string\n     * weibo : string\n     */\npublic long getNestTemplateId() {\n        return nestTemplateId;\n    }"} {"path":"downloaded/NestAd.java","method_name":"getNestTimeId","content":"/**\n     * address : string\n     * addressDetail : string\n     * addressLat : 0\n     * addressLng : 0\n     * contactPhone : string\n     * coverPicture : string\n     * introduction : string\n     * isCollection : 0\n     * linkText : string\n     * linkUrl : string\n     * nestInfoId : 0\n     * nestLocationId : 0\n     * nestLocationLat : 0\n     * nestLocationLng : 0\n     * nestTemplateId : 0\n     * nestTimeId : 0\n     * pictureList : [\"string\"]\n     * shortMsg : string\n     * title : string\n     * wechat : string\n     * weibo : string\n     */\npublic long getNestTimeId() {\n        return nestTimeId;\n    }"} {"path":"downloaded/NestAd.java","method_name":"getShortMsg","content":"/**\n     * address : string\n     * addressDetail : string\n     * addressLat : 0\n     * addressLng : 0\n     * contactPhone : string\n     * coverPicture : string\n     * introduction : string\n     * isCollection : 0\n     * linkText : string\n     * linkUrl : string\n     * nestInfoId : 0\n     * nestLocationId : 0\n     * nestLocationLat : 0\n     * nestLocationLng : 0\n     * nestTemplateId : 0\n     * nestTimeId : 0\n     * pictureList : [\"string\"]\n     * shortMsg : string\n     * title : string\n     * wechat : string\n     * weibo : string\n     */\npublic String getShortMsg() {\n        return shortMsg;\n    }"} {"path":"downloaded/BookModelData.java","method_name":" this","content":"/**\n     * id : 18\n     * name : 人性的弱点\n     * auther :  戴尔·卡耐基\n     * edition : 无\n     * nationality : [美]\n     * cover_img : /uploads/20170531/0e0b27e5938cbf59fb2367ee37cfd8c9.jpg\n     * publisher : 中国发展出版社\n     * publish_time : null\n     * category_id : 5\n     * intro : <p>适当放松的方式的 &nbsp; &nbsp; &nbsp;</p>\n     * create_ti\n) {\n        this.update_time = update_time;\n "} {"path":"downloaded/BookModelData.java","method_name":" getId(","content":"/**\n     * id : 18\n     * name : 人性的弱点\n     * auther :  戴尔·卡耐基\n     * edition : 无\n     * nationality : [美]\n     * cover_img : /uploads/20170531/0e0b27e5938cbf59fb2367ee37cfd8c9.jpg\n     * publisher : 中国发展出版社\n     * publish_time : null\n     * category_id : 5\n     * intro : <p>适当放松的方式的 &nbsp; &nbsp; &nbsp;</p>\n     * create_ti\n    public int getId() {\n        return id;\n    }\n\n "} {"path":"downloaded/BookModelData.java","method_name":"Name() {\n","content":"/**\n     * id : 18\n     * name : 人性的弱点\n     * auther :  戴尔·卡耐基\n     * edition : 无\n     * nationality : [美]\n     * cover_img : /uploads/20170531/0e0b27e5938cbf59fb2367ee37cfd8c9.jpg\n     * publisher : 中国发展出版社\n     * publish_time : null\n     * category_id : 5\n     * intro : <p>适当放松的方式的 &nbsp; &nbsp; &nbsp;</p>\n     * create_ti\nlic String getName() {\n        return name;\n    }\n\n    p"} {"path":"downloaded/BookModelData.java","method_name":"er() {\n   ","content":"/**\n     * id : 18\n     * name : 人性的弱点\n     * auther :  戴尔·卡耐基\n     * edition : 无\n     * nationality : [美]\n     * cover_img : /uploads/20170531/0e0b27e5938cbf59fb2367ee37cfd8c9.jpg\n     * publisher : 中国发展出版社\n     * publish_time : null\n     * category_id : 5\n     * intro : <p>适当放松的方式的 &nbsp; &nbsp; &nbsp;</p>\n     * create_ti\nString getAuther() {\n        return auther;\n    }\n\n    pub"} {"path":"downloaded/BookModelData.java","method_name":"n() {\n        ","content":"/**\n     * id : 18\n     * name : 人性的弱点\n     * auther :  戴尔·卡耐基\n     * edition : 无\n     * nationality : [美]\n     * cover_img : /uploads/20170531/0e0b27e5938cbf59fb2367ee37cfd8c9.jpg\n     * publisher : 中国发展出版社\n     * publish_time : null\n     * category_id : 5\n     * intro : <p>适当放松的方式的 &nbsp; &nbsp; &nbsp;</p>\n     * create_ti\nring getEdition() {\n        return edition;\n    }\n\n    public Stri"} {"path":"downloaded/BookModelData.java","method_name":"{\n        re","content":"/**\n     * id : 18\n     * name : 人性的弱点\n     * auther :  戴尔·卡耐基\n     * edition : 无\n     * nationality : [美]\n     * cover_img : /uploads/20170531/0e0b27e5938cbf59fb2367ee37cfd8c9.jpg\n     * publisher : 中国发展出版社\n     * publish_time : null\n     * category_id : 5\n     * intro : <p>适当放松的方式的 &nbsp; &nbsp; &nbsp;</p>\n     * create_ti\nNationality() {\n        return nationality;\n    }\n\n    public "} {"path":"downloaded/NestAd.java","method_name":"getTitle","content":"/**\n     * address : string\n     * addressDetail : string\n     * addressLat : 0\n     * addressLng : 0\n     * contactPhone : string\n     * coverPicture : string\n     * introduction : string\n     * isCollection : 0\n     * linkText : string\n     * linkUrl : string\n     * nestInfoId : 0\n     * nestLocationId : 0\n     * nestLocationLat : 0\n     * nestLocationLng : 0\n     * nestTemplateId : 0\n     * nestTimeId : 0\n     * pictureList : [\"string\"]\n     * shortMsg : string\n     * title : string\n     * wechat : string\n     * weibo : string\n     */\npublic String getTitle() {\n        return title;\n    }"} {"path":"downloaded/BookModelData.java","method_name":") {\n        ","content":"/**\n     * id : 18\n     * name : 人性的弱点\n     * auther :  戴尔·卡耐基\n     * edition : 无\n     * nationality : [美]\n     * cover_img : /uploads/20170531/0e0b27e5938cbf59fb2367ee37cfd8c9.jpg\n     * publisher : 中国发展出版社\n     * publish_time : null\n     * category_id : 5\n     * intro : <p>适当放松的方式的 &nbsp; &nbsp; &nbsp;</p>\n     * create_ti\n getCover_img() {\n        return cover_img;\n    }\n\n    public "} {"path":"downloaded/BookModelData.java","method_name":") {\n        ret","content":"/**\n     * id : 18\n     * name : 人性的弱点\n     * auther :  戴尔·卡耐基\n     * edition : 无\n     * nationality : [美]\n     * cover_img : /uploads/20170531/0e0b27e5938cbf59fb2367ee37cfd8c9.jpg\n     * publisher : 中国发展出版社\n     * publish_time : null\n     * category_id : 5\n     * intro : <p>适当放松的方式的 &nbsp; &nbsp; &nbsp;</p>\n     * create_ti\n getPublisher() {\n        return publisher;\n    }\n\n    public String"} {"path":"downloaded/NestAd.java","method_name":"getWechat","content":"/**\n     * address : string\n     * addressDetail : string\n     * addressLat : 0\n     * addressLng : 0\n     * contactPhone : string\n     * coverPicture : string\n     * introduction : string\n     * isCollection : 0\n     * linkText : string\n     * linkUrl : string\n     * nestInfoId : 0\n     * nestLocationId : 0\n     * nestLocationLat : 0\n     * nestLocationLng : 0\n     * nestTemplateId : 0\n     * nestTimeId : 0\n     * pictureList : [\"string\"]\n     * shortMsg : string\n     * title : string\n     * wechat : string\n     * weibo : string\n     */\npublic String getWechat() {\n        return wechat;\n    }"} {"path":"downloaded/BookModelData.java","method_name":") {\n        re","content":"/**\n     * id : 18\n     * name : 人性的弱点\n     * auther :  戴尔·卡耐基\n     * edition : 无\n     * nationality : [美]\n     * cover_img : /uploads/20170531/0e0b27e5938cbf59fb2367ee37cfd8c9.jpg\n     * publisher : 中国发展出版社\n     * publish_time : null\n     * category_id : 5\n     * intro : <p>适当放松的方式的 &nbsp; &nbsp; &nbsp;</p>\n     * create_ti\nblish_time() {\n        return publish_time;\n    }\n\n    public i"} {"path":"downloaded/BookModelData.java","method_name":"{\n      ","content":"/**\n     * id : 18\n     * name : 人性的弱点\n     * auther :  戴尔·卡耐基\n     * edition : 无\n     * nationality : [美]\n     * cover_img : /uploads/20170531/0e0b27e5938cbf59fb2367ee37cfd8c9.jpg\n     * publisher : 中国发展出版社\n     * publish_time : null\n     * category_id : 5\n     * intro : <p>适当放松的方式的 &nbsp; &nbsp; &nbsp;</p>\n     * create_ti\nCategory_id() {\n        return category_id;\n    }\n\n   "} {"path":"downloaded/BookModelData.java","method_name":"tIntro() {\n   ","content":"/**\n     * id : 18\n     * name : 人性的弱点\n     * auther :  戴尔·卡耐基\n     * edition : 无\n     * nationality : [美]\n     * cover_img : /uploads/20170531/0e0b27e5938cbf59fb2367ee37cfd8c9.jpg\n     * publisher : 中国发展出版社\n     * publish_time : null\n     * category_id : 5\n     * intro : <p>适当放松的方式的 &nbsp; &nbsp; &nbsp;</p>\n     * create_ti\nc String getIntro() {\n        return intro;\n    }\n\n    public i"} {"path":"downloaded/BookModelData.java","method_name":"() {\n        r","content":"/**\n     * id : 18\n     * name : 人性的弱点\n     * auther :  戴尔·卡耐基\n     * edition : 无\n     * nationality : [美]\n     * cover_img : /uploads/20170531/0e0b27e5938cbf59fb2367ee37cfd8c9.jpg\n     * publisher : 中国发展出版社\n     * publish_time : null\n     * category_id : 5\n     * intro : <p>适当放松的方式的 &nbsp; &nbsp; &nbsp;</p>\n     * create_ti\nCreate_time() {\n        return create_time;\n    }\n\n    public i"} {"path":"downloaded/NestAd.java","method_name":"getWeibo","content":"/**\n     * address : string\n     * addressDetail : string\n     * addressLat : 0\n     * addressLng : 0\n     * contactPhone : string\n     * coverPicture : string\n     * introduction : string\n     * isCollection : 0\n     * linkText : string\n     * linkUrl : string\n     * nestInfoId : 0\n     * nestLocationId : 0\n     * nestLocationLat : 0\n     * nestLocationLng : 0\n     * nestTemplateId : 0\n     * nestTimeId : 0\n     * pictureList : [\"string\"]\n     * shortMsg : string\n     * title : string\n     * wechat : string\n     * weibo : string\n     */\npublic String getWeibo() {\n        return weibo;\n    }"} {"path":"downloaded/NestAd.java","method_name":"getPictureList","content":"/**\n     * address : string\n     * addressDetail : string\n     * addressLat : 0\n     * addressLng : 0\n     * contactPhone : string\n     * coverPicture : string\n     * introduction : string\n     * isCollection : 0\n     * linkText : string\n     * linkUrl : string\n     * nestInfoId : 0\n     * nestLocationId : 0\n     * nestLocationLat : 0\n     * nestLocationLng : 0\n     * nestTemplateId : 0\n     * nestTimeId : 0\n     * pictureList : [\"string\"]\n     * shortMsg : string\n     * title : string\n     * wechat : string\n     * weibo : string\n     */\npublic List<String> getPictureList() {\n        return pictureList;\n    }"} {"path":"downloaded/SongListController.java","method_name":"    public Page","content":"    /**\n     * 默认歌�\nfo\n     * @return\n     */\n    @PostMapping(\"/get\")\n    public PageInfo<SongList> getAllSongLists(@RequestBody QueryInfo queryInfo) {\n        PageInfo<SongList> pageInfo = songListService.selectList(queryInfo);\n"} {"path":"downloaded/SongListController.java","method_name":"ping(\"/getOne/","content":"    /**\n     * 默认歌�\n   * @param id\n     * @return\n     */\n    @GetMapping(\"/getOne/{id}\")\n    public ResultMap getOneSongList(@PathVariable Integer id) {\n        SongList songList = songListService.selectById(id);\n        if (songList != null) {\n            return resultMap.success().code(200).message(songList);\n        }\n        return resultMap"} {"path":"downloaded/SongListController.java","method_name":"  * @return","content":"    /**\n     * 默认歌�\n��歌单\n     *\n     * @param songList\n     * @return\n     */\n    @PostMapping(\"/add\")\n    public ResultMap addSongList(@RequestBody SongList songList) {\n        songList.setPic(defaultSongListPic);// 设置默认歌单图片\n        int insert = songListService.insert(songList);\n        if (insert > 0) {\n            return resultMap.success().code(200).message(\"歌单\" + songList.getTitle() + \"添加成功\");\n        }"} {"path":"downloaded/SongListController.java","method_name":"�新一个歌�","content":"    /**\n     * 默认歌�\n + \"添加失败\");\n    }\n\n    /**\n     * 更新一个歌单\n     *\n     * @param songList\n     * @return\n     */\n    @PutMapping(\"/update\")\n    public ResultMap updateSongList(@RequestBody SongList songList) {\n        int update = songListService.updateById(songList);\n        if (update > 0) {\n            return resultMap.success().code(200).message(\"歌单\" + songList.get"} {"path":"downloaded/SongListController.java","method_name":"失败\");\n    ","content":"    /**\n     * 默认歌�\n01).message(\"歌单\" + songList.getTitle() + \"更新失败\");\n    }\n\n    /**\n     * 删除一个歌单\n     *\n     * @param id\n     * @return\n     */\n    @DeleteMapping(\"/delete/{id}\")\n    public ResultMap deleteSongList(@PathVariable Integer id) {\n        SongList songList = songListService.selectById(id);\n        deleteSongListPicFile(songList); // 删除歌单图片文件\n\n        int delete = songListService.deleteById(id);\n        if (delete > 0) {\n            return resultMap.success"} {"path":"downloaded/SongListController.java","method_name":"() + \" ]删除失","content":"    /**\n     * 默认歌�\nltMap.fail().code(401).message(\"歌单[ \" + songList.getTitle() + \" ]删除失败\");\n    }\n\n    /**\n     * 更新歌单的图片\n     *\n     * @param multipartFile\n     * @param id\n     * @return\n     */\n    @PostMapping(\"/updateSongListPic/{id}\")\n    public ResultMap updateSongListPic(@RequestParam(\"file\") MultipartFile multipartFile, @PathVariable int id) {\n        //上传图片文件\n        if (multipartFile.isEmpty()) {\n            return resultMap.fail().code(401).message(\"图片上传失败\");\n        }\n        if (!multipartFile.getContentType().equals(\"image/jpeg\")) {\n            return resultMap.fail().code(401).message(\"上传的文件类型错误\");\n        }\n\n        // 文件名 = 当前时间到毫秒 + 原来的文件名\n        String fileName = System.currentTimeMillis() + multipartFile.getOriginalFilename(); // 防止文件名重复\n        // 文件路径\n        String filePath = System.getProperty(\"user.dir\") + System.getProperty(\"file.separator\") + \"img\"\n                + System.getProperty(\"file.separator\") + \"songListPic\" + System.getProperty(\"file.separator\");\n        // 如果文件路径不存在，新增该路径\n        File file = new File(filePath);\n        if (!file.exists()) {\n            file.mkdir();\n        }\n        // 实际的文件地址\n        File dest = new File(filePath + fileName);\n        // 存储到数据库里的相对文件地址\n        String storeAvatorPath = \"/img/songListPic/\" + fileName;\n        try {\n            multipartFile.transferTo(dest);\n            SongList songList = songListService.selectById(id);\n            deleteSongListPicFile(songList); //如果当前歌单的图片不是默认图片，更新时，删除旧�"} {"path":"downloaded/SongListController.java","method_name":"Service","content":"    /**\n     * 默认歌�\n片的地址\n            int update = songListService.updateById(songList);\n            if (update > 0) {\n                return resultMap.success().code(200).message(\"图片更新成功\");\n            }\n            return resultMap.fail().code(401).message(\"图片更新失败\");\n        } catch (IOException e) {\n            return resultMap.fail().code(401).message(\"图片更新失败\");\n        }\n    }\n\n    /**\n     * 批量删除歌单\n     *\n     * @param params\n     * @return\n     */\n    @PostMapping(\"/delSome\")\n    public ResultMap delSom"} {"path":"downloaded/RegraNegClienteAlterar.java","method_name":" verifica","content":"\t/**\n\t * Verificar se existe cliente com ID informado e retorna este objeto.\n\t * @param cliente com ID\n\t * @return cliente objeto completo\n\t * @throws Exception\n\t *\n\tstatic protected Cliente verificar(Cliente cliente) throws Exception {\n\t\tClienteRepositorio repositorio = new ClienteRepositorio();\n\t\tCliente procurado = null;\n\t\ttry {\n\t\t\tprocurado = repositorio.consultaPorId(cliente);\n\t\t\t\n\t\t\tif (procurado == null) {\n\t\t\t\tthrow new Exception(\"Cliente inexistente na base de dados.\");\n\t\t\t}\n\t\t} catch (ConexaoException e) {\n\t\t\tthrow new Exception(\n\t\t\t\t\t\"Estamos com dificuldades. Tente novamente mais tarde (daqui a 12horas)<br/>[ALTERAR] Erro: \" + e.getMessage());\n\t\t} catch (RepositorioException e) {\n\t\t\tthrow new Exception(\"O programador fez kk. Nem adianta tentar de novo.<br/>[ALTERAR] Erro: \" + e.getMessage());\n\t\t}\n\t\t\n\t\treturn procurado;\n\t"} {"path":"downloaded/TPedido.java","method_name":"getTDetalles","content":"/**\n\t * \n\t */\npublic List<TDetalle> getTDetalles() {\n\t\t\treturn TDetalles;\n\t\t}"} {"path":"downloaded/TPedido.java","method_name":"getTCliente","content":"/**\n\t * \n\t */\npublic TCliente getTCliente() {\n\t\t\treturn TCliente;\n\t\t}"} {"path":"downloaded/TPedido.java","method_name":"getNo_pedido","content":"/**\n\t * \n\t */\npublic int getNo_pedido() {\n\t\treturn No_pedido;\n\t}"} {"path":"downloaded/TPedido.java","method_name":"getCliente_Id","content":"/**\n\t * \n\t */\npublic int getCliente_Id() {\n\t\treturn Cliente_Id;\n\t}"} {"path":"downloaded/TPedido.java","method_name":"getFecha","content":"/**\n\t * \n\t */\npublic String getFecha() {\n\t\treturn Fecha;\n\t}"} {"path":"downloaded/TPedido.java","method_name":"getEstado","content":"/**\n\t * \n\t */\npublic String getEstado() {\n\t\treturn Estado;\n\t}"} {"path":"downloaded/TPedido.java","method_name":"getImporte","content":"/**\n\t * \n\t */\npublic float getImporte() {\n\t\treturn Importe;\n\t}"} {"path":"downloaded/Question6.java","method_name":"windowBanner","content":"/***********************************************************\n    *   Purpose: Create a banner string that can be used to \n    *           print the banner to a message dialog or the console\n    *           window\n    *   Interface:  no parameters\n    *   Returns:    no return\n    * **************************************************************/\npublic static String windowBanner(){\n        String bannerOut = \"\";\n        \n    \tbannerOut = \"*******************************************\\n\";\n    \tbannerOut += \"Name:\t\tyour name here\\n\";\n    \tbannerOut += \"Class:\t\tCS20S\\n\";\n    \tbannerOut += \"Assignment:\tAx Qy\\n\";\n    \tbannerOut += \"*******************************************\\n\\n\"; \n        \n        return bannerOut;\n    }"} {"path":"downloaded/UserSummary.java","method_name":"getId","content":"/**\n\t * Gets the id\n\t * @return id\n\t */\npublic Long getId() {\n\t\treturn id;\n\t}"} {"path":"downloaded/UserSummary.java","method_name":"getUsername","content":"/**\n\t * Gets the username\n\t * @return username\n\t */\npublic String getUsername() {\n\t\treturn username;\n\t}"} {"path":"downloaded/UserSummary.java","method_name":"getUserId","content":"/**\n\t * Gets the userId\n\t * @return userId\n\t */\npublic String getUserId() {\n\t\treturn userId;\n\t}"} {"path":"downloaded/WxDepositConsumeRequest.java","method_name":"   private Strin","content":"/** 微信�\n(\"fee_type\")\n    private String feeType;\n\n    public String getTransac"} {"path":"downloaded/WxDepositConsumeRequest.java","method_name":"nId = transac","content":"/** 微信�\nhis.transactionId = transactionId;\n    }\n\n    public String getO"} {"path":"downloaded/WxDepositConsumeRequest.java","method_name":"adeNo = out","content":"/** 微信�\n     this.outTradeNo = outTradeNo;\n    }\n\n    public Integer "} {"path":"downloaded/WxDepositConsumeRequest.java","method_name":"otalFee = tot","content":"/** 微信�\n\n        this.totalFee = totalFee;\n    }\n\n    public Integer getC"} {"path":"downloaded/WxDepositConsumeRequest.java","method_name":"umeFee = c","content":"/** 微信�\n     this.consumeFee = consumeFee;\n    }\n\n    public Strin"} {"path":"downloaded/CommDao.java","method_name":"blic String ge","content":"/**\n\t * 得到主版本号\n\t * \n\t * \neturn\n\t */\n\tpublic String getMainVersion() {\n\t\tString sql = sqlHelper.getMainVersionSql();\n\t\tRowSet rs = null;\n\t\tString mainVersion = \"\";\n\t\ttry {\n\t\t\trs = DbOper.executeQuery(sql);\n\t\t\tif (rs.next()) {\n\t\t\t\tmainVersion = rs.getString(\"PVALUE\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tlog.info(e.getMessage());\n\t\t}\n\t\treturn mai"} {"path":"downloaded/CommDao.java","method_name":"urn\n\t */\n\tpubli","content":"/**\n\t * 得到主版本号\n\t * \n\t * \n\n\t * \n\t * @return\n\t */\n\tpublic String getMinorVersion() {\n\t\tString sql = sqlHelper.getMinorVersionSql();\n\t\tRowSet rs = null;\n\t\tString minorVersion = \"\";\n\t\ttry {\n\t\t\trs = DbOper.executeQuery(sql);\n\t\t\tif (rs.next()) {\n\t\t\t\tminorVersion = rs.getString(\"PVALUE\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tlog.info(e.getMessage());\n\t\t}\n\t"} {"path":"downloaded/CommDao.java","method_name":"urn\n\t */\n\tpubli","content":"/**\n\t * 得到主版本号\n\t * \n\t * \n\n\t * \n\t * @return\n\t */\n\tpublic User[] getUserByDeptId(String deptId) {\n\t\tList<User> userList = new ArrayList<User>();\n\t\tRowSet rs = null;\n\t\ttry {\n\t\t\trs = DbOper.executeQuery(sqlHelper.getUserByDeptId(deptId));\n\t\t\tif (rs.next()) {\n\t\t\t\tUser user = new User();\n\t\t\t\tuser.setUserid(rs.getString(\"PVALUE\"));\n\t\t\t\tuser.setUsername(rs.getString(\"PVALUE\"));\n\t\t\t\tuserList.add(user);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tlog.info(e.getMessage());\n\t\t}\n\t\treturn (User[]"} {"path":"downloaded/CommDao.java","method_name":"ram sql\n\t * ","content":"/**\n\t * 得到主版本号\n\t * \n\t * \n�\n\t * \n\t * @param sql\n\t * @return\n\t */\n\tpublic Object ececuteQuery(String sql) {\n\t\tList<Map<String, String>> result = new ArrayList<Map<String, String>>();\n\t\tRowSet rs = null;\n\t\ttry {\n\t\t\trs = DbOper.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tMap<String, String> tempMap = new HashMap<String, String>();\n\t\t\twhile (rs.next()) {\n\t\t\t\tfor (int i = 1; i <= rsmd.getColumnCount(); i++) {\n\t\t\t\t\ttempMap.put(rsmd.getColumnName(i), rs.getString(i));\n\t\t\t\t}\n\t\t\t\tresult.add(tempMap);\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.pr"} {"path":"downloaded/CommDao.java","method_name":"turn result","content":"/**\n\t * 得到主版本号\n\t * \n\t * \ntackTrace();\n\t\t}\n\t\treturn result;\n\t}\n\n\n\tpublic static String sheetExists(String tablename, String sheetid) {\n\t\ttry {\n\t\t\tString strSql = \"SELECT SHEETID FROM \" + tablename\n\t\t\t\t\t+ \" WHERE SHEETGUID = '\" + sheetid + \"'\";\n\t\t\tRowSet rs = DbOper.executeQuery(strSql);\n\t\t\tif (rs.next())\n\t\t\t\treturn rs.getString(\"SHEETID\");\n\t\t} catch (Exception e) {\n\t\t\tlog.i"} {"path":"downloaded/CommDao.java","method_name":"\treturn ","content":"/**\n\t * 得到主版本号\n\t * \n\t * \ne.getMessage());\n\t\t}\n\t\treturn \"\";\n\t}\n\t\n\tpublic static boolean sheetDel(String[] delArray, String[] tableArray){\n\t\ttry{\n\t\t\tList<String> list = new ArrayList<String>();\n\t\t\tfor(int i = 0; i < delArray.length; i++){\n\t\t\t\tString table = tableArray[i];\n\t\t\t\tString sheetid = delArray[i];\n\t\t\t\tString strSql = \"DELETE FROM \" + table + \" WHERE SHEETID = '\" + sheetid + \"' AND UPLOADFLAG IS NULL\";\n\t\t\t\tlist.add(strSql);\n\t\t\t}\n\t\t\t\n\t\t\tDbOper.executeNonQuery(list);\n\t\t\treturn true;\n\t\t}catch (Exception e) {\n\t\t\tlog.info"} {"path":"downloaded/CommDao.java","method_name":"�数据库�","content":"/**\n\t * 得到主版本号\n\t * \n\t * \n* 得到数据库服务器当前系统时间\n\t * \n\t * @return\n\t */\n\tString getDBSysDate() {\n\t\ttry {\n\t\t\tRowSet rs = DbOper.executeQuery(sqlHelper.getDBSysDate());\n\t\t\tif (rs.next()) {\n\t\t\t\treturn rs.getString(1);\n\t\t\t}\n\t\t\treturn \"\";\n\t\t} c"} {"path":"downloaded/CommDao.java","method_name":"**\n\t *","content":"/**\n\t * 得到主版本号\n\t * \n\t * \nreturn \"\";\n\t\t}\n\t}\n\t\n\t/**\n\t * 根据patternid和sheetid删除一条流程，主要用于视图\n\t */\n\tpublic static boolean delete(String patternid, String sheetid){\n\t\ttry{\n\t\t\tcom.sdjxd.pms.platform.form.service.Form.deleteInstanceAndFlow(patternid"} {"path":"downloaded/CommDao.java","method_name":"turn true;\n\t\t} c","content":"/**\n\t * 得到主版本号\n\t * \n\t * \nsheetid);\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn false;\n\t}\n\tpublic boolean saveUserOpenPage(String userId,String menuName,String url) throws SQLException{\n\t"} {"path":"downloaded/CommDao.java","method_name":"Query(sqlHelp","content":"/**\n\t * 得到主版本号\n\t * \n\t * \nurn DbOper.executeNonQuery(sqlHelper.saveUserOpenPage(userId, menuName, url))==-1?false:true;\n\t}\n\t\n\tpublic static String getServerTime(String format){\n\t\tString date = null;\n\t\ttry{\n\t\t\tdate = new SimpleDateFormat(format).format(new Date());\n\t\t}catch(Exception e){\n\t\t\tdate = new SimpleDateF"} {"path":"downloaded/CommDao.java","method_name":"s\").format(ne","content":"/**\n\t * 得到主版本号\n\t * \n\t * \nt(\"yyyy-MM-dd HH:mm:ss\").format(new Date());\n\t\t\tlog.error(e.getMessage());\n\t\t}\n\t\treturn"} {"path":"downloaded/CommDao.java","method_name":"\t}\n\t}\n\t\n\t/","content":"/**\n\t * 得到主版本号\n\t * \n\t * \nMessage());\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * 判断票是否驳回控制是否显示审核历史\n\t * @param patternid\n\t * @return 1，是驳回，2，不是驳回，3，不知道是不是\n\t */\n\tpublic static int showShList(String sheetid, String patternid){\n\t\ttry{\n\t\t\tString sheetstatusid = \"\", tablename = \"\";\n\t\t\t\n\t\t\tString strSql = \"SELECT STATUSID FROM [S].JXD7_WF_FLOWNODE T1, [S].JXD7_WF_FORM T2 WHERE T2.FORMPATTERNID = '\" + patternid + \"' AND T2.FLOWID = T1.FLOWID\";\n\t\t\tRowSet rs = DbOper.executeQuery(strSql);\n\t\t\tif(rs.next()){\n\t\t\t\tsheetstatusid = rs.getString(\"STATUSID\");\n\t\t\t}else{\n\t\t\t\treturn 3;\n\t\t\t}\n\t\t\t\n\t\t\tstrSql = \"SELECT TABLENAME FROM [S].JXD7_PM_PATTERN WHERE PATTERNID = '\" + patternid + \"'\";\n\t\t\trs = DbOper.executeQuery(strSql);\n\t\t\tif(rs.next()){\n\t\t\t\ttablename = rs.getString(\"TABLENAME\");\n\t\t\t}else{\n\t\t\t\treturn 3;\n\t\t\t}\n\t\t\t\n\t\t\tstrSql = \"SELECT SHEETSTATUSID FROM \" + tablename + \" WHERE SHEETID = '\" + sheetid + \"'\";\n\t\t\trs = DbOper.executeQuery(strSql);\n\t\t\tif(!rs.next())\n\t\t\t\treturn 2;\n\t\t\telse if(!rs.getString(\"SHEETSTATUSID\").equals(sheetstatusid))\n\t\t\t\treturn 3;\n\t\t\t\n\t\t\tstrSql = \"SELECT 1 FROM XMGG_FLOW_SHHQ T1, \" + tablename + \" T2 WHERE T1.DYBDID = '\" + sheetid + \"' AND T1.DYBDID = T2.SHEETID AND T2.SHEETSTATUSID = '\" + sheet"} {"path":"downloaded/CommDao.java","method_name":"trSql);\n\t\t\tif(rs.","content":"/**\n\t * 得到主版本号\n\t * \n\t * \n DbOper.executeQuery(strSql);\n\t\t\tif(rs.next()){\n\t\t\t\treturn 1;\n\t\t\t}else{\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t}catch(Exception err){\n\t\t\terr.printStackTrace();\n\t\t\treturn 3;\n\t\t}\n\t}\n\t\n\t//修复组织机构showorder\n\tpublic static boolean resetOrgShoworder(){\n\t\ttry{\n\t\t\tint i = 0;\n\t\t\tList<String> list = new ArrayList<String>();\n\t\t\t\n\t\t\tString strSql = \"SELECT ORGANISEID, ORGANISELEVEL FROM JXD7_XT_ORGANISE ORDER BY LENGTH(ORGANISELEVEL), SHOWORDER\";\n\t\t\tRowSet rs = DbOper.executeQuery(strSql);\n\t\t\twhile(rs.next()){\n\t\t\t\tstrSql = \"UPDATE JXD7_XT_ORGANISE SET SHOWORDER = \" + i++ + \" WHERE ORGANISEID = '\" + rs.getString(\"ORGANISEID\") + "} {"path":"downloaded/CommDao.java","method_name":"\n\t\t\t}\n\t\t\t\n\t\t\ti = DbOper","content":"/**\n\t * 得到主版本号\n\t * \n\t * \n\n\t\t\t\tlist.add(strSql);\n\t\t\t}\n\t\t\t\n\t\t\ti = DbOper.executeNonQuery(list);\n\t\t\tif(i == -1)\n\t\t\t\treturn false;\n\t\t\treturn true;\n\t\t}catch(Exception err){\n\t\t\terr.printStackTrace();\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tpublic static HashMap getSubTableRecordsCount(Object[]mainRecords,HashMap[] subTableInfo) throws SQLException\n\t{\n\t\tboolean deleteOK = true;\n\t\tHashMap map = new HashMap();\n\t\tfor(Object value:mainRecords)\n\t\t{\n\t\t\tint count = 0;\n\t\t\tfor(HashMap tinfo:subTableInfo)\n\t\t\t{\n\t\t\t\tString table = (String)tinfo.get(\"tableId\");\n\t\t\t\tString field =  (String)tinfo.get(\"field\");\n\t\t\t\tString sql = \"select count(1) from \"+table+\" where \"+field+\"='\"+value+\"'\";\n\t\t\t\tResultSet rs = DbOper"} {"path":"downloaded/CommDao.java","method_name":"unt);\n\t\t}\n\t\tm","content":"/**\n\t * 得到主版本号\n\t * \n\t * \n}\n\t\t\tmap.put(value, count);\n\t\t}\n\t\tmap.put(\"deleteOK\",deleteOK);\n\t\treturn map;\n\t}\n\t/**\n\t * 删除主表信息及相关子表信息\n\t * @param table\n\t * @param values\n\t * @param isFlow\n\t * @param subTables\n\t * @return\n\t */\n\tpublic static boolean deleteCascade(String table, Object[]values, boolean isFlow, HashMap[] subTables)\n\t{\n\t\tboolean r = true;\n\t\ttry\n\t\t{\n\t\t\tfor(Object value:values)\n\t\t\t{\n\t\t\t\t//删除子表\n\t\t\t\tif(subTables != null && subTables.length>0)\n\t\t\t\t{\n\t\t\t\t\tfor(HashMap subTable:subTables)\n\t\t\t\t\t{\n\t\t\t\t\t\tObject b = subTable.get(\"isFlow\");\n\t\t\t\t\t\tb = b==null?false:b;\n\t\t\t\t\t\tr &= deleteSubTableData((String)value,(String)subTable.get(\"tableId\"),(String)subTable.get(\"field\"),\n\t\t\t\t\t\t\t\t(Boolean)b);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//删除主表\n\t\t\t\tif(isFlow && r)\n\t\t\t\t{\n\t\t\t\t\tr &= FlowInstance.deleteByForm((String)value);\n\t\t\t\t}\n\t\t\t\tif(r)\n\t\t\t\t\tTable.deleteData(table,(String)value);\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t//指定主表是流程,但删除失败时\n\t\t\t\t\ttry{\n\t\t\t\t\t\t//尝试判断主表是不是流程表\n\t\t\t\t\t\tResultSet rs = DbOper.executeQuery(\"select FLOWOBJECTID FROM \"+table+\" where SHEETID='\"+value+\"'\");\n\t\t\t\t\t\tif(rs.next() && rs.getString(1)==null)\n\t\t\t\t\t\t\tthrow(new SQLException(\"FLOWOBJECTID为空,以表单形式删除记录.\"));\n\t\t\t\t\t\tbrea"} {"path":"downloaded/CommDao.java","method_name":"�循环，删除�","content":"/**\n\t * 得到主版本号\n\t * \n\t * \n//不是流程表,结束循环，删除失败\n\t\t\t\t\t}catch(SQLException e){\n\t\t\t\t\t\t//不是流程表,或流程实例ID为空,删除表单实例\n\t\t\t\t\t\tlog.info(e.getMessage());\n\t\t\t\t\t\tif(e.getMessage().indexOf(\"FLOWOBJECTID\")>=0)\n\t\t\t\t\t\t\tr = Table.deleteData(table,(String)value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t\tr =false;\n\t\t}\n\t\treturn r;\n\t}\n\tprivate static boolean deleteSubTableData(String value, String subTable, String subTableField, boolean isFlow) throws SQLException\n\t{\n\t\tResultSet rs = null;\n\t\tboolean r = true;\n\t\tList<String> list = new ArrayList<String>();\n\t\tif(isFlow)\n\t\t{\n\t\t\trs = DbOper.executeQuery("} {"path":"downloaded/CommDao.java","method_name":"\");\n\t\t\twhile","content":"/**\n\t * 得到主版本号\n\t * \n\t * \nleField+\"='\"+value+\"'\");\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\tlist.add(rs.getString(1));\n\t\t\t}\n\t\t\tif(list.size()>0)\n\t\t\t{\n\t\t\t\tr &= FlowInstance.delete(list.toArray(new String[0]));\n\t\t\t}\n\t\t}\n\t\tif(r)\n\t\t\tDbOper.executeNonQuery(\"delete from \"+subTable+\" where \"+subTableField+\"='\"+value+\"'\");\n\t\trs = null;\n\t\tlist = null;\n\t\treturn r;\n\t}\n\t\n\t/**\n\t * 判断日期重复\n\t * @return true|false|null\n\t */\n\tpublic static Object isDuplicated(DateCheckerBean bean)\n\t{\n\t\tif(bean == null || !bean.checkData())\n\t\t\treturn null;\n\t\tResultSet rs = null;\n\t\ttry{\n\t\t\tif(bean.getTableName() == null)\n"} {"path":"downloaded/CommDao.java","method_name":"setPkField(form.g","content":"/**\n\t * 得到主版本号\n\t * \n\t * \nk() != null)\n\t\t\t\t\tbean.setPkField(form.getIndexTablePkCol());\n\t\t\t}\n\t\t\t rs = DbOper.executeQuery(bean.getCheckSql());\n\t\t\t if(rs.next())\n\t\t\t\t return true;\n\t\t\t return false;\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t}finally{\n\t\t\trs = null;\n\t\t}\n\t}\n\t\n\t/**\n\t * 返回下一个下级行政区域的层次和层次编码\n\t * \n\t * @author Key 2011-11-29\n\t * @param regionId 当前行政区域ID\n\t * @return [层次,层次码]\n\t */\n\tpublic static String[] getNextRegionInfo(String regionId)\n\t{\n\t\tString[] info = null;\n\t\ttry{\n\t\t\tResultSet rs = DbOper.executeQuery(new CommSql().getNextRegionNeedInfo(regionId));\n\t\t\tif(rs.next())\n\t\t\t{\n\t\t\t\tString maxChildrenLevelCode = rs.getString(\"MAX_CHILDREN_LEVELCODE\");\n\t\t\t\tString  levelCode = rs.getString(\"REGIONLEVELCODE\");\n\t\t\t\tint level = rs.getInt(\"REGIONLEVEL\");\n\t\t\t\tinfo = new String[2];\n\t\t\t\tinfo[0] = String.valueOf(level+1);\n\t\t\t\tif(maxChildrenLevelCode != null)\n\t\t\t\t{\n\t\t\t\t\tString s = m"} {"path":"downloaded/CommDao.java","method_name":" = maxChildrenLevel","content":"/**\n\t * 得到主版本号\n\t * \n\t * \n)-3);\n\t\t\t\t\tString tail = maxChildrenLevelCode.substring(maxChildrenLevelCode.length()-3);\n\t\t\t\t\tint lv = Integer.parseInt(tail)+1;\n\t\t\t\t\tif(lv<10)\n\t\t\t\t\t\ts = s+\"00\"+lv;\n\t\t\t\t\telse if(lv<100)\n\t\t\t\t\t\ts = s +\"0\" + lv;\n\t\t\t\t\telse\n\t\t\t\t\t\ts += lv;\n\t\t\t\t\tinfo[1] = s;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tinfo[1] = levelCode +\"001\";\n\t\t\t\t}\n\t\t\t}\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn info;\n\t}\n\t\n\t/**\n\t"} {"path":"downloaded/Rating.java","method_name":"getSource","content":"/**\n     * Devuelve el nombre de la pagina a la que pertenece la puntuacion.\n     * @return String | Nombre de la pagina.\n     */\npublic String getSource() {\n        return source;\n    }"} {"path":"downloaded/Rating.java","method_name":"getValue","content":"/**\n     * Devuelve la nota de la movie/series de una pagina externa.\n     * @return String | Nota de la pagina externa.\n     */\npublic String getValue() {\n        return value;\n    }"} {"path":"downloaded/Fruit.java","method_name":"getNumber","content":"/**\n\t * \n\t */\npublic String getNumber() {\n\t\treturn number;\n\t}"} {"path":"downloaded/Fruit.java","method_name":"getName","content":"/**\n\t * \n\t */\npublic String getName() {\n\t\treturn name;\n\t}"} {"path":"downloaded/Fruit.java","method_name":"getCategory","content":"/**\n\t * \n\t */\npublic Category getCategory() {\n\t\treturn category;\n\t}"} {"path":"downloaded/Fruit.java","method_name":"getColor","content":"/**\n\t * \n\t */\npublic String getColor() {\n\t\treturn color;\n\t}"} {"path":"downloaded/Fruit.java","method_name":"getOrigin","content":"/**\n\t * \n\t */\npublic String getOrigin() {\n\t\treturn origin;\n\t}"} {"path":"downloaded/Fruit.java","method_name":"getSeason","content":"/**\n\t * \n\t */\npublic String getSeason() {\n\t\treturn season;\n\t}"} {"path":"downloaded/Fruit.java","method_name":"getDescribe","content":"/**\n\t * \n\t */\npublic String getDescribe() {\n\t\treturn describe;\n\t}"} {"path":"downloaded/Fruit.java","method_name":"getFunction","content":"/**\n\t * \n\t */\npublic String[] getFunction() {\n\t\treturn function;\n\t}"} {"path":"downloaded/Fruit.java","method_name":"getFruiterer","content":"/**\n\t * \n\t */\npublic Fruiterer getFruiterer() {\n\t\treturn fruiterer;\n\t}"} {"path":"downloaded/Fruit.java","method_name":"getPrice","content":"/**\n\t * \n\t */\npublic float getPrice() {\n\t\treturn price;\n\t}"} {"path":"downloaded/Fruit.java","method_name":"getCount","content":"/**\n\t * \n\t */\npublic double getCount() {\n\t\treturn count;\n\t}"} {"path":"downloaded/Fruit.java","method_name":"getFavorite","content":"/**\n\t * \n\t */\npublic Integer getFavorite() {\n\t\treturn favorite;\n\t}"} {"path":"downloaded/Fruit.java","method_name":"getSerialversionuid","content":"/**\n\t * \n\t */\npublic static long getSerialversionuid() {\n\t\treturn serialVersionUID;\n\t}"} {"path":"downloaded/Fruit.java","method_name":"getTaste","content":"/**\n\t * \n\t */\npublic String getTaste() {\n\t\treturn taste;\n\t}"} {"path":"downloaded/Lager.java","method_name":"bestandOperationen","content":"/**\n     * Hilfsmethode zum Auslagern der Operationen die <br>\n     *     den Artikel suchen um den Bestand zu aendern\n     *\n     * @param artikelNr     Muss 4-stellig sein\n     * @param menge         Darf nicht negativ sein\n     *\n     * @return      int stelle des Artikels\n     */\nprivate int bestandOperationen(int artikelNr, int menge) {\n        Validator.check(artikelNr < 1000 || artikelNr > 9999, MSG_ARTIKELNR);\n        Validator.check(menge < 0, MSG_MENGE);\n        int stelle = -1;\n        for (int i = 0; i < key; i++){\n            if(getArtikel(i).getArtikelNr() == artikelNr){\n                stelle = i;\n            }\n        }\n        Validator.check(stelle == -1, MSG_NICHTGEFUNDEN);\n        return stelle;\n    }"} {"path":"downloaded/Lager.java","method_name":"getArtikel","content":"/**\n     * Methode zum Ausgeben eines bestimmten Artikels mittels Index\n     *\n     * @param index     Darf nicht negativ sein\n     */\npublic Artikel getArtikel(int index){\n        Validator.check(index < 0, MSG_INDEX);\n        Validator.check(index >= key, MSG_NICHTVORHANDEN);\n        int i = 0;\n        Iterator<Map.Entry<Integer, Artikel>> iter = lager.entrySet().iterator();\n        Artikel temp = iter.next().getValue();\n        while (iter.hasNext() && i < index){\n            temp = iter.next().getValue();\n            i++;\n        }\n        return temp;\n    }"} {"path":"downloaded/Lager.java","method_name":"toString","content":"/**\n     * Methode zur Ausgabe des Lagers\n     *\n     * @return String   komplettes Lager\n     */\npublic String toString(){\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < key; i++) {\n            sb.append(getArtikel(i));\n        }\n        return sb.toString();\n    }"} {"path":"downloaded/Lager.java","method_name":"getArtikelAnzahl","content":"/**\n     * Methode zum Ausgeben der Artikelanzahl\n     *\n     * @return  int pointer\n     */\npublic int getArtikelAnzahl(){\n        return key;\n    }"} {"path":"downloaded/Lager.java","method_name":"ausgebenBestandsListe","content":"/**\n     * Methode zum Ausgeben der Bestandsliste\n     *\n     * @return String   StringBuilder sb.toString()\n     */\npublic String ausgebenBestandsListe(){\n        final String nr = \"ArtNr\";\n        final String desc = \"Beschreibung\";\n        final String preis = \"Preis\";\n        final String bestand = \"Bestand\";\n        final String total = \"Gesamt\";\n        final String type = \"Typ\";\n        final String gesamtwert = \"Gesamtwert:\";\n\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"\\nLagerort: Alt-Saarbrücken\\n\\n\");\n        sb.append(String.format(\"%-8s\", nr))\n                .append(String.format(\"%-32s\", desc))\n                .append(String.format(\"%-8s\", preis))\n                .append(String.format(\"%-8s\", bestand))\n                .append(String.format(\"%-10s\", total))\n                .append(type + \"\\n\")\n                .append(\"-------------------------------------------------------------------------------------------------------\\n\");\n        for (int i = 0; i < key; i++){\n            Artikel artikel = getArtikel(i);\n            sb.append(String.format(\"%-8d\", artikel.getArtikelNr()));\n                    if(getArtikel(i).getClass().getSimpleName().equals(\"Artikel\")) {\n                        sb.append(String.format(\"%-32s\", artikel.getBezeichnung()));\n                    }else{\n                        sb.append(String.format(\"%-32s\", artikel.getBeschreibung()));\n                    }\n                    sb.append(String.format(\"%-8.2f\", artikel.getPreis()))\n                    .append(String.format(\"%-8d\", artikel.getBestand()))\n                    .append(String.format(\"%-10.2f\", artikel.getGesamt()))\n                    .append(artikel.getClass().getSimpleName()).append(\"\\n\");\n        }\n        sb.append(\"\\n-------------------------------------------------------------------------------------------------------\")\n                .append(String.format(\"\\n%-56s\", gesamtwert)).append(getGesamtwert());\n        return sb.toString();\n    "} {"path":"downloaded/Lager.java","method_name":" findeArtike","content":" /**\n     * Methode zum Finden eines Artikels mittels der Artikelnr\n     *\n     * @param artikelnr     muss 4-stellig sein\n     * @return      int stelle oder -1 wenn nicht gefunden\n     *\n public int findeArtikel(int artikelnr){\n        for (int i = 0; i < key; i++){\n            if (lager.get(i).getArtikelNr() == artikelnr){\n                return i;\n            }\n        }\n        return -1;\n    "} {"path":"downloaded/Lager.java","method_name":" getGesamtwer","content":" /**\n     * get-Methode zum Ermitteln des Gesamtwertes aller Artikel im Lager\n     *\n     * @return      double Gesamtwert\n     *\n public double getGesamtwert(){\n        double total = 0;\n        for (int i = 0; i < key; i++){\n            total += getArtikel(i).getGesamt();\n        }\n        return total;\n    "} {"path":"downloaded/Lager.java","method_name":" getSorte","content":" /**\n     * Methode die Das Lager nach einem bestimmten Kriterium sortiert\n     *\n     * @param biPredicate       Predicate das Angibt wie das Lager sortiert wird\n     * @return      Artikel [] sortiertes Lager\n     *\n public Artikel[] getSorted(BiPredicate<Artikel, Artikel> biPredicate){\n        Artikel [] liste = new Artikel[key];\n        int i  = 0;\n        for (Map.Entry<Integer, Artikel> integerArtikelEntry : lager.entrySet()) {\n            liste[i] = integerArtikelEntry.getValue();\n            i++;\n        }\n\n        //BubbleSort\n        boolean sorted = false;\n        Artikel temp;\n        while (!sorted){\n            sorted = true;\n            for (i = 0; i < liste.length - 1; i++){\n                if(biPredicate.test(liste[i], liste[i+1])){\n                    temp = liste[i];\n                    liste[i] = liste[i+1];\n                    liste[i+1] = temp;\n                    sorted = false;\n                }\n            }\n        }\n        return liste;\n    "} {"path":"downloaded/Lager.java","method_name":" filte","content":" /**\n     * Methode die das Lager nach einem bestimmten Kriterium filtert\n     *\n     * @param predicate     Filterkriterium\n     * @return      Artikel [] liste\n     *\n     * Artikel [] filteredList nur als tempArray\n     *\n public Artikel [] filter(Predicate<Artikel> predicate) {\n        Artikel[] filteredList = new Artikel[key];\n        Artikel [] liste = new Artikel[key];\n        int i  = 0;\n        for (Map.Entry<Integer, Artikel> integerArtikelEntry : lager.entrySet()) {\n            liste[i] = integerArtikelEntry.getValue();\n            i++;\n        }\n        int p = 0;\n        for (i = 0; i < key; i++) {\n            if (predicate.test(liste[i])) {\n            filteredList[p] = liste [i];\n            p++;\n            }\n        }\n        liste = filteredList;\n        return liste;\n    "} {"path":"downloaded/Lager.java","method_name":" aenderePreisAllerArtikelmitRetur","content":" /**\n     * Methode die den Preis aller Artikel aendert\n     * @param prozent   Prozentsatz der verarbeitet wird\n     *                      Darf nicht kleiner als -100 sein\n     * @return      Artikel [] mit den geaenderten Werten\n     *\n public Artikel [] aenderePreisAllerArtikelmitReturn(double prozent){\n        Validator.check(prozent < -100, MSG_PREIS);\n        for (int i = 0; i < key; i++){\n            Artikel artikel = getArtikel(i);\n            double preis  = artikel.getPreis();\n            preis += preis * prozent / 100;\n            artikel.setPreis(preis);\n        }\n        return (Artikel[]) lager.values().toArray();\n    "} {"path":"downloaded/Lager.java","method_name":" getArticle","content":" /**\n     * Methode die das Lager erst filtert und danach sortiert\n     * @param predicate         Filterkriterium\n     * @param biPredicate       Sortiertkriterium\n     * @return      Artikel [] das gefiltert und sortiert ist\n     *\n public Artikel [] getArticles (Predicate<Artikel> predicate, BiPredicate<Artikel, Artikel> biPredicate){\n       Artikel [] sortierteListe = new Artikel[getArtikelAnzahl()];\n       int p = 0;\n        for (int i = 0; i < key; i++) {\n            if (predicate.test(getArtikel(i))) {\n                sortierteListe[p] = getArtikel(i);\n                p++;\n            }\n        }\n\n        if(p > 1) {\n            sortierteListe = sortieren(biPredicate, sortierteListe, p);\n        }\n        return sortierteListe;\n    "} {"path":"downloaded/Lager.java","method_name":" sortiere","content":" /**\n     * Hilfsmethode zum Sortierten eines gegebenen Arrays mittels Sortiertkriterium\n     * @param biPredicate       Sortierkriterium\n     * @param sortedLager       Das Array das sortiert wird\n     * @param p                 Hilfsint\n     * @return      Das sortierte Array\n     *\n public Artikel[] sortieren(BiPredicate<Artikel, Artikel> biPredicate, Artikel[] sortedLager, int p){\n\n        boolean sorted = false;\n        Artikel temp;\n        while (!sorted){\n            sorted = true;\n            for (int i = 0; i < p - 1; i++){\n                if(biPredicate.test(sortedLager[i], sortedLager[i+1])){\n                    temp = sortedLager[i];\n                    sortedLager[i] = sortedLager[i+1];\n                    sortedLager[i+1] = temp;\n                    sorted = false;\n                }\n            }\n        }\n        return sortedLager;\n    "} {"path":"downloaded/Lager.java","method_name":" filterAl","content":" /**\n     * Methode zum Ausfuehren mehrerer Filtermethoden\n     * @param predicates    Array mit Kriterien\n     * @return      Das sortierte Array\n     *\n public Artikel[] filterAll (Predicate<Artikel> ... predicates){\n        Artikel [] temp = new Artikel[key];\n        for (Predicate<Artikel> predicate : predicates) {\n            temp = filter(predicate);\n        }\n        return temp;\n    "} {"path":"downloaded/Coup.java","method_name":"obtenirLigne","content":"/**\n     *  Methode permettant d'obtenir le numero de la ligne du coup.\n     * \n     * @return Le numero de la ligne >=0\n     */\npublic int obtenirLigne() {\n        return this.ligne;\n    }"} {"path":"downloaded/Coup.java","method_name":"obtenirColonne","content":"/**\n     *  Methode permettant d'obtenir le numero de la colonne du coup.\n     * \n     * @return Le numero de la colonne, >=0\n     */\npublic int obtenirColonne() {\n        return this.colonne;\n    }"} {"path":"downloaded/EventQueue.java","method_name":"getNextInstruction","content":"/**\n\t * Return the next floor the elevator have to go to\n\t * \n\t * @return next floor if exists else -1\n\t */\npublic int getNextInstruction() {\n\t\t\n\t\tint nextFloor = -1;\n\t\tswitch (elevator.getCurrentDirection()) {\n\t\t\n\t\t//get first element of upQueue that is ABOVE the elevator's current floor\n\t\tcase UP:\n\t\t\tfor (int i = 0; i < upQueue.size() && nextFloor < 0; i++) {\n\t\t\t\tif (upQueue.get(i) >= elevator.getCurrentFloor()) {\n\t\t\t\t\tnextFloor = upQueue.get(i);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// change direction if every floor in upQueue is UNDER the elevator's current floor\n\t\t\tif (nextFloor < 0 && downQueue.size() > 0) {\n\t\t\t\tnextFloor = downQueue.get(0);\n\t\t\t}\n\t\t\tbreak;\n\t\t\t\n\t\t//get first element of downQueue that is UNDER the elevator's current floor\n\t\tcase DOWN:\n\t\t\tfor (int i = 0; i < downQueue.size() && nextFloor < 0; i++) {\n\t\t\t\tif (upQueue.get(i) <= elevator.getCurrentFloor()) {\n\t\t\t\t\tnextFloor = upQueue.get(i);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// change direction if every floor in downQueue is ABOVE the elevator's current floor\n\t\t\tif (nextFloor < 0 && upQueue.size() > 0) {\n\t\t\t\tnextFloor = upQueue.get(0);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t\treturn nextFloor;\n\t}"} {"path":"downloaded/RebaseJavaRoot.java","method_name":"addFile","content":"/********************************************************************************/\nvoid addFile(RebaseJavaFile jf)\n{\n   if (file_nodes.contains(jf)) return;\n\n   file_nodes.add(jf);\n   jf.setRoot(this);\n}"} {"path":"downloaded/RebaseJavaRoot.java","method_name":"getFiles","content":"/********************************************************************************/\nCollection<RebaseJavaFile> getFiles()\t       { return file_nodes; }"} {"path":"downloaded/RebaseJavaRoot.java","method_name":"getTrees","content":"/********************************************************************************/\nCollection<CompilationUnit> getTrees()\n{\n   List<CompilationUnit> rslt= new ArrayList<CompilationUnit>();\n   for (RebaseJavaFile rf : file_nodes) {\n      CompilationUnit cu = rf.getAstNode();\n      if (cu != null) rslt.add(cu);\n    }\n   return rslt;\n}"} {"path":"downloaded/RebaseJavaRoot.java","method_name":"getAllTypes","content":"/********************************************************************************/\nSet<RebaseJavaType> getAllTypes()\n{\n   return all_types;\n}"} {"path":"downloaded/RebaseJavaRoot.java","method_name":"isResolved","content":"/********************************************************************************/\nboolean isResolved()\t\t\t\t{ return is_resolved; }"} {"path":"downloaded/RebaseJavaRoot.java","method_name":"resolve","content":"/********************************************************************************/\n@Override synchronized public void resolve()\n{\n   if (isResolved()) return;\n\n   RebaseMain.logD(\"START RESOLVE\");\n   for (RebaseJavaFile jf : file_nodes) {\n      RebaseMain.logD(\"FILE: \" + jf.getFile().getFileName());\n    }\n\n   clearResolve();\n\n   RebaseJavaTyper jt = new RebaseJavaTyper(base_context);\n   RebaseJavaResolver jr = new RebaseJavaResolver(jt);\n   jt.assignTypes(this);\n   jr.resolveNames(this);\n\n   all_types = new HashSet<RebaseJavaType>(jt.getAllTypes());\n\n   setResolved(true);\n}"} {"path":"downloaded/RebaseJavaRoot.java","method_name":"getMessages","content":"/********************************************************************************/\n@Override public List<RebaseMessage> getMessages()\n{\n   List<RebaseMessage> rslt = new ArrayList<RebaseMessage>();\n   for (RebaseJavaFile jf : file_nodes) {\n      List<RebaseMessage> nmsg = jf.getMessages();\n      if (nmsg != null) rslt.addAll(nmsg);\n    }\n   return rslt;\n}"} {"path":"downloaded/RebaseJavaRoot.java","method_name":"accept","content":"/********************************************************************************/\nvoid accept(RebaseJavaVisitor v)\n{\n   v.preVisit(this);\n   if (!v.preVisit2(this)) return;\n\n   if (v.visit(this)) {\n      for (CompilationUnit cu : getTrees()) {\n\t cu.accept(v);\n       }\n    }\n\n   v.postVisit(this);\n}"} {"path":"downloaded/RebaseJavaRoot.java","method_name":"findSymbols","content":"/********************************************************************************/\n@Override public RebaseSearcher findSymbols(String pattern,String kind)\n{\n   RebaseJavaSearch search = new RebaseJavaSearch(this);\n\n   findSymbols(search,pattern,kind);\n\n   return search;\n}"} {"path":"downloaded/RebaseJavaRoot.java","method_name":"findSymbolAt","content":"/********************************************************************************/\n@Override public RebaseSearcher findSymbolAt(String file,int soff,int eoff)\n{\n   resolve();\n\n   RebaseJavaSearch search = new RebaseJavaSearch(this);\n   ASTVisitor av = search.getFindLocationVisitor(soff,eoff);\n\n   for (RebaseJavaFile jf : file_nodes) {\n      if (!jf.getFile().getFileName().equals(file)) continue;\n      search.setFile(jf);\n      jf.getAstNode().accept(av);\n      break;\n    }\n\n   return search;\n}"} {"path":"downloaded/RebaseJavaRoot.java","method_name":"findSymbolByKey","content":"/********************************************************************************/\n@Override public RebaseSearcher findSymbolByKey(String proj,String file,String key)\n{\n   resolve();\n\n   RebaseJavaSearch search = new RebaseJavaSearch(this);\n   ASTVisitor av = search.getFindByKeyVisitor(key);\n\n   for (RebaseJavaFile jf : file_nodes) {\n      if (!jf.getFile().getFileName().equals(file)) continue;\n      search.setFile(jf);\n      jf.getAstNode().accept(av);\n    }\n\n   return search;\n}"} {"path":"downloaded/RebaseJavaRoot.java","method_name":"findTypes","content":"/********************************************************************************/\n@Override public RebaseSearcher findTypes(RebaseSearcher rs)\n{\n   RebaseJavaSearch rjs = (RebaseJavaSearch) rs;\n   Set<RebaseSymbol> syms = rjs.getSymbols();\n   if (syms == null || syms.isEmpty()) return rs;\n   List<RebaseJavaType> typs = new ArrayList<RebaseJavaType>();\n   boolean isok = false;\n   for (RebaseSymbol rsym : syms) {\n      RebaseJavaSymbol sym = (RebaseJavaSymbol) rsym;\n      if (!sym.isTypeSymbol()) {\n\t isok = false;\n\t RebaseJavaType jt = sym.getType();\n\t if (!jt.isUndefined() && jt.isUnknown()) typs.add(jt);\n       }\n    }\n   if (isok) return rs;\n\n   RebaseJavaSearch nrjs = new RebaseJavaSearch(this);\n   for (RebaseJavaType jt : typs) {\n      findSymbols(nrjs,jt.getName(),\"TYPE\");\n    }\n\n   return nrjs;\n}"} {"path":"downloaded/RebaseJavaRoot.java","method_name":"outputLocations","content":"/********************************************************************************/\n@Override public void outputLocations(RebaseSearcher rs,boolean def,boolean ref,\n      boolean impl,boolean ronly,boolean wonly,IvyXmlWriter xw)\n{\n   RebaseJavaSearch search = (RebaseJavaSearch) rs;\n\n   ASTVisitor av = search.getLocationsVisitor(def,ref,impl,ronly,wonly);\n\n   for (RebaseJavaFile jf : file_nodes) {\n      search.setFile(jf);\n      jf.getAstNode().accept(av);\n    }\n\n   List<SearchResult> rslt = search.getMatches();\n   if (rslt == null) return;\n   for (SearchResult mtch : rslt) {\n      xw.begin(\"MATCH\");\n      xw.field(\"OFFSET\",mtch.getOffset());\n      xw.field(\"LENGTH\",mtch.getLength());\n      xw.field(\"STARTOFFSET\",mtch.getOffset());\n      xw.field(\"ENDOFFSET\",mtch.getOffset() + mtch.getLength());\n      xw.field(\"FILE\",mtch.getFile().getFileName());\n      RebaseJavaSymbol sym = mtch.getContainer();\n      if (sym != null) {\n\t sym.outputNameData(mtch.getFile(),xw);\n       }\n      xw.end(\"MATCH\");\n    }\n}"} {"path":"downloaded/RebaseJavaRoot.java","method_name":"outputFullName","content":"/********************************************************************************/\n@Override public void outputFullName(RebaseSearcher rs,IvyXmlWriter xw)\n{\n   RebaseJavaSearch search = (RebaseJavaSearch) rs;\n   Set<RebaseSymbol> syms = search.getSymbols();\n   if (syms == null) return;\n   for (RebaseSymbol sym : syms) {\n      RebaseJavaSymbol js = (RebaseJavaSymbol) sym;\n      js.outputFullName(xw);\n    }\n}"} {"path":"downloaded/RebaseJavaRoot.java","method_name":"outputContainer","content":"/********************************************************************************/\n@Override public void outputContainer(RebaseFile rf,int soff,int eoff,IvyXmlWriter xw)\n{\n   resolve();\n\n   RebaseJavaSymbol sym = null;\n\n   for (RebaseJavaFile jf : file_nodes) {\n      if (jf.getFile() != rf) continue;\n      sym = getContainer(jf.getAstNode(),soff,eoff);\n      break;\n    }\n\n   if (sym == null) return;\n   sym.outputNameData(rf,xw);\n}"} {"path":"downloaded/RebaseJavaRoot.java","method_name":"getContainer","content":"/********************************************************************************/\nprivate RebaseJavaSymbol getContainer(CompilationUnit cu,int soff,int eoff)\n{\n   for (Object o : cu.types()) {\n      AbstractTypeDeclaration atd = (AbstractTypeDeclaration) o;\n      int spos = cu.getExtendedStartPosition(atd);\n      if (spos <= soff && spos + cu.getExtendedLength(atd) >= eoff) {\n\t return getContainer(cu,atd,soff,eoff);\n       }\n    }\n\n   return null;\n}"} {"path":"downloaded/RebaseJavaRoot.java","method_name":"getContainer","content":"/********************************************************************************/\nprivate RebaseJavaSymbol getContainer(CompilationUnit cu,AbstractTypeDeclaration atd,\n      int soff,int eoff)\n{\n   RebaseJavaSymbol sym = RebaseJavaAst.getDefinition(atd);\n\n   for (Object o : atd.bodyDeclarations()) {\n      BodyDeclaration bd = (BodyDeclaration) o;\n      int spos = cu.getExtendedStartPosition(bd);\n      if (spos <= soff && spos + cu.getExtendedLength(bd) >= eoff) {\n\t switch (bd.getNodeType()) {\n\t    case ASTNode.TYPE_DECLARATION :\n\t    case ASTNode.ANNOTATION_TYPE_DECLARATION :\n\t    case ASTNode.ENUM_DECLARATION :\n\t       return getContainer(cu,(AbstractTypeDeclaration) bd,soff,eoff);\n\t    case ASTNode.ENUM_CONSTANT_DECLARATION :\n\t    case ASTNode.FIELD_DECLARATION :\n\t    case ASTNode.ANNOTATION_TYPE_MEMBER_DECLARATION :\n\t    case ASTNode.INITIALIZER :\n\t    case ASTNode.METHOD_DECLARATION :\n\t       return sym;\n\t  }\n       }\n    }\n\n   return sym;\n}"} {"path":"downloaded/ConfigPanel.java","method_name":"��止服务器\");\n    ","content":"/**\n     * Method generated by IntelliJ IDEA GUI Designer\n     * >>> IMPORTANT!! <<<\n     * DO NOT edit this method OR call it in your code!\n     *\n     * @noinspection ALL\n     */\nStopBtn.setText(\"停止服务器\");\n        redisControlPanel.add(redisStopB"} {"path":"downloaded/Verticals.java","method_name":"getVerticalName","content":"/**\n\t * Gets the vertical name.\n\t *\n\t * @return the vertical name\n\t */\npublic String getVerticalName() {\n\t\treturn verticalName;\n\t}"} {"path":"downloaded/Verticals.java","method_name":"getCatGroupId","content":"/**\n\t * Gets the cat group id - defines the search group details.\n\t *\n\t * @return the cat group id - defines the search group details\n\t */\npublic String getCatGroupId() {\n\t\treturn catGroupId;\n\t}"} {"path":"downloaded/Verticals.java","method_name":"getVerticalUrlName","content":"/**\n\t * Gets the vertical url name.\n\t *\n\t * @return the vertical url name\n\t */\npublic String getVerticalUrlName() {\n\t\treturn verticalUrlName;\n\t}"} {"path":"downloaded/Verticals.java","method_name":"getVerticalUrl","content":"/**\n\t * Gets the vertical url.\n\t *\n\t * @return the vertical url\n\t */\npublic String getVerticalUrl() {\n\t\treturn VerticalUrl;\n\t}"} {"path":"downloaded/Verticals.java","method_name":"toString","content":"/**\n\t * Sets the vertical url.\n\t *\n\t * @param verticalUrl the new vertical url\n\t */\n@Override\n\tpublic String toString() {\n\t\tfinal StringBuilder builder = new StringBuilder();\n\t\tbuilder.append(\"Verticals [verticalName=\").append(verticalName).append(\", catGroupId=\").append(catGroupId)\n\t\t\t\t.append(\", verticalUrlName=\").append(verticalUrlName).append(\", VerticalUrl=\").append(VerticalUrl)\n\t\t\t\t.append(\"]\");\n\t\treturn builder.toString();\n\t}"} {"path":"downloaded/GroupDevice.java","method_name":" publ","content":"/**\n     * 分组主键\n id\n     */\n    public Integer getId() {\n        "} {"path":"downloaded/GroupDevice.java","method_name":"��主键\n ","content":"/**\n     * 分组主键\ngroup_id - 分组主键\n     */\n    public Integer getGroup"} {"path":"downloaded/GroupDevice.java","method_name":"�\n     *\n  ","content":"/**\n     * 分组主键\n�取设备主键\n     *\n     * @return device_id - 设备主�"} {"path":"downloaded/CloudFoundryEnvParser.java","method_name":"parseDBEnvCredentialsValues","content":"/**\n\t * \n\t * @param serviceOfferedRealName\n\t * @return\n\t */\npublic DataBaseParameters parseDBEnvCredentialsValues(String serviceOfferedRealName)\n\t{\n\t\tif (\"elephantsql\".equalsIgnoreCase(serviceOfferedRealName)) \n\t\t{\n\t\t\treturn parseElephantSQLEnvCredentialsValues();\n\t\t}\n\t\telse if (\"cleardb\".equalsIgnoreCase(serviceOfferedRealName)) \n\t\t{\n\t\t\treturn parseClearDBEnvCredentialsValues();\n\t\t}\n\t\t\n\t\treturn new DataBaseParameters();\n\t}"} {"path":"downloaded/CloudFoundryEnvParser.java","method_name":"parseElephantSQLEnvCredentialsValues","content":"/**\n\t * \n\t *  \n\t * {\n     * \t\"elephantsql\": [{\n     * \t\t\"name\": \"myelephantsql\",\n     * \t    \"label\": \"elephantsql\",\n     * \t    \"tags\": [\n     * \t      \t\"New Product\",\n     * \t       \t\"Data Stores\",\n     * \t       \t\"relational\",\n     * \t       \t\"Data Store\",\n     * \t       \t\"postgresql\"\n     * \t    ],\n     * \t    \"plan\": \"turtle\",\n     * \t    \"credentials\": {\n     * \t       \t\"uri\": \"postgres://zgeleggb:9KTwlMCtZaHil_dT0uYyVCHNMWhGK6I-@babar.elephantsql.com:5432/zgeleggb\",\n     * \t       \t\"max_conns\": \"5\"\n     * \t    }\n     * \t   }\n     * \t ]\n     * }\n\t * \n\t * \n\t */\nprivate DataBaseParameters parseElephantSQLEnvCredentialsValues() \n\t{\n\t\tString[] paths = {\"system_env_json\", \"VCAP_SERVICES\", \"elephantsql\", \"credentials\"};\n\t\tJsonObject resJsonObject = getJsonObjectValues(_jobj, paths, 0);\n\t\t\n\t\tDataBaseParameters res = new DataBaseParameters();\n\t\t\n\t\tif (resJsonObject != null) {\n\t\t\tres.setMax_conns(getValue(resJsonObject, \"max_conns\"));\n\t\t\tres.setUri(getValue(resJsonObject, \"uri\"));\n\t\t}\n\t\t\n\t\treturn res;\n\t}"} {"path":"downloaded/CloudFoundryEnvParser.java","method_name":"parseClearDBEnvCredentialsValues","content":"/**\n\t * \n\t * \n\t * {\n\t * \tcleardb=[{\n\t * \t\tname=mycleardb,\n\t * \t\tlabel=cleardb,\n\t * \t\ttags=[DataStores,\n\t * \t\t\trelational,\n\t * \t\t\tDataStore,\n\t *\t \t\tmysql],\n\t * \t\tplan=spark,\n\t * \t\tcredentials={\n\t * \t\t\tjdbcUrl=jdbc: mysql: //badab523ff0667: dcfd0c53@us-cdbr-iron-east-01.cleardb.net: 3306/ad_c2b3de816d30d24,\n\t * \t\t\turi=mysql: //badab523ff0667: dcfd0c53@us-cdbr-iron-east-01.cleardb.net: 3306/ad_c2b3de816d30d24?reconnect=true,\n\t * \t\t\tname=ad_c2b3de816d30d24,\n\t * \t\t\thostname=us-cdbr-iron-east-01.cleardb.net,\n\t * \t\t\tport=3306,\n\t * \t\t\tusername=badab523ff0667,\n\t * \t\t\tpassword=dcfd0c53\n\t * \t\t}\n\t * \t}]\n\t * }\n\t * \n\t */\nprivate DataBaseParameters parseClearDBEnvCredentialsValues() \n\t{\n\t\tString[] paths = {\"system_env_json\", \"VCAP_SERVICES\", \"cleardb\", \"credentials\"};\n\t\tJsonObject resJsonObject = getJsonObjectValues(_jobj, paths, 0);\n\t\t\n\t\tDataBaseParameters res = new DataBaseParameters();\n\t\t\n\t\tif (resJsonObject != null) {\n\t\t\tres.setJdbcUrl(getValue(resJsonObject, \"jdbcUrl\"));\n\t\t\tres.setUri(getValue(resJsonObject, \"uri\"));\n\t\t\tres.setName(getValue(resJsonObject, \"name\"));\n\t\t\tres.setHostname(getValue(resJsonObject, \"hostname\"));\n\t\t\tres.setPort(getValue(resJsonObject, \"port\"));\n\t\t\tres.setUsername(getValue(resJsonObject, \"username\"));\n\t\t\tres.setPassword(getValue(resJsonObject, \"password\"));\n\t\t\t\n\t\t\tString jdbcUrlParsed = res.parseUrlString(res.getJdbcUrl());\n\t\t\tres.setUrl_conn(jdbcUrlParsed);\n\t\t}\n\t\t\n\t\treturn res;\n\t}"} {"path":"downloaded/CloudFoundryEnvParser.java","method_name":"getJsonValue","content":"/**\n\t * \n\t * String[] paths = {\"system_env_json\", \"VCAP_SERVICES\", \"cleardb\", \"credentials\", \"jdbcUrl\"};\n\t * \n\t * @param json\n\t * @param path\n\t * @param posPath\n\t * @return\n\t */\nprivate String getJsonValue(JsonObject json, String[] path, int posPath) {\n\t\tJsonElement elm = json.get(path[posPath]);\n\t\tJsonObject jobj2;\n\t\t\n\t\tif (posPath == path.length-1) {\n\t\t\treturn elm.getAsString();\n\t\t}\n\t\t\n\t\tif (elm instanceof JsonArray) {\n\t\t\tjobj2 = elm.getAsJsonArray().get(0).getAsJsonObject();\n\t\t}\n\t\telse {\n\t\t\tjobj2 = elm.getAsJsonObject();\n\t\t}\n\n\t\tposPath++;\n\t\treturn getJsonValue(jobj2, path, posPath);\n\t}"} {"path":"downloaded/CloudFoundryEnvParser.java","method_name":"getJsonObjectValues","content":"/**\n\t * \n\t * @param json\n\t * @param path\n\t * @param posPath\n\t * @return\n\t */\nprivate JsonObject getJsonObjectValues(JsonObject json, String[] path, int posPath) {\n\t\ttry {\n\t\t\tJsonElement elm = json.get(path[posPath]);\n\t\t\tJsonObject jobj2;\n\n\t\t\tif (elm instanceof JsonArray) {\n\t\t\t\tjobj2 = elm.getAsJsonArray().get(0).getAsJsonObject();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tjobj2 = elm.getAsJsonObject();\n\t\t\t}\n\t\t\t\n\t\t\tif (posPath == path.length-1) {\n\t\t\t\treturn jobj2;\n\t\t\t}\n\n\t\t\tposPath++;\n\t\t\treturn getJsonObjectValues(jobj2, path, posPath);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\t}"} {"path":"downloaded/CloudFoundryEnvParser.java","method_name":"getValue","content":"/**\n\t * \n\t * @param json\n\t * @param path\n\t * @return\n\t */\nprivate String getValue(JsonObject json, String path) {\n\t\tJsonElement elm_jdbcUrl = json.get(path);\n\t\tif (elm_jdbcUrl != null)\n\t\t{\n\t\t\treturn elm_jdbcUrl.getAsString();\n\t\t}\n\t\treturn \"\";\n\t}"} {"path":"downloaded/InclusiveNamingRule.java","method_name":"builder","content":"/**\n     * Fluent API builder for typos rule.\n     *\n     * @return a new builder\n     */\npublic static Builder builder() {\n        return new Builder();\n    }"} {"path":"downloaded/InclusiveNamingRule.java","method_name":"check","content":"/**\n     * Check the files for typos.\n     *\n     * @param filesToCheck files to check\n     * @return list of identified failures\n     */\npublic List<RuleFailure> check(FoundFiles filesToCheck) {\n        List<RuleFailure> failures = new LinkedList<>();\n\n        AtomicInteger count = new AtomicInteger();\n\n        filesToCheck.fileRequests()\n                .stream()\n                .filter(this::include)\n                .forEach(fr -> {\n                    count.incrementAndGet();\n                    processFile(fr, failures);\n                });\n\n        if (failures.size() == 0) {\n            Log.info(\"Inclusive naming processed \" + count.get() + \" files.\");\n        } else {\n            Log.info(\"Inclusive naming processed \" + count.get() + \" files, found \" + failures.size() + \" errors\");\n        }\n        return failures;\n    }"} {"path":"downloaded/InclusiveNamingRule.java","method_name":"include","content":"/**\n     * Check the files for typos.\n     *\n     * @param filesToCheck files to check\n     * @return list of identified failures\n     */\nprivate boolean include(FileRequest fr) {\n        for (FileMatcher exclude : excludes) {\n            if (exclude.matches(fr)) {\n                return false;\n            }\n        }\n\n        for (FileMatcher include : includes) {\n            if (include.matches(fr)) {\n                return true;\n            }\n        }\n\n        return false;\n    }"} {"path":"downloaded/InclusiveNamingRule.java","method_name":"config","content":"/**\n         * Update builder from maven configuration.\n         *\n         * @param inclusiveNamingConfig maven config\n         * @return updated builder\n         */\npublic Builder config(InlusiveNamingConfig inclusiveNamingConfig) {\n            this.inclusiveNamingConfig = inclusiveNamingConfig;\n            return this;\n        }"} {"path":"downloaded/InclusiveNamingRule.java","method_name":"build","content":"/**\n         * Build a new instance of {@link io.helidon.build.maven.enforcer.inclusivenaming.InclusiveNamingRule}.\n         *\n         * @return new rule\n         */\npublic InclusiveNamingRule build() {\n            return new InclusiveNamingRule(this);\n        }"} {"path":"downloaded/InclusiveNamingRule.java","method_name":"readTerms","content":"/**\n         * Build a new instance of {@link io.helidon.build.maven.enforcer.inclusivenaming.InclusiveNamingRule}.\n         *\n         * @return new rule\n         */\nprivate List<XmlData> readTerms(Supplier<InputStream> supplier){\n            List<XmlData> terms = new ArrayList<>();\n            try (InputStream is = supplier.get()) {\n                XmlInclusiveNaming xml = xmlInclusiveNaming(is);\n                for (XmlData data : xml.getData()) {\n                    String tier = data.getTier();\n                    String term = data.getTerm();\n                    if (!ALLOWED_TIERS.contains(tier)) {\n                        boolean exclude = false;\n                        for (Pattern pattern : inclusiveNamingConfig.excludeTermsRegExps()) {\n                            if (pattern.matcher(term).matches()) {\n                                exclude = true;\n                                break;\n                            }\n                        }\n                        if (!exclude) {\n                            terms.add(data);\n                        }\n                    }\n                }\n            } catch (IOException | JAXBException e) {\n                throw new EnforcerException(\"Failed to read inclusive naming file\", e);\n            }\n            terms.addAll(inclusiveNamingConfig.additionalTerms());\n            return terms;\n        }"} {"path":"downloaded/InclusiveNamingRule.java","method_name":"xmlInclusiveNaming","content":"/**\n         * Build a new instance of {@link io.helidon.build.maven.enforcer.inclusivenaming.InclusiveNamingRule}.\n         *\n         * @return new rule\n         */\nprivate XmlInclusiveNaming xmlInclusiveNaming(InputStream is) throws JAXBException {\n            JAXBContext contextObj = JAXBContext.newInstance(XmlInclusiveNaming.class);\n            Unmarshaller unmarshaller = contextObj.createUnmarshaller();\n            return (XmlInclusiveNaming) unmarshaller.unmarshal(is);\n        }"} {"path":"downloaded/InclusiveNamingRule.java","method_name":"terms","content":"/**\n         * Build a new instance of {@link io.helidon.build.maven.enforcer.inclusivenaming.InclusiveNamingRule}.\n         *\n         * @return new rule\n         */\nList<XmlData> terms() {\n            if (inclusiveNamingConfig.inclusiveNamingFile().isPresent()) {\n                return readTerms(() -> {\n                    try {\n                        return new FileInputStream(inclusiveNamingConfig.inclusiveNamingFile().get());\n                    } catch (FileNotFoundException e) {\n                        throw new EnforcerException(inclusiveNamingConfig.inclusiveNamingFile().get() + \" was not found\");\n                    }\n                });\n            } else {\n                return readTerms(() -> InclusiveNamingRule.class.getResourceAsStream(INCLUSIVE_NAMING_XML));\n            }\n        }"} {"path":"downloaded/InclusiveNamingRule.java","method_name":"excludes","content":"/**\n         * Build a new instance of {@link io.helidon.build.maven.enforcer.inclusivenaming.InclusiveNamingRule}.\n         *\n         * @return new rule\n         */\nList<FileMatcher> excludes() {\n            return inclusiveNamingConfig.excludes()\n                    .stream()\n                    .map(FileMatcher::create)\n                    .flatMap(List::stream)\n                    .collect(Collectors.toList());\n        }"} {"path":"downloaded/InclusiveNamingRule.java","method_name":"includes","content":"/**\n         * Build a new instance of {@link io.helidon.build.maven.enforcer.inclusivenaming.InclusiveNamingRule}.\n         *\n         * @return new rule\n         */\nList<FileMatcher> includes() {\n            Set<String> includes = new HashSet<>(DEFAULT_INCLUDES);\n            includes.addAll(inclusiveNamingConfig.includes());\n            return includes.stream()\n                    .map(FileMatcher::create)\n                    .flatMap(List::stream)\n                    .collect(Collectors.toList());\n        }"} {"path":"downloaded/AppVoiceManage.java","method_name":"pe\n\t * @return","content":"/**\n\t * 获取手机各种音量的最大值和当前值\n\t * @p\nam voice_type\n\t * @return\n\t */\n\tpublic int getVoiceLimits(int voice_type){\n\t\tint voice_value = - 1;\n\t\tswitch (voice_type) {\n\t\tcase PHONE_VOICE_MAX:\n\t\t\tif(phone_voice_max == -1)\n\t\t\t\tphone_voice_max = am.getStreamMaxVolume(AudioManager.STREAM_VOICE_CALL);\n\t\t\tvoice_value = phone_voice_max;\n\t\t\tbreak;\n\t\tcase PHONE_VOICE_CURRENT:\n\t\t\tphone_voice_current = am.getStreamVolume(AudioManager.STREAM_VOICE_CALL);\n\t\t\tvoice_value = phone_voice_current;\n\t\t\tbreak;\n\t\tcase SYSTEM_VOICE_MAX:\n\t\t\tif(system_voice_max == -1)\n\t\t\t\tsystem_voice_max = am.getStreamMaxVolume(AudioManager.STREAM_SYSTEM);\n\t\t\tvoice_value = system_voice_max;\n\t\t\tbreak;\n\t\tcase SYSTEM_VOICE_CURRENT:\n\t\t\tsystem_voice_current = am.getStreamVolume(AudioManager.STREAM_SYSTEM);\n\t\t\tvoice_value = system_voice_current;\n\t\t\tbreak;\n\t\tcase RING_VOICE_MAX:\n\t\t\tif(ring_voice_max == 1)\n\t\t\t\tring_voice_max = am.getStreamMaxVolume(AudioManager.STREAM_RING);\n\t\t\tvoice_value = ring_voice_max;\n\t\t\tbreak;\n\t\tcase RING_VOICE_CURRENT:\n\t\t\tring_voice_current = am.getStreamVolume(AudioManager.STREAM_RING);\n\t\t\tvoice_value = ring_voice_current;\n\t\t\tbreak;\n\t\tcase MUSIC_VOICE_MAX:\n\t\t\tif(music_voice_max == -1)\n\t\t\t\tmusic_voice_max = am.getStreamMaxVolume(AudioManager.STREAM_MUSIC);\n\t\t\tvoice_value = music_voice_max;\n\t\t\tbreak;\n\t\tcase MUSIC_VOICE_CURRENT:\n\t\t\tmusic_voice_current = am.getStreamVolume(AudioManager.STREAM_MUSIC);\n\t\t\tvoice_value = music_voice_current;\n\t\t\tbreak;\n\t\tcase ALARM_VOICE_MAX:\n\t\t\tif(alarm_voice_max == -1)\n\t\t\t\talarm_voice_max = am.getStreamMaxVolume(AudioManager.STREAM_ALARM);\n\t\t\tvoice_value = alarm_voice_max;\n\t\t\tbreak;\n\t\tcase ALARM_VOICE_CURRENT:\n\t\t\talarm_voice_current = am.getStreamVolume(AudioManager.STREAM_ALARM);\n\t\t\tvoice_value = alarm_voice_current;\n\t\t\tbre"} {"path":"downloaded/Enseigne.java","method_name":"getCode","content":"/**\n     * @return\n     */\npublic String getCode() {\n        // TODO implement here\n        return \"\";\n    }"} {"path":"downloaded/Enseigne.java","method_name":"getMatricule","content":"/**\n     * @return\n     */\npublic String getMatricule() {\n        // TODO implement here\n        return \"\";\n    }"} {"path":"downloaded/ListUtils.java","method_name":"��合b泛型","content":"/**\n     * 根据 a b 两个集合中的某个属性来取交集\n     *\n     * @param a            集合a\n     * @param b            集合b\n     * @param getIdentityA 获取集合A中的某个特征主键的方法\n     * @param getIdentityB 获取集合B中的某个特征主键的方法\n     * @param <T>          集�\n型\n     * @param <V>          集合b泛型\n     * @param <R>          特征主键类型\n     * @return 返回集合a中的数据\n     */\n    public static <T, V, R> List<T> intersection(List<T> a, List<V> b, Function<T, R> getIdentityA, Function<V, R> getIdentityB) {\n        Map<R, T> byIdentityA = a.stream().collect(Collectors.toMap(getIdentityA, Function.identity(), (v1, v2) -> v1));\n        Map<R, V> byIdentityB = b.stream().collect(Collectors.toMap(getIdentityB, Function.identity(), (v1, v2) -> v1));\n        List<T> res = new ArrayList<>();\n        for (Map.Entry<R, T> entry : byIdentityA.entrySet()) {\n       "} {"path":"downloaded/ListUtils.java","method_name":"\n     * ","content":"/**\n     * 根据 a b 两个集合中的某个属性来取交集\n     *\n     * @param a            集合a\n     * @param b            集合b\n     * @param getIdentityA 获取集合A中的某个特征主键的方法\n     * @param getIdentityB 获取集合B中的某个特征主键的方法\n     * @param <T>          集�\n��的某个特征主键的方法\n     * @param getIdentityB 获取集合B中的某个特征主键的方法\n     * @param <T>          集合a泛型\n     * @param <V>          集合b泛型\n     * @param <R>          特征主键类型\n     * @return 返回集合a中的数据\n     */\n    public static <T, V, R> List<T> subtract(List<T> a, List<V> b, Function<T, R> getIdentityA, Function<V, R> getIdentityB) {\n        Map<R, T> byIdentityA = a.stream().collect(Collectors.toMap(getIdentityA, Function.identity(), (v1, v2) -> v1));\n        Map<R, V> byIdentityB = b.stream().collect(Collectors.toMap(getIdentityB, Functio"} {"path":"downloaded/ListUtils.java","method_name":"**\n     * 包含复�","content":"/**\n     * 根据 a b 两个集合中的某个属性来取交集\n     *\n     * @param a            集合a\n     * @param b            集合b\n     * @param getIdentityA 获取集合A中的某个特征主键的方法\n     * @param getIdentityB 获取集合B中的某个特征主键的方法\n     * @param <T>          集�\n        return res;\n    }\n\n    /**\n     * 包含复制属性的功能\n     *\n     * @param a\n     * @param b\n     * @param getIdentityA\n     * @param getIdentityB\n     * @param copyValueFromB2Afun 将b中的的某些属性复制给a用到的方法\n     * @param <T>\n     * @param <V>\n     * @param <R>\n     * @return 返回A类型的数据\n     */\n    public static <T, V, R> List<T> intersectionForUpdate(List<T> a, List<V> b,\n                                                          Function<T, R> getIdentityA, Function<V, R> getIdentityB,\n                                                          BiConsumer<V, T> copyValueFromB2Afun) {\n        Map<R, T> byIdentityA = a.stream().collect(Collectors.toMap(getIdentityA, Function.identity(), (v1, v2) -> v1));\n        Map<R, V> byIdentityB = b.stream().collect(Collectors.toMap(getIdentityB, Function.identity(), (v1, v2) -> v1));\n        List<T> res = new ArrayList<>();\n        for (Map.Entry<R, T> entry : byIdentityA.entrySet()) "} {"path":"downloaded/ListUtils.java","method_name":"romB2A","content":"/**\n     * 根据 a b 两个集合中的某个属性来取交集\n     *\n     * @param a            集合a\n     * @param b            集合b\n     * @param getIdentityA 获取集合A中的某个特征主键的方法\n     * @param getIdentityB 获取集合B中的某个特征主键的方法\n     * @param <T>          集�\n.getValue();\n                if (copyValueFromB2Afun != null) {\n                    copyValueFromB2Afun.accept(valueB, valueA);\n                }\n                res.add(valueA);\n            }\n        }\n        return res;\n    }\n\n    /**\n     * 数组转列表\n     *\n     * @par"} {"path":"downloaded/ListUtils.java","method_name":" @param ar","content":"/**\n     * 根据 a b 两个集合中的某个属性来取交集\n     *\n     * @param a            集合a\n     * @param b            集合b\n     * @param getIdentityA 获取集合A中的某个特征主键的方法\n     * @param getIdentityB 获取集合B中的某个特征主键的方法\n     * @param <T>          集�\ndicate 过滤条件\n     * @param array\n     * @param <T>\n     * @return\n     */\n    @SafeVarargs\n    public static <T> List<T> asList(Predicate<? super T> predicate, T... array) {\n        if (array == null || array.length == 0) {\n            return new ArrayList<>();\n        }\n        return Stream.of(array).filter(predicate).collect(Collectors.toList());\n    }\n\n    public static <T> List<T> pageGetAll(int page, int limit, BiFunction<Integer, Int"} {"path":"downloaded/ListUtils.java","method_name":"n) {\n     ","content":"/**\n     * 根据 a b 两个集合中的某个属性来取交集\n     *\n     * @param a            集合a\n     * @param b            集合b\n     * @param getIdentityA 获取集合A中的某个特征主键的方法\n     * @param getIdentityB 获取集合B中的某个特征主键的方法\n     * @param <T>          集�\nList<? extends T>> function) {\n        List<T> result = new ArrayList<>();\n        List<? extends T> subResult;\n        do {\n            subResult = function.apply(page++, limit);\n            if (!CollectionUtils.isEmpty(subResult)) {\n                result.addAll(subResult);\n            }\n        } while (subResult.size() == limit);\n        return result;\n    }\n\n    public static <T> List<T> pageGetAll(Page page, Function<P"} {"path":"downloaded/ListUtils.java","method_name":"ctio","content":"/**\n     * 根据 a b 两个集合中的某个属性来取交集\n     *\n     * @param a            集合a\n     * @param b            集合b\n     * @param getIdentityA 获取集合A中的某个特征主键的方法\n     * @param getIdentityB 获取集合B中的某个特征主键的方法\n     * @param <T>          集�\nList<? extends T>> function) {\n        List<T> result = new ArrayList<>();\n        List<? extends T> subResult;\n  "} {"path":"downloaded/ListUtils.java","method_name":"esu","content":"/**\n     * 根据 a b 两个集合中的某个属性来取交集\n     *\n     * @param a            集合a\n     * @param b            集合b\n     * @param getIdentityA 获取集合A中的某个特征主键的方法\n     * @param getIdentityB 获取集合B中的某个特征主键的方法\n     * @param <T>          集�\n do {\n            subResult = function.apply(page);\n            if (!C"} {"path":"downloaded/ListUtils.java","method_name":"esu","content":"/**\n     * 根据 a b 两个集合中的某个属性来取交集\n     *\n     * @param a            集合a\n     * @param b            集合b\n     * @param getIdentityA 获取集合A中的某个特征主键的方法\n     * @param getIdentityB 获取集合B中的某个特征主键的方法\n     * @param <T>          集�\ntionUtils.isEmpty(subResult)) {\n                result.addAll(subResul"} {"path":"downloaded/LivePreviewActivity.java","method_name":"getRequiredPermissions","content":"/** Stops the camera. */\nprivate String[] getRequiredPermissions() {\n    try {\n      PackageInfo info =\n          this.getPackageManager()\n              .getPackageInfo(this.getPackageName(), PackageManager.GET_PERMISSIONS);\n      String[] ps = info.requestedPermissions;\n      if (ps != null && ps.length > 0) {\n        return ps;\n      } else {\n        return new String[0];\n      }\n    } catch (Exception e) {\n      return new String[0];\n    }\n  }"} {"path":"downloaded/LivePreviewActivity.java","method_name":"allPermissionsGranted","content":"/** Stops the camera. */\nprivate boolean allPermissionsGranted() {\n    for (String permission : getRequiredPermissions()) {\n      if (!isPermissionGranted(this, permission)) {\n        return false;\n      }\n    }\n    return true;\n  }"} {"path":"downloaded/LivePreviewActivity.java","method_name":"isPermissionGranted","content":"/** Stops the camera. */\nprivate static boolean isPermissionGranted(Context context, String permission) {\n    if (ContextCompat.checkSelfPermission(context, permission)\n        == PackageManager.PERMISSION_GRANTED) {\n      Log.i(TAG, \"Permission granted: \" + permission);\n      return true;\n    }\n    Log.i(TAG, \"Permission NOT granted: \" + permission);\n    return false;\n  }"} {"path":"downloaded/PayloadRegistry.java","method_name":"newInstance","content":"/**\n\t\t * the interface used for working with this payload.\n\t\t * For example, ItemPayload has IInventory, and FluidPayload has IFluidHandler\n\t\t */\npublic Payload newInstance()\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\treturn (Payload)payloadClass.newInstance();\n\t\t\t}\n\t\t\tcatch(Exception e)\n\t\t\t{\n\t\t\t\tThrowables.propagateIfPossible(e);\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}"} {"path":"downloaded/SpecificationServiceImpl.java","method_name":" PageRes","content":"/**\n     * 条件分页查询\n     * @param pageNum\n     * @param pageSize\n     * @param specification\n     * @re\n     */\n    @Override\n    public PageResult findPage(Integer pageNum, Integer pageSize, TbSpecification specification) {\n        PageHelper.startPage(pageNum,pageSize);\n\n        TbSpecificationExample example=new TbSpecificationExample();\n        TbSpecificationExample.Criteria criteria = example.createCriteria();\n        if (specification!=null){\n\n            String specName = specification.getSpecName();\n            if (specName!=null&&!\"\".equals(specName.trim())){\n                criteria.andSpecNameLike(\"%\"+specName+\"%\");\n            }\n        }\n\n        Page<TbSpecification> page= (Page<TbSpecification>) specificationMapper.selectByExample(example);\n        return new PageResult(page.getTotal(),page.getResu"} {"path":"downloaded/SpecificationServiceImpl.java","method_name":"   * @r","content":"/**\n     * 条件分页查询\n     * @param pageNum\n     * @param pageSize\n     * @param specification\n     * @re\n * 数据回显\n     * @param id\n     * @return\n     */\n    @Override\n    public Specification findOne(long id) {\n        //根据id查询数据存到组合实体类\n        Specification specification = new Specification();\n        TbSpecification tbSpecification = specificationMapper.selectByPrimaryKey(id);\n        specification.setTbSpecification(tbSpecification);\n\n        //条件查询规格选项\n        TbSpecificationOptionExample example=new TbSpecificationOptionExample();\n        TbSpecificationOptionExample.Criteria criteria = example.createCriteria();\n        criteria.andSpecIdEqualTo(id);\n        List<TbSpecificationOption> specificationOptions = specificationOptionMapper.selectByExample(example);\n   "} {"path":"downloaded/SpecificationServiceImpl.java","method_name":"\n            cri","content":"/**\n     * 条件分页查询\n     * @param pageNum\n     * @param pageSize\n     * @param specification\n     * @re\nria = example.createCriteria();\n            criteria.andSpecIdEqualTo(id);\n            specificationOptionMapper"} {"path":"downloaded/MXMLRearranger.java","method_name":"addTagName","content":"/**\n\t * Search forward to find the next tag name and add it to the holder\n\t * @param holder\n\t * @param tokens\n\t * @param tokenIndex\n\t */\nprivate void addTagName(TagHolder holder, List<CommonToken> tokens, int tokenIndex) \n\t{\n\t\ttokenIndex++;\n\t\tfor (;tokenIndex<tokens.size(); tokenIndex++)\n\t\t{\n\t\t\tCommonToken tok=tokens.get(tokenIndex);\n\t\t\tif (tok.getType()==MXMLLexer.GENERIC_ID)\n\t\t\t{\n\t\t\t\tholder.setTagName(tok.getText());\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (tok.getText()!=null && tok.getText().trim().length()>0)\n\t\t\t{\n\t\t\t\t//kick out if non whitespace hit; ideally, we shouldn't ever hit here\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}"} {"path":"downloaded/MXMLRearranger.java","method_name":"findToken","content":"/**\n\t * Search forward to find the next tag name and add it to the holder\n\t * @param holder\n\t * @param tokens\n\t * @param tokenIndex\n\t */\nprivate int findToken(int tokenIndex, List<CommonToken> tokens, int tagClose) \n\t{\n\t\ttokenIndex++;\n\t\twhile (tokenIndex<tokens.size())\n\t\t{\n\t\t\tCommonToken token=tokens.get(tokenIndex);\n\t\t\tSystem.out.println(token.getText());\n\t\t\tif (token.getType()==tagClose)\n\t\t\t\treturn tokenIndex;\n\t\t\ttokenIndex++;\n\t\t}\n\t\treturn tokenIndex;\n\t}"} {"path":"downloaded/MXMLRearranger.java","method_name":"isSoftFailure","content":"/**\n\t * Search forward to find the next tag name and add it to the holder\n\t * @param holder\n\t * @param tokens\n\t * @param tokenIndex\n\t */\npublic boolean isSoftFailure() {\n\t\treturn mIsSoftFailure;\n\t}"} {"path":"downloaded/MXMLRearranger.java","method_name":"getErrors","content":"/**\n\t * Search forward to find the next tag name and add it to the holder\n\t * @param holder\n\t * @param tokens\n\t * @param tokenIndex\n\t */\npublic List<Exception> getErrors() {\n\t\t// TODO Auto-generated method stub\n\t\treturn null;\n\t}"} {"path":"downloaded/MXMLRearranger.java","method_name":"getInternalError","content":"/**\n\t * Search forward to find the next tag name and add it to the holder\n\t * @param holder\n\t * @param tokens\n\t * @param tokenIndex\n\t */\npublic String getInternalError() {\n\t\treturn mInternalError;\n\t}"} {"path":"downloaded/DiseaseController.java","method_name":"normalizeDiseaseId","content":"/**\n     * There is confusion about whether ORPHANET IDs should be coded as\n     * ORPHA:1234 or ORPHANET:1234. \n     *\n     * @param diseaseId\n     * @return\n     *\n     * returns ids in a normalized format, using ORPHA:1234\n     *\n     */\nprivate String normalizeDiseaseId(String diseaseId) {\n        String[] tokens = diseaseId.split(\":\");\n        if (\"ORPHANET\".equals(tokens[0])) {\n            diseaseId = \"ORPHA:\" + tokens[1];\n        }\n        return diseaseId;\n    }"} {"path":"downloaded/DiseaseController.java","method_name":"disease","content":"/**\n     * There is confusion about whether ORPHANET IDs should be coded as\n     * ORPHA:1234 or ORPHANET:1234. \n     *\n     * @param diseaseId\n     * @return\n     *\n     * returns ids in a normalized format, using ORPHA:1234\n     *\n     */\n@RequestMapping(value = {\"/disease/{diseaseId}\"})\n    public String disease(@PathVariable(\"diseaseId\") String diseaseId, Model model) {\n\n        diseaseId = normalizeDiseaseId(diseaseId);\n        LOGGER.info(\"Making disease2 page for \" + diseaseId);\n\n        Disease disease = phenoDigm2Dao.getDisease(diseaseId);\n        if (disease == null) {\n            LOGGER.info(\"Disease {} is null - returning fileNotFound page\", diseaseId);\n            return \"fileNotFound\";\n        }\n        LOGGER.info(String.format(\"Found disease: %s %s\", disease.getId(), disease.getTerm()));\n        model.addAttribute(\"disease\", disease);\n\n        // fetch associations between the disease and known genes        \n        List<DiseaseGeneAssociation> geneAssociations = phenoDigm2Dao.getDiseaseToGeneAssociations(diseaseId);\n        // split the genes into curated/ortholog, i.e. human/mouse \n        List<DiseaseGeneAssociation> curatedAssociations = new ArrayList<>();\n        List<DiseaseGeneAssociation> orthologousAssociations = new ArrayList<>();\n        HashSet<String> orthologousGenes = new HashSet<>();\n        for (DiseaseGeneAssociation assoc : geneAssociations) {\n            if (assoc.isByOrthology()) {\n                orthologousAssociations.add(assoc);\n                orthologousGenes.add(assoc.getSymbol());\n            } else {\n                curatedAssociations.add(assoc);\n            }\n        }\n        // add details about curated genes and orthologous genes (for disease page header)\n        model.addAttribute(\"curatedAssociations\", curatedAssociations);\n        model.addAttribute(\"orthologousAssociations\", orthologousAssociations);\n        // stringify the ortholgoous genes into a js array\n        String curatedJsArray = String.join(\"\\\", \\\"\", orthologousGenes);\n        if (orthologousGenes.size() > 0) {\n            curatedJsArray = \"[\\\"\" + curatedJsArray + \"\\\"]\";\n        } else {\n            curatedJsArray = \"[]\";\n        }\n        model.addAttribute(\"curatedMouseGenes\", curatedJsArray);\n\n        // fetch associations between the disease and models        \n        List<DiseaseModelAssociation> modelAssociations = phenoDigm2Dao.getDiseaseToModelModelAssociations(diseaseId);\n\n        // create a js object representation of the models        \n        String modelAssocsJsArray = \"[]\";\n        boolean hasModelsByOrthology = false;\n        if (modelAssociations.size() > 0) {\n            List<String> jsons = new ArrayList<>();\n            for (DiseaseModelAssociation assoc : modelAssociations) {\n                jsons.add(assoc.makeModelJson());\n                if (orthologousGenes.contains(assoc.getMarkerSymbol())) {\n                    hasModelsByOrthology = true;\n                }\n            }\n            modelAssocsJsArray = \"[\" + String.join(\", \", jsons) + \"]\";\n        }\n        model.addAttribute(\"modelAssociations\", modelAssocsJsArray);\n        model.addAttribute(\"hasModelsByOrthology\", hasModelsByOrthology);\n        model.addAttribute(\"hasModelAssociations\", modelAssociations.size() > 0);\n\n        return \"disease\";\n    }"} {"path":"downloaded/Archivo.java","method_name":" String ","content":"\n    /**\n     * Método que recibe un Strig con la dirección IP en formato decimal y devuelve un String con la dirección IP convertida a formato Binario\n     * @param octeto\n     * @return\n */\n    public String toBinary(int octeto){\n        String oct=\"\";\n        String oct2=\"\";\n        while(octeto>0){\n            if(octeto%2==1)oct+=\"1\";\n            else oct+=\"0\";\n            octeto/=2;\n        }\n        int oct3=oct.length();\n        for(int i=0;i<8-oct3;i++){\n            oct+=\"0\";\n        }\n        for(int i=oct.length()-1;i>=0;i--){\n            oct2+=oct.charAt(i);\n        }\n        return oct"} {"path":"downloaded/Archivo.java","method_name":"public in","content":"\n    /**\n     * Método que recibe un Strig con la dirección IP en formato decimal y devuelve un String con la dirección IP convertida a formato Binario\n     * @param octeto\n     * @return\n    */\n    public int toDecimal(String octeto){\n        int oct=0;\n        int pot=0;\n        for(int i=0;i<=octeto.length()-1;i++){\n\n            pot=octeto.length()-i-1;\n            oct+= ((octeto.charAt(i)-48)*Math.pow(2,pot));\n        }\n\n        return"} {"path":"downloaded/ResultUtils.java","method_name":"s Object> Resul","content":"/**\n     * 创建请求成功返回数据\n     *\n     * @param result\n  \n@return\n     */\n    public static <T extends Object> ResultDto buildSuccessDto(T result) {\n        ResultDto resultDto = new ResultDto();\n        resultDto.setCode(BaseResultEnums.SUCCESS.getCode());\n        resultDto.setMsg(BaseResultEnums.SUCCESS.getMsg());\n        resultDto.setEnMsg(BaseResultEnums.SUCCESS.getEnMsg());\n        resultDto.setData(result);\n        ret"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"get_Table_ID","content":"/**\n     *  Get AD Table ID.\n     *  @return AD_Table_ID\n     */\n@Override public int get_Table_ID()\n    {\n        return Table_ID;\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getA_Asset_Group_ID","content":"/** Get Asset Group.\n    @return Group of Assets */\npublic int getA_Asset_Group_ID() \n    {\n        return get_ValueAsInt(\"A_Asset_Group_ID\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getBudgetAssetDepreciation_Acct","content":"/** Get Asset Depreciation.\n    @return Account to record asset''s depreciation */\npublic int getBudgetAssetDepreciation_Acct() \n    {\n        return get_ValueAsInt(\"BudgetAssetDepreciation_Acct\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"isDepreciated","content":"/** Get Depreciate.\n    @return The asset will be depreciated */\npublic boolean isDepreciated() \n    {\n        return get_ValueAsBoolean(\"IsDepreciated\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getPeriod1","content":"/** Get 1st Period.\n    @return First period budget amount */\npublic java.math.BigDecimal getPeriod1() \n    {\n        return get_ValueAsBigDecimal(\"Period1\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getPeriod10","content":"/** Get 10th Period.\n    @return Tenth period budget amount */\npublic java.math.BigDecimal getPeriod10() \n    {\n        return get_ValueAsBigDecimal(\"Period10\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getPeriod11","content":"/** Get 11th Period.\n    @return Eleventh period budget amount */\npublic java.math.BigDecimal getPeriod11() \n    {\n        return get_ValueAsBigDecimal(\"Period11\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getPeriod12","content":"/** Get 12th Period.\n    @return Twelveth period budget amount */\npublic java.math.BigDecimal getPeriod12() \n    {\n        return get_ValueAsBigDecimal(\"Period12\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getPeriod2","content":"/** Get 2nd Period.\n    @return Second period budget amount */\npublic java.math.BigDecimal getPeriod2() \n    {\n        return get_ValueAsBigDecimal(\"Period2\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getPeriod3","content":"/** Get 3rd Period.\n    @return Third period budget amount */\npublic java.math.BigDecimal getPeriod3() \n    {\n        return get_ValueAsBigDecimal(\"Period3\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getPeriod4","content":"/** Get 4th Period.\n    @return Fourth period budget amount */\npublic java.math.BigDecimal getPeriod4() \n    {\n        return get_ValueAsBigDecimal(\"Period4\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getPeriod5","content":"/** Get 5th Period.\n    @return Fifth period budget amount */\npublic java.math.BigDecimal getPeriod5() \n    {\n        return get_ValueAsBigDecimal(\"Period5\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getPeriod6","content":"/** Get 6th Period.\n    @return Sixth period budget amount */\npublic java.math.BigDecimal getPeriod6() \n    {\n        return get_ValueAsBigDecimal(\"Period6\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getPeriod7","content":"/** Get 7th Period.\n    @return Seventh period budget amount */\npublic java.math.BigDecimal getPeriod7() \n    {\n        return get_ValueAsBigDecimal(\"Period7\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getPeriod8","content":"/** Get 8th Period.\n    @return Eighth period budget amount */\npublic java.math.BigDecimal getPeriod8() \n    {\n        return get_ValueAsBigDecimal(\"Period8\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getPeriod9","content":"/** Get 9th Period.\n    @return Ninth period budget amount */\npublic java.math.BigDecimal getPeriod9() \n    {\n        return get_ValueAsBigDecimal(\"Period9\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getQtyPeriod1","content":"/** Get Qty Period 1.\n    @return Qty in first period */\npublic java.math.BigDecimal getQtyPeriod1() \n    {\n        return get_ValueAsBigDecimal(\"QtyPeriod1\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getQtyPeriod10","content":"/** Get Qty Period 10.\n    @return Qty in tenth period */\npublic java.math.BigDecimal getQtyPeriod10() \n    {\n        return get_ValueAsBigDecimal(\"QtyPeriod10\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getQtyPeriod11","content":"/** Get Qty Period 11.\n    @return Qty in eleventh period */\npublic java.math.BigDecimal getQtyPeriod11() \n    {\n        return get_ValueAsBigDecimal(\"QtyPeriod11\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getQtyPeriod12","content":"/** Get Qty Period 12.\n    @return Qty in twelveth period */\npublic java.math.BigDecimal getQtyPeriod12() \n    {\n        return get_ValueAsBigDecimal(\"QtyPeriod12\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getQtyPeriod2","content":"/** Get Qty Period 2.\n    @return Qty in second period */\npublic java.math.BigDecimal getQtyPeriod2() \n    {\n        return get_ValueAsBigDecimal(\"QtyPeriod2\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getQtyPeriod3","content":"/** Get Qty Period 3.\n    @return Qty in third period */\npublic java.math.BigDecimal getQtyPeriod3() \n    {\n        return get_ValueAsBigDecimal(\"QtyPeriod3\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getQtyPeriod4","content":"/** Get Qty Period 4.\n    @return Qty in forth period */\npublic java.math.BigDecimal getQtyPeriod4() \n    {\n        return get_ValueAsBigDecimal(\"QtyPeriod4\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getQtyPeriod5","content":"/** Get Qty Period 5.\n    @return Qty in fifth period */\npublic java.math.BigDecimal getQtyPeriod5() \n    {\n        return get_ValueAsBigDecimal(\"QtyPeriod5\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getQtyPeriod6","content":"/** Get Qty Period 6.\n    @return Qty in sixth period */\npublic java.math.BigDecimal getQtyPeriod6() \n    {\n        return get_ValueAsBigDecimal(\"QtyPeriod6\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getQtyPeriod7","content":"/** Get Qty Period 7.\n    @return Qty in seventh period */\npublic java.math.BigDecimal getQtyPeriod7() \n    {\n        return get_ValueAsBigDecimal(\"QtyPeriod7\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getQtyPeriod8","content":"/** Get Qty Period 8.\n    @return Qty in eight period */\npublic java.math.BigDecimal getQtyPeriod8() \n    {\n        return get_ValueAsBigDecimal(\"QtyPeriod8\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getQtyPeriod9","content":"/** Get Qty Period 9.\n    @return Qty in ninth period */\npublic java.math.BigDecimal getQtyPeriod9() \n    {\n        return get_ValueAsBigDecimal(\"QtyPeriod9\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getTotalAmt","content":"/** Get Total Amount.\n    @return Total Amount */\npublic java.math.BigDecimal getTotalAmt() \n    {\n        return get_ValueAsBigDecimal(\"TotalAmt\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getTotalQty","content":"/** Get Total Quantity.\n    @return Total Quantity */\npublic int getTotalQty() \n    {\n        return get_ValueAsInt(\"TotalQty\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getXX_InvestmentBudget_ID","content":"/** Get Investment Budget.\n    @return Investment Budget */\npublic int getXX_InvestmentBudget_ID() \n    {\n        return get_ValueAsInt(\"XX_InvestmentBudget_ID\");\n        \n    }"} {"path":"downloaded/X_XX_InvestmentBudgetLine.java","method_name":"getXX_InvestmentBudgetLine_ID","content":"/** Get Investment Line.\n    @return Investment line */\npublic int getXX_InvestmentBudgetLine_ID() \n    {\n        return get_ValueAsInt(\"XX_InvestmentBudgetLine_ID\");\n        \n    }"} {"path":"downloaded/AllPredicateTest.java","method_name":"getPredicateInstance","content":"/**\n     * {@inheritDoc}\n     */\n@Override\n    protected final Predicate<Integer> getPredicateInstance(final Predicate<? super Integer>... predicates) {\n        return AllPredicate.allPredicate(predicates);\n    }"} {"path":"downloaded/AllPredicateTest.java","method_name":"getPredicateInstance","content":"/**\n     * {@inheritDoc}\n     */\n@Override\n    protected final Predicate<Integer> getPredicateInstance(final Collection<Predicate<Integer>> predicates) {\n        return AllPredicate.allPredicate(predicates);\n    }"} {"path":"downloaded/DomCheckboxGroup.java","method_name":"addOption","content":"/**\n\t * Adds an option for the given value, deriving the label from the given\n\t * value.\n\t * <p>\n\t * If the given type of the given value implements {@link IDisplayable}, the\n\t * return value of {@link IDisplayable#toDisplay()} will be used as a label.\n\t * <p>\n\t * The first added option is always preselected.\n\t *\n\t * @param value\n\t *            the value that is represented by the option (never\n\t *            <i>null</i>)\n\t * @return this\n\t */\npublic DomCheckboxGroup<V> addOption(V value) {\n\n\t\treturn addOption(value, createLabel(value));\n\t}"} {"path":"downloaded/DomCheckboxGroup.java","method_name":"addOption","content":"/**\n\t * Adds an option for the given value, deriving the label from the given\n\t * value.\n\t * <p>\n\t * If the given type of the given value implements {@link IDisplayable}, the\n\t * return value of {@link IDisplayable#toDisplay()} will be used as a label.\n\t * <p>\n\t * The option may be preselected. If the option is preselected, all other\n\t * options will be un-selected (including previously preselected options).\n\t * <p>\n\t * The first added option is always preselected.\n\t *\n\t * @param value\n\t *            the value that is represented by the option (never\n\t *            <i>null</i>)\n\t * @param preselected\n\t *            <i>true</i> if the option shall be preselected; <i>false</i>\n\t *            otherwise\n\t * @return this\n\t */\npublic DomCheckboxGroup<V> addOption(V value, boolean preselected) {\n\n\t\treturn addOption(value, createLabel(value), preselected);\n\t}"} {"path":"downloaded/DomCheckboxGroup.java","method_name":"addOption","content":"/**\n\t * Adds an option for the given value, with the given label.\n\t * <p>\n\t * The first added option is always preselected.\n\t *\n\t * @param value\n\t *            the value that is represented by the option (never\n\t *            <i>null</i>)\n\t * @param label\n\t *            the label to display next to the option (never <i>null</i>)\n\t * @return this\n\t */\npublic DomCheckboxGroup<V> addOption(V value, IDisplayString label) {\n\n\t\treturn addOption(value, label, false);\n\t}"} {"path":"downloaded/DomCheckboxGroup.java","method_name":"addOption","content":"/**\n\t * Adds an option for the given value, with the given label.\n\t * <p>\n\t * The option may be preselected. If the option is preselected, all other\n\t * options will be un-selected (including previously preselected options).\n\t * <p>\n\t * The first added option is always preselected.\n\t *\n\t * @param value\n\t *            the value that is represented by the option (never\n\t *            <i>null</i>)\n\t * @param label\n\t *            the label to display next to the option (never <i>null</i>)\n\t * @param preselected\n\t *            <i>true</i> if the option shall be preselected; <i>false</i>\n\t *            otherwise\n\t * @return this\n\t */\npublic DomCheckboxGroup<V> addOption(V value, IDisplayString label, boolean preselected) {\n\n\t\tObjects.requireNonNull(value);\n\t\tObjects.requireNonNull(label);\n\n\t\tif (valueMap.isEmpty()) {\n\t\t\tpreselected = true;\n\t\t}\n\n\t\tvar checkbox = new Checkbox(label, preselected).setDisabled(disabled);\n\t\tif (preselected) {\n\t\t\tunselectOthers(checkbox);\n\t\t}\n\n\t\tvalueMap.put(checkbox, value);\n\t\tcheckboxMap.put(value, checkbox);\n\n\t\tappendChild(checkbox);\n\n\t\treturn this;\n\t}"} {"path":"downloaded/DomCheckboxGroup.java","method_name":"setDisabled","content":"/**\n\t * Adds an option for the given value, with the given label.\n\t * <p>\n\t * The option may be preselected. If the option is preselected, all other\n\t * options will be un-selected (including previously preselected options).\n\t * <p>\n\t * The first added option is always preselected.\n\t *\n\t * @param value\n\t *            the value that is represented by the option (never\n\t *            <i>null</i>)\n\t * @param label\n\t *            the label to display next to the option (never <i>null</i>)\n\t * @param preselected\n\t *            <i>true</i> if the option shall be preselected; <i>false</i>\n\t *            otherwise\n\t * @return this\n\t */\n@Override\n\tpublic DomCheckboxGroup<V> setDisabled(boolean disabled) {\n\n\t\tthis.disabled = disabled;\n\t\tthis.valueMap.keySet().forEach(it -> it.setDisabled(disabled));\n\t\treturn this;\n\t}"} {"path":"downloaded/DomCheckboxGroup.java","method_name":"isDisabled","content":"/**\n\t * Adds an option for the given value, with the given label.\n\t * <p>\n\t * The option may be preselected. If the option is preselected, all other\n\t * options will be un-selected (including previously preselected options).\n\t * <p>\n\t * The first added option is always preselected.\n\t *\n\t * @param value\n\t *            the value that is represented by the option (never\n\t *            <i>null</i>)\n\t * @param label\n\t *            the label to display next to the option (never <i>null</i>)\n\t * @param preselected\n\t *            <i>true</i> if the option shall be preselected; <i>false</i>\n\t *            otherwise\n\t * @return this\n\t */\n@Override\n\tpublic boolean isDisabled() {\n\n\t\treturn disabled;\n\t}"} {"path":"downloaded/DomCheckboxGroup.java","method_name":"setEnabled","content":"/**\n\t * Adds an option for the given value, with the given label.\n\t * <p>\n\t * The option may be preselected. If the option is preselected, all other\n\t * options will be un-selected (including previously preselected options).\n\t * <p>\n\t * The first added option is always preselected.\n\t *\n\t * @param value\n\t *            the value that is represented by the option (never\n\t *            <i>null</i>)\n\t * @param label\n\t *            the label to display next to the option (never <i>null</i>)\n\t * @param preselected\n\t *            <i>true</i> if the option shall be preselected; <i>false</i>\n\t *            otherwise\n\t * @return this\n\t */\n@Override\n\tpublic DomCheckboxGroup<V> setEnabled(boolean enabled) {\n\n\t\treturn setDisabled(!enabled);\n\t}"} {"path":"downloaded/DomCheckboxGroup.java","method_name":"isEnabled","content":"/**\n\t * Adds an option for the given value, with the given label.\n\t * <p>\n\t * The option may be preselected. If the option is preselected, all other\n\t * options will be un-selected (including previously preselected options).\n\t * <p>\n\t * The first added option is always preselected.\n\t *\n\t * @param value\n\t *            the value that is represented by the option (never\n\t *            <i>null</i>)\n\t * @param label\n\t *            the label to display next to the option (never <i>null</i>)\n\t * @param preselected\n\t *            <i>true</i> if the option shall be preselected; <i>false</i>\n\t *            otherwise\n\t * @return this\n\t */\n@Override\n\tpublic boolean isEnabled() {\n\n\t\treturn !isDisabled();\n\t}"} {"path":"downloaded/DomCheckboxGroup.java","method_name":"getValue","content":"/**\n\t * Adds an option for the given value, with the given label.\n\t * <p>\n\t * The option may be preselected. If the option is preselected, all other\n\t * options will be un-selected (including previously preselected options).\n\t * <p>\n\t * The first added option is always preselected.\n\t *\n\t * @param value\n\t *            the value that is represented by the option (never\n\t *            <i>null</i>)\n\t * @param label\n\t *            the label to display next to the option (never <i>null</i>)\n\t * @param preselected\n\t *            <i>true</i> if the option shall be preselected; <i>false</i>\n\t *            otherwise\n\t * @return this\n\t */\n@Override\n\tpublic Optional<V> getValue() {\n\n\t\treturn valueMap//\n\t\t\t.keySet()\n\t\t\t.stream()\n\t\t\t.filter(DomCheckbox::isChecked)\n\t\t\t.map(valueMap::get)\n\t\t\t.findFirst();\n\t}"} {"path":"downloaded/DomCheckboxGroup.java","method_name":"createLabel","content":"/**\n\t * Selects the option that corresponds to the given value, and un-selects\n\t * all other options.\n\t * <p>\n\t * If no option can be found for the given value, or if the given value is\n\t * <i>null</i>, nothing will happen.\n\t *\n\t * @param value\n\t *            the value of the option to select (may be <i>null</i>)\n\t */\nprivate IDisplayString createLabel(V value) {\n\n\t\tObjects.requireNonNull(value);\n\t\tif (value instanceof IDisplayable) {\n\t\t\treturn ((IDisplayable) value).toDisplay();\n\t\t} else {\n\t\t\treturn IDisplayString.create(value.toString());\n\t\t}\n\t}"} {"path":"downloaded/OData.java","method_name":"get","content":"/**\n\t * Query the db for entity getting the result according to query options.\n\t *\n\t * @param queryOptions\n\t *            the query options\n\t * @return the recordset\n\t */\npublic List<T> get(QueryOptions queryOptions) {\n\t\tCriteriaBuilder cb = em.getCriteriaBuilder();\n\t\tCriteriaQuery<T> query = cb.createQuery(entityClass);\n\t\tRoot<T> root = query.from(entityClass);\n\n\t\tvisitorFilter.setCb(cb);\n\t\tvisitorFilter.setEntityManager(em);\n\t\tvisitorFilter.setRoot(root);\n\t\tif (queryOptions.filter != null && !queryOptions.filter.isEmpty())\n\t\t\tquery.where(createWherePredicate(visitorFilter, queryOptions.filter));\n\n\t\tvisitorOrder.setCb(cb);\n\t\tvisitorOrder.setRoot(root);\n\n\t\tif (queryOptions.orderby != null && !queryOptions.orderby.isEmpty())\n\t\t\tquery.orderBy(createOrderPredicate(visitorOrder, queryOptions.orderby));\n\n\t\tTypedQuery<T> namedQuery = em.createQuery(query);\n\t\tnamedQuery.setFirstResult(queryOptions.skip);\n\t\tnamedQuery.setMaxResults(queryOptions.top);\n\n\t\treturn namedQuery.getResultList();\n\t}"} {"path":"downloaded/OData.java","method_name":"count","content":"/**\n\t * Count all result.\n\t *\n\t * @param queryOptions\n\t *            the query options\n\t * @return the number of record impacted by the filter \n\t */\npublic long count(QueryOptions queryOptions) {\n\t\tCriteriaBuilder cb = em.getCriteriaBuilder();\n\t\tCriteriaQuery<Long> query = cb.createQuery(Long.class);\n\t\tRoot<T> root = query.from(entityClass);\n\n\t\tquery.select(cb.count(root));\n\n\t\tvisitorFilter.setCb(cb);\n\t\tvisitorFilter.setRoot(root);\n\n\t\tif (queryOptions.filter != null)\n\t\t\tquery.where(createWherePredicate(visitorFilter, queryOptions.filter));\n\n\t\tTypedQuery<Long> namedQuery = em.createQuery(query);\n\n\t\treturn namedQuery.getSingleResult();\n\t}"} {"path":"downloaded/OData.java","method_name":"createOrderPredicate","content":"/**\n\t * Creates order predicate.\n\t *\n\t * @param visitor\n\t *            the visitor\n\t * @param order\n\t *            the order\n\t * @return the order\n\t */\npublic List<Order> createOrderPredicate(JPAOrderVisitor<T> visitor, String order) {\n\n\t\tList<Order> out = new ArrayList<>();\n\t\t\n\t\tfinal ODataOrderByLexer lexer = new ODataOrderByLexer(CharStreams.fromString(order));\n\t\tfinal CommonTokenStream tokens = new CommonTokenStream(lexer);\n\t\tfinal ODataOrderByParser parser = new ODataOrderByParser(tokens);\n\n\t\tfinal ODataOrderByParser.ExprContext context = parser.expr();\n\t\t\n\t\tvisitor.visit(context, out);\n\t\t\n\t\treturn out;\n\t}"} {"path":"downloaded/OData.java","method_name":"createWherePredicate","content":"/**\n\t * Creates where predicate.\n\t *\n\t * @param visitor\n\t *            the visitor\n\t * @param filter\n\t *            the filter\n\t * @return the predicate\n\t */\npublic Predicate createWherePredicate(JPAFilterVisitor<T> visitor, String filter) {\n\n\t\tfinal ODataFilterLexer lexer = new ODataFilterLexer(CharStreams.fromString(filter));\n\t\tfinal CommonTokenStream tokens = new CommonTokenStream(lexer);\n\t\tfinal ODataFilterParser parser = new ODataFilterParser(tokens);\n\n\t\tfinal ExprContext context = parser.expr();\n\n\t\treturn (Predicate) visitor.visit(context);\n\n\t}"} {"path":"downloaded/OData.java","method_name":"getPathFromField","content":"/**\n\t * Gets the path from field.\n\t *\n\t * @param <T> the generic type\n\t * @param root the root\n\t * @param field the field\n\t * @return the path from field\n\t */\n@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\tpublic static <T> Path<Object> getPathFromField(Root<T> root, String field) {\n\t\tString[] fieldname = field.split(\"/\");\n\t\tPath<Object> path = null;\n\t\tfor (int idx = 0; idx < fieldname.length; idx++) {\n\n\t\t\tString attributeName = fieldname[idx];\n\n\t\t\tif (path != null) {\n\t\t\t\tpath = path.get(attributeName);\n\t\t\t} else {\n\t\t\t\tpath = root.get(attributeName);\n\t\t\t}\n\n\t\t\tif ((fieldname.length - 1) > idx) {\n\n\t\t\t\tif (path.getJavaType().isAssignableFrom(Set.class)) {\n\n\t\t\t\t\tOptional<Join<T, ?>> opJoin = root.getJoins().stream().filter(p -> p.getAttribute().getName().equals(attributeName))\n\t\t\t\t\t\t\t.findFirst();\n\t\t\t\t\tJoin<T, ?> join = opJoin.orElseGet(() -> root.join(attributeName));\n\t\t\t\t\tpath = join.get(fieldname[++idx]);\n\n\t\t\t\t}\n\n\t\t\t\tif (path.getJavaType().isAssignableFrom(Map.class)) {\n\n\t\t\t\t\tOptional<Join<T, ?>> opJoin = root.getJoins().stream().filter(p -> p.getAttribute().getName().equals(attributeName))\n\t\t\t\t\t\t\t.findFirst();\n\t\t\t\t\tMapJoin join = (MapJoin) opJoin.orElseGet(() -> root.join(attributeName));\n\t\t\t\t\tString f = fieldname[++idx];\n\t\t\t\t\tif (f.equals(\"key\"))\n\t\t\t\t\t\tpath = join.key();\n\t\t\t\t\telse if (f.equals(\"value\"))\n\t\t\t\t\t\tpath = join.value();\n\t\t\t\t\telse\n\t\t\t\t\t\tthrow new FormatExceptionException(\"Only key or value you can specify in a map filter, got: \" + f);\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\treturn path;\n\t}"} {"path":"downloaded/Yksinpeli.java","method_name":"voi","content":"    /**\n     * Metodi huolehtii pelin etenemisestä\n  \n\n    @Override\n    public void run() {\n        while(i<10){\n            \n            pallo.liiku();\n            muutaTietokoneenPalkinNopeutta();\n            palkki1.liiku();\n            palkki2.liiku();\n            \n            palloOsuuYlapalkkiin(pallo);\n            palloOsuuAlapalkkiin(pallo);\n            palloOsuuPalkkiin(pallo, palkki1);\n            palloOsuuPalkkiin(pallo, palkki2);\n            palloOsuuPalkinYlareunaan(pallo, palkki1);\n            palloOsuuPalkinYlareunaan(pallo, palkki2);\n            palloOsuuPalkinAlareunaan(pallo, palkki1);\n            palloOsuuPalkinAlareunaan(pallo, palkki2);\n            palloMeneeOikeanReunanYli(pallo);\n            palloMeneeVasemmanReunanYli(pallo);\n            \n            paivitettava.paivita();\n            \n            katsoJatkuukoPeli();\n            \n            try{\n                Thread.sleep(5);\n            }catch(InterruptedException ie){\n                return;\n            }\n        }\n        \n"} {"path":"downloaded/MathDecisions.java","method_name":"computeAverageEntryOverheadStats","content":"/**\n     * Computes number of segments, from which probability of doubling (quadrupling, eight-ing)\n     * segments array according to Poisson distribution laws exceeds {@link #THRESHOLD} assuming\n     * perfectly uniform hash code distribution, for each rounded up average number of entries per\n     * segment. In this case we are going to allocate doubled (quadrupled, eight-ed) segments array\n     * up front, to avoid even little pause and garbaging previous segments array.\n     */\nprivate static DoubleSummaryStatistics computeAverageEntryOverheadStats(int entrySize,\n            int allocatedEntriesPerSegment, int javaReferenceSize) {\n        return IntStream\n                .of(entriesForAveraging)\n                .mapToDouble(totalEntries -> footprint(totalEntries, entrySize,\n                        allocatedEntriesPerSegment, javaReferenceSize) / totalEntries)\n                .summaryStatistics();\n    }"} {"path":"downloaded/MathDecisions.java","method_name":"computeAverageEntryOverheadStats2","content":"/**\n     * Computes number of segments, from which probability of doubling (quadrupling, eight-ing)\n     * segments array according to Poisson distribution laws exceeds {@link #THRESHOLD} assuming\n     * perfectly uniform hash code distribution, for each rounded up average number of entries per\n     * segment. In this case we are going to allocate doubled (quadrupled, eight-ed) segments array\n     * up front, to avoid even little pause and garbaging previous segments array.\n     */\nprivate static DoubleSummaryStatistics computeAverageEntryOverheadStats2(int entrySize,\n            int allocatedEntriesPerSegment, int entriesPerSmallSegment, int javaReferenceSize) {\n        return IntStream\n                .of(entriesForAveraging)\n                .mapToDouble(totalEntries -> footprint2(totalEntries, entrySize,\n                        allocatedEntriesPerSegment, entriesPerSmallSegment, javaReferenceSize) /\n                        totalEntries)\n                .summaryStatistics();\n    }"} {"path":"downloaded/MathDecisions.java","method_name":"footprint","content":"/**\n     * Computes total map footprint in bytes.\n     */\nprivate static double footprint(long totalEntries, int entrySize,\n            int allocatedEntriesPerSegment, int javaReferenceSize) {\n        int objectHeaderSize = 8 + javaReferenceSize;\n        int segmentSize = objectSizeRoundUp(\n                (/*objectHeaderSize + */HASH_TABLE_BYTES +\n                        24 + // alloc refs\n                        //48 + // bit set\n                        //4 + // tier or next segment ref\n                        //16 + // tombstone markers\n                        (allocatedEntriesPerSegment * entrySize)));\n\n        long totalVirtualSegments =\n                findExpectedTotalVirtualSegments(totalEntries, allocatedEntriesPerSegment);\n        double averageEntriesPerVirtualSegment = (double) totalEntries / totalVirtualSegments;\n\n        // For simplicity, consider just three classes of segments. There could also be super\n        // underpopulated segments with poisson(averageEntriesPerVirtualSegment * 4)\n        // .cumulativeProbability(allocatedEntriesPerSegment), etc. and similarly overpopulated\n        // segments. But their shares are so small that we could ignore that without losing much\n        // accuracy.\n        double underpopulatedVirtualSegmentsShare =\n                new PoissonDistribution(averageEntriesPerVirtualSegment * 2).cumulativeProbability(\n                        allocatedEntriesPerSegment);\n        double overpopulatedVirtualSegmentsShare = 1 -\n                new PoissonDistribution(averageEntriesPerVirtualSegment)\n                        .cumulativeProbability(allocatedEntriesPerSegment);\n        double regularSegmentsShare = 1 - underpopulatedVirtualSegmentsShare -\n                overpopulatedVirtualSegmentsShare;\n\n        double underpopulatedVirtualSegmentsFootprint = totalVirtualSegments *\n                underpopulatedVirtualSegmentsShare * (segmentSize / 2.0);\n        double regularSegmentsFootprint = totalVirtualSegments * regularSegmentsShare * segmentSize;\n        double overpopulatedVirtualSegmentsFootprint = totalVirtualSegments *\n                overpopulatedVirtualSegmentsShare * (segmentSize * 2);\n\n        // Assuming there are almost always some overpopulated segments, the array is almost always\n        // doubled. With large totalEntries, there is a good probability that it's even quadrupled,\n        // i. e. 1 - dist.cumulativeProbability(allocatedEntriesPerSegment * 2) is not so small.\n        // But ignoring it here.\n        long segmentArrayFootprint = totalVirtualSegments * 2 * javaReferenceSize;\n\n        return segmentArrayFootprint + underpopulatedVirtualSegmentsFootprint +\n                regularSegmentsFootprint + overpopulatedVirtualSegmentsFootprint;\n    }"} {"path":"downloaded/MathDecisions.java","method_name":"findExpectedTotalVirtualSegments","content":"/**\n     * Computes total map footprint in bytes.\n     */\nstatic long findExpectedTotalVirtualSegments(long totalEntries,\n            int allocatedEntriesPerSegment) {\n        long totalVirtualSegments = 1;\n        while (true) {\n            double averageEntriesPerVirtualSegment = (double) totalEntries / totalVirtualSegments;\n            if (averageEntriesPerVirtualSegment <= allocatedEntriesPerSegment) {\n                return totalVirtualSegments;\n            }\n            totalVirtualSegments *= 2;\n        }\n    }"} {"path":"downloaded/MathDecisions.java","method_name":"footprint2","content":"/**\n     * Computes total map footprint in bytes.\n     */\nprivate static double footprint2(long totalEntries, int entrySize,\n            int allocatedEntriesPerSegment, int entriesPerSmallSegment, int javaReferenceSize) {\n\n        int objectHeaderSize = 8 + javaReferenceSize;\n        int segmentSize = objectSizeRoundUp(\n                (/*objectHeaderSize + */HASH_TABLE_BYTES +\n                        64 + // alloc refs\n                        //48 + // bit set\n                        //4 + // tier or next segment ref\n                        //16 + // tombstone markers\n                        (allocatedEntriesPerSegment * entrySize)));\n\n        int smallSegmentSize = objectSizeRoundUp(\n                (/*objectHeaderSize + */HASH_TABLE_BYTES +\n                        64 + // alloc refs\n                        //48 + // bit set\n                        //4 + // tier or next segment ref\n                        //16 + // tombstone markers\n                        (entriesPerSmallSegment * entrySize)));\n\n        long totalVirtualSegments =\n                findExpectedTotalVirtualSegments(totalEntries, allocatedEntriesPerSegment);\n        double averageEntriesPerVirtualSegment = (double) totalEntries / totalVirtualSegments;\n\n\n        PoissonDistribution entriesPerTwoVirtualSegmentsDist =\n                new PoissonDistribution(averageEntriesPerVirtualSegment * 2);\n        // For simplicity, consider just the most common classes of segments. There could also be\n        // super underpopulated segments with poisson(averageEntriesPerVirtualSegment * 4)\n        // .cumulativeProbability(allocatedEntriesPerSegment), etc. and similarly overpopulated\n        // segments. But their shares are so small that we could ignore that without losing much\n        // accuracy.\n        double underpopulatedVirtualSegmentsShare =\n                entriesPerTwoVirtualSegmentsDist.cumulativeProbability(allocatedEntriesPerSegment);\n        final double underpopulatedVirtualSegmentsFootprint = totalVirtualSegments *\n                underpopulatedVirtualSegmentsShare * (segmentSize / 2.0);\n\n        double smallishSegmentsShare = smallishSegmentsShare(allocatedEntriesPerSegment,\n                entriesPerSmallSegment, entriesPerTwoVirtualSegmentsDist);\n        double smallishSegmentsFootprint =\n                smallishSegmentsShare * smallSegmentSize * totalVirtualSegments;\n\n        double overpopulatedVirtualSegmentsShare = 1 -\n                new PoissonDistribution(averageEntriesPerVirtualSegment)\n                        .cumulativeProbability(allocatedEntriesPerSegment);\n        double regularSegmentsShare = 1 - underpopulatedVirtualSegmentsShare -\n                smallishSegmentsShare - overpopulatedVirtualSegmentsShare;\n\n        double regularSegmentsFootprint = regularSegmentsShare * totalVirtualSegments * segmentSize;\n\n        double oneAndHalfSegmentsShare = oneAndHalfSegmentsShare(allocatedEntriesPerSegment,\n                entriesPerSmallSegment, averageEntriesPerVirtualSegment);\n        double oneAndHalfSegmentsFootprint = oneAndHalfSegmentsShare *\n                (segmentSize + smallSegmentSize) * totalVirtualSegments;\n\n        double doubleSegmentsShare =\n                overpopulatedVirtualSegmentsShare - oneAndHalfSegmentsShare;\n        double doubleSegmentsFootprint = doubleSegmentsShare * (segmentSize * 2) *\n                totalVirtualSegments;\n\n        // Assuming there are almost always some overpopulated segments, the array is almost always\n        // doubled. With large totalEntries, there is a good probability that it's even quadrupled,\n        // i. e. 1 - dist.cumulativeProbability(allocatedEntriesPerSegment * 2) is not so small.\n        // But ignoring it here.\n        long segmentArrayFootprint = totalVirtualSegments * 2 * javaReferenceSize;\n\n        return segmentArrayFootprint + underpopulatedVirtualSegmentsFootprint +\n                smallishSegmentsFootprint + regularSegmentsFootprint + oneAndHalfSegmentsFootprint +\n                doubleSegmentsFootprint;\n    }"} {"path":"downloaded/MathDecisions.java","method_name":"smallishSegmentsShare","content":"/**\n     * Computes total map footprint in bytes.\n     */\nprivate static double smallishSegmentsShare(int allocatedEntriesPerSegment,\n            int entriesPerSmallSegment, PoissonDistribution entriesPerTwoVirtualSegmentsDist) {\n        double smallishSegmentsShare = 0.0;\n        for (int entriesPerTwoSegments = allocatedEntriesPerSegment + 1;\n             entriesPerTwoSegments <= allocatedEntriesPerSegment * 2;\n             entriesPerTwoSegments++) {\n            BinomialDistribution twoSegmentsDist =\n                    new BinomialDistribution(entriesPerTwoSegments, 0.5);\n            smallishSegmentsShare += twoSegmentsDist.cumulativeProbability(entriesPerSmallSegment) *\n                    entriesPerTwoVirtualSegmentsDist.probability(entriesPerTwoSegments);\n        }\n        return smallishSegmentsShare;\n    }"} {"path":"downloaded/MathDecisions.java","method_name":"oneAndHalfSegmentsShare","content":"/**\n     * Computes total map footprint in bytes.\n     */\nprivate static double oneAndHalfSegmentsShare(int allocatedEntriesPerSegment,\n            int entriesPerSmallSegment, double averageEntriesPerVirtualSegment) {\n        PoissonDistribution entriesPerVirtualSegmentDist =\n                new PoissonDistribution(averageEntriesPerVirtualSegment);\n        double oneAndHalfSegmentsShare = 0.0;\n        for (int entriesPerTwoOverflowSegments = allocatedEntriesPerSegment + 1;\n             entriesPerTwoOverflowSegments <= allocatedEntriesPerSegment * 2;\n             entriesPerTwoOverflowSegments++) {\n            BinomialDistribution twoSegmentsDist =\n                    new BinomialDistribution(entriesPerTwoOverflowSegments, 0.5);\n            oneAndHalfSegmentsShare += twoSegmentsDist.cumulativeProbability(entriesPerSmallSegment)\n                    * entriesPerVirtualSegmentDist.probability(entriesPerTwoOverflowSegments);\n        }\n        return oneAndHalfSegmentsShare;\n    }"} {"path":"downloaded/MathDecisions.java","method_name":"objectSizeRoundUp","content":"/**\n     * Computes total map footprint in bytes.\n     */\nstatic int objectSizeRoundUp(int size) {\n        return (size + 7) & ~7;\n    }"} {"path":"downloaded/Common.java","method_name":"dataFormat","content":"/**\n     * @param data\n     */\npublic static String dataFormat(double data) {\n        DecimalFormat format=new DecimalFormat(\"#0.00\");\n        return format.format(data);\n    }"} {"path":"downloaded/Common.java","method_name":"sub","content":"/**\n     * @param sum1\n     * @param sum2\n     */\npublic static double sub(double sum1, double sum2) {\n        return (sum1*10-sum2*10)/10;\n    }"} {"path":"downloaded/ClusteringKeyMapperColumns.java","method_name":"instance","content":"/**\n     * Returns a new {@link ClusteringKeyMapperColumns} for the specified {@link CFMetaData} and {@link Schema}, or\n     * {@code null} if this implementation is not able to manage the specified parameters.\n     *\n     * @param metadata A {@link CFMetaData}.\n     * @param schema   A {@link Schema}.\n     * @return A new {@link ClusteringKeyMapperColumns} for the specified {@link CFMetaData} and {@link Schema}, or\n     * {@code null} if this implementation is not able to manage the specified parameters.\n     */\n@SuppressWarnings(\"unchecked\")\n    public static ClusteringKeyMapperColumns instance(CFMetaData metadata, Schema schema) {\n        List<ColumnDefinition> clusteringColumns = metadata.clusteringColumns();\n        int numClusteringColumns = clusteringColumns.size();\n        if (numClusteringColumns == 0) {\n            return null;\n        }\n        String[] names = new String[numClusteringColumns];\n        ColumnMapperSingle[] columnMappers = new ColumnMapperSingle[numClusteringColumns];\n        AbstractType[] types = new AbstractType[numClusteringColumns];\n        for (int i = 0; i < numClusteringColumns; i++) {\n            ColumnDefinition columnDefinition = clusteringColumns.get(i);\n            String name = columnDefinition.name.toString();\n            ColumnMapperSingle columnMapper = schema.getMapperSingle(name);\n            if (columnMapper != null) {\n                AbstractType type = columnDefinition.type;\n                if (columnMapper.supportsClustering(type)) {\n                    names[i] = name;\n                    types[i] = type;\n                    columnMappers[i] = columnMapper;\n                } else {\n                    return null;\n                }\n            } else {\n                return null;\n            }\n        }\n        return new ClusteringKeyMapperColumns(schema, metadata, names, columnMappers, types);\n    }"} {"path":"downloaded/ClusteringKeyMapperColumns.java","method_name":"sortFields","content":"/**\n     * Returns a new {@link ClusteringKeyMapperColumns} for the specified {@link CFMetaData} and {@link Schema}, or\n     * {@code null} if this implementation is not able to manage the specified parameters.\n     *\n     * @param metadata A {@link CFMetaData}.\n     * @param schema   A {@link Schema}.\n     * @return A new {@link ClusteringKeyMapperColumns} for the specified {@link CFMetaData} and {@link Schema}, or\n     * {@code null} if this implementation is not able to manage the specified parameters.\n     */\n@Override\n    public SortField[] sortFields() {\n        SortField[] sortFields = new SortField[numClusteringColumns];\n        for (int i = 0; i < numClusteringColumns; i++) {\n            String name = names[i];\n            ColumnMapper columnMapper = columnMappers[i];\n            sortFields[i] = columnMapper.sortField(name, false);\n        }\n        return sortFields;\n    }"} {"path":"downloaded/ClusteringKeyMapperColumns.java","method_name":"getComposedComponent","content":"/**\n     * Returns the {@code i} component of the specified {@link Composite} composed by its {@link AbstractType}.\n     *\n     * @param composite A {@link Composite}.\n     * @param i         The index of the {@link Composite} component to be composed.\n     * @return The {@code i} component of the specified {@link Composite} composed by its {@link AbstractType}.\n     */\nprivate Object getComposedComponent(Composite composite, int i) {\n        ByteBuffer component = composite.get(i);\n        AbstractType<?> type = types[i];\n        return type.compose(component);\n    }"} {"path":"downloaded/ClusteringKeyMapperColumns.java","method_name":"includeStart","content":"/**\n     * Returns {@code true} if the specified {@link Composite} must be included when used as a range start.\n     *\n     * @param composite A {@link Composite}.\n     * @return {@code true} if the specified {@link Composite} must be included when used as a range start.\n     */\nprivate boolean includeStart(Composite composite) {\n        ByteBuffer[] components = ByteBufferUtils.split(composite.toByteBuffer(), compositeType);\n        return components.length <= numClusteringColumns && composite.eoc() != Composite.EOC.END;\n    }"} {"path":"downloaded/ClusteringKeyMapperColumns.java","method_name":"includeStop","content":"/**\n     * Returns {@code true} if the specified {@link Composite} must be included when used as a range stop.\n     *\n     * @param composite A {@link Composite}.\n     * @return {@code true} if the specified {@link Composite} must be included when used as a range stop.\n     */\nprivate boolean includeStop(Composite composite) {\n        ByteBuffer[] components = ByteBufferUtils.split(composite.toByteBuffer(), compositeType);\n        return components.length > numClusteringColumns || composite.eoc() == Composite.EOC.END;\n    }"} {"path":"downloaded/ClusteringKeyMapperColumns.java","method_name":"query","content":"/**\n     * Returns {@code true} if the specified {@link Composite} must be included when used as a range stop.\n     *\n     * @param composite A {@link Composite}.\n     * @return {@code true} if the specified {@link Composite} must be included when used as a range stop.\n     */\n@Override\n    public Query query(Composite start, Composite stop) {\n        BooleanQuery booleanQuery = new BooleanQuery();\n\n        if (start != null && !start.isEmpty()) {\n            BooleanQuery startQuery = new BooleanQuery();\n            for (int i = 0; i < numClusteringColumns; i++) {\n                BooleanQuery q = new BooleanQuery();\n                for (int j = 0; j < i; j++) {\n                    String name = names[j];\n                    Object value = getComposedComponent(start, j);\n                    q.add(new MatchConditionBuilder(name, value).build().query(schema), MUST);\n                }\n                String name = names[i];\n                Object value = getComposedComponent(start, i);\n                boolean include = (i == numClusteringColumns - 1) && includeStart(start);\n                q.add(new RangeConditionBuilder(name).lower(value).includeLower(include).build().query(schema), MUST);\n                startQuery.add(q, SHOULD);\n            }\n            booleanQuery.add(startQuery, MUST);\n        }\n\n        if (stop != null && !stop.isEmpty()) {\n            BooleanQuery stopQuery = new BooleanQuery();\n            for (int i = 0; i < numClusteringColumns; i++) {\n                BooleanQuery q = new BooleanQuery();\n                for (int j = 0; j < i; j++) {\n                    String name = names[j];\n                    Object value = getComposedComponent(stop, j);\n                    q.add(new MatchConditionBuilder(name, value).build().query(schema), MUST);\n                }\n                String name = names[i];\n                Object value = getComposedComponent(stop, i);\n                boolean include = (i == numClusteringColumns - 1) && includeStop(stop);\n                q.add(new RangeConditionBuilder(name).upper(value).includeUpper(include).build().query(schema), MUST);\n                stopQuery.add(q, SHOULD);\n            }\n            booleanQuery.add(stopQuery, MUST);\n        }\n\n        return booleanQuery.getClauses().length == 0 ? null : booleanQuery;\n    }"} {"path":"downloaded/MatteIcon.java","method_name":"getIconHeight","content":"/**\n     * Returns the icon's height.\n     *\n     * @return an int specifying the fixed height of the icon.\n     */\npublic int getIconHeight() {\n        return height;\n    }"} {"path":"downloaded/MatteIcon.java","method_name":"getIconWidth","content":"/**\n     * Returns the icon's width.\n     *\n     * @return an int specifying the fixed width of the icon.\n     */\npublic int getIconWidth() {\n        return width;\n    }"} {"path":"downloaded/MatteIcon.java","method_name":"getBackground","content":"/**\n     * Gets the paint instance used to fill this icon.\n     *\n     * @return The paint used to fill this icon.\n     * @see #setBackground(java.awt.Paint)\n     */\npublic Paint getBackground() {\n        return background;\n    }"} {"path":"downloaded/JZebraTree.java","method_name":"paintComponent","content":"/** Add zebra stripes to the background. */\n@Override\n    public void paintComponent(Graphics g) {\n        if (!(drawStripes = isOpaque())) {\n            super.paintComponent(g);\n            return;\n        }\n\n        // Paint zebra background stripes\n//    updateZebraColors();\n        final Insets insets = getInsets();\n        final int w = getWidth() - insets.left - insets.right;\n        final int h = getHeight() - insets.top - insets.bottom;\n        final int x = insets.left;\n        int y = insets.top;\n        int nRows = 0;\n        int startRow = 0;\n        int height = getRowHeight();\n        if (height > 0) {\n            nRows = h / height;\n        } else {\n            // Paint non-uniform height rows first\n            final int nItems = getRowCount();\n            height = 17; // A default for empty trees\n            for (int i = 0; i < nItems; i++, y += height) {\n                height = getRowBounds(i).height;\n                g.setColor(rowColors[i & 1]);\n                g.fillRect(x, y, w, height);\n            }\n            // Use last row height for remainder of tree area\n            nRows = nItems + (insets.top + h - y) / height;\n            startRow = nItems;\n        }\n\n        for (int i = startRow; i < nRows; i++, y += height) {\n            g.setColor(rowColors[i & 1]);\n            g.fillRect(x, y, w, height);\n        }\n\n        final int remainder = insets.top + h - y;\n        if (remainder > 0) {\n            g.setColor(rowColors[nRows & 1]);\n            g.fillRect(x, y, w, remainder);\n        }\n\n        // Paint component\n        setOpaque(false);\n        super.paintComponent(g);\n        setOpaque(true);\n    }"} {"path":"downloaded/JZebraTree.java","method_name":"getCellRenderer","content":"/** Return the wrapped cell renderer. */\n@Override\n    public TreeCellRenderer getCellRenderer() {\n        final TreeCellRenderer ren = super.getCellRenderer();\n        if (ren == null) {\n            return null;\n        }\n        if (wrapper == null) {\n            wrapper = new RendererEditorWrapper();\n        }\n        wrapper.ren = ren;\n        return wrapper;\n    }"} {"path":"downloaded/JZebraTree.java","method_name":"getCellEditor","content":"/** Return the wrapped cell editor. */\n@Override\n    public TreeCellEditor getCellEditor() {\n        final TreeCellEditor ed = super.getCellEditor();\n        if (ed == null) {\n            return null;\n        }\n        if (wrapper == null) {\n            wrapper = new RendererEditorWrapper();\n        }\n        wrapper.ed = ed;\n        return wrapper;\n    }"} {"path":"downloaded/TestUtility.java","method_name":"randomString","content":"/**\n\t * Produces a random string.\n\t * \n\t * @return a random string.\n\t */\npublic static String randomString() {\n\t\tfinal long value = RANDOMIZER.nextLong();\n\t\treturn String.valueOf(value < 0 ? value * -1 : value);\n\t}"} {"path":"downloaded/TestUtility.java","method_name":"randomBoolean","content":"/**\n\t * Produces a random boolean.\n\t * \n\t * @return a random boolean.\n\t */\npublic static boolean randomBoolean() {\n\t\treturn RANDOMIZER.nextBoolean();\n\t}"} {"path":"downloaded/TestUtility.java","method_name":"randomBytes","content":"/**\n\t * Produces a random byte array.\n\t * \n\t * @param size the size of the returned array.\n\t * @return a random byte array.\n\t */\npublic static byte[] randomBytes(final int size) {\n\t\tfinal byte[] value = new byte[size];\n\t\tRANDOMIZER.nextBytes(value);\n\t\treturn value;\n\t}"} {"path":"downloaded/TestUtility.java","method_name":"buildResource","content":"/**\n\t * Builds a new URI.\n\t * If the input parameter starts with http then it is directly used as URI value. Otherwise\n\t * if it is a local name, a common prefix will be prepended.\n\t * \n\t * @param uriOrLocalName the URI or local name.\n\t * @return a new URI.\n\t */\npublic static Node buildResource(final String uriOrLocalName) {\n\t\treturn NodeFactory.createURI(\n\t\t\t\turiOrLocalName.startsWith(\"http\") \n\t\t\t\t\t? uriOrLocalName \n\t\t\t\t\t: \"http://gazzax.rdf.org/\" + uriOrLocalName);\n\t}"} {"path":"downloaded/TestUtility.java","method_name":"buildLiteral","content":"/**\n\t * Builds a literal with the given label.\n\t * \n\t * @param label the label.\n\t * @return a literal with the given label.\n\t */\npublic static Node buildLiteral(final String label) {\n\t\treturn NodeFactory.createLiteral(label);\n\t}"} {"path":"downloaded/TestUtility.java","method_name":"buildBNode","content":"/**\n\t * Builds a blank node with the given id.\n\t * \n\t * @param id the node id.\n\t * @return a blank node with the given id.\n\t */\npublic static Node buildBNode(final String id) {\n\t\treturn NodeFactory.createAnon(AnonId.create(id));\n\t}"} {"path":"downloaded/TestUtility.java","method_name":"createSampleConfiguration","content":"/**\n\t * Creates a dummy configuration (TEST ONLY).\n\t * \n\t * @param file the file that will hold this dummy configuration.\n\t * @return a dummy configuration persieted to a (most probably) tmp file.\n\t * @throws Exception in case any failure occurred.\n\t */\npublic static Map<String, Object> createSampleConfiguration(final File file) throws Exception {\n\t\tfinal Map<String, Object> configuration = new HashMap<String, Object>();\n\t\t\n\t\tBufferedWriter writer = null;\n\t\ttry {\n\t\t\twriter = new BufferedWriter(new FileWriter(file));\n\t\t\tfor (int i = 0; i < RANDOMIZER.nextInt(10) + 2; i++) {\n\t\t\t\tfinal String key = String.valueOf(i);\n\t\t\t\tfinal String value = randomString();\n\t\t\t\t\n\t\t\t\tconfiguration.put(key, value);\n\t\t\t\twriter.write(key + \": \\\"\" + value + \"\\\"\");\n\t\t\t\twriter.newLine();\n\t\t\t}\n\t\t} finally {\n\t\t\twriter.flush();\n\t\t\twriter.close();\n\t\t}\n\t\treturn configuration;\n\t}"} {"path":"downloaded/CopyFileFolderHandler.java","method_name":"execute","content":"/**\n\t * Execute.\n\t *\n\t * @param event the event\n\t * @return the object\n\t * @throws ExecutionException the execution exception\n\t */\n@Override\n\tpublic Object execute(ExecutionEvent event) throws ExecutionException {\n\t\tIWorkbenchWindow window = HandlerUtil.getActiveWorkbenchWindowChecked(event);\n\t\tISelectionService service = window.getSelectionService();\n\t\tIStructuredSelection structuredSelection = (IStructuredSelection) service.getSelection();\n\n\t\ttry {\n\t\t\tList<String> pathsList = CommonUtil.getDirectoryPaths(structuredSelection);\n\t\t\tString[] data = pathsList.toArray(new String[pathsList.size()]);\n\t\t\tCommonUtil.copyFileToClipBoard(data);\n\t\t} catch (NullPointerException npe) {\n\t\t\tPluginLogger.error(npe);\n\t\t\tMessageDialog.openError(new Shell(), ERROR, npe.getMessage() + \" \" + RPT_ERR_TXT);\n\t\t} catch (Exception e) {\n\t\t\tPluginLogger.error(e);\n\t\t\tMessageDialog.openError(new Shell(), ERROR, e.getMessage() + \" \" + RPT_ERR_TXT);\n\t\t}\n\t\treturn null;\n\t}"} {"path":"downloaded/UrlConnectionManager.java","method_name":"sendRequest","content":"/**\n\t * sendRequest\n\t * @param urlPath - relative path on the server\n\t * @param params - HashMap of values\n\t * @param requestMethod - [optional] defaults to Request.Method.POST\n\t * @return Json Object\n\t */\npublic JSONObject sendRequest( String urlPath, Map<?, ?> params, int... requestMethod )\n\t{\n\t\ttry\n\t\t{\n\t\t\tJSONObject jsonObj = JsonUtilities.mapToJson( params );\n\t\t\tLog.e( LOG_TAG, \"Params: \" + jsonObj + \"; urlPath: \" + urlPath );\n\t\t\t// Request a string response from the provided URL.\n\t\t\tJsonObjectRequest jsonRequest = new JsonObjectRequest(\n\t\t\t\t\trequestMethod[0] > -1 ? requestMethod[0] : Request.Method.POST, // Request.Method.POST or GET\n\t\t\t\t\tbaseUrl + urlPath,\n\t\t\t\t\tjsonObj,\t\t\t\t// Convert the supplied params to Json\n\t\t\t\t\tnew Response.Listener<JSONObject>()\n\t\t\t\t\t{\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onResponse( JSONObject response )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tjsonObject = response;\t\t\t// Set the field to the response\n\n\t\t\t\t\t\t\t// Display the first 500 characters of the response string.\n\t\t\t\t\t\t\tLog.i( LOG_TAG, \"Response is: \" + response.toString() );\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tnew Response.ErrorListener()\n\t\t\t\t\t{\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onErrorResponse( VolleyError error )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tjsonObject = new JSONObject();\n\n\t\t\t\t\t\t\tLog.i( LOG_TAG, \"Request failed: \\n\" + error.getMessage() );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t// Add the request to the RequestQueue.\n\t\t\tqueue.add( jsonRequest );\n\n\t\t\treturn jsonObject;\n\t\t}\n\t\tcatch( Exception e )\n\t\t{\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\n\t}"} {"path":"downloaded/UrlConnectionManager.java","method_name":"addRequestToQueueAsync","content":"/**\n\t * sendRequest\n\t * @param urlPath - relative path on the server\n\t * @param params - HashMap of values\n\t * @param requestMethod - [optional] defaults to Request.Method.POST\n\t * @return Json Object\n\t */\npublic JSONObject addRequestToQueueAsync( String url, HashMap<String, String> params )\n\t{\n\t\ttry\n\t\t{\n\t\t\tnew JsonRequest( params ).execute( url ).wait();\n\n\t\t\treturn jsonObject;\n\t\t}\n\t\tcatch( Exception e )\n\t\t{\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\n\t}"} {"path":"downloaded/ValueObject.java","method_name":"getName","content":"/**\n\t * @return Returns the name.\n\t */\npublic String getName() {\n\t\treturn name;\n\t}"} {"path":"downloaded/ValueObject.java","method_name":"getValue","content":"/**\n\t * @return Returns the value.\n\t */\npublic Integer getValue() {\n\t\treturn value;\n\t}"} {"path":"downloaded/ValueObject.java","method_name":"getType","content":"/**\n\t * @param value The value to set.\n\t */\npublic String getType() {\n\t\treturn type;\n\t}"} {"path":"downloaded/ValueObject.java","method_name":"getType1","content":"/**\n\t * @param value The value to set.\n\t */\npublic String getType1() {\n\t\treturn type1;\n\t}"} {"path":"downloaded/ValueObject.java","method_name":"getNested","content":"/**\n\t * @param value The value to set.\n\t */\npublic NestedObject getNested() {\n\t\treturn nested;\n\t}"} {"path":"downloaded/ValueObject.java","method_name":"getNested1","content":"/**\n\t * @param value The value to set.\n\t */\npublic NestedObject getNested1() {\n\t\treturn nested1;\n\t}"} {"path":"downloaded/ValueObject.java","method_name":"getNested2","content":"/**\n\t * @param value The value to set.\n\t */\npublic NestedObject getNested2() {\n\t\treturn nested2;\n\t}"} {"path":"downloaded/ValueObject.java","method_name":"getNonNested","content":"/**\n\t * @param value The value to set.\n\t */\npublic NestedObject getNonNested() {\n\t\treturn nonNested;\n\t}"} {"path":"downloaded/ValueObject.java","method_name":"getValues","content":"/**\n\t * @return Returns the values.\n\t */\npublic List<String> getValues() {\n\t\treturn values;\n\t}"} {"path":"downloaded/ValueObject.java","method_name":"getValues1","content":"/**\n\t * @param values The values to set.\n\t */\npublic Set<String> getValues1() {\n\t\treturn values1;\n\t}"} {"path":"downloaded/ValueObject.java","method_name":"getNestedList","content":"/**\n\t * @param values The values to set.\n\t */\npublic List<NestedObject> getNestedList() {\n\t\treturn nestedList;\n\t}"} {"path":"downloaded/ValueObject.java","method_name":"getNestedList1","content":"/**\n\t * @param values The values to set.\n\t */\npublic List<NestedObject> getNestedList1() {\n\t\treturn nestedList1;\n\t}"} {"path":"downloaded/ValueObject.java","method_name":"getNestedSet","content":"/**\n\t * @param values The values to set.\n\t */\npublic Set<NestedObject> getNestedSet() {\n\t\treturn nestedSet;\n\t}"} {"path":"downloaded/ValueObject.java","method_name":"getSerialversionuid","content":"/**\n\t * @param values The values to set.\n\t */\npublic static long getSerialversionuid() {\n\t\treturn serialVersionUID;\n\t}"} {"path":"downloaded/MoverSource.java","method_name":"openFragment","content":"/**\n     * Replace current fragment with new one,\n     * plus adds it to back stack, then commit\n     *\n     * @param manager Fragment manager\n     * @param fragment fragment to open\n     * @param args target arguments\n     * @param name target id\n     *\n     * @return target\n     */\nprivate BaseWatchMeFragment openFragment(FragmentManager manager,\n                                     BaseWatchMeFragment fragment,\n                                     Bundle args,  String name){\n        if(args != null){\n            fragment.setArguments(args);\n        }\n\n        manager.beginTransaction()\n                .replace(R.id.container, fragment, name)\n                .addToBackStack(name)\n                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)\n                .commit();\n\n        return fragment;\n    }"} {"path":"downloaded/MoverSource.java","method_name":"openFragmentWithoutAddingBackStack","content":"/**\n     * Replace current fragment with new one then commit\n     *\n     * @param manager Fragment manager\n     * @param fragment fragment to open\n     * @param args target arguments\n     * @param name target id\n     *\n     * @return target\n     */\nprivate BaseWatchMeFragment openFragmentWithoutAddingBackStack(FragmentManager manager,\n                                     BaseWatchMeFragment fragment,\n                                     Bundle args,  String name){\n        if(args != null){\n            fragment.setArguments(args);\n        }\n\n        manager.beginTransaction()\n                .replace(R.id.container, fragment, name)\n                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)\n                .commit();\n\n        return fragment;\n    }"} {"path":"downloaded/MoverSource.java","method_name":"getPageNumber","content":"/**\n     * Parse string to find integers\n     *\n     * @param value Destination of integers\n     * @return parsed integers in given argument\n     */\nstatic int getPageNumber(String value){\n        int pageNumber = 1;\n        if(!TextUtils.isEmpty(value)){\n            pageNumber = Integer.getInteger(value, pageNumber);\n        }\n        return pageNumber;\n    }"} {"path":"downloaded/IssueDetailDTO.java","method_name":"getCatProvinceId","content":"/**\n     *\n     */\npublic Long getCatProvinceId() {\n        return catProvinceId;\n    }"} {"path":"downloaded/IssueDetailDTO.java","method_name":"getCatProvinceCode","content":"/**\n     *\n     */\npublic String getCatProvinceCode() {\n        return catProvinceCode;\n    }"} {"path":"downloaded/IssueDetailDTO.java","method_name":"getCatProvinceName","content":"/**\n     *\n     */\npublic String getCatProvinceName() {\n        return catProvinceName;\n    }"} {"path":"downloaded/IssueDetailDTO.java","method_name":"getDiscussContent","content":"/**\n     *\n     */\npublic String getDiscussContent() {\n        return discussContent;\n    }"} {"path":"downloaded/IssueDetailDTO.java","method_name":"getOldStatus","content":"/**\n     *\n     */\npublic String getOldStatus() {\n        return oldStatus;\n    }"} {"path":"downloaded/IssueDetailDTO.java","method_name":"getCurrentHandingUserIdNew","content":"/**\n     *\n     */\npublic Long getCurrentHandingUserIdNew() {\n        return currentHandingUserIdNew;\n    }"} {"path":"downloaded/IssueDetailDTO.java","method_name":"getProcessContent","content":"/**\n     *\n     */\npublic String getProcessContent() {\n        return processContent;\n    }"} {"path":"downloaded/IssueDetailDTO.java","method_name":"getCatStationCode","content":"/**\n     *\n     */\npublic String getCatStationCode() {\n        return catStationCode;\n    }"} {"path":"downloaded/IssueDetailDTO.java","method_name":"getWorkItemName","content":"/**\n     *\n     */\npublic String getWorkItemName() {\n        return workItemName;\n    }"} {"path":"downloaded/IssueDetailDTO.java","method_name":"getCreatedPhoneNumber","content":"/**\n     *\n     */\npublic String getCreatedPhoneNumber() {\n        return createdPhoneNumber;\n    }"} {"path":"downloaded/IssueDetailDTO.java","method_name":"getCurrentHandingPhoneNumber","content":"/**\n     *\n     */\npublic String getCurrentHandingPhoneNumber() {\n        return currentHandingPhoneNumber;\n    }"} {"path":"downloaded/IssueDetailDTO.java","method_name":"getConstructionCode","content":"/**\n     *\n     */\npublic String getConstructionCode() {\n        return constructionCode;\n    }"} {"path":"downloaded/IssueDetailDTO.java","method_name":"getCreatedUserName","content":"/**\n     *\n     */\npublic String getCreatedUserName() {\n        return createdUserName;\n    }"} {"path":"downloaded/IssueDetailDTO.java","method_name":"getCurrentHandingUserName","content":"/**\n     *\n     */\npublic String getCurrentHandingUserName() {\n        return currentHandingUserName;\n    }"} {"path":"downloaded/IssueDetailDTO.java","method_name":"getCreatedFrom","content":"/**\n     *\n     */\npublic Date getCreatedFrom() {\n        return createdFrom;\n    }"} {"path":"downloaded/IssueDetailDTO.java","method_name":"getCreatedTo","content":"/**\n     *\n     */\npublic Date getCreatedTo() {\n        return createdTo;\n    }"} {"path":"downloaded/IssueDetailDTO.java","method_name":"getSysGroupId","content":"/**\n     *\n     */\npublic Long getSysGroupId() {\n        return sysGroupId;\n    }"} {"path":"downloaded/AugmentedfsmFactoryImpl.java","method_name":"init","content":"/**\n\t * Creates the default factory implementation.\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic static AugmentedfsmFactory init() {\n\t\ttry {\n\t\t\tAugmentedfsmFactory theAugmentedfsmFactory = (AugmentedfsmFactory)EPackage.Registry.INSTANCE.getEFactory(AugmentedfsmPackage.eNS_URI);\n\t\t\tif (theAugmentedfsmFactory != null) {\n\t\t\t\treturn theAugmentedfsmFactory;\n\t\t\t}\n\t\t}\n\t\tcatch (Exception exception) {\n\t\t\tEcorePlugin.INSTANCE.log(exception);\n\t\t}\n\t\treturn new AugmentedfsmFactoryImpl();\n\t}"} {"path":"downloaded/AugmentedfsmFactoryImpl.java","method_name":"create","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tpublic EObject create(EClass eClass) {\n\t\tswitch (eClass.getClassifierID()) {\n\t\t\tcase AugmentedfsmPackage.EXECUTABLE_STATE: return createExecutableState();\n\t\t\tcase AugmentedfsmPackage.GUARDED_TRANSITION: return createGuardedTransition();\n\t\t\tdefault:\n\t\t\t\tthrow new IllegalArgumentException(\"The class '\" + eClass.getName() + \"' is not a valid classifier\");\n\t\t}\n\t}"} {"path":"downloaded/AugmentedfsmFactoryImpl.java","method_name":"createExecutableState","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic ExecutableState createExecutableState() {\n\t\tExecutableStateImpl executableState = new ExecutableStateImpl();\n\t\treturn executableState;\n\t}"} {"path":"downloaded/AugmentedfsmFactoryImpl.java","method_name":"createGuardedTransition","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic GuardedTransition createGuardedTransition() {\n\t\tGuardedTransitionImpl guardedTransition = new GuardedTransitionImpl();\n\t\treturn guardedTransition;\n\t}"} {"path":"downloaded/AugmentedfsmFactoryImpl.java","method_name":"getAugmentedfsmPackage","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic AugmentedfsmPackage getAugmentedfsmPackage() {\n\t\treturn (AugmentedfsmPackage)getEPackage();\n\t}"} {"path":"downloaded/AugmentedfsmFactoryImpl.java","method_name":"getPackage","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @deprecated\n\t * @generated\n\t */\n@Deprecated\n\tpublic static AugmentedfsmPackage getPackage() {\n\t\treturn AugmentedfsmPackage.eINSTANCE;\n\t}"} {"path":"downloaded/Method_25299.java","method_name":"descending","content":"/** \n * Non-overlapping replacements, sorted in descending order by position. \n */\npublic Set<Replacement> descending(){\n  return new LinkedHashSet<>(replacements.values());\n}"} {"path":"downloaded/ElevatorsSystem.java","method_name":"registerElevator","content":"/**\n     * Registers new elevator in the system.\n     * The elevator which is being registered must have unique ID compared to already registered elevators.\n     * The limit of registered elevators cannot be exceeded.\n     *\n     * @param elevatorID ID of elevator to be registered\n     * @param startFloor floor on which elevator starts its work\n     */\npublic void registerElevator(Integer elevatorID, int startFloor) {\n        if (elevatorControllers.size() == ELEVATORS_LIMIT || elevatorControllers.containsKey(elevatorID)) {\n            System.err.println(\"Failed to register elevator with ID: \" + elevatorID.toString());\n            return;\n        }\n        Elevator elevator = new Elevator(elevatorID, startFloor);\n        ElevatorController controller = new ElevatorController(elevator);\n        elevatorControllers.put(elevatorID, controller);\n    }"} {"path":"downloaded/ElevatorsSystem.java","method_name":"updateElevatorStatus","content":"/**\n     * Manually updates chosen elevator's status: ID, its current floor and its destination floor.\n     *\n     * @param elevatorID       ID of an updated elevator\n     * @param currentFloor     new current floor\n     * @param destinationFloor new destination floor\n     */\npublic void updateElevatorStatus(Integer elevatorID, int currentFloor, int destinationFloor) {\n        ElevatorController controller = elevatorControllers.get(elevatorID);\n        if (controller == null) {\n            System.err.println(\"Failed to update status of elevator with ID: \" + elevatorID.toString());\n            return;\n        }\n        controller.setElevatorCurrentFloor(currentFloor);\n        Request request = RequestFactory.createRestartRequest(elevatorID, destinationFloor);\n        try {\n            scheduler.enqueueInternalRequest(request, controller);\n        } catch (ElevatorsSchedulerException e) {\n            //unlikely to happen as created request is validated with use of factory design pattern\n            System.err.println(e.getMessage());\n        }\n    }"} {"path":"downloaded/ElevatorsSystem.java","method_name":"getElevatorsStatuses","content":"/**\n     * Get summary information about every elevator registered in the system's status.\n     *\n     * @return list of {@link ElevatorStatus} statuses of system's elevators\n     */\npublic List<ElevatorStatus> getElevatorsStatuses() {\n        return elevatorControllers.values()\n                .stream()\n                .map(ElevatorController::getElevatorStatus)\n                .collect(Collectors.toList());\n    }"} {"path":"downloaded/ElevatorsSystem.java","method_name":"isAnyRequestUnprocessed","content":"/**\n     * Checks whether there are any awaiting requests in the system.\n     *\n     * @return true if there are any requests in any controller's queue, otherwise false\n     */\npublic boolean isAnyRequestUnprocessed() {\n        return !elevatorControllers\n                .values()\n                .stream()\n                .allMatch(ElevatorController::isInactive);\n    }"} {"path":"downloaded/ElevatorsSystem.java","method_name":"numberOfRequestsEnqueued","content":"/**\n     * Counts the total number of requests enqueued in the system.\n     *\n     * @return total number of all requests enqueued to all controllers\n     */\npublic int numberOfRequestsEnqueued() {\n        int totalRequests = 0;\n        for (ElevatorController controller : elevatorControllers.values()) {\n            totalRequests += controller.getRequestsQueue().size();\n        }\n        return totalRequests;\n    }"} {"path":"downloaded/SpeechMsgBuilder.java","method_name":"textMo","content":"/**\n     * 合成优先级，\n     * 取值：{@linkplain SpeechMsg#PRIORITY_ABOVE_RECOGNIZE PRIORITY_ABOVE_RECOGNIZE} 默认值;\n     * {@linkplain SpeechMsg#PRIORITY_BELOW_RECOGNIZE PRIORITY_\nEEP_AWAKEN}\n     */\n    int contextMode;\n    /**\n     * 是否强制使用离线引擎\n     */\n    bo"} {"path":"downloaded/SpeechMsgBuilder.java","method_name":"Builder(Str","content":"/**\n     * 合成优先级，\n     * 取值：{@linkplain SpeechMsg#PRIORITY_ABOVE_RECOGNIZE PRIORITY_ABOVE_RECOGNIZE} 默认值;\n     * {@linkplain SpeechMsg#PRIORITY_BELOW_RECOGNIZE PRIORITY_\n }\n\n    public SpeechMsgBuilder(String text) {\n        this.id = System.currentTimeMillis();\n        this.text = text;"} {"path":"downloaded/SpeechMsgBuilder.java","method_name":"ilder setSe","content":"/**\n     * 合成优先级，\n     * 取值：{@linkplain SpeechMsg#PRIORITY_ABOVE_RECOGNIZE PRIORITY_ABOVE_RECOGNIZE} 默认值;\n     * {@linkplain SpeechMsg#PRIORITY_BELOW_RECOGNIZE PRIORITY_\n\n\n    public SpeechMsgBuilder setSections(JSONArray sections) {\n        this.sections = sections;\n        return"} {"path":"downloaded/SpeechMsgBuilder.java","method_name":"hMsgBuild","content":"/**\n     * 合成优先级，\n     * 取值：{@linkplain SpeechMsg#PRIORITY_ABOVE_RECOGNIZE PRIORITY_ABOVE_RECOGNIZE} 默认值;\n     * {@linkplain SpeechMsg#PRIORITY_BELOW_RECOGNIZE PRIORITY_\n\n    }\n\n    public SpeechMsgBuilder setPriority(int priority) {\n        this.priority = priority;\n      "} {"path":"downloaded/SpeechMsgBuilder.java","method_name":"ic SpeechMsgBu","content":"/**\n     * 合成优先级，\n     * 取值：{@linkplain SpeechMsg#PRIORITY_ABOVE_RECOGNIZE PRIORITY_ABOVE_RECOGNIZE} 默认值;\n     * {@linkplain SpeechMsg#PRIORITY_BELOW_RECOGNIZE PRIORITY_\nrn this;\n    }\n\n    public SpeechMsgBuilder setOrigin(int origin) {\n        this.origin = origin;\n        return this;\n    }"} {"path":"downloaded/SpeechMsgBuilder.java","method_name":"setContextMod","content":"/**\n     * 合成优先级，\n     * 取值：{@linkplain SpeechMsg#PRIORITY_ABOVE_RECOGNIZE PRIORITY_ABOVE_RECOGNIZE} 默认值;\n     * {@linkplain SpeechMsg#PRIORITY_BELOW_RECOGNIZE PRIORITY_\npublic SpeechMsgBuilder setContextMode(int contextMode) {\n        this.contextMode = contextMode;\n        return this;\n "} {"path":"downloaded/SpeechMsgBuilder.java","method_name":"der setRetryTimes(i","content":"/**\n     * 合成优先级，\n     * 取值：{@linkplain SpeechMsg#PRIORITY_ABOVE_RECOGNIZE PRIORITY_ABOVE_RECOGNIZE} 默认值;\n     * {@linkplain SpeechMsg#PRIORITY_BELOW_RECOGNIZE PRIORITY_\n    public SpeechMsgBuilder setRetryTimes(int retryTimes) {\n        this.retryTimes = retryTimes;\n        return this;\n    }\n\n    public SpeechMsgBu"} {"path":"downloaded/SpeechMsgBuilder.java","method_name":"ean for","content":"/**\n     * 合成优先级，\n     * 取值：{@linkplain SpeechMsg#PRIORITY_ABOVE_RECOGNIZE PRIORITY_ABOVE_RECOGNIZE} 默认值;\n     * {@linkplain SpeechMsg#PRIORITY_BELOW_RECOGNIZE PRIORITY_\nsetForceLocalEngine(boolean forceLocalEngine) {\n        this.forceLocalEngine = forceLocalEngine;\n "} {"path":"downloaded/SpeechMsgBuilder.java","method_name":"    }\n\n","content":"/**\n     * 合成优先级，\n     * 取值：{@linkplain SpeechMsg#PRIORITY_ABOVE_RECOGNIZE PRIORITY_ABOVE_RECOGNIZE} 默认值;\n     * {@linkplain SpeechMsg#PRIORITY_BELOW_RECOGNIZE PRIORITY_\n return this;\n    }\n\n    public SpeechMsgBuilder set"} {"path":"downloaded/Propietario.java","method_name":"getUser","content":"/**\n\t * \n\t */\npublic User getUser() {\n\t\treturn user;\n\t}"} {"path":"downloaded/Propietario.java","method_name":"getCpropietario","content":"/**\n\t * \n\t */\npublic int getCpropietario() {\n\t\treturn cpropietario;\n\t}"} {"path":"downloaded/Propietario.java","method_name":"getNpropietario","content":"/**\n\t * \n\t */\npublic String getNpropietario() {\n\t\treturn npropietario;\n\t}"} {"path":"downloaded/Propietario.java","method_name":"getNapellido","content":"/**\n\t * \n\t */\npublic String getNapellido() {\n\t\treturn napellido;\n\t}"} {"path":"downloaded/Propietario.java","method_name":"getCorreo","content":"/**\n\t * \n\t */\npublic String getCorreo() {\n\t\treturn correo;\n\t}"} {"path":"downloaded/Propietario.java","method_name":"getClave","content":"/**\n\t * \n\t */\npublic String getClave() {\n\t\treturn clave;\n\t}"} {"path":"downloaded/Propietario.java","method_name":"getCategoria","content":"/**\n\t * \n\t */\npublic Categoria getCategoria() {\n\t\treturn categoria;\n\t}"} {"path":"downloaded/Propietario.java","method_name":"hashCode","content":"/**\n\t * \n\t */\n@Override\n\tpublic int hashCode() {\n\t\treturn Objects.hash(cpropietario);\n\t}"} {"path":"downloaded/Propietario.java","method_name":"equals","content":"/**\n\t * \n\t */\n@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tPropietario other = (Propietario) obj;\n\t\treturn cpropietario == other.cpropietario;\n\t}"} {"path":"downloaded/AbstractJpaEchoEntity.java","method_name":"getUserupdate","content":"/**\n\t * @return the userupdate\n\t */\n@Column(name=\"userupdate\", nullable=false, length=100)\n\tpublic String getUserupdate() {\n\t\treturn userupdate;\n\t}"} {"path":"downloaded/AbstractJpaEchoEntity.java","method_name":"getActive","content":"/**\n\t * @return the active\n\t */\n@Column(name=\"active\", nullable=false)\n\tpublic Boolean getActive() {\n\t\treturn active;\n\t}"} {"path":"downloaded/AbstractJpaEchoEntity.java","method_name":"getCreated","content":"/**\n\t * @return the created\n\t */\npublic Date getCreated() {\n\t\treturn created;\n\t}"} {"path":"downloaded/AbstractJpaEchoEntity.java","method_name":"getUpdated","content":"/**\n\t * @return the updated\n\t */\npublic Date getUpdated() {\n\t\treturn updated;\n\t}"} {"path":"downloaded/PromotionRuleDataDaoImpl.java","method_name":"ublic List<PromotionRuleData> query","content":"/**\n   * 根据活动ID和金额查询活动规则数据\n   * \n   * @param params\n   * @return\n \n @throws SQLException\n   */\n  public List<PromotionRuleData> queryPromotionRuleDataByPromotionId(Map<String, Object> params)\n      throws SQLException {\n    return sqlMapClient.queryForList(\"PromotionRuleData.QUERY_PROMOTION_RULE_DATA_BY_PROMO"} {"path":"downloaded/SketchBarChart.java","method_name":"getOffset","content":"/**\n   * Gets the offset.\n   * \n   * @return the offset\n   */\npublic Integer getOffset() {\n    return (Integer)get(\"offset\");\n  }"} {"path":"downloaded/SketchBarChart.java","method_name":"getOffset","content":"/**\n     * Returns the offset.\n     * \n     * @return the offset\n     */\npublic Integer getOffset() {\n      return (Integer)get(\"offset\");\n    }"} {"path":"downloaded/ManageTableIndex.java","method_name":"getTableName","content":"/**\n\t * Parse the table name which can he the following form:\n\t * tableName: just take it as it is\n\t * tableName(col1,col2...): column names are stored in the columns collection\n\t * @param tableParam\n\t * @param columns\n\t * @return\n\t */\nstatic public final String getTableName(String tableParam, Collection<String> columns) {\n\n\t\tPattern p = Pattern.compile(\"(.*)\\\\((.*)\\\\)\");\n\t\tMatcher m = p.matcher(tableParam);\n\t\tif( m.find() && m.groupCount() == 2 ) {\n\t\t\tString[] cols = m.group(2).split(\"[,;\\\\s]\");\n\t\t\tif( columns != null) {\n\t\t\t\tfor( String c: cols ) columns.add(c);\n\t\t\t}\n\t\t\treturn m.group(1);\n\t\t} else {\n\t\t\treturn tableParam;\n\t\t}\n\t}"} {"path":"downloaded/ResponseEditPart.java","method_name":"createConnectionFigure","content":"/**\n\t * Creates figure for this edit part.\n\t * \n\t * Body of this method does not depend on settings in generation model\n\t * so you may safely remove <i>generated</i> tag and modify it.\n\t * \n\t * @generated\n\t */\nprotected Connection createConnectionFigure() {\n\t\treturn new ResponseFigure();\n\t}"} {"path":"downloaded/ResponseEditPart.java","method_name":"getPrimaryShape","content":"/**\n\t * @generated\n\t */\npublic ResponseFigure getPrimaryShape() {\n\t\treturn (ResponseFigure) getFigure();\n\t}"} {"path":"downloaded/ResponseEditPart.java","method_name":"createSourceDecoration","content":"/**\n\t\t * @generated\n\t\t */\nprivate RotatableDecoration createSourceDecoration() {\n\t\t\tPolygonDecoration df = new PolygonDecoration();\n\t\t\tdf.setFill(true);\n\t\t\tPointList pl = new PointList();\n\t\t\tpl.addPoint(getMapMode().DPtoLP(-1), getMapMode().DPtoLP(1));\n\t\t\tpl.addPoint(getMapMode().DPtoLP(0), getMapMode().DPtoLP(0));\n\t\t\tpl.addPoint(getMapMode().DPtoLP(-1), getMapMode().DPtoLP(-1));\n\t\t\tpl.addPoint(getMapMode().DPtoLP(-2), getMapMode().DPtoLP(0));\n\t\t\tpl.addPoint(getMapMode().DPtoLP(-1), getMapMode().DPtoLP(1));\n\t\t\tdf.setTemplate(pl);\n\t\t\tdf.setScale(getMapMode().DPtoLP(7), getMapMode().DPtoLP(3));\n\t\t\treturn df;\n\t\t}"} {"path":"downloaded/ResponseEditPart.java","method_name":"createTargetDecoration","content":"/**\n\t\t * @generated\n\t\t */\nprivate RotatableDecoration createTargetDecoration() {\n\t\t\tPolygonDecoration df = new PolygonDecoration();\n\t\t\tdf.setFill(true);\n\t\t\tdf.setBackgroundColor(ColorConstants.white);\n\t\t\tPointList pl = new PointList();\n\t\t\tpl.addPoint(getMapMode().DPtoLP(0), getMapMode().DPtoLP(0));\n\t\t\tpl.addPoint(getMapMode().DPtoLP(-2), getMapMode().DPtoLP(2));\n\t\t\tpl.addPoint(getMapMode().DPtoLP(-2), getMapMode().DPtoLP(-2));\n\t\t\tpl.addPoint(getMapMode().DPtoLP(0), getMapMode().DPtoLP(0));\n\t\t\tdf.setTemplate(pl);\n\t\t\tdf.setScale(getMapMode().DPtoLP(7), getMapMode().DPtoLP(3));\n\t\t\treturn df;\n\t\t}"} {"path":"downloaded/ResponseEditPart.java","method_name":"getFigureResponseLabelFigure","content":"/**\n\t\t * @generated\n\t\t */\npublic WrappingLabel getFigureResponseLabelFigure() {\n\t\t\treturn fFigureResponseLabelFigure;\n\t\t}"} {"path":"downloaded/SSLSaslPlainCredential.java","method_name":"getCredentialConfig","content":"/**\n     * Gets config map.\n     * @return The config map.\n     */\npublic Map<String, Object> getCredentialConfig() {\n        return config;\n    }"} {"path":"downloaded/DaoHoraire.java","method_name":" Horair","content":"\n\n    /**\n     * Requête permettant de récupérer un catalogue en fonction de son Id\n  }\n\n    @Override\n    public Horaire ajouter(Horaire paramHoraire) throws AnarmorixException {\n        try {\n            em.persist(paramHoraire);\n            return paramHoraire;\n        } catch (Exception e) {\n            AnarmorixException exc =  new AnarmorixException(e.getMessage(), AnarmorixExceptionEnum.ERREUR_NON_IDENTIFIEE);\n            throw exc;\n      "} {"path":"downloaded/DaoHoraire.java","method_name":" boolean ","content":"\n\n    /**\n     * Requête permettant de récupérer un catalogue en fonction de son Id\n  }\n\n    @Override\n    public boolean supprimer(Integer paramId) throws AnarmorixException {\n        try {\n            Horaire horaire = (Horaire) em.createQuery(REQ_HORAIRE_ID).setParameter(\"pId\", paramId).getSingleResult();\n            em.remove(horaire);\n            return true;\n        } catch (Exception e) {\n            AnarmorixException exc =  new AnarmorixException(e.getMessage(), AnarmorixExceptionEnum.ERREUR_NON_IDENTIFIEE);\n            throw exc;\n      "} {"path":"downloaded/DaoHoraire.java","method_name":" Horaire me","content":"\n\n    /**\n     * Requête permettant de récupérer un catalogue en fonction de son Id\n  }\n\n    @Override\n    public Horaire mettreAJour(Integer paramId) throws AnarmorixException {\n        try {\n            Horaire horaire = (Horaire) em.createQuery(REQ_HORAIRE_ID).setParameter(\"pId\", paramId).getSingleResult();\n            Horaire updated = em.merge(horaire);\n            return updated;\n        } catch (Exception e) {\n            AnarmorixException exc =  new AnarmorixException(e.getMessage(), AnarmorixExceptionEnum.ERREUR_NON_IDENTIFIEE);\n            throw exc;\n      "} {"path":"downloaded/DaoHoraire.java","method_name":"uverture getHoraireByJour","content":"\n\n    /**\n     * Requête permettant de récupérer un catalogue en fonction de son Id\n  }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public JourOuverture getHoraireByJourOuverture(JourOuverture paramJourOuverture) throws AnarmorixException {\n        try {\n            String hql = \"SELECT jo.horairesOuverture FROM JourOuverture jo WHERE jo.id = :paramId\";\n            Query queryHql = em.createQuery(hql);\n            queryHql.setParameter(\"paramId\", paramJourOuverture.getId());\n            paramJourOuverture.setHorairesOuverture(queryHql.getResultList());\n        } catch (Exception e) {\n            AnarmorixException exc = new AnarmorixException(\"\", AnarmorixExceptionEnum.MYSQL_HS);\n            throw exc;\n        }\n        return paramJourOuvertu"} {"path":"downloaded/TreeRenderers.java","method_name":"findById","content":"/**\n     * Returns the renderer descriptor registered by the given ID.\n     * Returns null if not found, or the id is null.\n     *\n     * @param id ID of the renderer to find\n     *\n     * @return The descriptor, or null\n     */\npublic static TreeRendererDescriptor findById(String id) {\n        synchronized (REGISTRY) {\n            return REGISTRY.get(id);\n        }\n    }"} {"path":"downloaded/TreeRenderers.java","method_name":"registeredRenderers","content":"/**\n     * Returns the set of renderers currently registered. Order is\n     * undefined.\n     */\npublic static Collection<TreeRendererDescriptor> registeredRenderers() {\n        return Collections.unmodifiableCollection(REGISTRY.values());\n    }"} {"path":"downloaded/TreeRenderers.java","method_name":"register","content":"/**\n     * Registers the given renderer. If registration succeeds (the ID\n     * is not already associated to a descriptor), the descriptor\n     * will be available with {@link #findById(String)}.\n     *\n     * @param descriptor Descriptor to register\n     *\n     * @return True if the registration succeeded, false if there was\n     *     already a registered renderer with the given ID.\n     */\npublic static boolean register(TreeRendererDescriptor descriptor) {\n        synchronized (REGISTRY) {\n            if (REGISTRY.containsKey(descriptor.id())) {\n                return false;\n            }\n            REGISTRY.put(descriptor.id(), descriptor);\n        }\n        return true;\n    }"} {"path":"downloaded/VoteManager.java","method_name":"castVote","content":"/**\n     * A wrapper around {@link #putEntry(Object)} to give a more meaningful name\n     * in context.\n     *\n     * @param entry the vote entry to put into the manager\n     * @return the response created as a result of the operation\n     * @see #putEntry(Object)\n     */\ndefault RESPONSE castVote(final ENTRY entry) {\n        return this.putEntry(entry);\n    }"} {"path":"downloaded/RelocateInput.java","method_name":"getOrder","content":"/**\n     * @return the order that this has created\n     */\npublic Order getOrder() {\n        return relocatingTo;\n    }"} {"path":"downloaded/RelocateInput.java","method_name":"isStillRelocating","content":"/**\n     * @return returns true if the prompt has not had its order submitted, otherwise false.\n     */\npublic boolean isStillRelocating() {\n        return isStillRelocating;\n    }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"build","content":"/**\n     * <p>Indicates whether the request is successful.</p>\n     */\npublic static ListTableThemeResponseBody build(java.util.Map<String, ?> map) throws Exception {\n        ListTableThemeResponseBody self = new ListTableThemeResponseBody();\n        return TeaModel.build(map, self);\n    }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"setData","content":"/**\n     * <p>Indicates whether the request is successful.</p>\n     */\npublic ListTableThemeResponseBody setData(ListTableThemeResponseBodyData data) {\n        this.data = data;\n        return this;\n    }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"getData","content":"/**\n     * <p>Indicates whether the request is successful.</p>\n     */\npublic ListTableThemeResponseBodyData getData() {\n        return this.data;\n    }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"setErrorCode","content":"/**\n     * <p>Indicates whether the request is successful.</p>\n     */\npublic ListTableThemeResponseBody setErrorCode(String errorCode) {\n        this.errorCode = errorCode;\n        return this;\n    }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"getErrorCode","content":"/**\n     * <p>Indicates whether the request is successful.</p>\n     */\npublic String getErrorCode() {\n        return this.errorCode;\n    }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"setErrorMessage","content":"/**\n     * <p>Indicates whether the request is successful.</p>\n     */\npublic ListTableThemeResponseBody setErrorMessage(String errorMessage) {\n        this.errorMessage = errorMessage;\n        return this;\n    }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"getErrorMessage","content":"/**\n     * <p>Indicates whether the request is successful.</p>\n     */\npublic String getErrorMessage() {\n        return this.errorMessage;\n    }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"setHttpStatusCode","content":"/**\n     * <p>Indicates whether the request is successful.</p>\n     */\npublic ListTableThemeResponseBody setHttpStatusCode(Integer httpStatusCode) {\n        this.httpStatusCode = httpStatusCode;\n        return this;\n    }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"getHttpStatusCode","content":"/**\n     * <p>Indicates whether the request is successful.</p>\n     */\npublic Integer getHttpStatusCode() {\n        return this.httpStatusCode;\n    }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"setRequestId","content":"/**\n     * <p>Indicates whether the request is successful.</p>\n     */\npublic ListTableThemeResponseBody setRequestId(String requestId) {\n        this.requestId = requestId;\n        return this;\n    }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"getRequestId","content":"/**\n     * <p>Indicates whether the request is successful.</p>\n     */\npublic String getRequestId() {\n        return this.requestId;\n    }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"setSuccess","content":"/**\n     * <p>Indicates whether the request is successful.</p>\n     */\npublic ListTableThemeResponseBody setSuccess(Boolean success) {\n        this.success = success;\n        return this;\n    }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"getSuccess","content":"/**\n     * <p>Indicates whether the request is successful.</p>\n     */\npublic Boolean getSuccess() {\n        return this.success;\n    }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"build","content":"/**\n         * <p>The ID of the table folder.</p>\n         */\npublic static ListTableThemeResponseBodyDataThemeList build(java.util.Map<String, ?> map) throws Exception {\n            ListTableThemeResponseBodyDataThemeList self = new ListTableThemeResponseBodyDataThemeList();\n            return TeaModel.build(map, self);\n        }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"setCreateTimeStamp","content":"/**\n         * <p>The ID of the table folder.</p>\n         */\npublic ListTableThemeResponseBodyDataThemeList setCreateTimeStamp(Long createTimeStamp) {\n            this.createTimeStamp = createTimeStamp;\n            return this;\n        }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"getCreateTimeStamp","content":"/**\n         * <p>The ID of the table folder.</p>\n         */\npublic Long getCreateTimeStamp() {\n            return this.createTimeStamp;\n        }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"setCreator","content":"/**\n         * <p>The ID of the table folder.</p>\n         */\npublic ListTableThemeResponseBodyDataThemeList setCreator(String creator) {\n            this.creator = creator;\n            return this;\n        }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"getCreator","content":"/**\n         * <p>The ID of the table folder.</p>\n         */\npublic String getCreator() {\n            return this.creator;\n        }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"setLevel","content":"/**\n         * <p>The ID of the table folder.</p>\n         */\npublic ListTableThemeResponseBodyDataThemeList setLevel(Integer level) {\n            this.level = level;\n            return this;\n        }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"getLevel","content":"/**\n         * <p>The ID of the table folder.</p>\n         */\npublic Integer getLevel() {\n            return this.level;\n        }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"setName","content":"/**\n         * <p>The ID of the table folder.</p>\n         */\npublic ListTableThemeResponseBodyDataThemeList setName(String name) {\n            this.name = name;\n            return this;\n        }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"getName","content":"/**\n         * <p>The ID of the table folder.</p>\n         */\npublic String getName() {\n            return this.name;\n        }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"setParentId","content":"/**\n         * <p>The ID of the table folder.</p>\n         */\npublic ListTableThemeResponseBodyDataThemeList setParentId(Long parentId) {\n            this.parentId = parentId;\n            return this;\n        }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"getParentId","content":"/**\n         * <p>The ID of the table folder.</p>\n         */\npublic Long getParentId() {\n            return this.parentId;\n        }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"setProjectId","content":"/**\n         * <p>The ID of the table folder.</p>\n         */\npublic ListTableThemeResponseBodyDataThemeList setProjectId(Long projectId) {\n            this.projectId = projectId;\n            return this;\n        }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"getProjectId","content":"/**\n         * <p>The ID of the table folder.</p>\n         */\npublic Long getProjectId() {\n            return this.projectId;\n        }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"setThemeId","content":"/**\n         * <p>The ID of the table folder.</p>\n         */\npublic ListTableThemeResponseBodyDataThemeList setThemeId(Long themeId) {\n            this.themeId = themeId;\n            return this;\n        }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"getThemeId","content":"/**\n         * <p>The ID of the table folder.</p>\n         */\npublic Long getThemeId() {\n            return this.themeId;\n        }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"build","content":"/**\n         * <p>The total number of table folders.</p>\n         */\npublic static ListTableThemeResponseBodyData build(java.util.Map<String, ?> map) throws Exception {\n            ListTableThemeResponseBodyData self = new ListTableThemeResponseBodyData();\n            return TeaModel.build(map, self);\n        }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"setThemeList","content":"/**\n         * <p>The total number of table folders.</p>\n         */\npublic ListTableThemeResponseBodyData setThemeList(java.util.List<ListTableThemeResponseBodyDataThemeList> themeList) {\n            this.themeList = themeList;\n            return this;\n        }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"getThemeList","content":"/**\n         * <p>The total number of table folders.</p>\n         */\npublic java.util.List<ListTableThemeResponseBodyDataThemeList> getThemeList() {\n            return this.themeList;\n        }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"setTotalCount","content":"/**\n         * <p>The total number of table folders.</p>\n         */\npublic ListTableThemeResponseBodyData setTotalCount(Long totalCount) {\n            this.totalCount = totalCount;\n            return this;\n        }"} {"path":"downloaded/ListTableThemeResponseBody.java","method_name":"getTotalCount","content":"/**\n         * <p>The total number of table folders.</p>\n         */\npublic Long getTotalCount() {\n            return this.totalCount;\n        }"} {"path":"downloaded/Provider.java","method_name":"onCreate","content":"/**\n     * Share the fields with AWARE so we can replicate the table schema on the server\n     */\n@Override\n    public boolean onCreate() {\n        //This is a hack to allow providers to be reusable in any application/plugin by making the authority dynamic using the package name of the parent app\n        AUTHORITY = getContext().getPackageName() + \".provider.sensory_wristband\"; //make sure xxx matches the first string in this class\n\n        sUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);\n\n        sUriMatcher.addURI(AUTHORITY, DATABASE_TABLES[0], TABLE_HEART_RATE_DIR);\n        sUriMatcher.addURI(AUTHORITY, DATABASE_TABLES[0] + \"/#\", TABLE_HEART_RATE_ITEM);\n        sUriMatcher.addURI(AUTHORITY, DATABASE_TABLES[1], TABLE_STEPS_DIR);\n        sUriMatcher.addURI(AUTHORITY, DATABASE_TABLES[1] + \"/#\", TABLE_STEPS_ITEM);\n\n        tableHeartRateHashMap = new HashMap<>();\n        tableHeartRateHashMap.put(TableHeartRate_Data._ID, TableHeartRate_Data._ID);\n        tableHeartRateHashMap.put(TableHeartRate_Data.TIMESTAMP, TableHeartRate_Data.TIMESTAMP);\n        tableHeartRateHashMap.put(TableHeartRate_Data.DEVICE_ID, TableHeartRate_Data.DEVICE_ID);\n        tableHeartRateHashMap.put(TableHeartRate_Data.HEART_RATE, TableHeartRate_Data.HEART_RATE);\n\n        tableStepsHashMap = new HashMap<>();\n        tableStepsHashMap.put(TableSteps_Data._ID, TableSteps_Data._ID);\n        tableStepsHashMap.put(TableSteps_Data.TIMESTAMP, TableSteps_Data.TIMESTAMP);\n        tableStepsHashMap.put(TableSteps_Data.DEVICE_ID, TableSteps_Data.DEVICE_ID);\n        tableStepsHashMap.put(TableSteps_Data.STEPS, TableSteps_Data.STEPS);\n        tableStepsHashMap.put(TableSteps_Data.DISTANCE, TableSteps_Data.DISTANCE);\n        tableStepsHashMap.put(TableSteps_Data.CALORIES, TableSteps_Data.CALORIES);\n\n        return true;\n    }"} {"path":"downloaded/Provider.java","method_name":"delete","content":"/**\n     * Share the fields with AWARE so we can replicate the table schema on the server\n     */\n@Override\n    public int delete(@NonNull Uri uri, String selection, String[] selectionArgs) {\n        initialiseDatabase();\n        database.beginTransaction();\n        int count;\n        switch (sUriMatcher.match(uri)) {\n            case TABLE_HEART_RATE_DIR:\n                count = database.delete(DATABASE_TABLES[0], selection, selectionArgs);\n                break;\n            case TABLE_STEPS_DIR:\n                count = database.delete(DATABASE_TABLES[1], selection, selectionArgs);\n                break;\n            default:\n                database.endTransaction();\n                throw new IllegalArgumentException(\"Unknown URI \" + uri);\n        }\n        database.setTransactionSuccessful();\n        database.endTransaction();\n        getContext().getContentResolver().notifyChange(uri, null);\n        return count;\n    }"} {"path":"downloaded/Provider.java","method_name":"insert","content":"/**\n     * Share the fields with AWARE so we can replicate the table schema on the server\n     */\n@Nullable\n    @Override\n    public Uri insert(@NonNull Uri uri, ContentValues initialValues) {\n        initialiseDatabase();\n        ContentValues values = (initialValues != null) ? new ContentValues(initialValues) : new ContentValues();\n        database.beginTransaction();\n        long _id;\n        switch (sUriMatcher.match(uri)) {\n            case TABLE_HEART_RATE_DIR:\n                _id = database.insert(DATABASE_TABLES[0], TableHeartRate_Data.DEVICE_ID, values);\n                database.setTransactionSuccessful();\n                database.endTransaction();\n                if (_id > 0) {\n                    Uri dataUri = ContentUris.withAppendedId(TableHeartRate_Data.CONTENT_URI, _id);\n                    getContext().getContentResolver().notifyChange(dataUri, null);\n                    return dataUri;\n                }\n                database.endTransaction();\n                throw new SQLException(\"Failed to insert row into \" + uri);\n            case TABLE_STEPS_DIR:\n                _id = database.insert(DATABASE_TABLES[1], TableSteps_Data.DEVICE_ID, values);\n                database.setTransactionSuccessful();\n                database.endTransaction();\n                if (_id > 0) {\n                    Uri dataUri = ContentUris.withAppendedId(TableSteps_Data.CONTENT_URI, _id);\n                    getContext().getContentResolver().notifyChange(dataUri, null);\n                    return dataUri;\n                }\n                database.endTransaction();\n                throw new SQLException(\"Failed to insert row into \" + uri);\n            default:\n                database.endTransaction();\n                throw new IllegalArgumentException(\"Unknown URI \" + uri);\n        }\n    }"} {"path":"downloaded/Provider.java","method_name":"query","content":"/**\n     * Share the fields with AWARE so we can replicate the table schema on the server\n     */\n@Nullable\n    @Override\n    public Cursor query(@NonNull Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {\n        initialiseDatabase();\n        SQLiteQueryBuilder qb = new SQLiteQueryBuilder();\n        switch (sUriMatcher.match(uri)) {\n            case TABLE_HEART_RATE_DIR:\n                qb.setTables(DATABASE_TABLES[0]);\n                qb.setProjectionMap(tableHeartRateHashMap);\n                break;\n            case TABLE_STEPS_DIR:\n                qb.setTables(DATABASE_TABLES[1]);\n                qb.setProjectionMap(tableStepsHashMap);\n            default:\n                throw new IllegalArgumentException(\"Unknown URI \" + uri);\n        }\n        try {\n            Cursor c = qb.query(database, projection, selection, selectionArgs,\n                    null, null, sortOrder);\n            c.setNotificationUri(getContext().getContentResolver(), uri);\n            return c;\n        } catch (IllegalStateException e) {\n            if (Aware.DEBUG)\n                Log.e(Aware.TAG, e.getMessage());\n            return null;\n        }\n    }"} {"path":"downloaded/Provider.java","method_name":"getType","content":"/**\n     * Share the fields with AWARE so we can replicate the table schema on the server\n     */\n@Nullable\n    @Override\n    public String getType(@NonNull Uri uri) {\n        switch (sUriMatcher.match(uri)) {\n            case TABLE_HEART_RATE_DIR:\n                return TableHeartRate_Data.CONTENT_TYPE;\n            case TABLE_HEART_RATE_ITEM:\n                return TableHeartRate_Data.CONTENT_ITEM_TYPE;\n            case TABLE_STEPS_DIR:\n                return TableSteps_Data.CONTENT_TYPE;\n            case TABLE_STEPS_ITEM:\n                return TableSteps_Data.CONTENT_ITEM_TYPE;\n            default:\n                throw new IllegalArgumentException(\"Unknown URI \" + uri);\n        }\n    }"} {"path":"downloaded/Provider.java","method_name":"update","content":"/**\n     * Share the fields with AWARE so we can replicate the table schema on the server\n     */\n@Override\n    public int update(@NonNull Uri uri, ContentValues values, String selection, String[] selectionArgs) {\n        initialiseDatabase();\n        database.beginTransaction();\n        int count;\n        switch (sUriMatcher.match(uri)) {\n            case TABLE_HEART_RATE_DIR:\n                count = database.update(DATABASE_TABLES[0], values, selection, selectionArgs);\n                break;\n            case TABLE_STEPS_DIR:\n                count = database.update(DATABASE_TABLES[1], values, selection, selectionArgs);\n                break;\n            default:\n                database.endTransaction();\n                throw new IllegalArgumentException(\"Unknown URI \" + uri);\n        }\n        database.setTransactionSuccessful();\n        database.endTransaction();\n        getContext().getContentResolver().notifyChange(uri, null);\n        return count;\n    }"} {"path":"downloaded/ShadowBluetoothGattServer.java","method_name":"sendResponse","content":"/**\n   * Send a response to a read or write request to a remote device.\n   *\n   * @param device The remote device to send this response to\n   * @param requestId The ID of the request that was received with the callback\n   * @param status The status of the request to be sent to the remote devices\n   * @param offset Value offset for partial read/write response\n   * @param value The value of the attribute that was read/written (optional)\n   */\n@Implementation\n  protected boolean sendResponse(\n      BluetoothDevice device, int requestId, int status, int offset, byte[] value) {\n    this.responses.add(value);\n    return this.bluetoothGattServerReflector.sendResponse(device, requestId, status, offset, value);\n  }"} {"path":"downloaded/ShadowBluetoothGattServer.java","method_name":"isConnectionCancelled","content":"/**\n   * Get whether the device's connection has been cancelled.\n   *\n   * @param device remote device\n   */\npublic boolean isConnectionCancelled(BluetoothDevice device) {\n    return this.cancelledDevices.contains(device);\n  }"} {"path":"downloaded/ShadowBluetoothGattServer.java","method_name":"isConnectedToDevice","content":"/**\n   * Returns true if the connection status of remote device is connected\n   *\n   * @param device remote device\n   */\npublic boolean isConnectedToDevice(BluetoothDevice device) {\n    return BluetoothConnectionManager.getInstance().hasGattServerConnection(device.getAddress());\n  }"} {"path":"downloaded/ShadowBluetoothGattServer.java","method_name":"getResponses","content":"/** Get a copy of the list of responses that have been sent. */\npublic List<byte[]> getResponses() {\n    List<byte[]> responsesCopy = new ArrayList<>();\n    for (byte[] response : this.responses) {\n      responsesCopy.add(response.clone());\n    }\n    return responsesCopy;\n  }"} {"path":"downloaded/ShadowBluetoothGattServer.java","method_name":"isClosed","content":"/** Get whether server has been closed. */\npublic boolean isClosed() {\n    return this.isClosed;\n  }"} {"path":"downloaded/ShadowBluetoothGattServer.java","method_name":"getGattServerCallback","content":"/** Get whether server has been closed. */\npublic BluetoothGattServerCallback getGattServerCallback() {\n    return this.callback;\n  }"} {"path":"downloaded/ShadowBluetoothGattServer.java","method_name":"getBluetoothConnectionManager","content":"/** Get whether server has been closed. */\npublic BluetoothConnectionManager getBluetoothConnectionManager() {\n    return BluetoothConnectionManager.getInstance();\n  }"} {"path":"downloaded/PerlinNoise2D.java","method_name":"perlinNoise","content":"/**\n\t * @param x x coordinaat\n\t * @param y y coordinaat\n\t * @param persistence - hoe \"grof\" de map is\n\t * @param zoomlevel - hoever de map ingezoomd is\n\t * @param numberOctaves - hoeveel detail er is\n\t * @return een float tussen -1 en 1\n\t */\npublic float perlinNoise(int x, int y, float persistence, float zoomlevel, int numberOctaves){\n\t\tfloat result = 0;\n\t\t\n\t\tfor(int i = 0; i < numberOctaves; i++){\n\t\t\tfloat frequency = (float) (1 << i);\n\t\t\tdouble amplitude = Math.pow(persistence, i);\n\t\t\t\n\t\t\tresult += interpolatedNoise(x / zoomlevel * frequency, y / zoomlevel * frequency) * amplitude;\n\t\t}\n\t\t\n\t\tif(result < -1.0f) result = -1.0f;\n\t\tif(result > 1.0f) result = 1.0f;\n\t\t\n\t\treturn result;\n\t}"} {"path":"downloaded/Storage.java","method_name":"getTopSwitch","content":"/**\n   * intakeSwitchSwitch getter method\n   */\npublic boolean getTopSwitch() {\n    return topSwitch.get();\n  }"} {"path":"downloaded/Storage.java","method_name":"isOverridden","content":"/**\n   * Whether or not the storage system is overriden either by the switch or human\n   * input.\n   */\npublic boolean isOverridden() {\n    return (isOverridden || topSwitch.get());\n  }"} {"path":"downloaded/SSReminderPrinter.java","method_name":"getTitle","content":"/**\n     * Gets the title file for this repport\n     *\n     * @return\n     */\npublic String getTitle() {\n        addParameter(\"title.number\"   , iBundle.getString(\"reminderreport.title.date\") );\n\n        return iBundle.getString(\"reminderreport.title\");\n    }"} {"path":"downloaded/SSReminderPrinter.java","method_name":"getModel","content":"/**\n     *\n     * @return\n     */\nprotected SSDefaultTableModel getModel() {\n        final SSPrinter iPrinter = new SSReminderPrinter.SSRowReport(  );\n\n        iPrinter.setBundle(iBundle);\n        iPrinter.setLocale(iLocale);\n        iPrinter.generateReport();\n\n        addParameter(\"subreport.report\"      , iPrinter.getReport());\n        addParameter(\"subreport.parameters\"  , iPrinter.getParameters() );\n        addParameter(\"subreport.datasource\"  , iPrinter.getDataSource() );\n\n        SSDefaultTableModel<SSInvoice> iModel = new SSDefaultTableModel<SSInvoice>(  ) {\n\n            public Class getType() {\n                return SSInvoice.class;\n            }\n\n            public Object getValueAt(int rowIndex, int columnIndex) {\n                iPrinter.getDataSource().reset();\n\n                return iPrinter.getDataSource();\n            }\n        };\n\n        iModel.addColumn(\"subreport.datasource\");\n\n        iModel.setObjects(iInvoices.get(0));\n\n        return iModel;\n    }"} {"path":"downloaded/SSReminderPrinter.java","method_name":"getNumDelayedDays","content":"/**\n     *\n     * @param iInvoice\n     * @return\n     */\nprivate static int getNumDelayedDays(SSInvoice iInvoice){\n        Date iDueDate = iInvoice.getDueDate();\n        Date iNowDate  = new Date();\n\n        if(iDueDate == null ) return 0;\n\n        Calendar iCalendar = Calendar.getInstance();\n\n        iCalendar.setTimeInMillis(  iNowDate.getTime() - iDueDate.getTime() );\n\n        int iYear = iCalendar.get(Calendar.YEAR       ) - 1970 ;\n        int iDay  = iCalendar.get(Calendar.DAY_OF_YEAR) ;\n\n        return iYear * iCalendar.getActualMaximum(Calendar.DAY_OF_YEAR) + iDay;\n    }"} {"path":"downloaded/SSReminderPrinter.java","method_name":"getModel","content":"/**\n         * Gets the data model for this report\n         *\n         * @return SSDefaultTableModel\n         */\nprotected SSDefaultTableModel getModel() {\n            SSDefaultTableModel<SSInvoice> iModel = new SSDefaultTableModel<SSInvoice>(  ) {\n\n                public Class getType() {\n                    return SSSaleRow.class;\n                }\n\n                public Object getValueAt(int rowIndex, int columnIndex) {\n                    Object value = null;\n\n                    SSInvoice iInvoice = getObject(rowIndex);\n\n                    switch (columnIndex) {\n                        case 0  :\n                            if(iInvoice.getOCRNumber() != null){\n                                value =  iInvoice.getOCRNumber();\n                            } else {\n                                value = iInvoice.getNumber().toString();\n                            }\n                            break;\n                        case 1:\n                            value = iInvoice.getDate();\n                            break;\n                        case 2:\n                            value = iInvoice.getDueDate();\n                            break;\n                        case 3:\n                            value = getNumDelayedDays(iInvoice);\n                            break;\n                        case 4:\n                            value = iInvoice.getNumReminders() + 1;\n                            break;\n                        case 5:\n                            value = SSInvoiceMath.getSaldo(iInvoice.getNumber());\n                            break;\n                        case 6:\n                            value = iInvoice.getDelayInterest() ;\n                            break;\n                        case 7:\n                            value = SSInvoiceMath.getInterestSum(iInvoice, SSInvoiceMath.getSaldo(iInvoice.getNumber()), getNumDelayedDays(iInvoice));\n                            break;\n                    }\n\n                    return value;\n                }\n            };\n\n\n            iModel.addColumn(\"invoice.number\");\n            iModel.addColumn(\"invoice.date\");\n            iModel.addColumn(\"invoice.duedate\");\n            iModel.addColumn(\"invoice.duedays\");\n            iModel.addColumn(\"invoice.numreminders\");\n            iModel.addColumn(\"invoice.saldo\");\n            iModel.addColumn(\"invoice.delayinterest\");\n            iModel.addColumn(\"invoice.delayfee\");\n\n\n            iModel.setObjects(iInvoices);\n\n            return iModel;\n        }"} {"path":"downloaded/SSReminderPrinter.java","method_name":"getTitle","content":"/**\n         * Gets the title for this report\n         *\n         * @return The title\n         */\npublic String getTitle() {\n            return null;\n        }"} {"path":"downloaded/Grazer.java","method_name":"customizedCellBehaviors","content":"/**\n\t * Customized Grazer behavior. Grazers can grow up to a maximum and starve down\n\t * to a minimum size, depending on available energy.\n\t * \n\t * @see Cell#customizedCellBehaviors(ArrayList, ArrayList)\n\t */\n@Override\n\tpublic ArrayList<Cell> customizedCellBehaviors(ArrayList<Cell> visibleCells, ArrayList<Cell> touchedCells) {\n\t\tif (energy > 75 && mass < 125) {\n\t\t\tmass+= 10;\n\t\t\tenergy -= 4;\n\t\t\tif (!SUPPRESS_EVENT_PRINTING)\n\t\t\t\tSystem.out.println(this + \" grew one size.\");\n\t\t} else if (energy < 25 && mass > 45) {\n\t\t\tmass -= 10;\n\t\t\tenergy += 3;\n\t\t\tif (!SUPPRESS_EVENT_PRINTING)\n\t\t\t\tSystem.out.println(this + \" is starving!\");\n\t\t}\n\n\t\treturn super.customizedCellBehaviors(visibleCells, touchedCells); // squish() and starvation check\n\n\t}"} {"path":"downloaded/Grazer.java","method_name":"behaviorClone","content":"/**\n\t * Grazers spend 20 energy to divide.\n\t * \n\t * @see avorontsov.cells.Cell#behaviorClone()\n\t */\n@Override\n\tpublic ArrayList<Cell> behaviorClone() {\n\t\tenergy = (energy-20)/2;\n\t\tmass = mass/2;\n\t\tArrayList<Cell> newCell = new ArrayList<Cell>();\n\t\tnewCell.add(new Grazer(petri, rng, x, y, xVelocity, yVelocity, mass, energy));\n\t\treturn newCell;\n\t}"} {"path":"downloaded/15_e610ee817c562ef4e20a6edcbd1dfb0adc872fc3_FileSpecification_t.java","method_name":"getRootDir","content":"/**\n \t * Gets the rootDir.\n \t *\n \t * @return Returns a File\n \t */\npublic File getRootDir() {\n \t\treturn rootDir;\n \t}"} {"path":"downloaded/15_e610ee817c562ef4e20a6edcbd1dfb0adc872fc3_FileSpecification_t.java","method_name":"compare","content":"/**\n \t * Gets the rootDir.\n \t *\n \t * @return Returns a File\n \t */\npublic static int compare(String p1, String c1, String v1, String p2, String c2, String v2) {\n \t\tif (p1 == null && p2 != null) {\n \t\t\treturn 1;\n \t\t}\n \t\tif (p2 == null && p1 != null) {\n \t\t\treturn -1;\n \t\t}\n \n \t\tif (p1 != null) // then p2 isn't either\n \t\t{\n \t\t\t// If packages are different, return\n \t\t\tint pc = p1.compareToIgnoreCase(p2);\n \n \t\t\tif (pc != 0) {\n \t\t\t\treturn pc;\n \t\t\t}\n \t\t}\n \n \t\t// Ok, same package... compare class:\n \t\tint cc = c1.compareToIgnoreCase(c2);\n \n \t\tif (cc != 0) {\n \t\t\t// Different classes, return\n \t\t\treturn cc;\n \t\t}\n \n \t\t// Ok, same robot... compare version\n \t\tif (v1 == null && v2 == null) {\n \t\t\treturn 0;\n \t\t}\n \t\tif (v1 == null) {\n \t\t\treturn 1;\n \t\t}\n \t\tif (v2 == null) {\n \t\t\treturn -1;\n \t\t}\n \n \t\tif (v1.equals(v2)) {\n \t\t\treturn 0;\n \t\t}\n \n \t\tif (v1.indexOf(\".\") < 0 || v2.indexOf(\".\") < 0) {\n \t\t\treturn v1.compareToIgnoreCase(v2);\n \t\t}\n \n \t\t// Dot separated versions.\n \t\tStringTokenizer s1 = new StringTokenizer(v1, \".\");\n \t\tStringTokenizer s2 = new StringTokenizer(v2, \".\");\n \n \t\twhile (s1.hasMoreTokens() && s2.hasMoreTokens()) {\n \t\t\tString tok1 = s1.nextToken();\n \t\t\tString tok2 = s2.nextToken();\n \n \t\t\ttry {\n \t\t\t\tint i1 = Integer.parseInt(tok1);\n \t\t\t\tint i2 = Integer.parseInt(tok2);\n \n \t\t\t\tif (i1 != i2) {\n \t\t\t\t\treturn i1 - i2;\n \t\t\t\t}\n \t\t\t} catch (NumberFormatException e) {\n \t\t\t\tint tc = tok1.compareToIgnoreCase(tok2);\n \n \t\t\t\tif (tc != 0) {\n \t\t\t\t\treturn tc;\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tif (s1.hasMoreTokens()) {\n \t\t\treturn 1;\n \t\t}\n \t\tif (s2.hasMoreTokens()) {\n \t\t\treturn -1;\n \t\t}\n \t\treturn 0;\n \t}"} {"path":"downloaded/15_e610ee817c562ef4e20a6edcbd1dfb0adc872fc3_FileSpecification_t.java","method_name":"createRobotSpecification","content":"/**\n \t * Gets the rootDir.\n \t *\n \t * @return Returns a File\n \t */\npublic RobotSpecification createRobotSpecification() {\n \t\treturn HiddenAccess.createSpecification(this, getName(), getAuthorName(),\n \t\t\t\t(getWebpage() != null) ? getWebpage().toString() : null, getVersion(), getRobocodeVersion(),\n \t\t\t\t(getJarFile() != null) ? getJarFile().toString() : null, getName(), getDescription());\n \t}"} {"path":"downloaded/RequestStatus.java","method_name":"getStatusCode","content":"/**\n\t * Returns the String i.e. associated GOOGLE Places API Status \n\t * @param statusValue\n\t * @return\n\t */\npublic static int getStatusCode(String statusValue) {\n\t\tif (statusValue.equals(STATUS_OK)) {\n\t\t\treturn OK;\n\t\t} else if (statusValue.equals(STATUS_ZERO_RESULTS)) {\n\t\t\treturn ZERO_RESULTS;\n\t\t} else if (statusValue.equals(STATUS_OVER_QUERY_LIMIT)) {\n\t\t\treturn OVER_QUERY_LIMIT;\n\t\t} else if (statusValue.equals(STATUS_REQUEST_DENIED)) {\n\t\t\treturn REQUEST_DENIED;\n\t\t} else if (statusValue.equals(STATUS_INVALID_REQUEST)) {\n\t\t\treturn INVALID_REQUEST;\n\t\t} else if (statusValue.equals(STATUS_UNKNOWN_ERROR)) {\n\t\t\treturn UNKNOWN_ERROR;\n\t\t} else if (statusValue.equals(STATUS_NOT_FOUND)) {\n\t\t\treturn NOT_FOUND;\n\t\t} else {\n\t\t\treturn ERROR;\n\t\t}\n\t}"} {"path":"downloaded/RequestStatus.java","method_name":"getStatusValue","content":"/**\n\t * Returns the code associated with Google places API status code\n\t * @param statusCode\n\t * @return\n\t */\npublic static String getStatusValue (int statusCode) {\n\t\tif (statusCode == OK ) {\n\t\t\treturn STATUS_OK;\n\t\t} else if (statusCode == ZERO_RESULTS) {\n\t\t\treturn STATUS_ZERO_RESULTS;\n\t\t} else if (statusCode == OVER_QUERY_LIMIT) {\n\t\t\treturn STATUS_OVER_QUERY_LIMIT;\n\t\t} else if (statusCode == REQUEST_DENIED) {\n\t\t\treturn STATUS_REQUEST_DENIED;\n\t\t} else if (statusCode == INVALID_REQUEST) {\n\t\t\treturn STATUS_INVALID_REQUEST;\n\t\t} else if (statusCode == UNKNOWN_ERROR) {\n\t\t\treturn STATUS_UNKNOWN_ERROR;\n\t\t} else if (statusCode == NOT_FOUND) {\n\t\t\treturn STATUS_NOT_FOUND;\n\t\t} else if (statusCode == ERROR) {\n\t\t\treturn STATUS_ERROR;\n\t\t}\n\t\treturn STATUS_ERROR;\n\t}"} {"path":"downloaded/ActionReactionImpl.java","method_name":"eStaticClass","content":"/**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n@Override\n  protected EClass eStaticClass()\n  {\n    return AssessPackage.Literals.ACTION_REACTION;\n  }"} {"path":"downloaded/ActionReactionImpl.java","method_name":"getUpdateScore","content":"/**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\npublic UpdateScore getUpdateScore()\n  {\n    return updateScore;\n  }"} {"path":"downloaded/ActionReactionImpl.java","method_name":"basicSetUpdateScore","content":"/**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\npublic NotificationChain basicSetUpdateScore(UpdateScore newUpdateScore, NotificationChain msgs)\n  {\n    UpdateScore oldUpdateScore = updateScore;\n    updateScore = newUpdateScore;\n    if (eNotificationRequired())\n    {\n      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AssessPackage.ACTION_REACTION__UPDATE_SCORE, oldUpdateScore, newUpdateScore);\n      if (msgs == null) msgs = notification; else msgs.add(notification);\n    }\n    return msgs;\n  }"} {"path":"downloaded/ActionReactionImpl.java","method_name":"getTriggerFeedback","content":"/**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\npublic TriggerFeedback getTriggerFeedback()\n  {\n    return triggerFeedback;\n  }"} {"path":"downloaded/ActionReactionImpl.java","method_name":"basicSetTriggerFeedback","content":"/**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\npublic NotificationChain basicSetTriggerFeedback(TriggerFeedback newTriggerFeedback, NotificationChain msgs)\n  {\n    TriggerFeedback oldTriggerFeedback = triggerFeedback;\n    triggerFeedback = newTriggerFeedback;\n    if (eNotificationRequired())\n    {\n      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AssessPackage.ACTION_REACTION__TRIGGER_FEEDBACK, oldTriggerFeedback, newTriggerFeedback);\n      if (msgs == null) msgs = notification; else msgs.add(notification);\n    }\n    return msgs;\n  }"} {"path":"downloaded/ActionReactionImpl.java","method_name":"eInverseRemove","content":"/**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n@Override\n  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)\n  {\n    switch (featureID)\n    {\n      case AssessPackage.ACTION_REACTION__UPDATE_SCORE:\n        return basicSetUpdateScore(null, msgs);\n      case AssessPackage.ACTION_REACTION__TRIGGER_FEEDBACK:\n        return basicSetTriggerFeedback(null, msgs);\n    }\n    return super.eInverseRemove(otherEnd, featureID, msgs);\n  }"} {"path":"downloaded/ActionReactionImpl.java","method_name":"eGet","content":"/**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n@Override\n  public Object eGet(int featureID, boolean resolve, boolean coreType)\n  {\n    switch (featureID)\n    {\n      case AssessPackage.ACTION_REACTION__UPDATE_SCORE:\n        return getUpdateScore();\n      case AssessPackage.ACTION_REACTION__TRIGGER_FEEDBACK:\n        return getTriggerFeedback();\n    }\n    return super.eGet(featureID, resolve, coreType);\n  }"} {"path":"downloaded/ActionReactionImpl.java","method_name":"eSet","content":"/**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n@Override\n  public void eSet(int featureID, Object newValue)\n  {\n    switch (featureID)\n    {\n      case AssessPackage.ACTION_REACTION__UPDATE_SCORE:\n        setUpdateScore((UpdateScore)newValue);\n        return;\n      case AssessPackage.ACTION_REACTION__TRIGGER_FEEDBACK:\n        setTriggerFeedback((TriggerFeedback)newValue);\n        return;\n    }\n    super.eSet(featureID, newValue);\n  }"} {"path":"downloaded/ActionReactionImpl.java","method_name":"eUnset","content":"/**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n@Override\n  public void eUnset(int featureID)\n  {\n    switch (featureID)\n    {\n      case AssessPackage.ACTION_REACTION__UPDATE_SCORE:\n        setUpdateScore((UpdateScore)null);\n        return;\n      case AssessPackage.ACTION_REACTION__TRIGGER_FEEDBACK:\n        setTriggerFeedback((TriggerFeedback)null);\n        return;\n    }\n    super.eUnset(featureID);\n  }"} {"path":"downloaded/ActionReactionImpl.java","method_name":"eIsSet","content":"/**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n@Override\n  public boolean eIsSet(int featureID)\n  {\n    switch (featureID)\n    {\n      case AssessPackage.ACTION_REACTION__UPDATE_SCORE:\n        return updateScore != null;\n      case AssessPackage.ACTION_REACTION__TRIGGER_FEEDBACK:\n        return triggerFeedback != null;\n    }\n    return super.eIsSet(featureID);\n  }"} {"path":"downloaded/YahooSearchEngine.java","method_name":"getTotalResultsAvailable","content":"/**\n\t * \n\t * @param query : String for query \n\t * @param limit : Max result from User\n\t * @throws SearchException\n\t * @throws IOException\n\t */\npublic int getTotalResultsAvailable() {\n\t\tint total = 0;\n\t\tif (results != null) {\n\t\t\tBigInteger count = results.getTotalResultsAvailable();\n\t\t\ttotal = count.intValue();\n\t\t}\n\t\treturn total;\n\t}"} {"path":"downloaded/YahooSearchEngine.java","method_name":"getTitles","content":"/**\n\t * \n\t * @param query : String for query \n\t * @param limit : Max result from User\n\t * @throws SearchException\n\t * @throws IOException\n\t */\npublic String[] getTitles() {\n\t\tif (results == null)\n\t\t\treturn null;\n\t\tWebSearchResult[] resultsArray = results.listResults();\n\t\tString[] titles = new String[resultsArray.length];\n\t\tfor (int i = 0; i < titles.length; i++) {\n\t\t\ttitles[i] = resultsArray[i].getTitle();\n\t\t}\n\t\treturn titles;\n\t}"} {"path":"downloaded/YahooSearchEngine.java","method_name":"getUrls","content":"/**\n\t * \n\t * @param query : String for query \n\t * @param limit : Max result from User\n\t * @throws SearchException\n\t * @throws IOException\n\t */\npublic String[] getUrls() {\n\t\tif (results == null)\n\t\t\treturn null;\n\t\tWebSearchResult[] resultsArray = results.listResults();\n\t\tString[] urls = new String[resultsArray.length];\n\t\tfor (int i = 0; i < urls.length; i++) {\n\t\t\turls[i] = resultsArray[i].getUrl();\n\t\t}\n\t\treturn urls;\n\t}"} {"path":"downloaded/YahooSearchEngine.java","method_name":"getSummaries","content":"/**\n\t * \n\t * @param query : String for query \n\t * @param limit : Max result from User\n\t * @throws SearchException\n\t * @throws IOException\n\t */\npublic String[] getSummaries() {\n\t\tif (results == null)\n\t\t\treturn null;\n\t\tWebSearchResult[] resultsArray = results.listResults();\n\t\tString[] summaries = new String[resultsArray.length];\n\t\tfor (int i = 0; i < summaries.length; i++) {\n\t\t\tsummaries[i] = resultsArray[i].getSummary();\n\t\t}\n\t\treturn summaries;\n\t}"} {"path":"downloaded/YahooSearchEngine.java","method_name":"getResultsArray","content":"/**\n\t * \n\t * @param query : String for query \n\t * @param limit : Max result from User\n\t * @throws SearchException\n\t * @throws IOException\n\t */\npublic WebSearchResult[] getResultsArray() {\n\t\tif (results == null)\n\t\t\treturn null;\n\t\treturn results.listResults();\n\t}"} {"path":"downloaded/YahooSearchEngine.java","method_name":"getQuery","content":"/**\n\t * \n\t * @param query : String for query \n\t * @param limit : Max result from User\n\t * @throws SearchException\n\t * @throws IOException\n\t */\npublic String getQuery() {\n\t\treturn query;\n\t}"} {"path":"downloaded/YahooSearchEngine.java","method_name":"getLimit","content":"/**\n\t * \n\t * @param query : String for query \n\t * @param limit : Max result from User\n\t * @throws SearchException\n\t * @throws IOException\n\t */\npublic int getLimit() {\n\t\treturn limit;\n\t}"} {"path":"downloaded/ChartTemplate.java","method_name":"getTitle","content":"/**\n\t * \n\t * @return \n\t */\npublic String getTitle() {\n\t \t return title; \n\t}"} {"path":"downloaded/ChartTemplate.java","method_name":"getShowLegend","content":"/**\n\t * Getter of showLegend\n\t */\npublic boolean getShowLegend() {\n\t \t return showLegend; \n\t}"} {"path":"downloaded/ChartTemplate.java","method_name":"isShowLegend","content":"/**\n\t * \n\t * @return \n\t */\npublic boolean isShowLegend() { \n\t\treturn showLegend;\n\t}"} {"path":"downloaded/ChartTemplate.java","method_name":"equals","content":"/**\n\t * {@inheritDoc}\n\t */\npublic boolean equals(Object ref){\n\t\t\n\t\tif(!super.equals(ref)){\n\t\t\treturn false;\n\t\t}\n\t\tChartTemplate testRef = (ChartTemplate)ref;\n\t\t\n\t\tEqualsBuilder eb = new EqualsBuilder();\n\t\t\n\t\teb.append(title, testRef.title)\n\t\t  .append(showLegend, testRef.showLegend);\n\t\t\n\t\treturn eb.isEquals();\n\t}"} {"path":"downloaded/ChartTemplate.java","method_name":"hashCode","content":"/**\n\t * {@inheritDoc}\n\t */\npublic int hashCode(){\n\t\tHashCodeBuilder hcb = new HashCodeBuilder(INITIAL_HASH, PRIME_HASH_MULTIPLIER); \n\t\t\n\t\thcb.appendSuper(super.hashCode())\n\t\t   .append(showLegend)\n\t\t   .append(title);\n\t\t\n\t\treturn hcb.toHashCode();\n\t}"} {"path":"downloaded/EventSubscriptionService.java","method_name":"n toEventSubscripti","content":"\n\t/**\n\t * To eventSubscription\n\t * \n\t * @param connection\n\t * @return\n\t \n\n\tprivate EventSubscription toEventSubscription(Connection connection) throws DataAccessException {\n\t\tEventSubscription eventSubscription = new EventSubscription();\n\t\teventSubscription.id(connection.getCurrentRowLong(\"id\")).created(connection.getCurrentRowDateTime(\"created\"))\n\t\t\t\t.deleted(connection.getCurrentRowString(\"deleted\"));\n\t\teventSubscription.email(EventPriorityType.fromString(connection.getCurrentRowString(\"email\")))\n\t\t\t\t.notificationCenter(EventPriorityType.fromString(connection.getCurrentRowString(\"notificationcenter\")))\n\t\t\t\t.push(EventPriorityType.fromString(connection.getCurrentRowString(\"push\")))\n\t\t\t\t.text(EventPriorityType.fromString(connection.getCurrentRowString(\"text\")));\n\n\t\tLong eventId = connection.getCurrentRowLong(\"eventid\");\n\t\tif (eventId != null) {\n\t\t\t(eventSubscription.event = new Event()).id(eventId);\n\t\t}\n\n\t\tLong userId = connection.getCurrentRowLong(\"eavesdroppingid\");\n\t\tif (userId != null) {\n\t\t\t(eventSubscription.eavesDropping = new User()).id(userId);\n\t\t}\n\n\t\tuserId = connection.getCurrentRowLong(\"userid\");\n\t\tif (userId != null) {\n\t\t\t(eventSubscription.user = new User()).id(userId);\n\t\t}\n\n\t\treturn eventSubscription;\n"} {"path":"downloaded/33_a020193ee554200ba4ee2ed70e18b4dd7426e022_NodeSupervisorImpl_t.java","method_name":"n getShowNod","content":"  /**\n      * Returns true if the nodes must be displayed in the preview.\n      *\n      * @return true if the nodes must be displayed in the preview\n      \n  public Boolean getShowNodes() {\n         return showNodes;\n    "} {"path":"downloaded/33_a020193ee554200ba4ee2ed70e18b4dd7426e022_NodeSupervisorImpl_t.java","method_name":"t getNodeBorderWid","content":"  /**\n      * Returns the node border width.\n      *\n      * @return the node border width\n      \n  public Float getNodeBorderWidth() {\n         return nodeBorderWidth;\n    "} {"path":"downloaded/33_a020193ee554200ba4ee2ed70e18b4dd7426e022_NodeSupervisorImpl_t.java","method_name":"r getNodeColoriz","content":"  /**\n      * Returns the node colorizer.\n      *\n      * @return the node colorizer\n      \n  public NodeColorizer getNodeColorizer() {\n         return nodeColorizer;\n    "} {"path":"downloaded/33_a020193ee554200ba4ee2ed70e18b4dd7426e022_NodeSupervisorImpl_t.java","method_name":"r getNodeBorderColoriz","content":"  /**\n      * Returns the node border colorizer.\n      *\n      * @return the node border colorizer\n      \n  public GenericColorizer getNodeBorderColorizer() {\n         return nodeBorderColorizer;\n    "} {"path":"downloaded/33_a020193ee554200ba4ee2ed70e18b4dd7426e022_NodeSupervisorImpl_t.java","method_name":"n getShowNodeLabe","content":"  /**\n      * Returns true if the node labels must be displayed in the preview.\n      *\n      * @return true if the node labels must be displayed in the preview\n      \n  public Boolean getShowNodeLabels() {\n         return showNodeLabels;\n    "} {"path":"downloaded/33_a020193ee554200ba4ee2ed70e18b4dd7426e022_NodeSupervisorImpl_t.java","method_name":"t getNodeLabelFo","content":"  /**\n      * Returns the node label font.\n      *\n      * @return the node label font\n      \n  public Font getNodeLabelFont() {\n         return nodeLabelfont;\n    "} {"path":"downloaded/33_a020193ee554200ba4ee2ed70e18b4dd7426e022_NodeSupervisorImpl_t.java","method_name":"r getNodeLabelMaxCh","content":"  /**\n      * Returns the node label character limit.\n      *\n      * @return the node label character limit\n      \n  public Integer getNodeLabelMaxChar() {\n         return nodeLabelMaxChar;\n    "} {"path":"downloaded/33_a020193ee554200ba4ee2ed70e18b4dd7426e022_NodeSupervisorImpl_t.java","method_name":"r getNodeLabelColoriz","content":"  /**\n      * Returns the node label colorizer.\n      *\n      * @return the node label colorizer\n      \n  public NodeChildColorizer getNodeLabelColorizer() {\n         return nodeLabelColorizer;\n    "} {"path":"downloaded/33_a020193ee554200ba4ee2ed70e18b4dd7426e022_NodeSupervisorImpl_t.java","method_name":"n getShowNodeLabelBorde","content":"  /**\n      * Returns true if the node label borders must be displayed in the preview.\n      *\n      * @return true if the node label borders must be displayed in the preview\n      \n  public Boolean getShowNodeLabelBorders() {\n         return showNodeLabelBorders;\n    "} {"path":"downloaded/33_a020193ee554200ba4ee2ed70e18b4dd7426e022_NodeSupervisorImpl_t.java","method_name":"r getNodeLabelBorderColoriz","content":"  /**\n      * Returns the node label border colorizer.\n      *\n      * @return the node label border colorizer\n      \n  public NodeChildColorizer getNodeLabelBorderColorizer() {\n         return nodeLabelBorderColorizer;\n    "} {"path":"downloaded/ControleurPrincipal.java","method_name":"ng getTexteAffic","content":"\t/**\n\t * Permet d'obtenir le texte issu d'un fichier texte transposé au format HTML\n\t * @return Une String comportant le texte issu d'un fichier texte transposé au format HTML\n\t\n/\n\tpublic String getTexteAfficher() {\n\t\t// TODO Auto-generated method stub\n\t\ttexteNonModifie=Importer.importerTexte(\"textes/texteTest.txt\");\n\t\t//RegExp=Importer.importerTexte(\"textes/texteTest.regexp\");\n\t\t//texteModifie=AjoutCouleur.ajouterCouleur(texteNonModifie, RegExp);\n\t\t//System.out.println(\"cc\");\n\t\t//System.out.println(texteModifie);\n\t\ttexteAffiche=(\"<html>\"+texteNonModifie+\"</html>\").replaceAll(\"\\n\", \"<br/>\");\n\t\t//System.out.println(texteAffiche);\n\t\t\n\t\treturn texteAffiche;"} {"path":"downloaded/ItemActionPacket.java","method_name":"firstClick","content":"/**\n\t * Handles the first slot of an item action.\n\t * @param player the player to handle this for.\n\t * @param buf the buffer for reading the sent data.\n\t */\nprivate void firstClick(Player player, ByteBuf buf) {\n\t\tint container = buf.getShort(true, ByteTransform.A, ByteOrder.LITTLE);\n\t\tint slot = buf.getShort(false, ByteTransform.A);\n\t\tint id = buf.getShort(false, ByteOrder.LITTLE);\n\t\tif(Arrav.DEBUG) {\n\t\t\tplayer.message(\"Item action: First click, ID: \" + id);\n\t\t}\n\t\tif(slot < 0 || container < 0 || id < 0 || id > ItemDefinition.DEFINITIONS.length)\n\t\t\treturn;\n\t\tItem item = player.getInventory().get(slot);\n\t\tif(item == null || item.getId() != id) {\n\t\t\treturn;\n\t\t}\n\t\tplayer.getCombat().reset(false, false);\n\t\tItemAction e = ITEM_ACTION.get(item.getId());\n\t\tif(e != null)\n\t\t\te.click(player, item, container, slot, 1);\n\t\tswitch(id) {\n\t\t}\n\t}"} {"path":"downloaded/ItemActionPacket.java","method_name":"secondClick","content":"/**\n\t * Handles the third slot of an item action.\n\t * @param player the player to handle this for.\n\t * @param buf the buffer for reading the sent data.\n\t */\nprivate void secondClick(Player player, ByteBuf buf) {\n\t\tint container = buf.getShort(true, ByteTransform.A);\n\t\tint slot = buf.getShort(true, ByteOrder.LITTLE);\n\t\tint id = buf.getShort(true, ByteTransform.A);\n\t\tif(Arrav.DEBUG) {\n\t\t\tplayer.message(\"Item action: second click, ID: \" + id);\n\t\t}\n\t\tif(slot < 0 || container < 0 || id < 0 || id > ItemDefinition.DEFINITIONS.length) {\n\t\t\treturn;\n\t\t}\n\t\tItem item = player.getInventory().get(slot);\n\t\tif(item == null || item.getId() != id) {\n\t\t\treturn;\n\t\t}\n\t\tplayer.getCombat().reset(false, false);\n\t\tItemAction e = ITEM_ACTION.get(item.getId());\n\t\tif(e != null)\n\t\t\te.click(player, item, container, slot, 3);\n\t\tswitch(id) {\n\t\t\tcase 5509:\n\t\t\t\tRunecrafting.empty(player, PouchType.SMALL);\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 5510:\n\t\t\t\tRunecrafting.empty(player, PouchType.MEDIUM);\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 5512:\n\t\t\t\tRunecrafting.empty(player, PouchType.LARGE);\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 5514:\n\t\t\t\tRunecrafting.empty(player, PouchType.GIANT);\n\t\t\t\tbreak;\n\t\t}\n\t}"} {"path":"downloaded/ItemActionPacket.java","method_name":"thirdClick","content":"/**\n\t * Handles the third slot of an item action.\n\t * @param player the player to handle this for.\n\t * @param buf the buffer for reading the sent data.\n\t */\nprivate void thirdClick(Player player, ByteBuf buf) {\n\t\tint container = buf.getShort(true, ByteTransform.A);\n\t\tint slot = buf.getShort(true, ByteOrder.LITTLE);\n\t\tint id = buf.getShort(true, ByteTransform.A);\n\t\tif(Arrav.DEBUG) {\n\t\t\tplayer.message(\"Item action: third click, ID: \" + id);\n\t\t}\n\t\tif(slot < 0 || container < 0 || id < 0 || id > ItemDefinition.DEFINITIONS.length) {\n\t\t\treturn;\n\t\t}\n\t\tItem item = player.getInventory().get(slot);\n\t\tif(item == null || item.getId() != id) {\n\t\t\treturn;\n\t\t}\n\t\tplayer.getCombat().reset(false, false);\n\t\tItemAction e = ITEM_ACTION.get(item.getId());\n\t\tif(e != null)\n\t\t\te.click(player, item, container, slot, 3);\n\t\tif(item.getDefinition().getName().contains(\"Black mask\")) {\n\t\t\tplayer.getInventory().replace(item.getId(), 8921, true);//black mask discharge\n\t\t}\n\t\tswitch(item.getId()) {\n\t\t\tcase 5509:\n\t\t\t\tRunecrafting.examine(player, PouchType.SMALL);\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 5510:\n\t\t\t\tRunecrafting.examine(player, PouchType.MEDIUM);\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 5512:\n\t\t\t\tRunecrafting.examine(player, PouchType.LARGE);\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 5514:\n\t\t\t\tRunecrafting.examine(player, PouchType.GIANT);\n\t\t\t\tbreak;\n\t\t}\n\t}"} {"path":"downloaded/AudioVideoInfo.java","method_name":"�式\n\t */\n\tprot","content":"/**\n\t * 音频比�\n*\n\t * 文件格式\n\t */\n\tprotected String fileFormat;\n\n\tpubl"} {"path":"downloaded/AudioVideoInfo.java","method_name":"\n\t\tthis.audioBitrate","content":"/**\n\t * 音频比�\ndioBitrate)\n\t{\n\t\tthis.audioBitrate = audioBitrate;\n\t}\n\n\tpublic Number "} {"path":"downloaded/AudioVideoInfo.java","method_name":"dioSamplingRate","content":"/**\n\t * 音频比�\n)\n\t{\n\t\tthis.audioSamplingRate = audioSamplingRate;\n\t}\n\n\tpubl"} {"path":"downloaded/AudioVideoInfo.java","method_name":"\n\t\tthis.videoBitr","content":"/**\n\t * 音频比�\ndeoBitrate)\n\t{\n\t\tthis.videoBitrate = videoBitrate;\n\t}\n\n\tpublic N"} {"path":"downloaded/AudioVideoInfo.java","method_name":"his.videoFrameRat","content":"/**\n\t * 音频比�\nmeRate)\n\t{\n\t\tthis.videoFrameRate = videoFrameRate;\n\t}\n\n\tpublic S"} {"path":"downloaded/AudioVideoInfo.java","method_name":"his.videoFram","content":"/**\n\t * 音频比�\nmeSize)\n\t{\n\t\tthis.videoFrameSize = videoFrameSize;\n\t}\n\n\t"} {"path":"downloaded/AudioVideoInfo.java","method_name":".fileFor","content":"/**\n\t * 音频比�\ning fileFormat)\n\t{\n\t\tthis.fileFormat = fileFormat;\n\t}\n\n\t@Override\n\tpublic String toString()\n\t{\n\t\treturn \"AudioVideoInfo [audioBitrate=\" + audioBitrate + \", audioSamplingRate=\" + audioSamplingRate\n\t\t        + \", videoBitrate=\" + videoBitrate + \", videoFrameRate=\" + videoFrameRate + \", videoFrameSize=\"\n\t\t        +"} {"path":"downloaded/ManejadorXMLMatrizYMarcado.java","method_name":"N getMatr","content":"\n\t/**\n\t * Retorna la instancia de MatrizIncidencia. Deberia llamarse luego de \n\t * haberse hecho el parseo del archivo XML con ProcesaXML.\n\t * @return La matriz de incidencia de la red descripta por el archivo XML.\n\t \n\n\tpublic MatricesPN getMatriz() {\n\t\treturn this.matriz;\n"} {"path":"downloaded/FormattingStandardCheck.java","method_name":"isInternalFunction","content":"/**\n   * Extends and implements line\n   */\npublic boolean isInternalFunction(ExpressionTree callee) {\n    String calleeString = callee.toString().toLowerCase(Locale.ROOT);\n    return INTERNAL_FUNCTIONS.contains(calleeString);\n  }"} {"path":"downloaded/TrustStoreMojo.java","method_name":"getCertificates","content":"/**\n     * @parameter default-value=\"http://mxr.mozilla.org/mozilla-central/source/security/nss/lib/ckfw/builtins/certdata.txt?raw=1\" expression=\"${truststore.source-url}\"\n     */\nMap<String, String> getCertificates(String location)\n        throws Exception {\n\n        Map<String, String> certs = new HashMap<String, String>();\n\n        Pattern labelPattern = Pattern.compile(\"^CKA_LABEL\\\\s+[A-Z0-9]+\\\\s+\\\\\\\"(.*)\\\\\\\"\");\n        Pattern beginContentPattern = Pattern.compile(\"^CKA_VALUE MULTILINE_OCTAL\");\n        Pattern endContentPattern = Pattern.compile(\"^END\");\n        Pattern untrustedPattern = Pattern.compile(\"^CKA_TRUST_SERVER_AUTH\\\\s+CK_TRUST\\\\s+CKT_NSS_NOT_TRUSTED$|^CKA_TRUST_SERVER_AUTH\\\\s+CK_TRUST\\\\s+CKT_NSS_TRUST_UNKNOWN$\");\n\n        URI certsURI = new URI(location);\n\n        // This should be the default, but make sure it's set anyway\n        HttpURLConnection.setFollowRedirects(true);\n\n        HttpURLConnection conn = (HttpURLConnection) certsURI.toURL().openConnection();\n        if (conn.getResponseCode() != HttpURLConnection.HTTP_OK) {\n            throw new Exception(String.format(\"Error connecting to %s: %d %s\", location, conn.getResponseCode(), conn.getResponseMessage()));\n        }\n\n        InputStream is = conn.getInputStream();\n        InputStreamReader isr = new InputStreamReader(is);\n        BufferedReader br = new BufferedReader(isr);\n\n        String alias = null;\n        byte[] certData = new byte[MAX_CERT_SIZE];\n        int certDataLen = 0;\n\n        String line = br.readLine();\n        while (line != null) {\n            // Skip comments and empty lines\n            if (line.startsWith(\"#\")) {\n                line = br.readLine();\n                continue;\n            }\n\n            if (line.trim().length() == 0) {\n                line = br.readLine();\n                continue;\n            }\n\n            Matcher m = labelPattern.matcher(line);\n            if (m.find()) {\n                alias = m.group(1).toLowerCase().replaceAll(\"/\", \"-\").replaceAll(\"\\\\s+\", \"\");\n                line = br.readLine();\n                continue;\n            }\n\n            m = beginContentPattern.matcher(line);\n            if (m.find()) {\n                line = br.readLine();\n\n                while (true) {\n                    m = endContentPattern.matcher(line);\n                    if (m.find()) {\n                        StringBuilder pem = new StringBuilder();\n                        pem.append(\"-----BEGIN CERTIFICATE-----\\n\");\n\n                        String base64Data = Base64.encodeBase64String(Arrays.copyOf(certData, certDataLen));\n                        pem.append(base64Data);\n\n                        pem.append(\"\\n-----END CERTIFICATE-----\\n\");\n\n                        certs.put(alias, pem.toString());\n\n                        // Prepare for another certificate/trust section\n                        alias = null;\n                        certData = new byte[MAX_CERT_SIZE];\n                        certDataLen = 0;\n\n                        line = br.readLine();\n                        break;\n                    }\n\n                    String[] octets = line.split(\"\\\\\\\\\");\n\n                    // We start at index 1, not zero, because the first element\n                    // in the array will always be an empty string.  The first\n                    // character in the string is a backslash; String.split()\n                    // thus populates the element before that backslash as an\n                    // empty string.\n                    for (int i = 1; i < octets.length; i++) {\n                        int octet = Integer.parseInt(octets[i], 8);\n                        certData[certDataLen++] = (byte) octet;\n                    }\n\n                    line = br.readLine();\n                }\n\n                continue;\n            }\n\n            m = untrustedPattern.matcher(line);\n            if (m.find()) {\n                // Remove untrusted certs from our map\n                certs.remove(alias);\n\n                line = br.readLine();\n                continue;\n            }\n\n            line = br.readLine();\n        }\n\n        return certs;\n    }"} {"path":"downloaded/TrustStoreMojo.java","method_name":"getTrustStore","content":"/**\n     * @parameter default-value=\"http://mxr.mozilla.org/mozilla-central/source/security/nss/lib/ckfw/builtins/certdata.txt?raw=1\" expression=\"${truststore.source-url}\"\n     */\nKeyStore getTrustStore(Map<String, String> certs,\n                           String storeType)\n        throws Exception {\n\n        KeyStore ks = KeyStore.getInstance(storeType);\n\n        // Initialize an empty keystore\n        ks.load(null, null);\n\n        CertificateFactory certFactory = CertificateFactory.getInstance(\"X.509\");\n\n        for (Map.Entry<String, String> elt : certs.entrySet()) {\n            String alias = elt.getKey();\n\n            try {\n                ByteArrayInputStream bais = new ByteArrayInputStream(elt.getValue().getBytes(UTF8));\n\n                X509Certificate cert = (X509Certificate) certFactory.generateCertificate(bais);\n                cert.checkValidity();\n\n                getLog().info(String.format(\"Adding certificate with alias '%s'\", alias));\n                ks.setCertificateEntry(alias, cert); \n\n            } catch (CertificateExpiredException cee) {\n                getLog().error(String.format(\"NOT Adding certificate %s: %s\", alias, cee));\n\n            } catch (CertificateNotYetValidException cnyve) {\n                getLog().error(String.format(\"NOT Adding certificate %s: %s\", alias, cnyve));\n            }\n        }\n\n        return ks;\n    }"} {"path":"downloaded/TrustStoreMojo.java","method_name":"getTrustStore","content":"/**\n     * @parameter default-value=\"http://mxr.mozilla.org/mozilla-central/source/security/nss/lib/ckfw/builtins/certdata.txt?raw=1\" expression=\"${truststore.source-url}\"\n     */\nKeyStore getTrustStore(Map<String, String> certs)\n        throws Exception {\n\n        return getTrustStore(certs, KeyStore.getDefaultType());\n    }"} {"path":"downloaded/TrustStoreMojo.java","method_name":"execute","content":"/**\n     * @parameter default-value=\"http://mxr.mozilla.org/mozilla-central/source/security/nss/lib/ckfw/builtins/certdata.txt?raw=1\" expression=\"${truststore.source-url}\"\n     */\npublic void execute()\n        throws MojoExecutionException {\n\n        if (skipTests) {\n            return;\n        }\n\n        String trustStoreTmpFile = String.format(\"%s%struststore.db\",\n            project.getBuild().getDirectory(), File.separator);\n\n        getLog().info(String.format(\"TRUSTSTORE: truststore.file = '%s'\", trustStoreFile));\n        getLog().info(String.format(\"TRUSTSTORE: truststore.tmp-file = '%s'\", trustStoreTmpFile));\n        getLog().info(String.format(\"TRUSTSTORE: truststore.type = '%s'\", trustStoreType));\n        getLog().info(String.format(\"TRUSTSTORE: truststore.pass = '%s'\", trustStorePass));\n        getLog().info(String.format(\"TRUSTSTORE: truststore.source-url = '%s'\", trustStoreSourceURL));\n\n        File tmpFile = null;\n        FileOutputStream fos = null;\n\n        try {\n            getLog().info(String.format(\"TRUSTSTORE: Generating new truststore.db from %s\", trustStoreSourceURL));\n\n            Map<String, String> certs = getCertificates(trustStoreSourceURL);\n            KeyStore ks = getTrustStore(certs, trustStoreType);\n\n            tmpFile = new File(trustStoreTmpFile);\n\n            // make sure that the target directory exists:\n            new File(tmpFile.getParent()).mkdirs();\n\n            fos = new FileOutputStream(tmpFile);\n            ks.store(fos, trustStorePass.toCharArray());\n\n        } catch (Exception e) {\n            getLog().error(\"TRUSTSTORE: Error while generating truststore: \" + e.getMessage());\n            throw new MojoExecutionException(\"Error while generating truststore: \" + e.getMessage(), e);\n\n        } finally {\n            if (fos != null) {\n                try {\n                    fos.close();\n\n                    File f = new File(trustStoreFile);\n\n                    // Delete the destination file first; Windows will barf if\n                    // you don't do that before trying to rename the original\n                    // file to it.  This was the cause of KG-6456.\n\n                    if (f.exists()) {\n                      if (!f.isFile()) {\n                          throw new MojoExecutionException(String.format(\"Error while generating truststore: truststore file '%s' already exists but is not a file\", trustStoreFile));\n                      }\n\n                      if (!f.delete()) {\n                          throw new MojoExecutionException(String.format(\"Error while generating truststore: truststore file '%s' already exists but could not be deleted\", trustStoreFile));\n                       }\n                   }\n\n                   if (!tmpFile.getCanonicalPath().equals(f.getCanonicalPath())) {\n                       File parent = f.getParentFile();\n                       if (!parent.exists()) {\n                           if (!parent.mkdirs()) {\n                               throw new IOException(String.format(\"Error creating directory '%s'\", parent));\n                           }\n                       }\n\n                       if (tmpFile.renameTo(f) == false) {\n                           throw new IOException(String.format(\"Error renaming '%s' to '%s'\", trustStoreTmpFile, trustStoreFile));\n                       }\n                   }\n\n                   getLog().info(String.format(\"TRUSTSTORE: Renamed %s to %s\", trustStoreTmpFile, trustStoreFile));\n\n                } catch (IOException ioe) {\n                    getLog().error(\"TRUSTSTORE: Error while generating truststore: \" + ioe.getMessage());\n                    throw new MojoExecutionException(\"Error while generating truststore: \" + ioe.getMessage(), ioe);\n                }\n            }\n        }\n    }"} {"path":"downloaded/TypeLikeUtilityVariableCache.java","method_name":"get","content":"/**\n     * Get variable associated with the specified utility.\n     *\n     * @param utility utility\n     * @param <T> type of value\n     * @return variable associated with the specified utility\n     */\n@SuppressWarnings(\"unchecked\")\n    public <T> Variable<T> get(U utility) {\n        return cache.computeIfAbsent(utility, u -> u.initTypeLikeVariable(name));\n    }"} {"path":"downloaded/DocumentSimilarity.java","method_name":"e computeSimilari","content":"/**\n\t * Metodo che dati in input due oggetti linguistici, restituisce\n\t * un double che equivale al loro grado di similarit�.\n\t * @param LinguisticObject o1 \n\t * @param LinguisticObject o2\n\t * @return double\n\t \n\n\t@Override\n\tpublic double computeSimilarity(LinguisticObject o1, LinguisticObject o2)\n\t{\n\t\treturn BabelDocumentSimilarity.computeSimilarity(((Document)o1), ((Document)o2));\n"} {"path":"downloaded/AuraDRM.java","method_name":"getTRACRClockOffset","content":"/**\n     * Obtain the TRACR - DOM mainboard clock offset using\n     * Hagar's <b>Toffset</b> iceboot function.  This offset\n     * is to be used to turn the 20 MHz TRACR clock into the\n     * equivalent 40 MHz DOM mainboard clock so that the\n     * standard RAPCal transformation can be used:<br>\n     *  UTC = 2*TRACR + Toffset<br>\n     * The method used contains inherent ambiguity because\n     * of random latencies - it returns the <em>minimum</em>\n     * of the population in an attempt to mitigate.\n     * @param n the number of iterations to use\n     * @return \n     * @throws IOException\n     */\npublic long getTRACRClockOffset(int n) throws IOException\n    {\n        String txt = sendCommand(n + \" Toffset\");\n        return Long.parseLong(txt);\n    }"} {"path":"downloaded/AuraDRM.java","method_name":"readVirtualAddress","content":"/**\n     * Obtain the TRACR - DOM mainboard clock offset using\n     * Hagar's <b>Toffset</b> iceboot function.  This offset\n     * is to be used to turn the 20 MHz TRACR clock into the\n     * equivalent 40 MHz DOM mainboard clock so that the\n     * standard RAPCal transformation can be used:<br>\n     *  UTC = 2*TRACR + Toffset<br>\n     * The method used contains inherent ambiguity because\n     * of random latencies - it returns the <em>minimum</em>\n     * of the population in an attempt to mitigate.\n     * @param n the number of iterations to use\n     * @return \n     * @throws IOException\n     */\npublic int readVirtualAddress(int command) throws IOException\n    {\n        int c_hi = (command >> 8) & 0xff;\n        int c_lo = command & 0xff;\n        return Integer.parseInt(\n                sendCommand(String.format(\n                        \"$%x $%x c! $%x $%x c! $%x c@ . drop\", \n                        c_hi, VIRT_HI,\n                        c_lo, VIRT_LO,\n                        VIRT_RW))\n                );\n    }"} {"path":"downloaded/AuraDRM.java","method_name":"writePowerBits","content":"/**\n     * \n     * @param pwr\n     * @throws IOException\n     * @throws InterruptedException\n     */\npublic boolean writePowerBits(int pwr) throws IOException, InterruptedException\n    {\n        // Ramp power on by turning on a bit at a time\n        int pwrMask = 0x1;\n        for (int i = 0; i < PWR_BITS; i++) {\n            writeVirtualAddress(4, pwr & pwrMask);\n            pwrMask = (pwrMask << 1) | 0x1;\n            Thread.sleep(200);\n        }\n        int powerTry = 0;\n        while (readVirtualAddress(4) != pwr && powerTry++ < MAX_POWER_TRY) Thread.sleep(100);\n\t\n\tlogger.warn(\"Trying to set power to \"+pwr);\n        if (powerTry <= MAX_POWER_TRY) return true;\n        logger.warn(\"Never got good power state.\");\n        return false;\n    }"} {"path":"downloaded/AuraDRM.java","method_name":"getTriggerLogic","content":"/**\n     * This command actually effects the write for the DACs set by the setRadioDAC\n     * call which must have been previously called one or more times.\n     * \n     */\npublic int getTriggerLogic()  throws IOException\n    {\n\treturn readVirtualAddress(0x49);\n\n    }"} {"path":"downloaded/AuraDRM.java","method_name":"readTRACRData","content":"/**\n     * This command actually effects the write for the DACs set by the setRadioDAC\n     * call which must have been previously called one or more times.\n     * \n     */\nprivate ByteBuffer readTRACRData(String cmd, int nEvents) throws IOException\n    {\n        sendCommand(cmd, null);\n        ByteBuffer data = ByteBuffer.allocate(nEvents*MAX_EVT_SIZE+3);\n        boolean finished = false;\n        int p = 0;\n        while ((data.remaining() > 0) && (!finished))\n        {\n            ByteBuffer ret = recv();\n            data.put(ret);\n            // Look for trailing 0xbeef + prompt\n            p = data.position();\n            if ((p > 5) &&\n                (data.get(p - 5) == (byte)0xbe) &&\n                (data.get(p - 4) == (byte)0xef) &&\n                (data.get(p - 3) == '>') && \n                (data.get(p - 2) == ' ') && \n                (data.get(p - 1) == '\\n')) {\n                logger.debug(\"Found 0xbeef + prompt at position \"+p+\".\");\n                finished = true;\n            }\n        }\n        p = data.position();\n        if (logger.isDebugEnabled()) logger.debug(\"Got ByteBuffer(\"+p+\" bytes) from DOM.\");\n        return (ByteBuffer) data.rewind().limit(p-3);\n    }"} {"path":"downloaded/WorkshopEmployeeCRUD.java","method_name":"updateEmployee","content":"/**\n\t * Closing DB connection.\n\t * @throws SQLException\n\t */\nprivate void updateEmployee() throws SQLException, ParseException {\n        int version;\n        ResultSet ret;\n        PreparedStatement ps, ps2;\n\n        if(pessimisticEnabled)\n            ps = conn.prepareStatement(\"SELECT * FROM EMPLOYEE WHERE EMPLOYEE_ID=:1 FOR UPDATE\");\n        else\n            ps = conn.prepareStatement(\"SELECT * FROM EMPLOYEE WHERE EMPLOYEE_ID=:1\");\n\n\n        System.out.print(\"Enter employee id to continue:\");\n        ps.setInt(1, inputScanner.nextInt());\n\n        try {\n            ret = ps.executeQuery();\n            if(!ret.next()) throw new IllegalArgumentException(\"Employee not found!\");\n        }\n        catch(SQLException se)\n        {\n            System.out.println(se.getMessage());\n            return;\n        }\n        catch(IllegalArgumentException ile)\n        {\n            System.out.println(ile.getMessage());\n            return;\n        }\n\n        System.out.println(\"OK - employee found!\");\n\n        try {\n            version = ret.getInt(\"VERSION\");\n            Employee upEmp = new Employee(ret, inputScanner);\n\n            ps2 = upEmp.updateStatement(conn, version);\n            if(ps2.executeUpdate()==0)\n                throw new IllegalArgumentException(\"Someone edited that employee before you - try again.\");\n\t\t}\n        catch(SQLException se) {\n            System.out.println(\"Can't update record:\\n\" + se.getLocalizedMessage());\n            return;\n        }\n        catch(IllegalArgumentException ile) {\n            System.out.println(ile.getMessage());\n            return;\n        }\n\n        System.out.println(\"Record updated!\");\n\n        ret.close();\n        ps.close();\n        ps2.close();\n    }"} {"path":"downloaded/WorkshopEmployeeCRUD.java","method_name":"Menu","content":"/**\n\t * Shows a menu.\n\t * \n\t */\npublic int Menu()\n\t{\n\t\tchar userResponse;\n\t\t\n\t\tSystem.out.println(\t\"Menu:\\n\" +\n\t\t\t\t\t\t\t\"\\t (c) Create new employee\\n\" +\n\t\t\t\t\t\t\t\"\\t (r) Read all employees\\n\"  +\n\t\t\t\t\t\t\t\"\\t (u) Update an employee\\n\"  +\t\n\t\t\t\t\t\t\t\"\\t (d) Delete an employee\\n\"  +\n\t\t\t\t\t\t\t\"\\t (t) Assign employees with repairs\\n\" +\n                            \"\\t (p) Toggle pessimistic locking on employee table\\n\" +\n\t\t\t\t\t\t\t\"\\t (e) Exit\\n\");\n\t\tSystem.out.println(\"Selected option(c,r,u,d,t,e):\");\n\t\tuserResponse = inputScanner.next(\".\").charAt(0);\n\n        try {\n            switch(userResponse)\n            {\n            case 'c':\n                createNewEmployee();\n                break;\n            case 'r':\n                readAllEmployees();\n                break;\n            case 'u':\n                updateEmployee();\n                break;\n            case 'd':\n                deleteEmployee();\n                break;\n            case 't':\n                assignEmployees();\n                break;\n            case 'p':\n                togglePessimistic();\n                break;\n            case 'e':\n                return 0;\n            default:\n                System.out.println(\"Not recognized\");\n                return 0;\n            }\n        }\n        catch(SQLException se) {\n            System.out.println(\"SQL Exception thrown!\");\n            System.out.println(\"Exception msg: \" + se.getLocalizedMessage());\n            System.out.println(\"Exiting...\");\n            return 1;\n        }\n        catch(Exception e) {\n            System.out.println(\"General exception thrown!\");\n            System.out.println(e.getMessage());\n            e.printStackTrace();\n            return 1;\n        }\n\t\treturn 1;\n\t}"} {"path":"downloaded/ParameterNameProvider.java","method_name":"getParameterNameFromAnnotations","content":"/**\n     * Derives member's name and type from it's annotations\n     */\npublic static Optional<String> getParameterNameFromAnnotations(final Annotation[] memberAnnotations) {\n        for (final Annotation a : memberAnnotations) {\n            if (a instanceof QueryParam) {\n                return Optional.of(\"The query param '\" + ((QueryParam) a).value() + \"'\");\n            } else if (a instanceof PathParam) {\n                return Optional.of(\"The path param '\" + ((PathParam) a).value() + \"'\");\n            } else if (a instanceof HeaderParam) {\n                return Optional.of(\"The header '\" + ((HeaderParam) a).value() + \"'\");\n            } else if (a instanceof CookieParam) {\n                return Optional.of(\"The cookie '\" + ((CookieParam) a).value() + \"'\");\n            } else if (a instanceof FormParam) {\n                return Optional.of(\"The form field '\" + ((FormParam) a).value() + \"'\");\n            } else if (a instanceof Context) {\n                return Optional.of(\"context\");\n            } else if (a instanceof MatrixParam) {\n                return Optional.of(\"The matrix param '\" + ((MatrixParam) a).value() + \"'\");\n            }\n        }\n\n        return Optional.empty();\n    }"} {"path":"downloaded/CsdlLabeledElement.java","method_name":" getNam","content":" /**\n   * Returns the assigned name\n   * @return assigned name\n   *\n public String getName() {\n    return name;\n  "} {"path":"downloaded/CsdlLabeledElement.java","method_name":" setNam","content":" /**\n   * Returns the assigned name\n   * @return assigned name\n   *\n public CsdlLabeledElement setName(String name) {\n    this.name = name;\n    return this;\n  "} {"path":"downloaded/CsdlLabeledElement.java","method_name":" getValu","content":" /**\n   * Returns the child expression\n   *\n   * @return child expression\n   *\n public CsdlExpression getValue() {\n    return value;\n  "} {"path":"downloaded/CsdlLabeledElement.java","method_name":" setValu","content":" /**\n   * Returns the child expression\n   *\n   * @return child expression\n   *\n public CsdlLabeledElement setValue(CsdlExpression value) {\n    this.value = value;\n    return this;\n  "} {"path":"downloaded/CsdlLabeledElement.java","method_name":" equal","content":" /**\n   * Returns the child expression\n   *\n   * @return child expression\n   *\n @Override\n  public boolean equals (Object obj) {\n    if (obj == null) {\n      return false;\n    }\n    if (!(obj instanceof CsdlLabeledElement)) {\n      return false;\n    }\n    CsdlLabeledElement csdlLabelledEle = (CsdlLabeledElement) obj;\n    return (getName() == null ? csdlLabelledEle.getName() == null :\n            getName().equals(csdlLabelledEle.getName()))\n        && (getValue() == null ? csdlLabelledEle.getValue() == null :\n            getValue().equals(csdlLabelledEle.getValue()))\n        && (getAnnotations() == null ? csdlLabelledEle.getAnnotations() == null :\n            checkAnnotations(csdlLabelledEle.getAnnotations()));\n  "} {"path":"downloaded/CsdlLabeledElement.java","method_name":" checkAnnotation","content":" /**\n   * Returns the child expression\n   *\n   * @return child expression\n   *\n private boolean checkAnnotations(List<CsdlAnnotation> csdlLabelledEleAnnotations) {\n    if (csdlLabelledEleAnnotations == null) {\n      return false;\n    }\n    if (getAnnotations().size() == csdlLabelledEleAnnotations.size()) {\n      for (int i = 0; i < getAnnotations().size() ; i++) {\n        if (!getAnnotations().get(i).equals(\n            csdlLabelledEleAnnotations.get(i))) {\n          return false;\n        }\n      }\n    } else {\n      return false;\n    }\n    return true;\n  "} {"path":"downloaded/CsdlLabeledElement.java","method_name":" hashCod","content":" /**\n   * Returns the child expression\n   *\n   * @return child expression\n   *\n @Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + ((name == null) ? 0 : name.hashCode());\n    result = prime * result + ((value == null) ? 0 : value.hashCode());\n    result = prime * result + ((annotations == null) ? 0 : annotations.hashCode());\n    return result;\n  "} {"path":"downloaded/DSRRoutingHeader.java","method_name":"isProtocolMessage","content":"/**\n     * @return Returns the protocol.\n     */\npublic boolean isProtocolMessage() \n    {\n        return protocoll;\n    }"} {"path":"downloaded/DSRRoutingHeader.java","method_name":"hasRoute","content":"/**\n     * @return Returns the protocol.\n     */\npublic boolean hasRoute() \n    {\n    \treturn route.size() > 1;\n    }"} {"path":"downloaded/DSRRoutingHeader.java","method_name":"hasLocation","content":"/**\n     * Returns whether the header has a target location or not\n     * @return <code>true</code> if the header has a target location\n     */\npublic boolean hasLocation()\n    {\n        return targetLocation != null;\n    }"} {"path":"downloaded/DSRRoutingHeader.java","method_name":"getTargetLocation","content":"/**\n     * Returns whether the header has a target location or not\n     * @return <code>true</code> if the header has a target location\n     */\npublic Location getTargetLocation() \n    {\n        return targetLocation;\n    }"} {"path":"downloaded/DSRRoutingHeader.java","method_name":"hasReceiver","content":"/**\n     * Sets the route of this header\n     * @param route the route\n     */\npublic boolean hasReceiver() \n    {\n        return route != null && route.size() >= 1;\n    }"} {"path":"downloaded/DSRRoutingHeader.java","method_name":"getReceiver","content":"/**\n     * Sets the route of this header\n     * @param route the route\n     */\npublic Address getReceiver()\n    {\n        if (!hasReceiver()) throw new IllegalAccessError(\"This header does not contain receiver information\");\n        return (Address)route.get(route.size()-1);\n    }"} {"path":"downloaded/DSRRoutingHeader.java","method_name":"hasNextHop","content":"/**\n     * Checks whether a next hop is available\n     * @return <code>true</code> if a next hop is available\n     */\npublic boolean hasNextHop()\n    {\n        return getHopCount() < route.size()-1;\n    }"} {"path":"downloaded/DSRRoutingHeader.java","method_name":"getNextHop","content":"/**\n     * Returns the next hop\n     * @return the next hop\n     */\npublic Address getNextHop()\n    {\n        return (Address)route.get(getHopCount()+1);\n    }"} {"path":"downloaded/DSRRoutingHeader.java","method_name":"copy","content":"/**\n     * Returns the next hop\n     * @return the next hop\n     */\npublic LinkLayerInfo copy() \n    {\n        return new DSRRoutingHeader(this);\n    }"} {"path":"downloaded/DSRRoutingHeader.java","method_name":"getCodingSize","content":"/**\n     * Returns the next hop\n     * @return the next hop\n     */\npublic int getCodingSize() \n    {        \n        return targetLocation.getCodingSize()+((Address)route.get(0)).getCodingSize()*route.size()+4*8;\n    }"} {"path":"downloaded/DSRRoutingHeader.java","method_name":"getShape","content":"/**\n     * Returns the next hop\n     * @return the next hop\n     */\npublic Shape getShape() \n    {\n        return new EllipseShape(new Extent(3,3), Color.RED,true);\n    }"} {"path":"downloaded/DSRRoutingHeader.java","method_name":"getRoutingAlgorithmID","content":"/**\n     * Returns the next hop\n     * @return the next hop\n     */\npublic ServiceID getRoutingAlgorithmID() \n    {\n        return DSRService.SERVICE_ID;\n    }"} {"path":"downloaded/DSRRoutingHeader.java","method_name":"toString","content":"/**\n     * Returns the next hop\n     * @return the next hop\n     */\npublic String toString()\n    {\n        return \"DSRRoutingHeader (route=\"+route+\")\";\n    }"} {"path":"downloaded/DSRRoutingHeader.java","method_name":"hasValidRoute","content":"/**\n     * Checks if the route is valid \n     * @return\n     */\npublic boolean hasValidRoute() \n    {\n        return validRoute;\n    }"} {"path":"downloaded/UserServer.java","method_name":"\n\t\n\t\n\tpu","content":"/***\n\t * 随机生成6位数的随机\n\t\n\t\t\n\t\t\n\t\t\n\t\n\t\n\t\n\t\n\tpublic String loadFile(String realPath) {\n        \t// 1.定义目标文件\n     \t\tFile file = new File(realPath);\n     \t\t// 2.创建一个流，指向目标文件\n     \t\tInputStream is = null;\n     \t\ttry {\n     \t\t\tis = new FileInputStream(file);\n     \t\t\t//3.创建一个用来存储读取数据的缓冲数组\n     \t\t\tbyte[]array = new byte[is.available()];\n     \t\t\t//4.循环往外流(count为每次读取数组中的有效字节总数)\n     \t\t\tint count = is.read(array);\n     \t\t\t// 5.循环打印\n     \t\t\twhile (count != -1) {\n     \t\t\t\t// 将byte[] -》 String\n     \t\t\t\t// 将byte数组读取到的有效字节转换成字符串\n     \t\t\t\tString string = new String(array, 0, count);\n     \t\t\t\tString str = new String(string.toString().getBytes(\"UTF-8\")); \n     \t\t\t\t\n     \t\t\t\tcount = is.read(array);\n     \t\t\t\treturn str;\n     \t\t\t}\n     \t\t} catch (FileNotFoundException e) {\n     \t\t\te.printStackTrace();\n     \t\t} catch (IOException e) {\n     \t\t\te.printStackTrace();"} {"path":"downloaded/NodeWithRequirements.java","method_name":"updateRequirements","content":"/**\n     * @param newState the new item/location/event/shop that just became accessible\n     * @return true if this node is now accessible\n     */\npublic boolean updateRequirements(String newState) {\n        List<String> requirementSet;\n        for(int i = 0; i < listOfRequirementSets.size(); i++) {\n            requirementSet = listOfRequirementSets.get(i);\n            if(requirementSet.contains(\"!\" + newState)) {\n                requirementSet.add(\"INACCESSIBLE\");\n                return false;\n            }\n            requirementSet.remove(newState);\n            if(requirementSet.isEmpty()) {\n                return true;\n            }\n            boolean onlyNotRequirements = true;\n            for(String requirement : requirementSet) {\n                if(!requirement.startsWith(\"!\")) {\n                    onlyNotRequirements = false;\n                    break;\n                }\n            }\n            if(onlyNotRequirements) {\n                return true;\n            }\n        }\n        return false;\n    }"} {"path":"downloaded/NodeWithRequirements.java","method_name":"canContainItem","content":"/**\n     * // todo: currently this only checks direct requirements; should it check indirect ones also?\n     * @param item an item we're considering putting in this node\n     * @return true if the node can contain the item\n     */\npublic boolean canContainItem(String item) {\n        boolean badRequirementSet;\n        for(List<String> requirementSet : listOfRequirementSets) {\n            if(requirementSet.contains(item)) {\n                continue; // This requirement set doesn't work; try another one.\n            }\n            if(item.equals(\"Ankh Jewel\")) {\n                badRequirementSet = false;\n                for(String requirement : requirementSet) {\n                    if(requirement.contains(\"Amphisbaena Defeated\") || requirement.contains(\"Sakit Defeated\")\n                            || requirement.contains(\"Ellmac Defeated\") || requirement.contains(\"Bahamut Defeated\")\n                            || requirement.contains(\"Viy Defeated\") || requirement.contains(\"Baphomet Defeated\")\n                            || requirement.contains(\"Palenque Defeated\") || requirement.contains(\"Tiamat Defeated\")) {\n                        badRequirementSet = true;\n                        break;\n                    }\n                }\n                if(badRequirementSet) {\n                    continue; // Minimize Ankh Jewel lock.\n                }\n            }\n            return true;\n        }\n        return false;\n    }"} {"path":"downloaded/NodeWithRequirements.java","method_name":"getAllRequirements","content":"/**\n     * // todo: currently this only checks direct requirements; should it check indirect ones also?\n     * @param item an item we're considering putting in this node\n     * @return true if the node can contain the item\n     */\npublic List<List<String>> getAllRequirements() {\n        return listOfRequirementSets;\n    }"} {"path":"downloaded/CoincidenceUtils.java","method_name":"getTimeFromEvent","content":"/** <b> This method is for demonstration purposes. </b> \n\t * For gathering information you should use the method provided in {@link WebUtils}\n\t * @param detectors\n\t * @param leastHit\n\t * @param from The time to start looking for coincidences\n\t * @param to The time to finish looking for detectors\n\t * @deprecated - The work involved is much more than I anticipated when I started out, although I have planned out how to do it, 8 detectors over one hour would loop through 51 <i>million</i> strings - which is a lot\n\t */\npublic static EventTime getTimeFromEvent(String event){\n\t\tString[] parts = event.split(\"\\t\");\n\t\tEventTime t = new EventTime();\n\t\tt.parse(parts[0]+\"\\t\"+parts[1]+\"\\t\"+parts[2]+\"\\t\"+parts[3], EventTime.EVENT_FORMAT);\n\t\treturn t;\n\t}"} {"path":"downloaded/DatosDueno.java","method_name":" newInstanc","content":" /**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @param param1 Parameter 1.\n     * @param param2 Parameter 2.\n     * @return A new instance of fragment DatosDueno.\n     *\n public static DatosDueno newInstance(String param1, String param2) {\n        DatosDueno fragment = new DatosDueno();\n        Bundle args = new Bundle();\n        args.putString(ARG_PARAM1, param1);\n        args.putString(ARG_PARAM2, param2);\n        fragment.setArguments(args);\n        return fragment;\n    "} {"path":"downloaded/DatosDueno.java","method_name":" onCreateVie","content":" /**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @param param1 Parameter 1.\n     * @param param2 Parameter 2.\n     * @return A new instance of fragment DatosDueno.\n     *\n @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        vista=inflater.inflate(R.layout.fragment_datos_dueno, container, false);\n\n        try {\n            Estado = vista.findViewById(R.id.estado2);\n            Ciudad = vista.findViewById(R.id.ciudad2);\n            txtDireccion = vista.findViewById(R.id.txtDireccion);\n            txtEslogan = vista.findViewById(R.id.txtEslogan);\n            txtNombreLugar = vista.findViewById(R.id.txtNombreLugar);\n            txtTel = vista.findViewById(R.id.txtTel);\n            txtCorreo = vista.findViewById(R.id.txtCorreo);\n\n            btnAñadirU=vista.findViewById(R.id.btnAnadirU);\n            btnAñadirU.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View v) {\n                    if(longuitud.equalsIgnoreCase(\"\")||longuitud.equalsIgnoreCase(\"null\")||\n                            longuitud==null){\n                        Intent i = new Intent(getContext(), BuscarUbicacion.class);\n                        i.putExtra(\"Nombre\",txtNombreLugar.getText().toString());\n                        startActivity(i);\n\n                    }else{\n                        Intent i = new Intent(getContext(), MapasMeterUbicacion.class);\n                        i.putExtra(\"lat\",latiud);\n                        i.putExtra(\"long\",longuitud);\n                        i.putExtra(\"Nombre\",txtNombreLugar.getText().toString());\n\n                        startActivity(i);\n                    }\n\n                }\n            });\n            if(DatosUsuarioLocal.Tipo.equalsIgnoreCase(\"Estudiante\")||DatosUsuarioLocal.Tipo.equalsIgnoreCase(\"Maestro\")){\n                btnAñadirU.setVisibility(View.GONE);\n            }\n\n\n\ndialog=new ProgressDialog(getContext());\n            dialog.setMessage(\"Obteniendo datos..\");\n            TraerDatos();\n\n\n        }catch (Exception e){\n            Toast.makeText(getContext(),e.getMessage(),Toast.LENGTH_LONG).show();\n        }\n\n        return vista;\n "} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":" loadTreeElemen","content":" /**\n     * \n     * @return\n     *\n public boolean loadTreeElement(AbstractComposite compositeATElement) {\n    \tif (compositeATElement instanceof Root) {\n\t\t\treturn loadRoot((Root) compositeATElement, true);\n\t\t\t\n\t\t} else if (compositeATElement instanceof ATProject) {\n\t\t\treturn loadProject((ATProject) compositeATElement, true);\n\t\t\t\n\t\t} else if (compositeATElement instanceof Folder) {\n\t\t\treturn loadFolder((Folder) compositeATElement, true);\n\t\t\t\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\n\t"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":" loadATElemen","content":" /**\n     * \n     * @return\n     *\n\t@Override\n\tpublic boolean loadATElement(IATElement atElement) {\n    \tif (atElement instanceof Root) {\n\t\t\treturn loadRoot((Root) atElement, true);\n\t\t\t\n\t\t} else if (atElement instanceof AbstractProject) {\n\t\t\treturn loadProject((AbstractProject) atElement, true);\n\t\t\t\n\t\t} else if (atElement instanceof Folder) {\n\t\t\treturn loadFolder((Folder) atElement, true);\n\t\t\t\n\t\t} else if (atElement instanceof AbstractLeaf) {\n\t\t\treturn loadLeaf((AbstractLeaf) atElement, false);\n\t\t\t\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\n\t"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":" loadATElementChildre","content":" /**\n     * \n     * @return\n     *\n @Override\n\tpublic boolean loadATElementChildren(IATElement atElement) {\n    \tif (atElement instanceof Root) {\n\t\t\treturn loadRoot((Root) atElement, false);\n\t\t\t\n\t\t} else if (atElement instanceof AbstractProject) {\n\t\t\treturn loadProject((AbstractProject) atElement, false);\n\t\t\t\n\t\t} else if (atElement instanceof Folder) {\n\t\t\treturn loadFolder((Folder) atElement, false);\n\t\t\t\n\t\t} else if (atElement instanceof AbstractLeaf) {\n\t\t\treturn loadLeaf((AbstractLeaf) atElement, false);\n\t\t\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":" getRoo","content":" /**\n     * \n     * @return\n     *\n public Root getRoot() {\n\t\tRoot root = (Root) ATElementFactory.createITreeComponent(Root.TYPE);\n\t\troot.setId(0);\n\t\t\n\t\treturn root;\n\t"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":" getChildre","content":"\t/**\n\t * Devuelve una ArrayList con todos los 'ITreeComponent' hijos del 'ITreeComponent'\n\t * relaccionado con el identificador que se ha pasado como parametro.\n\t *\n\t@Override\n\tpublic List<IATElement> getChildren(AbstractComposite parent) {\n\t\tif (parent instanceof Root) {\n\t\t\treturn getRootChildren(parent);\n\t\t\t\n\t\t} else if (parent instanceof AbstractProject) {\n\t\t\treturn getProjectChildren(parent);\n\t\t\t\n\t\t} else if (parent instanceof Folder) {\n\t\t\treturn getFolderChildren(parent);\n\t\t\t\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":" insertATElemen","content":"\t/**\n\t * Devuelve una ArrayList con todos los 'ITreeComponent' hijos del 'ITreeComponent'\n\t * relaccionado con el identificador que se ha pasado como parametro.\n\t *\n\t@Override\n\tpublic boolean insertATElement(IATElement atElement, Connection conn) {\n\t\tboolean connectionCreated = false;\n\t\tif (conn == null) {\n\t\t\tconnectionCreated = true;\n\t\t\tconn = getConnection();\n\t\t}\n\t\t\n\t\tboolean isInsert = false;\n\t\t\n\t\tif (atElement instanceof AbstractProject) {\n\t\t\tisInsert = insertProject((AbstractProject) atElement, true);\n\t\t\t\n\t\t} else if (atElement instanceof Folder) {\n\t\t\tisInsert =  insertFolder((Folder) atElement, conn);\n\t\t\t\n\t\t} else if (atElement instanceof AbstractLeaf) {\n\t\t\tisInsert =  insertLeaf((AbstractLeaf)atElement, conn);\n\t\t\t\n\t\t} \n\t\t\n\t\ttry {\n\t\t\tif (connectionCreated) {\n\t\t\t\tDbUtils.closeQuietly(conn);\n\t\t\t}\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\tthrow new DAOException(e);\n\t\t}\n\t\t\n\t\treturn isInsert;\n\t"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"te getPar","content":"\t/**\n\t * Devuelve el elemento padre del elemento dado. No hace la asignaci�n setParent.\n\t\n/\n\tpublic AbstractComposite getParent(IATElement atElement) {\n\t\tAbstractComposite parent = null;\n\t\t\n\t\tif (atElement instanceof AbstractProject) {\n\t\t\tparent = getRoot();\n\t\t\t\n\t\t} else if (atElement instanceof Folder) {\n\t\t\treturn getFolderParent((Folder)atElement);\n\t\t\t\n\t\t} else if (atElement instanceof AbstractLeaf) {\n\t\t\treturn getLeafParent(atElement);\n\t\t\t\n\t\t} \n\t\t\n\t\treturn parent;"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"an loadR","content":"\t\n\t/**\n\t * Carga los elementos hijos del elemento root.\n\t * \n\t * @param root\n\t * @param loadAll\n\t * @return\n\t\n/\n\tprotected boolean loadRoot(Root root, boolean loadAll) {\n\t\tif(this.monitor != null && this.monitor.isCanceled()) return false;\n\t\tConnection conn = getConnection();\n\t\tPreparedStatement stmtSelect = null;\n\t\tResultSet rs = null;\n\t\tboolean isLoad = false;\n\t\ttry {\n\t\t\t// Se obtienen los hijos de tipo ATProject.\n\t\t\t// Se ha desahbilitado la consulta del campo descripción porque\n\t\t\t// se ha cambiado su nombre en la tabla de Categorías.  \n\t\t\tStringBuilder sbSelect = new StringBuilder(SELECT)\n\t\t\t\t.append(projectIdColumnName).append(COMMA)\n\t\t\t\t.append(projectNameColumnName)\n\t\t\t\t.append(FROM)\n\t\t\t\t.append(projectTableName);\n\t\t\t\n\t\t\tstmtSelect = conn.prepareStatement(sbSelect.toString());\n\t\t\trs = stmtSelect.executeQuery();\n\t\t\t\n\t\t\t// Se añaden a la lista\n\t\t\twhile (rs.next()) {\n\t\t\t\tIATElement atElement = ATElementFactory.createITreeComponent(projectType);\n\t\t\t\tatElement.setId(rs.getInt(1));\n\t\t\t\tatElement.setName(rs.getString(2));\n\t\t\t\t\n\t\t\t\troot.add(atElement);\n\t\t\t}\n\t\t\t\n\t\t\tisLoad = true;\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\tthrow new DAOException(e);\n\t\t\t\n\t\t} finally {\n\t\t\tDbUtils.closeQuietly(conn);\n\t\t\tDbUtils.closeQuietly(stmtSelect);\n\t\t\tDbUtils.closeQuietly(rs);\n\t\t}\n\t\treturn isLo"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"oolean load","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\n\n\t */\n\tprotected boolean loadProject (AbstractProject project, boolean loadAll) {\n\t\tif(this.monitor != null && this.monitor.isCanceled()) return false;\n\t\tif(monitor != null) monitor.subTask(project.getName());\n\t\tConnection conn = getConnection();\n\t\tPreparedStatement stmtSelect = null;\n\t\tResultSet rs = null;\n\t\tboolean isLoad = false;\n\t\ttry {\n\t\t\tint projectId = project.getId();\n\t\t\t\n\t\t\t// Se obtienen los hijos de tipo folder\n\t\t\tStringBuilder sbSelect = new StringBuilder(SELECT)\n\t\t\t\t.append(folderTableName).append(POINT).append(folderIdColumnName).append(COMMA)\n\t\t\t\t.append(folderTableName).append(POINT).append(folderNameColumnName).append(COMMA)\n\t\t\t\t.append(folderTableName).append(POINT).append(folderDescriptionColumnName)\n\t\t\t\t.append(FROM).append(folderTableName).append(COMMA).append(relProjectFolderTableName)\n\t\t\t\t.append(WHERE)\n\t\t\t\t.append(projectIdColumnName)\n\t\t\t\t.append(\" = \") //$NON-NLS-1$\n\t\t\t\t.append(projectId)\n\t\t\t\t.append(AND)\n\t\t\t\t.append(folderTableName).append(POINT).append(folderIdColumnName)\n\t\t\t\t.append(EQUAL)\n\t\t\t\t.append(relProjectFolderTableName).append(POINT).append(folderIdColumnName)\n\t\t\t\t.append(ORDER_BY)\n\t\t\t\t.append(folderTableName).append(POINT).append(folderNameColumnName);\n\t\t\t\n\t\t\tstmtSelect = conn.prepareStatement(sbSelect.toString());\n\t\t\tATUILog4j.getLogger().debug(sbSelect.toString());\n\t\t\trs = stmtSelect.executeQuery();\n\t\t\t\n\t\t\t// Se a�aden a la lista\n\t\t\twhile (rs.next()) {\n\t\t\t\tFolder folderElement = new Folder();\n\t\t\t\tfolderElement.setId(rs.getInt(1));\n\t\t\t\tfolderElement.setName(rs.getString(2));\n\t\t\t\t\n\t\t\t\tString description = rs.getString(3);\n\t\t\t\tif (description !=null) \n\t\t\t\t\tfolderElement.setDescription(description);\n\t\n\t\t\t\t// Los proyectos siempre tienen cargados sus hijos, \n\t\t\t\t// hay que cargar los hijos.\n\t\t\t\tif (loadAll) {\n\t\t\t\t\tfor (IATElement folder : project.getChildrens()) {\n\t\t\t\t\t\tloadFolder((Folder) folder, loadAll);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tproject.add(folderElement);\n\t\t\t}\n\t\t\t\n\t\t\tisLoad = true;\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\tthrow new DAOException(e);\n\t\t\t\n\t\t} finally {\n\t\t\tDbUtils.closeQuietly(conn);\n\t\t\tDbUtils.closeQuietly(stmtSelect);\n\t\t\tDbUtils.closeQuietly(rs);\n\t\t}\n\t\t\n\t\treturn i"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"d boolean ","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\nel.\n\t */\n\tprotected boolean loadFolder(Folder folder, boolean loadAll) {\n\t\tif(this.monitor != null && this.monitor.isCanceled()) return false;\n\t\tif(monitor != null) monitor.subTask(Messages.LOADING_FOLDER + folder.getName());\n\t\tConnection conn = getConnection();\n\t\tPreparedStatement stmtSelect = null;\n\t\tResultSet rs = null;\n\t\tboolean isLoad = false;\n\t\ttry {\n\t\t\tif (!folder.isTreeChidrenLoad()) {\n\t\t\t\t// Se obtienen los hijos de tipo folder\n\t\t\t\tStringBuilder sbSelect = new StringBuilder(SELECT)\n\t\t\t\t\t.append(folderIdColumnName).append(COMMA)\n\t\t\t\t\t.append(folderNameColumnName).append(COMMA)\n\t\t\t\t\t.append(folderDescriptionColumnName)\n\t\t\t\t\t.append(FROM).append(folderTableName).append(COMMA).append(relFolderTableName)\n\t\t\t\t\t.append(WHERE)\n\t\t\t\t\t.append(relFolderParentColumnName).append(EQUAL).append(folder.getId())\n\t\t\t\t\t.append(AND)\n\t\t\t\t\t.append(folderIdColumnName).append(EQUAL).append(relFolderChildColumnName)\n\t\t\t\t\t.append(ORDER_BY)\n\t\t\t\t\t.append(folderNameColumnName);\n\t\t\t\t\n\t\t\t\tstmtSelect = conn.prepareStatement(sbSelect.toString());\n\t\t\t\tATUILog4j.getLogger().debug(sbSelect.toString());\n\t\t\t\trs = stmtSelect.executeQuery();\n\t\t\t\t\n\t\t\t\t// Se añaden a la lista\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\tFolder folderElement = new Folder();\n\t\t\t\t\tfolderElement.setId(rs.getInt(1));\n\t\t\t\t\tfolderElement.setName(rs.getString(2));\n\t\t\t\t\t\n\t\t\t\t\tString description = rs.getString(3);\n\t\t\t\t\tif (description !=null) \n\t\t\t\t\t\tfolderElement.setDescription(description);\n\t\t\t\t\t\n\t\t\t\t\tif (loadAll) {\n\t\t\t\t\t\tloadFolder(folderElement, loadAll);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfolder.add(folderElement);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Se obtienen los hijos de tipo Leaf\n\t\t\t\tsbSelect = new StringBuilder(SELECT)\n\t\t\t\t\t.append(elementIdColumnName)\n\t\t\t\t\t.append(FROM).append(elementTableName)\n\t\t\t\t\t.append(WHERE)\n\t\t\t\t\t.append(folderIdColumnName).append(EQUAL).append(folder.getId())\n\t\t\t\t\t.append(ORDER_BY)\n\t\t\t\t\t.append(elementNameColumnName);\n\t\t\t\t\n\t\t\t\tstmtSelect = conn.prepareStatement(sbSelect.toString());\n\t\t\t\tATUILog4j.getLogger().debug(sbSelect.toString());\n\t\t\t\trs = stmtSelect.executeQuery();\n\t\t\t\t\n\t\t\t\t// Se añaden los elementos\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\tif(monitor != null && monitor.isCanceled()) return false;\n\t\t\t\t\tfolder.add(getLeaf(rs.getInt(1)));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tif (loadAll) {\n\t\t\t\t\tfor (IATElement atElement : folder.getChildrens()) {\n\t\t\t\t\t\tloadATElement(atElement);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tisLoad = true;\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\tthrow new DAOException(e);\n\t\t\t\n\t\t} finally {\n\t\t\tDbUtils.closeQuietly(conn);\n\t\t\tDbUtils.closeQuietly(stmtSelect);\n\t\t\tDbUtils.closeQuietly(rs);\n\t\t}\n\t\t\n\t\tfolder.setTreeChidrenLoad(true);\n\t\tretur"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"ate boolean i","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\neturn\n\t */\n\tprivate boolean insertProject(AbstractProject project, boolean insertChildrens) {\n\t\tConnection conn = getConnection();\n\t\tPreparedStatement stmtInsert = null;\n\t\tResultSet rsId = null;\n\t\tboolean isInsert = false;\n\t\ttry {\n\t\t\tStringBuilder sbInsert = new StringBuilder()\n\t\t\t\t.append(INSERT_INTO)\n\t\t\t\t.append(projectTableName)\n\t\t\t\t.append(OPEN_BRACKET)\n\t\t\t\t.append(projectNameColumnName)\n//\t\t\t\t.append(projectDescriptionColumnName)\n\t\t\t\t.append(CLOSE_BRACKET)\n\t\t\t\t.append(VALUES).append(OPEN_BRACKET)\n\t\t\t\t.append(APOSTROPHE).append(project.getName()).append(APOSTROPHE)\n\t\t\t\t.append(CLOSE_BRACKET);\n\n\t\t\tstmtInsert = conn.prepareStatement(sbInsert.toString(), Statement.RETURN_GENERATED_KEYS);\n\t\t\tATUILog4j.getLogger().debug(sbInsert.toString());\n\t\t\tstmtInsert.executeUpdate();\n\t\t\t\n\t\t\t// Se recupera el id recien insertado para asignarselo al elemento\n\t\t\trsId = stmtInsert.getGeneratedKeys();\n\t\t\tif (rsId != null && rsId.next()) {\n\t\t\t\tint newProjectId = rsId.getBigDecimal(1).intValue();\n\t\t\t\tproject.setId(newProjectId);\n\t\t\t}\t\t\n\t\t\t\n\t\t\t// Se inserta en tablas sus hijos, si los tiene\n\t\t\tfor (IATElement atElement : project.getChildrens()) {\n\t\t\t\t// Se inserta en tablas sus hijos, si los tiene\n\t\t\t\tatElement.setTreeParent(project);\n\t\t\t\tinsertATElement(atElement, conn);\n\t\t\t}\n\t\t\t\n\t\t\tisInsert = true;\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\tthrow new DAOException(e);\n\t\t\t\n\t\t} finally {\n\t\t\tDbUtils.closeQuietly(conn);\n\t\t\tDbUtils.closeQuietly(stmtInsert);\n\t\t\tDbUtils.closeQuietly(rsId);\n\t\t}\n\t\t\n\t\treturn "} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"ted boolean ","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\n\n\t * \n\t */\n\tprotected boolean insertFolder(Folder folder, Connection conn) {\n\t\tPreparedStatement stmtInsert = null;\n\t\tResultSet rsId = null;\n\t\tboolean isInsert = false;\n\t\ttry {\n\t\t\tStringBuilder sbInsert = new StringBuilder()\n\t\t\t\t.append(INSERT_INTO)\n\t\t\t\t.append(folderTableName)\n\t\t\t\t.append(OPEN_BRACKET)\n\t\t\t\t.append(folderNameColumnName).append(COMMA)\n\t\t\t\t.append(folderDescriptionColumnName)\n\t\t\t\t.append(CLOSE_BRACKET)\n\t\t\t\t.append(VALUES).append(OPEN_BRACKET)\n\t\t\t\t.append(APOSTROPHE).append(folder.getName()).append(APOSTROPHE).append(COMMA)\n\t\t\t\t.append(APOSTROPHE).append(folder.getDescription()).append(APOSTROPHE)\n\t\t\t\t.append(CLOSE_BRACKET);\n\n\t\t\tstmtInsert = conn.prepareStatement(sbInsert.toString(), \n\t\t\t\t\tStatement.RETURN_GENERATED_KEYS);\n\t\t\tATUILog4j.getLogger().debug(sbInsert.toString());\n\t\t\tstmtInsert.executeUpdate();\n\t\t\t\n\t\t\t// Se recupera el id recien insertado para asignarselo al elemento\n\t\t\trsId = stmtInsert.getGeneratedKeys();\n\t\t\tif (rsId != null && rsId.next()) {\n\t\t\t\tint newFolderId = rsId.getBigDecimal(1).intValue();\n\t\t\t\tfolder.setId(newFolderId);\n\t\t\t}\t\t\n\t\t\t\n\t\t\t// Se crea en tablas la relacion con el elemento padre en el editor\n\t\t\tif (folder.getTreeParent() instanceof AbstractProject) {\n\t\t\t\tinsertRelProject(folder, conn);\n\t\t\t\t\n\t\t\t} else if (folder.getTreeParent() instanceof Folder) {\n\t\t\t\t// Se incluye la relacion con el padre\n\t\t\t\tinsertRelFolder(folder, conn);\n\t\t\t} \n\t\t\t\n\t\t\t// Se inserta en tablas sus hijos, si los tiene\n\t\t\tfor (IATElement atElement : folder.getChildrens()) {\n\t\t\t\t// Se inserta en tablas sus hijos, si los tiene\n\t\t\t\tatElement.setTreeParent(folder);\n\t\t\t\tinsertATElement(atElement, conn);\n\t\t\t}\n\t\t\t\n\t\t\tisInsert = true;\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\tthrow new DAOException(e);\n\t\t\t\n\t\t} finally {\n\t\t\tDbUtils.closeQuietly(stmtInsert);\n\t\t\tDbUtils.closeQuietly(rsId);\n\t\t}\n\t\t\n\t\treturn "} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"ted boolean ins","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\nsert;\n\t}\n\t\n\tprotected boolean insertRelFolder(IATElement atElement, Connection conn) throws SQLException {\n\t\tif(atElement.getTreeParent() instanceof AbstractProject) {\n\t\t\treturn insertRelProject(atElement, conn);\n\t\t} else {\n\t\t\treturn insertRelFolder(atElement.getTreeParent().getId(), atElement.getId(), co"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"ted boolean inse","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\neturn\n\t */\n\tprotected boolean insertRelProject(IATElement atElement, Connection conn) {\n\t\tPreparedStatement stmtInsert = null;\n\t\tboolean isInsert = false;\n\t\ttry {\n\t\t\tStringBuilder sbInsert = new StringBuilder()\n\t\t\t\t.append(INSERT_INTO)\n\t\t\t\t.append(relProjectFolderTableName)\n\t\t\t\t.append(OPEN_BRACKET)\n\t\t\t\t.append(relProjectIdColumnName).append(COMMA)\n\t\t\t\t.append(relFolderIdColumnName)\n\t\t\t\t.append(CLOSE_BRACKET)\n\t\t\t\t.append(VALUES).append(OPEN_BRACKET)\n\t\t\t\t.append(atElement.getTreeParent().getId()).append(COMMA)\n\t\t\t\t.append(atElement.getId()).append(CLOSE_BRACKET);\n\n\t\t\tstmtInsert = conn.prepareStatement(sbInsert.toString());\n\t\t\tATUILog4j.getLogger().debug(sbInsert.toString());\n\t\t\tstmtInsert.execute();\n\t\t\t\n\t\t\tisInsert = true;\n\n\t\t} catch (SQLException e) {\n\t\t\tthrow new DAOException(e);\n\t\t\t\n\t\t} finally {\n\t\t\tDbUtils.closeQuietly(stmtInsert);\n\t\t}\n\t\t\n\t\treturn "} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"IATElement> get","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\neturn\n\t */\n\tprivate List<IATElement> getRootChildren(AbstractComposite parent) {\n\t\tConnection conn = getConnection();\n\t\tPreparedStatement stmtSelect = null;\n\t\tResultSet rs = null;\n\t\tList<IATElement> treeListReturn = new ArrayList<IATElement>();\n\t\ttry {\n\t\t\t// Se obtienen los hijos de tipo ATProject\n\t\t\tStringBuilder sbSelect = new StringBuilder(SELECT)\n\t\t\t\t.append(projectIdColumnName).append(COMMA)\n\t\t\t\t.append(projectNameColumnName)\n\t\t\t\t.append(FROM)\n\t\t\t\t.append(projectTableName)\n\t\t\t\t.append(ORDER_BY)\n\t\t\t\t.append(projectNameColumnName);\n\t\t\t\n\t\t\tstmtSelect = conn.prepareStatement(sbSelect.toString());\n\t\t\trs = stmtSelect.executeQuery();\n\t\t\t\n\t\t\t// Se añaden a la lista\n\t\t\twhile (rs.next()) {\n\t\t\t\tIATElement atElement = ATElementFactory.createITreeComponent(projectType);\n\t\t\t\tatElement.setId(rs.getInt(1));\n\t\t\t\tatElement.setName(rs.getString(2));\n\t\t\t\t\n\t\t\t\ttreeListReturn.add(atElement);\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\tthrow new DAOException(e);\n\t\t\t\n\t\t} finally {\n\t\t\tDbUtils.closeQuietly(conn);\n\t\t\tDbUtils.closeQuietly(stmtSelect);\n\t\t\tDbUtils.closeQuietly(rs);\n\t\t}\n\t\treturn treeL"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"<IATElement> getPr","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\nReturn;\n\t}\n\n\tpublic List<IATElement> getProjectChildren(AbstractComposite parent) {\n\t\tConnection conn = getConnection();\n\t\tPreparedStatement stmtSelect = null;\n\t\tResultSet rs = null;\n\t\tList<IATElement> treeListReturn = new ArrayList<IATElement>();\n\t\ttry {\n\t\t\tint parentId = parent.getId();\n\t\t\t\n\t\t\t// Se obtienen los hijos de tipo folder\n\t\t\tStringBuilder sbSelect = new StringBuilder(SELECT)\n\t\t\t\t.append(folderTableName).append(POINT).append(folderIdColumnName).append(COMMA)\n\t\t\t\t.append(folderNameColumnName)\n\t\t\t\t.append(FROM)\n\t\t\t\t.append(folderTableName).append(COMMA).append(relProjectFolderTableName)\n\t\t\t\t.append(WHERE)\n\t\t\t\t.append(relProjectIdColumnName).append(\" = \").append(parentId) //$NON-NLS-1$\n\t\t\t\t.append(AND)\n\t\t\t\t.append(folderTableName).append(POINT).append(folderIdColumnName)\n\t\t\t\t.append(EQUAL)\n\t\t\t\t.append(relProjectFolderTableName).append(POINT).append(relFolderIdColumnName)\n\t\t\t\t.append(ORDER_BY)\n\t\t\t\t.append(folderNameColumnName);\n\t\t\t\n\t\t\tstmtSelect = conn.prepareStatement(sbSelect.toString());\n\t\t\trs = stmtSelect.executeQuery();\n\t\t\t\n\t\t\t// Se añaden a la lista\n\t\t\twhile (rs.next()) {\n\t\t\t\tIATElement atElement = ATElementFactory.createITreeComponent(Folder.TYPE);\n\t\t\t\tatElement.setId(rs.getInt(1));\n\t\t\t\tatElement.setName(rs.getString(2));\n\t\t\t\t\n\t\t\t\ttreeListReturn.add(atElement);\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\tthrow new DAOException(e);\n\t\t\t\n\t\t} finally {\n\t\t\tDbUtils.closeQuietly(conn);\n\t\t\tDbUtils.closeQuietly(stmtSelect);\n\t\t\tDbUtils.closeQuietly(rs);\n\t\t}\n\t\t\n\t\treturn tree"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"t<IATElement> get","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\n@return\n\t */\n\tpublic List<IATElement> getFolderChildren(AbstractComposite parent) {\n\t\tConnection conn = getConnection();\n\t\tPreparedStatement stmtSelect = null;\n\t\tResultSet rs = null;\n\t\tList<IATElement> treeListReturn = new ArrayList<IATElement>();\n\t\ttry {\n\t\t\tint parentId = parent.getId();\n\t\t\t\n\t\t\t// Se obtienen los hijos de tipo folder\n\t\t\tStringBuilder sbSelect = new StringBuilder(SELECT)\n\t\t\t\t.append(folderIdColumnName).append(COMMA)\n\t\t\t\t.append(folderNameColumnName)\n\t\t\t\t.append(FROM).append(folderTableName).append(COMMA).append(relFolderTableName)\n\t\t\t\t.append(WHERE)\n\t\t\t\t.append(relFolderParentColumnName).append(EQUAL).append(parentId)\n\t\t\t\t.append(AND)\n\t\t\t\t.append(folderIdColumnName).append(EQUAL).append(relFolderChildColumnName)\n\t\t\t\t.append(ORDER_BY)\n\t\t\t\t.append(folderNameColumnName);;\n\t\t\t\n\t\t\tstmtSelect = conn.prepareStatement(sbSelect.toString());\n\t\t\trs = stmtSelect.executeQuery();\n\t\t\t\n\t\t\t// Se a�aden a la lista\n\t\t\twhile (rs.next()) {\n\t\t\t\tIATElement folderElement = ATElementFactory.createITreeComponent(Folder.TYPE);\n\t\t\t\tfolderElement.setId(rs.getInt(1));\n\t\t\t\tfolderElement.setName(rs.getString(2));\n\t\n\t\t\t\ttreeListReturn.add(folderElement);\n\t\t\t}\n\t\t\t\n\t\t\t// Se obtienen los hijos de tipo Category\n\t\t\tsbSelect = new StringBuilder(SELECT)\n\t\t\t\t.append(elementIdColumnName)\n\t\t\t\t.append(FROM).append(elementTableName)\n\t\t\t\t.append(WHERE)\n\t\t\t\t.append(elementFolderColumnName).append(EQUAL).append(parentId)\n\t\t\t\t.append(ORDER_BY)\n\t\t\t\t.append(elementNameColumnName);;\n\t\t\t\n\t\t\tstmtSelect = conn.prepareStatement(sbSelect.toString());\n\t\t\trs = stmtSelect.executeQuery();\n\t\t\t\n\t\t\t// Se obtienen los elemento tipo Folder hijos\n\t\t\twhile (rs.next()) {\n\t\t\t\ttreeListReturn.add(getLeaf(rs.getInt(1)));\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\tthrow new DAOException(e);\n\t\t\t\n\t\t} finally {\n\t\t\tDbUtils.closeQuietly(conn);\n\t\t\tDbUtils.closeQuietly(stmtSelect);\n\t\t\tDbUtils.closeQuietly(rs);\n\t\t}\n\t\t\n\t\treturn tr"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"stractComposite","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\nstReturn;\n\t}\n\t\n\tprotected AbstractComposite getFolderParent(Folder folder) {\n\t\tConnection conn = getConnection();\n\t\tPreparedStatement stmtSelect = null;\n\t\tResultSet rs = null;\n\t\tAbstractComposite parent = null;\n\t\ttry {\n\t\t\t// Se obtiene el padre del set.\n\t\t\tStringBuilder sbSelect = new StringBuilder(SELECT)\n\t\t\t\t.append(folderTableName).append(POINT).append(folderIdColumnName).append(COMMA)\n\t\t\t\t.append(folderTableName).append(POINT).append(folderNameColumnName)\n\t\t\t\t.append(FROM)\n\t\t\t\t.append(folderTableName).append(COMMA).append(relFolderTableName)\n\t\t\t\t.append(WHERE)\n\t\t\t\t.append(relFolderTableName).append(POINT).append(relFolderChildColumnName)\n\t\t\t\t.append(EQUAL)\n\t\t\t\t.append(folder.getId())\n\t\t\t\t.append(AND)\n\t\t\t\t.append(folderIdColumnName).append(EQUAL).append(relFolderParentColumnName);\n\t\t\t\n\t\t\tstmtSelect = conn.prepareStatement(sbSelect.toString());\n\t\t\trs = stmtSelect.executeQuery();\n\t\t\t\n\t\t\t// Se rellena la informaci�n del folder.\n\t\t\tif (rs.next()) {\n\t\t\t\tparent = new Folder();\n\t\t\t\tparent.setId(rs.getInt(1));\n\t\t\t\tparent.setName(rs.getString(2));\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tsbSelect =  new StringBuilder(SELECT)\n\t\t\t\t\t.append(projectTableName).append(POINT).append(projectIdColumnName).append(COMMA)\n\t\t\t\t\t.append(projectTableName).append(POINT).append(projectNameColumnName)\n\t\t\t\t\t.append(FROM)\n\t\t\t\t\t.append(projectTableName).append(COMMA)\n\t\t\t\t\t.append(relProjectFolderTableName)\n\t\t\t\t\t.append(WHERE)\n\t\t\t\t\t.append(relProjectFolderTableName).append(POINT).append(relFolderIdColumnName)\n\t\t\t\t\t.append(EQUAL)\n\t\t\t\t\t.append(folder.getId())\n\t\t\t\t\t.append(AND)\n\t\t\t\t\t.append(relProjectFolderTableName).append(POINT).append(relProjectIdColumnName)\n\t\t\t\t\t.append(EQUAL)\n\t\t\t\t\t.append(projectTableName).append(POINT).append(projectIdColumnName);\n\t\t\t\t\n\t\t\t\tstmtSelect = conn.prepareStatement(sbSelect.toString());\n\t\t\t\trs = stmtSelect.executeQuery();\n\t\t\t\t\n\t\t\t\tif (rs.next()) {\n\t\t\t\t\tparent = (AbstractComposite) ATElementFactory.createITreeComponent(projectType);\n\t\t\t\t\tparent.setId(rs.getInt(1));\n\t\t\t\t\tparent.setName(rs.getString(2));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\tthrow new DAOException(e);\n\t\t\t\n\t\t} finally {\n\t\t\tDbUtils.closeQuietly(conn);\n\t\t\tDbUtils.closeQuietly(stmtSelect);\n\t\t\tDbUtils.closeQuietly(rs);\n\t\t}\n\t\t\n\t"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"/\n\tpublic bo","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\n ATProject.\n\t */\n\tpublic boolean existProject(String name) {\n\t\tConnection conn = getConnection();\n\t\tPreparedStatement stmtSelect = null;\n\t\tResultSet rs = null;\n\t\tboolean existProject = false;\n\t\ttry {\n\t\t\t// Se busca elementos ATProject con el mismo nombre\n\t\t\tStringBuilder sbSelect = new StringBuilder(SELECT)\n\t\t\t\t.append(projectIdColumnName)\n\t\t\t\t.append(FROM)\n\t\t\t\t.append(projectTableName)\n\t\t\t\t.append(WHERE)\n\t\t\t\t.append(projectNameColumnName)\n\t\t\t\t.append(EQUAL) //$NON-NLS-1$\n\t\t\t\t.append(APOSTROPHE).append(name).append(APOSTROPHE);\n\n\t\t\tstmtSelect = conn.prepareStatement(sbSelect.toString());\n\t\t\trs = stmtSelect.executeQuery();\n\t\t\t\n\t\t\t// si hay algún resultado es que hay algún AtProject con ese nombre\n\t\t\tif (rs.next()) {\n\t\t\t\texistProject = true;\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException ex) {\n\t\t\tthrow new DAOException(ex);\n\t\t\t\n\t\t} finally {\n\t\t\tDbUtils.closeQuietly(conn);\n\t\t\tDbUtils.closeQuietly(stmtSelect);\n\t\t\tDbUtils.closeQuietly(rs);\n\t\t}\n\t\t\n\t\tret"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"}\n\t\n\tpublic boo","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\nexistProject;\n\t}\n\t\n\tpublic boolean removeATElement(IATElement atElement) {\n\t\tif (atElement instanceof AbstractProject) {\n\t\t\treturn removeProject((AbstractProject) atElement);\n\t\t\t\n\t\t} else if (atElement instanceof Folder) {\n\t\t\treturn removeFolder( (Folder) atElement);\n\t\t\t\n\t\t} else {\n\t\t\treturn removeLeaf((AbstractLea"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"\n\t\n\tprivate b","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\nElement);\n\t\t}\n\t}\n\t\n\tprivate boolean removeProject(AbstractProject project) {\n\t\treturn removeProject("} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"\n\t\n\tprivate b","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\nect.getId());\n\t}\n\t\n\tprivate boolean removeProject(int projectId) {\n\t\tConnection conn = getConnection();\n\t\tPreparedStatement stmtSelect = null;\n\t\tPreparedStatement stmtDelete = null;\n\t\tResultSet rs = null;\n\t\tboolean isRemove = false;\n\t\ttry {\n\t\t\t// Se eliminan los folders hijos\t\n\t\t\tStringBuilder sbSelect = new StringBuilder(SELECT)\n\t\t\t\t.append(relFolderIdColumnName)\n\t\t\t\t.append(FROM)\n\t\t\t\t.append(relProjectFolderTableName)\n\t\t\t\t.append(WHERE)\n\t\t\t\t.append(relProjectIdColumnName).append(\" = \").append(projectId); //$NON-NLS-1$\n\t\t\t\n\t\t\tstmtSelect = conn.prepareStatement(sbSelect.toString());\n\t\t\trs = stmtSelect.executeQuery();\n\t\t\t\n\t\t\twhile (rs.next()) {\n\t\t\t\tremoveFolder(rs.getInt(1));\n\t\t\t}\n\t\t\t\n\t\t\t// Se elimina la carpeta, finalmente\n\t\t\tStringBuilder sbDelete = new StringBuilder(DELETE_FROM)\n\t\t\t\t.append(projectTableName)\n\t\t\t\t.append(WHERE)\n\t\t\t\t.append(projectIdColumnName).append(EQUAL).append(projectId); //$NON-NLS-1$\n\t\t\t\n\t\t\tstmtDelete = conn.prepareStatement(sbDelete.toString());\n\t\t\tstmtDelete.execute();\n\t\t\t\n\t\t\tisRemove = true;\n\t\t\t\n\t\t} catch (SQLException ex) {\n\t\t\tthrow new DAOException(Integer.toString(projectId), ex);\n\t\t\t\n\t\t} finally {\n\t\t\tDbUtils.closeQuietly(conn);\n\t\t\tDbUtils.closeQuietly(stmtSelect);\n\t\t\tDbUtils.closeQuietly(stmtDelete);\n\t\t\tDbUtils.closeQuietly(rs);\n\t\t}\n\t\t\n\t"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"ride\n\tpublic bo","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\n mismo nombre.\n\t */\n\t@Override\n\tpublic boolean renameATElement(IATElement atElement, String name) {\n\t\tif (atElement instanceof AbstractProject) {\n\t\t\treturn renameProject(atElement, name);\n\t\t\t\n\t\t} else if (atElement instanceof Folder) {\n\t\t\treturn renameFolder(atElement, name);\n\t\t\t\n\t\t} else {\n\t\t\treturn renameLeaf(atEleme"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"}\n\t\n\tprivate ","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\nname);\n\t\t}\t\n\t\t\n\t}\n\t\n\tprivate boolean renameProject(IATElement atElement, String name) {\n\t\tConnection conn = getConnection();\n\t\tPreparedStatement stmtUpdate = null;\n\t\tboolean isRename = false;\n\t\ttry {\n\t\t\tStringBuilder sbUpdate = new StringBuilder(UPDATE)\n\t\t\t\t.append(projectTableName)\n\t\t\t\t.append(SET)\n\t\t\t\t.append(projectNameColumnName)\n\t\t\t\t.append(EQUAL) //$NON-NLS-1$\n\t\t\t\t.append(APOSTROPHE).append(name).append(APOSTROPHE)\n\t\t\t\t.append(WHERE)\n\t\t\t\t.append(projectIdColumnName).append(\" = \").append(atElement.getId()); //$NON-NLS-1$\n\n\t\t\tstmtUpdate = conn.prepareStatement(sbUpdate.toString());\n\t\t\tstmtUpdate.executeUpdate();\n\t\t\t\n\t\t\tisRename = true;\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\tthrow new DAOException(e);\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\tthrow new ATUIException(e);\n\t\t\t\n\t\t} finally {\n\t\t\tDbUtils.closeQuietly(conn);\n\t\t\tDbUtils.closeQuietly(stmtUpdate);\n\t\t}\n\t\t\n"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"ist<AbstractPr","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\nstractProject'\n\t */\n\tpublic List<AbstractProject> getProjectList() {\n\t\tList<AbstractProject> projectList = new ArrayList<AbstractProject>();\n\t\tConnection conn = getConnection();\n\t\tPreparedStatement stmtSelect = null;\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\tStringBuilder sbSelect = new StringBuilder(SELECT)\n\t\t\t\t.append(projectIdColumnName).append(COMMA)\n\t\t\t\t.append(projectNameColumnName)\n\t\t\t\t.append(FROM).append(projectTableName);\n\n\t\t\tstmtSelect = conn.prepareStatement(sbSelect.toString());\n\t\t\trs = stmtSelect.executeQuery();\n\t\t\t\n\t\t\twhile (rs.next()) { \n\t\t\t\tAbstractProject project = (AbstractProject) ATElementFactory.createITreeComponent(projectType);\n\t\t\t\tproject.setId(rs.getInt(1));\n\t\t\t\tproject.setName(rs.getString(2));\n\t\t\t\tproject.setDescription(rs.getString(3));\n\t\t\t\tprojectList.add(project);\n\t\t\t}\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\tthrow new DAOException(e);\n\t\t\t\n\t\t} finally {\n\t\t\tDbUtils.closeQuietly(conn);\n\t\t\tDbUtils.closeQuietly(stmtSelect);\n\t\t\tDbUtils.closeQuietly(rs);\n\t\t}\n\t\t\n\t\tr"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"\t\n\t}\n\n\tpublic Strin","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\nUpdate);\n\t\t}\n\t\t\n\t}\n\n\tpublic String getProjectTableName() {\n\t\treturn"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":";\n\t}\n\n\tpublic String getRelP","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\nojectTableName;\n\t}\n\n\tpublic String getRelProjectFolderTableName() {\n\t\treturn relProje"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":";\n\t}\n\n\tpublic String g","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\nolderTableName;\n\t}\n\n\tpublic String getProjectIdColumnName() {\n\t\treturn pr"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":";\n\t}\n\n\tpublic String get","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\nctIdColumnName;\n\t}\n\n\tpublic String getProjectNameColumnName() {\n\t\treturn proj"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":";\n\t}\n\n\tpublic String getPr","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\nNameColumnName;\n\t}\n\n\tpublic String getProjectActiveColumnName() {\n\t\treturn projec"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":";\n\t}\n\n\tpublic String getR","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\ntiveColumnName;\n\t}\n\n\tpublic String getRelProjectIdColumnName() {\n\t\treturn relPr"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":";\n\t}\n\n\tpublic String get","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\nctIdColumnName;\n\t}\n\n\tpublic String getRelFolderIdColumnName() {\n\t\treturn relF"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":";\n\t}\n\n\tpublic ","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\nerIdColumnName;\n\t}\n\n\tpublic String getProjectType() {\n\t\tr"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"ride\n\tpublic boolean ","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\n= projectType;\n\t}\n\t\n\t@Override\n\tpublic boolean updateATElementParent(IATElement atElement, IATElement atElementParent) {\n\t\tif (atElement instanceof Folder) {\n\t\t\t// El origen es un Proyecto\n\t\t\tif (getParent(atElement) instanceof AbstractProject) {\n\t\t\t\t\n\t\t\t\t// El destino es un Proyecto\n\t\t\t\tif (atElementParent instanceof AbstractProject) { \n\t\t\t\t\treturn updateExtProjectFolderParent (atElement, atElementParent);\n\t\t\t\t// El destino es un Folder\n\t\t\t\t} else { \n\t\t\t\t\treturn updateProjectFolderParent(atElement, atElementParent);\n\t\t\t\t}\n\n\t\t\t// El origen es un Folder\n\t\t\t} else { \n\t\t\t\tif (atElementParent instanceof AbstractProject) {\n\t\t\t\t\treturn updateFolderProjectParent(atElement, atElementParent);\n\t\t\t\t} else {\n\t\t\t\t\treturn updateFolderParent(atElement, atElementParent);\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else if (atElement instanceof AbstractLeaf) {\n\t\t\treturn updateLeafParent(atElement, atElementParent);\n\n\t\t} else {\n\t\t"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"\t\n\tprotected boolean updateE","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\nurn false;\n\t\t}\n\t}\n\t\n\tprotected boolean updateExtProjectFolderParent(IATElement sourceElement, IATElement targetElement) {\n\t\tConnection conn = getConnection();\n\t\tPreparedStatement stmtUpdate = null;\n\t\tboolean isUpdate = false;\n\t\ttry {\n\t\t\tStringBuilder sbUpdate = new StringBuilder(UPDATE)\n\t\t\t\t.append(getRelProjectFolderTableName())\n\t\t\t\t.append(SET)\n\t\t\t\t.append(getRelProjectIdColumnName())\n\t\t\t\t.append(EQUAL).append(targetElement.getId())\n\t\t\t\t.append(WHERE)\n\t\t\t\t.append(getRelFolderIdColumnName())\n\t\t\t\t.append(EQUAL).append(sourceElement.getId());\n\t\n\t\t\tstmtUpdate = conn.prepareStatement(sbUpdate.toString());\n\t\t\tstmtUpdate.executeUpdate();\n\t\n\t\t\tisUpdate = true;\n\t\n\t\t} catch (SQLException e) {\n\t\t\tthrow new DAOException(e);\n\t\n\t\t} finally {\n\t\t\tDbUtils.closeQuietly(conn);\n\t\t\tDbUtils.closeQuietly(stmtUpdate);\n\t\t}\n\t\n"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"\n\n\tprotected boolean upda","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\neturn isUpdate;\n\t}\n\n\tprotected boolean updateProjectFolderParent(IATElement sourceElement, IATElement targetElement) {\n\t\tConnection conn = getConnection();\n\t\tPreparedStatement stmtDelete = null;\n\t\tPreparedStatement stmtInsert = null;\n\t\tboolean isRename = false;\n\t\ttry {\n\t\t\tStringBuilder sbDelete = new StringBuilder(DELETE_FROM)\n\t\t\t\t.append(getRelProjectFolderTableName())\n\t\t\t\t.append(WHERE)\n\t\t\t\t.append(getRelFolderIdColumnName())\n\t\t\t\t.append(EQUAL).append(sourceElement.getId());\n\t\n\t\t\tstmtDelete = conn.prepareStatement(sbDelete.toString());\n\t\t\tstmtDelete.executeUpdate();\n\t\t\t\n\t\t\tStringBuilder sbInsert = new StringBuilder(INSERT_INTO)\n\t\t\t\t.append(getRelFolderTableName())\n\t\t\t\t.append(OPEN_BRACKET)\n\t\t\t\t.append(getRelFolderParentColumnName()).append(COMMA)\n\t\t\t\t.append(getRelFolderChildColumnName())\n\t\t\t\t.append(CLOSE_BRACKET)\n\t\t\t\t.append(VALUES)\n\t\t\t\t.append(OPEN_BRACKET)\n\t\t\t\t.append(targetElement.getId()).append(COMMA)\n\t\t\t\t.append(sourceElement.getId())\n\t\t\t\t.append(CLOSE_BRACKET);\n\t\t\t\n\t\t\tstmtInsert = conn.prepareStatement(sbInsert.toString());\n\t\t\tstmtInsert.executeUpdate();\n\t\n\t\t\tisRename = true;\n\t\n\t\t} catch (SQLException e) {\n\t\t\tthrow new DAOException(e);\n\t\n\t\t} finally {\n\t\t\tDbUtils.closeQuietly(conn);\n\t\t\tDbUtils.closeQuietly(stmtInsert);\n\t\t\tDbUtils.closeQuietly(stmtDelete);\n\t\t}\n\t\n"} {"path":"downloaded/AbstractGPDAOTreeProject.java","method_name":"\n\n\tprotected boolean upda","content":"\n\t\n\t\n\t/**\n\t * Carga de Base de datos los elementos hijo de un elemento proyecto.\n\t * Si el parametreo 'loadAll' es \"true\" carga el arbol completo, y si es \"false\"\n\t * únicamente carga un nivel.\n\t * \n\t * @param project\n\t * @param loadAll\n\t * @retu\neturn isRename;\n\t}\n\n\tprotected boolean updateFolderProjectParent(IATElement sourceElement, IATElement targetElement) {\n\t\tConnection conn = getConnection();\n\t\tPreparedStatement stmtDelete = null;\n\t\tPreparedStatement stmtInsert = null;\n\t\tboolean isRename = false;\n\t\ttry {\n\t\t\tfinal StringBuilder sbDelete = new StringBuilder(DELETE_FROM)\n\t\t\t\t.append(getRelFolderTableName())\n\t\t\t\t.append(WHERE)\n\t\t\t\t.append(getRelFolderChildColumnName())\n\t\t\t\t.append(EQUAL).append(sourceElement.getId());\n\t\n\t\t\tstmtDelete = conn.prepareStatement(sbDelete.toString());\n\t\t\tstmtDelete.executeUpdate();\n\t\t\t\n\t\t\tfinal StringBuilder sbInsert = new StringBuilder(INSERT_INTO)\n\t\t\t\t.append(getRelProjectFolderTableName())\n\t\t\t\t.append(OPEN_BRACKET)\n\t\t\t\t.append(getRelProjectIdColumnName()).append(COMMA)\n\t\t\t\t.append(getRelFolderIdColumnName())\n\t\t\t\t.append(CLOSE_BRACKET)\n\t\t\t\t.append(VALUES)\n\t\t\t\t.append(OPEN_BRACKET)\n\t\t\t\t.append(targetElement.getId()).append(COMMA)\n\t\t\t\t.append(sourceElement.getId())\n\t\t\t\t.append(CLOSE_BRACKET);\n\t\t\t\n\t\t\tstmtInsert = conn.prepareStatement(sbInsert.toString());\n\t\t\tstmtInsert.executeUpdate();\n\t\n\t\t\tisRename = true;\n\t\n\t\t} catch (SQLException e) {\n\t\t\tthrow new DAOException(e);\n\t\n\t\t} finally {\n\t\t\tDbUtils.closeQuietly(conn);\n\t\t\tDbUtils.closeQuietly(stmtInsert);\n\t\t\tDbUtils.closeQuietly(stmtDelete);\n\t\t}\n\t\n"} {"path":"downloaded/CountryDAO.java","method_name":"saveOrDelete","content":"/**\n     *\n     * @param keyword\n     * @param isGetById\n     * @return\n     */\npublic boolean saveOrDelete(Country country, boolean isSave) {\n        boolean result = false;\n        session = this.factory.openSession();\n        transaction = session.beginTransaction();\n        try {\n            if (isSave) {\n                session.save(country);\n            } else {\n                session.delete(country);\n            }\n\n            transaction.commit();\n            result = true;\n        } catch (Exception e) {\n            if (transaction != null) {\n                transaction.rollback();\n            }\n        } finally {\n            session.close();\n        }\n        return result;\n    }"} {"path":"downloaded/CountryDAO.java","method_name":"search","content":"/**\n     *\n     * @param keyword\n     * @param isGetById\n     * @return\n     */\npublic List<Country> search(Object key, boolean isById) {\n        List<Country> listCountry = new ArrayList<>();\n        session = this.factory.openSession();\n        transaction = session.beginTransaction();\n        try {\n            if (isById) {\n                listCountry = session.createQuery(\"FROM Country WHERE id = '\" + key + \"' order by 1\").list();\n            } else {\n                listCountry = session.createQuery(\"FROM Country WHERE id like '%\"\n                        + key + \"%' or name like '%\" + key + \"%' or region like '%\" + key + \"%' order by 1\").list();\n            }\n            transaction.commit();\n        } catch (Exception e) {\n            e.printStackTrace();\n            if (transaction != null) {\n                transaction.rollback();\n            }\n        } finally {\n            session.close();\n        }\n        return listCountry;\n\n    }"} {"path":"downloaded/InterviewController.java","method_name":"pullApplicantsByJob","content":"/**\n   * Send interview.\n   */\n@PostMapping(value = \"/interSend\")\n  public String pullApplicantsByJob(@RequestParam(\"interType\") String interType,\n      @RequestParam(\"interComment\") String interComment, \n      @RequestParam(\"interPlace\") String interPlace,\n      @RequestParam(\"interTime\") String interTime, @RequestParam(\"apId\") Integer apId) {\n    Integer jobId = interviewService\n        .saveInterview(interType, interComment, interPlace, interTime, apId);\n    Application application = applicationService.findByPrimaryKey(apId);\n    applicationService.updateApplication(application);\n    return \"redirect:/applications?id=\" + jobId;\n  }"} {"path":"downloaded/InterviewController.java","method_name":"pullApplicantsByJob","content":"/**\n   * Send interview.\n   */\n@GetMapping(value = \"/refuseUser/{apId}/{jobId}\")\n  public String pullApplicantsByJob(@PathVariable(\"apId\") Integer apId, \n      @PathVariable(\"jobId\") String jobId) {\n    applicationService.refuseUser(apId);\n    return \"redirect:/applications?id=\" + jobId;\n  }"} {"path":"downloaded/InterviewController.java","method_name":"updateInterviewResult","content":"/**\n   * update interviewResult.\n   */\n@PostMapping(value = \"/updateInterviewResult\")\n  public String updateInterviewResult(@RequestParam(\"interviewId\") Integer interviewId,\n      @RequestParam(\"interviewResult\") String interviewResult,\n      @RequestParam(value = \"interviewRating\", required = false) String interviewRating) {\n    Interview interview = interviewService.findByPrimaryKey(interviewId);\n    Application app = applicationService\n        .findByPrimaryKey(interview.getApplication().getApplicationId());\n    User user = app.getUser();\n    Double rating = user.getRating();\n    Double newRating = null;\n    if (interviewRating != null) {\n      newRating = Double.valueOf(interviewRating);\n    } else {\n      newRating = 0.0;\n    }\n    if (interview.getInterviewType().equals(\"錄取\") && user.getRating() == null) {\n      rating = newRating;\n      if (interviewResult.equals(\"缺席\")) {\n        user.setAbscence((user.getAbscence() + 1));\n      } else if (interviewResult.equals(\"應約\")) {\n        user.setPresence(user.getPresence() + 1);\n      }\n      user.setRating(rating);\n      userService.updateUser(user);\n    } else if (interview.getInterviewType().equals(\"錄取\")) {\n      if (interviewResult.equals(\"缺席\")) {\n        user.setAbscence((user.getAbscence() + 1));\n      } else if (interviewResult.equals(\"應約\")) {\n        user.setPresence(user.getPresence() + 1);\n      }\n      user.setRating((rating + newRating) / 2);\n      userService.updateUser(user);\n    }\n    interviewService.updateInterviewResult(interviewResult, interviewId);\n    return \"redirect:/app"} {"path":"downloaded/TeacherClasses.java","method_name":"getId","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column teacherclasses.id\n     *\n     * @return the value of teacherclasses.id\n     *\n     * @mbg.generated Tue Apr 14 16:30:53 CST 2020\n     */\npublic Integer getId() {\n        return id;\n    }"} {"path":"downloaded/TeacherClasses.java","method_name":"getTid","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column teacherclasses.Tid\n     *\n     * @return the value of teacherclasses.Tid\n     *\n     * @mbg.generated Tue Apr 14 16:30:53 CST 2020\n     */\npublic String getTid() {\n        return tid;\n    }"} {"path":"downloaded/TeacherClasses.java","method_name":"getClazz","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column teacherclasses.clazz\n     *\n     * @return the value of teacherclasses.clazz\n     *\n     * @mbg.generated Tue Apr 14 16:30:53 CST 2020\n     */\npublic Integer getClazz() {\n        return clazz;\n    }"} {"path":"downloaded/UnitFoodModel.java","method_name":"rrayList<U","content":"/**\n     * Lấy toàn bộ danh sách đơn vị tính trả về view\n     * create by lvhung on 6/5/2019\n     * @return li\nit\n     */\n    @Override\n    public ArrayList<Unit> getAllUnit() {\n        return mDatabase.getA"} {"path":"downloaded/UiUtils.java","method_name":"    public static ","content":"    /**\n     * 反射获取状态栏高度\n     *\n     * @param context\n\n* @return\n     */\n    public static int getStatusBarHeight(Context context) {\n        return context.getResources().getDimensionPixelSize(context.getResources().getIdentifier(\"status_bar_height\", \"dime"} {"path":"downloaded/UiUtils.java","method_name":"n 屏幕宽度","content":"    /**\n     * 反射获取状态栏高度\n     *\n     * @param context\n\ntext\n     * @return 屏幕宽度像素值\n     */\n    public static int getDeviceWidth(Context context) {\n        DisplayMetrics metrics = context.getResources().getDispl"} {"path":"downloaded/UiUtils.java","method_name":"am context cont","content":"    /**\n     * 反射获取状态栏高度\n     *\n     * @param context\n\n     *\n     * @param context context\n     * @return 屏幕高度像素值\n     */\n    public static int getDeviceHeight(Context context) {\n        DisplayMetrics metrics = "} {"path":"downloaded/UiUtils.java","method_name":" cont","content":"    /**\n     * 反射获取状态栏高度\n     *\n     * @param context\n\n   *\n     * @param context context\n     * @param dpValue dp值\n     * @return 像素值\n     */\n    public static int dp2px(Context context, float dpValue) {\n        float scale = cont"} {"path":"downloaded/UiUtils.java","method_name":"   * ","content":"    /**\n     * 反射获取状态栏高度\n     *\n     * @param context\n\n\n    }\n\n    /**\n     * px转dp\n     * @param context\n     * @param pxValue\n     * @return\n     */\n    public static int px2dp(Context context, float pxValue) {\n        final float scale = co"} {"path":"downloaded/VpnClientConfiguration.java","method_name":"vpnClientAddressPool","content":"/**\n     * Get the vpnClientAddressPool value.\n     *\n     * @return the vpnClientAddressPool value\n     */\npublic AddressSpace vpnClientAddressPool() {\n        return this.vpnClientAddressPool;\n    }"} {"path":"downloaded/VpnClientConfiguration.java","method_name":"withVpnClientAddressPool","content":"/**\n     * Set the vpnClientAddressPool value.\n     *\n     * @param vpnClientAddressPool the vpnClientAddressPool value to set\n     * @return the VpnClientConfiguration object itself.\n     */\npublic VpnClientConfiguration withVpnClientAddressPool(AddressSpace vpnClientAddressPool) {\n        this.vpnClientAddressPool = vpnClientAddressPool;\n        return this;\n    }"} {"path":"downloaded/VpnClientConfiguration.java","method_name":"vpnClientRootCertificates","content":"/**\n     * Get the vpnClientRootCertificates value.\n     *\n     * @return the vpnClientRootCertificates value\n     */\npublic List<VpnClientRootCertificateInner> vpnClientRootCertificates() {\n        return this.vpnClientRootCertificates;\n    }"} {"path":"downloaded/VpnClientConfiguration.java","method_name":"withVpnClientRootCertificates","content":"/**\n     * Set the vpnClientRootCertificates value.\n     *\n     * @param vpnClientRootCertificates the vpnClientRootCertificates value to set\n     * @return the VpnClientConfiguration object itself.\n     */\npublic VpnClientConfiguration withVpnClientRootCertificates(List<VpnClientRootCertificateInner> vpnClientRootCertificates) {\n        this.vpnClientRootCertificates = vpnClientRootCertificates;\n        return this;\n    }"} {"path":"downloaded/VpnClientConfiguration.java","method_name":"vpnClientRevokedCertificates","content":"/**\n     * Get the vpnClientRevokedCertificates value.\n     *\n     * @return the vpnClientRevokedCertificates value\n     */\npublic List<VpnClientRevokedCertificateInner> vpnClientRevokedCertificates() {\n        return this.vpnClientRevokedCertificates;\n    }"} {"path":"downloaded/VpnClientConfiguration.java","method_name":"withVpnClientRevokedCertificates","content":"/**\n     * Set the vpnClientRevokedCertificates value.\n     *\n     * @param vpnClientRevokedCertificates the vpnClientRevokedCertificates value to set\n     * @return the VpnClientConfiguration object itself.\n     */\npublic VpnClientConfiguration withVpnClientRevokedCertificates(List<VpnClientRevokedCertificateInner> vpnClientRevokedCertificates) {\n        this.vpnClientRevokedCertificates = vpnClientRevokedCertificates;\n        return this;\n    }"} {"path":"downloaded/Thing2.java","method_name":"getThingId","content":"/**\n     * Gets the value of the thingId property.\n     * \n     * @return\n     *     possible object is\n     *     {@link ThingKey }\n     *     \n     */\npublic ThingKey getThingId() {\n        return thingId;\n    }"} {"path":"downloaded/Thing2.java","method_name":"getTypeId","content":"/**\n     * Gets the value of the typeId property.\n     * \n     * @return\n     *     possible object is\n     *     {@link ThingType }\n     *     \n     */\npublic ThingType getTypeId() {\n        return typeId;\n    }"} {"path":"downloaded/Thing2.java","method_name":"getThingState","content":"/**\n     * Gets the value of the thingState property.\n     * \n     * @return\n     *     possible object is\n     *     {@link ThingState }\n     *     \n     */\npublic ThingState getThingState() {\n        return thingState;\n    }"} {"path":"downloaded/Thing2.java","method_name":"getFlags","content":"/**\n     * Gets the value of the flags property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Long }\n     *     \n     */\npublic Long getFlags() {\n        return flags;\n    }"} {"path":"downloaded/Thing2.java","method_name":"getEffDate","content":"/**\n     * Gets the value of the effDate property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Date }\n     *     \n     */\npublic Date getEffDate() {\n        return effDate;\n    }"} {"path":"downloaded/Thing2.java","method_name":"getCreated","content":"/**\n     * Gets the value of the created property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Audit2 }\n     *     \n     */\npublic Audit2 getCreated() {\n        return created;\n    }"} {"path":"downloaded/Thing2.java","method_name":"getUpdated","content":"/**\n     * Gets the value of the updated property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Audit2 }\n     *     \n     */\npublic Audit2 getUpdated() {\n        return updated;\n    }"} {"path":"downloaded/Thing2.java","method_name":"getDataXml","content":"/**\n     * Gets the value of the dataXml property.\n     */\npublic DataXml getDataXml() {\n        return this.dataXml;\n    }"} {"path":"downloaded/Thing2.java","method_name":"getBlobPayload","content":"/**\n     * Gets the value of the blobPayload property.\n     * \n     * @return\n     *     possible object is\n     *     {@link BlobPayload }\n     *     \n     */\npublic BlobPayload getBlobPayload() {\n        return blobPayload;\n    }"} {"path":"downloaded/Thing2.java","method_name":"getEffPermissions","content":"/**\n     * Gets the value of the effPermissions property.\n     * \n     * @return\n     *     possible object is\n     *     {@link EffectivePermissions }\n     *     \n     */\npublic EffectivePermissions getEffPermissions() {\n        return effPermissions;\n    }"} {"path":"downloaded/Thing2.java","method_name":"getTags","content":"/**\n     * Gets the value of the tags property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\npublic String getTags() {\n        return tags;\n    }"} {"path":"downloaded/Thing2.java","method_name":"getData","content":"/**\n     * Sets the value of the tags property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\npublic AbstractThing getData() {\n    \treturn dataXml.getAny();\n    }"} {"path":"downloaded/Thing2.java","method_name":"hasBlobData","content":"/**\n     * Sets the value of the tags property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\npublic Boolean hasBlobData() {\n    \treturn blobPayload != null;\n    }"} {"path":"downloaded/TabelaDeFeriados.java","method_name":"> getFeriad","content":"\t/**\n\t * Retorna todos os feriados da tabela até 2050.\n\t * \n\t * @param ano\n\t \n\n\tpublic static List<LocalDate> getFeriados() {\n\t\tList<LocalDate> listaDeFeriados = Arrays.asList(TabelaDeFeriados.FERIADOS.split(\" \")).stream()\n\t\t\t\t.map(dataStr -> LocalDate.parse(dataStr, formatter))\n\t\t\t\t.collect(Collectors.toList());\n\t\treturn listaDeFeriados;\n"} {"path":"downloaded/TabelaDeFeriados.java","method_name":"e> getFeria","content":"\n\t/**\n\t * Retorna os feriados da tabela para um ano específico.\n\t * \n\t * @param ano\n\t * @throws Exception \n\t\n/\n\tpublic static List<LocalDate> getFeriados(int ano) throws Exception {\n\t\tif (ano < 2020 || ano > 2050) {\n\t\t\tthrow new Exception(\"Data deve estar entre 2020 e 2050.\");\n\t\t}\n\t\treturn getFeriados().stream()\n\t\t\t\t.filter(data -> data.getYear() == ano)\n\t\t\t\t.collect(Collectors.toList());"} {"path":"downloaded/TabelaDeFeriados.java","method_name":"ean isFer","content":"\n\n\t/**\n\t * Verifica se a data é um feriado entre 2020 e 2050.\n\t * \n\t * @return\n\t * @throws Exception\n\n*/\n\tpublic static boolean isFeriado(LocalDate data) throws Exception {\n\t\tif (data.getYear() < 2020 || data.getYear() > 2050) {\n\t\t\tthrow new Exception(\"Data deve estar entre 2020 e 2050.\");\n\t\t}\n\t\treturn getFeriados().stream().anyMatch(localDate -> localDate.equals(data))"} {"path":"downloaded/IssuedBook.java","method_name":"getData","content":"/**\n     * @override method from book class \n     * @return string array with all data from class \n     */\npublic String[] getData(){ \n        // overriding method to account for different data needed for issuedbooks\n        String[] data = new String[6];\n        data[1] = this.getCallNumber();\n        data[2] = Integer.toString(this.getBorrower().getId());\n        data[3] = this.getBorrower().getName();\n        data[4] = this.getBorrower().getContactNumber();\n        data[5] = this.getIssueDate();\n        return data;\n    }"} {"path":"downloaded/IssuedBook.java","method_name":"getData","content":"/**\n     * @override method from book class \n     * @return string array with all data from class \n     */\npublic String[] getData(int x){\n        // overriding method to account for different data needed for issuedbooks\n        String[] data = new String[6];\n        data[1] = this.getCallNumber();\n        data[2] = this.getName();\n        data[3] = this.getAuthor();\n        data[4] = this.getPublisher();\n        data[5] = this.getIssueDate();\n        return data;\n    }"} {"path":"downloaded/IssuedBook.java","method_name":"getIssueDate","content":"/**\n     * @return the issueDate\n     */\npublic String getIssueDate() {\n        return issueDate;\n    }"} {"path":"downloaded/IssuedBook.java","method_name":"getDueDate","content":"/**\n     * @return the dueDate\n     */\npublic String getDueDate() {\n        return dueDate;\n    }"} {"path":"downloaded/IssuedBook.java","method_name":"getBorrower","content":"/**\n     * @return the borrower\n     */\npublic Student getBorrower() {\n        return borrower;\n    }"} {"path":"downloaded/StationPartition.java","method_name":" connecte","content":" /**\n     * This method checks if the two stations are connected or not\n     *\n     * @param station1 (Station) : the first station\n     * @param station2 (Station) : the second station\n     * @return (boolean) : that station 1 and 2 are connected or not\n     *\n @Override\n    public boolean connected(Station station1, Station station2) {\n        if (station1.id() >= links.length || station2.id() >= links.length) {\n            return station1.id() == station2.id();\n        }\n        return links[station1.id()] == links[station2.id()];\n    "} {"path":"downloaded/NodeExprArrayVar.java","method_name":"variable","content":"/**\n\t * Returns the identifier for this array.\n\t */\npublic String variable()\n\t{\n\t\treturn _var;\n\t}"} {"path":"downloaded/NodeExprArrayVar.java","method_name":"index","content":"/**\n\t * Returns the index of the array for this expression.\n\t */\npublic NodeExpr index()\n\t{\n\t\treturn _index;\n\t}"} {"path":"downloaded/StationPartition.java","method_name":" representativ","content":" /**\n         * this method returns the representative of a set of stations\n         *\n         * @param stationID (int): the id of the station\n         * @return (int) : returns the representative of a set of stations\n         *\n private int representative(int stationID) {\n            if (stationID == stationSet[stationID]) {\n                return stationID;\n            }\n            return representative(stationSet[stationID]);\n\n        "} {"path":"downloaded/StationPartition.java","method_name":" connec","content":" /**\n         * this method returns this builder where we connected the two station in parameter\n         *\n         * @param station1 (Station) : the first station\n         * @param station2 (Station) :  the second station\n         * @return (Builder) : the builder with the two stations connected\n         *\n public Builder connect(Station station1, Station station2) {\n            stationSet[representative(station1.id())] = stationSet[representative(station2.id())];\n            return this;\n        "} {"path":"downloaded/StationPartition.java","method_name":" buil","content":" /**\n         * this methods builds a StationPartition\n         *\n         * @return (StationPartition) : a new StationPartition\n         *\n public StationPartition build() {\n            for (int i = 0; i < stationSet.length; ++i) {\n                stationSet[i] = representative(i);\n            }\n\n            return new StationPartition(stationSet);\n        "} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"getDataNodeCertificate","content":"/**\n   * Get SCM signed certificate for DataNode.\n   *\n   * @param dnDetails   - DataNode Details.\n   * @param certSignReq - Certificate signing request.\n   * @return String         - SCM signed pem encoded certificate.\n   */\n@Override\n  public String getDataNodeCertificate(\n      DatanodeDetailsProto dnDetails,\n      String certSignReq) throws IOException {\n    LOGGER.info(\"Processing CSR for dn {}, UUID: {}\", dnDetails.getHostName(),\n        dnDetails.getUuid());\n    Objects.requireNonNull(dnDetails);\n    checkIfCertSignRequestAllowed(\n        storageContainerManager.getRootCARotationManager(), false, config,\n        \"getDataNodeCertificate\");\n    return getEncodedCertToString(certSignReq, NodeType.DATANODE);\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"getCertificate","content":"/**\n   * Get SCM signed certificate for DataNode.\n   *\n   * @param dnDetails   - DataNode Details.\n   * @param certSignReq - Certificate signing request.\n   * @return String         - SCM signed pem encoded certificate.\n   */\n@Override\n  public String getCertificate(\n      NodeDetailsProto nodeDetails,\n      String certSignReq) throws IOException {\n    LOGGER.info(\"Processing CSR for {} {}, UUID: {}\",\n        nodeDetails.getNodeType(), nodeDetails.getHostName(),\n        nodeDetails.getUuid());\n    Objects.requireNonNull(nodeDetails);\n    checkIfCertSignRequestAllowed(\n        storageContainerManager.getRootCARotationManager(), false, config,\n        \"getCertificate\");\n    return getEncodedCertToString(certSignReq, nodeDetails.getNodeType());\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"getCurrentSecretKey","content":"/**\n   * Get SCM signed certificate for DataNode.\n   *\n   * @param dnDetails   - DataNode Details.\n   * @param certSignReq - Certificate signing request.\n   * @return String         - SCM signed pem encoded certificate.\n   */\n@Override\n  public ManagedSecretKey getCurrentSecretKey() throws SCMSecretKeyException {\n    validateSecretKeyStatus();\n    return secretKeyManager.getCurrentSecretKey();\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"getSecretKey","content":"/**\n   * Get SCM signed certificate for DataNode.\n   *\n   * @param dnDetails   - DataNode Details.\n   * @param certSignReq - Certificate signing request.\n   * @return String         - SCM signed pem encoded certificate.\n   */\n@Override\n  public ManagedSecretKey getSecretKey(UUID id) throws SCMSecretKeyException {\n    validateSecretKeyStatus();\n    return secretKeyManager.getSecretKey(id);\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"getAllSecretKeys","content":"/**\n   * Get SCM signed certificate for DataNode.\n   *\n   * @param dnDetails   - DataNode Details.\n   * @param certSignReq - Certificate signing request.\n   * @return String         - SCM signed pem encoded certificate.\n   */\n@Override\n  public List<ManagedSecretKey> getAllSecretKeys()\n      throws SCMSecretKeyException {\n    validateSecretKeyStatus();\n    return secretKeyManager.getSortedKeys();\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"checkAndRotate","content":"/**\n   * Get SCM signed certificate for DataNode.\n   *\n   * @param dnDetails   - DataNode Details.\n   * @param certSignReq - Certificate signing request.\n   * @return String         - SCM signed pem encoded certificate.\n   */\n@Override\n  public boolean checkAndRotate(boolean force) throws SCMSecretKeyException {\n    validateSecretKeyStatus();\n    try {\n      return secretKeyManager.checkAndRotate(force);\n    } catch (SCMException ex) {\n      LOGGER.error(\"Error rotating secret keys\", ex);\n      throw new SCMSecretKeyException(ex.getMessage(),\n          SCMSecretKeyException.ErrorCode.INTERNAL_ERROR);\n    }\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"getAllRootCaCertificates","content":"/**\n   * Get SCM signed certificate for DataNode.\n   *\n   * @param dnDetails   - DataNode Details.\n   * @param certSignReq - Certificate signing request.\n   * @return String         - SCM signed pem encoded certificate.\n   */\n@Override\n  public synchronized List<String> getAllRootCaCertificates()\n      throws IOException {\n    List<String> pemEncodedList = new ArrayList<>();\n    Set<X509Certificate> certList =\n        scmCertificateClient.getAllRootCaCerts().size() == 0 ?\n            scmCertificateClient.getAllCaCerts() :\n            scmCertificateClient.getAllRootCaCerts();\n    for (X509Certificate cert : certList) {\n      pemEncodedList.add(getPEMEncodedString(cert));\n    }\n    return pemEncodedList;\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"getOMCertificate","content":"/**\n   * Get SCM signed certificate for OM.\n   *\n   * @param omDetails   - OzoneManager Details.\n   * @param certSignReq - Certificate signing request.\n   * @return String         - SCM signed pem encoded certificate.\n   */\n@Override\n  public String getOMCertificate(OzoneManagerDetailsProto omDetails,\n      String certSignReq) throws IOException {\n    LOGGER.info(\"Processing CSR for om {}, UUID: {}\", omDetails.getHostName(),\n        omDetails.getUuid());\n    Objects.requireNonNull(omDetails);\n    checkIfCertSignRequestAllowed(\n        storageContainerManager.getRootCARotationManager(), false, config,\n        \"getOMCertificate\");\n    return getEncodedCertToString(certSignReq, NodeType.OM);\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"getSCMCertificate","content":"/**\n   * Get signed certificate for SCM Node.\n   *\n   * @param scmNodeDetails   - SCM Node Details.\n   * @param certSignReq      - Certificate signing request.\n   * @return String          - SCM signed pem encoded certificate.\n   */\n@Override\n  public String getSCMCertificate(ScmNodeDetailsProto scmNodeDetails,\n      String certSignReq) throws IOException {\n    return getSCMCertificate(scmNodeDetails, certSignReq, false);\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"getSCMCertificate","content":"/**\n   * Get signed certificate for SCM Node.\n   *\n   * @param scmNodeDetails   - SCM Node Details.\n   * @param certSignReq      - Certificate signing request.\n   * @param isRenew          - if SCM is renewing certificate or not.\n   * @return String          - SCM signed pem encoded certificate.\n   */\n@Override\n  public String getSCMCertificate(ScmNodeDetailsProto scmNodeDetails,\n      String certSignReq, boolean isRenew) throws IOException {\n    Objects.requireNonNull(scmNodeDetails);\n    // Check clusterID\n    if (!storageContainerManager.getClusterId().equals(\n        scmNodeDetails.getClusterId())) {\n      throw new IOException(\"SCM ClusterId mismatch. Peer SCM ClusterId \" +\n          scmNodeDetails.getClusterId() + \", primary SCM ClusterId \"\n          + storageContainerManager.getClusterId());\n    }\n\n    checkIfCertSignRequestAllowed(\n        storageContainerManager.getRootCARotationManager(), isRenew, config,\n        \"getSCMCertificate\");\n\n    LOGGER.info(\"Processing CSR for scm {}, nodeId: {}\",\n        scmNodeDetails.getHostName(), scmNodeDetails.getScmNodeId());\n\n    return getEncodedCertToString(certSignReq, NodeType.SCM);\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"getEncodedCertToString","content":"/**\n   *  Request certificate for the specified role.\n   * @param certSignReq - Certificate signing request.\n   * @param nodeType - role OM/SCM/DATANODE\n   * @return String         - SCM signed pem encoded certificate.\n   * @throws IOException\n   */\nprivate synchronized String getEncodedCertToString(String certSignReq,\n      NodeType nodeType) throws IOException {\n    Future<CertPath> future;\n    if (nodeType == NodeType.SCM && rootCertificateServer != null) {\n      future = rootCertificateServer.requestCertificate(certSignReq,\n          KERBEROS_TRUSTED, nodeType);\n    } else {\n      future = scmCertificateServer.requestCertificate(certSignReq,\n          KERBEROS_TRUSTED, nodeType);\n    }\n    try {\n      return getPEMEncodedString(future.get());\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw generateException(e, nodeType);\n    } catch (ExecutionException e) {\n      if (e.getCause() != null) {\n        if (e.getCause() instanceof SCMSecurityException) {\n          throw (SCMSecurityException) e.getCause();\n        } else {\n          throw generateException(e, nodeType);\n        }\n      } else {\n        throw generateException(e, nodeType);\n      }\n    }\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"generateException","content":"/**\n   *  Request certificate for the specified role.\n   * @param certSignReq - Certificate signing request.\n   * @param nodeType - role OM/SCM/DATANODE\n   * @return String         - SCM signed pem encoded certificate.\n   * @throws IOException\n   */\nprivate SCMSecurityException generateException(Exception ex, NodeType role) {\n    SCMSecurityException.ErrorCode errorCode;\n    if (role == NodeType.SCM) {\n      errorCode = SCMSecurityException.ErrorCode.GET_SCM_CERTIFICATE_FAILED;\n    } else if (role == NodeType.OM) {\n      errorCode = SCMSecurityException.ErrorCode.GET_OM_CERTIFICATE_FAILED;\n    } else if (role == NodeType.DATANODE) {\n      errorCode = SCMSecurityException.ErrorCode.GET_DN_CERTIFICATE_FAILED;\n    } else {\n      errorCode = SCMSecurityException.ErrorCode.GET_CERTIFICATE_FAILED;\n    }\n    return new SCMSecurityException(\"generate \" + role.toString() +\n        \" Certificate operation failed\", ex, errorCode);\n\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"getCertificate","content":"/**\n   * Get SCM signed certificate with given serial id.\n   *\n   * @param certSerialId - Certificate serial id.\n   * @return string         - pem encoded SCM signed certificate.\n   */\n@Override\n  public String getCertificate(String certSerialId) throws IOException {\n    LOGGER.debug(\"Getting certificate with certificate serial id {}\",\n        certSerialId);\n    try {\n      X509Certificate certificate =\n          scmCertificateServer.getCertificate(certSerialId);\n      if (certificate != null) {\n        return getPEMEncodedString(certificate);\n      }\n    } catch (CertificateException e) {\n      throw new SCMSecurityException(\"getCertificate operation failed. \", e,\n          GET_CERTIFICATE_FAILED);\n    }\n    LOGGER.info(\"Certificate with serial id {} not found.\", certSerialId);\n    throw new SCMSecurityException(\"Certificate not found\",\n        CERTIFICATE_NOT_FOUND);\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"getCACertificate","content":"/**\n   * Get SCM signed certificate for OM.\n   *\n   * @return string         - Root certificate.\n   */\n@Override\n  public String getCACertificate() throws IOException {\n    LOGGER.debug(\"Getting CA certificate.\");\n    try {\n      return getPEMEncodedString(\n          scmCertificateServer.getCaCertPath());\n    } catch (CertificateException e) {\n      throw new SCMSecurityException(\"getRootCertificate operation failed. \",\n          e, GET_CA_CERT_FAILED);\n    }\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"listCertificate","content":"/**\n   *\n   * @param role            - node role: OM/SCM/DN.\n   * @param startSerialId   - start certificate serial id.\n   * @param count           - max number of certificates returned in a batch.\n   * @param isRevoked       - whether list for revoked certs only.\n   * @return\n   * @throws IOException\n   */\n@Override\n  public List<String> listCertificate(NodeType role,\n      long startSerialId, int count, boolean isRevoked) throws IOException {\n    List<X509Certificate> certificates =\n        scmCertificateServer.listCertificate(role, startSerialId, count,\n            isRevoked);\n    List<String> results = new ArrayList<>(certificates.size());\n    for (X509Certificate cert : certificates) {\n      try {\n        String certStr = getPEMEncodedString(cert);\n        results.add(certStr);\n      } catch (SCMSecurityException e) {\n        throw new SCMSecurityException(\"listCertificate operation failed.\",\n            e, e.getErrorCode());\n      }\n    }\n    return results;\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"listCACertificate","content":"/**\n   *\n   * @param role            - node role: OM/SCM/DN.\n   * @param startSerialId   - start certificate serial id.\n   * @param count           - max number of certificates returned in a batch.\n   * @param isRevoked       - whether list for revoked certs only.\n   * @return\n   * @throws IOException\n   */\n@Override\n  public List<String> listCACertificate() throws IOException {\n    List<String> caCerts =\n        listCertificate(NodeType.SCM, 0, 10, false);\n    return caCerts;\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"getRootCACertificate","content":"/**\n   *\n   * @param role            - node role: OM/SCM/DN.\n   * @param startSerialId   - start certificate serial id.\n   * @param count           - max number of certificates returned in a batch.\n   * @param isRevoked       - whether list for revoked certs only.\n   * @return\n   * @throws IOException\n   */\n@Override\n  public synchronized String getRootCACertificate() throws IOException {\n    LOGGER.debug(\"Getting Root CA certificate.\");\n    if (rootCertificateServer != null) {\n      try {\n        return CertificateCodec.getPEMEncodedString(\n            rootCertificateServer.getCACertificate());\n      } catch (CertificateException e) {\n        LOGGER.error(\"Failed to get root CA certificate\", e);\n        throw new IOException(\"Failed to get root CA certificate\", e);\n      }\n    }\n\n    return CertificateCodec.getPEMEncodedString(\n        scmCertificateClient.getCACertificate());\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"getCrls","content":"/**\n   *\n   * @param role            - node role: OM/SCM/DN.\n   * @param startSerialId   - start certificate serial id.\n   * @param count           - max number of certificates returned in a batch.\n   * @param isRevoked       - whether list for revoked certs only.\n   * @return\n   * @throws IOException\n   */\n@Override\n  public List<CRLInfo> getCrls(List<Long> crlIds) throws IOException {\n    return scmCertificateServer.getCrls(crlIds);\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"getLatestCrlId","content":"/**\n   *\n   * @param role            - node role: OM/SCM/DN.\n   * @param startSerialId   - start certificate serial id.\n   * @param count           - max number of certificates returned in a batch.\n   * @param isRevoked       - whether list for revoked certs only.\n   * @return\n   * @throws IOException\n   */\n@Override\n  public long getLatestCrlId() {\n    return scmCertificateServer.getLatestCrlId();\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"revokeCertificates","content":"/**\n   *\n   * @param role            - node role: OM/SCM/DN.\n   * @param startSerialId   - start certificate serial id.\n   * @param count           - max number of certificates returned in a batch.\n   * @param isRevoked       - whether list for revoked certs only.\n   * @return\n   * @throws IOException\n   */\n@Override\n  public long revokeCertificates(List<String> certIds, int reason,\n      long revocationTime) throws IOException {\n    storageContainerManager.checkAdminAccess(getRpcRemoteUser(), false);\n\n    Future<Optional<Long>> revoked = scmCertificateServer.revokeCertificates(\n        certIds.stream().map(id -> new BigInteger(id))\n            .collect(Collectors.toList()), CRLReason.lookup(reason),\n        new Date(revocationTime));\n    try {\n      Long crlId = revoked.get().get();\n      getGrpcUpdateServer().notifyCrlUpdate();\n      return crlId;\n    } catch (InterruptedException | ExecutionException e) {\n      Thread.currentThread().interrupt();\n      throw new SCMException(\"Fail to revoke certs\",\n          ResultCodes.FAILED_TO_REVOKE_CERTIFICATES);\n    }\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"removeExpiredCertificates","content":"/**\n   *\n   * @param role            - node role: OM/SCM/DN.\n   * @param startSerialId   - start certificate serial id.\n   * @param count           - max number of certificates returned in a batch.\n   * @param isRevoked       - whether list for revoked certs only.\n   * @return\n   * @throws IOException\n   */\n@Override\n  public List<String> removeExpiredCertificates() throws IOException {\n    storageContainerManager.checkAdminAccess(getRpcRemoteUser(), false);\n    List<String> pemEncodedCerts = new ArrayList<>();\n    for (X509Certificate cert : storageContainerManager.getCertificateStore()\n        .removeAllExpiredCertificates()) {\n      pemEncodedCerts.add(CertificateCodec.getPEMEncodedString(cert));\n    }\n    return pemEncodedCerts;\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"getGrpcUpdateServer","content":"/**\n   *\n   * @param role            - node role: OM/SCM/DN.\n   * @param startSerialId   - start certificate serial id.\n   * @param count           - max number of certificates returned in a batch.\n   * @param isRevoked       - whether list for revoked certs only.\n   * @return\n   * @throws IOException\n   */\npublic SCMUpdateServiceGrpcServer getGrpcUpdateServer() {\n    return grpcUpdateServer;\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"getRpcRemoteUser","content":"/**\n   *\n   * @param role            - node role: OM/SCM/DN.\n   * @param startSerialId   - start certificate serial id.\n   * @param count           - max number of certificates returned in a batch.\n   * @param isRevoked       - whether list for revoked certs only.\n   * @return\n   * @throws IOException\n   */\n@VisibleForTesting\n  public UserGroupInformation getRpcRemoteUser() {\n    return Server.getRemoteUser();\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"getRpcServer","content":"/**\n   *\n   * @param role            - node role: OM/SCM/DN.\n   * @param startSerialId   - start certificate serial id.\n   * @param count           - max number of certificates returned in a batch.\n   * @param isRevoked       - whether list for revoked certs only.\n   * @return\n   * @throws IOException\n   */\npublic RPC.Server getRpcServer() {\n    return rpcServer;\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"getRpcAddress","content":"/**\n   *\n   * @param role            - node role: OM/SCM/DN.\n   * @param startSerialId   - start certificate serial id.\n   * @param count           - max number of certificates returned in a batch.\n   * @param isRevoked       - whether list for revoked certs only.\n   * @return\n   * @throws IOException\n   */\npublic InetSocketAddress getRpcAddress() {\n    return rpcAddress;\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"getRootCertificateServer","content":"/**\n   *\n   * @param role            - node role: OM/SCM/DN.\n   * @param startSerialId   - start certificate serial id.\n   * @param count           - max number of certificates returned in a batch.\n   * @param isRevoked       - whether list for revoked certs only.\n   * @return\n   * @throws IOException\n   */\npublic synchronized CertificateServer getRootCertificateServer() {\n    return rootCertificateServer;\n  }"} {"path":"downloaded/SCMSecurityProtocolServer.java","method_name":"getScmCertificateServer","content":"/**\n   *\n   * @param role            - node role: OM/SCM/DN.\n   * @param startSerialId   - start certificate serial id.\n   * @param count           - max number of certificates returned in a batch.\n   * @param isRevoked       - whether list for revoked certs only.\n   * @return\n   * @throws IOException\n   */\npublic CertificateServer getScmCertificateServer() {\n    return scmCertificateServer;\n  }"} {"path":"downloaded/HPersonDBService.java","method_name":"getIdSet","content":"/**\n\t * Get the set of user id's for a set of users and a group\n\t */\nprivate Set<String> getIdSet(Set<UserId> users, GroupId group,\n\t\t\tCollectionOptions options, SecurityToken token)\n\t\t\tthrows JSONException {\n\t\tSet<String> ids = new HashSet<String>();\n\t\tfor (UserId user : users) {\n\t\t\tids.addAll(getIdSet(user, group, options, token));\n\n\t\t}\n\t\treturn ids;\n\t}"} {"path":"downloaded/HPersonDBService.java","method_name":"getIdSet","content":"/**\n\t * Get the set of user id's from a user and group\n\t */\n@SuppressWarnings(\"unchecked\")\n\tprivate Set<String> getIdSet(UserId userId, GroupId groupId,\n\t\t\tCollectionOptions options, SecurityToken token)\n\t\t\tthrows JSONException {\n\n\t\tString user = userId.getUserId(token);\n\n\t\tif (groupId == null) {\n\t\t\treturn ImmutableSortedSet.of(user);\n\t\t}\n\n\t\tSet<String> idSet = new HashSet<String>();\n\t\t\n\t\tSession hs = HibernateUtil.getSessionFactory().getCurrentSession();\n\t\tTransaction tran = null;\n\n\t\tswitch (groupId.getType()) {\n\t\tcase all:\n\t\t\t// idSet.add(user);\n\t\t\tList<String> allUserIds = null;\n\t\t\ttry {\n\t\t\t\t// List<String> allUserIds = sqlMap.queryForList(\n\t\t\t\t// \"getAllUserIds\" );\n\t\t\t\ttran = hs.beginTransaction();\n\n\t\t\t\t// Criteria crit = hs.createCriteria(User.class);\n\t\t\t\tQuery q = hs.createQuery(\"select id from User\");\n\t\t\t\tallUserIds = (List<String>) q.list();\n\n\t\t\t\ttran.commit();\n\n\t\t\t} catch (Exception e) {\n\t\t\t\tif (tran != null)\n\t\t\t\t\ttran.rollback();\n\t\t\t\tHibernateUtil.getSessionFactory().getCurrentSession()\n\t\t\t\t\t\t.getTransaction().rollback();\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\tfor (String id : allUserIds) {\n\t\t\t\tidSet.add(id);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase groupId:\n\t\t\t\n\t\tcase friends:\n\t\t\ttry {\n\t\t\t\t/**\n\t\t\t\t * <p>\n\t\t\t\t * This filter can be any field of the object being filtered or\n\t\t\t\t * the special js filters, hasApp or topFriends. Other special\n\t\t\t\t * Filters defined in the OpenSocial v.9 specification are\n\t\t\t\t * </p>\n\t\t\t\t * <dl>\n\t\t\t\t * <dt>all</dt>\n\t\t\t\t * <dd>Retrieves all friends</dd>\n\t\t\t\t * <dt>hasApp</dt>\n\t\t\t\t * <dd>Retrieves all friends with any data for this application.\n\t\t\t\t * </dd>\n\t\t\t\t * <dt>'topFriends</dt>\n\t\t\t\t * <dd>Retrieves only the user's top friends.</dd>\n\t\t\t\t * <dt>isFriendsWith</dt>\n\t\t\t\t * <dd>Only \"hasApp filter\" is implemented here</dd>\n\t\t\t\t * </dl>\n\t\t\t\t */\n\n\t\t\t\ttran = hs.beginTransaction();\n\t\t\t\t\n\t\t\t\t//List<String> friendsIds = sqlMap.queryForList(\"getFriendsIds\",user);\n\n\t\t\t\tList<String> friendsIds = new ArrayList<String>();\n\t\t\t\t\n\t\t\t\tUser userObject = (User)hs.get(User.class, user);\n\t\t\t\t\n\t\t\t\tSet<User> friends = userObject.getFriendsByMe();\n\t\t\t\tSet<User> friendsByOthers = userObject.getFriendsByOther();\n\t\t\t\t\n\t\t\t\tfriends.addAll(friendsByOthers);\n\t\t\t\t\n\t\t\t\tif (options.getFilter() != null\n\t\t\t\t\t\t&& options.getFilter().equals(\"hasApp\")) {\n\n\t\t\t\t\tSet<User> tempFriends = new HashSet<User>();\n\t\t\t\t\ttempFriends.addAll(friends);\n\t\t\t\t\t\n\t\t\t\t\tfor (User friend : tempFriends) {\n\t\t\t\t\t\tif (!friend.getPerson().getHasapp())\n\t\t\t\t\t\t\tfriends.remove(friend);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor(User friend: friends) {\n\t\t\t\t\tfriendsIds.add(friend.getId());\n\t\t\t\t}\n\t\t\t\tidSet.addAll(friendsIds);\n\n\n\t\t\t\ttran.commit();\n\t\t\t} catch (Exception e) {\n\t\t\t\tif (tran != null)\n\t\t\t\t\ttran.rollback();\n\t\t\t\t\n\t\t\t\tHibernateUtil.getSessionFactory().getCurrentSession().getTransaction().rollback();\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\tbreak;\n\t\tcase self:\n\t\t\tidSet.add(user);\n\t\t\tbreak;\n\t\t}\n\t\treturn idSet;\n\t}"} {"path":"downloaded/ConsolidatingXYDatasetWithGroups.java","method_name":"calculateMaxCount","content":"/**\n     * It returns the number of items in the most populous series\n     * in the dataset.\n     *\n     * @param dataset The dataset whose series will be iterated over.\n     * @return The number of items in the most populous series\n     * in the dataset.\n     */\nprivate int calculateMaxCount(XYDataset dataset) {\n        int max = 0;\n        for (int i = 0; i < dataset.getSeriesCount(); ++i) {\n            int count = dataset.getItemCount(i);\n            if (count > max) {\n                max = count;\n            }\n        }\n        return max;\n    }"} {"path":"downloaded/ConsolidatingXYDatasetWithGroups.java","method_name":"getDomainOrder","content":"/**\n     * It returns the order of the domain axis (i.e., the x-axis).\n     *\n     * @return The order of the domain axis (i.e., the x-axis).\n     */\n@Override\n    public DomainOrder getDomainOrder() {\n        return DomainOrder.ASCENDING;\n    }"} {"path":"downloaded/ConsolidatingXYDatasetWithGroups.java","method_name":"getSeriesCount","content":"/**\n     * It returns the number of series (e.g., children datasets) in\n     * the dataset.\n     *\n     * @return The number of series in the dataset\n     */\n@Override\n    public int getSeriesCount() {\n        return datasets.size();\n    }"} {"path":"downloaded/ConsolidatingXYDatasetWithGroups.java","method_name":"getSeriesKey","content":"/**\n     * It returns the series key (e.g., the name of the child dataset)\n     * of the given index.\n     *\n     * @param series The index of the series whose key will be returned.\n     * @return The series key of the given index.\n     */\n@Override\n    public Comparable getSeriesKey(int series) {\n        assert 0 <= series && series < names.size();\n        \n        return names.get(series);\n    }"} {"path":"downloaded/ConsolidatingXYDatasetWithGroups.java","method_name":"indexOf","content":"/**\n     * It returns the series of the given series key (e.g., the index of\n     * the child dataset with the given name).\n     *\n     * @param seriesKey The series key whose index will be returned.\n     * @return The series of the given series key.\n     */\n@Override\n    public int indexOf(Comparable seriesKey) {\n        assert seriesKey instanceof String;\n        \n        return names.indexOf(seriesKey);\n    }"} {"path":"downloaded/ConsolidatingXYDatasetWithGroups.java","method_name":"getItemCount","content":"/**\n     * It returns the number of items in the given series (e.g., the given\n     * child dataset). This corresponds to twice the number of items in the\n     * most populous series of that child dataset.\n     *\n     * @param series The series whose item number will be returned.\n     * @return The number of items in the given series.\n     */\n@Override\n    public int getItemCount(int series) {\n        assert 0 <= series && series < datasets.size();\n        return maxCounts.get(series) * 2;\n    }"} {"path":"downloaded/ConsolidatingXYDatasetWithGroups.java","method_name":"getX","content":"/**\n     * It returns the x-value for a given data point of the given series.\n     *\n     * @param series The series of the data point.\n     * @param item The index of the given data point.\n     * @return The x-value for a given data point of the given series.\n     */\n@Override\n    public Number getX(int series, int item) {\n        assert 0 <= series && series < datasets.size();\n        \n        return getXValue(series, item);\n    }"} {"path":"downloaded/ConsolidatingXYDatasetWithGroups.java","method_name":"getXValue","content":"/**\n     * It returns the x-value for a given data point of the given series.\n     *\n     * @param series The series of the data point.\n     * @param item The index of the given data point.\n     * @return The x-value for a given data point of the given series.\n     */\n@Override\n    public double getXValue(int series, int item) {\n        assert 0 <= series && series < datasets.size();\n        \n        return ((double) ((item + 1) / 2)) * xStep;\n    }"} {"path":"downloaded/ConsolidatingXYDatasetWithGroups.java","method_name":"getY","content":"/**\n     * It returns the y-value for a given data point of the given series.\n     *\n     * @param series The series of the data point.\n     * @param item The index of the given data point.\n     * @return The y-value for a given data point of the given series.\n     */\n@Override\n    public Number getY(int series, int item) {\n        assert 0 <= series && series < datasets.size();\n        \n        return getYValue(series, item);\n    }"} {"path":"downloaded/ConsolidatingXYDatasetWithGroups.java","method_name":"getYValue","content":"/**\n     * It returns the y-value for a given data point of the given series.\n     *\n     * @param series The series of the data point.\n     * @param item The index of the given data point.\n     * @return The y-value for a given data point of the given series.\n     */\n@Override\n    public double getYValue(int series, int item) {\n        assert 0 <= series && series < datasets.size();\n        \n        XYDataset dataset = datasets.get(series);\n        int index = dataset.getSeriesCount() - 1;\n        assert index >= 0;\n        return dataset.getYValue(index, item / 2);\n    }"} {"path":"downloaded/ConsolidatingXYDatasetWithGroups.java","method_name":"getGroupCount","content":"/**\n     * It returns the number of groups in the dataset, e.g., the number\n     * of groups in the children dataset (which should be the same for all\n     * of them).\n     *\n     * @return The number of groups in the dataset.\n     */\n@Override\n    public int getGroupCount() {\n        return groupNames.length;\n    }"} {"path":"downloaded/ConsolidatingXYDatasetWithGroups.java","method_name":"getGroupName","content":"/**\n     * It returns the name of the group with the given index (which should\n     * be the same for all children datasets).\n     *\n     * @param group The index of the group to be returned.\n     * @return The name of the group with the givan index.\n     */\n@Override\n    public String getGroupName(int group) {\n        assert 0 <= group && group < groupNames.length;\n        \n        return groupNames[group];\n    }"} {"path":"downloaded/ConsolidatingXYDatasetWithGroups.java","method_name":"isGroupActive","content":"/**\n     * It determines whether the group with the given index is active (and\n     * it should have the same state in all children datasets).\n     *\n     * @param group The index of the group to be determined whether it is\n     * active.\n     * @return Whether the group with the given index is active.\n     */\n@Override\n    public boolean isGroupActive(int group) {\n        assert 0 <= group && group < active.length;\n        \n        boolean value = active[group];\n        for (XYDatasetWithGroups dataset : datasets) {\n            assert dataset.isGroupActive(group) == value;\n        }\n        \n        return value;\n    }"} {"path":"downloaded/TextAreaUtil.java","method_name":"��了\n     ","content":"    /**\n     * 获取JTextArea中的最后一行的文字\n     * 因为修改了输入方式\n     * 所以这�\n��应该没有什么用了\n     * @param str\n     * @return\n     */\n    public static String getLastLine(String str) {\n        String[] split = str.split(\"\\n\");\n        for (int i = 0; i < split.length; i++) {\n            split[i]=split[i].replaceAll(\">\",\"\");\n            split[i"} {"path":"downloaded/ChessBoard.java","method_name":"findRowColumnByLabel","content":"/**\n     * \n     * @param lbl the {@link JLabel} that the row and column are found for\n     * @return an array where [0] is the row and [1] is the column of the given JLabel\n     */\nprivate int[] findRowColumnByLabel(JLabel lbl)\n    {\n        int[] rowColumn = new int[2];\n        \n        for(int row = 0; row < numRows; row++)\n        {\n            for(int column = 0; column < numColumns; column++)\n            {\n                if(squareLabels[row][column] == lbl)\n                {\n                    rowColumn[0] = row;\n                    rowColumn[1] = column;\n                    return rowColumn;\n                }\n            }\n        }\n        \n        return null; //Shouldn't ever get to this point.\n    }"} {"path":"downloaded/ChessBoard.java","method_name":"setTextToPiece","content":"/**\n     * Sets the text of a {@link JLabel} found in the two dimensional {@link JLabel} array based on {@code piece}.\n     * @param row the row of the {@link Jlabel}\n     * @param column the column of the {2link JLabel}\n     * @param piece the {@link ChessPiece} used to determine what Unicode symbol the text is set to\n     */\npublic void setTextToPiece(int row, int column, ChessPiece piece)\n    {\n        if(piece == null)\n        {\n            squareLabels[row][column].setText(\"\");\n            return;\n        }\n        \n        PieceType type = piece.getPieceType();\n        PieceColor color = piece.getPieceColor();\n        \n        if(color == PieceColor.BLACK)\n        {\n            switch(type) \n            {\n                case BISHOP:\n                    squareLabels[row][column].setText(\"\\u265D\");\n                    break;  \n                case KING:\n                    squareLabels[row][column].setText(\"\\u265A\");\n                    break;\n                case KNIGHT:\n                    squareLabels[row][column].setText(\"\\u265E\");\n                    break;\n                case PAWN:\n                    squareLabels[row][column].setText(\"\\u265F\");\n                    break;\n                case QUEEN:\n                    squareLabels[row][column].setText(\"\\u265B\");\n                    break;\n                case ROOK:\n                    squareLabels[row][column].setText(\"\\u265C\");\n                    break;\n            } \n        } \n        else\n        {\n            switch(type) \n            {\n                case BISHOP:\n                    squareLabels[row][column].setText(\"\\u2657\");\n                    break;  \n                case KING:\n                    squareLabels[row][column].setText(\"\\u2654\");\n                    break;\n                case KNIGHT:\n                    squareLabels[row][column].setText(\"\\u2658\");\n                    break;\n                case PAWN:\n                    squareLabels[row][column].setText(\"\\u2659\");\n                    break;\n                case QUEEN:\n                    squareLabels[row][column].setText(\"\\u2655\");\n                    break;\n                case ROOK:\n                    squareLabels[row][column].setText(\"\\u2656\");\n                    break;\n            }\n        } \n    }"} {"path":"downloaded/SortComparison.java","method_name":" [] insertion","content":"    /**\n     * Sorts an array of doubles using InsertionSort.\n     * This method is static, thus it can be called as SortComparison.sort(a)\n     * @param a: An unsorted array of doubles.\n     * @return array sorted in ascending order.\n     *\n     * O(N^2), as we are iterating through the whole array in the first for-loop, then\n     * the while-loop will check every preceding value to see where to store the value.\n     * The best case will be O(N), if the array is already in order, but O(N^2) if the\n     * array is in reverse order.\n    \n    public static double [] insertionSort(double a[]) {\n        insertionSort(a, 0, a.length-1);\n        return a;\n "} {"path":"downloaded/SortComparison.java","method_name":" [] selection","content":"    /**\n     * Sorts an array of doubles using Selection Sort.\n     * This method is static, thus it can be called as SortComparison.sort(a)\n     * @param a: An unsorted array of doubles.\n     * @return array sorted in ascending order\n     *\n     * Theta(N^2) algorithm. First for-loop will iterate through the array\n     * O(N) times. Second for-loop is an aithmetic sequence, which we can consider\n     * as O(N^2). Best case, no exchanges take place, as it is already in order.\n     * Worst-case, we need to exchange every time (i.e. in reverse order). In both\n     * cases, we still need to iterate through the for-loops with O(N^2) as the order\n     * of growth. Therefore, our algorithm is Theta(N)\n   \n    public static double [] selectionSort (double a[]) {\n        int length = a.length;\n        int i, j;\n        boolean needToExchange = false; // can be used to reduce the number of exchanges\n\n        for(i = 0; i < length-1; i++)\n        {\n            int minIndex = i;\n            for(j = i+1; j < length; j++)\n            {\n                if(a[j] < a[minIndex])\n                {\n                    minIndex = j;\n                    needToExchange = true;\n                }\n\n            }\n\n            if(needToExchange) {\n                double tempValue = a[minIndex];\n                a[minIndex] = a[i];\n                a[i] = tempValue;\n                needToExchange = false;\n            }\n        }\n\n        return a;\n "} {"path":"downloaded/SortComparison.java","method_name":" [] quick","content":"    /**\n     * Sorts an array of doubles using Quick Sort.\n     * This method is static, thus it can be called as SortComparison.sort(a)\n     * @param a: An unsorted array of doubles.\n     * @return array sorted in ascending order\n     *\n   \n    public static double [] quickSort (double a[]){\n        if(a == null) return null;\n        int length = a.length;\n        if(length <= 1) return a;\n        if(length <= 10) return insertionSort(a);   //if length <= 10, cut-off to insertion sort\n        //randomizeArray(a);      // O(N)\n        quickSortRecursive(a, 0, a.length-1);\n        return a;\n\n "} {"path":"downloaded/SortComparison.java","method_name":"oid quickSortRecur","content":"    /**\n     * Sorts an array of doubles using Quick Sort.\n     * This method is static, thus it can be called as SortComparison.sort(a)\n     * @param a: An unsorted array of doubles.\n     * @return array sorted in ascending order\n     *\n   \n    private static void quickSortRecursive(double a[], int low, int high)\n    {\n        // This is a 2-pivot implementation of quick sort\n        //if(high - low < 10) insertionSort(a, low, high);    // if section of array shorter than 10, cutoff to insertion sort LEAVE IN\n        if(low >= high) return;\n        if(a[low] > a[high]) exchange(a, low, high);\n        int lessThan = low + 1, greaterThan = high - 1;\n        int i = low + 1;\n\n        while(i <= greaterThan)\n        {\n            if(a[i] < a[low]) exchange(a, lessThan++, i++);\n            else if(a[i] > a[high]) exchange(a, i, greaterThan--);\n            else i++;\n        }\n\n        exchange(a, low, --lessThan);\n        exchange(a, high, ++greaterThan);\n\n        quickSortRecursive(a, low,  lessThan - 1);\n        if(a[lessThan] < a[greaterThan]) quickSortRecursive(a, lessThan + 1, greaterThan - 1);\n        quickSortRecursive(a, greaterThan, high);\n "} {"path":"downloaded/SortComparison.java","method_name":"e[] mergeSortItera","content":"    /**\n     * Sorts an array of doubles using iterative implementation of Merge Sort.\n     * This method is static, thus it can be called as SortComparison.sort(a)\n     *\n     * @param original: An unsorted array of doubles.\n     * @return after the method returns, the array must be in ascending sorted order.\n   \n    public static double[] mergeSortIterative (double original[]) {\n        if(original.length <= 1) return original;\n        int arraySize = original.length;\n        double temp [] = new double[arraySize];\n        for(int partSize = 1; partSize < arraySize; partSize = partSize + partSize) {\n            // each iteration of this for-loop doubles the size of each\n            // section we are merging, meaning that this for-loop will iterate\n            // lgN times\n            for(int low = 0; low < arraySize - partSize; low += partSize + partSize) {\n                merge(original, temp, low, low + partSize - 1, Math.min(low + partSize + partSize - 1, arraySize - 1));\n            }\n        }\n        return original;\n "} {"path":"downloaded/SortComparison.java","method_name":"e[] mergeSortRecur","content":"    /**\n     * Sorts an array of doubles using recursive implementation of Merge Sort.\n     * This method is static, thus it can be called as SortComparison.sort(a)\n     *\n     * @param a: An unsorted array of doubles.\n     * @return after the method returns, the array must be in ascending sorted order.\n   \n    public static double[] mergeSortRecursive (double a[]) {\n        if(a.length <= 1) return a;\n        double temp [] = new double[a.length];\n        mergeSortBottomUp(a, temp, 0, a.length-1);\n        return a;\n "} {"path":"downloaded/SortComparison.java","method_name":"oid mergeSortBott","content":"    /**\n     * Sorts an array of doubles using recursive implementation of Merge Sort.\n     * This method is static, thus it can be called as SortComparison.sort(a)\n     *\n     * @param a: An unsorted array of doubles.\n     * @return after the method returns, the array must be in ascending sorted order.\n   \n    private static void mergeSortBottomUp(double original[], double temp[], int low, int high) {\n        if(high <= low) return;\n        //if(high <= low + 9) insertionSort(original, low, high);     // cutoff to insertion sort for sections\n                                                                    // of the array smaller than 10\n        int mid = low + ((high - low) / 2);\n        mergeSortBottomUp(original, temp, low, mid);\n        mergeSortBottomUp(original, temp, mid+1, high);\n        if(original[mid+1] > original[mid]) return;\n        merge(original, temp, low, mid, high);                       // merge first half with second half.\n "} {"path":"downloaded/Neighbour.java","method_name":"getId","content":"/** Avatar */\npublic Integer getId() {\n        return id;\n    }"} {"path":"downloaded/Neighbour.java","method_name":"getFavorite","content":"/** Avatar */\npublic Boolean getFavorite() {\n        return favorite;\n    }"} {"path":"downloaded/Neighbour.java","method_name":"getName","content":"/** Avatar */\npublic String getName() {\n        return name;\n    }"} {"path":"downloaded/Neighbour.java","method_name":"getAvatarUrl","content":"/** Avatar */\npublic String getAvatarUrl() {\n        return avatarUrl;\n    }"} {"path":"downloaded/Neighbour.java","method_name":"getAddress","content":"/** Avatar */\npublic String getAddress() {\n        return address;\n    }"} {"path":"downloaded/Neighbour.java","method_name":"getPhoneNumber","content":"/** Avatar */\npublic String getPhoneNumber() {\n        return phoneNumber;\n    }"} {"path":"downloaded/Neighbour.java","method_name":"getWebAddress","content":"/** Avatar */\npublic String getWebAddress() {\n        return webAddress;\n    }"} {"path":"downloaded/Neighbour.java","method_name":"getDescription","content":"/** Avatar */\npublic String getDescription() {\n        return description;\n    }"} {"path":"downloaded/Neighbour.java","method_name":"equals","content":"/** Avatar */\n@Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Neighbour neighbour = (Neighbour) o;\n        return Objects.equals(id, neighbour.id);\n    }"} {"path":"downloaded/Neighbour.java","method_name":"hashCode","content":"/** Avatar */\n@Override\n    public int hashCode() {\n        return Objects.hash(id);\n    }"} {"path":"downloaded/PlayList.java","method_name":"add","content":"/**\n\t * PlayList class whose database will be stored and saved\n\t */\npublic String add(Song s){\n\t\tString p =\"\";\n\t\tarr.add(s);\n//\t\tSystem.out.println(\"Current Size of the PlayList : \"+arr.size());\n\t\tp = p + \"Current Size of the PlayList : \"+arr.size();\n\t\treturn p;\n\t}"} {"path":"downloaded/PlayList.java","method_name":"remove","content":"/**\n\t * PlayList class whose database will be stored and saved\n\t */\npublic String remove(String n){\n\t\tString p = \"\";\n\t\tboolean rem = false;\n\t\tfor(int i=0; i<arr.size(); i++){\n\t\t\tif(arr.get(i).getName().equals(n)){\n\t\t\t\tarr.remove(i);\n\t\t\t\trem = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(rem == true){\n//\t\t\tSystem.out.println(\"Current Size of the PlayList : \"+arr.size());\n\t\t\tp = p + \"Current Size of the PlayList : \"+arr.size();\n\t\t}\n\t\telse{\n//\t\t\tSystem.out.println(\"No such song found in this playlist.\");\n\t\t\tp = p + \"No such song found in this playlist.\";\n\t\t}\n\t\treturn p;\n\t}"} {"path":"downloaded/PlayList.java","method_name":"search","content":"/**\n\t * PlayList class whose database will be stored and saved\n\t */\npublic Song search(String n){\n\t\tfor(int i=0; i<arr.size(); i++){\n\t\t\tif(arr.get(i).getName().equals(n)){\n\t\t\t\treturn arr.get(i);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}"} {"path":"downloaded/PlayList.java","method_name":"getSize","content":"/**\n\t * PlayList class whose database will be stored and saved\n\t */\nint getSize(){\n\t\treturn arr.size();\n\t}"} {"path":"downloaded/PlayList.java","method_name":"show","content":"/**\n\t * PlayList class whose database will be stored and saved\n\t */\npublic String show(){\n\t\tString s=\"\";\n\t\tif(arr.isEmpty()){\n//\t\t\tSystem.out.println(\"No Song Exists.\");\n\t\t\ts= \"No Song Exists.\";\n\t\t\treturn s;\n\t\t}\n\t\tfor(int i=0; i<arr.size(); i++){\n//\t\t\tSystem.out.println(arr.get(i));\n//\t\t\tSystem.out.println(\"\");\n\t\t\ts = s+arr.get(i).toString()+\"\\n\\n\";\n\t\t}\n\t\treturn s;\n\t}"} {"path":"downloaded/CreateDataHumPl.java","method_name":"CreateData","content":"/**\n     * Handles the calls to the methods in different cases and returns the simulation list.\n     *\n     * @param event           humidity rise/decrease\n     * @param anomaly         kind of anomaly\n     * @param room            room in which humidity should be measured\n     * @param simTime         simulation time\n     * @param amountEvents    amount of events to be simulated\n     * @param amountAnomalies amount of anomalies to be simulated\n     * @return user defined simulation List\n     */\npublic static ArrayList<Float> CreateData(int event, int anomaly, String room, float simTime, int amountEvents,\n                                       int amountAnomalies) {\n\n        if (event == 1 || event == 2) {\n            if (anomaly == 3 || anomaly == 4 || anomaly == 5 || anomaly == 6) {\n                if (room.equals(\"a\") || room.equals(\"b\") || room.equals(\"c\") || room.equals(\"d\") || room.equals(\"e\")\n                        || room.equals(\"f\")) {\n                    simList = plannedTestHumChange(room, event, anomaly, simTime, amountEvents, amountAnomalies);\n\n                }\n            }\n        } else if (event == 3 || event == 4 || event == 5 || event == 6) {\n            // calculate the list of temperatures with the selected outlier type\n            simList = plannedTestWrongMeasure(event, amountAnomalies, simTime);\n\n        }\n        return simList;\n    }"} {"path":"downloaded/CreateDataHumPl.java","method_name":"plannedTestWrongMeasure","content":"/**\n     * Calculates a periodical increasing and decreasing list of humidity change with planned anomalies.\n     *\n     * @param anomaly         kind of anomaly\n     * @param amountAnomalies amount of anomalies to be simulated\n     * @param time            simulation time\n     * @return simulation List\n     */\npublic static ArrayList<Float> plannedTestWrongMeasure(int anomaly, int amountAnomalies, float time) {\n        ArrayList<Float> humChangePlanned = new ArrayList<>();\n\n        int counter = 1;\n\n        // set the values of the optimal room temperature depending on the specifie room\n        setOptimumHumidity(\"a\");\n\n        int simTime = (int) ((time * 3600) + 0.5);\n        // calculate the start value of the simulation\n        startHum = calcNextValue(optimumRHLL, optimumRHUL);\n        humChangePlanned.add(startHum);\n\n        // Calculate the list of increasing temperature\n        while (humChangePlanned.size() < simTime) {\n            while (nextValue <= optimumRHUL) {\n                if (counter < simTime) {\n                    lowerLimNext = (float) humChangePlanned.get(counter - 1);\n                    upperLimNext = (float) humChangePlanned.get(counter - 1) + max_rateOfChange;\n                    nextValue = calcNextValue(lowerLimNext, upperLimNext);\n                    humChangePlanned.add(nextValue);\n                    counter++;\n                } else {\n                    break;\n                }\n\n            }\n            while (nextValue >= optimumRHLL) {\n\n                if (counter < simTime) {\n                    upperLimNext = (float) humChangePlanned.get(counter - 1);\n                    lowerLimNext = (float) humChangePlanned.get(counter - 1) - max_rateOfChange;\n                    nextValue = calcNextValue(lowerLimNext, upperLimNext);\n                    humChangePlanned.add(nextValue);\n                    counter++;\n                } else {\n                    break;\n                }\n\n            }\n        }\n        \n        // Calculate a List of random Positions for the outliers\n        Set randomPosList = calcRandomList(amountAnomalies, humChangePlanned);\n\n        if (anomaly != 6) {\n            humChangePlanned = manipulate(randomPosList, anomaly, humChangePlanned);\n\n        }\n\n        return humChangePlanned;\n\n    }"} {"path":"downloaded/CreateDataHumPl.java","method_name":"plannedTestHumChange","content":"/**\n     * Simulates the planned humidity rise/decrease with the right amount of Events and the combination of anomalies.\n     * (Periodical increase and decrease until simulation time is reached)\n     *\n     * @param room            room in which humidity should be measured\n     * @param event           humidity rise/decrease\n     * @param anomaly         kind of anomaly\n     * @param time            in hours\n     * @param amountEvents    amount of humidity rise/decrease to simulate\n     * @param amountAnomalies amount of anomalies to simulate\n     * @return simulation List\n     */\npublic static ArrayList<Float> plannedTestHumChange(String room, int event, int anomaly, float time,\n                                                             int amountEvents, int amountAnomalies) {\n        ArrayList<Float> humChangePlanned = new ArrayList<>();\n        float timeForEvent = timeForEvent(time, amountEvents);\n        float tempChange = calcMaxHumChange(timeForEvent);\n        int counter = 1;\n        int simTimeOne = (int) (timeForEvent + 0.5);\n\n        // set the values of the optimal room humidity depending on the specifie room\n        setOptimumHumidity(room);\n\n        // definiere, wo die Simulation beginnen soll --> Nach testfall entscheiden\n        // Wenn HumAnstieg, dann Obergrenze - (humChange/2);\n        // Wenn HumAbfall, dann Untergrenze + (HumChange/2);\n\n        switch (event) {\n            case 1:\n                startHum = optimumRHUL - (tempChange / 2);\n\n                humChangePlanned.add(0, startHum);\n                // Calculate the list of increasing humidity\n                tempForward = startHum;\n                for (int j = 1; j < simTimeOne; j++) {\n                    valueNotRounded = tempForward + max_rateOfChange;\n                    tempForward = valueNotRounded;\n                    humChangePlanned.add((float) (Math.round(valueNotRounded * 100) / 100.0));\n                    counter++;\n                }\n\n                for (int i = 1; i < ((amountEvents * 2) - 1); i++) {\n                    if (i % 2 == 0) {\n                        for (int j = 0; j <= simTimeOne; j++) {\n                            humChangePlanned.add(humChangePlanned.get(j));\n                        }\n                    } else if (i % 2 == 1) {\n                        for (int j = 1; j < simTimeOne; j++) {\n                            humChangePlanned.add(humChangePlanned.get(simTimeOne - j));\n                        }\n                    }\n\n                }\n                break;\n            case 2:\n                float tempStartTemp = optimumRHLL + (tempChange / 2);\n                startHum = (float) (Math.round((tempStartTemp * 100) / 100.0));\n\n                humChangePlanned.add(0, startHum);\n                // Calculate the list of increasing humidity\n\n                tempForward = startHum;\n                for (int j = 0; j < simTimeOne; j++) {\n                    valueNotRounded = tempForward - max_rateOfChange;\n                    humChangePlanned.add((float) (Math.round((valueNotRounded) * 100) / 100.0));\n                    counter++;\n                }\n\n                for (int i = 1; i < ((amountEvents * 2) - 1); i++) {\n                    if (i % 2 == 0) {\n                        for (int j = 0; j <= simTimeOne; j++) {\n                            humChangePlanned.add(humChangePlanned.get(j));\n                        }\n                    } else if (i % 2 == 1) {\n                        for (int j = 0; j <= simTimeOne; j++) {\n\n                            humChangePlanned.add(humChangePlanned.get(simTimeOne - j));\n                        }\n                    }\n\n                }\n                break;\n\n        }\n        if (anomaly != 6) {\n            // Calculate a List of random Positions for the outliers\n            Set manipulatePosList = calcRandomList(amountAnomalies, humChangePlanned);\n            humChangePlanned = manipulate(manipulatePosList, anomaly, humChangePlanned);\n\n        }\n\n        return humChangePlanned;\n\n    }"} {"path":"downloaded/CreateDataHumPl.java","method_name":"manipulate","content":"/**\n\t * Returns the simulation list combined with the anomaly to be simulated.\n\t *\n\t * @param manipulatePosList position list of the anomaly in the simulation list\n\t * @param anomaly           anomaly to be simulated\n\t * @param simList           simulation list to be manipulated with an anomaly\n\t * @return manipulated simulation list with an anomaly\n\t */\nprivate static ArrayList<Float> manipulate(Set manipulatePosList, int anomaly, ArrayList<Float> simList) {\n        for (Object elem : manipulatePosList) {\n            switch (anomaly) {\n                case 3:\n                    if ((Integer) elem == 0) {\n                        lowerLimNext = startHum + max_rateOfChange;\n                    } else {\n                        lowerLimNext = (float) simList.get((Integer) elem - 1) + max_rateOfChange;\n                    }\n                    upperLimNext = upperLimit;\n                    nextValue = calcNextValue(lowerLimNext, upperLimNext);\n                    simList.add((Integer) elem, nextValue);\n                    break;\n                case 4:\n                    simList.add((Integer) elem, -1f);\n                    break;\n                case 5:\n                    simList.add((Integer) elem, -1f);\n                    break;\n            }\n        }\n        return simList;\n    }"} {"path":"downloaded/CreateDataHumPl.java","method_name":"getRandomNumbers","content":"/**\n     * Calculates random numbers for the outliers in the simulation list.\n     *\n     * @param simList simulation list\n     * @return random position for the outlier\n     */\npublic static int getRandomNumbers(ArrayList simList) {\n        return r.nextInt(simList.size());\n    }"} {"path":"downloaded/CreateDataHumPl.java","method_name":"calcRandomList","content":"/**\n     * Generates a Set of different positions for the outliers.\n     *\n     * @param amountAnomalies amount of anomalies to simulate\n     * @param simList         simulated List without anomalies\n     * @return Set of different random positions\n     */\npublic static Set calcRandomList(int amountAnomalies, ArrayList simList) {\n        int wrongMeasurePos;\n        Set randomPosList = new HashSet<>();\n\n        for (int i = 0; i < amountAnomalies; i++) {\n            wrongMeasurePos = getRandomNumbers(simList);\n            while (randomPosList.contains(wrongMeasurePos)) {\n                wrongMeasurePos = getRandomNumbers(simList);\n            }\n            randomPosList.add(wrongMeasurePos);\n        }\n        return randomPosList;\n    }"} {"path":"downloaded/CreateDataHumPl.java","method_name":"timeForEvent","content":"/**\n     * Calculates the amount of smaples for one event in case of a planned simulation.\n     *\n     * @param simulationTime simulation time defined by the user\n     * @param amountEvents   amount of humidity rise/decrease\n     * @return time for one Event in seconds\n     */\nprivate static float timeForEvent(float simulationTime, int amountEvents) {\n        float humAmount = (amountEvents * 2) - 1;\n        float timeInMilli = simulationTime * 3600f;\n\n        return timeInMilli / humAmount;\n    }"} {"path":"downloaded/CreateDataHumPl.java","method_name":"calcMaxHumChange","content":"/**\n     * Calculates the maximum humidity change that can occure in the time for one event.\n     *\n     * @param timeForEvent time needed for one event\n     * @return maximal humidity change for the time of one event\n     */\nprivate static float calcMaxHumChange(float timeForEvent) {\n        float humChange = timeForEvent * max_rateOfChange;\n        if (humChange > 15) {\n            max_rateOfChange = 15 / timeForEvent;\n            humChange = 15;\n        }\n        return humChange;\n    }"} {"path":"downloaded/CreateDataHumPl.java","method_name":"calcNextValue","content":"/**\n     * Calculates the random desired humidity value within the specified limits.\n     *\n     * @param lowerLimit lower limit for the random humidity value\n     * @param upperLimit upper limit for the random humidity value\n     * @return random humidity value within the limits\n     */\nprivate static float calcNextValue(float lowerLimit, float upperLimit) {\n        tempHumValue = lowerLimit + r.nextFloat() * (upperLimit - lowerLimit);\n        humValue = (float) (Math.round(tempHumValue * 100) / 100.0);\n\n        return humValue;\n\n    }"} {"path":"downloaded/Uploader.java","method_name":"extractFileName","content":"/**\n\t * Extracts file name from HTTP header content-disposition\n\t */\nprivate String extractFileName(final Part part) {\n\t\tfinal String contentDisp = part.getHeader(\"content-disposition\");\n\t\tfinal String[] items = contentDisp.split(\";\");\n\t\tfor (final String s : items) {\n\t\t\tif (s.trim().startsWith(\"filename\")) {\n\t\t\t\treturn s.substring(s.indexOf(\"=\") + 2, s.length()-1);\n\t\t\t}\n\t\t}\n\t\treturn \"\";\n\t}"} {"path":"downloaded/OfbizUrlBuilder.java","method_name":"from","content":"/**\n     * Returns an <code>OfbizUrlBuilder</code> instance.\n     *\n     * @param request\n     * @throws GenericEntityException\n     * @throws WebAppConfigurationException\n     */\npublic static OfbizUrlBuilder from(HttpServletRequest request) throws GenericEntityException, WebAppConfigurationException {\n        Assert.notNull(\"request\", request);\n        OfbizUrlBuilder builder = (OfbizUrlBuilder) request.getAttribute(\"_OFBIZ_URL_BUILDER_\");\n        if (builder == null) {\n            WebSiteProperties webSiteProps = WebSiteProperties.from(request);\n            URL url = ConfigXMLReader.getControllerConfigURL(request.getServletContext());\n            ControllerConfig config = (url != null) ? ConfigXMLReader.getControllerConfig(url, true) : null; // SCIPIO: 2017-11-18: controller now fully optional (2 change)\n            // SCIPIO: Use more reliable call\n            //String servletPath = (String) request.getAttribute(\"_CONTROL_PATH_\");\n            String servletPath = RequestHandler.getControlPath(request);\n            String contextPath = request.getContextPath();\n            builder = new OfbizUrlBuilder(config, webSiteProps, servletPath, contextPath); // SCIPIO\n            request.setAttribute(\"_OFBIZ_URL_BUILDER_\", builder);\n        }\n        return builder;\n    }"} {"path":"downloaded/OfbizUrlBuilder.java","method_name":"from","content":"/**\n     * SCIPIO: Returns an <code>OfbizUrlBuilder</code> instance for a specific webapp, but exploiting\n     * current request information - mainly for inter-webapp links.\n     * <p>\n     * NOTE: This is vital so that the WebSiteProperties request overload is called instead of the\n     * delegator one.\n     */\npublic static OfbizUrlBuilder from(ExtWebappInfo extWebappInfo, HttpServletRequest request) throws GenericEntityException, WebAppConfigurationException {\n        WebSiteProperties webSiteProps = WebSiteProperties.from(extWebappInfo, request);\n        ControllerConfig config = extWebappInfo.getControllerConfig();\n        String servletPath = extWebappInfo.getFullControlPath();\n        String contextPath = extWebappInfo.getContextPath();\n        return new OfbizUrlBuilder(config, webSiteProps, servletPath, contextPath);\n    }"} {"path":"downloaded/OfbizUrlBuilder.java","method_name":"from","content":"/**\n     * Returns an <code>OfbizUrlBuilder</code> instance. Use this method when you\n     * don't have a <code>HttpServletRequest</code> object - like in scheduled jobs.\n     *\n     * @param webAppInfo Optional - if <code>null</code>, the builder can only build the host part,\n     * and that will be based only on the settings in <code>url.properties</code> (the WebSite\n     * entity will be ignored).\n     * @param delegator\n     * @throws WebAppConfigurationException\n     * @throws IOException\n     * @throws SAXException\n     * @throws GenericEntityException\n     */\npublic static OfbizUrlBuilder from(WebappInfo webAppInfo, Delegator delegator) throws WebAppConfigurationException, IOException, SAXException, GenericEntityException {\n        WebSiteProperties webSiteProps = null;\n        if (webAppInfo != null) {\n            Assert.notNull(\"delegator\", delegator);\n            String webSiteId = WebAppUtil.getWebSiteId(webAppInfo);\n            if (webSiteId != null) {\n                GenericValue webSiteValue = EntityQuery.use(delegator).from(\"WebSite\").where(\"webSiteId\", webSiteId).cache().queryOne();\n                if (webSiteValue != null) {\n                    webSiteProps = WebSiteProperties.from(webSiteValue);\n                }\n            }\n        }\n        return from(webAppInfo, webSiteProps, delegator);\n    }"} {"path":"downloaded/OfbizUrlBuilder.java","method_name":"from","content":"/**\n     * SCIPIO: Returns an <code>OfbizUrlBuilder</code> instance. Mixed method that allows\n     * using WebSiteProperties different than the WebappInfo instance.\n     * <p>\n     * This is needed because not every webapp has its own webSiteId, which means\n     * another source for WebSiteProperties must be used in its place.\n     *\n     * @param webAppInfo Optional - if <code>null</code>, the builder can only build the host part,\n     * and that will be based only on the settings in <code>url.properties</code> (the WebSite\n     * entity will be ignored).\n     * @param delegator\n     * @throws WebAppConfigurationException\n     * @throws IOException\n     * @throws SAXException\n     * @throws GenericEntityException\n     */\npublic static OfbizUrlBuilder from(WebappInfo webAppInfo, WebSiteProperties webSiteProps, Delegator delegator) throws WebAppConfigurationException, IOException, SAXException, GenericEntityException {\n        ControllerConfig config = null;\n        String servletPath = null;\n        String contextPath = null;\n        if (webAppInfo != null) {\n            Assert.notNull(\"delegator\", delegator);\n            config = ConfigXMLReader.getControllerConfig(webAppInfo, true); // SCIPIO: 2017-11-18: controller now optional\n            servletPath = WebAppUtil.getControlServletPath(webAppInfo, true); // SCIPIO: 2017-11-18: ControlServlet now optional\n            contextPath = webAppInfo.getContextRoot();\n        }\n        if (webSiteProps == null) {\n            webSiteProps = WebSiteProperties.defaults(delegator);\n        }\n        return new OfbizUrlBuilder(config, webSiteProps, servletPath, contextPath);\n    }"} {"path":"downloaded/OfbizUrlBuilder.java","method_name":"from","content":"/**\n     * SCIPIO: Returns an <code>OfbizUrlBuilder</code> instance. Use this method when you\n     * don't have a <code>HttpServletRequest</code> object - like in scheduled jobs.\n     * <p>\n     * Added 2018-08-02.\n     *\n     * @param extWebAppInfo Optional - if <code>null</code>, the builder can only build the host part,\n     * and that will be based only on the settings in <code>url.properties</code> (the WebSite\n     * entity will be ignored).\n     * @param delegator\n     * @throws WebAppConfigurationException\n     * @throws IOException\n     * @throws SAXException\n     * @throws GenericEntityException\n     */\npublic static OfbizUrlBuilder from(ExtWebappInfo extWebAppInfo, Delegator delegator) throws WebAppConfigurationException, IOException, SAXException, GenericEntityException {\n        WebSiteProperties webSiteProps = null;\n        ControllerConfig config = null;\n        String servletPath = null;\n        String contextPath = null;\n        if (extWebAppInfo != null) {\n            Assert.notNull(\"delegator\", delegator);\n            String webSiteId = extWebAppInfo.getWebSiteId();\n            if (webSiteId != null) {\n                GenericValue webSiteValue = EntityQuery.use(delegator).from(\"WebSite\").where(\"webSiteId\", webSiteId).cache().queryOne();\n                if (webSiteValue != null) {\n                    webSiteProps = WebSiteProperties.from(webSiteValue);\n                }\n            }\n            config = extWebAppInfo.getControllerConfig();\n            servletPath = extWebAppInfo.getFullControlPath();\n            contextPath = extWebAppInfo.getContextPath();\n        }\n        if (webSiteProps == null) {\n            webSiteProps = WebSiteProperties.defaults(delegator);\n        }\n        return new OfbizUrlBuilder(config, webSiteProps, servletPath, contextPath);\n    }"} {"path":"downloaded/OfbizUrlBuilder.java","method_name":"from","content":"/**\n     * SCIPIO: Returns an <code>OfbizUrlBuilder</code> instance. Use this method when you\n     * don't have a <code>HttpServletRequest</code> object - like in scheduled jobs.\n     * <p>\n     * Added 2018-08-02.\n     *\n     * @param extWebAppInfo Optional - if <code>null</code>, the builder can only build the host part,\n     * and that will be based only on the settings in <code>url.properties</code> (the WebSite\n     * entity will be ignored).\n     * @param delegator\n     * @throws WebAppConfigurationException\n     * @throws IOException\n     * @throws SAXException\n     * @throws GenericEntityException\n     */\npublic static OfbizUrlBuilder from(ExtWebappInfo extWebAppInfo, WebSiteProperties webSiteProps, Delegator delegator) throws WebAppConfigurationException, IOException, SAXException, GenericEntityException {\n        ControllerConfig config = null;\n        String servletPath = null;\n        String contextPath = null;\n        if (extWebAppInfo != null) {\n            Assert.notNull(\"delegator\", delegator);\n            config = extWebAppInfo.getControllerConfig();\n            servletPath = extWebAppInfo.getFullControlPath();\n            contextPath = extWebAppInfo.getContextPath();\n        }\n        if (webSiteProps == null) {\n            webSiteProps = WebSiteProperties.defaults(delegator);\n        }\n        return new OfbizUrlBuilder(config, webSiteProps, servletPath, contextPath);\n    }"} {"path":"downloaded/OfbizUrlBuilder.java","method_name":"from","content":"/**\n     * SCIPIO: Returns a new <code>OfbizUrlBuilder</code> instance from the given FullWebappInfo.\n     * Roughly same as {@link FullWebappInfo#getOfbizUrlBuilder()}.\n     * <p>\n     * Added 2018-08-02.\n     *\n     * @param extWebAppInfo Optional - if <code>null</code>, the builder can only build the host part,\n     * and that will be based only on the settings in <code>url.properties</code> (the WebSite\n     * entity will be ignored).\n     * @param delegator\n     * @throws WebAppConfigurationException\n     * @throws IOException\n     * @throws SAXException\n     * @throws GenericEntityException\n     */\npublic static OfbizUrlBuilder from(FullWebappInfo extWebAppInfo, Delegator delegator) throws WebAppConfigurationException, IOException, SAXException, GenericEntityException {\n        return from(extWebAppInfo.getExtWebappInfo(), extWebAppInfo.getWebSiteProperties(), delegator);\n    }"} {"path":"downloaded/OfbizUrlBuilder.java","method_name":"fromWebSiteId","content":"/**\n     * SCIPIO: Returns an <code>OfbizUrlBuilder</code> instance using the given webSiteId.\n     * Added 2017-11.\n     *\n     * @param webSiteId Optional - if <code>null</code>, the builder can only build the host part,\n     * and that will be based only on the settings in <code>url.properties</code> (the WebSite\n     * entity will be ignored).\n     * @param delegator\n     * @throws WebAppConfigurationException\n     * @throws IOException\n     * @throws SAXException\n     * @throws GenericEntityException\n     */\npublic static OfbizUrlBuilder fromWebSiteId(String webSiteId, Delegator delegator) throws WebAppConfigurationException,\n        IOException, SAXException, GenericEntityException, IllegalArgumentException {\n        WebappInfo webAppInfo = null;\n        WebSiteProperties webSiteProps = null;\n        if (webSiteId != null && !webSiteId.isEmpty()) {\n            webAppInfo = WebAppUtil.getWebappInfoFromWebsiteId(webSiteId);\n            webSiteProps = WebSiteProperties.from(webSiteId, delegator);\n        }\n        if (webSiteProps == null) {\n            webSiteProps = WebSiteProperties.defaults(delegator);\n        }\n        return from(webAppInfo, webSiteProps, delegator);\n    }"} {"path":"downloaded/OfbizUrlBuilder.java","method_name":"fromServerDefaults","content":"/**\n     * SCIPIO: Returns an <code>OfbizUrlBuilder</code> instance from system defaults.\n     * WARN: This type of instance can only build host parts!\n     * <p>\n     * Added 2018-08-02.\n     */\npublic static OfbizUrlBuilder fromServerDefaults(HttpServletRequest request) throws WebAppConfigurationException, IOException, SAXException, GenericEntityException {\n        // TODO: cache in request\n        return fromServerDefaults((Delegator) request.getAttribute(\"delegator\"));\n    }"} {"path":"downloaded/OfbizUrlBuilder.java","method_name":"fromServerDefaults","content":"/**\n     * SCIPIO: Returns an <code>OfbizUrlBuilder</code> instance from system defaults.\n     * WARN: This type of instance can only build host parts!\n     * <p>\n     * Added 2018-08-02.\n     */\npublic static OfbizUrlBuilder fromServerDefaults(Delegator delegator) throws WebAppConfigurationException, IOException, SAXException, GenericEntityException {\n        WebSiteProperties webSiteProps = WebSiteProperties.defaults(delegator);\n        return new OfbizUrlBuilder(null, webSiteProps, null, null);\n    }"} {"path":"downloaded/OfbizUrlBuilder.java","method_name":"buildFullUrl","content":"/**\n     * Builds a full URL - including scheme, host, servlet path and resource.\n     * SCIPIO: NOTE: This builds a link to a controller entry - the uri specifies a controller.xml request URI.\n     *\n     * @param buffer\n     * @param uri\n     * @param useSSL Default value to use - will be replaced by request-map setting\n     * if one is found.\n     * @return <code>true</code> if the URL uses https\n     * @throws WebAppConfigurationException\n     * @throws IOException\n     */\npublic boolean buildFullUrl(Appendable buffer, String uri, boolean useSSL) throws WebAppConfigurationException, IOException {\n        boolean makeSecure = buildHostPart(buffer, uri, useSSL);\n        buildPathPart(buffer, uri);\n        return makeSecure;\n    }"} {"path":"downloaded/OfbizUrlBuilder.java","method_name":"buildFullUrlWithContextPath","content":"/**\n     * SCIPIO: Builds a full URL - including scheme, host, context root and resource (custom servlet),\n     * but does NOT consult controller. The uri can point to any servlet.\n     * Added 2018-08-01.\n     */\npublic boolean buildFullUrlWithContextPath(Appendable buffer, String uri, boolean useSSL) throws WebAppConfigurationException, IOException {\n        boolean makeSecure = buildHostPart(buffer, useSSL);\n        buildPathPartWithContextPath(buffer, uri);\n        return makeSecure;\n    }"} {"path":"downloaded/OfbizUrlBuilder.java","method_name":"buildHostPart","content":"/**\n     * Builds a partial URL - including the scheme and host, but not the servlet path or resource.\n     * <p>\n     * SCIPIO: Modified to support omitting controller lookup. Also supports Boolean instead of boolean.\n     * This does NOT include webappPathPrefix. This can be used mainly to split the host server part and path part building,\n     * for specific implementations.\n     *\n     * @param buffer\n     * @param uri\n     * @param useSSL Default value to use - will be replaced by request-map setting\n     * if one is found with security=true set.\n     * @param controller\n     * @return <code>true</code> if the URL uses https\n     * @throws WebAppConfigurationException\n     * @throws IOException\n     */\npublic boolean buildHostPart(Appendable buffer, String uri, Boolean useSSL, Boolean controller) throws WebAppConfigurationException, IOException {\n        // SCIPIO: support Boolean\n        useSSL = Boolean.TRUE.equals(useSSL); // default false\n        controller = !Boolean.FALSE.equals(controller); // default true // SCIPIO: re-fixed 2017-11-17\n\n        boolean makeSecure = useSSL;\n        // SCIPIO: only lookup in controller if controller lookup requested\n        if (controller) {\n            String requestMapUri = null;\n            if (UtilValidate.isNotEmpty(uri)) { // SCIPIO: added null check and controller test\n                String[] pathElements = uri.split(\"/\");\n                requestMapUri = pathElements[0];\n                int queryIndex = requestMapUri.indexOf(\"?\");\n                if (queryIndex != -1) {\n                    requestMapUri = requestMapUri.substring(0, queryIndex);\n                }\n            }\n            RequestMap requestMap = null;\n            if (config != null) {\n                requestMap = config.getRequestMapMap().get(requestMapUri);\n            }\n            if (!makeSecure && requestMap != null) { // if the request has security=\"true\" then use it\n                makeSecure = requestMap.securityHttps;\n            }\n        }\n        makeSecure = webSiteProps.getEnableHttps() & makeSecure;\n        if (makeSecure) {\n            String server = webSiteProps.getHttpsHost();\n            if (server.isEmpty()) {\n                server = \"localhost\";\n            }\n            buffer.append(\"https://\");\n            buffer.append(server);\n            if (!webSiteProps.getHttpsPort().isEmpty()) {\n                // SCIPIO: only append port if it's not default, otherwise not required and ugly\n                if (!\"443\".equals(webSiteProps.getHttpsPort())) {\n                    buffer.append(\":\").append(webSiteProps.getHttpsPort());\n                }\n            }\n        } else {\n            String server = webSiteProps.getHttpHost();\n            if (server.isEmpty()) {\n                server = \"localhost\";\n            }\n            buffer.append(\"http://\");\n            buffer.append(server);\n            if (!webSiteProps.getHttpPort().isEmpty()) {\n                // SCIPIO: only append port if it's not default, otherwise not required and ugly\n                if (!\"80\".equals(webSiteProps.getHttpsPort())) {\n                    buffer.append(\":\").append(webSiteProps.getHttpPort());\n                }\n            }\n        }\n        return makeSecure;\n    }"} {"path":"downloaded/OfbizUrlBuilder.java","method_name":"buildHostPart","content":"/**\n     * Builds a partial URL - including the scheme and host, but not the servlet path or resource.\n     * <p>\n     * SCIPIO: This is the original overload that assumes controller is to be used. Also accepts Boolean instead of boolean.\n     *\n     * @param buffer\n     * @param uri\n     * @param useSSL Default value to use - will be replaced by request-map setting\n     * if one is found with security=true set.\n     * @return <code>true</code> if the URL uses https\n     * @throws WebAppConfigurationException\n     * @throws IOException\n     */\npublic boolean buildHostPart(Appendable buffer, String uri, Boolean useSSL) throws WebAppConfigurationException, IOException {\n        return buildHostPart(buffer, uri, useSSL, true);\n    }"} {"path":"downloaded/OfbizUrlBuilder.java","method_name":"buildHostPart","content":"/**\n     * SCIPIO: Builds a partial URL - including the scheme and host, but not the servlet path or resource.\n     * Does NOT consult controller. useSSL false by default.\n     * Added 2017-11-17.\n     */\npublic boolean buildHostPart(Appendable buffer, Boolean useSSL) throws WebAppConfigurationException, IOException {\n        return buildHostPart(buffer, null, useSSL, false);\n    }"} {"path":"downloaded/OfbizUrlBuilder.java","method_name":"getWebSiteProperties","content":"/**\n     * SCIPIO: Returns the WebSiteProperties this builder is using.\n     * Added 2018-08-03.\n     */\npublic WebSiteProperties getWebSiteProperties() {\n        return webSiteProps;\n    }"} {"path":"downloaded/OfbizUrlBuilder.java","method_name":"getControllerConfig","content":"/**\n     * SCIPIO: Returns the ControllerConfig this builder is using. May be null.\n     * Added 2018-08-03.\n     */\npublic ControllerConfig getControllerConfig() {\n        return config;\n    }"} {"path":"downloaded/OfbizUrlBuilder.java","method_name":"getContextAndServletPath","content":"/**\n     * SCIPIO: Get servlet path including the webapp context path, but NOT\n     * including the webappPathPrefix ({@link #getWebappPathPrefix()});\n     * <p>\n     * NOTE: 2018-08-01: Excludes terminating slash.\n     */\npublic String getContextAndServletPath() {\n        return servletPath;\n    }"} {"path":"downloaded/OfbizUrlBuilder.java","method_name":"getContextPath","content":"/**\n     * SCIPIO: Get webapp context path, but NOT\n     * including the webappPathPrefix ({@link #getWebappPathPrefix()});\n     * <p>\n     * NOTE: 2018-08-01: Excludes terminating slash.\n     */\npublic String getContextPath() {\n        return contextPath;\n    }"} {"path":"downloaded/OfbizUrlBuilder.java","method_name":"getWebappPathPrefix","content":"/**\n     * SCIPIO: Get the webapp path prefix (e.g. from WebSiteProperties or other).\n     * Added 2018-07-27.\n     */\npublic String getWebappPathPrefix() {\n        return webSiteProps.getWebappPathPrefix();\n    }"} {"path":"downloaded/OfbizUrlBuilder.java","method_name":"isWebappPathPrefixUrlBuild","content":"/**\n     * SCIPIO: Determines if the webapp path prefix is supposed to and being included\n     * in this URL building; otherwise assumed to be done by URL rewriting later.\n     */\npublic boolean isWebappPathPrefixUrlBuild() {\n        return webSiteProps.isWebappPathPrefixUrlBuild();\n    }"} {"path":"downloaded/SearchResultFragment.java","method_name":"newInstance","content":"/**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @param b\n     * @return A new instance of fragment ListViewFragment.\n     */\npublic static SearchResultFragment newInstance(Bundle b) {\n        SearchResultFragment fragment = new SearchResultFragment();\n        b.putString(Constants.BUNDLE_KEY_LEASING_TYPE, b.getString(Constants.BUNDLE_KEY_LEASING_TYPE));\n        b.putString(Constants.BUNDLE_KEY_LOCATION, b.getString(Constants.BUNDLE_KEY_LOCATION));\n        b.putString(Constants.BUNDLE_KEY_CHECK_IN, b.getString(Constants.BUNDLE_KEY_CHECK_IN));\n        b.putString(Constants.BUNDLE_KEY_NEIGHBOURHOOD, b.getString(Constants.BUNDLE_KEY_NEIGHBOURHOOD));\n        b.putString(Constants.BUNDLE_KEY_AMENITIES, b.getString(Constants.BUNDLE_KEY_AMENITIES));\n        b.putString(Constants.BUNDLE_KEY_TITLE, b.getString(Constants.BUNDLE_KEY_TITLE));\n        b.putString(Constants.BUNDLE_KEY_SECTION, b.getString(Constants.BUNDLE_KEY_SECTION));\n        b.putString(Constants.BUNDLE_KEY_SUITABLE_FOR, b.getString(Constants.BUNDLE_KEY_SUITABLE_FOR));\n        b.putString(Constants.BUNDLE_KEY_MAX_PRICE, b.getString(Constants.BUNDLE_KEY_MAX_PRICE));\n        b.putString(Constants.BUNDLE_KEY_MIN_PRICE, b.getString(Constants.BUNDLE_KEY_MIN_PRICE));\n        b.putString(Constants.BUNDLE_KEY_SIZE, b.getString(Constants.BUNDLE_KEY_SIZE));\n        b.putString(Constants.BUNDLE_KEY_PROPERTY_TYPE_ID, b.getString(Constants.BUNDLE_KEY_PROPERTY_TYPE_ID));\n        b.putString(Constants.BUNDLE_KEY_TO, b.getString(Constants.BUNDLE_KEY_TO));\n        b.putString(Constants.BUNDLE_KEY_FROM, b.getString(Constants.BUNDLE_KEY_FROM));\n        b.putString(Constants.BUNDLE_KEY_AVAILIBILITY, b.getString(Constants.BUNDLE_KEY_AVAILIBILITY));\n        b.putString(Constants.BUNDLE_KEY_LAT, b.getString(Constants.BUNDLE_KEY_LAT));\n        b.putString(Constants.BUNDLE_KEY_LNG, b.getString(Constants.BUNDLE_KEY_LNG));\n        fragment.setArguments(b);\n        return fragment;\n    }"} {"path":"downloaded/SearchResultFragment.java","method_name":"onCreateView","content":"/**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @param b\n     * @return A new instance of fragment ListViewFragment.\n     */\n@Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        try {\n            if (rootView == null) {\n                rootView = inflater.inflate(R.layout.fragment_search_result, null);\n            }\n            ButterKnife.bind(this, rootView);\n            activity.setTopbar(activity.getString(R.string.search_result), true, true, true, false, false, false, true, false, false,\n                    false, false,true);\n            initialize();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return rootView;\n    }"} {"path":"downloaded/SearchResultFragment.java","method_name":"checkLocationPermission","content":"/**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @param b\n     * @return A new instance of fragment ListViewFragment.\n     */\n@MarshmallowPermissions.AfterPermissionGranted(MarshmallowPermissions.RUNTIME_LOCATION_PERMISSION)\n    private boolean checkLocationPermission() {\n        String[] perms = {Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION};\n        if (MarshmallowPermissions.hasPermissions(activity, perms)) {\n            // Have permissions, do the thing!\n            return true;\n        } else {\n            // Ask for both permissions\n            MarshmallowPermissions.requestPermissions(this, getString(R.string.rationale_location), MarshmallowPermissions.RUNTIME_LOCATION_PERMISSION, perms);\n            return false;\n        }\n    }"} {"path":"downloaded/SearchResultFragment.java","method_name":"isLoading","content":"/**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @param b\n     * @return A new instance of fragment ListViewFragment.\n     */\n@Override\n    public boolean isLoading() {\n        return isLoading;\n    }"} {"path":"downloaded/SearchResultFragment.java","method_name":"hasLoadedAllItems","content":"/**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @param b\n     * @return A new instance of fragment ListViewFragment.\n     */\n@Override\n    public boolean hasLoadedAllItems() {\n        if (isNextPageAvailable) {\n            return false;\n        }\n        /*if next page not available means we loaded all items so return true */\n        return true;\n    }"} {"path":"downloaded/SearchResultFragment.java","method_name":"onMarkerClick","content":"/***************\n     * Location services\n     *****************/\n@Override\n    public boolean onMarkerClick(final Marker marker) {\n        if (markerMap != null && markerMap.size() > 0) {\n            int propertyListPosition = markerMap.get(marker);\n            if (propertyListPosition != -1) {\n                selectedFavoritePosition = propertyListPosition;\n                PropertyListModel.GetPropertyListing property = propertyList.get(propertyListPosition);\n                ImageUtil.loadPropertyImage(activity, property.getPiImage(), ivMapLogo);\n                if (!TextUtils.isEmpty(property.getAvgRating()) && Math.round(Float.valueOf(property.getAvgRating())) > 0) {\n                    tvMapRating.setText(property.getAvgRating());\n                    tvMapRating.setVisibility(View.VISIBLE);\n                } else {\n                    tvMapRating.setVisibility(View.GONE);\n                }\n                ivMapFavorite.setSelected(property.getIsFavorite().equalsIgnoreCase(\"Yes\"));\n                tvMapTitle.setText(property.getPropertyTitle());\n                tvMapAddress.setText(property.getAddress());\n                tvMapPrice.setText(String.format(\"%s %s\", property.getPrice(), getString(R.string.currency)));\n                ivMapRecommend.setVisibility(property.getMarkAsRecommended().equalsIgnoreCase(\"Yes\") ? (View.VISIBLE) : (View.GONE));\n                ivMapVerified.setVisibility(property.getMarkAsVerified().equalsIgnoreCase(\"Yes\") ? (View.VISIBLE) : (View.GONE));\n                ivMapReport.setVisibility(View.VISIBLE/*property.getMarkAsFeatured().equalsIgnoreCase(\"Yes\") ? (View.VISIBLE) : (View.GONE)*/);\n                propertyId = property.getPropertyId();\n            }\n        }\n        AnimationUtil.openSlider(rlMapItem, true);\n        return false;\n    }"} {"path":"downloaded/FriendPersona.java","method_name":"getIconIndex","content":"/**\n     * Gets the value of the iconIndex property.\n     * \n     */\npublic int getIconIndex() {\n        return iconIndex;\n    }"} {"path":"downloaded/FriendPersona.java","method_name":"getLevel","content":"/**\n     * Gets the value of the level property.\n     * \n     */\npublic int getLevel() {\n        return level;\n    }"} {"path":"downloaded/FriendPersona.java","method_name":"getName","content":"/**\n     * Gets the value of the name property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\npublic String getName() {\n        return name;\n    }"} {"path":"downloaded/FriendPersona.java","method_name":"getOriginalName","content":"/**\n     * Gets the value of the originalName property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\npublic String getOriginalName() {\n        return originalName;\n    }"} {"path":"downloaded/FriendPersona.java","method_name":"getPersonaId","content":"/**\n     * Gets the value of the personaId property.\n     * \n     */\npublic long getPersonaId() {\n        return personaId;\n    }"} {"path":"downloaded/FriendPersona.java","method_name":"getPresence","content":"/**\n     * Gets the value of the presence property.\n     * \n     */\npublic int getPresence() {\n        return presence;\n    }"} {"path":"downloaded/FriendPersona.java","method_name":"getSocialNetwork","content":"/**\n     * Gets the value of the socialNetwork property.\n     * \n     */\npublic int getSocialNetwork() {\n        return socialNetwork;\n    }"} {"path":"downloaded/FriendPersona.java","method_name":"getUserId","content":"/**\n     * Gets the value of the userId property.\n     * \n     */\npublic long getUserId() {\n        return userId;\n    }"} {"path":"downloaded/AllumetteControleur.java","method_name":"threadAttenteJoueurs","content":"/**\n\t * @return Un thread qui attend que 2 joueurs soient connectes pour lancer la suite de la partie (affichage du nom des joueurs / allumettes, appel de {@link #threadMultiVictoire()} )\n\t */\nprivate Thread threadAttenteJoueurs() {\n\t\treturn new Thread(() -> {\n\t\t\ttry {\n\t\t\t\tthis.btn_valider.setDisable(true);\n\t\t\t\t\n\t\t\t\twhile (iAllumettes.getNbJoueurs(idPartie) != 2)\n\t\t\t\t\tThread.sleep(500);\n\t\t\t\t\n\t\t\t\tPlatform.runLater(() -> {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlbl_j1.setText(iAllumettes.getNJ1(idPartie) + \" \");\n\t\t\t\t\t\tlbl_j2.setText(\" \" + iAllumettes.getNJ2(idPartie));\n\t\t\t\t\t\t\n\t\t\t\t\t\tafficheAllumettes(iAllumettes.getNbAllumettes(idPartie));\n\t\t\t\t\t\t\n\t\t\t\t\t\taffPremierJoueur(iAllumettes.nomJoueurTour(idPartie));\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.lbl_attente.setText(\"Tour du joueur : \");\n\t\t\t\t\t\tthis.lbl_attente.setStyle(\"-fx-font-style:normal\");\n\t\t\t\t\t\t\n\t\t\t\t\t} catch (RemoteException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\ttVictoire = threadMultiVictoire();\n\t\t\t\ttVictoire.start();\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t} catch (RemoteException | InterruptedException e) {\n\t\t\t\tSystem.out.println(\"Sleep interrupted, Sortie de la file d'attente\");\n\t\t\t}\n\t\t});\n\t}"} {"path":"downloaded/AllumetteControleur.java","method_name":"threadSoloVictoire","content":"/**\n\t * @return Un thread qui, tant que les conditions de fin de partie ne sont pas verifiees pour le mode <i>Solo</i>, relance un tour de jeu ({@link #tour()})\n\t */\nprivate Thread threadSoloVictoire() {\n\t\treturn new Thread(() -> {\n\t\t\ttry {\n\t\t\t\twhile (iAllumettes.getNbAllumettes(idPartie) != 0) {\n\t\t\t\t\tfinTour = false;\n\t\t\t\t\ttour();\n\t\t\t\t\t\n\t\t\t\t\twhile (!finTour) {\n\t\t\t\t\t\tif (iAllumettes.getNbAllumettes(idPartie) == 0) {\n\t\t\t\t\t\t\tfinTour = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tThread.sleep(500);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tPlatform.runLater(() -> {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfinPartie(iAllumettes.nomGagnant(idPartie), iAllumettes.scoreGagnant(idPartie));\n\t\t\t\t\t} catch (RemoteException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t} catch (RemoteException | InterruptedException e) {\n\t\t\t\tSystem.out.println(\"Sleep interrupted, Fin de partie\");\n\t\t\t}\n\t\t});\n\t}"} {"path":"downloaded/AllumetteControleur.java","method_name":"threadMultiVictoire","content":"/**\n\t * @return Un thread qui, tant que les conditions de fin de partie ne sont pas verifiees pour le mode <i>Duo</i>, relance un tour de jeu ({@link #tour()})\n\t */\nprivate Thread threadMultiVictoire() {\n\t\treturn new Thread(() -> {\n\t\t\ttry {\n\t\t\t\twhile (iAllumettes.getNbJoueurs(idPartie) == 2 && iAllumettes.getNbAllumettes(idPartie) != 0) {\n\t\t\t\t\tfinTour = false;\n\t\t\t\t\ttour();\n\t\t\t\t\t\n\t\t\t\t\twhile (!finTour) {\n\t\t\t\t\t\tif (iAllumettes.getNbJoueurs(idPartie) != 2 || iAllumettes.getNbAllumettes(idPartie) == 0) {\n\t\t\t\t\t\t\tfinTour = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tThread.sleep(500);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tPlatform.runLater(() -> {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (iAllumettes.getNbAllumettes(idPartie) == 0) {\n\t\t\t\t\t\t\tfinPartie(iAllumettes.nomGagnant(idPartie), iAllumettes.scoreGagnant(idPartie));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tString nomGagnant = (lbl_j1.getText().trim().equals(iAllumettes.nomJoueurTour(idPartie)) ? lbl_j2.getText().trim() : lbl_j1.getText().trim());\n\t\t\t\t\t\t\tint i = (lbl_j1.getText().trim().equals(iAllumettes.nomJoueurTour(idPartie))) ? 1 : 0;\n\n\t\t\t\t\t\t\tfinPartieAbandon(nomGagnant, iAllumettes.getTabScore(idPartie)[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (RemoteException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\tSystem.out.println(\"Sleep interrupted, Fin de partie\");\n\t\t\t} catch (RemoteException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t});\n\t}"} {"path":"downloaded/DataAPIAccessRealTimeMonitorAction.java","method_name":"getInputStream","content":"/**\n\t * get input stream\n\t * @return input stream\n\t */\npublic InputStream getInputStream() {\n        return inputStream;\n    }"} {"path":"downloaded/DataAPIAccessRealTimeMonitorAction.java","method_name":"execute","content":"/**\n\t * get input stream\n\t * @return input stream\n\t */\npublic String execute() {\n\t//\tsetDisplay(\"/pages/dynamicChart.jsp\");\n\t//\tdouble access_count = 0; // number of access/second\n\t\t//List<Double> access_rate_list = null;\n\t\t/*if(session.get(\"access_rate_list\") != null){\n\t\t\taccess_rate_list = (List<Double>) session.get(\"access_rate_list\");\n\t\t}else{\n\t\t\taccess_rate_list = new LinkedList<Double>();\n\t\t}*/\n\t\t\t\t\n\t\t//for (int i = 0; i < 3; i++) {\n\n\t\t\tString line = \"wc -l \"\n\t\t\t\t\t+ HTRCLogConfig.AUDIT_LOG_HOME + \"data-api-audit.log\";\n\n\t\t\tString result1 = Utility.exec(line);\n\n\t\t\tdouble new_line_count1 = Double.parseDouble(result1.split(\" \")[0]);\n\t\t\t\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t\tString result2 = Utility.exec(line);\n\n\t\t\tdouble new_line_count2 = Double.parseDouble(result2.split(\" \")[0]);\n\n\t\t\tdouble access_count = new_line_count2 - new_line_count1 ;\n\t\t\t\n\t\t\tString result = access_count + \"\";\n\t\t\t\n\t\t\t// inputStream = new ByteArrayInputStream(result.getBytes(\"UTF-8\"));\n\t\t\ttry {\n\t\t\t\tinputStream = new ByteArrayInputStream(result.getBytes(\"UTF-8\"));\n\t\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t    \n\t\t\t\n\t\t\t/*if(access_rate_list.size() > 80){\n\t\t\t\taccess_rate_list.remove(0);\n\t\t\t\taccess_rate_list.add((access_count/4));\n\t\t\t}else{\n\t\t\t\taccess_rate_list.add((access_count/4));\n\t\t\t}\n\t\t\t\n\t\tsession.put(\"access_rate_list\", access_rate_list);*/\n\t\t\n\t\treturn SUCCESS;\n\t}"} {"path":"downloaded/MapperUtil.java","method_name":"mapObjects","content":"/**\n\t * Method which maps a list of entities to respective models\n\t * \n\t * @param entities\n\t * @param clazz\n\t * @param entityClass\n\t * @return\n\t * @throws InstantiationException\n\t * @throws IllegalAccessException\n\t */\npublic List<M> mapObjects(final List<E> entities, final Class<M> clazz, final Class<E> entityClass)\n\t\t\tthrows InstantiationException, IllegalAccessException {\n\t\tfinal List<M> models = new ArrayList<>();\n\t\tfinal List<String> planFields = Arrays.asList(entityClass.getDeclaredFields()).stream().map(Field::getName)\n\t\t\t\t.collect(Collectors.toList());\n\t\tfor (final E entity : entities) {\n\t\t\tif (entity != null) {\n\t\t\t\tM model = null;\n\t\t\t\ttry {\n\t\t\t\t\tmodel = clazz.getDeclaredConstructor().newInstance();\n\t\t\t\t\tfor (final Field f : model.getClass().getDeclaredFields()) {\n\t\t\t\t\t\tif (planFields.contains(f.getName())) {\n\t\t\t\t\t\t\tnew PropertyDescriptor(f.getName(), clazz).getWriteMethod().invoke(model,\n\t\t\t\t\t\t\t\t\tnew PropertyDescriptor(f.getName(), entityClass).getReadMethod().invoke(entity));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (final Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t} finally {\n\t\t\t\t\tmodels.add(model);\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\treturn models;\n\t}"} {"path":"downloaded/ServicePointImpl.java","method_name":"getService","content":"/**\n     * Invoked by {@link #getService(Class)} to get a service implementation \n     * from the {@link ServiceModel}.\n     * \n     * <p>\n     * TODO: I'm concerned that this synchronized method could cause a deadlock. It would take \n     * a LOT (mutually dependent services in multiple threads being realized at the same time).\n     * \n     * \n     */\nprivate synchronized Object getService()\n    {\n        if (_service == null)\n        {\n\n            if (_building)\n                throw new ApplicationRuntimeException(ImplMessages.recursiveServiceBuild(this));\n\n            _building = true;\n\n            try\n            {\n\n                ServiceModelFactory factory = getModule().getServiceModelFactory(getServiceModel());\n\n                _serviceModelObject = factory.createServiceModelForService(this);\n\n                _service = _serviceModelObject.getService();\n            }\n            finally\n            {\n                _building = false;\n            }\n        }\n\n        return _service;\n    }"} {"path":"downloaded/ServicePointImpl.java","method_name":"getService","content":"/**\n     * Invoked by {@link #getService(Class)} to get a service implementation \n     * from the {@link ServiceModel}.\n     * \n     * <p>\n     * TODO: I'm concerned that this synchronized method could cause a deadlock. It would take \n     * a LOT (mutually dependent services in multiple threads being realized at the same time).\n     * \n     * \n     */\npublic Object getService(Class serviceInterface)\n    {\n        Object result = getService();\n\n        if (!serviceInterface.isAssignableFrom(result.getClass()))\n        {\n            throw new ApplicationRuntimeException(\n                ImplMessages.serviceWrongInterface(this, serviceInterface),\n                getLocation(),\n                null);\n        }\n\n        return result;\n    }"} {"path":"downloaded/ServicePointImpl.java","method_name":"getServiceModel","content":"/**\n     * Invoked by {@link #getService(Class)} to get a service implementation \n     * from the {@link ServiceModel}.\n     * \n     * <p>\n     * TODO: I'm concerned that this synchronized method could cause a deadlock. It would take \n     * a LOT (mutually dependent services in multiple threads being realized at the same time).\n     * \n     * \n     */\npublic String getServiceModel()\n    {\n        return _serviceModel;\n    }"} {"path":"downloaded/ServicePointImpl.java","method_name":"getOrderedInterceptorContributions","content":"/**\n     * Invoked by {@link #getService(Class)} to get a service implementation \n     * from the {@link ServiceModel}.\n     * \n     * <p>\n     * TODO: I'm concerned that this synchronized method could cause a deadlock. It would take \n     * a LOT (mutually dependent services in multiple threads being realized at the same time).\n     * \n     * \n     */\npublic List getOrderedInterceptorContributions()\n    {\n        if (!_interceptorsOrdered)\n        {\n            _interceptorContributions = orderInterceptors();\n            _interceptorsOrdered = true;\n        }\n\n        return _interceptorContributions;\n    }"} {"path":"downloaded/ServicePointImpl.java","method_name":"orderInterceptors","content":"/**\n     * Invoked by {@link #getService(Class)} to get a service implementation \n     * from the {@link ServiceModel}.\n     * \n     * <p>\n     * TODO: I'm concerned that this synchronized method could cause a deadlock. It would take \n     * a LOT (mutually dependent services in multiple threads being realized at the same time).\n     * \n     * \n     */\nprivate List orderInterceptors()\n    {\n        if (HiveMind.isEmpty(_interceptorContributions))\n            return null;\n\n        // Any error logging should go to the extension point\n        // we're constructing.\n\n        Log log = LogFactory.getLog(getExtensionPointId());\n\n        Orderer orderer =\n            new Orderer(log, getModule().getErrorHandler(), ImplMessages.interceptorContribution());\n\n        Iterator i = _interceptorContributions.iterator();\n        while (i.hasNext())\n        {\n            ServiceInterceptorContribution sic = (ServiceInterceptorContribution) i.next();\n\n            // Sort them into runtime excecution order. When we build \n            // the interceptor stack we'll apply them in reverse order,\n            // building outward from the core service implementation.\n\n            orderer.add(\n                sic,\n                sic.getFactoryServiceId(),\n                sic.getPrecedingInterceptorIds(),\n                sic.getFollowingInterceptorIds());\n        }\n\n        return orderer.getOrderedObjects();\n    }"} {"path":"downloaded/ServicePointImpl.java","method_name":"getShutdownCoordinator","content":"/**\n     * Invoked by {@link #getService(Class)} to get a service implementation \n     * from the {@link ServiceModel}.\n     * \n     * <p>\n     * TODO: I'm concerned that this synchronized method could cause a deadlock. It would take \n     * a LOT (mutually dependent services in multiple threads being realized at the same time).\n     * \n     * \n     */\npublic ShutdownCoordinator getShutdownCoordinator()\n    {\n        return _shutdownCoordinator;\n    }"} {"path":"downloaded/ServicePointImpl.java","method_name":"getServiceLog","content":"/**\n     * Forces the service into existence.\n     */\npublic Log getServiceLog()\n    {\n        return LogFactory.getLog(getExtensionPointId());\n    }"} {"path":"downloaded/ServicePointImpl.java","method_name":"getParametersCount","content":"/**\n     * Forces the service into existence.\n     */\npublic Occurances getParametersCount()\n    {\n        return _parametersCount;\n    }"} {"path":"downloaded/RelatesToGUI.java","method_name":"queryDatabaseForDataRow","content":"/**\n\t * Grabs the results of the query being made, with reference being what column in the entrybase is being accessed.\n\t * @param m_dbconn\n\t * @param col\n\t * @return results of the query\n\t */\nprivate ResultSet queryDatabaseForDataRow(Connection m_dbconn, String col) \n\t{\n\t\tResultSet rs = null;\n\t\tString selectStmt = \"SELECT * FROM RELATE_W_CH WHERE Ch_Name=\\\"\" + col + \"\\\"\";\n\n\t\ttry\n\t\t{\n\t\t\tStatement stmt = m_dbconn.createStatement();\n\n\t\t\trs = stmt.executeQuery(selectStmt);\n\t\t\trs.next();\n\t\t} catch (SQLException e)\n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn rs;\n\t}"} {"path":"downloaded/RelatesToGUI.java","method_name":"queryDatabaseForPrimaryKeys","content":"/**\n\t * Grabs the primary keys that will be used to find information in the entrybase\n\t * @param m_dbconn\n\t * @return set of strings for the drop down menu\n\t */\npublic String[] queryDatabaseForPrimaryKeys(Connection m_dbconn)\n\t{\n\t\tResultSet rs = null;\n\t\tString selectStmt = \"SELECT Ch_Name FROM RELATE_W_CH\";\n\t\tString selectCount = \"SELECT COUNT(*) FROM RELATE_W_CH\";\n\t\tString[] entry = null;\n\t\t\n\t\tif(curPK!=null&&!(curPK.equals(\"(new entry)\")))\n\t\t{\n\t\t\tString selectStmt1 = \"SELECT Cr_ID FROM RELATE_W_CH WHERE Ch_Name =\\\"\" +curPK+ \"\\\"\";\n\t\t\tString selectCount1 = \"SELECT COUNT(*) FROM RELATE_W_CH WHERE Ch_Name = \\\"\"+curPK+\"\\\"\";\n\t\t\tcrIDs = null;\n\t\t\t\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Retrieve the count of primary keys in the table\n\t\t\t\tStatement stmt = m_dbconn.createStatement();\n\t\t\t\trs = stmt.executeQuery(selectCount1);\n\t\t\t\tint count = 1;\n\t\t\t\twhile (rs.next())\n\t\t\t\t{\n\t\t\t\t\tcount = rs.getInt(1);\n\t\t\t\t}\n\n\t\t\t\t//Dynamically create the array so as to not worry about the number of items\n\t\t\t\tcrIDs = new String[count + 1];\n\t\t\t\tcrIDs[0] = \"(new entry)\";\n\n\t\t\t\t// Retrieve the primary keys from the table\n\t\t\t\t// and store each one in an array of Strings\n\t\t\t\trs = stmt.executeQuery(selectStmt1);\n\t\t\t\tint i = 0;\n\t\t\t\twhile (rs.next() && i < crIDs.length)\n\t\t\t\t{\n\t\t\t\t\tcrIDs[i + 1] = rs.getString(\"Cr_ID\");\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Retrieve the count of primary keys in the table\n\t\t\t\trs = stmt.executeQuery(selectCount);\n\t\t\t\tcount = 1;\n\t\t\t\twhile (rs.next())\n\t\t\t\t{\n\t\t\t\t\tcount = rs.getInt(1);\n\t\t\t\t}\n\n\t\t\t\t//Dynamically create the array so as to not worry about the number of items\n\t\t\t\tentry = new String[count + 2];\n\t\t\t\tentry[0] = curPK;\n\t\t\t\tentry[1] = \"(new entry)\";\n\n\t\t\t\t// Retrieve the primary keys from the table\n\t\t\t\t// and store each one in an array of Strings\n\t\t\t\trs = stmt.executeQuery(selectStmt);\n\t\t\t\ti = 0;\n\t\t\t\twhile (rs.next() && i < entry.length)\n\t\t\t\t{\n\t\t\t\t\tentry[i + 2] = rs.getString(\"Ch_Name\");\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t} catch (SQLException e)\n\t\t\t{\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcrIDs = new String [1];\n\t\t\tcrIDs[0] = \"(new entry)\";\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Retrieve the count of primary keys in the table\n\t\t\t\tStatement stmt = m_dbconn.createStatement();\n\t\t\t\trs = stmt.executeQuery(selectCount);\n\t\t\t\tint count = 1;\n\t\t\t\twhile (rs.next())\n\t\t\t\t{\n\t\t\t\t\tcount = rs.getInt(1);\n\t\t\t\t}\n\n\t\t\t\t//Dynamically create the array so as to not worry about the number of items\n\t\t\t\tentry = new String[count + 1];\n\t\t\t\tentry[0] = \"(new entry)\";\n\n\t\t\t\t// Retrieve the primary keys from the table\n\t\t\t\t// and store each one in an array of Strings\n\t\t\t\trs = stmt.executeQuery(selectStmt);\n\t\t\t\tint i = 0;\n\t\t\t\twhile (rs.next() && i < entry.length)\n\t\t\t\t{\n\t\t\t\t\tentry[i + 1] = rs.getString(\"Ch_Name\");\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t} catch (SQLException e)\n\t\t\t{\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn entry;\n\t}"} {"path":"downloaded/OrderLog.java","method_name":"getId","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column tb_order_log.id\n     *\n     * @return the value of tb_order_log.id\n     *\n     * @mbg.generated\n     */\npublic Long getId() {\n        return id;\n    }"} {"path":"downloaded/OrderLog.java","method_name":"getSeller","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column tb_order_log.seller\n     *\n     * @return the value of tb_order_log.seller\n     *\n     * @mbg.generated\n     */\npublic String getSeller() {\n        return seller;\n    }"} {"path":"downloaded/OrderLog.java","method_name":"getBuyer","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column tb_order_log.buyer\n     *\n     * @return the value of tb_order_log.buyer\n     *\n     * @mbg.generated\n     */\npublic String getBuyer() {\n        return buyer;\n    }"} {"path":"downloaded/OrderLog.java","method_name":"getCreated","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column tb_order_log.created\n     *\n     * @return the value of tb_order_log.created\n     *\n     * @mbg.generated\n     */\npublic Date getCreated() {\n        return created;\n    }"} {"path":"downloaded/ArkDownloadTemplateLink.java","method_name":"writeOutXlsFileToBytes","content":"/**\n\t * \n\t */\npublic byte[] writeOutXlsFileToBytes()\n\t{\n\t\tbyte[] bytes = null;\n\t\ttry\n\t\t{\n\t\t\tByteArrayOutputStream output = new ByteArrayOutputStream();\n\t\t\tWritableWorkbook w = Workbook.createWorkbook(output);\n\t\t\tWritableSheet writableSheet = w.createSheet(\"Sheet\", 0);\n\n\t\t\tfor (int row = 0; row < sheetMetaData.getRows(); row++)\n\t\t\t{\n\t\t\t\tfor (int col = 0; col < sheetMetaData.getCols(); col++)\n\t\t\t\t{\n\t\t\t\t\tString cellData = getTemplateHeader()[col];\n\t\t\t\t\tjxl.write.Label label = new jxl.write.Label(col, row, cellData);\n\t\t\t\t\twritableSheet.addCell(label);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tw.write();\n\t\t\tw.close();\n\t\t\tbytes = output.toByteArray();\n\t\t\toutput.close();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn bytes;\n\t}"} {"path":"downloaded/ArkDownloadTemplateLink.java","method_name":"getTemplateHeader","content":"/**\n\t * \n\t */\npublic String[] getTemplateHeader() {\n\t\treturn templateHeader;\n\t}"} {"path":"downloaded/MqEntity.java","method_name":"\tprivate","content":"/**执行\n队列id*/\n\tprivate Long mqId;\n\tpublic int"} {"path":"downloaded/MqEntity.java","method_name":"is.count ","content":"/**执行\nt) {\n\t\tthis.count = count;\n\t}\n\n\tpublic T g"} {"path":"downloaded/MqEntity.java","method_name":"ject = ","content":"/**执行\n {\n\t\tthis.object = object;\n\t}\n\n\tpublic Da"} {"path":"downloaded/MqEntity.java","method_name":"date = ","content":"/**执行\nate) {\n\t\tthis.date = date;\n\t}\n\n\tpublic Stri"} {"path":"downloaded/MqEntity.java","method_name":"s.type ","content":"/**执行\nype) {\n\t\tthis.type = type;\n\t}\n\n\tpublic Lo"} {"path":"downloaded/LoginERPBean.java","method_name":"public String g","content":"/**\n     * msg : 短信验证码失效\n     * code :\nt code;\n\n\n    public String getAccess_token() {\n        return acces"} {"path":"downloaded/LoginERPBean.java","method_name":"public String","content":"/**\n     * msg : 短信验证码失效\n     * code :\nn;\n    }\n\n    public String getToken_type() {\n        return tok"} {"path":"downloaded/LoginERPBean.java","method_name":"   public int","content":"/**\n     * msg : 短信验证码失效\n     * code :\ne;\n    }\n\n    public int getExpires_in() {\n        return exp"} {"path":"downloaded/LoginERPBean.java","method_name":"public S","content":"/**\n     * msg : 短信验证码失效\n     * code :\nn;\n    }\n\n    public String getScope() {\n        retur"} {"path":"downloaded/LoginERPBean.java","method_name":"public","content":"/**\n     * msg : 短信验证码失效\n     * code :\ne;\n    }\n\n    public String getMsg() {\n        ret"} {"path":"downloaded/LoginERPBean.java","method_name":"   publ","content":"/**\n     * msg : 短信验证码失效\n     * code :\ng;\n    }\n\n    public int getCode() {\n        retu"} {"path":"downloaded/PaperController.java","method_name":"ory.save(vote);\n ","content":"   /**\n     * 获取论文�\nlPaperRepository.save(externalPaper);\n            voteRepository.save(vote);\n        }\n    }\n\n    /**\n     * 删除指定的外部论文\n"} {"path":"downloaded/PaperController.java","method_name":"ervice.deleteE","content":"   /**\n     * 获取论文�\nExternalPaper(@PathVariable int id) {\n        paperService.deleteExternalPaper(id);\n    }\n\n    /**\n     * 查询所有的评审投票\n     * @retu"} {"path":"downloaded/PaperController.java","method_name":"Paper();\n ","content":"   /**\n     * 获取论文�\nternalPaper() {\n        return paperService.listExternalPaper();\n    }\n\n\n    /**\n     * 查询指定id的ExternalPaper\n     * @param pid\n   "} {"path":"downloaded/RocketPerformance.java","method_name":"formatDouble","content":"/*************\n    * formatDouble method\n    *    -This method takes a double as a parameter and returns a double with two decimals.\n    *    @param   double to be truncated\n    *    @return  double that has been truncated\n    ****************/\nprivate double formatDouble(double number){\n      return Double.parseDouble(String.format(\"%.2f\", number));\n   }"} {"path":"downloaded/BfdPortFsm.java","method_name":"builder","content":"/**\n         * Builder.\n         */\npublic static BfdPortFsmContextBuilder builder(BfdPortFsm fsm, IBfdPortCarrier carrier) {\n            return builder(carrier)\n                    .fsm(fsm);\n        }"} {"path":"downloaded/BfdPortFsm.java","method_name":"builder","content":"/**\n         * Builder.\n         */\npublic static BfdPortFsmContextBuilder builder(IBfdPortCarrier carrier) {\n            return (new BfdPortFsmContextBuilder())\n                    .output(carrier);\n        }"} {"path":"downloaded/JBattelField.java","method_name":"getBattelField","content":"/**\n     * \n     */\npublic BattelField getBattelField() {\n        return battelField;\n        \n    }"} {"path":"downloaded/JBattelField.java","method_name":"getColor","content":"/**\n     * \n     */\nprivate Color getColor(TypeField typeField) {\n        switch(typeField){\n            case GRASS: return Color.GREEN; \n            case ROCK: return Color.GRAY;\n            case TREE: return new Color(0.2f,0.9f,0.2f);\n            default: return Color.BLACK;            \n        }\n    }"} {"path":"downloaded/JBattelField.java","method_name":"inArray","content":"/**\n     * \n     */\nprivate boolean inArray(int i, int j) {\n        return (i>=0)&&(i<battelField.getHigth())&&(j>=0)&&(j<battelField.getWeidth());\n    }"} {"path":"downloaded/JBattelField.java","method_name":"isMiniSelected","content":"/**\n     * \n     */\nprivate boolean isMiniSelected(int i, int j) {\n       boolean inarray= inArray(i,j);\n       if (inarray)\n           return (battelField.getBattelfield()[i][j].getMiniOcupant()!=null);\n       return false;\n    }"} {"path":"downloaded/JBattelField.java","method_name":"getMiniColor","content":"/**\n     * \n     */\nprivate Color getMiniColor(MiniLevel miniLevel){\n        switch(miniLevel){\n            case SIMPLE_SOLDIER: return JBattelField.Soldier;\n            case SARGENT:return JBattelField.Sargent;\n            case CENTURION: return JBattelField.Centurion;\n            case CAPTAIN: return JBattelField.Captain;\n            case HERO: return JBattelField.Hero;\n            case LEGENDARY_HERO:return JBattelField.Legendary_hero;\n            default: return Color.black;\n        }\n    }"} {"path":"downloaded/VariableGenerator.java","method_name":"getSyms","content":"/**\n     * @return the syms\n     */\npublic SymbolFactoryImpl getSyms()\n    {\n        return syms;\n    }"} {"path":"downloaded/VariableGenerator.java","method_name":"generate_new_variable","content":"/**\n     * reset_variable_generator\n     * \n     * @param conds_with_vars_to_avoid\n     * @param actions_with_vars_to_avoid\n     */\npublic Variable generate_new_variable(String prefix)\n    {\n        char first_letter = prefix.charAt(0);\n        if(Character.isLetter(first_letter))\n        {\n            first_letter = Character.toLowerCase(first_letter);\n        }\n        else\n        {\n            first_letter = 'v';\n        }\n        \n        Variable New = null;\n        while(true)\n        {\n            String name = \"<\" + prefix\n                    + gensymed_variable_count[first_letter - 'a']++ + \">\";\n            \n            New = syms.make_variable(name);\n            if(New.gensym_number != current_variable_gensym_number)\n            {\n                break;\n                \n            }\n        }\n        \n        New.current_binding_value = null;\n        New.gensym_number = current_variable_gensym_number;\n        return New;\n    }"} {"path":"downloaded/JBattelField.java","method_name":" getMiniAcces","content":"/**\n     * \n     */\n public List<Field> getMiniAccess() {\n        return miniAccess;\n    "} {"path":"downloaded/JBattelField.java","method_name":" getSelectedMin","content":"/**\n     * \n     */\n public Mini getSelectedMini() {\n        return selectedMini;\n    "} {"path":"downloaded/JBattelField.java","method_name":" getKeepAcces","content":"/**\n     * \n     */\n public List<Field> getKeepAccess() {\n        return keepAccess;\n    "} {"path":"downloaded/JBattelField.java","method_name":" puntaflech","content":"/**\n     * \n     */\n private Polygon puntaflecha(int i, int j) {\n        int[] x = {((i*SIZE_FIELD)+(SIZE_FIELD-(SIZE_FIELD/8))),\n                    ((i*SIZE_FIELD)+(SIZE_FIELD-(SIZE_FIELD/8))),\n                    ((i+1)*SIZE_FIELD)};\n        int[] y ={((j*SIZE_FIELD)+(SIZE_FIELD/8)),((j*SIZE_FIELD)+((3*SIZE_FIELD)/8)),((j*SIZE_FIELD)+(SIZE_FIELD/4))};\n        Polygon p = new Polygon(x, y, 3);\n        return p;\n    "} {"path":"downloaded/JBattelField.java","method_name":" getActivationStackSelectedMin","content":" /**\n     * Pinta un cuadro de texto donde se informa del resultado del combate.\n     * @param crc\n     *\n public Mini getActivationStackSelectedMini() {\n        return activationStackSelectedMini;\n    "} {"path":"downloaded/JBattelField.java","method_name":" getGam","content":" /**\n     * Pinta un cuadro de texto donde se informa del resultado del combate.\n     * @param crc\n     *\n public Game getGame() {\n        return game;\n    "} {"path":"downloaded/JBattelField.java","method_name":" getDummyGraphicsEngin","content":" /**\n     * Pinta un cuadro de texto donde se informa del resultado del combate.\n     * @param crc\n     *\n public DummyGraphicsEngine getDummyGraphicsEngine() {\n        return dummyGraphicsEngine;\n    "} {"path":"downloaded/CreateOrderNumberUtils.java","method_name":"订单连续的编","content":"/**\n\t * 获取同一秒钟 生成的订单号连续\n\t * \n\t * @param no\n\t *            数据�\n心编号\n\t * @return 同一秒内订单连续的编号\n\t */\n\tpublic static synchronized String getOrderNoByAtomic() {\n\tatomicInteger.getAndIncrement();\n\tint i = atomicInteger.get();\n\tString date = si"} {"path":"downloaded/DListNode2.java","method_name":"getVertex","content":"/**\n  *   getVertex() gets the correcsponding vertex \n  **/\npublic Object getVertex(){\n    return this.vertex;\n  }"} {"path":"downloaded/DListNode2.java","method_name":"next","content":"/**\n  * next() gets the next that corresponds to this.\n  **/\npublic DListNode2 next(){\n    return this.next;\n  }"} {"path":"downloaded/DListNode2.java","method_name":"prev","content":"/**\n  *   prev() gets the previous DListNode that corresponds to this. \n  **/\npublic DListNode2 prev(){\n    return this.prev;\n  }"} {"path":"downloaded/DListNode2.java","method_name":"list","content":"/**\n  *   list() returns the DList that the DListNode is pointing to. \n  **/\npublic DList2 list(){\n    return this.list;\n  }"} {"path":"downloaded/DListNode2.java","method_name":"correspondingPair","content":"/**\n  *   correspondingPair() returns the DListNode that the \n  *   current node is pointing to. \n  **/\npublic DListNode2 correspondingPair(){\n    return this.correspondingPair;\n  }"} {"path":"downloaded/DListNode2.java","method_name":"toString","content":"/**\n  *   toString() method for debugging purposes. \n  **/\npublic String toString(){\n    String result = \"[ \";\n    result = result + vertex + \" ]\";\n    return result;\n  }"} {"path":"downloaded/Id5320DataFile.java","method_name":"getCompletionData","content":"/**\n\t * Load the data file and insert it in the WorkingInformation array, and return it.\n\t * \n\t * @return Array of WorkingInformation (Entity class)\n\t * @throws IOException\t\tError occurred in the process of input/output of file..\n\t */\npublic Entity[] getCompletionData() throws IOException, InvalidStatusException\n\t{\n\t\tVector v = new Vector();\n\t\t\n\t\topenReadOnly();\n\t\t\t\n\t\tfor (next(); currentLine != null; next())\n\t\t{\n\t\t\tWorkingInformation wi = new WorkingInformation();\n\t\t\t\t\n\t\t\twi.setOrderNo(getOrderNo());\n\t\t\twi.setCustomerCode(getCustomerCode());\n\t\t\twi.setCustomerName1(getCustomerName());\n\t\t\t\t\n\t\t\tv.addElement(wi);\n\t\t}\n\t\t\n\t\tcloseReadOnly();\n\n\t\tWorkingInformation[] data = new WorkingInformation[v.size()];\n\t\tv.copyInto(data);\n\t\treturn data;\n\t}"} {"path":"downloaded/Id5320DataFile.java","method_name":"getOrderNo","content":"/**\n\t * Obtain the Order No. from data buffer.\n\t * @return\tOrder No.\n\t */\npublic String getOrderNo()\n\t{\n\t\treturn getColumn(OFF_ORDER_NO, LEN_ORDER_NO) ;\n\t}"} {"path":"downloaded/Id5320DataFile.java","method_name":"getCustomerCode","content":"/**\n\t * Obtain the customer code from data buffer.\n\t * @return\t\tCustomer Code\n\t */\npublic String getCustomerCode()\n\t{\n\t\treturn getColumn(OFF_CUSTOMER_CODE, LEN_CUSTOMER_CODE) ;\n\t}"} {"path":"downloaded/Id5320DataFile.java","method_name":"getCustomerName","content":"/**\n\t * Obtain the customer name from data buffer.\n\t * @return\t\tCustomer Name\n\t */\npublic String getCustomerName()\n\t{\n\t\treturn getColumn(OFF_CUSTOMER_NAME, LEN_CUSTOMER_NAME) ;\n\t}"} {"path":"downloaded/Inicio.java","method_name":" getTarea","content":" /**\n     * @param args the command line arguments\n     *\n private ArrayList<Tarea> getTareas(Date desde, Date hasta) {\n        BDConsulter consulter = new BDConsulter(DATABASE_URL, DATABASE_USER, DATABASE_PASS);//genero la clase, que se conecta a la base postgresql\n        consulter.connect();//establezco la conexion\n\n        //Si no hay ningun integrante seleccionado, selecciono todos\n        List<String> integrantesSeleccionados = jListIntegrantes.getSelectedValuesList();\n        DefaultListModel<String> model = (DefaultListModel<String>) jListIntegrantes.getModel();\n        List<String> integrantes = new ArrayList<String>();\n        if (integrantesSeleccionados.size() == 0) {\n            for (int i = 0; i < model.getSize(); i++) {\n                System.out.println((model.getElementAt(i)));\n                integrantes.add(model.getElementAt(i));\n            }\n            integrantesSeleccionados = integrantes;\n        }\n\n        ArrayList<Tarea> tareas = new ArrayList<>();\n        for (String s : integrantesSeleccionados) {\n            tareas.addAll(consulter.getTareas(desde, hasta, (String) jComboBoxProyecto.getSelectedItem(), (String) jComboBoxGrupos.getSelectedItem(), s));//obtengo las tareas creadas entre un rango de fecha dado\n        }\n        consulter.disconnect();//termino la conexion con la base//termino la conexion con la base\n        return tareas;\n    "} {"path":"downloaded/Inicio.java","method_name":" getPromedi","content":" /**\n     * @param args the command line arguments\n     *\n private float getPromedio(ArrayList<Tarea> tareas) {\n        int horasReales = 0;\n        int horasEstimadas = 0;\n        for (Tarea t : tareas) {\n            horasReales += t.getHorasReales();\n            horasEstimadas += t.getHorasEstimadas();\n        }\n        return (1 - (horasReales / horasEstimadas));\n    "} {"path":"downloaded/Inicio.java","method_name":" getAdministrado","content":" /**\n     * @param args the command line arguments\n     *\n public Administrador getAdministrador() {\n        return admin;\n    "} {"path":"downloaded/GameButton.java","method_name":"isClicked","content":"/**\n     * Get button's clicked status\n     * @return whether or not button has been clicked\n     */\npublic boolean isClicked() { return clicked; }"} {"path":"downloaded/DateTimeUtil.java","method_name":"getTimeAgo","content":"/**\n     Utility to convert date string to \"x seconds/minutes/hours ago\" from the current time\n     *\n     * @param dateTime Date time string in the following format {@value Constants#DATE_TIME_FORMAT}\n     * @return Human readable string with time ago\n     * <p>\n     * Example: \"5 seconds Ago\", \"10 minutes ago\", \"1 hour ago\"\n     */\npublic static String getTimeAgo(final String dateTime) {\n        //-- Get current time and parse time of post\n        SimpleDateFormat sdf = new SimpleDateFormat(Constants.DATE_TIME_FORMAT);\n        String timeNow = sdf.format(Calendar.getInstance().getTime());\n        Date d1;\n        Date d2;\n        try {\n            d1 = sdf.parse(dateTime);\n            d2 = sdf.parse(timeNow);\n        } catch (ParseException e) {\n            e.printStackTrace();\n            return \"\";\n        }\n        //-- Get in millis to give \"Time ago\"\n        long elapsed = d2.getTime() - d1.getTime();\n        long seconds = elapsed / 1000;\n        long minutes = seconds / 60;\n        long hours = minutes / 60;\n        //-- Check each style to return time accordingly, adding plural s if needs be\n        if (seconds > 60) {\n            if (minutes > 60) {\n                if (hours > 1) {\n                    return hours + \" hours ago\";\n                }\n                else {\n                    return hours + \" hour ago\";\n                }\n            }\n            else {\n                if (minutes > 1) {\n                    return minutes + \" minutes ago\";\n                }\n                else {\n                    return minutes + \" minute ago\";\n                }\n            }\n        }\n        else {\n            if (seconds > 1) {\n                return seconds + \" seconds ago\";\n            }\n            else {\n                return seconds + \" second ago\";\n            }\n        }\n    }"} {"path":"downloaded/Agent.java","method_name":"getScheduler","content":"/**\n\t * returns the Scheduler this Agent was added to\n\t * @return\n\t */\npublic Scheduler getScheduler() {\n\t\treturn scheduler;\n\t}"} {"path":"downloaded/InternetProductOption.java","method_name":"ing getStockKeepingUnitIdenti","content":"\n\t\n\t/**\n\t * Full constructor\n\n    public String getStockKeepingUnitIdentifier() {\n\t\treturn stockKeepingUnitIdentifier"} {"path":"downloaded/InternetProductOption.java","method_name":"oat getUnitPriceManufacturerSuggestedRe","content":"\n\t\n\t/**\n\t * Full constructor\n\n}\n\n\tpublic float getUnitPriceManufacturerSuggestedRetail() {\n\t\treturn unitPriceManufacturerSuggestedRetail"} {"path":"downloaded/InternetProductOption.java","method_name":"oat getUnitPriceActualRe","content":"\n\t\n\t/**\n\t * Full constructor\n\n}\n\n\tpublic float getUnitPriceActualRetail() {\n\t\treturn unitPriceActualRetail"} {"path":"downloaded/InternetProductOption.java","method_name":"oat getUnitWeightInOu","content":"\n\t\n\t/**\n\t * Full constructor\n\n}\n\n\tpublic float getUnitWeightInOunces() {\n\t\treturn unitWeightInOunces"} {"path":"downloaded/InternetProductOption.java","method_name":"ion getProductAssociat","content":"\n\t\n\t/**\n\t * Full constructor\n\n}\n\n\tpublic Collection getProductAssociations() {\n\t\treturn productAssociations"} {"path":"downloaded/InternetProductOption.java","method_name":"t[] getProductsA","content":"\n\t\n\t/**\n\t * Full constructor\n\n    public Product[] getProductsArray () {\n        return null;\n "} {"path":"downloaded/InternetProductOption.java","method_name":"t[] getConsumerVisibleProd","content":"\n\t\n\t/**\n\t * Full constructor\n\n    public Product[] getConsumerVisibleProducts () {\n        return null;\n "} {"path":"downloaded/InternetProductOption.java","method_name":"oat getSellingP","content":"\n\t\n\t/**\n\t * Full constructor\n\n    public float getSellingPrice () {\n        return (float) 0.0;\n "} {"path":"downloaded/InternetProductOption.java","method_name":"oat getQuantityAvailableFor","content":"\n\t\n\t/**\n\t * Full constructor\n\n    public float getQuantityAvailableForSale () {\n        return (float) 0.0;\n "} {"path":"downloaded/InternetProductOption.java","method_name":"int getFulfillmentTimeIn","content":"\n\t\n\t/**\n\t * Full constructor\n\n    public int getFulfillmentTimeInDays () {\n        return 0;\n "} {"path":"downloaded/StylesheetsLoader.java","method_name":"loadRepository","content":"/**\n\t * Load a single repository of stylesheets\n\t * @param url The URL of the xml stylesheets file describing the repository\n\t * @throws MalformedURLException \n\t * @throws URISyntaxException \n\t */\npublic void loadRepository(String url) throws MalformedURLException, URISyntaxException {\n\t\t\n\t\t//-- Elimiate empty strings\n\t\tif (url.length()==0)\n\t\t\treturn;\n\t\t\n\t\t//-- Try to open the URL\n\t\ttry {\n\t\t\t\n\t\t\t//-- all \\ from windows like path must be converted to /\n\t\t\turl = url.replace(\"\\\\\", \"/\");\n\t\t\t\n\t\t\t//-- Get input stream: All URLss have to point to an xml file\n\t\t\tURI repositoryURI = new URI(url);\n\t\t\t\n\t\t\t//-- If not an XML file, add a default name\n\t\t\tif (!repositoryURI.toString().endsWith(\".xml\") \n\t\t\t\t\t&& (repositoryURI.getScheme()==null || repositoryURI.getScheme().length()==1)) {\n\t\t\t\t\n\t\t\t\t// (add file scheme also)\n\t\t\t\trepositoryURI = new URI(repositoryURI.toString()+\"/\"+\"stylesheets.xml\");\n\t\t\t\t\n\t\t\t} else if (!repositoryURI.toString().endsWith(\".xml\")) {\n\t\t\t\t\n\t\t\t\trepositoryURI = new URI(repositoryURI.toString()+\"/stylesheets.xml\");\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t//-- Add file scheme if a normal file path is provided\n\t\t\t// (scheme length will be 1 under windows because Drive letter is taken as such)\n\t\t\tif (repositoryURI.getScheme()==null || repositoryURI.getScheme().length()==1) {\n\t\t\t\trepositoryURI = new URI(\"file://\"+repositoryURI.toString());\n\t\t\t}\n\t\t\t\n\t\t\t//-- Open\n\t\t\tInputStream repositoryDescriptorStream = null;\n\t\t\ttry {\n\t\t\t\trepositoryDescriptorStream = repositoryURI.toURL().openStream();\n\t\t\t} catch (IOException ioex) {\n\t\t\t\tthrow new MalformedURLException(\"Provided Stylesheet URI: \"+repositoryURI.toString()+\"(original: \"+url+\") could not be opened: \"+ioex.getMessage());\n\t\t\t}\n\t\t\t//System.err.println();\n\t\t\t\n\t\t\t//-- Try to unoox\n\t\t\t/*if (repositoryURI.getScheme().equals(\"file\") && new File(repositoryURI.toURL().getFile()).isDirectory()) {\n\t\t\t\trepositoryURI = TeaFileUtils.buildPathAsFile(new File(repositoryURI.toURL().getFile()),\"stylesheets.xml\").toURI();\n\t\t\t}\n\t\t\tInputStream repositoryDescriptorStream = (repositoryURI.getScheme()==null || repositoryURI.getScheme().equals(\"file\")) ? new FileInputStream(new File(repositoryURI.getPath())):repositoryURI.toURL().openStream();\n\t\t\t*/\n\t\t\t\n\t\t\t//-- Unwrap and read\n\t\t\tWrappingContext ctx = new WrappingContext();\n\t\t\tctx.getReplacementBuffersClassMap().put(Stylesheets.class, StylesheetRepository.class);\n\t\t\t\n\t\t\tStylesheetRepository stylesheets = new StylesheetRepository(repositoryURI);\n\t\t\tstylesheets.setNextBuffer(new DOMXMLIO(XMLUtils.buildDocument(repositoryDescriptorStream,null)));\n\t\t\tstylesheets.unwrap(ctx);\n\t\t\t\n\t\t\t//-- Add to map\n\t\t\tthis.repositories.put(stylesheets.getId().getValue(),stylesheets);\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}  catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (UnwrapException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (SAXException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (ParserConfigurationException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} \n\t\t\n\t}"} {"path":"downloaded/StylesheetsLoader.java","method_name":"getStylesheet","content":"/**\n\t * \n\t * @param qualifiedName  : repositoryId:stylesheetname\n\t * @return null if not found or qualified name is not correct\n\t */\npublic Pair<StylesheetRepository, Stylesheet> getStylesheet(String qualifiedName) {\n\t\tString[] components = qualifiedName.split(\":\");\n\t\tif (components.length!=2)\n\t\t\treturn null;\n\t\treturn this.getStylesheet(components[0], components[1]);\n\t}"} {"path":"downloaded/StylesheetsLoader.java","method_name":"getStylesheet","content":"/**\n\t * \n\t * @param repositoryId\n\t * @param stylesheetName\n\t * @return null if not found\n\t */\npublic Pair<StylesheetRepository, Stylesheet> getStylesheet(String repositoryId,String stylesheetName) {\n\t\t\n\t\t// Get Repository\n\t\t//--------------------\n\t\tStylesheetRepository repository = this.repositories.get(repositoryId);\n\t\tif (repository==null)\n\t\t\treturn null;\n\t\t\n\t\t// Get Stylesheet\n\t\t//-------------------\n\t\tStylesheet stylesheet = null;\n\t\tfor (Stylesheet candidate : repository.getStylesheet()) {\n\t\t\tif (candidate.getName().getValue().equals(stylesheetName)) {\n\t\t\t\tstylesheet = candidate;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (stylesheet==null)\n\t\t\treturn null;\n\t\t\n\t\t// Found :)\n\t\treturn new Pair<StylesheetRepository, Stylesheet>(repository, stylesheet);\n\t\t\n\t}"} {"path":"downloaded/StylesheetsLoader.java","method_name":"getRepositories","content":"/**\n\t * \n\t * @param repositoryId\n\t * @param stylesheetName\n\t * @return null if not found\n\t */\npublic Collection<StylesheetRepository> getRepositories() {\n\t\treturn repositories.values();\n\t}"} {"path":"downloaded/StylesheetsLoader.java","method_name":"getPossibleStylesheetsArray","content":"/**\n\t * \n\t * @return\n\t */\npublic String[] getPossibleStylesheetsArray() {\n\t\t\n\t\t//-- Prepare possible values\n\t\tVector<String> values = new Vector<String>();\n\t\tfor (StylesheetRepository rep : this.repositories.values()) {\n\t\t\t\n\t\t\tfor (Stylesheet stylesheet : rep.getStylesheet()) {\n\t\t\t\tvalues.add(rep.getId()+\":\"+stylesheet.getName().getValue());\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\treturn values.toArray(new String[values.size()]);\n\t\t\n\t}"} {"path":"downloaded/StylesheetsLoader.java","method_name":"getInstance","content":"/**\n\t * Getter for the singleton access\n\t * User can still instanciate this class as he whishes\n\t * @return\n\t */\npublic static synchronized StylesheetsLoader getInstance() {\n\t\t\n\t\tif (ref==null)\n\t\t\tref = new StylesheetsLoader();\n\t\treturn ref;\n\t\t\n\t}"} {"path":"downloaded/Critter.java","method_name":"move","content":"/**\n\t * \n\t * @param front\n\t *            Move forward if front is true, backward if not\n\t * @return True if move was successful\n\t */\npublic boolean move(boolean front) {\n\t\tsynchronized (this) {\n\t\t\tmem[4] -= WorldConstants.MOVE_COST * mem[3];\n\t\t\tint[] change = getcoor(direction);\n\t\t\tif (mem[4] <= 0 || ahead(1) != 0 || !world.isValidHex(c + change[0], r + change[1])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (front) {\n\t\t\t\tworld.worldArray[c + change[0]][r + change[1]] = this;\n\t\t\t\tworld.worldArray[c][r] = new EmptySpace();\n\t\t\t\tc += change[0];\n\t\t\t\tr += change[1];\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tworld.worldArray[c - change[0]][r - change[1]] = this;\n\t\t\t\tworld.worldArray[c][r] = new EmptySpace();\n\t\t\t\tc -= change[0];\n\t\t\t\tr -= change[1];\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t}\n\t}"} {"path":"downloaded/Critter.java","method_name":"turn","content":"/**\n\t * \n\t * @param left\n\t *            Turn left if left is true, right otherwise\n\t */\npublic boolean turn(boolean left) {\n\t\tsynchronized (this) {\n\t\t\tif (mem[4] < mem[3]) {\n\t\t\t\tmem[4] -= mem[3];\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (left) {\n\t\t\t\tdirection--;\n\t\t\t} else {\n\t\t\t\tdirection++;\n\t\t\t}\n\t\t\tdirection = (direction + 6) % 6;\n\t\t\tmem[4] -= mem[3];\n\t\t\treturn true;\n\t\t}\n\t}"} {"path":"downloaded/Critter.java","method_name":"eat","content":"/**\n\t * \n\t * @param left\n\t *            Turn left if left is true, right otherwise\n\t */\npublic boolean eat() {\n\t\tsynchronized (this) {\n\t\t\tint[] change = getcoor(direction);\n\t\t\tif (ahead(1) >= -1) {\n\t\t\t\tmem[4] -= mem[3];\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tFood food = (Food) world.worldArray[c + change[0]][r + change[1]];\n\t\t\tif (food.getAmount() <= getMaxEnergy() - mem[4]) {\n\t\t\t\tmem[4] += food.getAmount() - mem[3];\n\t\t\t\tworld.worldArray[c + change[0]][r + change[1]] = new EmptySpace();\n\t\t\t} else {\n\t\t\t\tfood = new Food(food.getAmount() + (mem[4] - getMaxEnergy()));\n\t\t\t\tworld.worldArray[c + change[0]][r + change[1]] = food;\n\t\t\t\tmem[4] = getMaxEnergy() - mem[3];\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}"} {"path":"downloaded/Critter.java","method_name":"serve","content":"/**\n\t * \n\t * @param left\n\t *            Turn left if left is true, right otherwise\n\t */\npublic boolean serve(int amount) {\n\t\tsynchronized (this) {\n\t\t\tif (amount <= 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (amount >= mem[4] - mem[3]) {\n\t\t\t\tamount = mem[4] - mem[3];\n\t\t\t}\n\t\t\tFood food = new Food(amount);\n\t\t\tint[] change = getcoor(direction);\n\t\t\tif (!world.isValidHex(c + change[0], r + change[1]) || ahead(1) >= 1) {\n\t\t\t\tmem[4] -= mem[3] + amount;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (ahead(1) == 0) {\n\t\t\t\tworld.worldArray[c + change[0]][r + change[1]] = food;\n\t\t\t\tmem[4] -= mem[3] + amount;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (ahead(1) < -1) {\n\t\t\t\tfood = new Food(food.amount + amount);\n\t\t\t\tworld.worldArray[c + change[0]][r + change[1]] = food;\n\t\t\t\tmem[4] -= mem[3] + amount;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}"} {"path":"downloaded/Critter.java","method_name":"attack","content":"/**\n\t * \n\t * @param left\n\t *            Turn left if left is true, right otherwise\n\t */\npublic boolean attack() {\n\t\tsynchronized (this) {\n\t\t\tif (mem[4] <= mem[3] * WorldConstants.ATTACK_COST) {\n\t\t\t\tmem[4] -= mem[3] * WorldConstants.ATTACK_COST;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tint[] change = getcoor(direction);\n\t\t\ttry {\n\t\t\t\tif (ahead(1) > 1) {\n\t\t\t\t\tint s1 = mem[3];\n\t\t\t\t\tint s2 = ((Critter) world.worldArray[c + change[0]][r + change[1]]).getMem(3);\n\t\t\t\t\tint o1 = mem[2];\n\t\t\t\t\tint d2 = ((Critter) world.worldArray[c + change[0]][r + change[1]]).getMem(1);\n\t\t\t\t\tint damage = getDamage(s1, s2, o1, d2);\n\t\t\t\t\t((Critter) world.worldArray[c + change[0]][r + change[1]]).attacked(damage);\n\t\t\t\t\tmem[4] -= mem[3] * WorldConstants.ATTACK_COST;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tmem[4] -= mem[3] * WorldConstants.ATTACK_COST;\n\t\t\treturn false;\n\t\t}\n\t}"} {"path":"downloaded/Critter.java","method_name":"getDamage","content":"/**\n\t * \n\t * @param left\n\t *            Turn left if left is true, right otherwise\n\t */\nprivate int getDamage(int s1, int s2, int o1, int d2) {\n\t\tdouble x = WorldConstants.DAMAGE_INC * (s1 * o1 - s2 * d2);\n\t\tdouble p = 1 / Math.pow(Math.E, x * -1);\n\t\treturn (int) (WorldConstants.BASE_DAMAGE * s1 * p);\n\t}"} {"path":"downloaded/Critter.java","method_name":"tag","content":"/**\n\t * \n\t * @param left\n\t *            Turn left if left is true, right otherwise\n\t */\npublic boolean tag(int amount) {\n\t\tsynchronized (this) {\n\t\t\tmem[4] -= mem[3];\n\t\t\tif (amount < 0 || amount > 99) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (ahead(1) > 0) {\n\t\t\t\tint[] change = getcoor(direction);\n\t\t\t\t((Critter) world.worldArray[c + change[0]][r + change[1]]).tagged(amount);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}"} {"path":"downloaded/Critter.java","method_name":"getComplexity","content":"/**\n\t * \n\t * @param left\n\t *            Turn left if left is true, right otherwise\n\t */\nprivate int getComplexity() {\n\t\treturn ((Rules) rules.root).getRules().size() * WorldConstants.RULE_COST\n\t\t\t\t+ (mem[1] + mem[2]) * WorldConstants.ABILITY_COST;\n\t}"} {"path":"downloaded/Critter.java","method_name":"getMaxEnergy","content":"/**\n\t * \n\t * @param left\n\t *            Turn left if left is true, right otherwise\n\t */\nprivate int getMaxEnergy() {\n\t\treturn WorldConstants.ENERGY_PER_SIZE * mem[3];\n\t}"} {"path":"downloaded/Critter.java","method_name":"bud","content":"/**\n\t * \n\t * @param left\n\t *            Turn left if left is true, right otherwise\n\t */\npublic boolean bud() {\n\t\tsynchronized (this) {\n\t\t\tif (mem[4] < WorldConstants.BUD_COST * getComplexity()) {\n\t\t\t\tmem[4] -= WorldConstants.BUD_COST * getComplexity();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tint[] change = getcoor(direction);\n\t\t\tCritter bud;\n\t\t\tif (!world.isValidHex(c - change[0], c - change[1])) {\n\t\t\t\tmem[4] -= WorldConstants.BUD_COST * getComplexity();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (world.worldArray[c - change[0]][r - change[1]].getInfo(direction) == 0) {\n\t\t\t\tbud = new Critter(name, mem[0], mem[1], mem[2], 1, WorldConstants.INITIAL_ENERGY, 0, world, direction,\n\t\t\t\t\t\tc - change[0], r - change[1], rules.clone());\n\t\t\t\tworld.worldArray[c - change[0]][r - change[0]] = bud;\n\t\t\t\tbud.mutate();\n\t\t\t\tmem[4] -= WorldConstants.BUD_COST * getComplexity();\n\t\t\t\tworld.critterList.add(bud);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}"} {"path":"downloaded/Critter.java","method_name":"mate","content":"/**\n\t * \n\t * @param left\n\t *            Turn left if left is true, right otherwise\n\t */\npublic boolean mate() {\n\t\tsynchronized (this) {\n\t\t\twannaMate = true;\n\t\t\tCritter child, parent;\n\t\t\tint zero, one, two;\n\t\t\tString name;\n\t\t\tRandom rand = new Random();\n\t\t\tif (ahead(1) < 2) {\n\t\t\t\tmem[4] -= mem[3];\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tint[] change = getcoor(direction);\n\t\t\tif (!world.isValidHex(c + change[0], r + change[1])) {\n\t\t\t\tmem[4] -= mem[3];\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tparent = (Critter) world.worldArray[c + change[0]][r + change[1]];\n\t\t\tif (parent.getMateStatus() && mem[4] >= 5 * getComplexity() && parent.mem[4] >= 5 * parent.getComplexity()\n\t\t\t\t\t&& parent.getAppearance(direction) % 10 == 3) {\n\t\t\t\tProgramImpl ast = mixRules(rules.clone(), parent.rules.clone());\n\t\t\t\tname = rand.nextBoolean() ? this.name : parent.name;\n\t\t\t\tzero = rand.nextBoolean() ? mem[0] : parent.mem[0];\n\t\t\t\tone = rand.nextBoolean() ? mem[1] : parent.mem[1];\n\t\t\t\ttwo = rand.nextBoolean() ? mem[2] : parent.mem[2];\n\t\t\t\tif (rand.nextBoolean()) {\n\t\t\t\t\tif (!world.isValidHex(c + 2 * change[0], r + 2 * change[1])) {\n\t\t\t\t\t\tmem[4] -= mem[3];\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif (world.worldArray[c + 2 * change[0]][r + 2 * change[0]].getInfo(0) == 0) {\n\t\t\t\t\t\tchild = new Critter(name, zero, one, two, 1, WorldConstants.INITIAL_ENERGY, 0, world,\n\t\t\t\t\t\t\t\trand.nextInt(6), c + 2 * change[0], r + 2 * change[1], ast);\n\t\t\t\t\t\tworld.worldArray[c + 2 * change[0]][r + 2 * change[1]] = child;\n\t\t\t\t\t\tmem[4] -= 5 * getComplexity();\n\t\t\t\t\t\tparent.mem[4] -= 5 * parent.getComplexity();\n\t\t\t\t\t\tworld.critterList.add(child);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmem[4] -= mem[3];\n\t\t\t\t\t\tparent.mem[4] -= parent.mem[3];\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!world.isValidHex(c - change[0], r - change[1])) {\n\t\t\t\t\t\tmem[4] -= mem[3];\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif (world.worldArray[c - change[0]][r - change[0]].getInfo(0) == 0) {\n\t\t\t\t\t\tchild = new Critter(name, zero, one, two, 1, WorldConstants.INITIAL_ENERGY, 0, world,\n\t\t\t\t\t\t\t\trand.nextInt(6), c - change[0], r - change[1], ast);\n\t\t\t\t\t\tworld.worldArray[c - change[0]][r - change[1]] = child;\n\t\t\t\t\t\tmem[4] -= 5 * getComplexity();\n\t\t\t\t\t\tparent.mem[4] -= 5 * parent.getComplexity();\n\t\t\t\t\t\tworld.critterList.add(child);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmem[4] -= mem[3];\n\t\t\t\t\t\tparent.mem[4] -= parent.mem[3];\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmem[4] -= mem[3];\n\t\t\t\tif (parent.getMateStatus())\n\t\t\t\t\tparent.mem[4] -= parent.mem[3];\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}"} {"path":"downloaded/Critter.java","method_name":"mixRules","content":"/**\n\t * \n\t * @param left\n\t *            Turn left if left is true, right otherwise\n\t */\nprivate ProgramImpl mixRules(ProgramImpl clone, ProgramImpl clone2) {\n\t\tRandom rand = new Random();\n\t\tProgramImpl childRules = new ProgramImpl();\n\t\tint times;\n\t\tif (rand.nextBoolean()) {\n\t\t\ttimes = clone.root.rules.size();\n\t\t} else {\n\t\t\ttimes = clone2.root.rules.size();\n\t\t}\n\t\tfor (int i = 0; i < times; i++) {\n\t\t\twhile (true) {\n\t\t\t\tif (rand.nextBoolean()) {\n\t\t\t\t\tif (i < clone.root.rules.size()) {\n\t\t\t\t\t\tchildRules.root.addRule(clone.root.rules.get(i));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (i < clone2.root.rules.size()) {\n\t\t\t\t\t\tchildRules.root.addRule(clone2.root.rules.get(i));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn childRules;\n\t}"} {"path":"downloaded/Critter.java","method_name":"getMateStatus","content":"/**\n\t * \n\t * @param left\n\t *            Turn left if left is true, right otherwise\n\t */\npublic boolean getMateStatus() {\n\t\treturn wannaMate;\n\t}"} {"path":"downloaded/Critter.java","method_name":"getAppearance","content":"/**\n\t * \n\t * @param dir\n\t *            The direction that the observing critter is facing\n\t * @return the critter's \"size * 100000 + tag * 1000 + posture * 10 +\n\t *         direction\" the relative direction of this critter to the observer\n\t *         critter\n\t */\npublic int getAppearance(int dir) {\n\t\tint size = mem[3];\n\t\tint tag = mem[6];\n\t\tint posture = mem[7];\n\t\tint direction = (6 - this.direction - dir + 12) % 6;\n\t\treturn size * 100000 + tag * 1000 + posture * 10 + direction;\n\t}"} {"path":"downloaded/Critter.java","method_name":"toString","content":"/**\n\t * \n\t * @param dir\n\t *            The direction that the observing critter is facing\n\t * @return the critter's \"size * 100000 + tag * 1000 + posture * 10 +\n\t *         direction\" the relative direction of this critter to the observer\n\t *         critter\n\t */\npublic String toString() {\n\t\treturn String.valueOf(direction);\n\t}"} {"path":"downloaded/Critter.java","method_name":"getInfo","content":"/**\n\t * \n\t * @param dir\n\t *            The direction that the observing critter is facing\n\t * @return the critter's \"size * 100000 + tag * 1000 + posture * 10 +\n\t *         direction\" the relative direction of this critter to the observer\n\t *         critter\n\t */\n@Override\n\tpublic int getInfo(int dir) {\n\t\treturn getAppearance(dir);\n\t}"} {"path":"downloaded/Critter.java","method_name":"getMem","content":"/**\n\t * \n\t * @param dir\n\t *            The direction that the observing critter is facing\n\t * @return the critter's \"size * 100000 + tag * 1000 + posture * 10 +\n\t *         direction\" the relative direction of this critter to the observer\n\t *         critter\n\t */\npublic int getMem(int index) {\n\t\tif (index >= mem[0] || index < 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn mem[index];\n\t}"} {"path":"downloaded/Critter.java","method_name":"getcoor","content":"/**\n\t * A 25% chance to mutate once by calling the helper method, 6.25% to mutate\n\t * twice, etc.\n\t */\nprivate int[] getcoor(int direction) {\n\t\tint[] temp = new int[2];\n\t\tdirection = (direction % 6 + 6) % 6;\n\t\tswitch (direction) {\n\t\tcase 0:\n\t\t\ttemp[0] = 0;\n\t\t\ttemp[1] = 1;\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\ttemp[0] = 1;\n\t\t\ttemp[1] = 1;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\ttemp[0] = 1;\n\t\t\ttemp[1] = 0;\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\ttemp[0] = 0;\n\t\t\ttemp[1] = -1;\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\ttemp[0] = -1;\n\t\t\ttemp[1] = -1;\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\ttemp[0] = -1;\n\t\t\ttemp[1] = 0;\n\t\t\tbreak;\n\t\t}\n\t\treturn temp;\n\t}"} {"path":"downloaded/Critter.java","method_name":"clone","content":"/**\n\t * A 25% chance to mutate once by calling the helper method, 6.25% to mutate\n\t * twice, etc.\n\t */\npublic Critter clone() {\n\t\treturn new Critter(name, mem[0], mem[1], mem[2], mem[3], mem[4], mem[7], world, direction, c, r, rules.clone());\n\t}"} {"path":"downloaded/SchemaUpdateMetadataTest.java","method_name":"createHotRodServer","content":"/**\n    * Configure the server, enabling the admin operations\n    *\n    * @return the HotRod server\n    */\n@Override\n   protected HotRodServer createHotRodServer() {\n      HotRodServerConfigurationBuilder serverBuilder = new HotRodServerConfigurationBuilder();\n      serverBuilder.adminOperationsHandler(new EmbeddedServerAdminOperationHandler());\n\n      return HotRodClientTestingUtil.startHotRodServer(cacheManager, serverBuilder);\n   }"} {"path":"downloaded/SchemaUpdateMetadataTest.java","method_name":"queryIsOnTheCache","content":"/**\n    * Configure the server, enabling the admin operations\n    *\n    * @return the HotRod server\n    */\nprivate void queryIsOnTheCache(boolean isPresent) {\n      QueryCache queryCache = getGlobalQueryCache();\n      AtomicBoolean present = new AtomicBoolean(true);\n      queryCache.get(cache.getName(), QUERY_SORT, null, IckleParsingResult.class, (qs, accumulators) -> {\n         present.set(false); // true => is not present\n         return null;\n      });\n      assertThat(present.get()).isEqualTo(isPresent);\n   }"} {"path":"downloaded/SchemaUpdateMetadataTest.java","method_name":"getGlobalQueryCache","content":"/**\n    * Configure the server, enabling the admin operations\n    *\n    * @return the HotRod server\n    */\nprivate QueryCache getGlobalQueryCache() {\n      return cache.getAdvancedCache().getComponentRegistry().getGlobalComponentRegistry()\n            .getComponent(QueryCache.class);\n   }"} {"path":"downloaded/SchemaUpdateMetadataTest.java","method_name":"descriptor","content":"/**\n    * Configure the server, enabling the admin operations\n    *\n    * @return the HotRod server\n    */\nprivate Descriptor descriptor() {\n      ProtobufMatcher matcher = cache.getAdvancedCache().getComponentRegistry()\n            .getComponent(ProtobufMatcher.class);\n      assertThat(matcher).isNotNull();\n\n      ObjectPropertyHelper<Descriptor> propertyHelper = matcher.getPropertyHelper();\n      assertThat(propertyHelper).isNotNull();\n\n      Descriptor descriptor = propertyHelper.getEntityMetadata(\"io.pro.Programmer\");\n      assertThat(descriptor).isNotNull();\n\n      return descriptor;\n   }"} {"path":"downloaded/SceneFurniRecord.java","method_name":"toFurniData","content":"/**\n     * Converts this persistent record to the corresponding runtime record.\n     */\npublic FurniData toFurniData ()\n    {\n        FurniData furni = new FurniData();\n        furni.id = furniId;\n        furni.itemType = itemType;\n        furni.itemId = itemId;\n        furni.media = SceneUtil.createMediaDesc(mediaHash, mediaType);\n        furni.loc = new MsoyLocation(x, y, z, 0);\n        furni.layoutInfo = layoutInfo;\n        furni.scaleX = scaleX;\n        furni.scaleY = scaleY;\n        furni.rotation = rotation;\n        furni.hotSpotX = hotSpotX;\n        furni.hotSpotY = hotSpotY;\n        furni.actionType = actionType;\n        furni.actionData = actionData;\n        return furni;\n    }"} {"path":"downloaded/SceneFurniRecord.java","method_name":"getKey","content":"/**\n     * Create and return a primary {@link Key} to identify a {@link SceneFurniRecord}\n     * with the supplied key values.\n     */\npublic static Key<SceneFurniRecord> getKey (int sceneId, short furniId)\n    {\n        return newKey(_R, sceneId, furniId);\n    }"} {"path":"downloaded/RewardPunishmentController.java","method_name":"PostMapping(\"/save\")","content":"/**\n\t * 返回id 录入奖惩信息成功\n\t * msg 未知错误，数据未录入\n\t * \naram RewardPunishment\n\t * @return\n\t */\n\t@PostMapping(\"/save\")\n\tpublic JSONResult saveRewardPunishment(@RequestBody RewardPunishmentDTO dto) {\n\t\tRewardPunishment rewardPunishment=new RewardPunishment();\n\t\tBeanUtils.copyProperties(dto, rewardPunishment);\n\t\trewardPunishment.setState(1);\n\t\trewardPunishment.setCheckStatus(0);\n\t\trewardPunishment.setCreateTime(new Date());\n\t\trewardPunishment.setEmployeeId(employeeService.queryEmployeeByUserName(dto.getUserName()).getId());\n\t\trewardPunishmentService.saveRewardPunishment(rewardPunishment);\n\t\tRewardPunishment r=rewardPunishmentService.queryRewardPunishmentByEmployeeIdAndCreateTime(rewardPunishment.getEmployeeId(), rewardPunishment.getCreateTime());\n\t\tif(r!=null) {\n\t\t\tString data=r.getId()+\" \";\n\t\t\treturn JSONResult.ok(dto);\n\t\t}else {\n\t\tString msg = \"未知错误，�"} {"path":"downloaded/RewardPunishmentController.java","method_name":"* 查询所有奖惩信息\n\t","content":"/**\n\t * 返回id 录入奖惩信息成功\n\t * msg 未知错误，数据未录入\n\t * \nrrorMsg(msg);\n\t    }\n\t}\n\t/**\n\t * 查询所有奖惩信息\n\t * @return\n\t */\n\t@GetMapping\n\tpublic JSONResult queryRealAllRewardPunishment(Integer page,String userName,String timeStart,String timeEnd,String checkStatus,ExtjsPageRequest pageRequest) {\n\t\tList<RewardPunishment> rewardPunishmentList=new ArrayList<RewardPunishment>();\n\t\tDate dateStart = null;\n\t\tDate dateEnd=null;\n\t\tdateStart=RewardPunishmentDTO.dealTimeStart(timeStart);\n\t\tdateEnd=RewardPunishmentDTO.dealTimeEnd(timeEnd);\n\t\tif(StringUtils.isNotBlank(userName)&&StringUtils.isBlank(timeStart)&&StringUtils.isBlank(timeEnd)) {\n\t\t\tEmployee employee=employeeService.queryEmployeeByUserName(userName);\n\t\t\tif(employee!=null) {\n\t\t\trewardPunishmentList=rewardPunishmentService.queryRewardPunishmentByEmployeeId(page, 15, employee.getId());\n\t\t\t}\n\t\t}else if((StringUtils.isNotBlank(timeStart)||StringUtils.isNotBlank(timeEnd))&&StringUtils.isBlank(userName)) {\n//\t\t\tdateStart=RewardPunishmentDTO.dealTimeStart(timeStart);\n//\t\t\tdateEnd=RewardPunishmentDTO.dealTimeEnd(timeEnd);\n\t\t\trewardPunishmentList=rewardPunishmentService.queryRewardPunishmentByTime(page, 15, dateStart, dateEnd);\n\t\t}else if((StringUtils.isNotBlank(timeStart)||StringUtils.isNotBlank(timeEnd))&&StringUtils.isNotBlank(userName)) {\n//\t\t\tdateStart=RewardPunishmentDTO.dealTimeStart(timeStart);\n//\t\t\tdateEnd=RewardPunishmentDTO.dealTimeEnd(timeEnd);\n\t\t\tEmployee employee=employeeService.queryEmployeeByUserName(userName);\n\t\t\tif(employee!=null) {\n\t\t\trewardPunishmentList=rewardPunishmentService.queryRewardPunishmentByEmployeeIdAndTime(page, 15, employee.getId(), dateStart, dateEnd);\n\t\t}\n\t\t}else if(StringUtils.isNotBlank(checkStatus)) {\n\t\t\tInteger cs=Integer.valueOf(checkStatus);\n\t\t\trewardPunishmentList=rewardPunishmentService.queryRewardPunishmentWhoIsNotCheckStatus(page, 15, cs);\n\t\t}\n\t\telse {\n\t\trewardPunishmentList=rewardPunishmentService.queryRewardPunishmentWhoIsNotDelete(page, 15);\n\t\t}\n\t\t List<RewardPunishmentDTO> dtoList=new ArrayList<RewardPunishmentDTO>();\n\t\t for(RewardPunishment rewardPunishment: rewardPunishmentList) {\n\t\t\t RewardPunishmentDTO dto=new RewardPunishmentDTO();\n\t\t\t RewardPunishmentDTO.entityToDTO(rewardPunishment, dto);\n\t\t\t Employee employee= employeeService.queryEmployeeById(rewardPunishment.getEmployeeId());\n\t\t\t dto.setRealName(employee.getRealName());\n\t\t\t dto.setUserName(employee.getUserName());\n\t\t\t dtoList.add(dto);\n\t\t }\n\t\t PageInfo<RewardPunishment> pageInfo=new PageInfo<RewardPunishment>(rewardPunishmentList);\n\t\t Page<RewardPunishmentDTO> dtopage=new PageImpl<RewardPunishmentDTO>(dtoList,pageReq"} {"path":"downloaded/RewardPunishmentController.java","method_name":"查看未被删除(冻结)奖惩信","content":"/**\n\t * 返回id 录入奖惩信息成功\n\t * msg 未知错误，数据未录入\n\t * \nreturn JSONResult.ok(dtopage);\n\t}\n\t/**\n\t * 查看未被删除(冻结)奖惩信息\n\t * @return\n\t */\n\t@GetMapping(\"/mockall\")\n\tpublic JSONResult queryRewardPunishmentWhoIsNotDelete(Integer page"} {"path":"downloaded/RewardPunishmentController.java","method_name":"(page,15));\n\t}\n\t/**\n\t * 查看�","content":"/**\n\t * 返回id 录入奖惩信息成功\n\t * msg 未知错误，数据未录入\n\t * \ntService.queryRewardPunishmentWhoIsNotDelete(page,15));\n\t}\n\t/**\n\t * 查看被删除(冻结)奖惩信息\n\t * @return\n\t */\n\t@GetMapping(\"/isdelete\")\n\tpublic JSONResult q"} {"path":"downloaded/RewardPunishmentController.java","method_name":"nishmentWhoIsDelete())","content":"/**\n\t * 返回id 录入奖惩信息成功\n\t * msg 未知错误，数据未录入\n\t * \nsult.ok(rewardPunishmentService.queryRewardPunishmentWhoIsDelete());\n\t}\n\t/**\n\t * 修改奖惩信息\n\t * @param RewardPunishment\n\t */\n\t@PutMapping(value=\"{id}\")\n\tpublic JSONResult updateRewardPunishment(@PathVariable(\"id\") Long id,@RequestBody RewardPunishmentDTO dto) {\n\t\tRewardPunishment rewardPunishment=rewardPunishmentService.queryRewardPunishmentById(id);\n\t\tBeanUtils.copyProperties(dto, rewardPunishment);\n\t\trewardPunishment.setCheckStatus(0);\n\t\trewardPunishmentService.updateRewardPunishment(rewardPunishment);"} {"path":"downloaded/RewardPunishmentController.java","method_name":"ata);\n\t}\n\t/**\n\t * 删�","content":"/**\n\t * 返回id 录入奖惩信息成功\n\t * msg 未知错误，数据未录入\n\t * \nardPunishment.getId());\n\t\treturn JSONResult.ok(data);\n\t}\n\t/**\n\t * 删除奖惩信息，状态设置为0冻结\n\t * 成功返回1\n\t * 失败返回0\n\t * @param id\n\t * @return\n\t */\n\t@DeleteMapping(value=\"{id}\")\n\tpublic JSONResult deleteRewardPunishment(@PathVariable(\"id\") Long id) {\n\t\trewardPunishmentService.deleteRewardPunishment(id);\n\t\tRewardPunishment data=reward"} {"path":"downloaded/RewardPunishmentController.java","method_name":"操作失败\";\n\t\t\tret","content":"/**\n\t * 返回id 录入奖惩信息成功\n\t * msg 未知错误，数据未录入\n\t * \nurn JSONResult.ok(1);\n\t\t}else {\n\t\t\tString msg=\"操作失败\";\n\t\t\treturn JSONResult.errorMsg(msg);\n\t\t}\n\t}\n\t/**\n\t * 审查奖惩信息，状态设置为1\n\t * 成功返回1\n\t * 失败返回0 已通过审核\n\t * @param id\n\t * @return\n\t */\n\t@PutMapping(\"/checkstatus\")\n\tpublic JSONResult checkRewardPunishment(@RequestParam(name=\"id\") Long id,HttpSession session) {\n//\t\tString ssessionState=SessionUtil.getState(session);\n//\t\tint state=Integer.parseInt(ssessionState);\n//\t\tif(state==3) {\n\t\tRewardPunishment data=rewardPunishmentService.queryRewardPunishmentById(id);\n\t\tif(data.getCheckStatus()==0) {\n\t\t\trewardPunishme"} {"path":"downloaded/RewardPunishmentController.java","method_name":"rrorMsg(ms","content":"/**\n\t * 返回id 录入奖惩信息成功\n\t * msg 未知错误，数据未录入\n\t * \nsg=\"操作失败\";\n\t    \treturn JSONResult.errorMsg(msg);\n\t\t}\n//\t\t}else {\n//\t\t\t   String msg=\"该用户没有操作权限\";\n//\t\t\t   return JSONResult.errorMsg(msg);\n//\t\t   }\n\t}\n\t/**\n\t * 删除多条奖惩信息，状态设置为0冻结\n\t * 成功返回1\n\t * 失败返回0 已通过审"} {"path":"downloaded/InternDemo.java","method_name":"manualIntern","content":"/**\n     * Use this method to check that not used interned strings are garbage collected.\n     */\nprivate static String manualIntern(final String str) {\n        final WeakReference<String> cached = MANUAL_CACHE.get(str);\n        if (cached != null) {\n            final String value = cached.get();\n            if (value != null) {\n                return value;\n            }\n        }\n        MANUAL_CACHE.put(str, new WeakReference<>(str));\n        return str;\n    }"} {"path":"downloaded/PlayListTrack.java","method_name":"equals","content":"/**\n    * equals method should not depend upon date,id and index id\n    * one track my have different index id and date in the life time of playList\n    * */\n@Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof PlayListTrack)) return false;\n\n        PlayListTrack that = (PlayListTrack) o;\n\n        return getTrackId() == that.getTrackId();\n\n    }"} {"path":"downloaded/PlayListTrack.java","method_name":"hashCode","content":"/**\n    * hashCode method should not depend upon date,id and index id\n    * one track my have different index id and date in the life time of playList\n    * */\n@Override\n    public int hashCode() {\n        return getTrackId();\n    }"} {"path":"downloaded/PlayListTrack.java","method_name":"toString","content":"/**\n    * hashCode method should not depend upon date,id and index id\n    * one track my have different index id and date in the life time of playList\n    * */\npublic String toString() {\n        return \"PlayListTrack id[\" + getId() + \"], trackId[\" + getTrackId() + \"]\";\n    }"} {"path":"downloaded/MotionlessElementFactory.java","method_name":"createWall","content":"/**\n\t* Creation of motionless elements .\n\t* \n\t* @return the motionlessElement\n\t*/\npublic static MotionlessElement createWall() {\n\treturn wall;\n\t}"} {"path":"downloaded/MotionlessElementFactory.java","method_name":"createGround","content":"/**\n\t* Creation of motionless elements .\n\t* \n\t* @return the motionlessElement\n\t*/\npublic static  MotionlessElement createGround() {\n\treturn ground;\n\t}"} {"path":"downloaded/MotionlessElementFactory.java","method_name":"createBackground","content":"/**\n\t* Creation of motionless elements .\n\t* \n\t* @return the motionlessElement\n\t*/\npublic static MotionlessElement createBackground() {\n\treturn background ;\n\t}"} {"path":"downloaded/MotionlessElementFactory.java","method_name":"getFromFileSymbol","content":"/**\n\t* Gets the motionlesselement from file symbol\n\t* \n\t* @param fileSymbol\n\t* the file symbol\n\t* @return the from file symbol\n\t*/\npublic static MotionlessElement getFromFileSymbol(char fileSymbol) {\n\tfor (MotionlessElement motionlessElement : motionlessElements) {\n\tif (motionlessElement.getSprite().getConsoleImage()== fileSymbol) {\n\treturn motionlessElement;\n\t}\n\t}\n\treturn background;\n\t}"} {"path":"downloaded/TagResourceFactory.java","method_name":"createResource","content":"/**\n\t * {@inheritDoc}\n\t * \n\t * @see org.eclipse.emf.ecore.resource.Resource.Factory#createResource(org.eclipse.emf.common.util.URI)\n\t */\npublic Resource createResource(URI uri) {\n\t\tFileContent fileContent = getFileContent(uri);\n\t\tResource resource = new ResourceImpl(uri);\n\t\tif (fileContent != null && !fileContent.getBlocks().isEmpty()) {\n\t\t\tresource.getContents().add(fileContent);\n\t\t}\n\t\treturn resource;\n\t}"} {"path":"downloaded/TagResourceFactory.java","method_name":"getFileContent","content":"/**\n\t * {@inheritDoc}\n\t * \n\t * @see org.eclipse.emf.ecore.resource.Resource.Factory#createResource(org.eclipse.emf.common.util.URI)\n\t */\nprivate FileContent getFileContent(URI uri) {\n\t\tFileContent fileContent = TagsFactory.eINSTANCE.createFileContent();\n\t\t// Step 1: get the file corresponding to the given URI\n\t\tIFile file = ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(uri.toString()));\n\t\tif (file != null && file.exists()) {\n\t\t\tInputStream inputStream;\n\t\t\ttry {\n\t\t\t\tinputStream = file.getContents();\n\n\t\t\t\tDataInputStream dataInputStream = new DataInputStream(inputStream);\n\t\t\t\ttry {\n\t\t\t\t\tboolean isReadingTag = false;\n\t\t\t\t\tString currentReadTag = \"\";\n\t\t\t\t\t// Step 2: read file and create tagged zones\n\t\t\t\t\twhile (inputStream.available() != 0) {\n\t\t\t\t\t\tString line = dataInputStream.readLine();\n\t\t\t\t\t\t// If tag is null then we get the whole file\n\t\t\t\t\t\t// If a tag is opened\n\t\t\t\t\t\tMatcher openingTagMatcher = OPENING_TAG_PATTERN.matcher(line);\n\t\t\t\t\t\tif (!isReadingTag && openingTagMatcher.matches()) {\n\t\t\t\t\t\t\tisReadingTag = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tMatcher closingTagMatcher = CLOSING_TAG_PATTERN.matcher(line);\n\t\t\t\t\t\t\t// If a tag is closed\n\t\t\t\t\t\t\tif (isReadingTag && closingTagMatcher.matches()) {\n\t\t\t\t\t\t\t\tTaggedBlock block = TagsFactory.eINSTANCE.createTaggedBlock();\n\t\t\t\t\t\t\t\tblock.setTag(closingTagMatcher.group(0));\n\t\t\t\t\t\t\t\tblock.setContent(currentReadTag);\n\t\t\t\t\t\t\t\tfileContent.getBlocks().add(block);\n\t\t\t\t\t\t\t\tcurrentReadTag = \"\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// If we are currently reading a tag\n\t\t\t\t\t\t\t\tif (isReadingTag) {\n\t\t\t\t\t\t\t\t\tcurrentReadTag = currentReadTag + line + \"\\n\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// If we were reading a tag and end of file was read, we add the currently read tag to the\n\t\t\t\t\t// liste of tagged zones\n\t\t\t\t\t// if (isReadingTag || tag == null) {\n\t\t\t\t\t// taggedZones.add(currentReadTag);\n\t\t\t\t\t// }\n\t\t\t\t} finally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tdataInputStream.close();\n\t\t\t\t\t\tinputStream.close();\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t// Silent catch\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (CoreException e) {\n\t\t\t\t// Nothing to do, as no tagged zone was find the file will be considered as empty and a\n\t\t\t\t// synchronization issue indicating that the resource cannot be read will be raised\n\t\t\t} catch (IOException e) {\n\t\t\t\t// As no tagged zone was find the file will be considered as empty and a\n\t\t\t\t// synchronization issue indicating that the resource cannot be read will be raised\n\t\t\t}\n\t\t}\n\t\treturn fileContent;\n\t}"} {"path":"downloaded/ProductMsg.java","method_name":"getProducts","content":"/**\n\t * @return the products\n\t */\npublic MProduct[] getProducts() {\n\t\treturn products;\n\t}"} {"path":"downloaded/Day21.java","method_name":"reorderedPowerOf2","content":"/**\n     * Starting with a positive integer N, we reorder the digits in any order\n     * (including the original order) such that the leading digit is not zero.\n     * Return true if and only if we can do this in a way such that the resulting number is a power of 2.\n     * Note:\n     * 1 <= N <= 10^9\n     *\n     * @param N a positive integer\n     * @return true if and only if we can do this in a way such that the resulting number is a power of 2\n     */\npublic boolean reorderedPowerOf2(int N) {\n        int[] digits = countDigits(N);\n        for (int i = 0; i < 30; ++i)\n            // (1 << i) power of 2 from 0 to 29 bit (2^30 > 10^9)\n            if (Arrays.equals(digits, countDigits(1 << i))) {\n                return true;\n            }\n        return false;\n    }"} {"path":"downloaded/Day21.java","method_name":"countDigits","content":"/**\n     * Starting with a positive integer N, we reorder the digits in any order\n     * (including the original order) such that the leading digit is not zero.\n     * Return true if and only if we can do this in a way such that the resulting number is a power of 2.\n     * Note:\n     * 1 <= N <= 10^9\n     *\n     * @param N a positive integer\n     * @return true if and only if we can do this in a way such that the resulting number is a power of 2\n     */\npublic int[] countDigits(int N) {\n        int[] digits = new int[10];\n        while (N > 0) {\n            digits[N % 10]++;\n            N /= 10;\n        }\n        return digits;\n    }"} {"path":"downloaded/GramaticaFormularioLexer.java","method_name":"getTokenNames","content":"/**\n\t * @deprecated Use {@link #VOCABULARY} instead.\n\t */\n@Override\n\t@Deprecated\n\tpublic String[] getTokenNames() {\n\t\treturn tokenNames;\n\t}"} {"path":"downloaded/GramaticaFormularioLexer.java","method_name":"getVocabulary","content":"/**\n\t * @deprecated Use {@link #VOCABULARY} instead.\n\t */\n@Override\n\n\tpublic Vocabulary getVocabulary() {\n\t\treturn VOCABULARY;\n\t}"} {"path":"downloaded/GramaticaFormularioLexer.java","method_name":"getGrammarFileName","content":"/**\n\t * @deprecated Use {@link #VOCABULARY} instead.\n\t */\n@Override\n\tpublic String getGrammarFileName() { return \"GramaticaFormulario.g4\"; }"} {"path":"downloaded/GramaticaFormularioLexer.java","method_name":"getRuleNames","content":"/**\n\t * @deprecated Use {@link #VOCABULARY} instead.\n\t */\n@Override\n\tpublic String[] getRuleNames() { return ruleNames; }"} {"path":"downloaded/GramaticaFormularioLexer.java","method_name":"getSerializedATN","content":"/**\n\t * @deprecated Use {@link #VOCABULARY} instead.\n\t */\n@Override\n\tpublic String getSerializedATN() { return _serializedATN; }"} {"path":"downloaded/GramaticaFormularioLexer.java","method_name":"getChannelNames","content":"/**\n\t * @deprecated Use {@link #VOCABULARY} instead.\n\t */\n@Override\n\tpublic String[] getChannelNames() { return channelNames; }"} {"path":"downloaded/GramaticaFormularioLexer.java","method_name":"getModeNames","content":"/**\n\t * @deprecated Use {@link #VOCABULARY} instead.\n\t */\n@Override\n\tpublic String[] getModeNames() { return modeNames; }"} {"path":"downloaded/GramaticaFormularioLexer.java","method_name":"getATN","content":"/**\n\t * @deprecated Use {@link #VOCABULARY} instead.\n\t */\n@Override\n\tpublic ATN getATN() { return _ATN; }"} {"path":"downloaded/lab9.java","method_name":"next","content":"/** get next word */\nstatic String next() throws IOException {\n        while ( ! tokenizer.hasMoreTokens() ) {\n            //TODO add check for eof if necessary\n            tokenizer = new StringTokenizer(\n                   reader.readLine() );\n        }\n        return tokenizer.nextToken();\n    }"} {"path":"downloaded/lab9.java","method_name":"nextInt","content":"/** get next word */\nstatic int nextInt() throws IOException {\n        return Integer.parseInt( next() );\n    }"} {"path":"downloaded/lab9.java","method_name":"nextDouble","content":"/** get next word */\nstatic double nextDouble() throws IOException {\n        return Double.parseDouble( next() );\n    }"} {"path":"downloaded/Webpage.java","method_name":"getLinks","content":"/**\n   * Getter method for the links field\n   * @return The links of the webpage object\n   */\npublic Set<String> getLinks() {\n    return links;\n  }"} {"path":"downloaded/Webpage.java","method_name":"getUrl","content":"/**\n   * Getter method for the url field\n   * @return The url of the webpage object\n   */\npublic String getUrl() {\n    return url;\n  }"} {"path":"downloaded/Webpage.java","method_name":"toString","content":"/**\n   * toString method\n   * @return the string representation of Webpage objects\n   */\n@Override\n  public String toString() {\n    String toString = new String(\"\");\n    toString += \"{\\n\" + url + \"\\n\" + \"  [\" + \"\\n\";\n    for (String asset : assets) {\n      toString += \"   \" + asset + \"\\n\";\n    }\n    toString += \"   ]\\n}\\n\\n\";\n\n    return toString;\n  }"} {"path":"downloaded/ChromeOptionsUtil.java","method_name":"withPerformanceLog","content":"/**\n   * <p>\n   * chromeOptionsWithPerformanceLog.\n   * </p>\n   *\n   * @return Chrome options with performance logging enabled\n   * @since 5.0.0\n   */\npublic static ChromeOptions withPerformanceLog() {\n    // headless by default\n    ChromeOptions options = headless();\n\n    // enable performance log\n    LoggingPreferences preferences = new LoggingPreferences();\n    preferences.enable(LogType.PERFORMANCE, Level.ALL);\n    options.setCapability(\"goog:loggingPrefs\", preferences);\n\n    return options;\n  }"} {"path":"downloaded/ChromeOptionsUtil.java","method_name":"headless","content":"/**\n   * <p>headless.</p>\n   *\n   * @return default options for headless Chrome\n   * @since 5.0.0\n   */\npublic static ChromeOptions headless() {\n    return new ChromeOptions().setHeadless(true);\n  }"} {"path":"downloaded/CacheUtils.java","method_name":"atic String g","content":"/**\n\t * 得到KEY的唯一码\n\t * \n\t * @param key\n\t * \neturn\n\t */\n\tpublic static String getHashForKey(String key) {\n\t\tint firstHalfLength = key.length() / 2;\n\t\tString hashKey = String.valueOf(key.substring(0, firstHalfLength).hashCode());\n\t\thashKey += String.valueOf(key.substring(firstHalfLength).hashCode());\n\t\treturn Config.CACHE_FILE_PREFIX +"} {"path":"downloaded/CacheUtils.java","method_name":"static File g","content":"/**\n\t * 得到KEY的唯一码\n\t * \n\t * @param key\n\t * \nshKey;\n\t}\n\n\tpublic static File getFileForKey(File rootDirectory, String key) {\n\t\treturn new File(rootDirectory, getHashForK"} {"path":"downloaded/RegisteredListener.java","method_name":"getListener","content":"/**\n     * @return The listening class of this {@link Event}\n     */\npublic EventListener getListener() {\n        return this.listener;\n    }"} {"path":"downloaded/RegisteredListener.java","method_name":"getModule","content":"/**\n     * @return The {@link Module} this {@link RegisteredListener} is registered to\n     */\npublic Module getModule() {\n        return this.module;\n    }"} {"path":"downloaded/RegisteredListener.java","method_name":"getExecutor","content":"/**\n     * @return The {@link EventExecutor} for this {@link Event}\n     */\npublic EventExecutor getExecutor() {\n        return this.executor;\n    }"} {"path":"downloaded/RegisteredListener.java","method_name":"getHandler","content":"/**\n     * @return The {@link EventHandler}\n     */\npublic EventHandler getHandler() {\n        return this.handler;\n    }"} {"path":"downloaded/CardState.java","method_name":"of","content":"/**\n     * Static CardState \"builder\" that returns a CardState instance with\n     * the first five cards as the face-up cards and an empty discards SortedBag\n     * @param deck : Deck instance with more than 5 cards\n     * @return (CardState) : new instance of CardState\n     * @throws IllegalArgumentException if the deck's size is smaller than 5\n     */\npublic static CardState of(Deck<Card> deck){\n        Preconditions.checkArgument(deck.size() >= FACE_UP_CARDS_COUNT);\n        // draw the first 5 cards from the deck; they constitute the face-up cards\n        List<Card> faceUpCards = new ArrayList<>();\n        // deck without 5 top cards after for-loop\n        for(int slot : FACE_UP_CARD_SLOTS) {\n            faceUpCards.add(deck.topCard());\n            deck = deck.withoutTopCard();\n        }\n        // empty discard pile\n        SortedBag<Card> discards = SortedBag.of();\n        return new CardState(faceUpCards, deck, discards);\n    }"} {"path":"downloaded/CardState.java","method_name":"withDrawnFaceUpCard","content":"/**\n     * Creates a new CardState instance with a card in the\n     * face-up cards list replaced with one from the deck\n     * @param slot : index (between 0 and 5) of the card to replace\n     * @return (CardState) : new instance of CardState\n     * @throws IllegalArgumentException if the deck is empty\n     */\npublic CardState withDrawnFaceUpCard(int slot){\n        Preconditions.checkArgument(!isDeckEmpty());\n        Objects.checkIndex(slot, FACE_UP_CARDS_COUNT);\n        // new Deck from which the top card has been drawn\n        Deck<Card> withoutTopCard = deck.withoutTopCard();\n        // copy of faceUpCards\n        List<Card> faceUpCards = new ArrayList<>(faceUpCards());\n        // replace the card at the specified slot with the top card from the deck\n        faceUpCards.set(slot, deck.topCard());\n        return new CardState(faceUpCards, withoutTopCard, discards);\n    }"} {"path":"downloaded/CardState.java","method_name":"topDeckCard","content":"/**\n     * Getter for the card on the top of the deck (if not empty)\n     * @return (Card) : first card in the deck\n     * @throws IllegalArgumentException if the deck is empty\n     */\npublic Card topDeckCard(){\n        Preconditions.checkArgument(!isDeckEmpty());\n        return deck.topCard();\n    }"} {"path":"downloaded/CardState.java","method_name":"withoutTopDeckCard","content":"/**\n     * Creates a new CardState instance with the first card in the\n     * deck removed\n     * @return (CardState) : new instance of CardState\n     * @throws IllegalArgumentException if the deck is empty\n     */\npublic CardState withoutTopDeckCard(){\n        Preconditions.checkArgument(!isDeckEmpty());\n        return new CardState(faceUpCards(), deck.withoutTopCard(), discards);\n    }"} {"path":"downloaded/CardState.java","method_name":"withDeckRecreatedFromDiscards","content":"/**\n     * Recreates the deck starting from the card in discards\n     * @param rng : random generator used to shuffle the deck\n     * @return (CardState) : new instance of CardState\n     * @throws IllegalArgumentException if the deck isn't empty\n     */\npublic CardState withDeckRecreatedFromDiscards(Random rng) {\n        Preconditions.checkArgument(isDeckEmpty());\n        // reshuffle the discard pile to create the new deck\n        // discard pile is now empty\n        return new CardState(faceUpCards(), Deck.of(discards,rng), SortedBag.of());\n    }"} {"path":"downloaded/CardState.java","method_name":"withMoreDiscardedCards","content":"/**\n     * Creates a new CardState instance with additionalDiscards added\n     * to the discards SortedBag\n     * @param additionalDiscards : cards to add to discards\n     * @return (CardState) : new instance of CardState\n     */\npublic CardState withMoreDiscardedCards(SortedBag<Card> additionalDiscards){\n        return new CardState(faceUpCards(), deck, discards.union(additionalDiscards));\n    }"} {"path":"downloaded/Resume.java","method_name":"getIdResume","content":"/**\n     * @return the idResume\n     */\npublic long getIdResume() {\n        return idResume;\n    }"} {"path":"downloaded/Resume.java","method_name":"getUserId","content":"/**\n     * @return the userId\n     */\npublic String getUserId() {\n        return userId;\n    }"} {"path":"downloaded/Resume.java","method_name":"getResume","content":"/**\n     * @return the resume\n     */\npublic byte[] getResume() {\n        return resume;\n    }"} {"path":"downloaded/Resume.java","method_name":"getResumeName","content":"/**\n     * @return the resumeName\n     */\npublic String getResumeName() {\n        return resumeName;\n    }"} {"path":"downloaded/Resume.java","method_name":"getResumeSize","content":"/**\n     * @return the resumeSize\n     */\npublic Long getResumeSize() {\n        return resumeSize;\n    }"} {"path":"downloaded/Resume.java","method_name":"getResumeType","content":"/**\n     * @return the resumeType\n     */\npublic String getResumeType() {\n        return resumeType;\n    }"} {"path":"downloaded/Resume.java","method_name":"getUploadDate","content":"/**\n     * @return the uploadDate\n     */\npublic Date getUploadDate() {\n        return uploadDate;\n    }"} {"path":"downloaded/QbxsDao.java","method_name":"事件信息\n\t */\n\t\n\t","content":"/**\n\t * 新增情报线\nan);\n\t}\n\t\n\t/**\n\t * 分页查询情报线索事件信息\n\t */\n\t\n\tpublic static PageResultInfo<QbxsSjxxBean> queryQbxsSjxxPageInfo(QbxsQueryBean queryBean,PageInfo pageInfo) throws Exception{\n\t\tListInfo listInfo = executor.queryListInfoBeanWithDBName(QbxsSjxxBean.class, CommonConstant.DBNAME_SQJW\t, \"queryQbxsSjxxPageInfo\", pageInfo.getOffset(), pageInfo.getPageSize(), queryBean);\n\t\tre"} {"path":"downloaded/QbxsDao.java","method_name":"eleteQbxsSjxx\", i","content":"/**\n\t * 新增情报线\nmonConstant.DBNAME_SQJW, \"deleteQbxsSjxx\", id);\n\t}\n\t\n\t/**\n\t * 根据id 查询情报线索事件信息\n\t */\n\tpublic static QbxsSjxxBean querySjxxBeanById(String id) throws Exception{\n\t\treturn"} {"path":"downloaded/QbxsDao.java","method_name":"dateBean(CommonConsta","content":"/**\n\t * 新增情报线\nn ggxxBean) throws Exception{\n\t\texecutor.updateBean(CommonConstant.DBNAME_SQJW, \"updateQbxsGgxx\", ggxxBean);\n\t}\n\t\n\t/**\n\t * 分页查询涉及骨干信息\n\t */\n\tpublic static PageResultInfo<QbxsGgxxBean> queryQbxsGgxxPageInfo(QbxsQueryBean queryBean,PageInfo pageInfo) throws Exception{\n\t\tListInfo listInfo =  executor.queryListInfoBeanWithDBName(QbxsGgxxBean.class, CommonConstant.DBNAM"} {"path":"downloaded/QbxsDao.java","method_name":"xsGgxx(String id)","content":"/**\n\t * 新增情报线\npublic static void deleteQbxsGgxx(String id) throws Exception{\n\t\texecutor.deleteWithDBName(CommonConstant.DBNAME_SQJW, \"deleteQbxsGgxx\", id);\n\t}\n\t\n\t/**\n\t * 根据id 查询涉事骨干信息\n"} {"path":"downloaded/Rect.java","method_name":"getCenter","content":"/**\n   * Returns the center point of the rectangle.\n   */\npublic Point getCenter() {\n  \treturn new Point(x+width/2,y+height/2);\n  }"} {"path":"downloaded/Rect.java","method_name":"containsPoint","content":"/**\n   * Returns whether a given point is within the rectangle\n   */\npublic boolean containsPoint(Point p) {\n  \treturn\n  \t\tp.x >= x &&\n  \t\tp.x <= x + width &&\n  \t\tp.y >= y &&\n  \t\tp.y <= y + height;\n  }"} {"path":"downloaded/LimeLightCommand.java","method_name":"isFinished","content":"/**\n   * Creates a new LimeLightControl.\n   */\n@Override\n  public boolean isFinished() {\n    return false;\n  }"} {"path":"downloaded/ChaveEmprestimo.java","method_name":"nt hashC","content":"\n\n\t/**\n\t * \n\t\n\n\n\t@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + ((dataEmprestimo == null) ? 0 : dataEmprestimo.hashCode());\n\t\tresult = prime * result + ((item == null) ? 0 : item.hashCode());\n\t\tresult = prime * result + ((nomeDono == null) ? 0 : nomeDono.hashCode());\n\t\tresult = prime * result + ((nomeRequerente == null) ? 0 : nomeRequerente.hashCode());\n\t\tresult = prime * result + ((telefoneDono == null) ? 0 : telefoneDono.hashCode());\n\t\tresult = prime * result + ((telefoneRequerente == null) ? 0 : telefoneRequerente.hashCode());\n\t\treturn result;"} {"path":"downloaded/ChaveEmprestimo.java","method_name":"an equ","content":"\n\n\t/**\n\t * \n\t\n\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tChaveEmprestimo other = (ChaveEmprestimo) obj;\n\t\tif (dataEmprestimo == null) {\n\t\t\tif (other.dataEmprestimo != null)\n\t\t\t\treturn false;\n\t\t} else if (!dataEmprestimo.equals(other.dataEmprestimo))\n\t\t\treturn false;\n\t\tif (item == null) {\n\t\t\tif (other.item != null)\n\t\t\t\treturn false;\n\t\t} else if (!item.equals(other.item))\n\t\t\treturn false;\n\t\tif (nomeDono == null) {\n\t\t\tif (other.nomeDono != null)\n\t\t\t\treturn false;\n\t\t} else if (!nomeDono.equals(other.nomeDono))\n\t\t\treturn false;\n\t\tif (nomeRequerente == null) {\n\t\t\tif (other.nomeRequerente != null)\n\t\t\t\treturn false;\n\t\t} else if (!nomeRequerente.equals(other.nomeRequerente))\n\t\t\treturn false;\n\t\tif (telefoneDono == null) {\n\t\t\tif (other.telefoneDono != null)\n\t\t\t\treturn false;\n\t\t} else if (!telefoneDono.equals(other.telefoneDono))\n\t\t\treturn false;\n\t\tif (telefoneRequerente == null) {\n\t\t\tif (other.telefoneRequerente != null)\n\t\t\t\treturn false;\n\t\t} else if (!telefoneRequerente.equals(other.telefoneRequerente))\n\t\t\treturn false;\n\t\treturn true;"} {"path":"downloaded/ChaveEmprestimo.java","method_name":"ng getNomeD","content":"\n\n\t/**\n\t * \n\t\n\n\n\tpublic String getNomeDono() {\n\t\treturn nomeDono;"} {"path":"downloaded/ChaveEmprestimo.java","method_name":"ng getNomeRequere","content":"\n\n\t/**\n\t * \n\t\n\n\n\tpublic String getNomeRequerente() {\n\t\treturn nomeRequerente;"} {"path":"downloaded/ChaveEmprestimo.java","method_name":"ng getTelefoneD","content":"\n\n\t/**\n\t * \n\t\n\n\n\tpublic String getTelefoneDono() {\n\t\treturn telefoneDono;"} {"path":"downloaded/ChaveEmprestimo.java","method_name":"ng getTelefoneRequere","content":"\n\n\t/**\n\t * \n\t\n\n\n\tpublic String getTelefoneRequerente() {\n\t\treturn telefoneRequerente;"} {"path":"downloaded/ChaveEmprestimo.java","method_name":"ng getDataEmprest","content":"\n\n\t/**\n\t * \n\t\n\n\n\tpublic String getDataEmprestimo() {\n\t\treturn dataEmprestimo;"} {"path":"downloaded/ChaveEmprestimo.java","method_name":"ng getI","content":"\n\n\t/**\n\t * \n\t\n\n\n\tpublic String getItem() {\n\t\treturn item;"} {"path":"downloaded/LexemePath.java","method_name":"    }\n\n    /**","content":"   \n    /**\n     *�\nth = 0;\n    }\n\n    /**\n     * 向LexemePath追加相交的Lexeme\n     * @param lexeme\n     * @return \n     */\n    boolean addCrossLexeme(Lexeme lexeme){\n        if(this.isEmpty()){\n            this.addLexeme(lexeme);\n            this.pathBegin = lexeme.getBegin();\n            this.pathEnd = lexeme.getBegin() + lexeme.getLength();\n            this.payloadLength += lexeme.getLength();\n            return true;\n            \n        }else if(this.checkCross(lexeme)){\n            this.addLexeme(lexeme);\n            if(lexeme.getBegin() + lexeme.getLength() > this.pathEnd){\n                this.pathEnd = lexeme.getBegin() + lexeme.getLength();\n            }\n            this.payloadLength = this.pathEnd - this.pathB"} {"path":"downloaded/LexemePath.java","method_name":"     }\n    }\n    ","content":"   \n    /**\n     *�\n    \n        }\n    }\n    \n    /**\n     * 向LexemePath追加不相交的Lexeme\n     * @param lexeme\n     * @return \n     */\n    boolean addNotCrossLexeme(Lexeme lexeme){\n        if(this.isEmpty()){\n            this.addLexeme(lexeme);\n            this.pathBegin = lexeme.getBegin();\n            this.pathEnd = lexeme.getBegin() + lexeme.getLength();\n            this.payloadLength += lexeme.getLength();\n            return true;\n            \n        }else if(this.checkCross(lexeme)){\n            return  false;\n            \n        }else{\n            this.addLexeme(lexeme);\n            this.payloadLength += lexeme.getLength();\n            Lexeme head = this.peekFirst();\n            this.pathBegin = head.getBegin();\n            Lexeme tail = this."} {"path":"downloaded/LexemePath.java","method_name":"ngth();\n  ","content":"   \n    /**\n     *�\nl.getLength();\n            return true;\n            \n        }\n    }\n    \n    /**\n     * 移除尾部的Lexeme\n     * @return\n     */\n    Lexeme removeTail(){\n        Lexeme tail = this.pollLast();\n        if(this.isEmpty()){\n            this.pathBegin = -1;\n            this.pathEnd = -1;\n            this.payloadLength = 0;            \n        }else{        \n            this.payloadLength -= tail.getLength();\n            L"} {"path":"downloaded/LexemePath.java","method_name":"ngth();\n  ","content":"   \n    /**\n     *�\nil.getLength();\n        }\n        return tail;\n    }\n    \n    /**\n     * 检测词元位置交叉（有歧义的切分）\n     * @param lexeme\n     * @return\n     */\n    boolean checkCross(Lexeme lexeme){\n        return (lexeme.getBegin() >= thi"} {"path":"downloaded/LexemePath.java","method_name":" lexeme.getB","content":"   \n    /**\n     *�\nn && lexeme.getBegin() < this.pathEnd)\n             "} {"path":"downloaded/LexemePath.java","method_name":"s.pathBegi","content":"   \n    /**\n     *�\n(this.pathBegin >= lexeme.getBegin() && this.pat"} {"path":"downloaded/LexemePath.java","method_name":"    int getPathB","content":"   \n    /**\n     *�\n   \n    int getPathBegin() {\n        return pathBegin;\n    }\n\n  "} {"path":"downloaded/LexemePath.java","method_name":"取Path的有","content":"   \n    /**\n     *�\n 获取Path的有效词长\n     * @return\n     */\n    int getPayloadLeng"} {"path":"downloaded/LexemePath.java","method_name":" * 获取L","content":"   \n    /**\n     *�\n     * 获取LexemePath的路径长度\n     * @return\n     */\n    int getPathLength(){\n        return this.pathEnd - this.pathBegin;\n    }\n    \n\n    /**\n     * X权重（词元长度积）\n     * @return\n     */\n    int getXWeight(){\n        int "} {"path":"downloaded/LexemePath.java","method_name":"( c != nul","content":"   \n    /**\n     *�\nhile( c != null && c.getLexeme() != null){\n            product *= c.getLexeme().getLength();\n            c = c.getNext();\n        }\n        return product;\n    }\n    \n    /**\n     * 词元位置权重\n     * @return\n     */\n    int getPWeight(){\n        int pWeight = 0;\n        int p = 0;\n     "} {"path":"downloaded/LexemePath.java","method_name":"!= n","content":"   \n    /**\n     *�\n  while( c != null && c.getLexeme() != null){\n            p++;\n            pWeight += p * c.getLexeme().getLength() ;\n            c = c.getNext();\n        }\n        return pWeight;        \n    }\n\n    /**\n     * 复制\n     * */\n    LexemePath copy(){\n        LexemePath theCopy = new LexemePath();\n        theCopy.pathBegin = this.pathBegin;\n        theCopy.pathEnd = this.pathEnd;\n        theCopy.pay"} {"path":"downloaded/LexemePath.java","method_name":"ject.\n   ","content":"   \n    /**\n     *�\npecified object.\n     *\n     * @throws NullPointerException if the specified object is null\n     * @throws ClassCastException if the specified object's type prevents it\n     *         from being compared to this object.\n     */\n    public int compareTo(LexemePath o) {\n        //比较有效文本长度\n        if(this.payloadLength > o.payloadLength){\n            return -1;\n        }else if(this.payloadLength < o.payloadLength){\n            return 1;\n        }else{\n            //比较词元个数，越少越好\n            if(this.size() < o.size()){\n                return -1;\n            }else if (this.size() > o.size()){\n                return 1;\n            }else{\n                //路径跨度越大越好\n                if(this.getPathLength() >  o.getPathLength()){\n                    return -1;\n                }else if(this.getPathLength() <  o.getPathLength()){\n                    return 1;\n                }else {\n                    //根据统计学结论，逆向切分概率高于正向切分，因此位置越靠后的优先\n                    if(this.pathEnd > o.pathEnd){\n                        return -1;\n                    }else if(pathEnd < o.pathEnd){\n                        return 1;\n                    }else{\n                        //词长越平均越好\n                        if(this.getXWeight() > o.getXWeight()){\n                            return -1;\n                        }else if(this.getXWeight() < o.getXWeight()){\n                            return 1;\n                        }else {\n                            //词元位置权重比较\n                     "} {"path":"downloaded/LexemePath.java","method_name":"\n     * ","content":"   \n    /**\n     *�\n@code @}', and\n     * the unsigned hexadecimal representation of the hash code of the\n     * object. In other words, this method returns a string equal to the\n     * value of:\n     * <blockquote>\n     * <pre>\n     * getClass().getName() + '@' + Integer.toHexString(hashCode())\n     * </pre></blockquote>\n     *\n     * @return  a string representation of the object.\n     */\n    public String toString(){\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"pathBegin  : \").append(pathBegin).a"} {"path":"downloaded/WebServiceHttpClient.java","method_name":"sendSMSThroughGet","content":"/**\n\t * send SMS through HTTP get request\n\t * \n\t * @param mobileNumber -- User Mobile No\n\t * @param message -- text Message to SMS.\n\t */\npublic static String sendSMSThroughGet(String message, String mobileNumber) {\n\n\t\t// Create an instance of HttpClient.\n\t\tHttpClient client = new HttpClient();\n\t\tString finalURL = prepareURL(message, mobileNumber);\n\n\t\tlog(\"Method:sendSMSThroughGet  finalURL[\" + finalURL + \"]\");\n\t\t// Create a method instance.\n\t\tGetMethod method = new GetMethod(finalURL);\n\n\t\t// Provide custom retry handler is necessary\n\t\tmethod.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, new DefaultHttpMethodRetryHandler(3, false));\n\n\t\ttry {\n\t\t\t// Execute the method.\n\t\t\tint statusCode = client.executeMethod(method);\n\n\t\t\tif (statusCode != HttpStatus.SC_OK) {\n\t\t\t\tWebServiceParseErrorCodes.parseErrorCodes(statusCode);\n\t\t\t\tlog(\"Method failed: \" + method.getStatusLine());\n\t\t\t}\n\n\t\t\t// Read the response body.\n\t\t\tbyte[] responseBody = method.getResponseBody();\n\n\t\t\t// Deal with the response.\n\t\t\treturn new String(responseBody);\n\n\t\t} catch (HttpException e) {\n\t\t\tlog(\"Fatal protocol violation: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\tlog(\"Fatal transport error: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\t// Release the connection.\n\t\t\tmethod.releaseConnection();\n\t\t}\n\t\treturn null;\n\t}"} {"path":"downloaded/WebServiceHttpClient.java","method_name":"prepareURL","content":"/**\n\t * prepare the url for by appending mobile no and message\n\t * \n\t * @param mobileNumber\n\t * @param message\n\t * @return-- final URL\n\t */\nprivate static String prepareURL(String message, String mobileNumber) {\n\n\t\ttry {\n\t\t\tmessage = URLEncoder.encode(message, \"UTF-8\").replace(\"+\", \"%20\");\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\tlog(\"UnsupportedEncodingException.. plz change the encoding algo..\");\n\t\t\te.printStackTrace();\n\t\t}\n\t\t/*HariKrishna*/\n\t\treturn \"http://smshorizon.co.in/api/sendsms.php?user=HariKrishna&apikey=RaI23VZXtffNRHSIieYO&type=txt&senderid=PC-TXTMSG&mobile=\" + mobileNumber + \"&message=\" + message;\n\t}"} {"path":"downloaded/SaleType.java","method_name":"getCommissionRate","content":"/** Get the commission rate for this sale type based on an employee experience level.\n\t * @param expLevel the employee experience level\n\t * @return the commission rate for the employee type; fractional (already divided by 100)\n\t * This is zero for types other than PROBATIONARY or EXPERIENCED.\n\t */\npublic double getCommissionRate(EmployeeExperience expLevel) {\n\t\tswitch(expLevel) {\n\t\t\tcase PROBATIONARY:\n\t\t\t\treturn probationaryCommission;\n\t\t\tcase EXPERIENCED:\n\t\t\t\treturn experiencedComission;\n\t\t\tdefault:\n\t\t\t\treturn 0;\n\t\t}\n\t}"} {"path":"downloaded/Converter.java","method_name":"convertTo","content":"/**\n     * Converts from a source measurement to a target measurement.\n     * @param fromMeasurement the measurement\n     * @return the input value converted to the target unit\n     */\npublic double convertTo(double fromMeasurement) {\n        return fromMeasurement * factor;\n    }"} {"path":"downloaded/Converter.java","method_name":"convertFrom","content":"/**\n     * Converts from a target measurement to a source measurement.\n     * @param toMeasurement the target measurement\n     * @return the value whose conversion is the target measurement\n     */\npublic double convertFrom(double toMeasurement) {\n        return toMeasurement / factor;\n    }"} {"path":"downloaded/Geodes.java","method_name":"converter","content":"/**\n   * Returns only predicate part to be appended to {@code WHERE} clause.\n   *\n   * @return predicate, empty string if no predicate\n   */\nstatic ExpressionConverter<Oql> converter(boolean useBindVariables, PathNaming pathNaming) {\n    return expression -> expression.accept(new GeodeQueryVisitor(useBindVariables, pathNaming));\n  }"} {"path":"downloaded/Geodes.java","method_name":"escapeOql","content":"/**\n   * Replace single quote {@code '} with two quotes {@code ''}\n   *\n   * <p>From <a href=\"https://www.postgresql.org/docs/9.1/sql-syntax-lexical.html\">SQL syntax in PostgreSQL</a>:\n   *  <pre>\n   *    To include the escape character in the identifier literally, write it twice.\n   *  </pre>\n   * </p>\n   * @param oql string to escape\n   * @return escaped string\n   * @see\n   */\nstatic String escapeOql(CharSequence oql) {\n    return oql.toString().replace(\"'\", \"''\");\n  }"} {"path":"downloaded/Geodes.java","method_name":"castNumbers","content":"/**\n   * Used to convert between types. Sometimes geode backend returns different types for aggregate functions like AVG / MIN / MAX.\n   * Eg. Long vs Integer\n   */\nstatic ProjectedTuple castNumbers(ProjectedTuple tuple) {\n    List<Object> newVaues = new ArrayList<>();\n    for (int i = 0; i < tuple.values().size(); i++) {\n      newVaues.add(convert(tuple.values().get(i), tuple.paths().get(i).returnType()));\n    }\n\n    return ProjectedTuple.of(tuple.paths(), newVaues);\n  }"} {"path":"downloaded/Geodes.java","method_name":"convert","content":"/**\n   * Used to convert between types. Sometimes geode backend returns different types for aggregate functions like AVG / MIN / MAX.\n   * Eg. Long vs Integer\n   */\nstatic Object convert(Object value, Type destinationType) {\n    if (value == null) {\n      return null;\n    }\n\n    if (value.getClass() == destinationType) {\n      // no need to cast\n      return value;\n    }\n\n    // try to convert between numbers\n    if (value instanceof Number) {\n      Primitive primitive = Primitive.ofAny(destinationType);\n      if (primitive != null && !primitive.boxClass.isInstance(value)) {\n        // cast\n        return primitive.cast((Number) value);\n      }\n    }\n\n    // don't know what to do with this value\n    // return AS IS\n    return value;\n  }"} {"path":"downloaded/Geodes.java","method_name":"canDeleteByKey","content":"/**\n   * Geode (currently) doesn't support delete by query syntax ({@code DELETE ... WHERE ...}) and elements have to be\n   * removed explicitly by key (using {@link Map#remove(Object)} or {@link Region#removeAll} API)\n   *\n   * <p>Tries to detect if current criteria is based only on keys (entity ID) and extracts them from expression (if it is only\n   * expression based on keys).\n   *\n   * <p>Example:\n   * <pre>\n   *  {@code\n   *     key = 123\n   *     key in [1, 2, 3]\n   *     key not in [1, 2, 3] (invalid since keys are unknown)\n   *     key != 1 (invalid since keys are unknown)\n   *  }\n   * </pre>\n   *\n   * @param expr filter applied on entries for deletion\n   * @see Region#removeAll(Collection)\n   */\nstatic Optional<List<?>> canDeleteByKey(Expression expr, IdResolver idResolver) {\n    if (!(expr instanceof Call)) {\n      return Optional.empty();\n    }\n\n    final Call predicate = (Call) expr;\n    if (!(predicate.operator() == Operators.EQUAL || predicate.operator() == Operators.IN)) {\n      return Optional.empty();\n    }\n\n    final List<Expression> args = predicate.arguments();\n    Preconditions.checkArgument(args.size() == 2, \"Expected size 2 but got %s for %s\",\n            args.size(), predicate);\n\n\n    if (!(args.get(0) instanceof Path && args.get(1) instanceof Constant)) {\n      // second argument should be constant\n      return Optional.empty();\n    }\n\n    final Path path = Visitors.toPath(predicate.arguments().get(0));\n\n    if (!(path.members().size() == 1 && idResolver.asPredicate().test((Member) path.element()))) {\n      return Optional.empty();\n    }\n\n    final List<Object> values = Visitors.toConstant(predicate.arguments().get(1)).values();\n    return Optional.of(values);\n  }"} {"path":"downloaded/DownloadManager.java","method_name":"perform","content":"/**\n     * Execute a request.\n     *\n     * @param download download request.\n     * @return download the completed file path.\n     */\npublic String perform(UrlDownload download) throws Exception {\n        UrlWorker worker = new UrlWorker(download);\n        NetCancel.INSTANCE.add(download.uid(), worker);\n        return worker.call();\n    }"} {"path":"downloaded/DownloadManager.java","method_name":"perform","content":"/**\n     * Execute a request.\n     *\n     * @param download download request.\n     * @return download the completed file path.\n     */\npublic String perform(BodyDownload download) throws Exception {\n        BodyWorker worker = new BodyWorker(download);\n        NetCancel.INSTANCE.add(download.uid(), worker);\n        return worker.call();\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getApproxNumConcepts","content":"/**\n     * Gets the approxNumConcepts value for this CodingScheme.\n     * \n     * @return approxNumConcepts\n     */\npublic java.lang.Long getApproxNumConcepts() {\n        return approxNumConcepts;\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getCodingSchemeName","content":"/**\n     * Gets the codingSchemeName value for this CodingScheme.\n     * \n     * @return codingSchemeName\n     */\npublic java.lang.String getCodingSchemeName() {\n        return codingSchemeName;\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getCodingSchemeURI","content":"/**\n     * Gets the codingSchemeURI value for this CodingScheme.\n     * \n     * @return codingSchemeURI\n     */\npublic java.lang.String getCodingSchemeURI() {\n        return codingSchemeURI;\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getCopyright","content":"/**\n     * Gets the copyright value for this CodingScheme.\n     * \n     * @return copyright\n     */\npublic org.LexGrid.commonTypes.Text getCopyright() {\n        return copyright;\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getDefaultLanguage","content":"/**\n     * Gets the defaultLanguage value for this CodingScheme.\n     * \n     * @return defaultLanguage\n     */\npublic java.lang.String getDefaultLanguage() {\n        return defaultLanguage;\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getEntities","content":"/**\n     * Gets the entities value for this CodingScheme.\n     * \n     * @return entities\n     */\npublic org.LexGrid.concepts.Entities getEntities() {\n        return entities;\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getFormalName","content":"/**\n     * Gets the formalName value for this CodingScheme.\n     * \n     * @return formalName\n     */\npublic java.lang.String getFormalName() {\n        return formalName;\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getLocalName","content":"/**\n     * Gets the localName value for this CodingScheme.\n     * \n     * @return localName\n     */\npublic java.lang.String[] getLocalName() {\n        return localName;\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getLocalName","content":"/**\n     * Sets the localName value for this CodingScheme.\n     * \n     * @param localName\n     */\npublic java.lang.String getLocalName(int i) {\n        return this.localName[i];\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getLocalNameAsReference","content":"/**\n     * Gets the localNameAsReference value for this CodingScheme.\n     * \n     * @return localNameAsReference\n     */\npublic java.lang.Object[] getLocalNameAsReference() {\n        return localNameAsReference;\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getLocalNameCount","content":"/**\n     * Gets the localNameCount value for this CodingScheme.\n     * \n     * @return localNameCount\n     */\npublic int getLocalNameCount() {\n        return localNameCount;\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getMappings","content":"/**\n     * Gets the mappings value for this CodingScheme.\n     * \n     * @return mappings\n     */\npublic org.LexGrid.naming.Mappings getMappings() {\n        return mappings;\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getProperties","content":"/**\n     * Gets the properties value for this CodingScheme.\n     * \n     * @return properties\n     */\npublic org.LexGrid.commonTypes.Properties getProperties() {\n        return properties;\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getRelations","content":"/**\n     * Gets the relations value for this CodingScheme.\n     * \n     * @return relations\n     */\npublic org.LexGrid.relations.Relations[] getRelations() {\n        return relations;\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getRelations","content":"/**\n     * Sets the relations value for this CodingScheme.\n     * \n     * @param relations\n     */\npublic org.LexGrid.relations.Relations getRelations(int i) {\n        return this.relations[i];\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getRelationsAsReference","content":"/**\n     * Gets the relationsAsReference value for this CodingScheme.\n     * \n     * @return relationsAsReference\n     */\npublic java.lang.Object[] getRelationsAsReference() {\n        return relationsAsReference;\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getRelationsCount","content":"/**\n     * Gets the relationsCount value for this CodingScheme.\n     * \n     * @return relationsCount\n     */\npublic int getRelationsCount() {\n        return relationsCount;\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getRepresentsVersion","content":"/**\n     * Gets the representsVersion value for this CodingScheme.\n     * \n     * @return representsVersion\n     */\npublic java.lang.String getRepresentsVersion() {\n        return representsVersion;\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getSource","content":"/**\n     * Gets the source value for this CodingScheme.\n     * \n     * @return source\n     */\npublic org.LexGrid.commonTypes.Source[] getSource() {\n        return source;\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getSource","content":"/**\n     * Sets the source value for this CodingScheme.\n     * \n     * @param source\n     */\npublic org.LexGrid.commonTypes.Source getSource(int i) {\n        return this.source[i];\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getSourceAsReference","content":"/**\n     * Gets the sourceAsReference value for this CodingScheme.\n     * \n     * @return sourceAsReference\n     */\npublic java.lang.Object[] getSourceAsReference() {\n        return sourceAsReference;\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getSourceCount","content":"/**\n     * Gets the sourceCount value for this CodingScheme.\n     * \n     * @return sourceCount\n     */\npublic int getSourceCount() {\n        return sourceCount;\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"equals","content":"/**\n     * Sets the sourceCount value for this CodingScheme.\n     * \n     * @param sourceCount\n     */\npublic synchronized boolean equals(java.lang.Object obj) {\n        if (!(obj instanceof CodingScheme)) return false;\n        CodingScheme other = (CodingScheme) obj;\n        if (obj == null) return false;\n        if (this == obj) return true;\n        if (__equalsCalc != null) {\n            return (__equalsCalc == obj);\n        }\n        __equalsCalc = obj;\n        boolean _equals;\n        _equals = super.equals(obj) && \n            ((this.approxNumConcepts==null && other.getApproxNumConcepts()==null) || \n             (this.approxNumConcepts!=null &&\n              this.approxNumConcepts.equals(other.getApproxNumConcepts()))) &&\n            ((this.codingSchemeName==null && other.getCodingSchemeName()==null) || \n             (this.codingSchemeName!=null &&\n              this.codingSchemeName.equals(other.getCodingSchemeName()))) &&\n            ((this.codingSchemeURI==null && other.getCodingSchemeURI()==null) || \n             (this.codingSchemeURI!=null &&\n              this.codingSchemeURI.equals(other.getCodingSchemeURI()))) &&\n            ((this.copyright==null && other.getCopyright()==null) || \n             (this.copyright!=null &&\n              this.copyright.equals(other.getCopyright()))) &&\n            ((this.defaultLanguage==null && other.getDefaultLanguage()==null) || \n             (this.defaultLanguage!=null &&\n              this.defaultLanguage.equals(other.getDefaultLanguage()))) &&\n            ((this.entities==null && other.getEntities()==null) || \n             (this.entities!=null &&\n              this.entities.equals(other.getEntities()))) &&\n            ((this.formalName==null && other.getFormalName()==null) || \n             (this.formalName!=null &&\n              this.formalName.equals(other.getFormalName()))) &&\n            ((this.localName==null && other.getLocalName()==null) || \n             (this.localName!=null &&\n              java.util.Arrays.equals(this.localName, other.getLocalName()))) &&\n            ((this.localNameAsReference==null && other.getLocalNameAsReference()==null) || \n             (this.localNameAsReference!=null &&\n              java.util.Arrays.equals(this.localNameAsReference, other.getLocalNameAsReference()))) &&\n            this.localNameCount == other.getLocalNameCount() &&\n            ((this.mappings==null && other.getMappings()==null) || \n             (this.mappings!=null &&\n              this.mappings.equals(other.getMappings()))) &&\n            ((this.properties==null && other.getProperties()==null) || \n             (this.properties!=null &&\n              this.properties.equals(other.getProperties()))) &&\n            ((this.relations==null && other.getRelations()==null) || \n             (this.relations!=null &&\n              java.util.Arrays.equals(this.relations, other.getRelations()))) &&\n            ((this.relationsAsReference==null && other.getRelationsAsReference()==null) || \n             (this.relationsAsReference!=null &&\n              java.util.Arrays.equals(this.relationsAsReference, other.getRelationsAsReference()))) &&\n            this.relationsCount == other.getRelationsCount() &&\n            ((this.representsVersion==null && other.getRepresentsVersion()==null) || \n             (this.representsVersion!=null &&\n              this.representsVersion.equals(other.getRepresentsVersion()))) &&\n            ((this.source==null && other.getSource()==null) || \n             (this.source!=null &&\n              java.util.Arrays.equals(this.source, other.getSource()))) &&\n            ((this.sourceAsReference==null && other.getSourceAsReference()==null) || \n             (this.sourceAsReference!=null &&\n              java.util.Arrays.equals(this.sourceAsReference, other.getSourceAsReference()))) &&\n            this.sourceCount == other.getSourceCount();\n        __equalsCalc = null;\n        return _equals;\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"hashCode","content":"/**\n     * Sets the sourceCount value for this CodingScheme.\n     * \n     * @param sourceCount\n     */\npublic synchronized int hashCode() {\n        if (__hashCodeCalc) {\n            return 0;\n        }\n        __hashCodeCalc = true;\n        int _hashCode = super.hashCode();\n        if (getApproxNumConcepts() != null) {\n            _hashCode += getApproxNumConcepts().hashCode();\n        }\n        if (getCodingSchemeName() != null) {\n            _hashCode += getCodingSchemeName().hashCode();\n        }\n        if (getCodingSchemeURI() != null) {\n            _hashCode += getCodingSchemeURI().hashCode();\n        }\n        if (getCopyright() != null) {\n            _hashCode += getCopyright().hashCode();\n        }\n        if (getDefaultLanguage() != null) {\n            _hashCode += getDefaultLanguage().hashCode();\n        }\n        if (getEntities() != null) {\n            _hashCode += getEntities().hashCode();\n        }\n        if (getFormalName() != null) {\n            _hashCode += getFormalName().hashCode();\n        }\n        if (getLocalName() != null) {\n            for (int i=0;\n                 i<java.lang.reflect.Array.getLength(getLocalName());\n                 i++) {\n                java.lang.Object obj = java.lang.reflect.Array.get(getLocalName(), i);\n                if (obj != null &&\n                    !obj.getClass().isArray()) {\n                    _hashCode += obj.hashCode();\n                }\n            }\n        }\n        if (getLocalNameAsReference() != null) {\n            for (int i=0;\n                 i<java.lang.reflect.Array.getLength(getLocalNameAsReference());\n                 i++) {\n                java.lang.Object obj = java.lang.reflect.Array.get(getLocalNameAsReference(), i);\n                if (obj != null &&\n                    !obj.getClass().isArray()) {\n                    _hashCode += obj.hashCode();\n                }\n            }\n        }\n        _hashCode += getLocalNameCount();\n        if (getMappings() != null) {\n            _hashCode += getMappings().hashCode();\n        }\n        if (getProperties() != null) {\n            _hashCode += getProperties().hashCode();\n        }\n        if (getRelations() != null) {\n            for (int i=0;\n                 i<java.lang.reflect.Array.getLength(getRelations());\n                 i++) {\n                java.lang.Object obj = java.lang.reflect.Array.get(getRelations(), i);\n                if (obj != null &&\n                    !obj.getClass().isArray()) {\n                    _hashCode += obj.hashCode();\n                }\n            }\n        }\n        if (getRelationsAsReference() != null) {\n            for (int i=0;\n                 i<java.lang.reflect.Array.getLength(getRelationsAsReference());\n                 i++) {\n                java.lang.Object obj = java.lang.reflect.Array.get(getRelationsAsReference(), i);\n                if (obj != null &&\n                    !obj.getClass().isArray()) {\n                    _hashCode += obj.hashCode();\n                }\n            }\n        }\n        _hashCode += getRelationsCount();\n        if (getRepresentsVersion() != null) {\n            _hashCode += getRepresentsVersion().hashCode();\n        }\n        if (getSource() != null) {\n            for (int i=0;\n                 i<java.lang.reflect.Array.getLength(getSource());\n                 i++) {\n                java.lang.Object obj = java.lang.reflect.Array.get(getSource(), i);\n                if (obj != null &&\n                    !obj.getClass().isArray()) {\n                    _hashCode += obj.hashCode();\n                }\n            }\n        }\n        if (getSourceAsReference() != null) {\n            for (int i=0;\n                 i<java.lang.reflect.Array.getLength(getSourceAsReference());\n                 i++) {\n                java.lang.Object obj = java.lang.reflect.Array.get(getSourceAsReference(), i);\n                if (obj != null &&\n                    !obj.getClass().isArray()) {\n                    _hashCode += obj.hashCode();\n                }\n            }\n        }\n        _hashCode += getSourceCount();\n        __hashCodeCalc = false;\n        return _hashCode;\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getTypeDesc","content":"/**\n     * Return type metadata object\n     */\npublic static org.apache.axis.description.TypeDesc getTypeDesc() {\n        return typeDesc;\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getSerializer","content":"/**\n     * Get Custom Serializer\n     */\npublic static org.apache.axis.encoding.Serializer getSerializer(\n           java.lang.String mechType, \n           java.lang.Class _javaType,  \n           javax.xml.namespace.QName _xmlType) {\n        return \n          new  org.apache.axis.encoding.ser.BeanSerializer(\n            _javaType, _xmlType, typeDesc);\n    }"} {"path":"downloaded/CodingScheme.java","method_name":"getDeserializer","content":"/**\n     * Get Custom Deserializer\n     */\npublic static org.apache.axis.encoding.Deserializer getDeserializer(\n           java.lang.String mechType, \n           java.lang.Class _javaType,  \n           javax.xml.namespace.QName _xmlType) {\n        return \n          new  org.apache.axis.encoding.ser.BeanDeserializer(\n            _javaType, _xmlType, typeDesc);\n    }"} {"path":"downloaded/Servicios.java","method_name":"operation","content":"/**\n     * This is a sample web service operation\n     */\n@WebMethod(operationName = \"operation\")\n    public List<User> operation() {\n       List datos = dao.listar();\n       return datos;\n    }"} {"path":"downloaded/Servicios.java","method_name":"agregar","content":"/**\n     * Web service operation\n     */\n@WebMethod(operationName = \"agregar\")\n    public String agregar(@WebParam(name = \"nombres\") String nombres, @WebParam(name = \"apellidos\") String apellidos) {\n        String datos = dao.add(nombres, apellidos);\n        return datos;\n    }"} {"path":"downloaded/Servicios.java","method_name":"ListarID","content":"/**\n     * Web service operation\n     */\n@WebMethod(operationName = \"ListarID\")\n    public User ListarID(@WebParam(name = \"id\") int id) {\n        User user = dao.Listar(id);\n        return user;\n    }"} {"path":"downloaded/Servicios.java","method_name":"Actualizar","content":"/**\n     * Web service operation\n     */\n@WebMethod(operationName = \"Actualizar\")\n    public String Actualizar(@WebParam(name = \"id\") int id, @WebParam(name = \"nombres\") String nombres, @WebParam(name = \"apellidos\") String apellidos) {\n        String datos = dao.edit(id, nombres, apellidos);\n        return datos;\n    }"} {"path":"downloaded/Servicios.java","method_name":"Eliminar","content":"/**\n     * Web service operation\n     */\n@WebMethod(operationName = \"Eliminar\")\n    public User Eliminar(@WebParam(name = \"id\") int id) {\n       User u = dao.delete(id);\n        return u;\n    }"} {"path":"downloaded/ProduitDB.java","method_name":"getID","content":"/**\n\t * \n\t */\npublic int getID() {\n\t\treturn ID;\n\t}"} {"path":"downloaded/ProduitDB.java","method_name":"getCis","content":"/**\n\t * \n\t */\n@Override\n\tpublic String getCis() {\n\t\treturn this.cis;\n\t}"} {"path":"downloaded/ProduitDB.java","method_name":"getNom","content":"/**\n\t * \n\t */\n@Override\n\tpublic String getNom() {\n\t\treturn this.nom;\n\t}"} {"path":"downloaded/ProduitDB.java","method_name":"toString","content":"/**\n\t * \n\t */\npublic String toString() {\n\t\treturn getNom();\n\t}"} {"path":"downloaded/ProduitDB.java","method_name":"hashCode","content":"/**\n\t * \n\t */\n@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + ((cis == null) ? 0 : cis.hashCode());\n\t\tresult = prime * result + ((nom == null) ? 0 : nom.hashCode());\n\t\treturn result;\n\t}"} {"path":"downloaded/ProduitDB.java","method_name":"equals","content":"/**\n\t * \n\t */\n@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tProduitDB other = (ProduitDB) obj;\n\t\tif (cis == null) {\n\t\t\tif (other.cis != null)\n\t\t\t\treturn false;\n\t\t} else if (!cis.equals(other.cis))\n\t\t\treturn false;\n\t\tif (nom == null) {\n\t\t\tif (other.nom != null)\n\t\t\t\treturn false;\n\t\t} else if (!nom.equals(other.nom))\n\t\t\treturn false;\n\t\treturn true;\n\t}"} {"path":"downloaded/GenericLoginModuleImpl.java","method_name":"handleGetUsersPassword","content":"/**\n\t * @return the password hash\n\t * \n\t * @see br.mdarte.exemplo.academico.accessControl.GenericLoginModule#handleGetUsersPassword()\n\t */\nprotected String handleGetUsersPassword() throws LoginException {\n\t\treturn null;\n\t}"} {"path":"downloaded/GenericLoginModuleImpl.java","method_name":"handleGetRoleSets","content":"/**\n\t * @see br.mdarte.exemplo.academico.accessControl.GenericLoginModule#handleGetRoleSets()\n\t */\nprotected Group[] handleGetRoleSets() throws LoginException {\n/*\t\ttry\n\t\t{\n\t\t\tControleAcessoImpl controleAcesso = new ControleAcessoImpl();\n\t\t\tOperador operador = controleAcesso.getOperador(getUsername());\n\n\t\t\tGroup[] roles = new Group[2];\n\n\t\t\troles[0] = new SimpleGroup(\"Roles\");\n\t\t\troles[1] = new SimpleGroup(\"CallerPrincipal\");\n\n\t\t\tPrincipalImpl principalImpl = new PrincipalImpl(getUsername());\n\t\t\t//principalImpl.setPerfis(listaPerfis);\n\t\t\tprincipalImpl.setOperador(operador);\n\n\t\t\troles[1].addMember(principalImpl);\n\n\t\t\treturn roles;\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tthrow new LoginException(e.toString());\n\t\t}\n*/\n\t\treturn null;\n\t}"} {"path":"downloaded/RemoveEntriesFromAclRequest.java","method_name":"build","content":"/**\n     * <p>The ID of the ACL.</p>\n     */\npublic static RemoveEntriesFromAclRequest build(java.util.Map<String, ?> map) throws Exception {\n        RemoveEntriesFromAclRequest self = new RemoveEntriesFromAclRequest();\n        return TeaModel.build(map, self);\n    }"} {"path":"downloaded/RemoveEntriesFromAclRequest.java","method_name":"setAclEntries","content":"/**\n     * <p>The ID of the ACL.</p>\n     */\npublic RemoveEntriesFromAclRequest setAclEntries(java.util.List<RemoveEntriesFromAclRequestAclEntries> aclEntries) {\n        this.aclEntries = aclEntries;\n        return this;\n    }"} {"path":"downloaded/RemoveEntriesFromAclRequest.java","method_name":"getAclEntries","content":"/**\n     * <p>The ID of the ACL.</p>\n     */\npublic java.util.List<RemoveEntriesFromAclRequestAclEntries> getAclEntries() {\n        return this.aclEntries;\n    }"} {"path":"downloaded/RemoveEntriesFromAclRequest.java","method_name":"setAclId","content":"/**\n     * <p>The ID of the ACL.</p>\n     */\npublic RemoveEntriesFromAclRequest setAclId(String aclId) {\n        this.aclId = aclId;\n        return this;\n    }"} {"path":"downloaded/RemoveEntriesFromAclRequest.java","method_name":"getAclId","content":"/**\n     * <p>The ID of the ACL.</p>\n     */\npublic String getAclId() {\n        return this.aclId;\n    }"} {"path":"downloaded/RemoveEntriesFromAclRequest.java","method_name":"setClientToken","content":"/**\n     * <p>The ID of the ACL.</p>\n     */\npublic RemoveEntriesFromAclRequest setClientToken(String clientToken) {\n        this.clientToken = clientToken;\n        return this;\n    }"} {"path":"downloaded/RemoveEntriesFromAclRequest.java","method_name":"getClientToken","content":"/**\n     * <p>The ID of the ACL.</p>\n     */\npublic String getClientToken() {\n        return this.clientToken;\n    }"} {"path":"downloaded/RemoveEntriesFromAclRequest.java","method_name":"setDryRun","content":"/**\n     * <p>The ID of the ACL.</p>\n     */\npublic RemoveEntriesFromAclRequest setDryRun(Boolean dryRun) {\n        this.dryRun = dryRun;\n        return this;\n    }"} {"path":"downloaded/RemoveEntriesFromAclRequest.java","method_name":"getDryRun","content":"/**\n     * <p>The ID of the ACL.</p>\n     */\npublic Boolean getDryRun() {\n        return this.dryRun;\n    }"} {"path":"downloaded/RemoveEntriesFromAclRequest.java","method_name":"setRegionId","content":"/**\n     * <p>The ID of the ACL.</p>\n     */\npublic RemoveEntriesFromAclRequest setRegionId(String regionId) {\n        this.regionId = regionId;\n        return this;\n    }"} {"path":"downloaded/RemoveEntriesFromAclRequest.java","method_name":"getRegionId","content":"/**\n     * <p>The ID of the ACL.</p>\n     */\npublic String getRegionId() {\n        return this.regionId;\n    }"} {"path":"downloaded/RemoveEntriesFromAclRequest.java","method_name":"build","content":"/**\n         * <p>The client token that is used to ensure the idempotence of the request.</p>\n         * <br>\n         * <p>You can use the client to generate the value, but you must ensure that it is unique among all requests. The client token can contain only ASCII characters.</p>\n         * <br>\n         * <p>>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.</p>\n         */\npublic static RemoveEntriesFromAclRequestAclEntries build(java.util.Map<String, ?> map) throws Exception {\n            RemoveEntriesFromAclRequestAclEntries self = new RemoveEntriesFromAclRequestAclEntries();\n            return TeaModel.build(map, self);\n        }"} {"path":"downloaded/RemoveEntriesFromAclRequest.java","method_name":"setEntry","content":"/**\n         * <p>The client token that is used to ensure the idempotence of the request.</p>\n         * <br>\n         * <p>You can use the client to generate the value, but you must ensure that it is unique among all requests. The client token can contain only ASCII characters.</p>\n         * <br>\n         * <p>>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.</p>\n         */\npublic RemoveEntriesFromAclRequestAclEntries setEntry(String entry) {\n            this.entry = entry;\n            return this;\n        }"} {"path":"downloaded/RemoveEntriesFromAclRequest.java","method_name":"getEntry","content":"/**\n         * <p>The client token that is used to ensure the idempotence of the request.</p>\n         * <br>\n         * <p>You can use the client to generate the value, but you must ensure that it is unique among all requests. The client token can contain only ASCII characters.</p>\n         * <br>\n         * <p>>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.</p>\n         */\npublic String getEntry() {\n            return this.entry;\n        }"} {"path":"downloaded/TreeShellCommand.java","method_name":"executeCommand","content":"/**\n\t * {@inheritDoc}\n\t * \n\t * @throws NullPointerException {@inheritDoc}\n\t */\n@Override\n\tpublic ShellStatus executeCommand(Environment env, String arguments) {\n\t\tExceptionUtil.validateNotNull(env, \"env\");\n\t\tExceptionUtil.validateNotNull(arguments, \"arguments\");\n\n\t\tPath root = ArgumentChecker.expectExactlyOneExistingDirectory(arguments, env);\n\t\tif (root == null) {\n\t\t\treturn ShellStatus.CONTINUE;\n\t\t}\n\t\ttry {\n\t\t\tFiles.walkFileTree(root, new TreeFileVisitor(env));\n\t\t} catch (IOException | SecurityException e) {\n\t\t\tenv.writeln(\"Exception occured while traversing directories: \"\n\t\t\t\t\t+ e.getMessage());\n\t\t}\n\t\treturn ShellStatus.CONTINUE;\n\t}"} {"path":"downloaded/TreeShellCommand.java","method_name":"getCommandName","content":"/**\n\t * {@inheritDoc}\n\t * \n\t * @throws NullPointerException {@inheritDoc}\n\t */\n@Override\n\tpublic String getCommandName() { return COMMAND_NAME; }"} {"path":"downloaded/TreeShellCommand.java","method_name":"getCommandDescription","content":"/**\n\t * {@inheritDoc}\n\t * \n\t * @throws NullPointerException {@inheritDoc}\n\t */\n@Override\n\tpublic List<String> getCommandDescription() {\n\t\treturn Collections.unmodifiableList(COMMAND_DESCRIPTION);\n\t}"} {"path":"downloaded/TreeShellCommand.java","method_name":"preVisitDirectory","content":"/**\n\t\t * Default constructor.\n\t\t * \n\t\t * @param env environment used for writing output\n\t\t */\n@Override\n\t\tpublic FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) {\n\t\t\tString output;\n\t\t\tif (depth == 0) {\n\t\t\t\tPath fileName = dir.toAbsolutePath().normalize().getFileName();\n\t\t\t\tif (fileName == null) {\n\t\t\t\t\t// e.g. when dir was \"C:/\"\n\t\t\t\t\toutput = dir.toString();\n\t\t\t\t} else {\n\t\t\t\t\toutput = fileName.toString();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput = INDENTATION_PER_LEVEL.repeat(depth) + dir.getFileName();\n\t\t\t}\n\t\t\tenv.writeln(output);\n\t\t\tdepth++;\n\t\t\treturn FileVisitResult.CONTINUE;\n\t\t}"} {"path":"downloaded/TreeShellCommand.java","method_name":"visitFile","content":"/**\n\t\t * Default constructor.\n\t\t * \n\t\t * @param env environment used for writing output\n\t\t */\n@Override\n\t\tpublic FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {\n\t\t\tenv.writeln(INDENTATION_PER_LEVEL.repeat(depth) + file.getFileName());\n\t\t\treturn FileVisitResult.CONTINUE;\n\t\t}"} {"path":"downloaded/TreeShellCommand.java","method_name":"postVisitDirectory","content":"/**\n\t\t * Default constructor.\n\t\t * \n\t\t * @param env environment used for writing output\n\t\t */\n@Override\n\t\tpublic FileVisitResult postVisitDirectory(Path dir, IOException exc) {\n\t\t\tdepth--;\n\t\t\treturn FileVisitResult.CONTINUE;\n\t\t}"} {"path":"downloaded/DefaultMarkupContextManager.java","method_name":"getMarkupContext","content":"/**\n   * Used to get the current context\n   */\n@Override\n  public WikiContext getMarkupContext(String objectName, ResourceType type) {\n\n    WikiContext wikiMarkupContext = new WikiContext();\n    try {\n      DocumentReferenceResolver<String> stringDocumentReferenceResolver = \n        componentManager.getInstance(DocumentReferenceResolver.TYPE_STRING);\n      AttachmentReferenceResolver<String> stringAttachmentReferenceResolver = \n        componentManager.getInstance(AttachmentReferenceResolver.TYPE_STRING);\n      ObjectReferenceResolver<String> stringObjectReferenceResolver = \n        componentManager.getInstance(ObjectReferenceResolver.TYPE_STRING);\n      RenderingService renderingService = (RenderingService) ExoContainerContext.getCurrentContainer().getComponentInstanceOfType(RenderingService.class);\n      Execution execution = ((RenderingServiceImpl) renderingService).getExecution();\n      ExecutionContext ec = execution.getContext();\n      WikiContext wikiContext = null;\n      if (ec != null) {\n        wikiContext = (WikiContext) ec.getProperty(WikiContext.WIKICONTEXT);\n        try {\n          org.exoplatform.wiki.rendering.reference.ObjectReferenceConverter converter = \n            componentManager.getInstance(ObjectReferenceConverter.class, wikiContext.getSyntax());\n          objectName = converter.convert(objectName);\n        } catch (ComponentLookupException e) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(String.format(\"Syntax %s doesn't have any object reference converter\", wikiContext.getSyntax()));\n          }\n        }\n      }   \n      boolean isConfluenceSyntax = (objectName.indexOf('^') > 0) ? true : false;\n      EntityReference entityReference = null;\n      if (ResourceType.DOCUMENT.equals(type)) {\n        entityReference = stringDocumentReferenceResolver.resolve(objectName);\n      } else if (ResourceType.ATTACHMENT.equals(type) || ResourceType.ICON.equals(type)) {\n        entityReference = (isConfluenceSyntax) ? stringObjectReferenceResolver.resolve(objectName)\n                                              : stringAttachmentReferenceResolver.resolve(objectName);\n      }\n      \n      if (entityReference != null) {\n        wikiMarkupContext.setType(entityReference.extractReference(EntityType.WIKI).getName());\n        wikiMarkupContext.setOwner(entityReference.extractReference(EntityType.SPACE).getName());\n        wikiMarkupContext.setPageTitle(entityReference.extractReference(EntityType.DOCUMENT).getName());\n        wikiMarkupContext.setPageId(wikiMarkupContext.getPageTitle());\n        wikiMarkupContext.setPageId(TitleResolver.getId(wikiMarkupContext.getPageId(), false));\n        EntityReference attachmentReference = (isConfluenceSyntax) ? entityReference.extractReference(EntityType.OBJECT)\n                                                                  : entityReference.extractReference(EntityType.ATTACHMENT);\n        if (attachmentReference != null) {\n          wikiMarkupContext.setAttachmentName(attachmentReference.getName());\n        }\n        if (ResourceType.ICON.equals(type)) {\n          wikiMarkupContext.setAttachmentName(wikiMarkupContext.getAttachmentName() + \".gif\");\n        }\n\n        if (wikiContext != null) {\n          wikiMarkupContext.setPortalURL(wikiContext.getPortalURL());\n          wikiMarkupContext.setPortletURI(wikiContext.getPortletURI());\n        } else {\n          wikiContext = new WikiContext();\n          wikiContext.setType(PORTAL);\n          wikiContext.setOwner(CLASSIC);\n          wikiContext.setPageId(WIKIHOME);\n        }\n        if (DEFAULT_WIKI.equals(wikiMarkupContext.getType())) {\n          wikiMarkupContext.setType(wikiContext.getType());\n        }\n        if (DEFAULT_SPACE.equals(wikiMarkupContext.getOwner())) {\n          wikiMarkupContext.setOwner(wikiContext.getOwner());\n        }\n        if (DEFAULT_PAGE.equals(wikiMarkupContext.getPageId())) {\n          wikiMarkupContext.setPageId(wikiContext.getPageId());\n        }\n      }\n    } catch (Exception e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Couldn't get wiki context for markup: \" + objectName, e);\n      }\n    }\n    return wikiMarkupContext;\n  }"} {"path":"downloaded/GyUtil.java","method_name":"getDBConnection","content":"/**\n\t * get connection\n\t * @return Connection\n\t */\npublic  Connection getDBConnection(){\n\t\tprintln(\"Begin getConnectionForLamda 123 10th Sep 2019 \");\n\t\n\t\t\n\t\tConnection con = null;\n\t\tGyUtil instanceUtil = new GyUtil();\n\t\tString dburl = instanceUtil.loadConfig().getProperty(APIConstant.dbUrl);\n\t\tString dbUser = instanceUtil.loadConfig().getProperty(APIConstant.dbUser);\n\t\tString password = instanceUtil.loadConfig().getProperty(APIConstant.dbPassword);\n\t\t\n\t\t\n\t\t\n\t\tprintln(\"dbUrl & user 0th Sep 2019 \"+dburl +\":\"+dbUser);\n\t\t\n\t\ttry{  \n\t\t\tClass.forName(\"com.mysql.jdbc.Driver\");  \n\t\t\tcon=DriverManager.getConnection(dburl,dbUser,password);\n\t\t\t\n\t\t\tif(con!=null){\n\t\t\t\tprintln(\"Got connection 0th Sep 2019 \"+con);\n\t\t\t}else {\n\t\t\t\tprintln(\"Connection failed 0th Sep 2019 \");\n\t\t\t}\n\t\t}catch(Exception e){ \n\t\t\tprintln(\"Connection  \"+e.toString());\n\t\t\t}\n\t\tprintln(\"End getConnectionForLamda  \");\n\t\treturn con;  \n\t}"} {"path":"downloaded/GyUtil.java","method_name":"loadConfig","content":"/**\n\t * get connection\n\t * @return Connection\n\t */\npublic  Properties loadConfig(){\n\t\tprintln(\"Begin loadConfig \");\n\t\tProperties prop = null;\n\t\t prop = new Properties();\n\t\ttry {\n\t\t\t\n\t\t\tprop.load(new FileInputStream(APIConstant.configFullPath));\n\n\t        } catch (Exception ex) {\n\t            ex.printStackTrace();\n\t            println(\"Exception \"+ex.toString());\n\t            \n\t        }\n\t\tprintln(\"End loadConfig \");\n\t\treturn prop;\n\t\t\n\t}"} {"path":"downloaded/ControlerReturnCoder.java","method_name":"rivate List","content":"/**\n\t * 转换为页面返回的代码\n\t * @para\nt\n\t * @return\n\t */\n\tprivate List<String> toPageCodes(ControlerReturn t) {\n\t\tStringBuffer result = new StringBuffer();\n\t\tresult.append(tab());\n\t\t\n\t\tif (StringUtil.isNotEmpty(t.getViewPath())) {\n\t\t\tresult.append(\"return Constant.WEB_BASE_VIEW + \\\"\" + t.getViewPath() + \"\\\";\");\n\t\t} else {\n\t\t\tif (StringUtil.isNotEmpty(t.getMessage()) && StringUtil.isEmpty(t.getSureHref())) {\n\t\t\t\tresult.append(\"return pageReturn.\");\n\t\t\t\tif (t.isSuccess()) {\n\t\t\t\t\tresult.append(\"success(\\\"\" + t.getMessage() + \"\\\");\");\n\t\t\t\t} else {\n\t\t\t\t\tresult.append(\"error(\\\"\" + t.getMessage() + \"\\\");\");\n\t\t\t\t}\n\t\t\t} else if (ParameterUtil.hasNotEmpty(t.getMessage(), t.getSureButtonWord(), t.getSureHref())) {\n\t\t\t\tresult.append(\"return pageReturn.info(\" + t.isSuccess() + \", \\\"\" + t.getMessage() + \"\\\", \"\n\t\t\t\t\t\t+ \"\\\"\" + t.getSureHref() + \"\\\", \\\"\" + t.getSureButtonWord() + \"\\\")\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tList<String> resultList = new ArrayList<String>();\n\t\tresultList.add(result.toString());\n\t\tr"} {"path":"downloaded/ControlerReturnCoder.java","method_name":"xception\n\t ","content":"/**\n\t * 转换为页面返回的代码\n\t * @para\nurn\n\t * @throws UserException\n\t */\n\tprivate List<String> toAjaxCodes(ControlerReturn t) throws UserException {\n\t\tStringBuffer result = new StringBuffer();\n\t\t\n\t\tresult.append(tab());\n\t\tresult.append(\"return jsonReturn.\");\n\t\tif (t.isSuccess()) {\n\t\t\tif (ParameterUtil.allEmpty(t.getMessage(), t.getDataName())) {\n\t\t\t\tresult.append(\"successMap();\");\n\t\t\t} else if (StringUtil.isEmpty(t.getMessage()) && StringUtil.isNotEmpty( t.getDataName())) {\n\t\t\t\tresult.append(\"successMap(\" +  t.getDataName() + \");\");\n\t\t\t} else if (StringUtil.isEmpty( t.getDataName()) && StringUtil.isNotEmpty(t.getMessage())) {\n\t\t\t\tresult.append(\"successMap(\\\"\" + t.getMessage() + \"\\\");\");\n\t\t\t} else {\n\t\t\t\tresult.append(\"returnMap(true, \\\"\" + t.getMessage() + \"\\\", \" +  t.getDataName() + \");\");\n\t\t\t}\n\t\t} else {\n\t\t\tif (ParameterUtil.allEmpty(t.getMessage(),  t.getDataName())) {\n\t\t\t\tthrow new UserException(\"错误信息不能没有提示\");\n\t\t\t} else if (StringUtil.isEmpty(t.getMessage()) && StringUtil.isNotEmpty( t.getDataName())) {\n\t\t\t\tresult.append(\"errorMap(\" +  t.getDataName() + \");\");\n\t\t\t} else if (StringUtil.isEmpty( t.getDataName()) && StringUtil.isNotEmpty(t.getMessage())) {\n\t\t\t\tresult.append(\"errorMap(\\\"\" + t.getMessage() + \"\\\");\");\n\t\t\t} else {\n\t\t\t\tresult.append(\"returnMap(false, \\\"\" + t.getMessage() + \"\\\", \" + t.getDataName() + \");\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tList<String> resultList = new ArrayList<String>();\n\t\tre"} {"path":"downloaded/ControlerReturnCoder.java","method_name":"turn res","content":"/**\n\t * 转换为页面返回的代码\n\t * @para\ntList.add(result.toString());\n\t\treturn resultList;\n\t}\n\n\t@Override\n\tpublic ControlerReturn toObject(List<String> codes) {\n\t\tControlerReturn result = null;\n\t\t\t\t\n\t\tfor (String line : codes) {\n\t\t\tline = line.trim();\n\t\t\t\n\t\t\tString[] infos = CodeConst.getInnerString(line, \"return (.*)\\\\.(.*)\\\\((.*)\\\\);\");\n\t\t\tif (infos.length == 3) {\n\t\t\t\tString returnMethod = infos[0];\n\t\t\t\tString methodName = infos[1];\n\t\t\t\tString parametersStr = infos[2];\n\t\t\t\t\n\t\t\t\tif (\"jsonReturn\".equals(returnMethod)) {\n\t\t\t\t\tresult = fromAjax(methodName, parametersStr);\n\t\t\t\t} else if (\"pageReturn\".equals(returnMethod)) {\n\t\t\t\t\tresult = fromPage(methodName, parametersStr);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tinfos = CodeConst.getInnerString(line, \"return Constant\\\\.WEB_BASE_VIEW \\\\+ \\\"(.*)\\\";\");\n\t\t\t\tif (infos.length == 1) {\n\t\t\t\t\tresult = new ControlerReturn(ControlerReturn.STRING);\n\t\t\t\t\tresult.setV"} {"path":"downloaded/ControlerReturnCoder.java","method_name":"}\n\t\t}\n\t\t","content":"/**\n\t * 转换为页面返回的代码\n\t * @para\nath(infos[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t\n\tprivate ControlerReturn fromPage(String methodName, String parametersStr) {\n\t\tControlerReturn result = new ControlerReturn(ControlerReturn.STRING);\n\t\t\n\t\tString[] parameters = parametersStr.split(\",\");\n\t\tif (\"success\".equals(methodName)) {\n\t\t\tresult.setSuccess(true);\n\t\t} else if (\"error\".equals(methodName)) {\n\t\t\tresult.setSuccess(false);\n\t\t} else if (\"info\".equals(methodName)) {\n\t\t\t if (parameters.length == 4) {\n\t\t\t\t String success = parameters[0].trim();\n\t\t\t\t result.setSuccess(\"true\".equals(success));\n\t\t\t }\n\t\t}\n\t\t\n\t\tif (parameters.length == 1) {\n\t\t\tString parameter = parameters[0].trim();\n\t\t\tString message = CodeConst.getStringContent(parameter);\n\t\t\tif (StringUtil.isNotEmpty(message)) {\n\t\t\t\tresult.setMessage(message);\n\t\t\t}\n\t\t} else if (parameters.length == 4) {\n\t\t\tString message = parameters[1].trim();\n\t\t\tString sureHref = parameters[2].trim();\n\t\t\tString sureButtonWord = parameters[3].trim();\n\t\t\tresult.setMessage(CodeConst.getStringContent(message));\n\t\t\tresult.setSureHref(CodeConst.getStringContent(sureHref));\n\t\t\tresult.setSureButtonWord(CodeConst.getSt"} {"path":"downloaded/ControlerReturnCoder.java","method_name":");\n\t\t}\n\t","content":"/**\n\t * 转换为页面返回的代码\n\t * @para\ngContent(sureButtonWord));\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\n\tprivate ControlerReturn fromAjax(String methodName, String parametersStr) {\n\t\tControlerReturn result = new ControlerReturn(ControlerReturn.MAP_STRING_OBJECT);\n\t\t\n\t\tString[] parameters = parametersStr.split(\",\");\n\t\t\n\t\tif (\"successMap\".equals(methodName)) {\n\t\t\tresult.setSuccess(true);\n\t\t} else if (\"errorMap\".equals(methodName)) {\n\t\t\tresult.setSuccess(false);\n\t\t} else if (\"returnMap\".equals(methodName)) {\n\t\t\t if (parameters.length == 3) {\n\t\t\t\t String success = parameters[0].trim();\n\t\t\t\t result.setSuccess(\"true\".equals(success));\n\t\t\t }\n\t\t}\n\t\t\n\t\tif (parameters.length == 0) {\n\t\t\t\n\t\t} else if (parameters.length == 1) {\n\t\t\tString parameter = parameters[0].trim();\n\t\t\tString message = CodeConst.getStringContent(parameter);\n\t\t\tif (StringUtil.isNotEmpty(message)) {\n\t\t\t\tresult.setMessage(message);\n\t\t\t} else {\n\t\t\t\tresult.setDataName(parameter);\n\t\t\t}\n\t\t} else if (parameters.length == 2) {\n\t\t\t\n\t\t} else if (parameters.length == 3) {\n\t\t\tString message = parameters[1].trim();\n\t\t\tString dataName = parameters[2].trim();\n\t\t\tresult.setMessage(CodeConst.getStringContent(message));\n\t\t\t"} {"path":"downloaded/FlightSearch.java","method_name":"httpRequest","content":"/**\n * Initiate http request and then receive result\n * @param requestUrl\n * @return \n */\npublic static String httpRequest(String requestUrl){\n\t\t\n\t\tStringBuffer buffer = new StringBuffer();\n\t\ttry{\n\t\t\tURL url = new URL (requestUrl);\n\t\t\tHttpURLConnection httpUrlConn = (HttpURLConnection)url.openConnection();\n\t\t\thttpUrlConn.setDoInput(true);\n\t\t\thttpUrlConn.setDoOutput(false);\n\t\t\thttpUrlConn.setUseCaches(false);\n\t\t\t\n\t\t\thttpUrlConn.setRequestMethod(\"GET\");\n\t\t\thttpUrlConn.connect();\n\t\t\t\n\t\t\t//transfer the inputStream returned into string\n\t\t\tInputStream inputStream = httpUrlConn.getInputStream();\n\t\t\tInputStreamReader inputStreamReader = new InputStreamReader(inputStream,\"utf-8\");\n\t\t\tBufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n\t\t\t\n\t\t\tString str = null;\n\t\t\twhile((str=bufferedReader.readLine())!=null){\n\t\t\t\t\n\t\t\t\tbuffer.append(str);\n\t\t\t}\n\t\t\tbufferedReader.close();\n\t\t\tinputStreamReader.close();\n\t\t\tinputStream.close();\n\t\t\tinputStream=null;\n\t\t\thttpUrlConn.disconnect();\n\t\t\t\n\t\t}catch(Exception e){\n\t\t\t\t\n\t\t}\n\t\t\n\t\treturn buffer.toString();\n\t\t\n\t}"} {"path":"downloaded/FlightSearch.java","method_name":"ing urlEncode","content":"/**\n\t * Utf编码\n\t * \n\t * @param source\n\t * @return\n\n\n\t\n\tpublic static String urlEncodeUTF8(String source){\n\t\t\n\t\tString result = source;\n\t\ttry{\n\t\t\tresult=java.net.URLEncoder.encode(source,\"utf-8\");\n\t\t} catch(UnsupportedEncodingException e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn result"} {"path":"downloaded/FlightSearch.java","method_name":"tring search","content":"\n\t\n\t/**\n\t * API　places\n\t * \n\t * @param source\n\t * @retur\n\t */\n\tpublic static String searchFlight(String source){\n\t\n\t\tStringBuffer outcome = new StringBuffer();\n\n\t\t\n\t\tString requestUrl = \"http://apis.juhe.cn/plan/s?name={keyword}&date=2015-3-1&key=b562d75691aecce77b8d49205106b144\";\n\t\trequestUrl = requestUrl.replace(\"{keyword}\",urlEncodeUTF8(source));\n\n\t\ttry\n\t\t{\n\t\t    String json = httpRequest(requestUrl);\n\t\t    System.out.println(json);\n\t\t    \n\t\t    JSONObject dataJson = new JSONObject(json);\n\t\t    String resultcode = dataJson.getString(\"resultcode\");\n\t\t\t\n\t\t\t    \n\t\t\tif(resultcode.equals(\"200\")){\n\t\t\t\t\n\t\t\t\tJSONArray data = dataJson.getJSONArray(\"result\");\t\n\t\t\t    JSONObject info = data.getJSONObject(0);\n\t\t\t\tString start = info.getString(\"start\");\n\t\t\t\tString end = info.getString(\"end\");\n\t\t\t\tString DepTerminal = info.getString(\"DepTerminal\");\n\t\t\t\tString ArrTerminal = info.getString(\"ArrTerminal\");\n\t\t\t\tString DepTime = info.getString(\"DepTime\");\n\t\t\t\tString ArrTime = info.getString(\"ArrTime\");\n\t\t\t\tString DepDelay = info.getString(\"DepDelay\");\n\t\t\t\tString ArrDelay = info.getString(\"ArrDelay\");\n\t\t\t\t\n\t\t\t\t\n\t\t\t\toutcome.append(\"起飞机场：\"+ start).append(\"\\n\");\n\t\t\t\toutcome.append(\"降落机场：\"+end).append(\"\\n\");\n\t\t\t\toutcome.append(\"准点起飞时间：\"+DepTime).append(\"\\n\");\n\t\t\t\toutcome.append(\"准点降落时间：\"+ArrTime).append(\"\\n\");\n\t\t\t\toutcome.append(\"登机口:\"+DepTerminal).append(\"\\n\");\n\t\t\t\toutcome.append(\"延迟起飞时间：\"+DepDelay).append(\"\\n\");\t  \t\n\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\t\n\t\t\t\t\toutcome.append(\"搜索出现异常，无该航班信息\");\n\t\t\t\t}\n\t\t\t\n\t\t}\n\t\t  \n\t\t \n\t\t"} {"path":"downloaded/Use.java","method_name":"doSomething","content":"/**\n\t * When the command use is entered, this code runs and calls the item's function\n\t * \n\t * @param command String[] that holds the string the user enters (from Parser.java)\n\t */\npublic void doSomething(String[] command) {\n\t\tHashMap<String, Item> items = p1.getItemList();\n\t\tif (!items.containsKey(command[1])) {\n\t\t\tSystem.out.println(\"Inventory does not contain this item\");\n\t\t\treturn;\n\t\t}\n\t\titems.get(command[1]).function(p1);\n\t}"} {"path":"downloaded/Use.java","method_name":"getDescription","content":"/**\n\t * Returns the purpose of the use command\n\t * \n\t * @return String of the purpose of the use command\n\t */\npublic String getDescription() {return \"Use an item in your inventory\"; }"} {"path":"downloaded/CocosHelper.java","method_name":"registerBatteryLevelReceiver","content":"/**\n     * Battery receiver to getting battery level.\n     */\nstatic void registerBatteryLevelReceiver(Context context) {\n        if (sBatteryReceiver.isPresent()) return;\n\n        MatchingSkills ms = new MatchingSkills();\n        ms.addEvent(CommonEventSupport.COMMON_EVENT_BATTERY_CHANGED);\n        CommonEventSubscribeInfo subscribeInfo = new CommonEventSubscribeInfo(ms);\n        sBatteryReceiver = Optional.of(new BatteryReceiver(subscribeInfo));\n        try {\n            CommonEventManager.subscribeCommonEvent(sBatteryReceiver.get());\n        } catch (RemoteException e) {\n            e.printStackTrace();\n        }\n    }"} {"path":"downloaded/CategoryAPI.java","method_name":"y>> listAllCateg","content":"/***\n\t * API lấy danh sách các category\n\t * @return\n\n/\n\n\t@RequestMapping(value = \"/get-all\", method = RequestMethod.GET, headers = \"Accept=application/json\")\n\tpublic ResponseEntity<List<Category>> listAllCategorys() {\n\t\tList<Category> categorys = categoryService.getAllCategorys();\n\t\tif(categorys.isEmpty()){\n\t\t\treturn new ResponseEntity<List<Category>>(HttpStatus.NO_CONTENT);//You many decide to return HttpStatus.NOT_FOUND\n\t\t}\n\t\treturn new ResponseEntity<List<Category>>(categorys, HttpStatus.OK)"} {"path":"downloaded/CocosHelper.java","method_name":"getNetworkType","content":"/**\n     * Battery receiver to getting battery level.\n     */\n@SuppressWarnings(\"unused\")\n    public static int getNetworkType() {\n\n        NetManager netManager = NetManager.getInstance(sAbilitySlice.getContext());\n        if (!netManager.hasDefaultNet()) return NETWORK_TYPE_NONE;\n\n        WifiDevice wifiDevice = WifiDevice.getInstance(sAbilitySlice.getContext());\n        if (null == wifiDevice) return NETWORK_TYPE_NONE;\n\n        if (wifiDevice.isWifiActive() && wifiDevice.isConnected()) {\n            return NETWORK_TYPE_LAN;\n        }\n        return NETWORK_TYPE_WWAN;\n    }"} {"path":"downloaded/CocosHelper.java","method_name":"getBatteryLevel","content":"/**\n     * Battery receiver to getting battery level.\n     */\n@SuppressWarnings(\"unused\")\n    public static float getBatteryLevel() {\n        return sBatteryReceiver.map(x -> x.sBatteryLevel).orElse(1.0f);\n    }"} {"path":"downloaded/CocosHelper.java","method_name":"getObbFilePath","content":"/**\n     * Battery receiver to getting battery level.\n     */\n@SuppressWarnings(\"unused\")\n    public static String getObbFilePath() {\n        return CocosHelper.sObbFilePath;\n    }"} {"path":"downloaded/CocosHelper.java","method_name":"getWritablePath","content":"/**\n     * Battery receiver to getting battery level.\n     */\npublic static String getWritablePath() {\n        return sAbilitySlice.getApplicationContext().getFilesDir().getAbsolutePath();\n    }"} {"path":"downloaded/CocosHelper.java","method_name":"getCurrentLanguage","content":"/**\n     * Battery receiver to getting battery level.\n     */\n@SuppressWarnings(\"unused\")\n    public static String getCurrentLanguage() {\n        return Locale.getDefault().getLanguage();\n    }"} {"path":"downloaded/CocosHelper.java","method_name":"getCurrentLanguageCode","content":"/**\n     * Battery receiver to getting battery level.\n     */\n@SuppressWarnings(\"unused\")\n    public static String getCurrentLanguageCode() {\n        return Locale.getDefault().toString();\n    }"} {"path":"downloaded/CocosHelper.java","method_name":"getDeviceModel","content":"/**\n     * Battery receiver to getting battery level.\n     */\n@SuppressWarnings(\"unused\")\n    public static String getDeviceModel() {\n        return DeviceInfo.getModel();\n    }"} {"path":"downloaded/CocosHelper.java","method_name":"getSystemVersion","content":"/**\n     * Battery receiver to getting battery level.\n     */\n@SuppressWarnings(\"unused\")\n    public static String getSystemVersion() {\n        return SystemVersion.getVersion();\n    }"} {"path":"downloaded/CocosHelper.java","method_name":"vibrate","content":"/**\n     * Battery receiver to getting battery level.\n     */\n@SuppressWarnings(\"unused\")\n    public static void vibrate(float durSec) {\n        List<Integer> vlist = sVibrateService.getVibratorIdList();\n        if (vlist.isEmpty()) return;\n        int durationMs = (int) (1000 * durSec);\n        int vibrateId = -1;\n        for (Integer vId : vlist) {\n            // TODO: choose preferred vibration effect\n            if (sVibrateService.isEffectSupport(vId, VibrationPattern.VIBRATOR_TYPE_CAMERA_CLICK)) {\n                vibrateId = vId;\n                break;\n            }\n        }\n        if (vibrateId < 0) {\n            sVibrateService.startOnce(durationMs);\n        } else {\n            sVibrateService.startOnce(durationMs, vibrateId);\n        }\n    }"} {"path":"downloaded/CocosHelper.java","method_name":"openURL","content":"/**\n     * Battery receiver to getting battery level.\n     */\n@SuppressWarnings(\"unused\")\n    public static boolean openURL(String url) {\n        runOnUIThread(new Runnable() {\n            @Override\n            public void run() {\n                Intent i = new Intent();\n                Operation operation = new Intent.OperationBuilder()\n                        .withUri(Uri.parse(url))\n                        .build();\n                i.setOperation(operation);\n                sAbilitySlice.startAbility(i);\n            }\n        });\n        return true;\n    }"} {"path":"downloaded/CocosHelper.java","method_name":"getDeviceRotation","content":"/**\n     * Battery receiver to getting battery level.\n     */\npublic static int getDeviceRotation() {\n        try {\n            DisplayManager mgr = DisplayManager.getInstance();\n            Optional<Display> display = mgr.getDefaultDisplay(sAbilitySlice.getContext());\n            return display.map(Display::getRotation).orElse(0);\n        } catch (NullPointerException e) {\n            e.printStackTrace();\n        }\n        // 0 indicates no rotation,\n        // 1 indicates 90 degrees,\n        // 2 indicates 180 degrees,\n        // 3 indicates 270 degrees.\n        return 0;\n    }"} {"path":"downloaded/CocosHelper.java","method_name":"getSafeArea","content":"/**\n     * Battery receiver to getting battery level.\n     */\npublic static float[] getSafeArea() {\n        return new float[]{0, 0, 0, 0};\n    }"} {"path":"downloaded/CocosHelper.java","method_name":"getDPI","content":"/**\n     * Battery receiver to getting battery level.\n     */\n@SuppressWarnings(\"unused\")\n    public static int getDPI() {\n        Optional<Display> disp = DisplayManager.getInstance().getDefaultDisplay(getContext());\n        if (disp.isPresent()) {\n            return (int) disp.get().getAttributes().xDpi;\n        }\n        return -1;\n    }"} {"path":"downloaded/CocosHelper.java","method_name":"getContext","content":"/**\n     * Battery receiver to getting battery level.\n     */\npublic static Context getContext() {\n        return sAbilitySlice.getContext();\n    }"} {"path":"downloaded/CocosHelper.java","method_name":"copyOutResFile","content":"/**\n     * Battery receiver to getting battery level.\n     */\npublic static File copyOutResFile(Context ctx, String path, String tmpName) throws IOException{\n        File fontTmpFile;\n        FileOutputStream fontOutputStream=null;\n        Resource resource = null;\n        if(!path.startsWith(\"resources/rawfile/\")){\n            path = \"resources/rawfile/\" + path;\n        }\n        RawFileEntry entry = ctx.getResourceManager().getRawFileEntry(path);\n        try {\n            fontTmpFile = File.createTempFile(tmpName, \"-tmp\");\n            fontOutputStream = new FileOutputStream(fontTmpFile);\n            resource = entry.openRawFile();\n            byte[] buf = new byte[4096];\n            while (resource.available() > 0) {\n                int readBytes = resource.read(buf, 0, 4096);\n                if (readBytes > 0)\n                    fontOutputStream.write(buf, 0, readBytes);\n            }\n        } finally {\n            if(fontOutputStream!=null)\n                fontOutputStream.close();\n            if(resource != null)\n                resource.close();\n        }\n        return fontTmpFile;\n    }"} {"path":"downloaded/CocosHelper.java","method_name":"copyToTempFile","content":"/**\n     * Battery receiver to getting battery level.\n     */\npublic static File copyToTempFile(String path, String tmpName) throws IOException {\n        File fontTmpFile;\n        FileOutputStream fontOutputStream=null;\n        FileInputStream fis = null;\n        try {\n            fontTmpFile = File.createTempFile(tmpName, \"-tmp\");\n            fontOutputStream = new FileOutputStream(fontTmpFile);\n            fis = new FileInputStream(path);\n            byte[] buf = new byte[4096];\n            while (fis.available() > 0) {\n                int readBytes = fis.read(buf, 0, 4096);\n                if (readBytes > 0)\n                    fontOutputStream.write(buf, 0, readBytes);\n            }\n        } finally {\n            if(fontOutputStream!=null)\n                fontOutputStream.close();\n            if(fis != null)\n                fis.close();\n        }\n        return fontTmpFile;\n    }"} {"path":"downloaded/DelegatedVectorGraphics2D.java","method_name":"getDelegatedGraphics2D","content":"/** Replies the delegated Graphics2D.\n\t * \n\t * @return the delegated Graphics2D.\n\t */\npublic G getDelegatedGraphics2D() {\n\t\treturn this.delegate;\n\t}"} {"path":"downloaded/DelegatedVectorGraphics2D.java","method_name":"getLOD","content":"/** Replies the delegated Graphics2D.\n\t * \n\t * @return the delegated Graphics2D.\n\t */\n@Override\n\tpublic Graphics2DLOD getLOD() {\n\t\treturn this.delegate.getLOD();\n\t}"} {"path":"downloaded/DelegatedVectorGraphics2D.java","method_name":"getStringAnchor","content":"/** Replies the delegated Graphics2D.\n\t * \n\t * @return the delegated Graphics2D.\n\t */\n@Override\n\tpublic StringAnchor getStringAnchor() {\n\t\treturn this.delegate.getStringAnchor();\n\t}"} {"path":"downloaded/DelegatedVectorGraphics2D.java","method_name":"getFont","content":"/** Replies the delegated Graphics2D.\n\t * \n\t * @return the delegated Graphics2D.\n\t */\n@Override\n\tpublic Font getFont() {\n\t\treturn VectorToolkit.font(this.delegate.getFont());\n\t}"} {"path":"downloaded/DelegatedVectorGraphics2D.java","method_name":"getFontMetrics","content":"/** Replies the delegated Graphics2D.\n\t * \n\t * @return the delegated Graphics2D.\n\t */\n@Override\n\tpublic FontMetrics getFontMetrics() {\n\t\treturn VectorToolkit.fontMetrics(this.delegate.getFontMetrics());\n\t}"} {"path":"downloaded/DelegatedVectorGraphics2D.java","method_name":"getFontMetrics","content":"/** Replies the delegated Graphics2D.\n\t * \n\t * @return the delegated Graphics2D.\n\t */\n@Override\n\tpublic FontMetrics getFontMetrics(Font f) {\n\t\tjava.awt.Font af = VectorToolkit.nativeUIObject(java.awt.Font.class, f);\n\t\treturn VectorToolkit.fontMetrics(this.delegate.getFontMetrics(af));\n\t}"} {"path":"downloaded/DelegatedVectorGraphics2D.java","method_name":"getClip","content":"/** Replies the delegated Graphics2D.\n\t * \n\t * @return the delegated Graphics2D.\n\t */\n@Override\n\tpublic Shape2f getClip() {\n\t\treturn VectorToolkit.shape(this.delegate.getClip());\n\t}"} {"path":"downloaded/DelegatedVectorGraphics2D.java","method_name":"drawImage","content":"/** Replies the delegated Graphics2D.\n\t * \n\t * @return the delegated Graphics2D.\n\t */\n@Override\n\tpublic boolean drawImage(URL imageURL, Image img, float dx1, float dy1,\n\t\t\tfloat dx2, float dy2, int sx1, int sy1, int sx2, int sy2) {\n\t\tpreDrawing();\n\t\tboolean drawn = this.delegate.drawImage(\n\t\t\t\tVectorToolkit.nativeUIObject(java.awt.Image.class, img),\n\t\t\t\tdx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, null);\n\t\tpostDrawing();\n\t\treturn drawn;\n\t}"} {"path":"downloaded/DelegatedVectorGraphics2D.java","method_name":"drawImage","content":"/** Replies the delegated Graphics2D.\n\t * \n\t * @return the delegated Graphics2D.\n\t */\n@Override\n\tpublic boolean drawImage(URL imageURL, Image img, float dx1, float dy1,\n\t\t\tfloat dx2, float dy2, int sx1, int sy1, int sx2, int sy2,\n\t\t\tImageObserver observer) {\n\t\tpreDrawing();\n\t\tboolean drawn = this.delegate.drawImage(\n\t\t\t\tVectorToolkit.nativeUIObject(java.awt.Image.class, img),\n\t\t\t\tdx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2,\n\t\t\t\tnull);\n\t\tpostDrawing();\n\t\treturn drawn;\n\t}"} {"path":"downloaded/DelegatedVectorGraphics2D.java","method_name":"setTransform","content":"/** Replies the delegated Graphics2D.\n\t * \n\t * @return the delegated Graphics2D.\n\t */\n@Override\n\tpublic Transform2D setTransform(Transform2D Tx) {\n\t\tAffineTransform old = this.delegate.getTransform();\n\t\tAffineTransform tr = new AffineTransform(Tx.m00, Tx.m10, Tx.m01, Tx.m11, Tx.m02, Tx.m12);\n\t\tthis.delegate.setTransform(tr);\n\t\tif (old==null) return null;\n\t\treturn new Transform2D(\n\t\t\t\t(float)tr.getScaleX(),\n\t\t\t\t(float)tr.getShearX(),\n\t\t\t\t(float)tr.getTranslateX(),\n\t\t\t\t(float)tr.getShearY(),\n\t\t\t\t(float)tr.getScaleY(),\n\t\t\t\t(float)tr.getTranslateY());\n\t}"} {"path":"downloaded/DelegatedVectorGraphics2D.java","method_name":"getTransform","content":"/** Replies the delegated Graphics2D.\n\t * \n\t * @return the delegated Graphics2D.\n\t */\n@Override\n\tpublic Transform2D getTransform() {\n\t\tAffineTransform tr = this.delegate.getTransform();\n\t\tif (tr==null) return null;\n\t\treturn new Transform2D(\n\t\t\t\t(float)tr.getScaleX(),\n\t\t\t\t(float)tr.getShearX(),\n\t\t\t\t(float)tr.getTranslateX(),\n\t\t\t\t(float)tr.getShearY(),\n\t\t\t\t(float)tr.getScaleY(),\n\t\t\t\t(float)tr.getTranslateY());\n\t}"} {"path":"downloaded/DelegatedVectorGraphics2D.java","method_name":"getBackground","content":"/** Replies the delegated Graphics2D.\n\t * \n\t * @return the delegated Graphics2D.\n\t */\n@Override\n\tpublic Color getBackground() {\n\t\tjava.awt.Color c = this.delegate.getBackground();\n\t\treturn VectorToolkit.color(c.getRGB(), true);\n\t}"} {"path":"downloaded/DelegatedVectorGraphics2D.java","method_name":"getComposite","content":"/** Replies the delegated Graphics2D.\n\t * \n\t * @return the delegated Graphics2D.\n\t */\n@Override\n\tpublic org.arakhne.afc.ui.vector.Composite getComposite() {\n\t\treturn VectorToolkit.composite(this.delegate.getComposite());\n\t}"} {"path":"downloaded/DelegatedVectorGraphics2D.java","method_name":"getStroke","content":"/** Replies the delegated Graphics2D.\n\t * \n\t * @return the delegated Graphics2D.\n\t */\n@Override\n\tpublic Stroke getStroke() {\n\t\treturn VectorToolkit.stroke(this.delegate.getStroke());\n\t}"} {"path":"downloaded/ConsommersResource.java","method_name":"getServices","content":"/**\n     * Retrieves representation of an instance of jax_rs.ConsommersResource\n     *\n     * @return an instance of java.lang.String\n     */\n@GET\n    @Produces(\"application/json\")\n    @Path(\"consumer/vendus/interval/{kiosk}/{date1}/{date2}\")\n    public List<ServiceVendu> getServices(@PathParam(\"kiosk\") String qosk, @PathParam(\"date1\") String date1, @PathParam(\"date2\") String date2) {\n        return new ServiceVenduBinder(cs.getServiceVendu(qosk, date1, date2));\n    }"} {"path":"downloaded/ConsommersResource.java","method_name":"getServicesByClient","content":"/**\n     * Retrieves representation of an instance of jax_rs.ConsommersResource\n     *\n     * @return an instance of java.lang.String\n     */\n@GET\n    @Produces(\"application/json\")\n    @Path(\"consumer/vendus/interval/client/{id_clt}/{date1}/{date2}\")\n    public List<ServiceVendu> getServicesByClient(@PathParam(\"id_clt\") String clt, @PathParam(\"date1\") String date1, @PathParam(\"date2\") String date2) {\n        return new ServiceVenduBinder(cs.getServiceVenduPerClient(clt, date1, date2));\n    }"} {"path":"downloaded/ConsommersResource.java","method_name":"createService","content":"/**\n     * Retrieves representation of an instance of jax_rs.ConsommersResource\n     *\n     * @return an instance of java.lang.String\n     */\n@POST\n    @Produces(\"application/json\")\n    @Consumes(\"application/json\")\n    @Path(\"consumer/input/service\")\n    public Response createService(Consommer c) {\n        DateTimeFormatter daf = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n        LocalDateTime d1 = LocalDateTime.now();\n        d1.format(daf);\n        Date d = java.util.Date.from(d1.atZone(ZoneId.systemDefault()).toInstant());\n        c.setDate(d);\n        String lib=c.getLibelle();\n        c.setLibelle((lib==null)?\"Normal\":lib);\n        c.setValide(true);\n               \n        Consommer cc = cs.createVenteService(c);\n         \n        if(c.getLibelle().equals(\"Bonus\")){\n           List<Consommer> lc=cs.getClientPoints(c.getConsommerPK().getIdClient()); \n            for(Consommer cr:lc){\n                cr.setValide(true);\n                cs.updateConsommer(cr);\n            }\n        }\n        ServiceVendu sv = cs.getServiceVendu(cc);\n        return Response.ok(sv).build();\n    }"} {"path":"downloaded/ConsommersResource.java","method_name":"searchForEligibility","content":"/**\n     * Retrieves representation of an instance of jax_rs.ConsommersResource\n     *\n     * @return an instance of java.lang.String\n     */\n@GET\n    @Produces(\"application/json\")\n    @Path(\"consumer/promotion/clients/{phone}\")\n    public List<Promotion> searchForEligibility(@PathParam(\"phone\") String phone){\n         Client clt=cltsvc.getClientByPhone(phone);\n            if(clt==null){\n                String id=String.valueOf((int)(Math.random()*1000000));\n                clt=new Client();\n                clt.setId(id);\n                clt.setPhone(phone);\n                clt.setPrenom(\"CLT-\"+id);\n                cltsvc.createClient(clt);\n            }\n       \n        List<Consommer> lc=cs.getClientPoints(clt.getId());\n        List<Promotion> lp=new ArrayList<>();\n        for(Consommer c:lc){\n            Service s=svcs.getService(c.getConsommerPK().getIdService());\n            Promotion p=new Promotion();\n            p.setCode(c.getIdKiosq()+\"-\"+c.getConsommerPK().getId());\n            p.setProduit(s.getNomService());\n            p.setQuantite(c.getQuantite());\n            p.setPhone(clt.getPhone());\n            p.setDate(df.format(c.getDate()));\n            lp.add(p);\n        }\n      return new PromotionBinder(lp) ;  \n    }"} {"path":"downloaded/ConsommersResource.java","method_name":"getConsommerResource","content":"/**\n     * Sub-resource locator method for {name}\n     */\n@Path(\"uniq/uid-{uid}/svc-{service}/clt-{clt}\")\n    public ConsommerResource getConsommerResource(@PathParam(\"uid\") int id, @PathParam(\"service\") String svc, @PathParam(\"clt\") String idClt) {\n        return ConsommerResource.getInstance(cs, id, svc, idClt);\n    }"} {"path":"downloaded/BusinessObjectMapper.java","method_name":"per businessObjectMa","content":"    /**\n \t * Stellt die Singeleton-Eigenschaft der Mapperklasse sicher\n \t * Sie daf?r sorgt, dass nur eine einzige Instanz von <code>BusinessObjectMapper</code> existiert.\n \t * @return Sie gibt den BusinessObjectMapper zur?ck.\n \n    public static BusinessObjectMapper businessObjectMapper() {\n        if(businessObjectMapper == null) {\n        \tbusinessObjectMapper = new BusinessObjectMapper();\n        }\n        return businessObjectMapper;\n "} {"path":"downloaded/BusinessObjectMapper.java","method_name":"sObject findBusinessOb","content":" \n    /**\n\t * Methode, die ein BusinessObject anhand der ID zur�ckgibt\n\t * @param int ID\n\t * @return businessobj\n   \n    public BusinessObject findBusinessObjectByID(int BOID) {\n    \tConnection con = DBConnection.connection();\n\t\t\n\t\ttry {\n\t\t\n\t\t\tStatement stmt = con.createStatement();\n\t\t\t\n\t\t\tResultSet rs = stmt.executeQuery(\"SELECT * FROM popcorns.businessobject \" + \"WHERE id= \" + BOID);\n\t\t\t\n\t\t\tif(rs.next()) {\n\t\t\t\tBusinessObject o = new BusinessObject();\n\t\t\t\to.setCreationTimestamp(rs.getTimestamp(\"CreationTimestamp\"));\n\t\t\t\to.setId(rs.getInt(\"id\"));\n\t\t\t\treturn o;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}catch(SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n        return nul"} {"path":"downloaded/BusinessObjectMapper.java","method_name":"inessObject insertBu","content":" \n    /**\n\t * Methode, die ein BusinessObject anhand der ID zur�ckgibt\n\t * @param int ID\n\t * @return businessobj\n*/\n    \n    public BusinessObject insertBusinessObject(BusinessObject BO) {\n    \tConnection con = DBConnection.connection();\n    \t\n    \ttry {\n    \t\tcon.setAutoCommit(false);\n    \t\t\n    \t\tStatement stmt = con.createStatement();\n        \t\n    \t    ResultSet rs = stmt.executeQuery(\"SELECT MAX(id) AS maxid \"\n    \t          + \"FROM businessobject \");\n\n    \t    if (rs.next()) {\n    \t     \n    \t    BO.setId(rs.getInt(\"maxid\") + 1);\n    \t\tStatement stm1 = con.createStatement();\n    \t\t\n    \t\tstm1.executeUpdate(\"INSERT INTO businessobject (id, CreationTimestamp) VALUES ('\"\n    \t\t\t\t+ BO.getId()\n\t\t\t\t\t+ \"', '\"+BO.getCreationTimestamp()\n\t\t\t\t\t+\"')\");\n    \t\t\n    \t}con.setAutoCommit(true);\n    \t}\n        catch(SQLException exc) {\n        \texc.printStackTrace();\n        }\n        retu"} {"path":"downloaded/HospitalOfficeData.java","method_name":";\n\n  ","content":"    /**\n     * 科室�\nnt quantity;\n\n    public int getId() {\n      "} {"path":"downloaded/HospitalOfficeData.java","method_name":"    public S","content":"    /**\n     * 科室�\n = id;\n    }\n\n    public String getGroupName() {\n        retur"} {"path":"downloaded/HospitalOfficeData.java","method_name":"    pub","content":"    /**\n     * 科室�\npName;\n    }\n\n    public String getName() {\n        "} {"path":"downloaded/HospitalOfficeData.java","method_name":"}\n\n    publ","content":"    /**\n     * 科室�\n name;\n    }\n\n    public int getQuantity() {\n        retu"} {"path":"downloaded/ControleEstoqueTest.java","method_name":"toque cadastrarE","content":"\n\n\t/**\n\t * Consulta o saldo de um produto quando não há nenhum item cadastrado\n\t * no estoque.\n\n\t}\n\n\tprivate EntradaEstoque cadastrarEntrada(PrecoProduto produto, int quantidade) {\n\t\tEntradaEstoque entradaEstoque = new EntradaEstoque();\n    \tentradaEstoque.setDataMovimento(new Date());\n    \t\n    \tItem item = new Item();\n\t\titem.setPrecoProduto(produto);\n    \titem.setQuantidade(quantidade);\n    \titem.setMovimentoEstoque(entradaEstoque);\n    \t\n    \tentradaEstoque.setItens(Arrays.asList(item));\n    \tentradaEstoque.setStatus(Status.CONCLUIDO);\n    \t\n    \testoqueFacade.salvar(entradaEstoque);\n    \t\n    \treturn entradaEstoq"} {"path":"downloaded/Api2MobileMemberController.java","method_name":"\n\tpublic Str","content":"/**\n\t * 一个场馆�\n否关注\n\t */\n\t@RequestMapping(\"/api2/mobile/isCollection.xhtml\")\n\tpublic String isCollection(String tag, long relatedid,String memberEncode, ModelMap model){\n\t\tMember member = memberService.getMemberByEncode(memberEncode);\n\t\tif(member == null) {\n\t\t\treturn getErrorXmlView(model, ApiConstant.CODE_MEMBER_NOT_EXISTS, \"用户不存在！\");\n\t\t}\n\t\tTreasure treasure = treasureService.getTreasureByTagMemberidRelatedid(tag, member.getId(), relatedid, \"collect\");\n\t\tif(treasure != null){\n\t\t\tmodel.put(\"isCollection\", true);\n\t\t}else{\n\t\t\tmodel.put(\"isCollection\", false);\n\t\t}\n\t\treturn getXmlView(model, \"a"} {"path":"downloaded/Api2MobileMemberController.java","method_name":"2/mobile/addC","content":"/**\n\t * 一个场馆�\n\t}\n\t/**\n\t * 添加影院，电影关注\n\t */\n\t@RequestMapping(\"/api2/mobile/addCollection.xhtml\")\n\tpublic String addCollection(ModelMap model, \n\t\t\tString tag, Long relatedid, String memberEncode,String isPush,String osType,String appVersion){\n\t\tMember member = memberService.getMemberByEncode(memberEncode);\n\t\tif(member == null) return getErrorXmlView(model, ApiConstant.CODE_MEMBER_NOT_EXISTS, \"用户不存在！\");\n\t\tTreasure treasure = treasureService.getTreasureByTagMemberidRelatedid(tag, member.getId(), relatedid, \"collect\");\n\t\tif(StringUtils.equals(tag,\"member\")){\n\t\t\tif(treasure != null) return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, \"该用户你已关注过！\");\n\t\t\tMember myMember = daoService.getObject(Member.class, relatedid);\n\t\t\tif(myMember==null)return getErrorXmlView(model, ApiConstant.CODE_PARAM_ERROR, \"传递参数错误！\");\n\t\t\tif(StringUtils.equals(member.getId()+\"\", relatedid+\"\")) return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, \"不能关注自己！\"); \n\t\t\t//关注，粉丝数加一\n\t\t\tmemberCountService.updateMemberCount(member.getId(), MemberStats.FIELD_ATTENTIONCOUNT, 1, true);\n\t\t\t//关注，粉丝数加一\n\t\t\tmemberCountService.updateMemberCount(relatedid, MemberStats.FIELD_FANSCOUNT, 1, true);\n\t\t\t//添加一条粉丝通知\n\t\t\trecommendService.memberAddFansCount(relatedid, MongoData.MESSAGE_FANS_ADD, MongoData.MESSAGE_FANS, 1);\n\t\t}else if(StringUtils.equals(tag,TagConstant.TAG_ACTIVITY)){\n\t\t\tif(treasure != null) return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, \"该活动你已关注过！\");\n\t\t\tsynchActivityService.addClickedtimes(relatedid);\n\t\t}else if(StringUtils.equals(tag,TagConstant.TAG_GYM)){\n\t\t\tif(treasure != null) return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, \"该场馆你已关注过！\");\n\t\t}else{\n\t\t\tif(treasure != null) return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, \"该项目你已关注过！\");\n\t\t\tBaseEntity relate = (BaseEntity) relateService.getRelatedObject(tag, relatedid);\n\t\t\tif(relate == null) return getErrorXmlView(model, ApiConstant.CODE_PARAM_ERROR, \"收藏的项目不存在！\");\n\t\t\tif(StringUtils.equals(\"movie\", tag) && StringUtils.equals(\"Y\", isPush)){\n\t\t\t\tthis.savePlayItemMessage(member.getId(), (Movie)relate, osType.toLowerCase(), appVersion);\n\t\t\t}\n\t\t\trelate.addCollection();\n\t\t\tdaoService.saveObject(re"} {"path":"downloaded/Api2MobileMemberController.java","method_name":"String msg = \"温馨�","content":"/**\n\t * 一个场馆�\nappVersion){\n\t\tString msg = \"温馨提示：电影《\" + movie.getName() + \"》已开放售票，欢迎购票观看。#version#\" + appVersion;\n\t\tnosqlService.addPlayItemMessage(memberId, \"cinema\", null, movie.getReleasedate(), movie.getId(), null, osType, msg);\n\t}\n\t\n\tprivate String cancelPlayItemMessage(long memberId,long movieId){\n\t\tMap params = new HashMap();\n\t\tparams.put(\"tag\", \"cinema\");\n\t\tparams.put(\"categoryid\", "} {"path":"downloaded/Api2MobileMemberController.java","method_name":"t(\"count\",","content":"/**\n\t * 一个场馆�\nData.SYSTEM_ID, relatedid);\n\t\t\tmap.put(\"count\", 0);\n\t\t}\n\t\tmap.put(\"count\", new Integer((map.get(\"count\")+\"\"))+num);\n\t\tmap.put(\"tag\",  TagConstant.TAG_CONACTIVITY);\n\t\tmongoService.saveOrUpdateMap(map, MongoData.SYSTEM_ID, MongoData.NS_SIGN);\n\t}\n\t\n\t\n\t/**\n\t * 取消关注\n\t */\n\t@RequestMapping(\"/api2/mobile/collectDel.xhtml\")\n\tpublic String collectDel(String tag, String memberEncode, Long relatedid, ModelMap model){\n\t\tif(StringUtils.isBlank(tag) || relatedid==null ||StringUtils.isBlank(memberEncode))\n\t\t\treturn getErrorXmlView(model, ApiConstant.CODE_PARAM_ERROR, \"传递参数错误！\");\n\t\tMember member = memberService.getMemberByEncode(memberEncode);\n\t\tif(member == null) return getErrorXmlView(model, ApiConstant.CODE_MEMBER_NOT_EXISTS, \"用户不存在！\");\n\t\tif(tag.equals(\"member\")){\n\t\t\tMember myMember = daoService.getObject(Member.class, relatedid);\n\t\t\tif(myMember==null)return getErrorXmlView(model, ApiConstant.CODE_PARAM_ERROR, \"传递参数错误！\");\n\t\t}\n\t\tif(StringUtils.equals(member.getId()+\"\", relatedid+\"\")) return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, \"操作异常\"); \n\t\tTreasure treasure = treasureService.getTreasureByTagMemberidRelatedid(tag, member.getId(), relatedid, Treasure.ACTION_COLLECT);\n\t\tif(treasure==null) {\n\t\t\treturn getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, \"找不到记录！\");\n\t\t}\n\t\twalaApiService.delTreasure(treasure.getMemberid(), treasure.getRelatedid(), treasure.getTag(), treasure.getAction());\n\t\tdaoService.removeObject(treasure);\n\t\tif(tag.equals(TagConstant.TAG_ACTIVITY)){\n\t\t\taddCollect(relatedid,-1);\n\t\t}else if(StringUtils.equals(TagConstant.TAG_MOVIE, tag)){\n\t\t\tcancelPlay"} {"path":"downloaded/Api2MobileMemberController.java","method_name":"\n\t\t\tmemb","content":"/**\n\t * 一个场馆�\nd(),relatedid);\n\t\t}else if(StringUtils.equals(tag, \"member\")){\n\t\t\tmemberCountService.updateMemberCount(member.getId(), MemberStats.FIELD_ATTENTIONCOUNT, 1, false);\n\t\t\tmemberCountService.updateMemberCount(relatedid, MemberStats.FIELD_FANSCOUNT, 1, false);\n\t\t}\n\t\treturn getXmlView(model, \"api/mobile/result.vm\");\n\t}\n\t\n\t/**\n\t * 我的票券\n\t */\n\t@RequestMapping(\"/api2/mobile/cardList.xhtml\")\n\tpublic String cardList(String memberEncode,String tag,Integer from,Integer maxnum,ModelMap model) {\n\t\tMember member = memberService.getMemberByEncode(memberEncode);\n\t\tif(member == null) return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, \"用户不存在！\");\n\t\tif(maxn"} {"path":"downloaded/Api2MobileMemberController.java","method_name":"\tif(tag == null )tag =","content":"/**\n\t * 一个场馆�\n != null && maxnum >20) maxnum = 20;\n\t\tif(tag == null )tag = TagConstant.TAG_MOVIE;\n\t\tList<ElecCard> cardList = elecCardService.getCardListByMemberid(member.getId(), tag, from, maxnum);\n\t\tCollections.sort(cardList,new PropertyComparator(\"status\", true, false));\n\t\tmodel.put(\"cardList\", cardList);\n\t\treturn getXmlView(model, \"api2/mobile/cardList.vm\");\n\t}\n\tprivate <T extends GewaOrder> List<T> getOrderListByMemberId(Class<T> clazz, Long memberId, int days, int from, int maxnum) {\n\t\tTimestamp cur = new Timestamp(System.currentTimeMillis());\n\t\tTimestamp qtime = DateUtil.addDay(cur, - days);\n\t\tDetachedCriteria query = DetachedCriteria.forClass(clazz);\n\t\tquery.add(Restrictions.eq(\"memberid\", memberId));\n\t\tquery.add(Restrictions.or(Restrictions.and(\n\t\t\t\t\t\tRestrictions.like(\"status\", OrderConstant.STATUS_NEW, MatchMode.START), \n\t\t\t\t\t\tRestrictions.gt(\"validtime\", cur)), \n\t\t\t\t\tRestrictions.like(\"s"} {"path":"downloaded/Api2MobileMemberController.java","method_name":"trictions","content":"/**\n\t * 一个场馆�\nTATUS_PAID, MatchMode.START)));\n\t\tquery.add(Restrictions.or(Restrictions.isNull(\"restatus\"), Restrictions.ne(\"restatus\", GewaOrder.RESTATUS_DELETE)));\n\t\tquery.add(Restrictions.ge(\"addtime\", qtime));\n\t\tquery.addOrder(Order.desc(\"addtime\"));\n\t\tList<T> result = hibernateTemplate.findByCriteria(query, from, maxnum);\n\t\treturn result;\n\t}\n\t\n\t/**\n\t * 我的订单\n\t */\n\t@RequestMapping(\"/api2/mobile/orderList.xhtml\")\n\tpublic String orderList(String memberEncode,String tradeNo,Integer from,Integer maxnum,ModelMap model){\n\t\tApiAuth auth = NewApiAuthenticationFilter.getApiAuth();\n\t\tMap<Long,String> passwordMap = new HashMap<Long, String>();\n\t\tList<TicketOrder> ticketOrderList = null;\n\t\tList<TicketOrder> newOrderList = new ArrayList<TicketOrder>();\n\t\tMember member = memberService.getMemberByEncode(memberEncode);\n\t\tif(member == null) return getErrorXmlView(model,ApiConstant.CODE_MEMBER_NOT_EXISTS, \"用户不存在！\");\n\t\tMap<Long, Movie> movieMap = new HashMap<Long, Movie>();\n\t\tMap<Long, OpenPlayItem> opiMap = new HashMap<Long, OpenPlayItem>();\n\t\tTicketOrder lastUnpaidOrder = null;\n\t\tif(StringUtils.isBlank(tradeNo)){\n\t\t\tticketOrderList = getOrderListByMemberId(TicketOrder.class, member.getId(), 360, from, maxnum);\n\t\t\tif(!VmUtils.isEmptyList(ticketOrderList)){\n\t\t\t\tfor (TicketOrder ticketOrder : ticketOrderList) {\n\t\t\t\t\tif(ticketOrder.isPaidSuccess()  && member.isBindMobile()){\n\t\t\t\t\t\tList<SellSeat> seatList = ticketOrderService.getOrderSeatList(ticketOrder.getId());\n\t\t\t\t\t\tString password = messageService.getOrderPassword(ticketOrder, seatList);\n\t\t\t\t\t\tif(StringUtils.isNotBlank(password)){\n\t\t\t\t\t\t\tpasswordMap.put(ticketOrder.getId(), password);\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(lastUnpaidOrder==null && ticketOrder.isNew()){\n\t\t\t\t\t\tlastUnpaidOrder = ticketOrder;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}else{\n\t\t\tTicketOrder order = daoService.getObjectByUkey(TicketOrder.class, \"tradeNo\", tradeNo, false);\n\t\t\tif(order != null && order.getMemberid().equals(member.getId())){\n\t\t\t\tif (order.isCancel()) return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, \"不能操作已（过时）取消的订单！\");\n\t\t\t\tif (order.isNew()) {\n\t\t\t\t\tlastUnpaidOrder = order;\n\t\t\t\t}else if(order.isPaidSuccess()){\n\t\t\t\t\tticketOrderList =  Arrays.asList(order);\n\t\t\t\t\tif(member.isBindMobile()) {\n\t\t\t\t\t\tList<SellSeat> seatList = ticketOrderService.getOrderSeatList(order.getId());\n\t\t\t\t\t\tString password = messageService.getOrderPassword(order, seatList);\n\t\t\t\t\t\tif(StringUtils.isNotBlank(password)){\n\t\t\t\t\t\t\tpasswordMap.put(order.getId(), password);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\treturn getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, \"订单信息有误！\");\n\t\t\t}\n\t\t}\n\t\tif(lastUnpaidOrder!=null){\n\t\t\tmovieMap.put(lastUnpaidOrder.getId(), daoService.getObject(Movie.class, lastUnpaidOrder.getMovieid()));\n\t\t\topiMap.put(lastUnpaidOrder.getId(), daoService.getObjectByUkey(OpenPlayItem.class, \"mpid\", lastUnpaidOrder.getMpid(), false));\n\t\t}\n\t\tMap<Long, BuyItem> buyItemMap = new HashMap<Long, BuyItem>();\n\t\tif(ticketOrderList!=null){\n\t\t\tfor(TicketOrder torder : ticketOrderList){\n\t\t\t\tif(torder.getItemfee()>0){\n\t\t\t\t\t//TODO:重新处理，多个BuyItem\n\t\t\t\t\tBuyItem item = daoService.getObjectByUkey(BuyItem.class, \"orderid\", torder.getId(), false);\n\t\t\t\t\tif(item!=null) buyItemMap.put(torder.getId(), item);\n\t\t\t\t}\n\t\t\t\tnewOrderList.add(torder);\n\t\t\t\tmovieMap.put(torder.getId(), daoService.getObject(Movie.class, torder.getMovieid()));\n\t\t\t\topiMap.put(torder.getId(), daoService.getObjectByUkey(OpenPlayItem.class, \"mpid\", torder.getMpid(), false));\n\t\t\t}\n\t\t\tif(lastUnpa"} {"path":"downloaded/Api2MobileMemberController.java","method_name":");\n\t\t}\n\t\tmodel.pu","content":"/**\n\t * 一个场馆�\nrderList.contains(lastUnpaidOrder)) newOrderList.remove(lastUnpaidOrder);\n\t\t}\n\t\tmodel.put(\"buyItemMap\", buyItemMap);\n\t\tmodel.put(\"orderList\", newOrderList);\n\t\tmodel.put(\"partner\", auth.getApiUser());\n\t\tmodel.put(\"passwordMap\", passwordMap);\n\t\tmodel.put(\"movieMap\", movieMap);\n\t\tmodel.put(\"opiMap\", opiMap);\n\t\tmodel.put(\"lastUnpaidOrder\", lastUnpaidOrder);\n\t\treturn getXmlView(model, \"api2/order/orderList.vm\");\n\t}\n\t/**\n\t * 我的订单\n\t */\n\t@RequestMapping(\"/api2/mobile/ticketOrderDetail.xhtml\")\n\tpublic String ticketOrderDetail(String memberEncode, String tradeNo, ModelMap model){\n\t\tif(StringUtils.isBlank(memberEncode) || StringUtils.isBlank(tradeNo)){\n\t\t\treturn getErrorXmlView(model,ApiConstant.CODE_PARAM_ERROR, \"缺少参数\");\n\t\t}\n\t\tMember member = memberService.getMemberByEncode(memberEncode);\n\t\tif(member == null) return getErrorXmlView(model,ApiConstant.CODE_MEMBER_NOT_EXISTS, \"用户不存在！\");\n\t\tTicketOrder order = daoService.getObjectByUkey(TicketOrder.class, \"tradeNo\", tradeNo, false);\n\t\tif(order == null) return getErrorXmlView(model,ApiConstant.CODE_DATA_ERROR, \"订单不存在！\");\n\t\tif(!order.getMemberid().equals(member.getId())) return getErrorXmlView(model,ApiConstant.CODE_DATA_ERROR, \"不能查询他人的订单\");\n\t\tList<SellSeat> seatList = ticketOrderService.getOrderSeatList(order.getId());\n\t\tif(order.getItemfee()>0){\n\t\t\t//TODO:重新处理，多个BuyItem\n\t\t\tBuyItem item = daoService.getObjectByUkey(BuyItem.class, \"orderid\", order.getId(), false);\n\t\t\tmodel.put(\"buyItem\", item);\n\t\t}\n\t\tString passmsg = \"\";\n\t\tif(order.isPaidSuccess()) passmsg= messageService.getOrderPassword(order, seatList);\n\t\tCinema cinema = daoService.getObject(Cinema.class, order.getCinemaid());\n\t\tCinemaProfile profile = daoService.getObject(CinemaProfile.class"} {"path":"downloaded/Api2MobileMemberController.java","method_name":"del.put(\"op","content":"/**\n\t * 一个场馆�\n\tmodel.put(\"order\", order);\n\t\tmodel.put(\"passmsg\", passmsg);\n\t\tmodel.put(\"opi\", daoService.getObjectByUkey(OpenPlayItem.class, \"mpid\", order.getMpid(), false));\n\t\tmodel.put(\"movie\", daoService.getObject(Movie.class, order.getMovieid()));\n\t\tmodel.put(\"cinema\", cinema);\n\t\tif(profile!=null) model.put(\"diaryid\", profile.getTopicid());\n\t\tmodel.put(\"subwaylineMap\", placeService.getSubwaylineMap(cinema.getCitycode()));\n\t\treturn getXmlView(model, \"api2/order/ticketOrderDetail.vm\");\n\t}\n\t\n\t/**\n\t * 意见回馈信息\n\t */\n\t@RequestMapping(\"/api2/mobile/addComplain.xhtml\")\n\tpublic String addComplain(ModelMap model, String citycode, String body, String email, String phonetype,String osVersion, String appVersion, String mobileType) {\n\t\tif(StringUtils.isNotBlank(appVersion)){\n\t\t\tbody = body + \" [appVersi"} {"path":"downloaded/Api2MobileMemberController.java","method_name":"mobileType:\"","content":"/**\n\t * 一个场馆�\n\t\t}\n\t\tif(StringUtils.isNotBlank(mobileType)){\n\t\t\tbody = body + \" [mobileType:\" + mobileType + \"]\";\n\t\t}\n\t\tif(StringUtils.isNotB"} {"path":"downloaded/Api2MobileMemberController.java","method_name":"ion qu","content":"/**\n\t * 一个场馆�\ndy = body + \" [osVersion:\" + osVersion + \"]\";\n\t\t}\n\t\tCustomerQuestion question = customerQuestionService.addCustomerQuestion(citycode, null, email, CustomerQuestion.TAG_ADVISE, body, phonetype);\n\t\tif(question == null) return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, \"保存意见内容失败！\");\n\t\treturn getXmlView(model, \"api/mobile/result.vm\");\n\t}\n\t\n\t\n\t/**\n\t * 绑定票券\n\t */\n\t@RequestMapping(\"/api2/mobile/bindCardInfo.xhtml\")\n\tpublic String bindCardInfo(ModelMap model){\n\t\treturn notSupport(model);\n\t}\n\t\n\t/**\n\t * 取消订单\n\t */\n\t@RequestMapping(\"/api2/mobile/cancelOrder.xhtml\")\n\tpublic String cancel(String memberEncode,Long orderid,String tradeNo,ModelMap model){\n\t\tApiAuth auth = NewApiAuthenticationFilter.getApiAuth();\n\t\tGewaOrder order = null;\n\t\tif((orderid == null && StringUtils.isNotBlank(tradeNo))||(orderid != null && StringUtils.isNotBlank(tradeNo))){\n\t\t\torder = daoService.getObjectByUkey(GewaOrder.class, \"tradeNo\", tradeNo, false);\n\t\t}else if(orderid != null && StringUtils.isBlank(tradeNo)){\n\t\t\torder = daoService.getObject(GewaOrder.class, orderid);\n\t\t}else return getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, \"参数有误！\");\n\t\tif(order == null) return getErrorXmlView(model,ApiConstant.CODE_DATA_ERROR, \"订单不存在！\");\n\t\tLong memberid = 0l;\n\t\tif(StringUtils.isBlank(memberEncode)){\n\t\t\tif(order.getMemberid().equals(PartnerConstant.IPHONE)){\n\t\t\t\tmemberid = auth.getApiUser().getId();\n\t\t\t}else{\n\t\t\t\treturn getErrorXmlView(model, ApiConstant.CODE_DATA_ERROR, \"订单信息有误！\");\n\t\t\t}\n\t\t}else{\n\t\t\tMember member = memberService.getMemberByEncode(memberEncode);\n\t\t\tif(member == null) return getErrorXmlView(model,ApiConstant.CODE_MEMBER_NOT_EXISTS,\"用户不存在！\");\n\t\t\tif(!member.getId().equals(order.getMemberid())) return getErrorXmlView(model,ApiConstant.CODE_DATA_ERROR,\"你无权限操作此订单！\");\n\t\t\tmemberid = member.getId();\n\t\t}\n\t\tif(!order.isNew()) return getErrorXmlView(model, Ap"} {"path":"downloaded/MainServlet.java","method_name":" voi","content":"/**\n\t * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)\n\t */\n\t\t}\n\t}\n\tpublic static void Judgment(int count,String name,String pass) {\n\t\tif (count<6) {\n\t\t\tlogin(name, pass);\n\t\t}else if (count>=6) {\n\t\t\tView = \"forgetpass.jsp\";\n\t\t}\n\t}\n\tpublic static String Hash(String salt,String password) {\n\t\tString hashedStr = GenerateHash"} {"path":"downloaded/RepeatedStringMatch.java","method_name":"int repeatedStringM","content":"\n\t\n\t/**\n\t * Method: Brute Force \n\t * @param String A, String B\n\t * @return int\n\t * Time: O(N*(N+M)), where M, N are the lengths of strings A, B. We create two strings A * q, \n\t * \t\t A * (q+1) which have length at most O(M+N). When checking whether B is a substring of \n\t * \t\t A, this check takes naively the product of their lengths.\n\t * Space: O(M+N)\n\n*/\n\tpublic int repeatedStringMatch(String A, String B) {\n\t\tint count = 0;\n\t\tStringBuilder sb = new StringBuilder();\n\t\twhile (sb.length() < B.length()) {\n\t\t\tsb.append(A);\n\t\t\tcount++;\n\t\t}\n\t\tif (sb.indexOf(B) >= 0) return count;\n\t\tif (sb.append(A).indexOf(B) > 0) return count + 1;\n\t\treturn -1"} {"path":"downloaded/SessionDao.java","method_name":"getId","content":"/**\n     * {@inheritDoc}\n     */\n@Override\n    protected String getId(com.scratch.database.mysql.jv.tables.pojos.Session object) {\n        return object.getId();\n    }"} {"path":"downloaded/SessionDao.java","method_name":"fetchById","content":"/**\n     * Fetch records that have <code>id IN (values)</code>\n     */\npublic List<com.scratch.database.mysql.jv.tables.pojos.Session> fetchById(String... values) {\n        return fetch(Session.SESSION.ID, values);\n    }"} {"path":"downloaded/SessionDao.java","method_name":"fetchOneById","content":"/**\n     * Fetch a unique record that has <code>id = value</code>\n     */\npublic com.scratch.database.mysql.jv.tables.pojos.Session fetchOneById(String value) {\n        return fetchOne(Session.SESSION.ID, value);\n    }"} {"path":"downloaded/SessionDao.java","method_name":"fetchByName","content":"/**\n     * Fetch records that have <code>name IN (values)</code>\n     */\npublic List<com.scratch.database.mysql.jv.tables.pojos.Session> fetchByName(String... values) {\n        return fetch(Session.SESSION.NAME, values);\n    }"} {"path":"downloaded/SessionDao.java","method_name":"fetchByModified","content":"/**\n     * Fetch records that have <code>modified IN (values)</code>\n     */\npublic List<com.scratch.database.mysql.jv.tables.pojos.Session> fetchByModified(Integer... values) {\n        return fetch(Session.SESSION.MODIFIED, values);\n    }"} {"path":"downloaded/SessionDao.java","method_name":"fetchByLifetime","content":"/**\n     * Fetch records that have <code>lifetime IN (values)</code>\n     */\npublic List<com.scratch.database.mysql.jv.tables.pojos.Session> fetchByLifetime(Integer... values) {\n        return fetch(Session.SESSION.LIFETIME, values);\n    }"} {"path":"downloaded/SessionDao.java","method_name":"fetchByData","content":"/**\n     * Fetch records that have <code>data IN (values)</code>\n     */\npublic List<com.scratch.database.mysql.jv.tables.pojos.Session> fetchByData(String... values) {\n        return fetch(Session.SESSION.DATA, values);\n    }"} {"path":"downloaded/Comm.java","method_name":"serialWrite","content":"/**\n\t * Handle an event on the serial port. Read the data and print it.\n\t */\npublic synchronized boolean serialWrite(String message) throws UnsupportedEncodingException, IOException{\n\t\toutput.write(message.getBytes(\"US-ASCII\"));\n\t\treturn true;\n\t}"} {"path":"downloaded/Comm.java","method_name":"stringBlockReady","content":"/**\n\t * Handle an event on the serial port. Read the data and print it.\n\t */\npublic boolean stringBlockReady(){\n\t\treturn inputBlockBuffer.size() > 0;\n\t}"} {"path":"downloaded/Comm.java","method_name":"dequeueStringBlock","content":"/**\n\t * Handle an event on the serial port. Read the data and print it.\n\t */\npublic Block dequeueStringBlock() {\n\t\treturn inputBlockBuffer.poll();\n\t}"} {"path":"downloaded/Sql.java","method_name":"initSqlConnection","content":"/**\n\t * Initiates a connection to the NAW SQL database. If the mc_bukkit_naw \n\t * database does not exist, one is created\n\t * \n\t * @param url The URL of the MySql server\n\t * @param user The user name with which to access the database\n\t * @param pass The password with which to access the database\n\t * @return Returns true on a successful connection, false on error\n\t */\nprivate Boolean initSqlConnection(String url, String user, String pass) {\n\t\t\n\t\ttry {\n\t\t\tBoolean exists = false;\n\t\t\tClass.forName(SQL_DRIVER);\n\t\t\tConnection sqlConn = DriverManager.getConnection(url, user, pass);\n\t\t\tDatabaseMetaData dm = sqlConn.getMetaData();\n\t\t\tResultSet rs = dm.getCatalogs();\n\t\t\t\n\t\t\twhile (rs.next()) {\n\t\t\t\tif (rs.getString(\"TABLE_CAT\").compareTo(DB_NAME) == 0) { exists = true; }\n\t\t\t}\n\t\t\t\n\t\t\tif (exists == false) {\n\t\t\t\tStatement smt = sqlConn.createStatement();\n\t\t\t\tsmt.executeUpdate(\"CREATE DATABASE \" + DB_NAME);\n\t\t\t\tsmt.close();\n\t\t\t\tplugin.sendToLog(\"SQL Database not found, creating database: mc_bukkit_naw\");\t\n\t\t\t}\n\t\t\t\n\t\t\trs.close();\n\t\t\tsqlConn.close();\n\t\t\tsqlConn = DriverManager.getConnection(url + DB_NAME, user, pass);\n\t\t\tplugin.sendToLog(\"SQL Database connection initialized\");\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\tplugin.sendToLog(\"SQL Database connection failed!: \" + e.getMessage());\n\t\t}\n\t\t\n\t\treturn false;\n\t}"} {"path":"downloaded/Sql.java","method_name":"load","content":"/**\n\t * Initiates a connection to the NAW SQL database. If the mc_bukkit_naw \n\t * database does not exist, one is created\n\t * \n\t * @param url The URL of the MySql server\n\t * @param user The user name with which to access the database\n\t * @param pass The password with which to access the database\n\t * @return Returns true on a successful connection, false on error\n\t */\n@Override\n\tpublic NAWObject load(String type, String key) {\n\t\t// TODO SQL: load\n\t\treturn null;\n\t}"} {"path":"downloaded/Sql.java","method_name":"gatherDataset","content":"/**\n\t * Initiates a connection to the NAW SQL database. If the mc_bukkit_naw \n\t * database does not exist, one is created\n\t * \n\t * @param url The URL of the MySql server\n\t * @param user The user name with which to access the database\n\t * @param pass The password with which to access the database\n\t * @return Returns true on a successful connection, false on error\n\t */\n@Override\n\tpublic ArrayList<String> gatherDataset(String type) {\n\t\t// TODO SQL: gatherDataset\n\t\treturn new ArrayList<String>();\n\t}"} {"path":"downloaded/ApproxsimEvent.java","method_name":"getApproxsimMessage","content":"/**\n     * Accessor for the message.\n     * \n     * @return The message.\n     */\npublic String getApproxsimMessage() {\n        return message;\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"getInitiator","content":"/**\n     * Accessor for the initiator.\n     * \n     * @return The initiator.\n     */\npublic Object getInitiator() {\n        return mInitiator;\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"getArgument","content":"/**\n     * Accessor for the argument.\n     * \n     * @return The argument.\n     */\npublic Object getArgument() {\n        return mArgument;\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"getGeneric","content":"/**\n     * Creates a new Generic event. This type of event may be used when the event type isn't carrying any information.\n     * \n     * @param source The source of the event.\n     * @return The newly created event.\n     */\npublic static ApproxsimEvent getGeneric(Object source) {\n        return new ApproxsimEvent(source, GENERIC);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"isGeneric","content":"/**\n     * Checks if this is a Generic event.\n     * \n     * @return true if this is an Generic event, false otherwise.\n     */\npublic boolean isGeneric() {\n        return GENERIC.equals(message);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"getObjectAdded","content":"/**\n     * Creates a new ObjectAdded event. This type of event is triggered by a ApproxsimObject when a child is added.\n     * \n     * @param source The source of the event, i.e. the ApproxsimObject to which the child was added.\n     * @param added The ApproxsimObject that was added.\n     * @param initiator The initiator of the event.\n     * @return The newly created event.\n     */\npublic static ApproxsimEvent getObjectAdded(Object source,\n            ApproxsimObject added, Object initiator) {\n        return new ApproxsimEvent(source, OBJECTADDED, initiator, added);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"isObjectAdded","content":"/**\n     * Checks if this is an ObjectAdded event.\n     * \n     * @return true if this is an ObjectAdded event, false otherwise.\n     */\npublic boolean isObjectAdded() {\n        return OBJECTADDED.equals(message);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"isObjectCreated","content":"/**\n     * Checks if this is an ObjectCreated event.\n     * \n     * @return true if this is an ObjectCreated event, false otherwise.\n     */\npublic boolean isObjectCreated() {\n        return OBJECTCREATED.equals(message);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"getRemoved","content":"/**\n     * Creates a new ObjectRemoved event. This type of event is triggered by a ApproxsimObject when it is deleted.\n     * \n     * @param source The source of the event, i.e. the ApproxsimObject that was removed.\n     * @param initiator The initiator of the event.\n     * @return The newly created event.\n     */\npublic static ApproxsimEvent getRemoved(Object source, Object initiator) {\n        return new ApproxsimEvent(source, REMOVED, initiator, null);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"isRemoved","content":"/**\n     * Checks if this is an ObjectRemoved event.\n     * \n     * @return true if this is an ObjectRemoved event, false otherwise.\n     */\npublic boolean isRemoved() {\n        return REMOVED.equals(message);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"getReplaced","content":"/**\n     * Creates a new replaced event. This type of event is triggered by a ApproxsimObject when it is replaced by another object.\n     * \n     * @param source The source of the event e.g. the object that was replaced.\n     * @param initiator The initiator of the event.\n     * @param newObject The object that has replaced the old object.\n     * @return The newly created event.\n     */\npublic static ApproxsimEvent getReplaced(Object source, Object initiator,\n            ApproxsimObject newObject) {\n        return new ApproxsimEvent(source, REPLACED, initiator, newObject);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"isReplaced","content":"/**\n     * Checks if this is a Replaced event.\n     * \n     * @return true if this is a Replaced event, false otherwise.\n     */\npublic boolean isReplaced() {\n        return REPLACED.equals(message);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"getChildChanged","content":"/**\n     * Creates a new ChildChanged event. This type of event is triggered by a ApproxsimComplex descendant when one of its children has\n     * changed.\n     * \n     * @param source The source of the event, i.e. the ApproxsimComplex descendant which child has changed.\n     * @param initiator The initiator of the event.\n     * @param changed The child that has changed.\n     * @return The newly created event.\n     */\npublic static ApproxsimEvent getChildChanged(Object source,\n            Object initiator, ApproxsimObject changed) {\n        return new ApproxsimEvent(source, CHILDCHANGED, initiator, changed);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"isChildChanged","content":"/**\n     * Checks if this is a ChildChanged event.\n     * \n     * @return true if this is a ChildChanged event, false otherwise.\n     */\npublic boolean isChildChanged() {\n        return CHILDCHANGED.equals(message);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"getSubscriptionHandled","content":"/**\n     * Creates a new SubscriptionHandled event. This type of event is triggered by the Client when the XMLHandler has handled all data that\n     * arrived from the server for a certain timestep.\n     * \n     * @param source The source of the event, i.e. the Client.\n     * @param time The simulation time for which the handled data is valid.\n     * @return The newly created event.\n     */\npublic static ApproxsimEvent getSubscriptionHandled(Object source,\n            Timestamp time) {\n        return new ApproxsimEvent(source, SUBSCRIPTIONHANDLED, null, time);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"isSubscriptionHandled","content":"/**\n     * Checks if this is a SubscriptionHandled event.\n     * \n     * @return true if this is a SubscriptionHandled event, false otherwise.\n     */\npublic boolean isSubscriptionHandled() {\n        return SUBSCRIPTIONHANDLED.equals(message);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"getValueChanged","content":"/**\n     * Creates a new ValueChanged event. This type of event is triggered by a ApproxsimSimple descendant when its value changes.\n     * \n     * @param source The source of the event, i.e. the ApproxsimObject that has changed.\n     * @param initiator The initiator of the event.\n     * @return The newly created event.\n     */\npublic static ApproxsimEvent getValueChanged(Object source, Object initiator) {\n        return new ApproxsimEvent(source, VALUECHANGED, initiator, null);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"isValueChanged","content":"/**\n     * Checks if this is a ValueChanged event.\n     * \n     * @return true if this is a ValueChanged event, false otherwise.\n     */\npublic boolean isValueChanged() {\n        return VALUECHANGED.equals(message);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"getSelected","content":"/**\n     * Creates a new Selected event. This type of event is triggered when a ApproxsimObject is selected. Currently, selection of objects may\n     * only be performed through the treeview.\n     * \n     * @param source The source of the event, i.e. the ApproxsimObject that was selected.\n     * @return The newly created event.\n     */\npublic static ApproxsimEvent getSelected(Object source) {\n        return new ApproxsimEvent(source, SELECTED);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"isSelected","content":"/**\n     * Checks if this is a Selected event.\n     * \n     * @return true if this is a Selected event, false otherwise.\n     */\npublic boolean isSelected() {\n        return SELECTED.equals(message);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"getUnselected","content":"/**\n     * Creates a new Unselected event. This type of event is triggered when a ApproxsimObject is unselected. Currently, unselection of\n     * objects may only be performed through the treeview.\n     * \n     * @param source The source of the event, i.e. the ApproxsimObject that was unselected.\n     * @return The newly created event.\n     */\npublic static ApproxsimEvent getUnselected(Object source) {\n        return new ApproxsimEvent(source, UNSELECTED);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"isUnselected","content":"/**\n     * Checks if this is a Unselected event.\n     * \n     * @return true if this is a Unselected event, false otherwise.\n     */\npublic boolean isUnselected() {\n        return UNSELECTED.equals(message);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"getRegionUpdated","content":"/**\n     * Creates a RegionUpdated event. This event is triggered when the actual region showed in the map is updated. This happens when a new\n     * Shape is added to/ removed from the region.\n     * \n     * @param source the source of the event i.e., where the event is triggered.\n     */\npublic static ApproxsimEvent getRegionUpdated(Object source) {\n        return new ApproxsimEvent(source, REGIONUPDATED);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"isRegionUpdated","content":"/**\n     * Checks if this is a RegionUpdated event.\n     * \n     * @return true if this is a RegionUpdated event, false otherwise.\n     */\npublic boolean isRegionUpdated() {\n        return REGIONUPDATED.equals(message);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"getGridUpdated","content":"/**\n     * Creates a GridUpdated event. This event is triggered when the grid is updated with new values.\n     * \n     * @param source the source of the event i.e., where the event is triggered.\n     */\npublic static ApproxsimEvent getGridUpdated(Object source) {\n        return new ApproxsimEvent(source, GRIDUPDATED);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"isGridUpdated","content":"/**\n     * Checks if this is a GridUpdated event.\n     * \n     * @return true if this is a GridUpdated event, false otherwise.\n     */\npublic boolean isGridUpdated() {\n        return GRIDUPDATED.equals(message);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"getGraticulesUpdated","content":"/**\n     * Creates a GraticulesUpdated event. This event is triggered when the graticules are updated.\n     * \n     * @param source the source of the event i.e., where the event is triggered.\n     */\npublic static ApproxsimEvent getGraticulesUpdated(Object source) {\n        return new ApproxsimEvent(source, GRATICULESUPDATED);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"areGraticulesUpdated","content":"/**\n     * Checks if this is a GraticulesUpdated event.\n     * \n     * @return true if this is a GraticulesUpdated event, false otherwise.\n     */\npublic boolean areGraticulesUpdated() {\n        return GRATICULESUPDATED.equals(message);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"getCoordSystemChanged","content":"/**\n     * Creates a CoordSystemChanged event. This event is triggered when the coordinate representation visible to the user is changed.\n     * \n     * @param source the source of the event i.e., where the event is triggered.\n     */\npublic static ApproxsimEvent getCoordSystemChanged(Object source) {\n        return new ApproxsimEvent(source, COORDSYSTEMCHANGED);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"isCoordSystemChanged","content":"/**\n     * Checks if this is a CoordSystemChanged event.\n     * \n     * @return true if this is a CoordSystemChangedUpdated event, false otherwise.\n     */\npublic boolean isCoordSystemChanged() {\n        return COORDSYSTEMCHANGED.equals(message);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"getIdentifierChanged","content":"/**\n     * Creates a new identifierChanged event. This type of event is triggered by a ApproxsimObject when its identifier changes.\n     * \n     * @param source The source of the event e.g. the object which identifier was changed. Notice that by the time this event is triggered\n     *            the identifier has already changed.\n     * @param oldIdentifier The old identifier.\n     * @return The newly created event.\n     */\npublic static ApproxsimEvent getIdentifierChanged(Object source,\n            String oldIdentifier) {\n        return new ApproxsimEvent(source, IDENTIFIERCHANGED, null, oldIdentifier);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"isIdentifierChanged","content":"/**\n     * Checks if this is a Replaced event.\n     * \n     * @return true if this is a Replaced event, false otherwise.\n     */\npublic boolean isIdentifierChanged() {\n        return IDENTIFIERCHANGED.equals(message);\n    }"} {"path":"downloaded/ApproxsimEvent.java","method_name":"toString","content":"/**\n     * The String representation of the object.\n     * \n     * @return the message of the event.\n     */\npublic String toString() {\n        return message;\n    }"} {"path":"downloaded/StructuredTextFormat.java","method_name":"reader","content":"/**\n   * @param data the structured data as {@link String}.\n   * @return the {@link StructuredReader}.\n   */\ndefault StructuredReader reader(String data) {\n\n    return reader(new StringReader(data));\n  }"} {"path":"downloaded/StructuredTextFormat.java","method_name":"reader","content":"/**\n   * @param data the structured data as {@link String}.\n   * @return the {@link StructuredReader}.\n   */\n@Override\n  default StructuredReader reader(InputStream in) {\n\n    return reader(new InputStreamReader(in, StandardCharsets.UTF_8));\n  }"} {"path":"downloaded/StructuredTextFormat.java","method_name":"reader","content":"/**\n   * @param data the structured data as {@link String}.\n   * @return the {@link StructuredReader}.\n   */\n@Override\n  default StructuredReader reader(Object data) {\n\n    if (data instanceof CharSequence) {\n      return reader(data.toString());\n    }\n    return StructuredFormat.super.reader(data);\n  }"} {"path":"downloaded/StructuredTextFormat.java","method_name":"writer","content":"/**\n   * @param writer the {@link Appendable} ({@link java.io.Writer} or {@link StringBuilder}) where to write the\n   *        structured data to.\n   * @return the wrapped {@link StructuredWriter}.\n   */\n@Override\n  default StructuredWriter writer(OutputStream out) {\n\n    return writer(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n  }"} {"path":"downloaded/StructuredTextFormat.java","method_name":"write","content":"/**\n   * @param object the {@link MarshallableObject} to serialize.\n   * @return the serialized data as {@link String}.\n   */\ndefault String write(MarshallableObject object) {\n\n    if (object == null) {\n      return null;\n    }\n    StringBuilder writer = new StringBuilder(512);\n    StructuredWriter structuredWriter = writer(writer);\n    object.write(structuredWriter);\n    structuredWriter.close();\n    return writer.toString();\n  }"} {"path":"downloaded/StructuredTextFormat.java","method_name":"isBinary","content":"/**\n   * @param object the {@link MarshallableObject} to serialize.\n   * @return the serialized data as {@link String}.\n   */\n@Override\n  default boolean isBinary() {\n\n    return false;\n  }"} {"path":"downloaded/Route.java","method_name":"getPoints","content":"/**\n     * @return An immutable list with he route between two points.\n     */\npublic List<Point> getPoints() {\n        return Collections.unmodifiableList(route);\n    }"} {"path":"downloaded/Route.java","method_name":"distance","content":"/**\n     * @return Return the distance travelled with this route.\n     */\npublic int distance() {\n        // Only changing is called distance.\n        return route.size() - 1;\n    }"} {"path":"downloaded/Route.java","method_name":"possibleNext","content":"/**\n     * @return All possible next points of this route.\n     */\npublic Point[] possibleNext() {\n        Point last_point = route.get(route.size() - 1);\n        return new Point[]{\n                new Point(last_point.x + 1, last_point.y),\n                new Point(last_point.x, last_point.y + 1),\n                new Point(last_point.x - 1, last_point.y),\n                new Point(last_point.x, last_point.y - 1),\n        };\n    }"} {"path":"downloaded/Route.java","method_name":"clone","content":"/**\n     * @return All possible next points of this route.\n     */\n@Override\n    public Route clone() {\n        try {\n            Route ret = (Route) super.clone();\n            ret.route = new ArrayList<>(route);\n            return ret;\n        } catch (CloneNotSupportedException e) {\n            throw new RuntimeException();\n        }\n    }"} {"path":"downloaded/AsyncTaskManage.java","method_name":"ancel() {\n","content":"/**\n         * @return the isCancel\n         */\n \nblic boolean isCancel() {\n            return isCancel;\n        }\n\n     "} {"path":"downloaded/AsyncTaskManage.java","method_name":"getThreadId","content":"/**\n         * @return the isCancel\n         */\n \nublic long getThreadId() {\n            return mThreadId;\n        }"} {"path":"downloaded/AsyncTaskManage.java","method_name":"nt getHa","content":" /**\n         * @return the hashCode\n       \n    public int getHashCode() {\n            return mHashCode;\n"} {"path":"downloaded/AsyncTaskManage.java","method_name":" /**","content":"\n        /**\n         * @param hashCode\n         *            the hashCode to \nhCode;\n        }\n\n        /**\n         * @return the state\n         */\n        private int getState() {\n            return mState;\n        }\n\n        /**\n         * @param state\n         *            the state to set\n         */\n        private void setState(int state"} {"path":"downloaded/GlobalUtils.java","method_name":"getCurrentDate","content":"/**\n\t * Method used to get the current date, in SQL format\n\t * \n\t * @return an SQL Date\n\t */\npublic static Date getCurrentDate() {\n\t\tCalendar calendar = Calendar.getInstance();\n\t\tjava.util.Date currentDate = calendar.getTime();\n\t\tDate date = new Date(currentDate.getTime());\n\t\treturn date;\n\t}"} {"path":"downloaded/GlobalUtils.java","method_name":"toByteArray","content":"/**\n\t * Used to convert an InputStream to an array of bytes (used in our case to recover image from SQL Blob)\n\t * @param The inputstream to be converted\n\t * @return the bytearray, after conversion\n\t * @throws IOException\n\t */\npublic static byte[] toByteArray(InputStream is) throws IOException {\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tint reads = is.read();\n\n\t\twhile (reads != -1) {\n\t\t\tbaos.write(reads);\n\t\t\treads = is.read();\n\t\t}\n\n\t\treturn baos.toByteArray();\n\t}"} {"path":"downloaded/BwcVersions.java","method_name":"unreleasedInfo","content":"/**\n     * Returns info about the unreleased version, or {@code null} if the version is released.\n     */\npublic UnreleasedVersionInfo unreleasedInfo(Version version) {\n        return unreleased.get(version);\n    }"} {"path":"downloaded/BwcVersions.java","method_name":"getBranchFor","content":"/**\n     * Returns info about the unreleased version, or {@code null} if the version is released.\n     */\nprivate String getBranchFor(Version version) {\n        if (version.equals(currentVersion.elasticsearch)) {\n            // Just assume the current branch is 'main'. It's actually not important, we never check out the current branch.\n            return \"main\";\n        } else {\n            return version.getMajor() + \".\" + version.getMinor();\n        }\n    }"} {"path":"downloaded/BwcVersions.java","method_name":"computeUnreleased","content":"/**\n     * Returns info about the unreleased version, or {@code null} if the version is released.\n     */\nprivate Map<Version, UnreleasedVersionInfo> computeUnreleased() {\n        Set<VersionPair> unreleased = new TreeSet<>();\n        // The current version is being worked, is always unreleased\n        unreleased.add(currentVersion);\n        // Recurse for all unreleased versions starting from the current version\n        addUnreleased(unreleased, currentVersion, 0);\n\n        // Grab the latest version from the previous major if necessary as well, this is going to be a maintenance release\n        VersionPair maintenance = versions.stream()\n            .filter(v -> v.elasticsearch.getMajor() == currentVersion.elasticsearch.getMajor() - 1)\n            .sorted(Comparator.reverseOrder())\n            .findFirst()\n            .orElseThrow();\n        // This is considered the maintenance release only if we haven't yet encountered it\n        boolean hasMaintenanceRelease = unreleased.add(maintenance);\n\n        List<VersionPair> unreleasedList = unreleased.stream().sorted(Comparator.reverseOrder()).toList();\n        Map<Version, UnreleasedVersionInfo> result = new TreeMap<>();\n        for (int i = 0; i < unreleasedList.size(); i++) {\n            Version esVersion = unreleasedList.get(i).elasticsearch;\n            // This is either a new minor or staged release\n            if (currentVersion.elasticsearch.equals(esVersion)) {\n                result.put(esVersion, new UnreleasedVersionInfo(esVersion, getBranchFor(esVersion), \":distribution\"));\n            } else if (esVersion.getRevision() == 0) {\n                // If there are two upcoming unreleased minors then this one is the new minor\n                if (unreleasedList.get(i + 1).elasticsearch.getRevision() == 0) {\n                    result.put(esVersion, new UnreleasedVersionInfo(esVersion, getBranchFor(esVersion), \":distribution:bwc:minor\"));\n                } else {\n                    result.put(esVersion, new UnreleasedVersionInfo(esVersion, getBranchFor(esVersion), \":distribution:bwc:staged\"));\n                }\n            } else {\n                // If this is the oldest unreleased version and we have a maintenance release\n                if (i == unreleasedList.size() - 1 && hasMaintenanceRelease) {\n                    result.put(esVersion, new UnreleasedVersionInfo(esVersion, getBranchFor(esVersion), \":distribution:bwc:maintenance\"));\n                } else {\n                    result.put(esVersion, new UnreleasedVersionInfo(esVersion, getBranchFor(esVersion), \":distribution:bwc:bugfix\"));\n                }\n            }\n        }\n\n        return Collections.unmodifiableMap(result);\n    }"} {"path":"downloaded/BwcVersions.java","method_name":"getUnreleased","content":"/**\n     * Returns info about the unreleased version, or {@code null} if the version is released.\n     */\npublic List<Version> getUnreleased() {\n        return unreleased.keySet().stream().sorted().toList();\n    }"} {"path":"downloaded/BwcVersions.java","method_name":"getReleased","content":"/**\n     * Returns info about the unreleased version, or {@code null} if the version is released.\n     */\nprivate List<Version> getReleased() {\n        return versions.stream().map(v -> v.elasticsearch).filter(v -> unreleased.containsKey(v) == false).toList();\n    }"} {"path":"downloaded/BwcVersions.java","method_name":"getIndexCompatible","content":"/**\n     * Return versions of Elasticsearch which are index compatible with the current version, and also work on the local machine.\n     */\npublic List<Version> getIndexCompatible() {\n        return filterSupportedVersions(getAllIndexCompatible());\n    }"} {"path":"downloaded/BwcVersions.java","method_name":"getAllIndexCompatible","content":"/**\n     * Return all versions of Elasticsearch which are index compatible with the current version.\n     */\npublic List<Version> getAllIndexCompatible() {\n        return versions.stream()\n            .filter(v -> v.lucene.getMajor() >= (currentVersion.lucene.getMajor() - 1))\n            .map(v -> v.elasticsearch)\n            .toList();\n    }"} {"path":"downloaded/BwcVersions.java","method_name":"getWireCompatible","content":"/**\n     * Return all versions of Elasticsearch which are index compatible with the current version.\n     */\npublic List<Version> getWireCompatible() {\n        return filterSupportedVersions(\n            versions.stream().map(v -> v.elasticsearch).filter(v -> v.compareTo(MINIMUM_WIRE_COMPATIBLE_VERSION) >= 0).toList()\n        );\n    }"} {"path":"downloaded/BwcVersions.java","method_name":"filterSupportedVersions","content":"/**\n     * Return all versions of Elasticsearch which are index compatible with the current version.\n     */\nprivate List<Version> filterSupportedVersions(List<Version> wireCompat) {\n        Predicate<Version> supported = v -> true;\n        if (Architecture.current() == Architecture.AARCH64) {\n            final String version;\n            if (ElasticsearchDistribution.CURRENT_PLATFORM.equals(ElasticsearchDistribution.Platform.DARWIN)) {\n                version = \"7.16.0\";\n            } else {\n                version = \"7.12.0\"; // linux shipped earlier for aarch64\n            }\n            supported = v -> v.onOrAfter(version);\n        }\n        return wireCompat.stream().filter(supported).collect(Collectors.toList());\n    }"} {"path":"downloaded/BwcVersions.java","method_name":"getUnreleasedIndexCompatible","content":"/**\n     * Return all versions of Elasticsearch which are index compatible with the current version.\n     */\npublic List<Version> getUnreleasedIndexCompatible() {\n        List<Version> unreleasedIndexCompatible = new ArrayList<>(getIndexCompatible());\n        unreleasedIndexCompatible.retainAll(getUnreleased());\n        return unmodifiableList(unreleasedIndexCompatible);\n    }"} {"path":"downloaded/BwcVersions.java","method_name":"getUnreleasedWireCompatible","content":"/**\n     * Return all versions of Elasticsearch which are index compatible with the current version.\n     */\npublic List<Version> getUnreleasedWireCompatible() {\n        List<Version> unreleasedWireCompatible = new ArrayList<>(getWireCompatible());\n        unreleasedWireCompatible.retainAll(getUnreleased());\n        return unmodifiableList(unreleasedWireCompatible);\n    }"} {"path":"downloaded/BwcVersions.java","method_name":"getMinimumWireCompatibleVersion","content":"/**\n     * Return all versions of Elasticsearch which are index compatible with the current version.\n     */\npublic Version getMinimumWireCompatibleVersion() {\n        return MINIMUM_WIRE_COMPATIBLE_VERSION;\n    }"} {"path":"downloaded/BwcVersions.java","method_name":"isMlCompatible","content":"/**\n     * Determine whether the given version of Elasticsearch is compatible with ML features on the host system.\n     *\n     * @see <a href=\"https://github.com/elastic/elasticsearch/issues/86877\">https://github.com/elastic/elasticsearch/issues/86877</a>\n     */\npublic static boolean isMlCompatible(Version version) {\n        Version glibcVersion = Optional.ofNullable(System.getenv(GLIBC_VERSION_ENV_VAR))\n            .map(v -> Version.fromString(v, Version.Mode.RELAXED))\n            .orElse(null);\n\n        // glibc version 2.34 introduced incompatibilities in ML syscall filters that were fixed in 7.17.5+ and 8.2.2+\n        if (glibcVersion != null && glibcVersion.onOrAfter(Version.fromString(\"2.34\", Version.Mode.RELAXED))) {\n            if (version.before(Version.fromString(\"7.17.5\"))) {\n                return false;\n            } else if (version.getMajor() > 7 && version.before(Version.fromString(\"8.2.2\"))) {\n                return false;\n            }\n        }\n\n        return true;\n    }"} {"path":"downloaded/PTypeProduct.java","method_name":"blic ","content":"    /**\n     * 设备ID\n     *\n     * @mbg.generated 2020-02-11 16:54:16\n = 1L;\n\n    public String getId() {\n        retu"} {"path":"downloaded/PTypeProduct.java","method_name":"blic Str","content":"    /**\n     * 设备ID\n     *\n     * @mbg.generated 2020-02-11 16:54:16\n\n    }\n\n    public String getProId() {\n        return "} {"path":"downloaded/PTypeProduct.java","method_name":"blic Stri","content":"    /**\n     * 设备ID\n     *\n     * @mbg.generated 2020-02-11 16:54:16\n\n    }\n\n    public String getTypeId() {\n        return t"} {"path":"downloaded/StartBurpProxyMojo.java","method_name":"getBurpExtenderToRun","content":"/**\n     * Burp proxy shutdown port.\n     */\n@Override\n    protected String getBurpExtenderToRun() {\n        return \"headless-burp-proxy\";\n    }"} {"path":"downloaded/StartBurpProxyMojo.java","method_name":"shouldWaitForProcessToComplete","content":"/**\n     * Burp proxy shutdown port.\n     */\n@Override\n    protected boolean shouldWaitForProcessToComplete() {\n        return false;\n    }"} {"path":"downloaded/StartBurpProxyMojo.java","method_name":"createBurpExtensionCommandLineArguments","content":"/**\n     * Burp proxy shutdown port.\n     */\n@Override\n    protected List<String> createBurpExtensionCommandLineArguments() {\n        List<String> command = Lists.newArrayList();\n\n        command.add(\"--proxy-port\");\n        command.add(String.valueOf(proxyPort));\n\n        command.add(\"--shutdown-port\");\n        command.add(String.valueOf(shutdownPort));\n\n        return command;\n    }"} {"path":"downloaded/TiDeployData.java","method_name":"isDebuggerEnabled","content":"/**\n\t * @return Whether or not the debug server is enabled\n\t */\npublic boolean isDebuggerEnabled()\n\t{\n\t\tif (deployData == null) return false;\n\t\treturn deployData.optBoolean(DEBUGGER_ENABLED, false);\n\t}"} {"path":"downloaded/TiDeployData.java","method_name":"getDebuggerPort","content":"/**\n\t * @return The debug server port, or -1\n\t */\npublic int getDebuggerPort()\n\t{\n\t\tif (deployData == null) return -1;\n\t\treturn deployData.optInt(DEBUGGER_PORT, -1);\n\t}"} {"path":"downloaded/TiDeployData.java","method_name":"getFastDevPort","content":"/**\n\t * @return The \"fastdev\" http server port, or -1\n\t */\npublic int getFastDevPort()\n\t{\n\t\tif (deployData == null) return -1;\n\t\treturn deployData.optInt(FASTDEV_PORT, -1);\n\t}"} {"path":"downloaded/TiDeployData.java","method_name":"getFastDevListen","content":"/**\n\t * @return Whether or not Fastdev mode should listen for a connection (default false)\n\t *  This is useful for situations where adb forward or other external methods are necessary\n\t */\npublic boolean getFastDevListen()\n\t{\n\t\tif (deployData == null) return false;\n\t\treturn deployData.optBoolean(FASTDEV_LISTEN, false);\n\t}"} {"path":"downloaded/DaoManager.java","method_name":"ckTrace();\n      ","content":"   /**\n/\n            e.printStackTrace();\n        }\n    }\n\n    public SQLiteDatabase getS"} {"path":"downloaded/DaoManager.java","method_name":"   return sq","content":"   /**\n/\natabase() {\n        return sqLiteDatabase;\n    }\n\n    public DaoMa"} {"path":"downloaded/DaoManager.java","method_name":"      return ","content":"   /**\n/\netDaoMaster() {\n        return mDaoMaster;\n    }\n\n    public DaoSessi"} {"path":"downloaded/OBJModelDefinition.java","method_name":"createMesh","content":"/** Generates a JUMIMesh from this OBJModelDefinition\n     * \n     * @param vertexPool All the defined vertices for this OBJ\n     * @param normalPool All the defined normals for this OBJ\n     * @param uvPool All the defined UVs for this OBJ\n     * @return \n     */\npublic JUMIMesh createMesh(ArrayList<Vector3> vertexPool, ArrayList<Vector3> normalPool, ArrayList<Vector2> uvPool) {\n        JUMIMesh result = new JUMIMesh(name);\n\n        // We're going to take the total vertices/normals/UVs and divide them up among each JUMIMesh in the scene\n        ArrayList<Vector3> modelVertices = new ArrayList();\n        ArrayList<Vector3> modelNormals = new ArrayList();\n        ArrayList<Vector2> modelUVs = new ArrayList();\n\n        // First create the set of vertices, UVs and normals relevant to this model. Do this using the unique indices associated with it\n        for (String a : uniqueIndexDefinitions) {\n            String[] indexDef = a.split(\"/\");\n            int vindex = Integer.valueOf(indexDef[0]);\n\n            // Retrieve from the wider vertex pool, the vertices for this model. -1 as OBJ goes from 1...n\n            modelVertices.add(vertexPool.get(vindex - 1));\n\n            // If UVs are defined, retrieve from the wider UV pool the UVs for this model. -1 as OBJ goes from 1...n\n            if (indexDef.length > 1 && !indexDef[1].equals(\"\")) {\n                int uvIndex = Integer.valueOf(indexDef[1]);\n                modelUVs.add(uvPool.get(uvIndex - 1));\n            }\n\n            // If normals are defined, retrieve from the wider normal pool the normals for this model. -1 as OBJ goes from 1...n\n            if (indexDef.length > 2 && !indexDef[2].equals(\"\")) {\n                int nIndex = Integer.valueOf(indexDef[2]);\n                modelNormals.add(normalPool.get(nIndex - 1));\n            }\n        }\n\n        // Create the arrays ready to hold the raw float data\n        result.vertices = new float[modelVertices.size() * 3];\n        result.normals = new float[modelNormals.size() * 3];\n        result.uvs = new float[modelUVs.size() * 2];\n        result.indices = new int[allIndexDefinitions.size()];\n\n        int arrayCounter = 0;\n\n        // Create a hashmap with each unique face mapped against the order in which it appears. Lookup is MUCH faster than ArrayList for large models\n        HashMap<String, Integer> uniqueIndices = new HashMap();\n\n        for (String a : uniqueIndexDefinitions) {\n            uniqueIndices.put(a, arrayCounter++);\n        }\n\n        arrayCounter = 0;\n\n        // For every index defined, retrieve the index within the hashmap to get our final index!\n        for (String a : allIndexDefinitions) {\n            result.indices[arrayCounter++] = uniqueIndices.get(a);\n        }\n\n        arrayCounter = 0;\n\n        // Now populate the raw float data for vertices, UVs and normals (if applicable)\n        for (Vector3 a : modelVertices) {\n            result.vertices[arrayCounter++] = a.x;\n            result.vertices[arrayCounter++] = a.y;\n            result.vertices[arrayCounter++] = a.z;\n        }\n\n        arrayCounter = 0;\n\n        for (Vector3 a : modelNormals) {\n            result.normals[arrayCounter++] = a.x;\n            result.normals[arrayCounter++] = a.y;\n            result.normals[arrayCounter++] = a.z;\n        }\n\n        arrayCounter = 0;\n\n        for (Vector2 a : modelUVs) {\n            result.uvs[arrayCounter++] = a.x;\n            result.uvs[arrayCounter++] = a.y;\n        }\n       \n        // Now create all the materials for the mesh\n        result.materials = new JUMIMaterial[materialDefinitions.size()];\n\n        int materialCounter = 0;\n\n        // TODO: What happens if a .obj references a material by its diffuse map rather than name? (see Ax.obj)\n        for (OBJMaterialDefinition a : materialDefinitions) {\n            if (a == null) {\n                continue;\n            }\n            JUMIMaterial newMat = new JUMIMaterial();\n            newMat.name = a.name;\n            newMat.ambientColor = a.ambientColour;\n            newMat.diffuseColor = a.diffuseColour;\n            newMat.specularColor = a.specularColour;\n            newMat.specularFactor = a.specularWeight;\n            newMat.opacity = a.alpha;\n\n            // If a diffuse/specular/normal map is defined, make sure it's included in the JUMIMaterial!\n            if (!a.diffuseMap.equals(\"\")) {\n                JUMITexture newTexture = new JUMITexture();\n                newTexture.fileName = a.diffuseMap;\n                newTexture.name = a.diffuseMap;\n                newMat.diffuseTexture = newTexture;\n            }\n\n            if (!a.specularMap.equals(\"\")) {\n                JUMITexture newTexture = new JUMITexture();\n                newTexture.fileName = a.specularMap;\n                newTexture.name = a.specularMap;\n                newMat.specularTexture = newTexture;\n            }\n            \n            if (!a.bumpMap.equals(\"\")) {\n                JUMITexture newTexture = new JUMITexture();\n                newTexture.fileName = a.bumpMap;\n                newTexture.name = a.bumpMap;\n                newMat.normalTexture = newTexture;\n            }\n\n            result.materials[materialCounter++] = newMat;\n\n        }\n        \n        result.faceType = FaceType.TRIANGLES;\n\n        return result;\n    }"} {"path":"downloaded/UserInfoEntity.java","method_name":"Strin","content":"\n    /**\n     * 企业的�\n;\n    private String reward_amount;\n    private "} {"path":"downloaded/UserInfoEntity.java","method_name":"ive_gain;\n  ","content":"\n    /**\n     * 企业的�\ndouble cumulative_gain;\n    private boolean enable_unionpay;\n\n"} {"path":"downloaded/UserInfoEntity.java","method_name":"   }\n\n    pu","content":"\n    /**\n     * 企业的�\nhis.id = id;\n    }\n\n    public String getUser_name() {\n       "} {"path":"downloaded/UserInfoEntity.java","method_name":"   }\n\n    ","content":"\n    /**\n     * 企业的�\n= user_name;\n    }\n\n    public String getNick_name() {\n   "} {"path":"downloaded/UserInfoEntity.java","method_name":"nick_name;\n","content":"\n    /**\n     * 企业的�\ns.nick_name = nick_name;\n    }\n\n    public String getImg_url"} {"path":"downloaded/UserInfoEntity.java","method_name":"url;\n    ","content":"\n    /**\n     * 企业的�\nimg_url = img_url;\n    }\n\n    public String getTelphone("} {"path":"downloaded/UserInfoEntity.java","method_name":"hone = te","content":"\n    /**\n     * 企业的�\n     this.telphone = telphone;\n    }\n\n    public String "} {"path":"downloaded/UserInfoEntity.java","method_name":"mobile =","content":"\n    /**\n     * 企业的�\n\n        this.mobile = mobile;\n    }\n\n    public Strin"} {"path":"downloaded/UserInfoEntity.java","method_name":" this.status = stat","content":"\n    /**\n     * 企业的�\ntus) {\n        this.status = status;\n    }\n\n    public String getToken() {\n "} {"path":"downloaded/UserInfoEntity.java","method_name":"e() {\n        return","content":"\n    /**\n     * 企业的�\nush_device_type() {\n        return push_device_type;\n    }\n\n    public void se"} {"path":"downloaded/UserInfoEntity.java","method_name":"sh_device_t","content":"\n    /**\n     * 企业的�\nice_token = push_device_token;\n    }\n\n    public String getW"} {"path":"downloaded/UserInfoEntity.java","method_name":"xin;\n    ","content":"\n    /**\n     * 企业的�\ns.weixin = weixin;\n    }\n\n    public String getZhifubao("} {"path":"downloaded/UserInfoEntity.java","method_name":"ubao = ","content":"\n    /**\n     * 企业的�\n     this.zhifubao = zhifubao;\n    }\n\n    public Str"} {"path":"downloaded/UserInfoEntity.java","method_name":"       this.ID_num","content":"\n    /**\n     * 企业的�\nng ID_num) {\n        this.ID_num = ID_num;\n    }\n\n    public String getTyp"} {"path":"downloaded/UserInfoEntity.java","method_name":"mg_url() {\n  ","content":"\n    /**\n     * 企业的�\ng getLicence_img_url() {\n        return licence_img_url;\n    }\n\n"} {"path":"downloaded/UserInfoEntity.java","method_name":"    public Stri","content":"\n    /**\n     * 企业的�\ng_url;\n    }\n\n    public String getID_img_url() {\n        return ID_"} {"path":"downloaded/UserInfoEntity.java","method_name":"tring getCompa","content":"\n    /**\n     * 企业的�\n\n\n    public String getCompany_name() {\n        return company_nam"} {"path":"downloaded/UserInfoEntity.java","method_name":"blic String getCom","content":"\n    /**\n     * 企业的�\n\n    }\n\n    public String getCompany_tel() {\n        return company_tel;\n "} {"path":"downloaded/UserInfoEntity.java","method_name":"ontact() {\n      ","content":"\n    /**\n     * 企业的�\ng getCompany_contact() {\n        return company_contact;\n    }\n\n    publ"} {"path":"downloaded/UserInfoEntity.java","method_name":"tact_mobil","content":"\n    /**\n     * 企业的�\n String getContact_mobile() {\n        return contact_mobil"} {"path":"downloaded/UserInfoEntity.java","method_name":"ct_mobi","content":"\n    /**\n     * 企业的�\nmobile = contact_mobile;\n    }\n\n    public String ge"} {"path":"downloaded/UserInfoEntity.java","method_name":"     this.a","content":"\n    /**\n     * 企业的�\naddress) {\n        this.address = address;\n    }\n\n    public"} {"path":"downloaded/UserInfoEntity.java","method_name":"s_v;\n    ","content":"\n    /**\n     * 企业的�\n this.is_v = is_v;\n    }\n\n    public String getV_reason("} {"path":"downloaded/UserInfoEntity.java","method_name":"ason = v_rea","content":"\n    /**\n     * 企业的�\n     this.v_reason = v_reason;\n    }\n\n    public String getRem"} {"path":"downloaded/UserInfoEntity.java","method_name":"   }\n\n    ","content":"\n    /**\n     * 企业的�\nrk = remark;\n    }\n\n    public String getBank_name() {\n   "} {"path":"downloaded/UserInfoEntity.java","method_name":"bank_name","content":"\n    /**\n     * 企业的�\ns.bank_name = bank_name;\n    }\n\n    public String getBan"} {"path":"downloaded/UserInfoEntity.java","method_name":"nk_no =","content":"\n    /**\n     * 企业的�\n       this.bank_no = bank_no;\n    }\n\n    public Str"} {"path":"downloaded/UserInfoEntity.java","method_name":"       this.tax_no","content":"\n    /**\n     * 企业的�\nng tax_no) {\n        this.tax_no = tax_no;\n    }\n\n    public String getJso"} {"path":"downloaded/UserInfoEntity.java","method_name":"mount() {","content":"\n    /**\n     * 企业的�\ng getHas_send_amount() {\n        return has_send_amount;\n "} {"path":"downloaded/UserInfoEntity.java","method_name":"d_amo","content":"\n    /**\n     * 企业的�\nount = has_send_amount;\n    }\n\n    public boolea"} {"path":"downloaded/UserInfoEntity.java","method_name":"s_pwd)","content":"\n    /**\n     * 企业的�\npwd(boolean has_pwd) {\n        this.has_pwd = has_"} {"path":"downloaded/UserInfoEntity.java","method_name":"String qq) ","content":"\n    /**\n     * 企业的�\nic void setQq(String qq) {\n        this.qq = qq;\n    }\n\n    "} {"path":"downloaded/UserInfoEntity.java","method_name":"sex;\n ","content":"\n    /**\n     * 企业的�\n   this.sex = sex;\n    }\n\n    public String getBir"} {"path":"downloaded/UserInfoEntity.java","method_name":"ing age) {\n     ","content":"\n    /**\n     * 企业的�\noid setAge(String age) {\n        this.age = age;\n    }\n\n    public String getJob() {\n        re"} {"path":"downloaded/UserInfoEntity.java","method_name":"    return Constan","content":"\n    /**\n     * 企业的�\ng_url() {\n        return Constants.IMG_HOST_URL + thumb_img_url;\n    }\n\n  "} {"path":"downloaded/UserInfoEntity.java","method_name":"_code() ","content":"\n    /**\n     * 企业的�\ng getInvitation_code() {\n        return invitation_code;\n "} {"path":"downloaded/UserInfoEntity.java","method_name":"code;\n    }\n","content":"\n    /**\n     * 企业的�\n = invitation_code;\n    }\n\n    public boolean is_proxy() {\n   "} {"path":"downloaded/UserInfoEntity.java","method_name":"   }\n\n    public","content":"\n    /**\n     * 企业的�\n = is_proxy;\n    }\n\n    public String getIs_danbao() {\n        return "} {"path":"downloaded/TeachersController.java","method_name":" Resu","content":"/**\n     * přesměrování na registrační formulář\n     *\n     * @return\n */\n    public Result index() {\n        Form<Teachers> teachersForm = formFactory.form(Teachers.class);\n        return ok(views.html.registerTeachers.render(teachersForm)"} {"path":"downloaded/TeachersController.java","method_name":"publ","content":"/**\n     * přesměrování na registrační formulář\n     *\n     * @return\nn\n     */\n    public Result save() {\n\n        Map<String, String[]> formData = request().body().asFormUrlEncoded();\n\n        long courseId = 0;\n        long employeesId = 0;\n        long val = 0;\n\n        for (String insId : formData.get(\"courses.id\")) {\n            courseId = Long.parseLong(insId);\n        }\n\n        for (String insId : formData.get(\"employees.id\")) {\n            employeesId = Long.parseLong(insId);\n        }\n\n        for (String insId : formData.get(\"scale\")) {\n            val = Long.parseLong(insId);\n        }\n\n        Teachers t=new Teachers(Courses.findById(courseId),Employees.findById(employeesId),(int)val,0.0, 0.0);\n        t.save();\n\n\n        return redirect(routes.Application.i"} {"path":"downloaded/ReportTransformer.java","method_name":" transformReportFromCs","content":" /**\n   * Transforms report in CSV format to {@link StructuredRecord} instance accordingly to given schema.\n   *\n public static List<StructuredRecord> transformReportFromCsv(DoubleClickReportingBatchSourceConfig config)\n    throws IOException, InterruptedException {\n    Long reportId = (config.getReportId() == null) ? ReportHelper.createReport(config) : config.getReportId();\n    File report = ReportHelper.runReport(config, reportId);\n    InputStream reportAsInputStream = ReportHelper.downloadReport(config, report);\n    CSVParser csvParser = CSVParser.parse(reportAsInputStream, Charset.defaultCharset(), CSVFormat.DEFAULT);\n\n    List<StructuredRecord> reportStructure = new ArrayList<>();\n    List<String> reportFields = config.getSchema()\n      .getFields()\n      .stream()\n      .map(Schema.Field::getName)\n      .collect(Collectors.toList());\n\n    for (CSVRecord csvRecord : csvParser) {\n      Iterator<String> reportFieldsIterator = reportFields.iterator();\n      Iterator<String> csvRecordIterator = csvRecord.iterator();\n      StructuredRecord.Builder builder = StructuredRecord.builder(config.getSchema());\n      while (reportFieldsIterator.hasNext() && csvRecordIterator.hasNext()) {\n        builder.set(reportFieldsIterator.next(), csvRecordIterator.next());\n      }\n      reportStructure.add(builder.build());\n    }\n    return reportStructure;\n  "} {"path":"downloaded/Java24TestMethod.java","method_name":"   //用�","content":"/**\n     *\n     * @param i（所要计算的阶乘）\n     * @re\n��\n     */\n    //用递归算阶乘\n    static long factorial(int i){\n        if(i==1)\n            return 1;\n        else\n  "} {"path":"downloaded/RestIndexCorrelationRuleAction.java","method_name":"getName","content":"/**\n     * Default constructor\n     */\n@Override\n    public String getName() {\n        return \"index_correlation_rule_action\";\n    }"} {"path":"downloaded/RestIndexCorrelationRuleAction.java","method_name":"routes","content":"/**\n     * Default constructor\n     */\n@Override\n    public List<Route> routes() {\n        return List.of(\n            new Route(RestRequest.Method.POST, EventsCorrelationPlugin.CORRELATION_RULES_BASE_URI),\n            new Route(\n                RestRequest.Method.PUT,\n                String.format(Locale.ROOT, \"%s/{%s}\", EventsCorrelationPlugin.CORRELATION_RULES_BASE_URI, \"rule_id\")\n            )\n        );\n    }"} {"path":"downloaded/RestIndexCorrelationRuleAction.java","method_name":"prepareRequest","content":"/**\n     * Default constructor\n     */\n@Override\n    protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {\n        log.debug(String.format(Locale.ROOT, \"%s %s\", request.method(), EventsCorrelationPlugin.CORRELATION_RULES_BASE_URI));\n\n        String id = request.param(\"rule_id\", \"\");\n\n        XContentParser xcp = request.contentParser();\n\n        CorrelationRule correlationRule = CorrelationRule.parse(xcp, id, 1L);\n        IndexCorrelationRuleRequest indexCorrelationRuleRequest = new IndexCorrelationRuleRequest(id, correlationRule, request.method());\n        return channel -> client.execute(\n            IndexCorrelationRuleAction.INSTANCE,\n            indexCorrelationRuleRequest,\n            indexCorrelationRuleResponse(channel, request.method())\n        );\n    }"} {"path":"downloaded/RestIndexCorrelationRuleAction.java","method_name":"indexCorrelationRuleResponse","content":"/**\n     * Default constructor\n     */\nprivate RestResponseListener<IndexCorrelationRuleResponse> indexCorrelationRuleResponse(\n        RestChannel channel,\n        RestRequest.Method restMethod\n    ) {\n        return new RestResponseListener<>(channel) {\n            @Override\n            public RestResponse buildResponse(IndexCorrelationRuleResponse response) throws Exception {\n                RestStatus returnStatus = RestStatus.CREATED;\n                if (restMethod == RestRequest.Method.PUT) {\n                    returnStatus = RestStatus.OK;\n                }\n\n                BytesRestResponse restResponse = new BytesRestResponse(\n                    returnStatus,\n                    response.toXContent(channel.newBuilder(), ToXContent.EMPTY_PARAMS)\n                );\n\n                if (restMethod == RestRequest.Method.POST) {\n                    String location = String.format(\n                        Locale.ROOT,\n                        \"%s/%s\",\n                        EventsCorrelationPlugin.CORRELATION_RULES_BASE_URI,\n                        response.getId()\n                    );\n                    restResponse.addHeader(\"Location\", location);\n                }\n\n                return restResponse;\n            }\n        };\n    }"} {"path":"downloaded/EpaDataAgent.java","method_name":"getData","content":"/**\n\t * @param args\n\t */\npublic boolean getData(OntModel owlModel, Model pmlModel) {\n\t\treturn getData(zip, owlModel, pmlModel);\n\t}"} {"path":"downloaded/EpaDataAgent.java","method_name":"getData","content":"/**\n\t * @param args\n\t */\npublic boolean getData(OntModel owlModel, Model pmlModel, Date start,\n\t\t\tDate end) {\n\t\treturn false;\n\t}"} {"path":"downloaded/EpaDataAgent.java","method_name":"getName","content":"/**\n\t * @param args\n\t */\npublic String getName() {\n\t\treturn \"Environmental Protection Agency\";\n\t}"} {"path":"downloaded/EpaDataAgent.java","method_name":"getURL","content":"/**\n\t * @param args\n\t */\npublic URL getURL() {\n\t\ttry {\n\t\t\treturn new URL(\"http://www.epa-echo.gov/echo/\");\n\t\t} catch (MalformedURLException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\t}"} {"path":"downloaded/ViewParameters.java","method_name":"rs getInsta","content":"   /** Dynamic flag to remember if section mode is enabled\n   public static ViewParameters getInstance ()\n    {\n        return Holder.INSTANCE;\n  "} {"path":"downloaded/ViewParameters.java","method_name":"an isAttachmentPaint","content":"   /** Dynamic flag to remember if section mode is enabled\n   public boolean isAttachmentPainting ()\n    {\n        return constants.attachmentPainting.getValue();\n  "} {"path":"downloaded/ViewParameters.java","method_name":"an isLetterBoxPaint","content":"   /** Dynamic flag to remember if section mode is enabled\n   public boolean isLetterBoxPainting ()\n    {\n        return constants.letterBoxPainting.getValue();\n  "} {"path":"downloaded/ViewParameters.java","method_name":"an isLinePaint","content":"   /** Dynamic flag to remember if section mode is enabled\n   public boolean isLinePainting ()\n    {\n        return constants.linePainting.getValue();\n  "} {"path":"downloaded/ViewParameters.java","method_name":"an isSectionM","content":"   /** Dynamic flag to remember if section mode is enabled\n   public boolean isSectionMode ()\n    {\n        return sectionMode;\n  "} {"path":"downloaded/ViewParameters.java","method_name":"an isSentencePaint","content":"   /** Dynamic flag to remember if section mode is enabled\n   public boolean isSentencePainting ()\n    {\n        return constants.sentencePainting.getValue();\n  "} {"path":"downloaded/ViewParameters.java","method_name":"an isTranslationPaint","content":"   /** Dynamic flag to remember if section mode is enabled\n   public boolean isTranslationPainting ()\n    {\n        return constants.translationPainting.getValue();\n  "} {"path":"downloaded/GaussianCalculationMethod.java","method_name":"toString","content":"/**\n     * Constructor.\n     * @param calculationType whether this is an NMR or force calculation\n     * @param memory memory to use in GB\n     * @param processors number of processors to use\n     * @param routeCard the route card\n     * @param footer any text to append after the geometry\n     */\n@Override\n    public String toString() {\n        String returnString = String.format(\"G09 calculation (%s, %d GB, %d processors)\\n\", calculationType.toString(), memory, processors);\n        returnString += String.format(\"Route card: %s\\nFooter:%s\\n\", routeCard, footer);\n        return returnString;\n    }"} {"path":"downloaded/GaussianCalculationMethod.java","method_name":"hashCode","content":"/**\n     * Constructor.\n     * @param calculationType whether this is an NMR or force calculation\n     * @param memory memory to use in GB\n     * @param processors number of processors to use\n     * @param routeCard the route card\n     * @param footer any text to append after the geometry\n     */\n@Override\n    public int hashCode() {\n        return Objects.hash(calculationType, program, memory, processors, routeCard, footer);\n    }"} {"path":"downloaded/GaussianCalculationMethod.java","method_name":"equals","content":"/**\n     * Constructor.\n     * @param calculationType whether this is an NMR or force calculation\n     * @param memory memory to use in GB\n     * @param processors number of processors to use\n     * @param routeCard the route card\n     * @param footer any text to append after the geometry\n     */\n@Override\n    public boolean equals(Object obj) {\n        if ( obj == null )\n            return false;\n        if ( obj == this )\n            return true;\n        if ( !(obj instanceof GaussianCalculationMethod) )\n            return false;\n\n        GaussianCalculationMethod m = (GaussianCalculationMethod)obj;\n        if ( m.calculationType == calculationType &&\n             m.program == program &&\n             m.memory == memory &&\n             m.processors == processors &&\n             Objects.equals(m.routeCard, routeCard) &&\n             Objects.equals(m.footer, footer) )\n            return true;\n        return false;\n    }"} {"path":"downloaded/AbstractBuildingPriceSetInfo.java","method_name":"ouse.PriceSetS","content":"/**\n     * Object: 楼栋定价方案设置 's 定价\n� property \n     */\n    public com.kingdee.eas.fdc.sellhouse.PriceSetSchemeInfo getPriceScheme()\n    {\n        return (com.kingdee.eas.fdc.sellhouse.PriceSetSchemeInfo)g"} {"path":"downloaded/AbstractBuildingPriceSetInfo.java","method_name":"e.eas.fdc.sellho","content":"/**\n     * Object: 楼栋定价方案设置 's 定价\n�设置 's 定价设置分录 property \n     */\n    public com.kingdee.eas.fdc.sellhouse.BuildingPriceSetEntryCollection getPriceSetEntry()\n    {\n        return (com.kingdee.eas.fdc.sellhouse.Buildin"} {"path":"downloaded/AbstractBuildingPriceSetInfo.java","method_name":"property \n ","content":"/**\n     * Object: 楼栋定价方案设置 's 定价\n     * Object: 楼栋定价方案设置 's 楼栋 property \n     */\n    public com.kingdee.eas.fdc.sellhouse.BuildingInfo getBuilding()\n    {\n        r"} {"path":"downloaded/AbstractBuildingPriceSetInfo.java","method_name":"Object:楼栋定�","content":"/**\n     * Object: 楼栋定价方案设置 's 定价\nitem);\n    }\n    /**\n     * Object:楼栋定价方案设置's 基点标准property \n     */\n    public java.m"} {"path":"downloaded/AbstractBuildingPriceSetInfo.java","method_name":");\n    }\n    /**\n","content":"/**\n     * Object: 楼栋定价方案设置 's 定价\nimal(\"basePointAmount\", item);\n    }\n    /**\n     * Object:楼栋定价方案设置's 总价标准property "} {"path":"downloaded/AbstractBuildingPriceSetInfo.java","method_name":"ceAmount(j","content":"/**\n     * Object: 楼栋定价方案设置 's 定价\npublic void setSumPriceAmount(java.math.BigDecimal item)\n    {\n        setBigDecimal(\"sumPr"} {"path":"downloaded/TextPhraseBase.java","method_name":"getTextPhraseClassMgr","content":"/**\n   * The semantic class that represents the currentObject\n   */\npublic static TextPhraseBase.ClassMgr getTextPhraseClassMgr()\n    {\n        return new TextPhraseBase.ClassMgr();\n    }"} {"path":"downloaded/TextPhraseBase.java","method_name":"getTf_socialNet","content":"/**\n* Gets the Tf_socialNet property\n* @return String with the Tf_socialNet\n*/\npublic String getTf_socialNet()\n    {\n        return getSemanticObject().getProperty(social_tf_socialNet);\n    }"} {"path":"downloaded/TextPhraseBase.java","method_name":"listTextPhrases","content":"/**\n       * Returns a list of TextPhrase for a model\n       * @param model Model to find\n       * @return Iterator of org.semanticwb.social.TextPhrase\n       */\npublic static java.util.Iterator<org.semanticwb.social.TextPhrase> listTextPhrases(org.semanticwb.model.SWBModel model)\n        {\n            java.util.Iterator it=model.getSemanticObject().getModel().listInstancesOfClass(sclass);\n            return new org.semanticwb.model.GenericIterator<org.semanticwb.social.TextPhrase>(it, true);\n        }"} {"path":"downloaded/TextPhraseBase.java","method_name":"listTextPhrases","content":"/**\n       * Returns a list of org.semanticwb.social.TextPhrase for all models\n       * @return Iterator of org.semanticwb.social.TextPhrase\n       */\npublic static java.util.Iterator<org.semanticwb.social.TextPhrase> listTextPhrases()\n        {\n            java.util.Iterator it=sclass.listInstances();\n            return new org.semanticwb.model.GenericIterator<org.semanticwb.social.TextPhrase>(it, true);\n        }"} {"path":"downloaded/TextPhraseBase.java","method_name":"getTextPhrase","content":"/**\n       * Gets a org.semanticwb.social.TextPhrase\n       * @param id Identifier for org.semanticwb.social.TextPhrase\n       * @param model Model of the org.semanticwb.social.TextPhrase\n       * @return A org.semanticwb.social.TextPhrase\n       */\npublic static org.semanticwb.social.TextPhrase getTextPhrase(String id, org.semanticwb.model.SWBModel model)\n        {\n            return (org.semanticwb.social.TextPhrase)model.getSemanticObject().getModel().getGenericObject(model.getSemanticObject().getModel().getObjectUri(id,sclass),sclass);\n        }"} {"path":"downloaded/TextPhraseBase.java","method_name":"createTextPhrase","content":"/**\n       * Create a org.semanticwb.social.TextPhrase\n       * @param id Identifier for org.semanticwb.social.TextPhrase\n       * @param model Model of the org.semanticwb.social.TextPhrase\n       * @return A org.semanticwb.social.TextPhrase\n       */\npublic static org.semanticwb.social.TextPhrase createTextPhrase(String id, org.semanticwb.model.SWBModel model)\n        {\n            return (org.semanticwb.social.TextPhrase)model.getSemanticObject().getModel().createGenericObject(model.getSemanticObject().getModel().getObjectUri(id,sclass),sclass);\n        }"} {"path":"downloaded/TextPhraseBase.java","method_name":"hasTextPhrase","content":"/**\n       * Returns true if exists a org.semanticwb.social.TextPhrase\n       * @param id Identifier for org.semanticwb.social.TextPhrase\n       * @param model Model of the org.semanticwb.social.TextPhrase\n       * @return true if the org.semanticwb.social.TextPhrase exists, false otherwise\n       */\npublic static boolean hasTextPhrase(String id, org.semanticwb.model.SWBModel model)\n        {\n            return (getTextPhrase(id, model)!=null);\n        }"} {"path":"downloaded/ResultModel.java","method_name":"g status","content":"/**\n\t * 获取代理人信\nprivate String status;\n\t\n\tpublic Agent getAg"} {"path":"downloaded/ResultModel.java","method_name":";\n\t}\n\tpubl","content":"/**\n\t * 获取代理人信\n\t\tthis.agent = agent;\n\t}\n\tpublic List<Branch> getBranch"} {"path":"downloaded/ResultModel.java","method_name":"\n\t}\n\tpublic ","content":"/**\n\t * 获取代理人信\nis.branchs = branchs;\n\t}\n\tpublic List<Address> getAddresses("} {"path":"downloaded/ResultModel.java","method_name":"\tpublic List<A","content":"/**\n\t * 获取代理人信\nddresses = addresses;\n\t}\n\tpublic List<AgentReport> getAgentReport() "} {"path":"downloaded/ResultModel.java","method_name":"\n\t}\n\tpublic","content":"/**\n\t * 获取代理人信\nReport = agentReport;\n\t}\n\tpublic List<Contact> getContacts"} {"path":"downloaded/ResultModel.java","method_name":"public List<Err","content":"/**\n\t * 获取代理人信\n.contacts = contacts;\n\t}\n\tpublic List<ErrorMessage> getErrorMessage() {"} {"path":"downloaded/ResultModel.java","method_name":"\n\t}\n\tpublic","content":"/**\n\t * 获取代理人信\nssage = errorMessage;\n\t}\n\tpublic List<License> getLicenses"} {"path":"downloaded/ResultModel.java","method_name":"censes;\n\t}","content":"/**\n\t * 获取代理人信\n.licenses = licenses;\n\t}\n\tpublic String getMessag"} {"path":"downloaded/ResultModel.java","method_name":"essage;\n\t","content":"/**\n\t * 获取代理人信\nis.message = message;\n\t}\n\tpublic String getStat"} {"path":"downloaded/ResultModel.java","method_name":";\n\t}\n\n\tpubli","content":"/**\n\t * 获取代理人信\nhis.status = status;\n\t}\n\n\tpublic List<Honor> getHonorList("} {"path":"downloaded/ResultModel.java","method_name":"\tpublic List<","content":"/**\n\t * 获取代理人信\nnorList = honorList;\n\t}\n\n\tpublic List<AgentMember> getMemberList()"} {"path":"downloaded/Oculta.java","method_name":"lecturaArchivo","content":"/**\n     * Lee un archivo\n     * @param la ruta de donde se encuentra el archivo.\n     * @return el contenido en cadena del mensaje en el archivo.\n     */\nprivate String lecturaArchivo(String archivo) throws FileNotFoundException, IOException{\n        String mensaje = \"\";\n        FileReader fr = null;\n        BufferedReader br = null;\n        try{\n            fr = new FileReader(archivo);\n            br = new BufferedReader(fr);\n            String cadena;\n            while((cadena = br.readLine()) != null)\n                mensaje += cadena + \" \";\n        }catch(IOException ioe){\n            System.out.println(\"Error en la lectura del archivo\");\n            System.exit(1);\n        }\n        return mensaje;\n    }"} {"path":"downloaded/Oculta.java","method_name":"preparaMensaje","content":"/**\n     * Prepara el mensaje para poder esconderlo en bits y con la longitud de este.\n     * @param el mensaje que se quiere ocultar.\n     * @return el mensaje en binario con la longitud de este.\n     */\nprivate String preparaMensaje(String mensaje){\n        String binario;\n        int longitud = 0;\n        String bi=\"\";\n        longitud = mensaje.length() + 4;\n        for( int i = 15; i>=0; i--){\n            bi += ( ( ( longitud & ( 1<<i ) ) > 0 ) ? \"1\" : \"0\" ) ;\n        }\n        return binario = cadenaABinario(\"  \") + bi + cadenaABinario(mensaje);\n    }"} {"path":"downloaded/Oculta.java","method_name":"sacaFoto","content":"/**\n     * Busca la foto que se desea utilizar.\n     * @param la ruta de la foto que se va a utilizar.\n     * @return la imagen que se obtiene de la ruta.\n     */\nprivate BufferedImage sacaFoto(String fo){\n        File input = null;\n        BufferedImage image = null;\n        try{\n            input = new File(fo);\n            image = ImageIO.read(input);\n        }catch(IOException ioe){\n            System.out.println(\"Hubo un error en la lectura de la imagen\");\n            System.exit(1);\n        }\n        return image;\n    }"} {"path":"downloaded/Oculta.java","method_name":"toBinary","content":"/**\n     * Toma un caracter(un numero en este caso) y lo transforma en su representacion\n     * en binario\n     * @param un byte que es el caractera a transformar.\n     * @return la representacion en cadena binaria.\n     */\nprivate String toBinary(byte caracter){\n        byte byteDeCaracter = (byte)caracter;\n        String binario=\"\";\n        for( int i = 7; i>=0; i--){\n            binario += ( ( ( byteDeCaracter & ( 1<<i ) ) > 0 ) ? \"1\" : \"0\" ) ;\n        }\n        return binario;\n    }"} {"path":"downloaded/Oculta.java","method_name":"cadenaABinario","content":"/**\n     * Toma una cadena y la pasa a su representante en binario.\n     * @param la cadena que se quiere cambiar.\n     * @return la representacion en binario de la cadena.\n     */\nprivate String cadenaABinario(String cadena){\n        String cb = \"\";\n        int longitud;\n        for(int i = 0; i < cadena.length(); i++){\n            cb += String.format(\"%8s\",Integer.toBinaryString(cadena.charAt(i)));\n        }\n        cb = formato(cb);\n        return cb;\n    }"} {"path":"downloaded/Oculta.java","method_name":"formato","content":"/**\n     * Toma una cadena con espacios y la regresa completa, rellena de ceros \n     * @param una cadena en \"binario\".\n     * @return la misma cadena pero rellena de ceros.\n     */\nprivate String formato(String cadena){\n        cadena = cadena.replaceAll(\" \",\"0\");\n        return cadena;\n    }"} {"path":"downloaded/Oculta.java","method_name":"reemplazarLSB","content":"/**\n     * Reemplaza el bit menos significativo con un bit del mensaje.\n     * @param la cadena en binario del color que se quiere modificar, el mensaje\n     *        a ocultar en binario.\n     * @return el color modificado con el ultimo bit transformado en un bit del mensaje.\n     */\nprivate String  reemplazarLSB(String colorRGB, String binario){\n        if(contador < binario.length()){\n            colorRGB = colorRGB.substring(0,7) + binario.substring(contador, contador+1);\n            contador++;    \n        }\n        return colorRGB;\n    }"} {"path":"downloaded/Jframe_STUDENT.java","method_name":"initComponents","content":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n@SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jTabbedPane1 = new javax.swing.JTabbedPane();\n        jPanel1 = new javax.swing.JPanel();\n        jTextField_Mr_Nummer = new javax.swing.JTextField();\n        jLabel1 = new javax.swing.JLabel();\n        jButton_mr_nummer = new javax.swing.JButton();\n        jPanel2 = new javax.swing.JPanel();\n        jLabel_abwesenheitsstunde = new javax.swing.JLabel();\n        jLabel_Student_name = new javax.swing.JLabel();\n        jLabel4 = new javax.swing.JLabel();\n        jLabel5 = new javax.swing.JLabel();\n        jLabel_abwesenheitsverhaltnis = new javax.swing.JLabel();\n        jButton_anwdata_nach_date = new javax.swing.JButton();\n        jLabel7 = new javax.swing.JLabel();\n        jPanel3 = new javax.swing.JPanel();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        jTable_anw_data = new javax.swing.JTable();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n        setTitle(\"STUDENT PAGE\");\n\n        jTextField_Mr_Nummer.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jTextField_Mr_NummerActionPerformed(evt);\n            }\n        });\n\n        jLabel1.setFont(new java.awt.Font(\"Calibri\", 1, 14)); // NOI18N\n        jLabel1.setText(\"Geben Sie Ihre Martikelnummen ein\");\n\n        jButton_mr_nummer.setText(\"OK\");\n        jButton_mr_nummer.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButton_mr_nummerActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addGap(78, 78, 78)\n                .addComponent(jLabel1)\n                .addGap(77, 77, 77)\n                .addComponent(jTextField_Mr_Nummer, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(73, 73, 73)\n                .addComponent(jButton_mr_nummer, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(130, Short.MAX_VALUE))\n        );\n        jPanel1Layout.setVerticalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addGap(111, 111, 111)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(jTextField_Mr_Nummer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(jLabel1)\n                    .addComponent(jButton_mr_nummer))\n                .addContainerGap(243, Short.MAX_VALUE))\n        );\n\n        jTabbedPane1.addTab(\"Login Data\", jPanel1);\n\n        jLabel_abwesenheitsstunde.setFont(new java.awt.Font(\"Calibri\", 1, 12)); // NOI18N\n\n        jLabel_Student_name.setFont(new java.awt.Font(\"Calibri\", 1, 18)); // NOI18N\n\n        jLabel4.setFont(new java.awt.Font(\"Calibri\", 1, 12)); // NOI18N\n        jLabel4.setText(\"Gesamte Abwesenheitsstunde\");\n\n        jLabel5.setFont(new java.awt.Font(\"Calibri\", 1, 12)); // NOI18N\n        jLabel5.setText(\"Abwesenheitsverhältnis\");\n\n        jLabel_abwesenheitsverhaltnis.setFont(new java.awt.Font(\"Calibri\", 1, 12)); // NOI18N\n\n        jButton_anwdata_nach_date.setText(\"Anwesenheitsdata nach Datum Anzeigen\");\n        jButton_anwdata_nach_date.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButton_anwdata_nach_dateActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);\n        jPanel2.setLayout(jPanel2Layout);\n        jPanel2Layout.setHorizontalGroup(\n            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel2Layout.createSequentialGroup()\n                .addGap(54, 54, 54)\n                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jLabel_Student_name, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGroup(jPanel2Layout.createSequentialGroup()\n                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jLabel4)\n                            .addComponent(jLabel5))\n                        .addGap(118, 118, 118)\n                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jLabel_abwesenheitsstunde, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addComponent(jLabel_abwesenheitsverhaltnis, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 150, Short.MAX_VALUE)\n                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(101, 101, 101))\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(jButton_anwdata_nach_date)\n                .addGap(48, 48, 48))\n        );\n        jPanel2Layout.setVerticalGroup(\n            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel2Layout.createSequentialGroup()\n                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel2Layout.createSequentialGroup()\n                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                        .addComponent(jLabel_Student_name, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addGap(51, 51, 51)\n                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(jLabel4)\n                            .addComponent(jLabel_abwesenheitsstunde, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE))\n                    .addGroup(jPanel2Layout.createSequentialGroup()\n                        .addGap(20, 20, 20)\n                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)))\n                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(jLabel5)\n                    .addComponent(jLabel_abwesenheitsverhaltnis, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(18, 18, 18)\n                .addComponent(jButton_anwdata_nach_date)\n                .addContainerGap(96, Short.MAX_VALUE))\n        );\n\n        jTabbedPane1.addTab(\"Student Information\", jPanel2);\n\n        jTable_anw_data.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n                {null, null, null, null}\n            },\n            new String [] {\n                \"Name\", \"Datum\", \"Stunde\", \"Status\"\n            }\n        ) {\n            Class[] types = new Class [] {\n                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class\n            };\n\n            public Class getColumnClass(int columnIndex) {\n                return types [columnIndex];\n            }\n        });\n        jScrollPane1.setViewportView(jTable_anw_data);\n        if (jTable_anw_data.getColumnModel().getColumnCount() > 0) {\n            jTable_anw_data.getColumnModel().getColumn(3).setPreferredWidth(80);\n            jTable_anw_data.getColumnModel().getColumn(3).setMaxWidth(80);\n        }\n\n        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);\n        jPanel3.setLayout(jPanel3Layout);\n        jPanel3Layout.setHorizontalGroup(\n            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel3Layout.createSequentialGroup()\n                .addGap(23, 23, 23)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 713, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(65, Short.MAX_VALUE))\n        );\n        jPanel3Layout.setVerticalGroup(\n            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel3Layout.createSequentialGroup()\n                .addGap(32, 32, 32)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(29, Short.MAX_VALUE))\n        );\n\n        jTabbedPane1.addTab(\"Detalierte Anwesenheitsdata\", jPanel3);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addContainerGap(30, Short.MAX_VALUE)\n                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 806, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(50, Short.MAX_VALUE))\n        );\n\n        getAccessibleContext().setAccessibleDescription(\"\");\n\n        pack();\n    "} {"path":"downloaded/Jframe_STUDENT.java","method_name":" get_student_dat","content":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n public Student get_student_data(){\n        DBconnect connect = new DBconnect();\n        Student s = connect.get_StudentData(Integer.parseInt(jTextField_Mr_Nummer.getText()));\n        //System.out.println(\"std_id\"+Integer.parseInt(jTextField_Mr_Nummer.getText()));\n        return s;\n    "} {"path":"downloaded/Jframe_STUDENT.java","method_name":" get_gesamt_anwesenhei","content":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n public int get_gesamt_anwesenheit(){\n        DBconnect connect = new DBconnect();\n        return connect.anwesenheit_sum(Integer.parseInt(jTextField_Mr_Nummer.getText()));\n    "} {"path":"downloaded/Jframe_STUDENT.java","method_name":" get_anwesenheit_verhaltni","content":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n public double get_anwesenheit_verhaltnis(){\n        DBconnect connect = new DBconnect();\n        double a = get_gesamt_anwesenheit();\n        double b = connect.get_gesamte_lehrstunde();\n        //return ((get_gesamt_anwesenheit().0f/connect.get_gesamte_lehrstunde().0f)*100);\n        return ((a/b)*100);\n    "} {"path":"downloaded/Jframe_STUDENT.java","method_name":" get_dat","content":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n public String get_date(){\n        String str = ((JTextField)jDateChooser1.getDateEditor().getUiComponent()).getText();\n        return str;\n    "} {"path":"downloaded/authenticationlocalpolicy_binding.java","method_name":"get_name","content":"/**\n\t* <pre>\n\t* Name of the local authentication policy.\n\t* </pre>\n\t*/\npublic String get_name() throws Exception {\n\t\treturn this.name;\n\t}"} {"path":"downloaded/authenticationlocalpolicy_binding.java","method_name":"get_authenticationlocalpolicy_vpnvserver_bindings","content":"/**\n\t* <pre>\n\t* vpnvserver that can be bound to authenticationlocalpolicy.\n\t* </pre>\n\t*/\npublic authenticationlocalpolicy_vpnvserver_binding[] get_authenticationlocalpolicy_vpnvserver_bindings() throws Exception {\n\t\treturn this.authenticationlocalpolicy_vpnvserver_binding;\n\t}"} {"path":"downloaded/authenticationlocalpolicy_binding.java","method_name":"get_authenticationlocalpolicy_systemglobal_bindings","content":"/**\n\t* <pre>\n\t* systemglobal that can be bound to authenticationlocalpolicy.\n\t* </pre>\n\t*/\npublic authenticationlocalpolicy_systemglobal_binding[] get_authenticationlocalpolicy_systemglobal_bindings() throws Exception {\n\t\treturn this.authenticationlocalpolicy_systemglobal_binding;\n\t}"} {"path":"downloaded/authenticationlocalpolicy_binding.java","method_name":"get_authenticationlocalpolicy_vpnglobal_bindings","content":"/**\n\t* <pre>\n\t* vpnglobal that can be bound to authenticationlocalpolicy.\n\t* </pre>\n\t*/\npublic authenticationlocalpolicy_vpnglobal_binding[] get_authenticationlocalpolicy_vpnglobal_bindings() throws Exception {\n\t\treturn this.authenticationlocalpolicy_vpnglobal_binding;\n\t}"} {"path":"downloaded/authenticationlocalpolicy_binding.java","method_name":"get_authenticationlocalpolicy_authenticationvserver_bindings","content":"/**\n\t* <pre>\n\t* authenticationvserver that can be bound to authenticationlocalpolicy.\n\t* </pre>\n\t*/\npublic authenticationlocalpolicy_authenticationvserver_binding[] get_authenticationlocalpolicy_authenticationvserver_bindings() throws Exception {\n\t\treturn this.authenticationlocalpolicy_authenticationvserver_binding;\n\t}"} {"path":"downloaded/authenticationlocalpolicy_binding.java","method_name":"get_nitro_response","content":"/**\n\t* <pre>\n\t* converts nitro response into object and returns the object array in case of get request.\n\t* </pre>\n\t*/\nprotected base_resource[] get_nitro_response(nitro_service service, String response) throws Exception{\n\t\tauthenticationlocalpolicy_binding_response result = (authenticationlocalpolicy_binding_response) service.get_payload_formatter().string_to_resource(authenticationlocalpolicy_binding_response.class, response);\n\t\tif(result.errorcode != 0) {\n\t\t\tif (result.errorcode == 444) {\n\t\t\t\tservice.clear_session();\n\t\t\t}\n\t\t\tif(result.severity != null)\n\t\t\t{\n\t\t\t\tif (result.severity.equals(\"ERROR\"))\n\t\t\t\t\tthrow new nitro_exception(result.message,result.errorcode);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new nitro_exception(result.message,result.errorcode);\n\t\t\t}\n\t\t}\n\t\treturn result.authenticationlocalpolicy_binding;\n\t}"} {"path":"downloaded/authenticationlocalpolicy_binding.java","method_name":"get_object_name","content":"/**\n\t* <pre>\n\t* Returns the value of object identifier argument\n\t* </pre>\n\t*/\nprotected String get_object_name() {\n\t\treturn this.name;\n\t}"} {"path":"downloaded/authenticationlocalpolicy_binding.java","method_name":"get","content":"/**\n\t* Use this API to fetch authenticationlocalpolicy_binding resource of given name .\n\t*/\npublic static authenticationlocalpolicy_binding get(nitro_service service, String name) throws Exception{\n\t\tauthenticationlocalpolicy_binding obj = new authenticationlocalpolicy_binding();\n\t\tobj.set_name(name);\n\t\tauthenticationlocalpolicy_binding response = (authenticationlocalpolicy_binding) obj.get_resource(service);\n\t\treturn response;\n\t}"} {"path":"downloaded/authenticationlocalpolicy_binding.java","method_name":"get","content":"/**\n\t* Use this API to fetch authenticationlocalpolicy_binding resources of given names .\n\t*/\npublic static authenticationlocalpolicy_binding[] get(nitro_service service, String name[]) throws Exception{\n\t\tif (name !=null && name.length>0) {\n\t\t\tauthenticationlocalpolicy_binding response[] = new authenticationlocalpolicy_binding[name.length];\n\t\t\tauthenticationlocalpolicy_binding obj[] = new authenticationlocalpolicy_binding[name.length];\n\t\t\tfor (int i=0;i<name.length;i++) {\n\t\t\t\tobj[i] = new authenticationlocalpolicy_binding();\n\t\t\t\tobj[i].set_name(name[i]);\n\t\t\t\tresponse[i] = (authenticationlocalpolicy_binding) obj[i].get_resource(service);\n\t\t\t}\n\t\t\treturn response;\n\t\t}\n\t\treturn null;\n\t}"} {"path":"downloaded/BButtonToggle.java","method_name":"toString","content":"/**\n    * \n    * @param path\n    */\npublic String toString() {\n      return Dctx.toString(this);\n   }"} {"path":"downloaded/BButtonToggle.java","method_name":"toString1Line","content":"/**\n    * \n    * @param path\n    */\npublic String toString1Line() {\n      return Dctx.toString1Line(this);\n   }"} {"path":"downloaded/BButtonToggle.java","method_name":"toStringGetUCtx","content":"/**\n    * \n    * @param path\n    */\npublic UCtx toStringGetUCtx() {\n      return sc.getUCtx();\n   }"} {"path":"downloaded/EditDistanceProblem.java","method_name":"diff","content":"/**\n   * Return the the cost of the difference between the two characters.\n   *\n   * @param a The first character\n   * @param b The second character\n   */\npublic int diff(char a, char b) {\n    return (a == b ? 0 : 1);\n  }"} {"path":"downloaded/EditDistanceProblem.java","method_name":"editDistance","content":"/**\n   * Calculate the edit distance between the two strings.\n   *\n   * @param source The source string\n   * @param target The resulting string.\n   * @return The distance between both strings\n   */\npublic int editDistance(String source, String target) {\n    // create the matrix\n    int editMatrix[][] = new int[source.length() + 1][target.length() + 1];\n\n    // initialise first column\n    for (int i = 0; i <= source.length(); i++) {\n      editMatrix[i][0] = i;\n    }\n\n    // initialise first row\n    for (int i = 0; i <= target.length(); i++) {\n      editMatrix[0][i] = i;\n    }\n\n    // Complete the matrix\n    for (int i = 1; i <= source.length(); i++) {\n      for (int j = 1; j <= target.length(); j++) {\n        editMatrix[i][j] = Math.min(Math.min(editMatrix[i - 1][j] + 1,\n                editMatrix[i][j - 1] + 1),\n                editMatrix[i - 1][j - 1] + diff(source.charAt(i - 1), target.charAt(j - 1)));\n      }\n    }\n\n    return editMatrix[source.length()][target.length()];\n  }"} {"path":"downloaded/DisplayCommands.java","method_name":"displayTag","content":"/**\n   * Adds the commands that display the tags\n   *\n   * @param parent the parent command to attach to\n   */\nprivate static int displayTag(CommandSource source, String keyword) {\n    TagDao tagDao = source.getContext().getDatabase().getTagDao();\n\n    Optional<MessageTag> tagOptional = tagDao.getByKeyword(keyword);\n    if (!tagOptional.isPresent()) {\n      return sendTagAlreadyExists(source, keyword);\n    }\n\n    MessageTag tag = tagOptional.get();\n\n    source.getMessageSender().sendMessage(\n        new SimpleMessage(MessageCategory.NONE, tag.value()),\n        source.getChannel()\n    );\n\n    return 0;\n  }"} {"path":"downloaded/DisplayCommands.java","method_name":"displayTagInfo","content":"/**\n   * Adds the commands that display the tags\n   *\n   * @param parent the parent command to attach to\n   */\nstatic int displayTagInfo(CommandSource source, String keyword) {\n    TagDao tagDao = source.getContext().getDatabase().getTagDao();\n\n    Optional<MessageTag> tagOptional = tagDao.getByKeyword(keyword);\n    if (!tagOptional.isPresent()) {\n      return sendTagNotFound(source, keyword);\n    }\n\n    MessageTag tag = tagOptional.get();\n\n    ComplexMessage message = new ComplexMessage(MessageCategory.INFORMATION)\n        .editEmbed(it -> it.addField(\"Keyword\", tag.keyword(), true))\n        .editEmbed(it -> it.addField(\"Description\", tag.description(), true))\n        .notSelfDestructing();\n\n    tagDao.getAlias(keyword).ifPresent(alias ->\n        message.editEmbed(\n            eb -> eb.addField(\"Aliased to\", alias.target(), true)\n        )\n    );\n\n    message.editEmbed(it -> it.addField(\"Value\", tag.value(), false));\n\n    source.getMessageSender().sendMessage(\n        message,\n        source.getChannel()\n    );\n\n    return 0;\n  }"} {"path":"downloaded/DisplayCommands.java","method_name":"listTags","content":"/**\n   * Adds the commands that display the tags\n   *\n   * @param parent the parent command to attach to\n   */\nprivate static int listTags(CommandSource source) {\n    TagDao tagDao = source.getContext().getDatabase().getTagDao();\n    String tags = tagDao.getAllTags()\n        .stream()\n        .map(MessageTag::keyword)\n        .sorted()\n        .collect(Collectors.joining(\", \"));\n\n    if (tags.isEmpty()) {\n      tags = \"There are no tags configured yet :/\";\n    }\n\n    ComplexMessage message = new ComplexMessage(MessageCategory.SUCCESS);\n    message.getEmbedBuilder().addField(\"Tags\", tags, false);\n\n    String aliases = tagDao.getAllAliases()\n        .stream()\n        .map(alias -> alias.keyword() + \" -> \" + alias.target())\n        .sorted()\n        .collect(Collectors.joining(\", \"));\n\n    if (!aliases.isEmpty()) {\n      message.editEmbed(eb -> eb.addField(\"Aliases\", aliases, false));\n    }\n\n    source.getMessageSender().sendMessage(\n        message,\n        source.getChannel()\n    );\n\n    return 0;\n  }"} {"path":"downloaded/KindGroupVo.java","method_name":"getInstance","content":"/**\n    * Returns a KindGroupVo from a Kind entity.\n    * \n    * @param entity\n    * \t\t\tthe source KindGroup entity\n    * @param cascadable\n    * \t\t\tflag indicating whether the vo instance should created as a cascadable vo\n    * @return\n    * \t\t\tinstance of KindGroupVo\n    * @throws Exception\n    */\npublic static KindGroupVo getInstance(KindGroup entity,boolean cascadable) throws Exception{\n\t   KindGroupVo vo = new KindGroupVo();\n\t\n\t   if(null == entity)\n\t\t   throw new Exception(\"Unable to create KindGroupVo from null KindGroup entity.\");\n\t\n\t   vo.setId(entity.getId());\n\n\t   /*\n\t    * Only populate fields outside of the entity Id if needed\n\t    */\n\t   if(cascadable){\n\t\t   vo.setCode(entity.getCode());\n\t\t   vo.setDescription(entity.getDescription());\n\t\t   vo.setStandard(entity.isStandard());\n\t   }\n\t   \n\t   return vo;\n   }"} {"path":"downloaded/KindGroupVo.java","method_name":"getInstances","content":"/**\n    * Returns a collection of KindGroupVos from a collection of KindGroup entities.\n    * \n    * @param entities\n    * \t\t\tthe source collection of KindGroup entities\n    * @param cascadable\n    * \t\t\tflag indicating whether the vo instances should created as a cascadable vos\n    * @return\n    * \t\t\tcollection of KindGroup vos\n    * @throws Exception\n    */\npublic static Collection<KindGroupVo> getInstances(Collection<KindGroup> entities, boolean cascadable) throws Exception {\n\t   Collection<KindGroupVo> vos = new ArrayList<KindGroupVo>();\n\t   \n\t   for(KindGroup entity : entities){\n\t\t   vos.add(KindGroupVo.getInstance(entity, cascadable));\n\t   }\n\t   \n\t   return vos;\n   }"} {"path":"downloaded/KindGroupVo.java","method_name":"toEntity","content":"/**\n    * Returns a KindGroup entity from a vo.\n    * \n    * @param vo\n    *          the source vo\n    * @param cascadable\n    *          flag indicating whether the entity instance should created as a cascadable entity\n    * @return\n    *          instance of KindGroup entity\n    * @throws Exception\n    */\npublic static KindGroup toEntity(KindGroup entity, KindGroupVo vo, boolean cascadable) throws Exception {\n      if(null == entity)\n         entity=new KindGroupImpl();\n\n      entity.setId(vo.getId());\n\n      if(cascadable){\n         entity.setCode(vo.getCode());\n         entity.setDescription(vo.getDescription());\n         entity.setStandard(vo.isStandard());\n         \n         /*\n          * Validate the entity\n          */\n          validateEntity(entity);\n\n      }\n\n      return entity;\n   }"} {"path":"downloaded/KindGroupVo.java","method_name":"toEntity","content":"/**\n    * Perform some validation on the kindGroup field values against the\n    * entity field definitions.\n    * \n    * @param entity\n    * \t\t\tthe source kindGroup entity\n    * @throws ValidationException\n    */\npublic KindGroup toEntity(Persistable entity) throws Exception {\n\t   // use KindGroupVo.toEntity()\n\t   return null;\n   }"} {"path":"downloaded/KindGroupVo.java","method_name":"getCode","content":"/**\n    * Returns the code.\n    * \n    * @return \n    * \t\tthe code\n    */\npublic String getCode() {\n      return this.code;\n   }"} {"path":"downloaded/KindGroupVo.java","method_name":"getDescription","content":"/**\n    * Returns the description.\n    * \n    * @return \n    * \t\tthe description to return\n    */\npublic String getDescription() {\n      return this.description;\n   }"} {"path":"downloaded/KindGroupVo.java","method_name":"isStandard","content":"/**\n    * Returns whether or not this is a standard type.\n    * \n    * @return \n    * \t\tthe standard status to return\n    */\n@JsonIgnore\n   public Boolean isStandard() {\n      return this.standard;\n   }"} {"path":"downloaded/KindGroupVo.java","method_name":"getStandard","content":"/**\n    * Returns whether or not this is a standard type.\n    * \n    * @return \n    * \t\tthe standard status to return\n    */\npublic Boolean getStandard() {\n\t   return isStandard();\n   }"} {"path":"downloaded/WechatRefund.java","method_name":" outTradeNo;\n\t\tt","content":"/**\n\t * 微信订单号 和�\ns.outTradeNo = outTradeNo;\n\t\tthis.outRefundNo = outRefundNo;\n"} {"path":"downloaded/WechatRefund.java","method_name":"ctionId;\n\t}\n\n","content":"/**\n\t * 微信订单号 和�\n\treturn transactionId;\n\t}\n\n\tpublic void setTransactionI"} {"path":"downloaded/WechatRefund.java","method_name":"\t\treturn outTr","content":"/**\n\t * 微信订单号 和�\nutTradeNo() {\n\t\treturn outTradeNo;\n\t}\n\n\tpublic void setOu"} {"path":"downloaded/WechatRefund.java","method_name":"outRefundNo","content":"/**\n\t * 微信订单号 和�\nndNo() {\n\t\treturn outRefundNo;\n\t}\n\n\tpublic void setOutR"} {"path":"downloaded/WechatRefund.java","method_name":"{\n\t\treturn t","content":"/**\n\t * 微信订单号 和�\nmal getTotalFee() {\n\t\treturn totalFee;\n\t}\n\n\tpublic void s"} {"path":"downloaded/WechatRefund.java","method_name":"\n\t\treturn ref","content":"/**\n\t * 微信订单号 和�\ntRefundFee() {\n\t\treturn refundFee;\n\t}\n\n\tpublic void set"} {"path":"downloaded/WechatRefund.java","method_name":"\t\treturn ref","content":"/**\n\t * 微信订单号 和�\nefundDesc() {\n\t\treturn refundDesc;\n\t}\n\n\tpublic void s"} {"path":"downloaded/WechatRefund.java","method_name":"() {\n\t\treturn not","content":"/**\n\t * 微信订单号 和�\ng getNotifyUrl() {\n\t\treturn notifyUrl;\n\t}\n\n\tpublic void setNotifyUrl(String notifyUrl) {\n\t\tthis.notifyUrl = notifyUrl;\n\t}\n\n\tpublic String getWechat"} {"path":"downloaded/WechatRefund.java","method_name":"igDecimal fund = t","content":"/**\n\t * 微信订单号 和�\ntalFee() {\n\t\tBigDecimal fund = this.totalFee.multiply(new BigDecimal(100));\n\t\treturn Integer.toString(fund.intValue());\n\t}\n\tpublic Str"} {"path":"downloaded/RTMAssociatedNetElement.java","method_name":"e getGeometricCoordinateBeg","content":"  /**\n     * Ruft den Wert der geometricCoordinateBegin-Eigenschaft ab.\n     * \n     * @return\n     *     possible object is\n     *     {@link RTMGeometricCoordinate }\n     *     \n     \n  @Override\n    public RTMGeometricCoordinate getGeometricCoordinateBegin() {\n        return geometricCoordinateBegin;\n   "} {"path":"downloaded/RTMAssociatedNetElement.java","method_name":"e getLinearCoordinateBeg","content":"  /**\n     * Ruft den Wert der linearCoordinateBegin-Eigenschaft ab.\n     * \n     * @return\n     *     possible object is\n     *     {@link RTMLinearCoordinate }\n     *     \n     \n  @Override\n    public RTMLinearCoordinate getLinearCoordinateBegin() {\n        return linearCoordinateBegin;\n   "} {"path":"downloaded/RTMAssociatedNetElement.java","method_name":"e getGeometricCoordinateE","content":"  /**\n     * Ruft den Wert der geometricCoordinateEnd-Eigenschaft ab.\n     * \n     * @return\n     *     possible object is\n     *     {@link RTMGeometricCoordinate }\n     *     \n     \n  @Override\n    public RTMGeometricCoordinate getGeometricCoordinateEnd() {\n        return geometricCoordinateEnd;\n   "} {"path":"downloaded/RTMAssociatedNetElement.java","method_name":"e getLinearCoordinateE","content":"  /**\n     * Ruft den Wert der linearCoordinateEnd-Eigenschaft ab.\n     * \n     * @return\n     *     possible object is\n     *     {@link RTMLinearCoordinate }\n     *     \n     \n  @Override\n    public RTMLinearCoordinate getLinearCoordinateEnd() {\n        return linearCoordinateEnd;\n   "} {"path":"downloaded/RTMAssociatedNetElement.java","method_name":"g getNetElementR","content":"  /**\n     * Ruft den Wert der netElementRef-Eigenschaft ab.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     \n  @Override\n    public String getNetElementRef() {\n        return netElementRef;\n   "} {"path":"downloaded/RTMAssociatedNetElement.java","method_name":"e getIntrinsicCoordBeg","content":"  /**\n     * Ruft den Wert der intrinsicCoordBegin-Eigenschaft ab.\n     * \n     * @return\n     *     possible object is\n     *     {@link Double }\n     *     \n     \n  @Override\n    public Double getIntrinsicCoordBegin() {\n        return intrinsicCoordBegin;\n   "} {"path":"downloaded/RTMAssociatedNetElement.java","method_name":"e getIntrinsicCoordE","content":"  /**\n     * Ruft den Wert der intrinsicCoordEnd-Eigenschaft ab.\n     * \n     * @return\n     *     possible object is\n     *     {@link Double }\n     *     \n     \n  @Override\n    public Double getIntrinsicCoordEnd() {\n        return intrinsicCoordEnd;\n   "} {"path":"downloaded/RTMAssociatedNetElement.java","method_name":"n isKeepsOrientati","content":"  /**\n     * Ruft den Wert der keepsOrientation-Eigenschaft ab.\n     * \n     \n  @Override\n    public boolean isKeepsOrientation() {\n        return keepsOrientation;\n   "} {"path":"downloaded/RTMAssociatedNetElement.java","method_name":"r getSequen","content":"  /**\n     * Ruft den Wert der sequence-Eigenschaft ab.\n     * \n     * @return\n     *     possible object is\n     *     {@link Integer }\n     *     \n     \n  @Override\n    public Integer getSequence() {\n        return sequence;\n   "} {"path":"downloaded/RTMAssociatedNetElement.java","method_name":"l getPosBeg","content":"  /**\n     * Ruft den Wert der posBegin-Eigenschaft ab.\n     * \n     * @return\n     *     possible object is\n     *     {@link BigDecimal }\n     *     \n     \n  @Override\n    public BigDecimal getPosBegin() {\n        return posBegin;\n   "} {"path":"downloaded/RTMAssociatedNetElement.java","method_name":"l getPosE","content":"  /**\n     * Ruft den Wert der posEnd-Eigenschaft ab.\n     * \n     * @return\n     *     possible object is\n     *     {@link BigDecimal }\n     *     \n     \n  @Override\n    public BigDecimal getPosEnd() {\n        return posEnd;\n   "} {"path":"downloaded/KunKunInfo.java","method_name":"getPlatForm","content":"/**\n\t*  get PlatForm\n\t*  @author: TruongHN\n\t*  @return: String\n\t*  @throws:\n\t */\npublic String getPlatForm(){\n\t\treturn Constants.STR_ANDROID;\n\t}"} {"path":"downloaded/KunKunInfo.java","method_name":"getBitmapData","content":"/**\n\t*  get bitmap data\n\t*  @author: BangHN\n\t*  @return: Bitmap\n\t*/\npublic Bitmap getBitmapData(){\n\t\treturn bmpData;\n\t}"} {"path":"downloaded/KunKunInfo.java","method_name":"getProfile","content":"/**\n\t*  Lay thong tin profile\n\t*  @author: DoanDM\n\t*  @return\n\t*  @return: KunKunProfile\n\t*  @throws:\n\t */\npublic KunKunProfile getProfile() {\n\t\tObject temp;\n//\t\tif (profile == null || profile.getUserData() == null\n//\t\t\t\t|| profile.getUserData().id == -1) {// nghia la bien o trang\n//\t\t\t\t\t\t\t\t\t\t\t\t\t// thai ban dau hoac da bi\n//\t\t\t\t\t\t\t\t\t\t\t\t\t// reset\n//\t\t\tif ((temp = KunKunUtils.readObject(\n//\t\t\t\t\tKunKunProfile.KUNKUN_PROFILE)) != null) {\n//\t\t\t\tprofile = (KunKunProfile) temp;// bi out memory\n//\t\t\t\tSystem.setProperty(\"networkaddress.cache.ttl\",\"0\");\n//\t\t\t\tSystem.setProperty(\"networkaddress.cache.negative.ttl\" , \"0\");\n//\t\t\t}\n//\t\t}\n\t\treturn profile;\n\t}"} {"path":"downloaded/KunKunInfo.java","method_name":"getAppContext","content":"/**\n\t*  Lay thong tin profile\n\t*  @author: DoanDM\n\t*  @return\n\t*  @return: KunKunProfile\n\t*  @throws:\n\t */\npublic Context getAppContext() {\n\t\tif(appContext == null){\n\t\t\tappContext = new KunKunInfo();\n\t\t}\n\t\treturn appContext;\n\t}"} {"path":"downloaded/KunKunInfo.java","method_name":"getActivityContext","content":"/**\n\t*  Lay thong tin profile\n\t*  @author: DoanDM\n\t*  @return\n\t*  @return: KunKunProfile\n\t*  @throws:\n\t */\npublic Context getActivityContext() {\t\t\n\t\treturn activityContext;\n\t}"} {"path":"downloaded/KunKunInfo.java","method_name":"getAppHandler","content":"/**\n\t*  Lay thong tin profile\n\t*  @author: DoanDM\n\t*  @return\n\t*  @return: KunKunProfile\n\t*  @throws:\n\t */\npublic Handler getAppHandler() {\n\t\treturn mHandler;\n\t}"} {"path":"downloaded/KunKunInfo.java","method_name":"isNeedToReloadChatList","content":"/**\n\t*  Lay thong tin profile\n\t*  @author: DoanDM\n\t*  @return\n\t*  @return: KunKunProfile\n\t*  @throws:\n\t */\npublic boolean isNeedToReloadChatList() {\n\n\t\treturn isNeedToReloadChatList;\n\t}"} {"path":"downloaded/KunKunInfo.java","method_name":"isAppActive","content":"/**\n\t*  Lay thong tin profile\n\t*  @author: DoanDM\n\t*  @return\n\t*  @return: KunKunProfile\n\t*  @throws:\n\t */\npublic boolean isAppActive() {\n\n\t\treturn isAppActive;\n\t}"} {"path":"downloaded/KunKunInfo.java","method_name":"getStatusNotifier","content":"/**\n\t*  Lay thong tin profile\n\t*  @author: DoanDM\n\t*  @return\n\t*  @return: KunKunProfile\n\t*  @throws:\n\t */\npublic StatusNotificationHandler getStatusNotifier() {\n\t\tif (statusNotifier == null) {\n\t\t\tstatusNotifier = new StatusNotificationHandler();\n\t\t}\n\t\treturn statusNotifier;\n\t}"} {"path":"downloaded/ClassLoaderUtil.java","method_name":"getField","content":"/**\n     *Retrieves a Field object for a given field on the specified class, having\n     *set it accessible.\n     *@param cls the Class on which the field is expected to be defined\n     *@param fieldName the name of the field of interest\n     *@throws NoSuchFieldException in case of any error retriving information about the field\n     */\nprivate static Field getField(Class cls, String fieldName) throws NoSuchFieldException {\n        try {\n            Field field = cls.getDeclaredField(fieldName);\n            field.setAccessible(true);\n            return field;\n        } catch (NoSuchFieldException nsfe) {\n            NoSuchFieldException e = new NoSuchFieldException(getMessage(\"classloaderutil.errorGettingField\", fieldName));\n            e.initCause(nsfe);\n            throw e;\n        }\n\n    }"} {"path":"downloaded/ClassLoaderUtil.java","method_name":"getInnerClass","content":"/**\n     *Retrieves a given inner class definition from the specified outer class.\n     *@param cls the outer Class\n     *@param innerClassName the fully-qualified name of the inner class of interest\n     */\nprivate static Class getInnerClass(Class cls, String innerClassName) {\n        Class result = null;\n        Class[] innerClasses = cls.getDeclaredClasses();\n        for (Class c : innerClasses) {\n            if (c.getName().equals(innerClassName)) {\n                result = c;\n                break;\n            }\n        }\n        return result;\n    }"} {"path":"downloaded/ClassLoaderUtil.java","method_name":"releaseLoader","content":"/**\n     *Releases resources held by the URLClassLoader.  Notably, close the jars\n     *opened by the loader. This does not prevent the class loader from\n     *continuing to return classes it has alrady resolved although that is not\n     *what we intend to happen.  Initializes and updates the Vector of \n     *jars that have been successfully closed.\n     *<p>\n     *Any errors are logged.\n     *@param classLoader the instance of URLClassLoader (or a subclass) \n     *@param jarsClosed a Vector of Strings that will contain the names of jars \n     * successfully closed; can be null if the caller does not need the information returned\n     *@return array of IOExceptions reporting jars that failed to close; null\n     *indicates that an error other than an IOException occurred attempting to\n     *release the loader; empty indicates a successful release; non-empty \n     *indicates at least one error attempting to close an open jar.\n     */\npublic static IOException [] releaseLoader(URLClassLoader classLoader, Vector<String> jarsClosed) {\n        \n        IOException[] result = null;\n        \n        try { \n            init();\n\n            /* Records all IOExceptions thrown while closing jar files. */\n            Vector<IOException> ioExceptions = new Vector<IOException>();\n\n            if (jarsClosed != null) {\n                jarsClosed.clear();\n            }\n\n            URLClassPath ucp = (URLClassPath) jcpField.get(classLoader);\n            ArrayList loaders = (ArrayList) loadersField.get(ucp);\n            Stack urls = (Stack) urlsField.get(ucp);\n            HashMap lmap = (HashMap) lmapField.get(ucp);\n\n            /*\n             *The urls variable in the URLClassPath object holds URLs that have not yet\n             *been used to resolve a resource or load a class and, therefore, do\n             *not yet have a loader associated with them.  Clear the stack so any\n             *future requests that might incorrectly reach the loader cannot be \n             *resolved and cannot open a jar file after we think we've closed \n             *them all.\n             */\n            synchronized(urls) {\n                urls.clear();\n            }\n\n            /*\n             *Also clear the map of URLs to loaders so the class loader cannot use\n             *previously-opened jar files - they are about to be closed.\n             */\n            synchronized(lmap) {\n                lmap.clear();\n            }\n\n            /*\n             *The URLClassPath object's path variable records the list of all URLs that are on\n             *the URLClassPath's class path.  Leave that unchanged.  This might\n             *help someone trying to debug why a released class loader is still used.\n             *Because the stack and lmap are now clear, code that incorrectly uses a\n             *the released class loader will trigger an exception if the \n             *class or resource would have been resolved by the class\n             *loader (and no other) if it had not been released.  \n             *\n             *The list of URLs might provide some hints to the person as to where\n             *in the code the class loader was set up, which might in turn suggest\n             *where in the code the class loader needs to stop being used.\n             *The URLClassPath does not use the path variable to open new jar \n             *files - it uses the urls Stack for that - so leaving the path variable\n             *will not by itself allow the class loader to continue handling requests.\n             */\n\n            /*\n             *For each loader, close the jar file associated with that loader.  \n             *\n             *The URLClassPath's use of loaders is sync-ed on the entire URLClassPath \n             *object.\n             */\n            synchronized (ucp) {\n                for (Object o : loaders) {\n                    if (o != null) {\n                        /*\n                         *If the loader is a JarLoader inner class and its jarFile\n                         *field is non-null then try to close that jar file.  Add\n                         *it to the list of closed files if successful.\n                         */\n                        if (jarLoaderInnerClass.isInstance(o)) {\n                            try {\n                                JarFile jarFile = (JarFile) jarFileField.get(o);\n                                try {\n                                    if (jarFile != null) {\n                                        jarFile.close();\n                                        if (jarsClosed != null) {\n                                            jarsClosed.add(jarFile.getName());\n                                        }\n                                    }\n                                } catch (IOException ioe) {\n                                    /*\n                                     *Wrap the IOException to identify which jar \n                                     *could not be closed and add it to the list\n                                     *of IOExceptions to be returned to the caller.\n                                     */\n                                    String jarFileName = (jarFile == null) ? getMessage(\"classloaderutil.jarFileNameNotAvailable\") : jarFile.getName();\n                                    String msg = getMessage(\"classloaderutil.errorClosingJar\", jarFileName);\n                                    IOException newIOE = new IOException(msg);\n                                    newIOE.initCause(ioe);\n                                    ioExceptions.add(newIOE);\n                                    \n                                    /*\n                                     *Log the error also.\n                                     */\n                                    getLogger().log(Level.WARNING, msg, ioe);\n                                }\n                            } catch (Throwable thr) {\n                                getLogger().log(Level.WARNING, \"classloaderutil.errorReleasingJarNoName\", thr);\n                            }\n                        }\n                    }\n                }\n                /*\n                 *Now clear the loaders ArrayList.\n                 */\n                loaders.clear();\n            }\n            result = ioExceptions.toArray(new IOException[ioExceptions.size()]);\n        } catch (Throwable thr) {\n            getLogger().log(Level.WARNING, \"classloaderutil.errorReleasingLoader\", thr);\n            result = null;\n        }\n        \n        return result;\n    }"} {"path":"downloaded/ClassLoaderUtil.java","method_name":"getLogger","content":"/**\n     *Returns the logger for the common utils component.\n     *@return the Logger for this component\n     */\nprivate static Logger getLogger() {\n        return LogDomains.getLogger(ClassLoaderUtil.class, LogDomains.UTIL_LOGGER);\n    }"} {"path":"downloaded/ClassLoaderUtil.java","method_name":"getMessage","content":"/**\n     *Returns a formatted string, using the key to find the full message and \n     *substituting any parameters.\n     *@param key the message key with which to locate the message of interest\n     *@param o the object(s), if any, to be substituted into the message\n     *@return a String containing the formatted message\n     */\nprivate static String getMessage(String key, Object... o) {\n        String msg = getLogger().getResourceBundle().getString(key);\n        return MessageFormat.format(msg, o);\n    }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"build","content":"/**\n     * <p>The region ID of the router interface.</p>\n     * <br>\n     * <p>You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.</p>\n     */\npublic static DescribeRouterInterfacesRequest build(java.util.Map<String, ?> map) throws Exception {\n        DescribeRouterInterfacesRequest self = new DescribeRouterInterfacesRequest();\n        return TeaModel.build(map, self);\n    }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"setFilter","content":"/**\n     * <p>The region ID of the router interface.</p>\n     * <br>\n     * <p>You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.</p>\n     */\npublic DescribeRouterInterfacesRequest setFilter(java.util.List<DescribeRouterInterfacesRequestFilter> filter) {\n        this.filter = filter;\n        return this;\n    }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"getFilter","content":"/**\n     * <p>The region ID of the router interface.</p>\n     * <br>\n     * <p>You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.</p>\n     */\npublic java.util.List<DescribeRouterInterfacesRequestFilter> getFilter() {\n        return this.filter;\n    }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"setIncludeReservationData","content":"/**\n     * <p>The region ID of the router interface.</p>\n     * <br>\n     * <p>You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.</p>\n     */\npublic DescribeRouterInterfacesRequest setIncludeReservationData(Boolean includeReservationData) {\n        this.includeReservationData = includeReservationData;\n        return this;\n    }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"getIncludeReservationData","content":"/**\n     * <p>The region ID of the router interface.</p>\n     * <br>\n     * <p>You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.</p>\n     */\npublic Boolean getIncludeReservationData() {\n        return this.includeReservationData;\n    }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"setOwnerId","content":"/**\n     * <p>The region ID of the router interface.</p>\n     * <br>\n     * <p>You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.</p>\n     */\npublic DescribeRouterInterfacesRequest setOwnerId(Long ownerId) {\n        this.ownerId = ownerId;\n        return this;\n    }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"getOwnerId","content":"/**\n     * <p>The region ID of the router interface.</p>\n     * <br>\n     * <p>You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.</p>\n     */\npublic Long getOwnerId() {\n        return this.ownerId;\n    }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"setPageNumber","content":"/**\n     * <p>The region ID of the router interface.</p>\n     * <br>\n     * <p>You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.</p>\n     */\npublic DescribeRouterInterfacesRequest setPageNumber(Integer pageNumber) {\n        this.pageNumber = pageNumber;\n        return this;\n    }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"getPageNumber","content":"/**\n     * <p>The region ID of the router interface.</p>\n     * <br>\n     * <p>You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.</p>\n     */\npublic Integer getPageNumber() {\n        return this.pageNumber;\n    }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"setPageSize","content":"/**\n     * <p>The region ID of the router interface.</p>\n     * <br>\n     * <p>You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.</p>\n     */\npublic DescribeRouterInterfacesRequest setPageSize(Integer pageSize) {\n        this.pageSize = pageSize;\n        return this;\n    }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"getPageSize","content":"/**\n     * <p>The region ID of the router interface.</p>\n     * <br>\n     * <p>You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.</p>\n     */\npublic Integer getPageSize() {\n        return this.pageSize;\n    }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"setRegionId","content":"/**\n     * <p>The region ID of the router interface.</p>\n     * <br>\n     * <p>You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.</p>\n     */\npublic DescribeRouterInterfacesRequest setRegionId(String regionId) {\n        this.regionId = regionId;\n        return this;\n    }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"getRegionId","content":"/**\n     * <p>The region ID of the router interface.</p>\n     * <br>\n     * <p>You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.</p>\n     */\npublic String getRegionId() {\n        return this.regionId;\n    }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"setResourceGroupId","content":"/**\n     * <p>The region ID of the router interface.</p>\n     * <br>\n     * <p>You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.</p>\n     */\npublic DescribeRouterInterfacesRequest setResourceGroupId(String resourceGroupId) {\n        this.resourceGroupId = resourceGroupId;\n        return this;\n    }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"getResourceGroupId","content":"/**\n     * <p>The region ID of the router interface.</p>\n     * <br>\n     * <p>You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.</p>\n     */\npublic String getResourceGroupId() {\n        return this.resourceGroupId;\n    }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"setResourceOwnerAccount","content":"/**\n     * <p>The region ID of the router interface.</p>\n     * <br>\n     * <p>You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.</p>\n     */\npublic DescribeRouterInterfacesRequest setResourceOwnerAccount(String resourceOwnerAccount) {\n        this.resourceOwnerAccount = resourceOwnerAccount;\n        return this;\n    }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"getResourceOwnerAccount","content":"/**\n     * <p>The region ID of the router interface.</p>\n     * <br>\n     * <p>You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.</p>\n     */\npublic String getResourceOwnerAccount() {\n        return this.resourceOwnerAccount;\n    }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"setResourceOwnerId","content":"/**\n     * <p>The region ID of the router interface.</p>\n     * <br>\n     * <p>You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.</p>\n     */\npublic DescribeRouterInterfacesRequest setResourceOwnerId(Long resourceOwnerId) {\n        this.resourceOwnerId = resourceOwnerId;\n        return this;\n    }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"getResourceOwnerId","content":"/**\n     * <p>The region ID of the router interface.</p>\n     * <br>\n     * <p>You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.</p>\n     */\npublic Long getResourceOwnerId() {\n        return this.resourceOwnerId;\n    }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"setTags","content":"/**\n     * <p>The region ID of the router interface.</p>\n     * <br>\n     * <p>You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.</p>\n     */\npublic DescribeRouterInterfacesRequest setTags(java.util.List<DescribeRouterInterfacesRequestTags> tags) {\n        this.tags = tags;\n        return this;\n    }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"getTags","content":"/**\n     * <p>The region ID of the router interface.</p>\n     * <br>\n     * <p>You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.</p>\n     */\npublic java.util.List<DescribeRouterInterfacesRequestTags> getTags() {\n        return this.tags;\n    }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"build","content":"/**\n         * <p>The filter conditions. You can specify up to five filter conditions. The following filter conditions are supported:</p>\n         * <br>\n         * <p>*   **RouterInterfaceId**: the ID of the router interface.</p>\n         * <p>*   **RouterId**: the ID of the router.</p>\n         * <p>*   **RouterType**: the router type. Valid values: **VRouter** and **VBR**.</p>\n         * <p>*   **RouterInterfaceOwnerId**: the ID of the Alibaba Cloud account to which the router interface belongs.</p>\n         * <p>*   **OppositeInterfaceId**: the ID of the peer router interface.</p>\n         * <p>*   **OppositeRouterType**: the type of the peer router interface. Valid values: **VRouter** and **VBR**.</p>\n         * <p>*   **OppositeRouterId**: the ID of the peer router.</p>\n         * <p>*   **OppositeInterfaceOwnerId**: the ID of the Alibaba Cloud account to which the peer router interface belongs.</p>\n         * <p>*   **Status**: the status of the router interface.</p>\n         * <p>*   **Name**: the name of the router interface.</p>\n         * <br>\n         * <p>>  The logical operator between multiple values in the filter condition is OR. In this case, the filter condition is met if one of the values is matched. The logical operator between filter conditions is AND, which means that a result is returned only when all conditions are met.</p>\n         */\npublic static DescribeRouterInterfacesRequestFilter build(java.util.Map<String, ?> map) throws Exception {\n            DescribeRouterInterfacesRequestFilter self = new DescribeRouterInterfacesRequestFilter();\n            return TeaModel.build(map, self);\n        }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"setKey","content":"/**\n         * <p>The filter conditions. You can specify up to five filter conditions. The following filter conditions are supported:</p>\n         * <br>\n         * <p>*   **RouterInterfaceId**: the ID of the router interface.</p>\n         * <p>*   **RouterId**: the ID of the router.</p>\n         * <p>*   **RouterType**: the router type. Valid values: **VRouter** and **VBR**.</p>\n         * <p>*   **RouterInterfaceOwnerId**: the ID of the Alibaba Cloud account to which the router interface belongs.</p>\n         * <p>*   **OppositeInterfaceId**: the ID of the peer router interface.</p>\n         * <p>*   **OppositeRouterType**: the type of the peer router interface. Valid values: **VRouter** and **VBR**.</p>\n         * <p>*   **OppositeRouterId**: the ID of the peer router.</p>\n         * <p>*   **OppositeInterfaceOwnerId**: the ID of the Alibaba Cloud account to which the peer router interface belongs.</p>\n         * <p>*   **Status**: the status of the router interface.</p>\n         * <p>*   **Name**: the name of the router interface.</p>\n         * <br>\n         * <p>>  The logical operator between multiple values in the filter condition is OR. In this case, the filter condition is met if one of the values is matched. The logical operator between filter conditions is AND, which means that a result is returned only when all conditions are met.</p>\n         */\npublic DescribeRouterInterfacesRequestFilter setKey(String key) {\n            this.key = key;\n            return this;\n        }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"getKey","content":"/**\n         * <p>The filter conditions. You can specify up to five filter conditions. The following filter conditions are supported:</p>\n         * <br>\n         * <p>*   **RouterInterfaceId**: the ID of the router interface.</p>\n         * <p>*   **RouterId**: the ID of the router.</p>\n         * <p>*   **RouterType**: the router type. Valid values: **VRouter** and **VBR**.</p>\n         * <p>*   **RouterInterfaceOwnerId**: the ID of the Alibaba Cloud account to which the router interface belongs.</p>\n         * <p>*   **OppositeInterfaceId**: the ID of the peer router interface.</p>\n         * <p>*   **OppositeRouterType**: the type of the peer router interface. Valid values: **VRouter** and **VBR**.</p>\n         * <p>*   **OppositeRouterId**: the ID of the peer router.</p>\n         * <p>*   **OppositeInterfaceOwnerId**: the ID of the Alibaba Cloud account to which the peer router interface belongs.</p>\n         * <p>*   **Status**: the status of the router interface.</p>\n         * <p>*   **Name**: the name of the router interface.</p>\n         * <br>\n         * <p>>  The logical operator between multiple values in the filter condition is OR. In this case, the filter condition is met if one of the values is matched. The logical operator between filter conditions is AND, which means that a result is returned only when all conditions are met.</p>\n         */\npublic String getKey() {\n            return this.key;\n        }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"setValue","content":"/**\n         * <p>The filter conditions. You can specify up to five filter conditions. The following filter conditions are supported:</p>\n         * <br>\n         * <p>*   **RouterInterfaceId**: the ID of the router interface.</p>\n         * <p>*   **RouterId**: the ID of the router.</p>\n         * <p>*   **RouterType**: the router type. Valid values: **VRouter** and **VBR**.</p>\n         * <p>*   **RouterInterfaceOwnerId**: the ID of the Alibaba Cloud account to which the router interface belongs.</p>\n         * <p>*   **OppositeInterfaceId**: the ID of the peer router interface.</p>\n         * <p>*   **OppositeRouterType**: the type of the peer router interface. Valid values: **VRouter** and **VBR**.</p>\n         * <p>*   **OppositeRouterId**: the ID of the peer router.</p>\n         * <p>*   **OppositeInterfaceOwnerId**: the ID of the Alibaba Cloud account to which the peer router interface belongs.</p>\n         * <p>*   **Status**: the status of the router interface.</p>\n         * <p>*   **Name**: the name of the router interface.</p>\n         * <br>\n         * <p>>  The logical operator between multiple values in the filter condition is OR. In this case, the filter condition is met if one of the values is matched. The logical operator between filter conditions is AND, which means that a result is returned only when all conditions are met.</p>\n         */\npublic DescribeRouterInterfacesRequestFilter setValue(java.util.List<String> value) {\n            this.value = value;\n            return this;\n        }"} {"path":"downloaded/DescribeRouterInterfacesRequest.java","method_name":"getValue","content":"/**\n         * <p>The filter conditions. You can specify up to five filter conditions. The following filter conditions are supported:</p>\n         * <br>\n         * <p>*   **RouterInterfaceId**: the ID of the router interface.</p>\n         * <p>*   **RouterId**: the ID of the router.</p>\n         * <p>*   **RouterType**: the router type. Valid values: **VRouter** and **VBR**.</p>\n         * <p>*   **RouterInterfaceOwnerId**: the ID of the Alibaba Cloud account to which the router interface belongs.</p>\n         * <p>*   **OppositeInterfaceId**: the ID of the peer router interface.</p>\n         * <p>*   **OppositeRouterType**: the type of the peer router interface. Valid values: **VRouter** and **VBR**.</p>\n         * <p>*   **OppositeRouterId**: the ID of the peer router.</p>\n         * <p>*   **OppositeInterfaceOwnerId**: the ID of the Alibaba Cloud account to which the peer router interface belongs.</p>\n         * <p>*   **Status**: the status of the router interface.</p>\n         * <p>*   **Name**: the name of the router interface.</p>\n         * <br>\n         * <p>>  The logical operator between multiple values in the filter condition is OR. In this case, the filter condition is met if one of the values is matched. The logical operator between filter conditions is AND, which means that a result is returned only when all conditions are met.</p>\n         */\npublic java.util.List<String> getValue() {\n            return this.value;\n        }"} {"path":"downloaded/MinMatchingAlg.java","method_name":"run","content":"/**\n\t * @param g graph to find the minimal matching of\n\t * @param m initial matching\n\t */\npublic void run() {\n\t\t// for all v in V initialize mate and exposed to NOT_AN_INDEX\n\t\t// Arrays.fill(mate, NOT_AN_INDEX);\n\t\tArrays.fill(label, NOT_AN_INDEX);\n\t\t\n\t\t// while there is a u in V with considered[u]=0 and mate[u]=0 do\n\t\tstage: for (int u = 0; u < gOrig.numVertices(); u++ ) {\n\t\t\t// if(mate[u] == NOT_AN_INDEX){\n\t\t\tif (gOrig.vertex(u) == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (matching.matches() == gOrig.numVertices() / 2) {\n\t\t\t\t// we are done\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tSystem.out.print(String.format(\"considering vertex u%d\\n\", u));\n\t\t\tif ( ! matching.isMatched(u)) {\n\t\t\t\t\n\t\t\t\t// considered[u]=1,A={empty}\n\t\t\t\t// A = new WeightedDigraph(gOrig.numVertices()/2);\n\t\t\t\tA.clear();\n\t\t\t\t\n\t\t\t\t// forall v in V do exposed[v]=0\n\t\t\t\tArrays.fill(exposed, NOT_AN_INDEX);\n\t\t\t\t\n\t\t\t\t// Construct the auxiliary digraph\n\t\t\t\t\n\t\t\t\t// for all (v,w) in E do\n\t\t\t\tfor (int v = 0; v < gOrig.numVertices(); v++ ) {\n\t\t\t\t\tfor (Edge e : gOrig.eOuts(v)) {\n\t\t\t\t\t\tint w = e.right;\n\t\t\t\t\t\tassert e.left == v : \"vertex correspondence is wrong\";\n\t\t\t\t\t\t\n\t\t\t\t\t\t// if mate[w]=0 and w!=u then exposed[v]=w else if mate[w] !=v,0 then A=union(A,{v,mate[w]})\n\t\t\t\t\t\t// if(mate[w] == NOT_AN_INDEX && w != u){\n\t\t\t\t\t\t// exposed[v] = w;\n\t\t\t\t\t\t// }else if(mate[w] != v && mate[w] != NOT_AN_INDEX){\n\t\t\t\t\t\t// A.addEdge(new Edge(v,mate[w]));\n\t\t\t\t\t\t// }\n\t\t\t\t\t\t\n\t\t\t\t\t\tif ( ! matching.isMatched(w) && w != u) {\n\t\t\t\t\t\t\t// DEBUG(String.format(\"adding (%d,%d) to exposed\\n\", v, w));\n\t\t\t\t\t\t\tif (exposed[v] == NOT_AN_INDEX) {\n\t\t\t\t\t\t\t\texposed[v] = w;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (matching.mate(w) != v && matching.isMatched(w)) {\n\t\t\t\t\t\t\t// DEBUG(String.format(\"adding (%d,%d) to A\\n\", v, matching.mate(w)));\n\t\t\t\t\t\t\tA.add(new Edge(v, matching.mate(w)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tDEBUG(String.format(\"Exposed vertices={%s}\\n\", printExposed()));\n\t\t\t\tif (exposed().size() == 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// forall v in V do seen[v]=0\n\t\t\t\tArrays.fill(seen, false);\n\t\t\t\t\n\t\t\t\t// Q={u}; label[u]=0; if exposed[u]!=0 then augment(u), goto stage;\n\t\t\t\tQ.clear();\n\t\t\t\tQ.add(u);\n\t\t\t\tArrays.fill(label, NOT_AN_INDEX);// unsure whether it was meant to clear label or just unset label[u] OLD_CODE=label[u] = NOT_AN_INDEX;\n\t\t\t\tif (isExposed(u)) {\n\t\t\t\t\taugment(u);\n\t\t\t\t\tDEBUG(String.format(\"new matching %s\\n\", matching.toString()));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// need to figure out how to handle blossom()\n\t\t\t\t\n\t\t\t\t// while Q != {empty} do\n\t\t\t\twhile ( ! Q.isEmpty()) {\n\t\t\t\t\tint v = Q.pop();\n\t\t\t\t\t\n\t\t\t\t\t// forall unlabeled nodes w in V such that (v,w) in A\n\t\t\t\t\tfor (Edge e : A) {\n\t\t\t\t\t\tint w = e.left;\n\t\t\t\t\t\tif (e.right == v && label[w] == NOT_AN_INDEX && label[v] != w) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Q=union(Q,w), label[w]=v\n\t\t\t\t\t\t\tif ( ! Q.contains(w)) {\n\t\t\t\t\t\t\t\tQ.offer(w);\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tcontinue; ///THIS CONTINUE WAS ADDED LATE AT NIGHT\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlabel[w] = v;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// seen[mate[w]] = 1;\n\t\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\t\tint mate = findMate(w);\n\t\t\t\t\t\t\t\tseen[mate] = true;\n\t\t\t\t\t\t\t}catch(Exception err){\n\t\t\t\t\t\t\t\tDEBUG(String.format(\"error marking mate of %d as seen, mate not found\\n\", w));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// if exposed[w]!=0 then augment(w) goto stage;\n\t\t\t\t\t\t\tif (isExposed(w)) {\n\t\t\t\t\t\t\t\taugment(w);\n\t\t\t\t\t\t\t\tDEBUG(String.format(\"new matching %s\\n\", matching.toString()));\n\t\t\t\t\t\t\t\tcontinue stage;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// if seen[w]=1 then blossom(w)\n\t\t\t\t\t\t\tif (seen[w]) {\n\t\t\t\t\t\t\t\tblossom(w);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// remove loops created by the blossoms\n\t\t\t\t\tremoveSelfLoops(A);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}"} {"path":"downloaded/MinMatchingAlg.java","method_name":"exposed","content":"/**\n\t * @param g graph to find the minimal matching of\n\t * @param m initial matching\n\t */\nprivate List<Integer> exposed() {\n\t\tList<Integer> expList = new LinkedList<Integer>();\n\t\tfor (int ii = 0; ii < exposed.length; ii++ ) {\n\t\t\tif (isExposed(ii)) {\n\t\t\t\texpList.add(ii);\n\t\t\t}\n\t\t}\n\t\treturn expList;\n\t}"} {"path":"downloaded/MinMatchingAlg.java","method_name":"printExposed","content":"/**\n\t * @param g graph to find the minimal matching of\n\t * @param m initial matching\n\t */\nprivate String printExposed() {\n\t\tStringBuffer p = new StringBuffer();\n\t\tfor (int exp : exposed()) {\n\t\t\tp.append(exp);\n\t\t\tp.append(\",\");\n\t\t}\n\t\tif (p.length() > 0) {\n\t\t\treturn p.substring(0, p.length() - 1);\n\t\t} else {\n\t\t\treturn \"\";\n\t\t}\n\t}"} {"path":"downloaded/MinMatchingAlg.java","method_name":"isExposed","content":"/**\n\t * @param ii\n\t * @return\n\t */\nprivate boolean isExposed(int ii) {\n\t\treturn exposed[ii] != NOT_AN_INDEX;\n\t}"} {"path":"downloaded/MinMatchingAlg.java","method_name":"findMate","content":"/**\n\t * @param ii\n\t * @return\n\t */\nprivate int findMate(int z) {\n\t\tif (isBlossom(z)) {\n\t\t\tint mate = findMate_R(z);\n\t\t\tif(mate == NOT_AN_INDEX){\n\t\t\t\tthrow new RuntimeException(\"mate to blossom not found\");\n\t\t\t}else{\n\t\t\t\treturn mate;\n\t\t\t}\n\t\t} else {\n\t\t\treturn matching.mate(z);\n\t\t}\n\t}"} {"path":"downloaded/MinMatchingAlg.java","method_name":"findMate_R","content":"/**\n\t * @param z\n\t */\nprivate int findMate_R(int z) {\n\t\tList<Integer> innerCycle = blossoms.get(z).cycle();\n\t\tfor (int vid : innerCycle) {\n\t\t\tif ( ! isBlossom(vid)) {\n\t\t\t\tint mate = matching.mate(vid);\n\t\t\t\tif (mate >= 0 && ! innerCycle.contains(mate)) {\n\t\t\t\t\treturn mate;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int vid : innerCycle) {\n\t\t\tif (isBlossom(vid)) {\n\t\t\t\tint mate = findMate_R(vid);\n\t\t\t\tif(mate != NOT_AN_INDEX){\n\t\t\t\t\treturn mate;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn NOT_AN_INDEX;\n\t}"} {"path":"downloaded/MinMatchingAlg.java","method_name":"nextAvailableBlossom","content":"/**\n\t * @param oldId\n\t * @param newId\n\t */\nprivate int nextAvailableBlossom() {\n\t\tif (largestBlossom == maxBlossomId()) {\n\t\t\tthrow new RuntimeException(\"Out of blossom ids, we used too many!\"); // in this case we should create a better method that reuses blossom ids\n\t\t}\n\t\treturn ++ largestBlossom;\n\t}"} {"path":"downloaded/MinMatchingAlg.java","method_name":"isBlossom","content":"/**\n\t * @param oldId\n\t * @param newId\n\t */\nprivate boolean isBlossom(int v) {\n\t\treturn blossoms.containsKey(v);\n\t}"} {"path":"downloaded/MinMatchingAlg.java","method_name":"reorderBlossomCycle","content":"/**\n\t * @param oldId\n\t * @param newId\n\t */\nprivate List<Integer> reorderBlossomCycle(Blossom b, Integer last) {\n\t\tint first = - 1;\n\t\tboolean started = false;\n\t\tLinkedList<Integer> reordered = new LinkedList<Integer>();\n\t\tList<Integer> lastConnections = vList2IList(gOrig.vOuts(last));\n\t\t\n\t\t// add the cycle from the start of the actually connected vertex\n\t\tfor (Integer v : b.cycle()) {\n\t\t\tif (started) {\n\t\t\t\treordered.add(v);\n\t\t\t} else if (lastConnections.contains(v) || (isBlossom(v) && canConnect_R(blossoms.get(v), lastConnections))) {\n\t\t\t\tstarted = true;\n\t\t\t\tfirst = v;\n\t\t\t\treordered.add(v);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// add the rest\n\t\tfor (int v : b.cycle()) {\n\t\t\tif (v == first) {\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\treordered.add(v);\n\t\t\t}\n\t\t}\n\t\treturn reordered;\n\t}"} {"path":"downloaded/MinMatchingAlg.java","method_name":"canConnect_R","content":"/**\n\t * @param oldId\n\t * @param newId\n\t */\nprivate boolean canConnect_R(Blossom b, List<Integer> lastConnections) {\n\t\tfor (Integer v : b.cycle()) {\n\t\t\tif (lastConnections.contains(v)) {\n\t\t\t\treturn true;\n\t\t\t} else if (isBlossom(v)) {\n\t\t\t\tif (canConnect_R(blossoms.get(v), lastConnections)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}"} {"path":"downloaded/MinMatchingAlg.java","method_name":"vList2IList","content":"/**\n\t * @param oldId\n\t * @param newId\n\t */\nprivate List<Integer> vList2IList(List<Vertex> vList) {\n\t\tList<Integer> iList = new LinkedList<Integer>();\n\t\tfor (Vertex v : vList) {\n\t\t\tiList.add(v.id());\n\t\t}\n\t\treturn iList;\n\t}"} {"path":"downloaded/MinMatchingAlg.java","method_name":"toEdges","content":"/**\n\t * @param b\n\t */\nprivate List<Edge> toEdges(List<Integer> vertices) {\n\t\tif (vertices.size() < 2) {\n\t\t\tthrow new RuntimeException(\"vertices size must be 2 or greater to convert to edge list\");\n\t\t}\n\t\tList<Edge> edges = new LinkedList<Edge>();\n\t\t\n\t\tIterator<Integer> it = vertices.iterator();\n\t\tint v = it.next();\n\t\tint w;\n\t\twhile (it.hasNext()) {\n\t\t\tw = v;\n\t\t\tv = it.next();\n\t\t\tedges.add(new Edge(w, v));\n\t\t}\n\t\treturn edges;\n\t}"} {"path":"downloaded/MinMatchingAlg.java","method_name":"maxBlossomId","content":"/**\n\t * @param b\n\t */\nprivate int maxBlossomId() {\n\t\treturn label.length * 2;\n\t}"} {"path":"downloaded/MinMatchingAlg.java","method_name":"matching","content":"/**\n\t * @param b\n\t */\npublic Matching matching() {\n\t\treturn matching;\n\t}"} {"path":"downloaded/MinMatchingAlg.java","method_name":"DEBUG","content":"/**\n\t * @param b\n\t */\nprivate String DEBUG(String s) {\n\t\tif (debug) {\n\t\t\tSystem.out.print(s);\n\t\t}\n\t\treturn s;\n\t}"} {"path":"downloaded/BusinessUser.java","method_name":"getCompanyName","content":"/**\n     * \n     */\npublic String getCompanyName() {\n        return companyName;\n    }"} {"path":"downloaded/BusinessUser.java","method_name":"toString","content":"/**\n     * \n     */\n@Override\n    public String toString() {\n        StringBuilder sbr = new StringBuilder(super.toString());\n        sbr.deleteCharAt(sbr.length() - 1);\n        sbr.append(\" \" + String.format(\"Company=%s]\", companyName));\n        return (sbr.toString());\n    }"} {"path":"downloaded/UpdateClassManagedBean.java","method_name":"getTimeZone","content":"/**\n     * Creates a new instance of UpdateClassManagedBean\n     */\npublic TimeZone getTimeZone() {  \n        TimeZone timeZone = TimeZone.getDefault();  \n        return timeZone;  \n    }"} {"path":"downloaded/WirePacket.java","method_name":"getId","content":"/**\n\t * Gets this packet's ID\n\t * @return The ID\n\t */\npublic int getId() {\n\t\treturn id;\n\t}"} {"path":"downloaded/WirePacket.java","method_name":"getBytes","content":"/**\n\t * Gets this packet's contents as a byte array\n\t * @return The contents\n\t */\npublic byte[] getBytes() {\n\t\treturn bytes;\n\t}"} {"path":"downloaded/WirePacket.java","method_name":"serialize","content":"/**\n\t * Serializes this packet into a byte buffer\n\t * @return The buffer\n\t */\npublic ByteBuf serialize() {\n\t\tByteBuf buffer = Unpooled.buffer();\n\t\twriteFully(buffer);\n\t\treturn buffer;\n\t}"} {"path":"downloaded/WirePacket.java","method_name":"equals","content":"/**\n\t * Serializes this packet into a byte buffer\n\t * @return The buffer\n\t */\n@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj) return true;\n\n\t\tif (obj instanceof WirePacket) {\n\t\t\tWirePacket that = (WirePacket) obj;\n\t\t\treturn this.id == that.id &&\n\t\t\t\t\tArrays.equals(this.bytes, that.bytes);\n\t\t}\n\n\t\treturn false;\n\t}"} {"path":"downloaded/WirePacket.java","method_name":"hashCode","content":"/**\n\t * Serializes this packet into a byte buffer\n\t * @return The buffer\n\t */\n@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + Arrays.hashCode(bytes);\n\t\tresult = prime * result + id;\n\t\treturn result;\n\t}"} {"path":"downloaded/WirePacket.java","method_name":"toString","content":"/**\n\t * Serializes this packet into a byte buffer\n\t * @return The buffer\n\t */\n@Override\n\tpublic String toString() {\n\t\treturn \"WirePacket[id=\" + id + \", bytes=\" + Arrays.toString(bytes) + \"]\";\n\t}"} {"path":"downloaded/WirePacket.java","method_name":"getBytes","content":"/**\n\t * Serializes this packet into a byte buffer\n\t * @return The buffer\n\t */\nprivate static byte[] getBytes(ByteBuf buffer) {\n\t\tbyte[] array = new byte[buffer.readableBytes()];\n\t\tbuffer.readBytes(array);\n\t\treturn array;\n\t}"} {"path":"downloaded/WirePacket.java","method_name":"fromPacket","content":"/**\n\t * Creates a WirePacket from an existing PacketContainer\n\t * @param packet Existing packet\n\t * @return The resulting WirePacket\n\t */\npublic static WirePacket fromPacket(PacketContainer packet) {\n\t\tcheckNotNull(packet, \"packet cannot be null!\");\n\n\t\tint id = packet.getType().getCurrentId();\n\n\t\tByteBuf buffer = PacketContainer.createPacketBuffer();\n\t\tMethod write = MinecraftMethods.getPacketWriteByteBufMethod();\n\n\t\ttry {\n\t\t\twrite.invoke(packet.getHandle(), buffer);\n\t\t} catch (ReflectiveOperationException ex) {\n\t\t\tthrow new RuntimeException(\"Failed to serialize packet contents.\", ex);\n\t\t}\n\n\t\treturn new WirePacket(id, getBytes(buffer));\n\t}"} {"path":"downloaded/WirePacket.java","method_name":"fromPacket","content":"/**\n\t * Creates a WirePacket from an existing Minecraft packet\n\t * @param packet Existing Minecraft packet\n\t * @return The resulting WirePacket\n\t * @throws IllegalArgumentException If the packet is null or not a Minecraft packet\n\t */\npublic static WirePacket fromPacket(Object packet) {\n\t\tcheckNotNull(packet, \"packet cannot be null!\");\n\t\tcheckArgument(MinecraftReflection.isPacketClass(packet), \"packet must be a Minecraft packet\");\n\n\t\tPacketType type = PacketType.fromClass(packet.getClass());\n\t\tint id = type.getCurrentId();\n\n\t\tByteBuf buffer = PacketContainer.createPacketBuffer();\n\t\tMethod write = MinecraftMethods.getPacketWriteByteBufMethod();\n\n\t\ttry {\n\t\t\twrite.invoke(packet, buffer);\n\t\t} catch (ReflectiveOperationException ex) {\n\t\t\tthrow new RuntimeException(\"Failed to serialize packet contents.\", ex);\n\t\t}\n\n\t\treturn new WirePacket(id, getBytes(buffer));\n\t}"} {"path":"downloaded/WirePacket.java","method_name":"readVarInt","content":"/**\n\t * Creates a WirePacket from an existing Minecraft packet\n\t * @param packet Existing Minecraft packet\n\t * @return The resulting WirePacket\n\t * @throws IllegalArgumentException If the packet is null or not a Minecraft packet\n\t */\npublic static int readVarInt(ByteBuf input) {\n\t\tcheckNotNull(input, \"input cannot be null!\");\n\n        int i = 0;\n        int j = 0;\n\n        byte b0;\n\n        do {\n            b0 = input.readByte();\n            i |= (b0 & 127) << j++ * 7;\n            if (j > 5) {\n                throw new RuntimeException(\"VarInt too big\");\n            }\n        } while ((b0 & 128) == 128);\n\n        return i;\n\t}"} {"path":"downloaded/EventActionInfo.java","method_name":"getType","content":"/**\n      * Title: EventActionInfo\n      * Description: Description of the constructor\n      * \n      */\npublic String getType() {\n        return _oType;\n    }"} {"path":"downloaded/EventActionInfo.java","method_name":"getAction","content":"/**\n      * Title: EventActionInfo\n      * Description: Description of the constructor\n      * \n      */\npublic ActionList getAction() {\n        return _oAction;\n    }"} {"path":"downloaded/EventActionInfo.java","method_name":"getDirection","content":"/**\n      * Title: EventActionInfo\n      * Description: Description of the constructor\n      * \n      */\npublic DirectionList getDirection() {\n        return _oDirection;\n    }"} {"path":"downloaded/EventActionInfo.java","method_name":"getContent","content":"/**\n      * Title: EventActionInfo\n      * Description: Description of the constructor\n      * \n      */\npublic String getContent() {\n        return _oContent;\n    }"} {"path":"downloaded/EventActionInfo.java","method_name":"getIterations","content":"/**\n      * Title: EventActionInfo\n      * Description: Description of the constructor\n      * \n      */\npublic Integer getIterations() {\n        return _oIterations;\n    }"} {"path":"downloaded/EventActionInfo.java","method_name":"getAsynchronous","content":"/**\n      * Title: EventActionInfo\n      * Description: Description of the constructor\n      * \n      */\npublic Boolean getAsynchronous() {\n        return _oAsynchronous;\n    }"} {"path":"downloaded/EventActionInfo.java","method_name":"validate","content":"/**\n      * Title: validate\n      * Description: Description of the method\n      * \n      */\npublic boolean validate() throws Exception {\n        return true;\n    }"} {"path":"downloaded/EventActionInfo.java","method_name":"writeXML","content":"/**\n      * Title: writeXML\n      * Description: Creates XML from Object instance\n      * \n      */\npublic org.dom4j.Element writeXML() throws Exception {\n        return writeXML(sObjName);\n    }"} {"path":"downloaded/EventActionInfo.java","method_name":"writeXML","content":"/**\n      * Title: writeXML\n      * Description: Creates XML from Object instance\n      * \n      */\npublic org.dom4j.Element writeXML(String name) throws Exception {\n        org.dom4j.Element el = org.dom4j.DocumentHelper.createElement(name);\n\n        if(getType() != null)\n            el.addAttribute(\"type\", getType());\n        if(getAction() != null)\n            el.addAttribute(\"action\", getAction().toString());\n        if(getDirection() != null)\n            el.addAttribute(\"direction\", getDirection().toString());\n        if(getContent() != null)\n            el.addAttribute(\"content\", getContent());\n        if(getIterations() != null)\n            el.addAttribute(\"iterations\", org.jbrain.xml.binding._TypeConverter.buildInteger(getIterations()));\n        if(getAsynchronous() != null)\n            el.addAttribute(\"asynchronous\", org.jbrain.xml.binding._TypeConverter.buildBoolean(getAsynchronous()));\n        return el;\n    }"} {"path":"downloaded/Adress.java","method_name":"getAdress","content":"/**\n     * @return the adress\n     */\npublic String getAdress() {\n        return adress;\n    }"} {"path":"downloaded/Adress.java","method_name":"getCoord","content":"/**\n     * @return the coord\n     */\npublic Coordinate getCoord() {\n        return coord;\n    }"} {"path":"downloaded/InventoryService.java","method_name":"load","content":"/**\n     * Load the inventory for the player\n     *\n     * @param player Player to load\n     */\npublic PlayerInventory load(Player player) {\n        return new PlayerInventory(\n            player,\n            repository.byPlayer(player)\n                .stream()\n                .map(\n                    entity -> new LoadedItem(\n                        entity,\n                        service.retrieve(entity.itemTemplateId(), entity.effects())\n                    )\n                )\n                .collect(Collectors.toList())\n        );\n    }"} {"path":"downloaded/SwitchYardServiceInvoker.java","method_name":"getServiceDomain","content":"/** Gets the service domain.\n     * \n     * @return the service domain */\npublic ServiceDomain getServiceDomain() {\n        return _serviceDomain;\n    }"} {"path":"downloaded/SwitchYardServiceInvoker.java","method_name":"getTargetNamespace","content":"/** Gets the target namespace.\n     * \n     * @return the target namespace */\npublic String getTargetNamespace() {\n        return _targetNamespace;\n    }"} {"path":"downloaded/SwitchYardServiceInvoker.java","method_name":"invoke","content":"/** Invokes the request and returns the response.\n     * \n     * @param request the request\n     * @return the response */\npublic SwitchYardServiceResponse invoke(SwitchYardServiceRequest request) {\n        Map<String, Object> contextOut = new HashMap<String, Object>();\n        Object contentOut = null;\n        Object fault = null;\n        try {\n            QName serviceName = request.getServiceName();\n            if (serviceName == null) {\n                throw CommonKnowledgeMessages.MESSAGES.serviceNameNull();\n            } else if (Strings.trimToNull(serviceName.getNamespaceURI()) == null) {\n                String tns = getTargetNamespace();\n                if (tns != null) {\n                    serviceName = XMLHelper.createQName(tns, serviceName.getLocalPart());\n                }\n            }\n            ServiceDomain serviceDomain = getServiceDomain();\n            if (serviceDomain == null) {\n                throw CommonKnowledgeMessages.MESSAGES.serviceDomainNull();\n            }\n            ServiceReference serviceReference = serviceDomain.getServiceReference(serviceName);\n            if (serviceReference == null) {\n                throw CommonKnowledgeMessages.MESSAGES.serviceReferenceNull(serviceName.toString());\n            }\n            final Exchange exchangeIn;\n            FaultHandler handler = new FaultHandler();\n            String operationName = request.getOperationName();\n            if (operationName != null) {\n                exchangeIn = serviceReference.createExchange(operationName, handler);\n            } else {\n                exchangeIn = serviceReference.createExchange(handler);\n            }\n            Message messageIn = exchangeIn.createMessage();\n            Context contextIn = exchangeIn.getContext(messageIn);\n            for (Map.Entry<String, Object> entry : request.getContext().entrySet()) {\n                contextIn.setProperty(entry.getKey(), entry.getValue());\n            }\n            Object contentIn = request.getContent();\n            if (contentIn != null) {\n                messageIn.setContent(contentIn);\n            }\n            exchangeIn.send(messageIn);\n            if (ExchangePattern.IN_OUT.equals(exchangeIn.getContract().getConsumerOperation().getExchangePattern())) {\n                Exchange exchangeOut = handler.waitForOut();\n                Message messageOut = exchangeOut.getMessage();\n                contentOut = messageOut.getContent();\n                for (Property property : exchangeOut.getContext(messageOut).getProperties()) {\n                    contextOut.put(property.getName(), property.getValue());\n                }\n            }\n            fault = handler.getFault();\n        } catch (Throwable t) {\n            fault = t;\n        }\n        return new SwitchYardServiceResponse(contentOut, contextOut, fault);\n    }"} {"path":"downloaded/AttractionAdapter.java","method_name":"onCreateViewHolder","content":"/**\n     * @param attractions         A list of Attraction objects\n     * @param onItemClickListener The constructor also receives our custom onItemClickListener that\n     *                            implements its interface\n     */\n@Override\n    public AttractionViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        // create a new item view\n        View attraction_item_view = LayoutInflater.from(parent.getContext())\n                .inflate(R.layout.recycler_item, parent, false);\n\n        return new AttractionViewHolder(attraction_item_view);\n    }"} {"path":"downloaded/AttractionAdapter.java","method_name":"getItemCount","content":"/**\n     * @param attractions         A list of Attraction objects\n     * @param onItemClickListener The constructor also receives our custom onItemClickListener that\n     *                            implements its interface\n     */\n@Override\n    public int getItemCount() {\n        return mAttractions.size();\n    }"} {"path":"downloaded/MarketByOrderClose.java","method_name":"encode","content":"/**\n     * Encode a market by order close message.\n     * \n     * @param encodeIter The Encode Iterator\n     * \n     * @return {@link CodecReturnCodes}\n     */\n@Override\n    public int encode(EncodeIterator encodeIter)\n    {\n        closeMsg.clear();\n        closeMsg.msgClass(MsgClasses.CLOSE);\n        closeMsg.streamId(streamId());\n        closeMsg.domainType(DomainTypes.MARKET_BY_ORDER);\n        closeMsg.containerType(DataTypes.NO_DATA);\n\n        return closeMsg.encode(encodeIter);\n    }"} {"path":"downloaded/MarketByOrderClose.java","method_name":"decode","content":"/**\n     * Decode a UPA message into a market by order close message.\n     * \n     * @param dIter The Decode Iterator\n     * \n     * @return UPA return value\n     */\n@Override\n    public int decode(DecodeIterator dIter, Msg msg)\n    {\n        clear();\n        if (msg.msgClass() != MsgClasses.CLOSE)\n            return CodecReturnCodes.FAILURE;\n\n        streamId(msg.streamId());\n\n        return CodecReturnCodes.SUCCESS;\n    }"} {"path":"downloaded/MarketByOrderClose.java","method_name":"toString","content":"/**\n     * Decode a UPA message into a market by order close message.\n     * \n     * @param dIter The Decode Iterator\n     * \n     * @return UPA return value\n     */\npublic String toString()\n    {\n        StringBuilder toStringBuilder = super.buildStringBuffer();\n        toStringBuilder.insert(0, \"MarketByOrderClose: \\n\");\n\n        toStringBuilder.append(tabChar);\n        toStringBuilder.append(\"domain: \");\n        toStringBuilder.append(DomainTypes.toString(DomainTypes.MARKET_BY_ORDER));\n        toStringBuilder.append(eolChar);\n        return toStringBuilder.toString();\n    }"} {"path":"downloaded/MarketByOrderClose.java","method_name":"domainType","content":"/**\n     * Decode a UPA message into a market by order close message.\n     * \n     * @param dIter The Decode Iterator\n     * \n     * @return UPA return value\n     */\n@Override\n    public int domainType()\n    {\n        return DomainTypes.MARKET_BY_ORDER;\n    }"} {"path":"downloaded/RicercareExtra.java","method_name":"execute","content":"/**\n     * Costruttore della classe.\n     *\n     * @param request\n     *      Request con parametri.\n     * */\n@Override\n    public final ResponseInt execute() {\n        ComplexResponse<ExtraTO> response =\n                new ComplexResponse<ExtraTO>();\n\n        ExtraTO to =\n                request.getParameters().get(0);\n\n        to = gm.ricercareDatiExtra(to.id);\n\n        response.addParameter(to);\n\n        return response;\n    }"} {"path":"downloaded/MainWindow.java","method_name":"dow getInst","content":"\n\t\n\t/**\n\t * Returns the singleton instance of MainWindow. This is enforced to prevent more\n\t *  than one JFrame from being created.\n\t * Creates a JFrame that uses a JLayeredPane as its content pane and a BorderLayout\n\t *  as its LayoutManager. The window's dimensions are larger than the defined display\n\t *  area, by a pixel size equal to its left(width) and top(height) borders. The defined\n\t *  background image is displayed on layer \"1\". All other components should be added to\n\t *  layers greater than \"1\".\n\t * @param width An int representing the number of pixels in the display area's width.\n\t * @param height An int representing the number of pixels in the display area's height.\n\t * @param defaultBackgroundImage A BufferedImage used as this JFrame's background image.\n\t * @param manager The GUIManager object that will manage this MainWindow.\n\t * @return The singleton instance of MainWindow.\n\n*/\n\tpublic static MainWindow getInstance(GUIManager manager, int width, int height, BufferedImage defaultBackgroundImage){\n\t\tif(mainWindow == null)\n\t\t\tmainWindow = new MainWindow(manager, width, height, defaultBackgroundImage);\n\t\treturn mainWindow"} {"path":"downloaded/MainWindow.java","method_name":"ger getMan","content":"\n\t\n\t/**\n\t * Used to obtain the GUIManager object that manages this MainWindow. This is used\n\t *   to access settings or to access other classes that may alter the MainWindow.\n\t * @return The GUIManager object that manages this MainWindow.\n\n*/\n\tpublic GUIManager getManager(){\n\t\treturn manager"} {"path":"downloaded/MainWindow.java","method_name":"age getBackgroundI","content":"\n\t\n\t/**\n\t * Used to obtain the BufferedImage used for this JFrame's background image.\n\t * @return The BufferedImage used for this JFrame's background image.\n\n*/\n\tpublic BufferedImage getBackgroundImage(){\n\t\treturn currentBackgroundImage"} {"path":"downloaded/MainWindow.java","method_name":"ane getConta","content":"\n\t\n\t/**\n\t * This method is made available for convenience only. It is preferable to use MainWindow.addLayer().\n\t *  Returns the JLayeredPane that is used as the primary content pane. This method does not override\n\t *  the private method of JLayeredPane's parent, Window.\n\t * NOTE: DO NOT change any layer less than or equal to 1.\n\t * @return The JLayeredPane that is used for MainWindow's primary content pane.\n\n*/\n\tpublic JLayeredPane getContainer(){\n\t\treturn contentPane"} {"path":"downloaded/AtomIterator.java","method_name":"getAtom","content":"/**\n\t * \n\t * @return the atom that the iterator points to (assume it exists)\n\t */\npublic Atom getAtom() {\n\t\treturn iterator.getElement();\n\t}"} {"path":"downloaded/AtomIterator.java","method_name":"isAtStart","content":"/**\n\t * Move really the iterator to the next atom if it exists.\n\t * \n\t */\npublic boolean isAtStart() {\n\t\treturn iterator.isAtStart();\n\t}"} {"path":"downloaded/AtomIterator.java","method_name":"isAtEnd","content":"/**\n\t * Move really the iterator to the next atom if it exists.\n\t * \n\t */\npublic boolean isAtEnd() {\n\t\treturn iterator.isAtEnd();\n\t}"} {"path":"downloaded/AtomIterator.java","method_name":"equals","content":"/**\n\t * Move really the iterator to the next atom if it exists.\n\t * \n\t */\npublic boolean equals( AtomIterator atomIterator ) {\n\t\treturn iterator.equals( atomIterator.iterator );\n\t}"} {"path":"downloaded/AtomIterator.java","method_name":"equals","content":"/**\n\t * Move really the iterator to the next atom if it exists.\n\t * \n\t */\npublic boolean equals( SimpleIterator<Atom> iterator ) {\n\t\treturn this.iterator.equals( iterator );\n\t}"} {"path":"downloaded/AtomIterator.java","method_name":"toString","content":"/**\n\t * Move really the iterator to the next atom if it exists.\n\t * \n\t */\npublic String toString() {\n\t\tif( iterator == null ) {\n\t\t\treturn \"null_iterator\";\n\t\t} else {\n\t\t\treturn iterator.toString();\n\t\t}\n\t}"} {"path":"downloaded/WrapperFrechetDistribution.java","method_name":"] getNam","content":"\n\t/**\n\t * Konstruktor der Klasse\n\t \n\n\t@Override\n\tprotected String[] getNames() {\n\t\treturn DistributionTools.DistFrechet;\n"} {"path":"downloaded/WrapperFrechetDistribution.java","method_name":"g getThumbnailImageNa","content":"\n\t/**\n\t * Konstruktor der Klasse\n\t \n\n\t@Override\n\tprotected String getThumbnailImageName() {\n\t\treturn \"frechet.png\";\n"} {"path":"downloaded/WrapperFrechetDistribution.java","method_name":"g getWikipediaU","content":"\n\t/**\n\t * Konstruktor der Klasse\n\t \n\n\t@Override\n\tprotected String getWikipediaURL() {\n\t\treturn DistributionTools.DistFrechetWikipedia;\n"} {"path":"downloaded/WrapperFrechetDistribution.java","method_name":"o getInfoI","content":"\n\t/**\n\t * Konstruktor der Klasse\n\t \n\n\t@Override\n\tprotected DistributionWrapperInfo getInfoInt(AbstractRealDistribution distribution) {\n\t\tfinal FrechetDistributionImpl frechetDist=(FrechetDistributionImpl)distribution;\n\t\tfinal double delta=frechetDist.delta;\n\t\tfinal double beta=frechetDist.beta;\n\t\tfinal double alpha=frechetDist.alpha;\n\t\tfinal String info1=DistributionTools.DistLocation+\"=\"+NumberTools.formatNumber(delta,3)+\"; \"+DistributionTools.DistScale+\"=\"+NumberTools.formatNumber(beta,3)+\"; Form=\"+NumberTools.formatNumber(alpha,3);\n\t\treturn new DistributionWrapperInfo(distribution,frechetDist.getSkewness(),frechetDist.getMode(),info1,null);\n"} {"path":"downloaded/WrapperFrechetDistribution.java","method_name":"n getDistributi","content":"\n\t/**\n\t * Konstruktor der Klasse\n\t \n\n\t@Override\n\tpublic AbstractRealDistribution getDistribution(double mean, double sd) {\n\t\treturn null;\n"} {"path":"downloaded/WrapperFrechetDistribution.java","method_name":"n getDefaultDistributi","content":"\n\t/**\n\t * Konstruktor der Klasse\n\t \n\n\t@Override\n\tpublic AbstractRealDistribution getDefaultDistribution() {\n\t\treturn new FrechetDistributionImpl(0,20,1);\n"} {"path":"downloaded/WrapperFrechetDistribution.java","method_name":"n setMeanI","content":"\n\t/**\n\t * Konstruktor der Klasse\n\t \n\n\t@Override\n\tprotected AbstractRealDistribution setMeanInt(AbstractRealDistribution distribution, double mean) {\n\t\treturn null;\n"} {"path":"downloaded/WrapperFrechetDistribution.java","method_name":"n setStandardDeviationI","content":"\n\t/**\n\t * Konstruktor der Klasse\n\t \n\n\t@Override\n\tprotected AbstractRealDistribution setStandardDeviationInt(AbstractRealDistribution distribution, double sd) {\n\t\treturn null;\n"} {"path":"downloaded/WrapperFrechetDistribution.java","method_name":"e getParameterI","content":"\n\t/**\n\t * Konstruktor der Klasse\n\t \n\n\t@Override\n\tprotected double getParameterInt(AbstractRealDistribution distribution, int nr) {\n\t\tif (nr==1) return ((FrechetDistributionImpl)distribution).delta;\n\t\tif (nr==2) return ((FrechetDistributionImpl)distribution).beta;\n\t\tif (nr==3) return ((FrechetDistributionImpl)distribution).alpha;\n\t\treturn 0.0;\n"} {"path":"downloaded/WrapperFrechetDistribution.java","method_name":"n setParameterI","content":"\n\t/**\n\t * Konstruktor der Klasse\n\t \n\n\t@Override\n\tprotected AbstractRealDistribution setParameterInt(AbstractRealDistribution distribution, int nr, double value) {\n\t\tfinal FrechetDistributionImpl old=(FrechetDistributionImpl)distribution;\n\t\tif (nr==1) return new FrechetDistributionImpl(value,old.beta,old.alpha);\n\t\tif (nr==2) return new FrechetDistributionImpl(old.delta,value,old.alpha);\n\t\tif (nr==3) return new FrechetDistributionImpl(old.delta,old.beta,value);\n\t\treturn null;\n"} {"path":"downloaded/WrapperFrechetDistribution.java","method_name":"g getToStringDa","content":"\n\t/**\n\t * Konstruktor der Klasse\n\t \n\n\t@Override\n\tprotected String getToStringData(AbstractRealDistribution distribution) {\n\t\treturn NumberTools.formatSystemNumber(((FrechetDistributionImpl)distribution).delta)+\";\"+NumberTools.formatSystemNumber(((FrechetDistributionImpl)distribution).beta)+\";\"+NumberTools.formatSystemNumber(((FrechetDistributionImpl)distribution).alpha);\n"} {"path":"downloaded/WrapperFrechetDistribution.java","method_name":"n fromStri","content":"\n\t/**\n\t * Konstruktor der Klasse\n\t \n\n\t@Override\n\tpublic AbstractRealDistribution fromString(String data, double maxXValue) {\n\t\tfinal double[] values=getDoubleArray(data);\n\t\tif (values.length!=3) return null;\n\t\treturn new FrechetDistributionImpl(values[0],values[1],values[2]);\n"} {"path":"downloaded/WrapperFrechetDistribution.java","method_name":"n cloneI","content":"\n\t/**\n\t * Konstruktor der Klasse\n\t \n\n\t@Override\n\tprotected AbstractRealDistribution cloneInt(AbstractRealDistribution distribution) {\n\t\treturn new FrechetDistributionImpl((FrechetDistributionImpl)distribution);\n"} {"path":"downloaded/WrapperFrechetDistribution.java","method_name":"n compareI","content":"\n\t/**\n\t * Konstruktor der Klasse\n\t \n\n\t@Override\n\tprotected boolean compareInt(AbstractRealDistribution distribution1, AbstractRealDistribution distribution2) {\n\t\tif (Math.abs(((FrechetDistributionImpl)distribution1).delta-((FrechetDistributionImpl)distribution2).delta)>DistributionTools.MAX_ERROR) return false;\n\t\tif (Math.abs(((FrechetDistributionImpl)distribution1).beta-((FrechetDistributionImpl)distribution2).beta)>DistributionTools.MAX_ERROR) return false;\n\t\tif (Math.abs(((FrechetDistributionImpl)distribution1).alpha-((FrechetDistributionImpl)distribution2).alpha)>DistributionTools.MAX_ERROR) return false;\n\t\treturn true;\n"} {"path":"downloaded/Posicion.java","method_name":"compare","content":"/**\n         * Dice cual de los dos barcos ha quedado mejor en la clasificacion\n         * PreCnd: Los barcos han de ser del mismo tipo\n         *\n         * @param pos1\n         * @param pos2\n         * @return\n         */\n@Override\n        public int compare(Posicion pos1, Posicion pos2) {\n\n            /*Si ambos tiempos no acarrean la maxima puntuacion */\n            if ((!pos1.getPenal().isMaxPointsPenal())\n                    && (!pos2.getPenal().isMaxPointsPenal())) {\n                /**\n                 * Si NO compiten en tiempo compensado\n                 */\n                if (pos1.getBarco().getTipo().getCompiteTmpReal()) {\n                    //TODO Probar bien esto!\n                    return (int) ponderarPenalizacion(pos1.getSegTiempo(),\n                            pos1.getPenal(), pos1.getSegPenalizacion())\n                            .compareTo(ponderarPenalizacion(pos2.getSegTiempo(),\n                                            pos2.getPenal(), pos2.getSegPenalizacion()));\n                } else {\n\n                    return ponderarPenalizacion(\n                            calcTiempoCompensado(pos1.getSegTiempo(), pos1.getBarco(), pos1.getManga()),\n                            pos1.getPenal(),\n                            pos1.getSegPenalizacion())\n                            .compareTo(ponderarPenalizacion(calcTiempoCompensado(\n                                                    pos2.getSegTiempo(),\n                                                    pos2.getBarco(), pos2.getManga()),\n                                            pos2.getPenal(),\n                                            pos2.getSegPenalizacion()));\n                }\n            } else {\n                /**\n                 * Situacion en la que uno de ellos esta penalizado o ambos lo\n                 * están\n                 */\n\n                if (pos1.getPenal() == Posicion.Penalizacion.NAN) {\n\n                    return -1;\n\n                } else if (pos2.getPenal() == Posicion.Penalizacion.NAN) {\n\n                    return 1;\n\n                } else {\n\n                    return 0;\n\n                }\n\n            }\n        "} {"path":"downloaded/Posicion.java","method_name":" calcTiempoCompensad","content":" /**\n         * Devuelve el tiempo computado en segundos\n         *\n         * @param tiempoReal\n         * @param barco\n         * @return\n         *\n private Long calcTiempoCompensado(Long tiempoReal, Barco barco, Manga manga) {\n            //Tiempo compensado = Tiempo Real + GPH * Nº de millas manga.\n            Float res = tiempoReal + barco.getGph() * manga.getMillas();\n            return (long) Math.round(res);\n       "} {"path":"downloaded/Posicion.java","method_name":"g ponderarPenalizaci","content":" /**\n         * Devuelve el tiempo computado en segundos\n         *\n         * @param tiempoReal\n         * @param barco\n         * @return\n         *\n  private Long ponderarPenalizacion(Long tiempo, Penalizacion penal, Long tiempoPenal) {\n            //ZFP 20% penaliza\n            switch (penal) {\n                case ZFP:\n                    tiempo = Math.round(1.2 * tiempo);\n                    break;\n                case RDG:\n                case DPI:\n                case SCP:\n                    tiempo += tiempoPenal;\n                    break;\n\n            }\n            return tiempo;\n       "} {"path":"downloaded/UserUserProfilePK.java","method_name":"hashCode","content":"/**\n   *\n   */\n@Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + userId;\n    result = prime * result + userProfileId;\n    return result;\n  }"} {"path":"downloaded/UserUserProfilePK.java","method_name":"equals","content":"/**\n   *\n   */\n@Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    UserUserProfilePK other = (UserUserProfilePK) obj;\n    if (userId != other.userId)\n      return false;\n    return userProfileId == other.userProfileId;\n  }"} {"path":"downloaded/CollectionBackedTagFinderServiceTest.java","method_name":"testFindByTwoPossibleNamesWithSyntheticAccessor","content":"/**\n\t * This is the deadly test that check that synthetic getter calls work\n\t * correctly\n\t */\n@Test\n\tpublic void testFindByTwoPossibleNamesWithSyntheticAccessor() {\n\t\tTag a = new Tag(A);\n\t\ttagService.create(a);\n\t\tTag b = tagService.create(new Tag(B));\n\t\tTag c = tagService.create(new Tag(C));\n\t\tIterable<Tag> values = tagService.find().matching(\n\t\t\t\tnew QueryBuilder<TagInformer>() {\n\n\t\t\t\t\tpublic QueryExpression createMatchingExpression(\n\t\t\t\t\t\t\tTagInformer object) {\n\t\t\t\t\t\tStringFieldInformer field = object.getText();\n\t\t\t\t\t\treturn Expressions.or(field.equalsTo(A), field\n\t\t\t\t\t\t\t\t.equalsTo(B));\n\t\t\t\t\t}\n\t\t\t\t}).getAll();\n\t\tassertThat(values, IsInstanceOf.instanceOf(List.class));\n\t\tList<Tag> valuesAscollection = (List<Tag>) values;\n\t\tassertThat(valuesAscollection.size(), Is.is(2));\n\t\t// Here, beware to elements insertion order, due to collection class\n\t\tassertThat(valuesAscollection.get(0), Is.is(a));\n\t\tassertThat(valuesAscollection.get(1), Is.is(b));\n\t}"} {"path":"downloaded/CollectionBackedTagFinderServiceTest.java","method_name":"testFindAndProject","content":"/**\n\t * Ensure projectores work correctly by returning list of tag text, instead of tags\n\t */\n@Test\n\tpublic void testFindAndProject() {\n\t\tTag a = new Tag(A);\n\t\ttagService.create(a);\n\t\tTag b = tagService.create(new Tag(B));\n\t\tTag c = tagService.create(new Tag(C));\n\t\tIterable<String> values = tagService.find().matching(\n\t\t\t\tnew QueryBuilder<TagInformer>() {\n\n\t\t\t\t\tpublic QueryExpression createMatchingExpression(\n\t\t\t\t\t\t\tTagInformer object) {\n\t\t\t\t\t\treturn object.getText().differentFrom(null);\n\t\t\t\t\t}\n\t\t\t\t}).projectOn(new ProjectionBuilder<String, Tag, TagInformer>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String project(TagInformer informer, ValueFetcher fetcher) {\n\t\t\t\t\t\treturn fetcher.getValue(informer.getText());\n\t\t\t\t\t}\n\t\t\t\t}).getAll();\n\t\tassertThat(values, IsCollectionContaining.hasItems(A, B, C));\n\t}"} {"path":"downloaded/CollectionBackedTagFinderServiceTest.java","method_name":"ensureBug77IsSolved","content":"/**\n\t * Ensure projectores work correctly by returning list of tag text, instead of tags\n\t */\n@Test\n\tpublic void ensureBug77IsSolved() {\n\t\tTag a = new Tag(A);\n\t\ttagService.create(a);\n\t\tTag b = tagService.create(new Tag(B));\n\t\tTag c = tagService.create(new Tag(C));\n\t\tIterable<Tag> values = tagService.find().matching(\n\t\t\t\tnew QueryBuilder<TagInformer>() {\n\n\t\t\t\t\tpublic QueryExpression createMatchingExpression(\n\t\t\t\t\t\t\tTagInformer object) {\n\t\t\t\t\t\treturn object.getText().equalsToIgnoreCase(\"a\");\n\t\t\t\t\t}\n\t\t\t\t}).getAll();\n\t\tassertThat(values, IsCollectionContaining.hasItems(a));\n\t\tassertThat(values, IsNot.not(IsCollectionContaining.hasItems(b, c)));\n\t}"} {"path":"downloaded/CollectionBackedTagFinderServiceTest.java","method_name":"testNoopProject","content":"/**\n\t * This is the deadly test that check that synthetic getter calls work\n\t * correctly\n\t */\n@Test\n\tpublic void testNoopProject() {\n\t\tTag a = new Tag(A);\n\t\ttagService.create(a);\n\t\tTag b = tagService.create(new Tag(B));\n\t\tTag c = tagService.create(new Tag(C));\n\t\tIterable<Tag> values = tagService.find().matching(\n\t\t\t\tnew QueryBuilder<TagInformer>() {\n\n\t\t\t\t\tpublic QueryExpression createMatchingExpression(\n\t\t\t\t\t\t\tTagInformer object) {\n\t\t\t\t\t\treturn object.getText().differentFrom(null);\n\t\t\t\t\t}\n\t\t\t\t}).projectOn(new NoopProjectionBuilder<Tag, TagInformer>()).getAll();\n\t\tassertThat(values, IsCollectionContaining.hasItems(a, b, c));\n\t}"} {"path":"downloaded/DrawComponents.java","method_name":"isNotPosibleMove","content":"/**\n     * Method to check if is posible move to gived direction\n     */\npublic boolean isNotPosibleMove(final int type) {\n        switch (type) {\n            case KeyEvent.VK_LEFT:\n                isNotPossible = pacman.existWall(pacman.getX() - SIZE_ELEMENT, pacman.getY());\n                break;\n            case KeyEvent.VK_RIGHT:\n                isNotPossible = pacman.existWall(pacman.getX() + SIZE_ELEMENT, pacman.getY());\n                break;\n            case KeyEvent.VK_UP:\n                isNotPossible = pacman.existWall(pacman.getX(), pacman.getY() - SIZE_ELEMENT);\n                break;\n            case KeyEvent.VK_DOWN:\n                isNotPossible = pacman.existWall(pacman.getX(), pacman.getY() + SIZE_ELEMENT);\n                break;\n            default:\n                break;\n        }\n        return isNotPossible;\n    }"} {"path":"downloaded/FactoryDao.java","method_name":" T get","content":"\t\n\t/**\n\t * Cerca tra le varie implementazioni una che vada bene per l'utente e la commessa.\n\t * E' necessario che l'utente disponga dei permessi per poterla usare.\n\t\n/\n\tpublic T getDao(UtenteUtenti user, String risorsaCommessa) {\n\t\treturn getDao(user, risorsaCommessa, true);"} {"path":"downloaded/FactoryDao.java","method_name":" T get","content":"\t\n\t/**\n\t * Cerca tra le varie implementazioni una che vada bene per l'utente e la commessa.\n\t * E' possibile specificare se devono essere controllati i permessi dell'utente per la commessa specificata.\n\t\n/\n\tpublic T getDao(UtenteUtenti user, String risorsaCommessa, boolean checkPermessoCommessa) {\n\t\tCommessaUtenti commessa = checkPermessoCommessa ? loginManager.getCommessaByUserAndResource(user, risorsaCommessa) : loginManager.getCommessaByResource(risorsaCommessa);\n\t\tif (commessa != null)\n\t\t\treturn findDao(user, commessa);\n\t\telse {\n\t\t\tlogger.warn(NESSUNA_COMMESSA);\n\t\t\tthrow new CustomException(NESSUNA_COMMESSA);\n\t\t}"} {"path":"downloaded/BinClaw.java","method_name":"goAllUp","content":"/**\n\t * Move the claw all the way to the top until it triggers its top limit switch\n\t * \n\t * @return Returns true when it has stopped\n\t */\npublic boolean goAllUp() {\n\t\tif ( topLimitSwitch.get() ) {\n\t\t\tstop();\n\t\t}\n\t\telse {\n\t\t\tup();\n\t\t}\n\t\t\n\t\treturn topLimitSwitch.get();\n\t}"} {"path":"downloaded/BinClaw.java","method_name":"goAllDown","content":"/**\n\t * Move the claw down until it triggers its bottom limit switch\n\t * @return Returns true when it has stopped\n\t */\npublic boolean goAllDown() {\n\t\tif ( botLimitSwitch.get() ) {\n\t\t\tstop();\n\t\t}\n\t\telse{\n\t\t\tdown();\n\t\t}\n\t\t\n\t\treturn botLimitSwitch.get();\n\t}"} {"path":"downloaded/AddToCartServlet.java","method_name":"getServletInfo","content":"/**\n     * Returns a short description of the servlet.\n     *\n     * @return a String containing servlet description\n     */\n@Override\n    public String getServletInfo() {\n        return \"Short description\";\n    }"} {"path":"downloaded/PlaceJSONParser.java","method_name":"parse","content":"/**\n     * Receives a JSONObject and returns a list\n     */\npublic List<HashMap<String, String>> parse(JSONObject jObject) {\n\n        JSONArray jPlaces = null;\n        try {\n            /** Retrieves all the elements in the 'places' array */\n            jPlaces = jObject.getJSONArray(\"predictions\");\n        } catch (JSONException e) {\n            e.printStackTrace();\n        }\n        /** Invoking getPlaces with the array of json object\n         * where each json object represent a place\n         */\n        return getPlaces(jPlaces);\n    }"} {"path":"downloaded/PlaceJSONParser.java","method_name":"getPublicHolidays","content":"/**\n     * Receives a JSONObject and returns a list\n     */\npublic List<HashMap<String, String>> getPublicHolidays(JSONArray jPlaces) {\n        int placesCount = jPlaces.length();\n        List<HashMap<String, String>> publicHolidayList = new ArrayList<HashMap<String, String>>();\n        HashMap<String, String> publicHoliday = null;\n\n        /** Taking each place, parses and adds to list object */\n        for (int i = 0; i < placesCount; i++) {\n            try {\n                /** Call getPlace with place JSON object to parse the place */\n                publicHoliday = getPublicHoliday((JSONObject) jPlaces.get(i));\n                publicHolidayList.add(publicHoliday);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n\n        return publicHolidayList;\n    }"} {"path":"downloaded/PlaceJSONParser.java","method_name":"parsePlaceDetails","content":"/**\n     * Receives a JSONObject and returns a list\n     */\npublic HashMap<String, String> parsePlaceDetails(JSONObject jObject) {\n\n        JSONObject jPlaces = null;\n        JSONArray address_components = null;\n        try {\n            /** Retrieves all the elements in the 'places' array */\n            jPlaces = jObject.getJSONObject(\"result\");\n            address_components = jPlaces.getJSONArray(\"address_components\");\n        } catch (JSONException e) {\n            e.printStackTrace();\n        }\n        /** Invoking getPlaces with the array of json object\n         * where each json object represent a place\n         */\n        //return getPlaceDetail(jPlaces);\n        return getAddressDetails(address_components);\n    }"} {"path":"downloaded/PlaceJSONParser.java","method_name":"getAddressDetails","content":"/**\n     * Receives a JSONObject and returns a list\n     */\nprivate HashMap<String, String> getAddressDetails(JSONArray jPlaces) {\n        int placesCount = jPlaces.length();\n        List<HashMap<String, String>> addressList = new ArrayList<HashMap<String, String>>();\n        HashMap<String, String> addressDetails = null;\n\n        /** Taking each place, parses and adds to list object */\n        for (int i = 0; i < placesCount; i++) {\n            try {\n                /** Call getPlace with place JSON object to parse the place */\n                addressDetails = getPostalCodeDetails((JSONObject) jPlaces.get(i));\n                addressList.add(addressDetails);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n\n        return addressDetails;\n    }"} {"path":"downloaded/PlaceJSONParser.java","method_name":"getPlaces","content":"/**\n     * Receives a JSONObject and returns a list\n     */\nprivate List<HashMap<String, String>> getPlaces(JSONArray jPlaces) {\n        int placesCount = jPlaces.length();\n        List<HashMap<String, String>> placesList = new ArrayList<HashMap<String, String>>();\n        HashMap<String, String> place = null;\n\n        /** Taking each place, parses and adds to list object */\n        for (int i = 0; i < placesCount; i++) {\n            try {\n                /** Call getPlace with place JSON object to parse the place */\n                place = getPlace((JSONObject) jPlaces.get(i));\n                placesList.add(place);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n\n        return placesList;\n    }"} {"path":"downloaded/PlaceJSONParser.java","method_name":"getPostalCodeDetails","content":"/**\n     * Receives a JSONObject and returns a list\n     */\nprivate HashMap<String, String> getPostalCodeDetails(JSONObject jPlace) {\n\n        HashMap<String, String> addressDetail = new HashMap<String, String>();\n\n        String long_name = \"\";\n        String short_name = \"\";\n        String types = \"\";\n\n        try {\n\n            long_name = jPlace.getString(\"long_name\");\n            short_name = jPlace.getString(\"short_name\");\n\n            types = jPlace.getJSONArray(\"types\").get(0).toString();\n            addressDetail.put(\"long_name\", long_name);\n            addressDetail.put(\"short_name\", short_name);\n            addressDetail.put(\"types\", types);\n\n        } catch (JSONException e) {\n            e.printStackTrace();\n        }\n        return addressDetail;\n    }"} {"path":"downloaded/PlaceJSONParser.java","method_name":"getPlace","content":"/**\n     * Parsing the Place JSON object\n     */\nprivate HashMap<String, String> getPlace(JSONObject jPlace) {\n\n        HashMap<String, String> place = new HashMap<String, String>();\n\n        String id = \"\";\n        String reference = \"\";\n        String description = \"\";\n\n        try {\n\n            description = jPlace.getString(\"description\");\n            id = jPlace.getString(\"place_id\");\n            reference = jPlace.getString(\"reference\");\n\n            place.put(\"description\", description);\n            place.put(\"_id\", id);\n            place.put(\"reference\", reference);\n\n        } catch (JSONException e) {\n            e.printStackTrace();\n        }\n        return place;\n    }"} {"path":"downloaded/PlaceJSONParser.java","method_name":"getPublicHoliday","content":"/**\n     * Parsing the Place JSON object\n     */\nprivate HashMap<String, String> getPublicHoliday(JSONObject jPlace) {\n\n        HashMap<String, String> place = new HashMap<String, String>();\n        JSONObject date;\n\n        String day = \"\";\n        String month = \"\";\n        String year = \"\";\n        String localName = \"\";\n\n        try {\n            date = new JSONObject(jPlace.getString(\"date\"));\n            day = date.getString(\"day\");\n            month = date.getString(\"month\");\n            year = date.getString(\"year\");\n            localName = jPlace.getString(\"localName\");\n\n            place.put(\"day\", day);\n            place.put(\"month\", month);\n            place.put(\"year\", year);\n            place.put(\"local_name\", localName);\n\n\n        } catch (JSONException e) {\n            e.printStackTrace();\n        }\n        return place;\n    }"} {"path":"downloaded/PlaceJSONParser.java","method_name":"getPlaceDetail","content":"/**\n     * Parsing the Place JSON object\n     */\nprivate HashMap<String, String> getPlaceDetail(JSONObject jPlace) {\n\n        HashMap<String, String> place = new HashMap<String, String>();\n\n        String address = \"\";\n        String name = \"\";\n\n        try {\n\n            address = jPlace.getString(\"adr_address\");\n            name = jPlace.getString(\"name\");\n\n            place.put(\"address\", address);\n            place.put(\"name\", name);\n\n        } catch (JSONException e) {\n            e.printStackTrace();\n        }\n        return place;\n    }"} {"path":"downloaded/2_c8e02df402b16e18511f430fd781439b15b61d84_ClientBean_t.java","method_name":"getItineraries","content":"/**\n \t * Default constructor.\n \t */\n@SuppressWarnings(\"unchecked\")\n \t@Override\n \t@WebMethod(operationName = \"itineraries\")\n \tpublic List<Itinerary> getItineraries() {\n \t\tQuery query = em.createQuery(\"SELECT m from Itinerary as m\");\n \t\treturn (List<Itinerary>) query.getResultList();\n \t}"} {"path":"downloaded/InterestRateHisServiceImpl.java","method_name":"icketInterestRateDTO> ","content":"\n\t\n\t/**\n\t * 票据贴�\n当前年利率\n\t */\n\t@Override\n\tpublic List<TicketInterestRateDTO> getInterestRateCurrent(TicketInterestRateDTO ticketInterestRateDTO)\n\t\t\tthrows Exception {\n\t    \tCommonUtils.filterSpecialWord(ticketInterestRateDTO);\n\t\t\tList<TicketInterestRateDTO> list ;\n\t\t\t\n\t\t\tlist = inserestDao.getInterestRateCurrent(ticketInterestRateD"} {"path":"downloaded/InterestRateHisServiceImpl.java","method_name":"rride\n\tpublic List","content":"\n\t\n\t/**\n\t * 票据贴�\n\n\t * 票据贴息年化利率查询\n\t */\n\t@Override\n\tpublic List<TicketInterestRateDTO> getInterestRateHis(TicketInterestRateDTO ticketInterestRateDTO)\n\t\t\tthrows Exception {\n\t\t\tCommonUtils.filterSpecialWord(ticketInterestRateDTO);\n\t\t\tList<TicketInterestRateDTO> list = null;\n\t\t\tlist = inserestDao.getInterestRateHis"} {"path":"downloaded/InterestRateHisServiceImpl.java","method_name":" 票据贴息年化利率�","content":"\n\t\n\t/**\n\t * 票据贴�\nturn list;\n\t}\n\t/**\n\t * 票据贴息年化利率审核通过\n\t */\n\t@Override\n\tpublic int updateInterestRateCurAudit(TicketInterestRateDTO ticketInterestRateDTO) throws Exception {\n\t\tint result = 0;\n\t\tCommonUtils.filterSpecialWord(ticketInterestRateDTO);\t\t\n\t\tticketInterestRateDTO.setAuditStatus(POConstant.BANK_TICKET_AUDIT_SUCCESS);\n\t\tresult = inserestDao.updat"} {"path":"downloaded/InterestRateHisServiceImpl.java","method_name":"return result;\n\t}\n\t/**\n\t * ","content":"\n\t\n\t/**\n\t * 票据贴�\ntInterestRateDTO);\n\n\t\treturn result;\n\t}\n\t/**\n\t * 票据贴息年化利率驳回\n\t */\n\t@Override\n\tpublic int updateInterestRateCurReject(TicketInterestRateDTO ticketInterestRateDTO) throws Exception {\n\t\tint result = 0;\n\t\t\tCommonUtils.filterSpecialWord(ticketInterestRateDTO);\t\n\t\t\tticketInterestRateDTO.setAuditStatus(POConstant.BANK_TICKET_UPDATE_REJECT);\n\t\t\tresult"} {"path":"downloaded/InterestRateHisServiceImpl.java","method_name":"ketInterestRateDTO);\n","content":"\n\t\n\t/**\n\t * 票据贴�\nterestRateCurAudit(ticketInterestRateDTO);\n\t\t\treturn result;\n\t}\n\t/**\n\t * 新增修改记录\n\t */\n\t@Override\n\tpublic int updateInterestRateHis(TicketInterestRateDTO ticketInterestRateDTO) throws Exception {\n\t\t\tint result = 0;\n\t\t\tCommonUtils.filterSpecialWord(ticketInterestRateDTO);\t\t\t\n\t\t\tticketInterestRateDTO.setDiscountRate(POConstant.DISCOUNT_RATE);\n\t\t\tBigDecimal annualInterestrate = new BigDecimal(ticketInterestRateDTO.getAnnualInterestRate());\n\t\t\tString annRate = String.valueOf(annualInterestrate.divide(BigDecimal.valueOf(100)));\n\t\t\tticketInterestRateDTO.setAnnualInterestRate(annRate);\n\t\t\t//检查审核状态\n\t\t\tcheck(ticke"} {"path":"downloaded/InterestRateHisServiceImpl.java","method_name":"pException(\"提示�","content":"\n\t\n\t/**\n\t * 票据贴�\nCKET_UPDATE_UN_AUDIT){\n\t\t\t\tthrow new ServiceAppException(\"提示：当前状态为待审核，不能予以修改！\");\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * 票据贴息年化利率维审核查询\n\t */\n\t@Override\n\tpublic List<TicketInterestRateDTO> getInterestRateAudit(TicketInterestRateDTO ticketInterestRateDTO)\n\t\t\tthrows Exception {\n\t\t"} {"path":"downloaded/BrowseTestSources.java","method_name":"open","content":"/**\n     * @return <code>true</code> if OK button is chosen.\n     */\npublic boolean open() {\n        dialogDescriptor = new DialogDescriptor(\n                this,\n                NbBundle.getMessage(BrowseTestSources.class, \"LBL_DirectoryForProject\", ProjectUtils.getInformation(phpProject).getDisplayName()),\n                true,\n                DialogDescriptor.OK_CANCEL_OPTION,\n                DialogDescriptor.OK_OPTION,\n                null);\n        notificationLineSupport = dialogDescriptor.createNotificationLineSupport();\n        if (info != null) {\n            notificationLineSupport.setInformationMessage(info);\n        }\n        dialogDescriptor.setValid(false);\n        return DialogDisplayer.getDefault().notify(dialogDescriptor) == DialogDescriptor.OK_OPTION;\n    }"} {"path":"downloaded/BrowseTestSources.java","method_name":"getTestSources","content":"/**\n     * @return <code>true</code> if OK button is chosen.\n     */\npublic String getTestSources() {\n        return testSources;\n    }"} {"path":"downloaded/BrowseTestSources.java","method_name":"validateTestSources","content":"/**\n     * @return <code>true</code> if OK button is chosen.\n     */\n@NbBundle.Messages(\"BrowseTestSources.includePath.info=Add testing provider classes (e.g. PHPUnit) to Global Include Path (Tools > Options > PHP).\")\n    void validateTestSources() {\n        assert notificationLineSupport != null;\n\n        assert testSources.equals(testSourcesTextField.getText()) : testSources + \" != \" + testSourcesTextField.getText();\n        String error = Utils.validateTestSources(phpProject, testSources);\n        if (error != null) {\n            notificationLineSupport.setErrorMessage(error);\n            dialogDescriptor.setValid(false);\n            return;\n        }\n\n        String warning = Utils.warnTestSources(phpProject, testSources);\n        if (warning != null) {\n            notificationLineSupport.setWarningMessage(warning);\n            dialogDescriptor.setValid(true);\n            return;\n        }\n\n        notificationLineSupport.setInformationMessage(Bundle.BrowseTestSources_includePath_info());\n        dialogDescriptor.setValid(true);\n    }"} {"path":"downloaded/GameController.java","method_name":" createGam","content":"/**\n\t * Método para crear nueva partida y actualizar el successRate del jugador\n\t * \n\t * @param id del jugador\n\t * @return nueva partida\n\t * @throws ArgumentNotFoundException si no existe un jugador con ese id\n\t *\n\t@PostMapping(\"/players/{id}/games\")\n\tpublic Game createGame(@PathVariable(name = \"id\") int id) throws ArgumentNotFoundException {\n\n\t\t// Lanzar excepcion si no existe ningun jugador con ese id\n\t\tPlayer newPlayer = playerService.findPlayerById(id);\n\n\t\t// Instanciar nueva partida\n\t\tGame newGame = new Game();\n\n\t\t// Otorgar valores a los dados de manera random\n\t\tint dice1 = (int) (Math.random() * 5 + 1);\n\t\tint dice2 = (int) (Math.random() * 5 + 1);\n\n\t\tint result = dice1 + dice2;\n\n\t\t// Establecer valores de los dados de la nueva partida\n\t\tnewGame.setDice1(dice1);\n\t\tnewGame.setDice2(dice2);\n\n\t\t// Establecer el resultado de la partida, si es igual a 7 \"WIN\" sino \"LOSE\"\n\t\tif (result == 7) {\n\t\t\tnewGame.setGameResult(\"WIN\");\n\n\t\t} else {\n\t\t\tnewGame.setGameResult(\"LOSE\");\n\t\t}\n\n\t\t// Establecer el jugador de la partida\n\t\tnewGame.setPlayer(newPlayer);\n\n\t\t// Guardar nueva partida\n\t\tgameService.createGame(newGame);\n\n\t\t// Establecer porcentaje de exito del jugador\n\t\tnewPlayer.setSuccessRate(newGame.calculateSuccessRate());\n\n\t\t// Actualizar jugador\n\t\tplayerService.updatePlayer(newPlayer);\n\n\t\t// Devolver la partida creada\n\t\treturn newGame;\n\t"} {"path":"downloaded/GameController.java","method_name":"> getGam","content":"\t/**\n\t * Listar partidas de un jugador según id\n\t * \n\t * @param id del jugador\n\t * @return lista de partidas del jugador\n\t * @throws ArgumentNotFoundException si el jugador con ese id no existe o si el\n\t *                                   la lista de partidas del jugador esta vacia\n\t \n\n\t@GetMapping(\"/players/{id}/games\")\n\tpublic List<Game> getGames(@PathVariable(name = \"id\") int id) throws ArgumentNotFoundException {\n\n\t\t// Si la lista de partidas del jugador esta vacia lanzar excepcion\n\t\t// Si no existe un jugador con ese id lanzar excepcion\n\t\tif (playerService.findPlayerById(id).getGame().isEmpty()) {\n\t\t\tthrow new ArgumentNotFoundException(\"El jugador ID: \" + id + \" no tiene ninguna partida jugada.\");\n\t\t} else {\n\t\t\treturn playerService.findPlayerById(id).getGame();\n\t\t}\n"} {"path":"downloaded/GameController.java","method_name":"g deletePlayerGam","content":"\n\t/**\n\t * Eliminar listado de partidas del jugador\n\t * \n\t * @param id del jugador\n\t * @return texto informando que la eliminacion ha sido exitosa\n\t * @throws ArgumentNotFoundException si no existe un jugador con el id indicado\n\t *                                   o, si el jugador no tiene ninguna partida,\n\t *                                   es decir, si no hay partidas para borrar.\n\t \n\n\t@DeleteMapping(\"/players/{id}/games\")\n\tpublic String deletePlayerGames(@PathVariable(name = \"id\") int id) throws ArgumentNotFoundException {\n\n\t\t// Instanciar jugador y buscar jugador por id sino existe lanzar excepcion\n\t\tPlayer newPlayer = playerService.findPlayerById(id);\n\n\t\t// Establecer successRate a 0 ya que el jugador no posee partidas\n\t\tnewPlayer.setSuccessRate(0);\n\n\t\t// Actualizar jugador\n\t\tplayerService.updatePlayer(newPlayer);\n\n\t\t// Lanzar excepción si no hay partidas para borrar.\n\t\tif (newPlayer.getGame().isEmpty()) {\n\t\t\tthrow new ArgumentNotFoundException(\n\t\t\t\t\t\"El jugador id \" + id + \" , no tiene ninguna partida. No hay partidas para borrar.\");\n\t\t} else {\n\t\t\t// Eliminar listado de partidas del jugador\n\t\t\tgameService.deleteGames(newPlayer.getGame());\n\t\t}\n\n\t\treturn \"Las partidas del jugador ID \" + id + \" han sido eliminadas exitosamente\";\n"} {"path":"downloaded/GameController.java","method_name":"ing getRanking","content":"\n\n\t/**\n\t * Método para devolver el porcentaje de exito de los jugadores\n\t *\n\t * @return texto que indica el porcentaje de exito general\n\t * @throws ArgumentNotFoundException si no hay partidas\n\n*/\n\t@GetMapping(\"/players/ranking\")\n\tpublic String getRankingRate() throws ArgumentNotFoundException {\n\n\t\t// Instanciar e inicializar dos variables del tipo entero\n\t\tint totalGames = gameService.countGamesPlayed(gameService.getGames());\n\t\tint winGames = gameService.countWinGames();\n\n\t\t// Calcular porcentaje\n\t\tint rankingRate = (winGames * 100) / totalGames;\n\n\t\treturn \"El porcentaje de éxito de todos los jugadores es de un: \" + rankingRate + \"%"} {"path":"downloaded/sms_fragment.java","method_name":"newInstance","content":"/**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @param param1 Parameter 1.\n     * @param param2 Parameter 2.\n     * @return A new instance of fragment sms_fragment.\n     */\npublic static sms_fragment newInstance(String param1, String param2) {\n        sms_fragment fragment = new sms_fragment();\n        Bundle args = new Bundle();\n        args.putString(ARG_PARAM1, param1);\n        args.putString(ARG_PARAM2, param2);\n        fragment.setArguments(args);\n        return fragment;\n    }"} {"path":"downloaded/sms_fragment.java","method_name":"onCreateView","content":"/**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @param param1 Parameter 1.\n     * @param param2 Parameter 2.\n     * @return A new instance of fragment sms_fragment.\n     */\n@Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        View view=inflater.inflate(R.layout.fragment_sms_fragment, container, false);\n          listView=view.findViewById(android.R.id.list);\n\n       if(CheckPermission()) {\n           String[] campos=new String[]{ContactsContract.Contacts.DISPLAY_NAME};\n           String condicao= ContactsContract.Contacts.HAS_PHONE_NUMBER+\"='1'\";\n           int [] v=new int[]{android.R.id.text1};\n           cursor = getActivity().getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, condicao, null,null);\n           SimpleCursorAdapter adapter = new SimpleCursorAdapter(getActivity(), android.R.layout.simple_list_item_1, cursor, campos, v);\n           listView.setAdapter(adapter);\n\n\n       }else{\n           requestPermission();\n       }\n      return view;\n    }"} {"path":"downloaded/sms_fragment.java","method_name":"CheckPermission","content":"/**\n     * This interface must be implemented by activities that contain this\n     * fragment to allow an interaction in this fragment to be communicated\n     * to the activity and potentially other fragments contained in that\n     * activity.\n     * <p>\n     * See the Android Training lesson <a href=\n     * \"http://developer.android.com/training/basics/fragments/communicating.html\"\n     * >Communicating with Other Fragments</a> for more information.\n     */\npublic boolean CheckPermission(){\n\n        int Result=ContextCompat.checkSelfPermission(getActivity(),READ_CONTACTS);\n\n\n        return Result ==PackageManager.PERMISSION_GRANTED ;\n    }"} {"path":"downloaded/sms_fragment.java","method_name":"onRequestPermissionsResult","content":"/**\n     * This interface must be implemented by activities that contain this\n     * fragment to allow an interaction in this fragment to be communicated\n     * to the activity and potentially other fragments contained in that\n     * activity.\n     * <p>\n     * See the Android Training lesson <a href=\n     * \"http://developer.android.com/training/basics/fragments/communicating.html\"\n     * >Communicating with Other Fragments</a> for more information.\n     */\n@Override\n    public void onRequestPermissionsResult(int requestCode,\n                                           String permissions[], int[] grantResults) {\n        switch (requestCode) {\n            case RequestPermissionCode: {\n                // If request is cancelled, the result arrays are empty.\n                if (grantResults.length > 0\n                        && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n\n                    // permission was granted, yay! Do the\n                    // contacts-related task you need to do.\n\n\n                } else {\n\n                    // permission denied, boo! Disable the\n                    // functionality that depends on this permission.\n                }\n                return;\n            }\n\n            // other 'case' lines to check for other\n            // permissions this app might request\n        }\n    }"} {"path":"downloaded/BudgetData.java","method_name":"getEntity","content":"/**\n\t * Recuperar el entity\n\t * @return\n\t */\npublic Budget getEntity() {\n\t\treturn entity;\n\t}"} {"path":"downloaded/BudgetData.java","method_name":"getCategory","content":"/**\n\t * @return the category\n\t */\npublic Category getCategory() {\n\t\treturn entity.getCategory();\n\t}"} {"path":"downloaded/BudgetData.java","method_name":"getDescription","content":"/**\n\t * @return the description\n\t */\npublic String getDescription() {\n\t\treturn entity.getDescription();\n\t}"} {"path":"downloaded/BudgetData.java","method_name":"getAmount","content":"/**\n\t * @return the amount\n\t */\npublic BigDecimal getAmount() {\n\t\treturn entity.getAmount();\n\t}"} {"path":"downloaded/BudgetData.java","method_name":"getBudgetBalance","content":"/**\n\t * @return the balance\n\t */\npublic BigDecimal getBudgetBalance() {\n\t\treturn budgetBalance;\n\t}"} {"path":"downloaded/BudgetData.java","method_name":"isReadOnly","content":"/**\n\t * @return the readOnly\n\t */\npublic boolean isReadOnly() {\n\t\treturn entity.isReadOnly();\n\t}"} {"path":"downloaded/BudgetData.java","method_name":"getTotalExpenses","content":"/**\n\t * @return the totalExpenses\n\t */\npublic BigDecimal getTotalExpenses() {\n\t\treturn totalExpenses;\n\t}"} {"path":"downloaded/TimeTools.java","method_name":"*/\n\n\tpublic stati","content":"/**\n\t * 时间就近取整:<=30分向前取整,>30分向后取整 Author:zr\n\t * \n\t * @param time\n\t *            inTime 07:5\n * @return outTime 08:00\n\t */\n\n\tpublic static List<String> getNowInitialTime() {\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"HH:mm\");\n\t\treturn getInitialTime(sdf.format(new Date(S"} {"path":"downloaded/TimeTools.java","method_name":"\t}\n\n\tpublic stati","content":"/**\n\t * 时间就近取整:<=30分向前取整,>30分向后取整 Author:zr\n\t * \n\t * @param time\n\t *            inTime 07:5\nem.currentTimeMillis())));\n\t}\n\n\tpublic static List<String> getNewInitialTime() {\n\t\tre"} {"path":"downloaded/TimeTools.java","method_name":"}\n\n\tprivate st","content":"/**\n\t * 时间就近取整:<=30分向前取整,>30分向后取整 Author:zr\n\t * \n\t * @param time\n\t *            inTime 07:5\nn getInitialTime(\"10:00\");\n\t}\n\n\tprivate static List<String> getInitialTime(String time) {\n\t\tList<String> list = new ArrayList<>();\n\t\tint hour = 0;// 小时\n\t\tint minutes = 0;// 分钟\n\t\tStringTokenizer st = new StringTokenizer(time, \":\");\n\t\tList<String> inTime = new ArrayList<String>();\n\t\twhile (st.hasMoreElements()) {\n\t\t\tinTime.add(st.nextToken());\n\t\t}\n\t\thour = Integer.parseInt(inTime.get(0).toString());\n\t\tminutes = Integer.parseInt(inTime.get(1).toString());\n\t\tif (minutes > 30) {\n\t\t\thour = (hour + 1);\n\t\t}\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"HH:mm\");\n\n\t\ttry {\n\t\t\twhile (true) {\n\t\t\t\thour++;\n\t\t\t\tif (hour >= 24) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (hour >= 6 && hour <= 10) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tlist.add(sdf.format(sdf.parse(hour + \":00\")));\n\t\t\t\tlist.add(sdf.format(sdf.parse(hour + \":30\")));\n\t\t\t}\n\n\t\t} catch (ParseException e) {\n\t\t\te."} {"path":"downloaded/ChronicleMap.java","method_name":"of","content":"/**\n     * Delegates to {@link ChronicleMapBuilder#of(Class, Class)} for convenience.\n     *\n     * @param keyClass   class of the key type of the Chronicle Map to create\n     * @param valueClass class of the value type of the Chronicle Map to create\n     * @param <K>        the key type of the Chronicle Map to create\n     * @param <V>        the value type of the Chronicle Map to create\n     * @return a new {@code ChronicleMapBuilder} for the given key and value classes\n     */\nstatic <K, V> ChronicleMapBuilder<K, V> of(Class<K> keyClass, Class<V> valueClass) {\n        return ChronicleMapBuilder.of(keyClass, valueClass);\n    }"} {"path":"downloaded/MarketShow.java","method_name":"createPanel","content":"/**\n\t * create a frame of the selected market and language\n\t * @param market\n\t * @param l\n\t */\nprivate JPanel createPanel(Order order, int id){\n\t\tJPanel p = new JPanel();\n\t\tp.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));\n\t\tp.setLayout(new GridLayout(6, 1));\n\t\tJLabel l = new JLabel(language.getPlayer() + \": \" + id);\n\t\ttext.add(l);\n\t\tString s= language.getBusinessCards() + \": \";\n\t\tif(order.getBusinesscard().isEmpty())\n\t\t\ts+=\"0\";\n\t\telse\n\t\t{\n\t\t\ts += language.getString(order.getBusinesscard().get(0));\n\t\t\tfor(int i = 1; i < order.getBusinesscard().size(); i++)\n\t\t\t\ts = s.concat(language.getString(order.getBusinesscard().get(i)) + \", \");\n\t\t}\t\n\t\tl = new JLabel(s);\n\t\ttext.add(l);\n\t\t\n\t\ts = language.getPoliticCards() + \": \";\n\t\tif(order.getPoliticscard().isEmpty())\n\t\t\ts+=\"0\";\n\t\telse\n\t\t{\n\t\t\ts += language.getString(order.getPoliticscard().get(0));\n\t\t\tfor(int i = 1; i < order.getPoliticscard().size(); i++)\n\t\t\t\ts = s.concat(language.getString(order.getPoliticscard().get(i)) + \", \");\n\t\t}\t\n\t\tl = new JLabel(s);\n\t\ttext.add(l);\n\t\t\n\t\tl = new JLabel(language.getHelpers() + \": \" + order.getHelper());\n\t\ttext.add(l);\n\t\t\n\t\tl = new JLabel(language.getPrice() + \": \" + order.getPrice());\n\t\ttext.add(l);\n\t\t\n\t\tfor(JLabel t : text)\n\t\t\tp.add(t);\n\t\t\n\t\treturn p;\n\t}"} {"path":"downloaded/HeaderBanner.java","method_name":"getHeaderBanner","content":"/**\n     * \n     * @return\n     *     The headerBanner\n     */\npublic List<HeaderBanner_> getHeaderBanner() {\n        return headerBanner;\n    }"} {"path":"downloaded/HeaderBanner.java","method_name":"getCenterBanner","content":"/**\n     * \n     * @return\n     *     The centerBanner\n     */\npublic List<CenterBanner> getCenterBanner() {\n        return centerBanner;\n    }"} {"path":"downloaded/HeaderBanner.java","method_name":"getDownSlipBanner","content":"/**\n     * \n     * @return\n     *     The downSlipBanner\n     */\npublic List<Object> getDownSlipBanner() {\n        return downSlipBanner;\n    }"} {"path":"downloaded/HeaderBanner.java","method_name":"getDownThreeBanner","content":"/**\n     * \n     * @return\n     *     The downThreeBanner\n     */\npublic List<Object> getDownThreeBanner() {\n        return downThreeBanner;\n    }"} {"path":"downloaded/HeaderBanner.java","method_name":"getUpThreeBanner","content":"/**\n     * \n     * @return\n     *     The upThreeBanner\n     */\npublic List<UpThreeBanner> getUpThreeBanner() {\n        return upThreeBanner;\n    }"} {"path":"downloaded/HeaderBanner.java","method_name":"getDownTwoBanner","content":"/**\n     * \n     * @return\n     *     The downTwoBanner\n     */\npublic List<Object> getDownTwoBanner() {\n        return downTwoBanner;\n    }"} {"path":"downloaded/HeaderBanner.java","method_name":"getUpSlipBanner","content":"/**\n     * \n     * @return\n     *     The upSlipBanner\n     */\npublic List<Object> getUpSlipBanner() {\n        return upSlipBanner;\n    }"} {"path":"downloaded/HeaderBanner.java","method_name":"getQuitBanner","content":"/**\n     * \n     * @return\n     *     The quitBanner\n     */\npublic List<Object> getQuitBanner() {\n        return quitBanner;\n    }"} {"path":"downloaded/HeaderBanner.java","method_name":"getUpTwoBanner","content":"/**\n     * \n     * @return\n     *     The upTwoBanner\n     */\npublic List<UpTwoBanner> getUpTwoBanner() {\n        return upTwoBanner;\n    }"} {"path":"downloaded/ManageGroupMembersForm.java","method_name":"validate","content":"/**\n\t * Validate the properties that have been sent from the HTTP request,\n\t * and return an ActionErrors object that encapsulates any\n\t * validation errors that have been found.  If no errors are found, return\n\t * an empty ActionErrors object.\n\t */\npublic ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {\n\t\tActionErrors errors = new ActionErrors();\n\n\t\treturn errors;\n\n\t}"} {"path":"downloaded/ManageGroupMembersForm.java","method_name":"getGroupName","content":"/**\n\t * @return\n\t */\npublic String getGroupName() {\n\t\treturn groupName;\n\t}"} {"path":"downloaded/ManageGroupMembersForm.java","method_name":"getResearcherID","content":"/**\n\t * @return\n\t */\npublic int getResearcherID() {\n\t\treturn researcherID;\n\t}"} {"path":"downloaded/SourceAgentCach.java","method_name":"n\n  ","content":"/**\n     * 存储／更新 缓存数据\n     * @param key\n     * @p\nam key\n     * @return\n     */\n    public ChannelCache poll(String key){\n       "} {"path":"downloaded/SourceAgentCach.java","method_name":"**\n    ","content":"/**\n     * 存储／更新 缓存数据\n     * @param key\n     * @p\np.remove(k));\n    }\n\n    /**\n     * 获取所有连接通道\n     * @return\n     */\n    public List<ChannelCache> pollAll(){\n        List<ChannelCache> list = new ArrayList<Channe"} {"path":"downloaded/LuceneIndexSamplerReleaseTaskControlUnderFusion.java","method_name":"createFusionProvider","content":"/**\n     * This test come from a support case where dropping an index would block forever after index sampling failed.\n     * <p>\n     * A fusion index has multiple {@link IndexSampler index samplers} that are called sequentially. If one fails, then the other will never be invoked.\n     * This was a problem for {@link LuceneIndexSampler}. It owns a {@link TaskControl} that it will try to release in try-finally\n     * in {@link LuceneIndexSampler#sampleIndex()}. But it never gets here because a prior {@link IndexSampler} fails.\n     * <p>\n     * Because the {@link TaskControl} was never released the lucene accessor would block forever, waiting for\n     * {@link TaskCoordinator#awaitCompletion()}.\n     * <p>\n     * This situation was solved by making {@link IndexSampler} {@link java.io.Closeable} and include it in try-with-resource together with\n     * {@link IndexReader} that created it.\n     */\nprivate FusionIndexProvider createFusionProvider( LuceneIndexProvider luceneProvider, IndexProvider failingProvider )\n    {\n        SlotSelector slotSelector = SlotSelector.nullInstance;\n        return new FusionIndexProvider( failingProvider, luceneProvider,\n            slotSelector, providerDescriptor, directoryFactory, fs, false );\n    }"} {"path":"downloaded/LuceneIndexSamplerReleaseTaskControlUnderFusion.java","method_name":"createIndexSamplingJob","content":"/**\n     * This test come from a support case where dropping an index would block forever after index sampling failed.\n     * <p>\n     * A fusion index has multiple {@link IndexSampler index samplers} that are called sequentially. If one fails, then the other will never be invoked.\n     * This was a problem for {@link LuceneIndexSampler}. It owns a {@link TaskControl} that it will try to release in try-finally\n     * in {@link LuceneIndexSampler#sampleIndex()}. But it never gets here because a prior {@link IndexSampler} fails.\n     * <p>\n     * Because the {@link TaskControl} was never released the lucene accessor would block forever, waiting for\n     * {@link TaskCoordinator#awaitCompletion()}.\n     * <p>\n     * This situation was solved by making {@link IndexSampler} {@link java.io.Closeable} and include it in try-with-resource together with\n     * {@link IndexReader} that created it.\n     */\nprivate IndexSamplingJob createIndexSamplingJob( IndexAccessor fusionAccessor )\n    {\n        IndexProxyAdapter indexProxy = new IndexProxyAdapter()\n        {\n            @Override\n            public IndexDescriptor getDescriptor()\n            {\n                return descriptor;\n            }\n\n            @Override\n            public IndexReader newReader()\n            {\n                return fusionAccessor.newReader();\n            }\n        };\n        OnlineIndexSamplingJobFactory onlineIndexSamplingJobFactory = new OnlineIndexSamplingJobFactory( null, SIMPLE_NAME_LOOKUP, getInstance() );\n        return onlineIndexSamplingJobFactory.create( 1, indexProxy );\n    }"} {"path":"downloaded/LuceneIndexSamplerReleaseTaskControlUnderFusion.java","method_name":"luceneProvider","content":"/**\n     * This test come from a support case where dropping an index would block forever after index sampling failed.\n     * <p>\n     * A fusion index has multiple {@link IndexSampler index samplers} that are called sequentially. If one fails, then the other will never be invoked.\n     * This was a problem for {@link LuceneIndexSampler}. It owns a {@link TaskControl} that it will try to release in try-finally\n     * in {@link LuceneIndexSampler#sampleIndex()}. But it never gets here because a prior {@link IndexSampler} fails.\n     * <p>\n     * Because the {@link TaskControl} was never released the lucene accessor would block forever, waiting for\n     * {@link TaskCoordinator#awaitCompletion()}.\n     * <p>\n     * This situation was solved by making {@link IndexSampler} {@link java.io.Closeable} and include it in try-with-resource together with\n     * {@link IndexReader} that created it.\n     */\nprivate LuceneIndexProvider luceneProvider()\n    {\n        return new LuceneIndexProvider( fs, luceneDirectoryFactory, directoryFactory, IndexProvider.Monitor.EMPTY, config, true );\n    }"} {"path":"downloaded/LuceneIndexSamplerReleaseTaskControlUnderFusion.java","method_name":"failingProvider","content":"/**\n     * @return an {@link IndexProvider} that create an {@link IndexAccessor} that create an {@link IndexReader} that create an {@link IndexSampler} that\n     * throws exception... yeah.\n     */\nprivate IndexProvider failingProvider()\n    {\n        return new IndexProvider.Adaptor( providerDescriptor, directoryFactory )\n        {\n            @Override\n            public IndexAccessor getOnlineAccessor( IndexDescriptor descriptor, IndexSamplingConfig samplingConfig ) throws IOException\n            {\n                return failingIndexAccessor();\n            }\n        };\n    }"} {"path":"downloaded/LuceneIndexSamplerReleaseTaskControlUnderFusion.java","method_name":"failingIndexAccessor","content":"/**\n     * @return an {@link IndexProvider} that create an {@link IndexAccessor} that create an {@link IndexReader} that create an {@link IndexSampler} that\n     * throws exception... yeah.\n     */\nprivate IndexAccessor failingIndexAccessor()\n    {\n        return new IndexAccessor.Adapter()\n        {\n            @Override\n            public IndexReader newReader()\n            {\n                return new IndexReader.Adaptor()\n                {\n                    @Override\n                    public IndexSampler createSampler()\n                    {\n                        return () -> {\n                            throw sampleException;\n                        };\n                    }\n                };\n            }\n        };\n    }"} {"path":"downloaded/List.java","method_name":"getPrice","content":"/**\n     * @return Sum of prices of this instances children\n     */\n@Override\n    public int getPrice() {\n        int sum = 0;\n\n        for(Component c : children)\n            sum += c.getPrice();\n\n        return sum;\n    }"} {"path":"downloaded/List.java","method_name":"find","content":"/**\n     * Check if this instance has a child with name name\n     * @param name Name of looked for component\n     * @return Component with fitting name\n     * @throws ItemNotFoundException If no suitable component is found among children\n     */\n@Override\n    public Component find(String name) throws ItemNotFoundException {\n        if(this.getName().equals(name))\n            return this;\n\n        for(Component c : children)\n            try {\n                return c.find(name);\n            } catch (ItemNotFoundException e) {\n                continue;\n            }\n\n        throw new ItemNotFoundException(\"\\\"\" + name + \" not found in \" + this.getName());\n    }"} {"path":"downloaded/ActivityInstanceImpl.java","method_name":"toActivityInstance","content":"/** @see WorkflowInstanceImpl#isWorkAsync(ActivityInstanceImpl) */\npublic ActivityInstance toActivityInstance() {\n    return toActivityInstance(false);\n  }"} {"path":"downloaded/ActivityInstanceImpl.java","method_name":"toActivityInstance","content":"/** @see WorkflowInstanceImpl#isWorkAsync(ActivityInstanceImpl) */\npublic ActivityInstance toActivityInstance(boolean includeWorkState) {\n    ActivityInstance activityInstance = new ActivityInstance();\n    activityInstance.setId(id);\n    activityInstance.setActivityId(activity.id);\n    activityInstance.setCalledWorkflowInstanceId(calledWorkflowInstanceId);\n    toScopeInstance(activityInstance, includeWorkState);\n    if (includeWorkState) {\n      activityInstance.setPropertyOpt(\"workState\", workState);\n    }\n    return activityInstance;\n  }"} {"path":"downloaded/ActivityInstanceImpl.java","method_name":"getActivityInstanceId","content":"/** @see WorkflowInstanceImpl#isWorkAsync(ActivityInstanceImpl) */\n@Override\n  protected String getActivityInstanceId() {\n    return id;\n  }"} {"path":"downloaded/FragmentEnderecoNovoUsuario.java","method_name":"newInstance","content":"/**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @param param1 Parameter 1.\n     * @param param2 Parameter 2.\n     * @return A new instance of fragment FragmentEnderecoNovoUsuario.\n     */\npublic static FragmentEnderecoNovoUsuario newInstance(String param1, String param2) {\n        FragmentEnderecoNovoUsuario fragment = new FragmentEnderecoNovoUsuario();\n        Bundle args = new Bundle();\n        args.putString(ARG_PARAM1, param1);\n        args.putString(ARG_PARAM2, param2);\n        fragment.setArguments(args);\n        return fragment;\n    }"} {"path":"downloaded/ActivityInstanceImpl.java","method_name":"isJoining","content":"/** Default BPMN logic when an activity ends */\npublic boolean isJoining() {\n    return STATE_JOINING.equals(workState);\n  }"} {"path":"downloaded/ActivityInstanceImpl.java","method_name":"findActivityInstance","content":"/** Starts the to (destination) activity in the current (parent) scope.\n   * This methods will also end the current activity instance.\n   * This method can be called multiple times in one start() */\n@Override\n  public ActivityInstanceImpl findActivityInstance(String activityInstanceId) {\n    if (activityInstanceId == null) {\n      return null;\n    }\n    if (activityInstanceId.equals(this.id)) {\n      return this;\n    }\n    return super.findActivityInstance(activityInstanceId);\n  }"} {"path":"downloaded/ActivityInstanceImpl.java","method_name":"getActivity","content":"/** Starts the to (destination) activity in the current (parent) scope.\n   * This methods will also end the current activity instance.\n   * This method can be called multiple times in one start() */\npublic ActivityImpl getActivity() {\n    return activity;\n  }"} {"path":"downloaded/FragmentEnderecoNovoUsuario.java","method_name":"w onCreateVi","content":"/**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @param param1 Parameter 1.\n     * @param param2 Parameter 2.\n     * @return A new instance of fragment FragmentEnderecoNovoUsuario.\n     */\n  @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        final Bundle b = getArguments();\n        getActivity().findViewById(R.id.editTextNomeInfoPessoais).setVisibility(View.INVISIBLE);\n        getActivity().findViewById(R.id.editTextTelefoneInfoPessoais).setVisibility(View.INVISIBLE);\n        getActivity().findViewById(R.id.editTextEmail).setVisibility(View.INVISIBLE);\n        getActivity().findViewById(R.id.buttonContinuarInformacoesPessoais).setVisibility(View.INVISIBLE);\n        View v = inflater.inflate(R.layout.fragment_fragment_endereco_novo_usuario, container, false);\n        v.findViewById(R.id.relativeEnderecoNovoUsuario).setBackgroundColor(Color.WHITE);\n        continuar = (Button) v.findViewById(R.id.buttonContinuarEndereco);\n\n        rua = (EditText) v.findViewById(R.id.editTextNomeRua);\n        numero = (EditText) v.findViewById(R.id.editTextNumeroRua);\n        cep = (EditText) v.findViewById(R.id.editTextCEP);\n        complemento = (EditText) v.findViewById(R.id.editTextComplemento);\n        bairro = (EditText) v.findViewById(R.id.editTextBairro);\n        referencia = (EditText) v.findViewById(R.id.editTextPontoDeReferencia);\n        numero.setNextFocusDownId(R.id.editTextCEP);\n\n        rua.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View view, MotionEvent motionEvent) {\n                checkTexts(\"rua\");\n                if (rua.getText().toString().equals(\"Rua\")) {\n                    rua.setText(\"\");\n                    rua.setTextColor(Color.BLACK);\n                }\n                return false;\n            }\n        });\n        rua.setOnEditorActionListener(new TextView.OnEditorActionListener() {\n            @Override\n            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {\n                if (i == EditorInfo.IME_ACTION_NEXT) {\n                    checkTexts(\"numero\");\n                    if (numero.getText().toString().equals(\"Número\")) {\n                        numero.setText(\"\");\n                        numero.setTextColor(Color.BLACK);\n                        numero.setInputType(InputType.TYPE_CLASS_NUMBER);\n                    }\n                }\n                return false;\n            }\n        });\n        numero.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View view, MotionEvent motionEvent) {\n                checkTexts(\"numero\");\n                if (numero.getText().toString().equals(\"Número\")) {\n                    numero.setText(\"\");\n                    numero.setTextColor(Color.BLACK);\n                    numero.setInputType(InputType.TYPE_CLASS_NUMBER);\n                }\n                return false;\n            }\n        });\n        numero.setOnEditorActionListener(new TextView.OnEditorActionListener() {\n            @Override\n            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {\n                if (i == EditorInfo.IME_ACTION_NEXT) {\n                    checkTexts(\"cep\");\n                    if (cep.getText().toString().equals(\"CEP\")) {\n                        cep.setText(\"\");\n                        cep.setInputType(InputType.TYPE_CLASS_NUMBER);\n                        cep.setTextColor(Color.BLACK);\n                    }\n                }\n                return false;\n            }\n        });\n\n\n        cep.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View view, MotionEvent motionEvent) {\n                checkTexts(\"cep\");\n                if (cep.getText().toString().equals(\"CEP\")) {\n                    cep.setText(\"\");\n                    cep.setInputType(InputType.TYPE_CLASS_NUMBER);\n                    cep.setTextColor(Color.BLACK);\n                }\n                return false;\n            }\n        });\n        cep.setOnEditorActionListener(new TextView.OnEditorActionListener() {\n            @Override\n            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {\n                if (i == EditorInfo.IME_ACTION_NEXT) {\n                    checkTexts(\"complemento\");\n                    if (complemento.getText().toString().equals(\"Complemento\")) {\n                        complemento.setText(\"\");\n                        complemento.setTextColor(Color.BLACK);\n                    }\n                }\n                return false;\n            }\n        });\n        complemento.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View view, MotionEvent motionEvent) {\n                checkTexts(\"complemento\");\n                if (complemento.getText().toString().equals(\"Complemento\")) {\n                    complemento.setText(\"\");\n                    complemento.setTextColor(Color.BLACK);\n                }\n                return false;\n            }\n        });\n        complemento.setOnEditorActionListener(new TextView.OnEditorActionListener() {\n            @Override\n            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {\n                if (i == EditorInfo.IME_ACTION_NEXT) {\n                    checkTexts(\"bairro\");\n                    if (bairro.getText().toString().equals(\"Bairro\")) {\n                        bairro.setText(\"\");\n                        bairro.setTextColor(Color.BLACK);\n                    }\n                }\n                return false;\n            }\n        });\n        bairro.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View view, MotionEvent motionEvent) {\n                checkTexts(\"bairro\");\n                if (bairro.getText().toString().equals(\"Bairro\")) {\n                    bairro.setText(\"\");\n                    bairro.setTextColor(Color.BLACK);\n                }\n                return false;\n            }\n        });\n        bairro.setOnEditorActionListener(new TextView.OnEditorActionListener() {\n            @Override\n            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {\n                if (i == EditorInfo.IME_ACTION_NEXT) {\n                    checkTexts(\"referencia\");\n                    if (referencia.getText().toString().equals(\"Ponto de referência\")) {\n                        referencia.setText(\"\");\n                        referencia.setTextColor(Color.BLACK);\n                    }\n                }\n                return false;\n            }\n        });\n        referencia.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View view, MotionEvent motionEvent) {\n                checkTexts(\"referencia\");\n                if (referencia.getText().toString().equals(\"Ponto de referência\")) {\n                    referencia.setText(\"\");\n                    referencia.setTextColor(Color.BLACK);\n                }\n                return false;\n            }\n        });\n        referencia.setOnEditorActionListener(new TextView.OnEditorActionListener() {\n            @Override\n            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {\n                if (i == EditorInfo.IME_ACTION_DONE) {\n                    continuar.performClick();\n                }\n                return false;\n            }\n        });\n\n        continuar.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                String ruatxt = ((EditText) getActivity().findViewById(R.id.editTextNomeRua)).getText().toString();\n                String numerotxt = ((EditText) getActivity().findViewById(R.id.editTextNumeroRua)).getText().toString();\n                String ceptxt = ((EditText) getActivity().findViewById(R.id.editTextCEP)).getText().toString();\n                String complementotxt = ((EditText) getActivity().findViewById(R.id.editTextComplemento)).getText().toString();\n                String bairrotxt = ((EditText) getActivity().findViewById(R.id.editTextBairro)).getText().toString();\n                String referenciatxt = ((EditText) getActivity().findViewById(R.id.editTextPontoDeReferencia)).getText().toString();\n\n                if (!ruatxt.equals(\"\") && !ruatxt.equals(\"Rua\") && !numerotxt.equals(\"\") && !numerotxt.equals(\"Número\") && !ceptxt.equals(\"CEP\") && !ceptxt.equals(\"\")\n                        && !bairrotxt.equals(\"Bairro\") && !bairrotxt.equals(\"\")\n                        && !referenciatxt.equals(\"Ponto de referência\") && !referenciatxt.equals(\"\")) {\n                    Bundle bundle = b;\n                    bundle.putString(\"rua\", ruatxt);\n                    bundle.putString(\"numero\", numerotxt);\n                    bundle.putString(\"cep\", ceptxt);\n                    bundle.putString(\"complemento\", complementotxt);\n                    bundle.putString(\"bairro\", bairrotxt);\n                    bundle.putString(\"referencia\", referenciatxt);\n                    bundle.putString(\"endereco\", ruatxt + \", \" + numerotxt + \", \" + complementotxt + \", \" + ceptxt + \", \" + bairrotxt + \", \" + referenciatxt);\n                    Fragment fragment = new InformacoesNovoUsuario();\n                    fragment.setArguments(bundle);\n                    FragmentTransaction fragmentTransaction = getFragmentManager().beginTransaction();\n                    fragmentTransaction.replace(R.id.relativeEnderecoNovoUsuario, fragment);\n                    fragmentTransaction.commit();\n\n                } else {\n                    Toast.makeText(getActivity().getApplicationContext(), \"Por favor, preencha todos os campos corretamente.\", Toast.LENGTH_SHORT).show();\n\n                }\n            }\n        });\n        return "} {"path":"downloaded/ActivityInstanceImpl.java","method_name":"findActivityInstanceByActivityId","content":"/** Starts the to (destination) activity in the current (parent) scope.\n   * This methods will also end the current activity instance.\n   * This method can be called multiple times in one start() */\n@Override\n  public ActivityInstanceImpl findActivityInstanceByActivityId(String activityDefinitionId) {\n    if (activityDefinitionId==null) {\n      return null;\n    }\n    if (activityDefinitionId.equals(activity.id)) {\n      return this;\n    }\n    return super.findActivityInstanceByActivityId(activityDefinitionId);\n  }"} {"path":"downloaded/ActivityInstanceImpl.java","method_name":"isWorkflowInstance","content":"/** Starts the to (destination) activity in the current (parent) scope.\n   * This methods will also end the current activity instance.\n   * This method can be called multiple times in one start() */\n@Override\n  public boolean isWorkflowInstance() {\n    return false;\n  }"} {"path":"downloaded/ActivityInstanceImpl.java","method_name":"getCalledWorkflowInstanceId","content":"/** Starts the to (destination) activity in the current (parent) scope.\n   * This methods will also end the current activity instance.\n   * This method can be called multiple times in one start() */\npublic WorkflowInstanceId getCalledWorkflowInstanceId() {\n    return calledWorkflowInstanceId;\n  }"} {"path":"downloaded/ActivityInstanceImpl.java","method_name":"getUpdates","content":"/** Starts the to (destination) activity in the current (parent) scope.\n   * This methods will also end the current activity instance.\n   * This method can be called multiple times in one start() */\n@Override\n  public ActivityInstanceUpdates getUpdates() {\n    return (ActivityInstanceUpdates) updates;\n  }"} {"path":"downloaded/ActivityInstanceImpl.java","method_name":"hasActivityInstance","content":"/** Starts the to (destination) activity in the current (parent) scope.\n   * This methods will also end the current activity instance.\n   * This method can be called multiple times in one start() */\npublic boolean hasActivityInstance(String activityInstanceId) {\n    if (id!=null && id.equals(activityInstanceId)) {\n      return true;\n    }\n    return super.hasActivityInstance(activityInstanceId);\n  }"} {"path":"downloaded/ActivityInstanceImpl.java","method_name":"getId","content":"/** Starts the to (destination) activity in the current (parent) scope.\n   * This methods will also end the current activity instance.\n   * This method can be called multiple times in one start() */\npublic String getId() {\n    return id;\n  }"} {"path":"downloaded/ActivityInstanceImpl.java","method_name":"getInputValue","content":"/** Starts the to (destination) activity in the current (parent) scope.\n   * This methods will also end the current activity instance.\n   * This method can be called multiple times in one start() */\npublic <T> T getInputValue(String key) {\n    if (activity==null || activity.activityType==null || activity.activityType.getInputs()==null) {\n      return null;\n    }\n    InputParameterImpl parameter = (InputParameterImpl) activity.activityType.getInputs().get(key);\n    TypedValueImpl typedValue = getInputTypedValue(parameter);\n    return (T) (typedValue!=null ? typedValue.value : null);\n  }"} {"path":"downloaded/ActivityInstanceImpl.java","method_name":"getInputTypedValue","content":"/** Starts the to (destination) activity in the current (parent) scope.\n   * This methods will also end the current activity instance.\n   * This method can be called multiple times in one start() */\nprotected TypedValueImpl getInputTypedValue(InputParameterImpl parameter) {\n    if (parameter!=null) {\n      if (parameter.binding != null) {\n        return getTypedValue(parameter.binding);\n      }\n      if (parameter.bindings != null) {\n        DataTypeImpl<?> listType = null;\n        List<Object> values = new ArrayList<>();\n        for (BindingImpl< ? > binding : parameter.bindings) {\n          TypedValueImpl typedValue = getTypedValue(binding);\n          if (typedValue!=null) {\n            if (typedValue.getValue() instanceof Collection) {\n              if (listType==null && typedValue.getType()!=null) {\n                listType = typedValue.getType(); \n              }\n              Collection value = (Collection) typedValue.value;\n              if (value!=null) {\n                values.addAll(value);\n              }\n            } else {\n              if (listType==null && typedValue.getType()!=null) {\n                listType = new ListTypeImpl(typedValue.getType());\n              }\n              values.add(typedValue.value);\n            }\n          }\n        }\n        return new TypedValueImpl(listType, values);\n      }\n    }\n    return null;\n  }"} {"path":"downloaded/ActivityInstanceImpl.java","method_name":"getInputValueImpls","content":"/** Starts the to (destination) activity in the current (parent) scope.\n   * This methods will also end the current activity instance.\n   * This method can be called multiple times in one start() */\npublic Map<String, TypedValueImpl> getInputValueImpls() {\n    Map<String,TypedValueImpl> inputValues = new HashMap<>();\n    if (activity!=null && activity.activityType!=null && activity.activityType.getInputs()!=null) {\n      Map<String,InputParameterImpl> inputs = activity.activityType.getInputs();\n      for (String inputKey: inputs.keySet()) {\n        InputParameterImpl inputParameter = inputs.get(inputKey);\n        TypedValueImpl inputValue = getInputTypedValue(inputParameter);\n        if (inputValue!=null) {\n          inputValues.put(inputKey, inputValue);\n        }\n      }\n    }\n    return inputValues;\n  }"} {"path":"downloaded/ActivityInstanceImpl.java","method_name":"getInputValues","content":"/** Starts the to (destination) activity in the current (parent) scope.\n   * This methods will also end the current activity instance.\n   * This method can be called multiple times in one start() */\npublic Map<String, TypedValue> getInputValues() {\n    Map<String, TypedValue> inputValues = new HashMap<>();\n    Map<String,TypedValueImpl> inputValueImpls = getInputValueImpls();\n    if (inputValueImpls!=null) {\n      for (String key: inputValueImpls.keySet()) {\n        TypedValueImpl typedValueImpl = inputValueImpls.get(key);\n        inputValues.put(key, typedValueImpl.toTypedValue());\n      }\n    }\n    return inputValues;\n  }"} {"path":"downloaded/Cell.java","method_name":"getAge","content":"/**\n\t * Returns this Cell's age\n\t * \n\t * @return\n\t */\npublic int getAge() {\n\t\treturn this.age;\n\t}"} {"path":"downloaded/Cell.java","method_name":"isAlive","content":"/**\n\t * Returns alive status of this cell\n\t * \n\t * @return\n\t */\npublic boolean isAlive() {\n\t\treturn this.alive;\n\t}"} {"path":"downloaded/Lcm.java","method_name":"calculateLCM","content":"/**\n\t * LCM (a,b) = (axb)/GCD(a,b)\n\t *  \n\t * @param a\n\t * @param b\n\t * @return LCM of a & b. For e.g. GCD(12,15)=60\n\t */\nprivate static int calculateLCM(int a, int b){\n\t\tint gcd = calculateGCD(a, b);\n\t\tint lcm = (a/gcd)*b; //same as a*b/gcd but a*b could be very large number so avoiding that\n\t\treturn lcm;\n\t}"} {"path":"downloaded/Lcm.java","method_name":"calculateGCD","content":"/**\n\t * LCM (a,b) = (axb)/GCD(a,b)\n\t *  \n\t * @param a\n\t * @param b\n\t * @return LCM of a & b. For e.g. GCD(12,15)=60\n\t */\nprivate static int calculateGCD(int a, int b){\n\t\tif(b==0){\n\t\t\treturn a;\n\t\t}else{\n\t\t\tint r = a%b;\n\t\t    return calculateGCD(b, r);\n\t\t}\n\t}"} {"path":"downloaded/TalkController.java","method_name":"  publ","content":"/**\n     * 学习论坛显示列表\n     *\nurn\n     */\n    @RequestMapping(value = \"/doTalk\", method = RequestMethod.POST)\n    @ResponseBody\n    public Object doTalk() {\n        Map<String, Object> map = new HashMap<>();\n        try {\n            List<TalkEntity> talk = talkService.getTalk();\n            map.put(\"code\", \"0\");\n            map.put(\"msg\", \"OK\");\n            map.put(\"data\", talk);\n        } catch (Exception e) {\n            logger.error(e.getMessage());\n        }\n        r"} {"path":"downloaded/TalkController.java","method_name":"    @","content":"/**\n     * 学习论坛显示列表\n     *\nlkEntity\n     * @return\n     */\n    @RequestMapping(value = \"/doAdd\", method = RequestMethod.POST)\n    @ResponseBody\n    public Object doAdd(TalkEntity talkEntity) {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"code\", \"-1\");\n        map.put(\"msg\", \"error\");\n        try {\n            talkService.addTalk(talkEntity);\n            map.put(\"code\", \"0\");\n            map.put(\"msg\", \"OK\");\n        } catch (Exception e) {\n            logger.error(e.getMessage());\n            map.put(\"msg\", e.getMessage());"} {"path":"downloaded/TalkController.java","method_name":"estMet","content":"/**\n     * 学习论坛显示列表\n     *\n学习论坛查找列表\n     * @return\n     */\n    @RequestMapping(value = \"/doFind\", method = RequestMethod.POST)\n    @ResponseBody\n    public Object doFind(String find) {\n        Map<String, Object> map = new HashMap<>();\n        try {\n            List<TalkEntity> talk = talkService.findTalk(find);\n            map.put(\"code\", \"0\");\n            map.put(\"msg\", \"OK\");\n            map.put(\"data\", talk);\n        } catch (Exception e) {\n            logger.error("} {"path":"downloaded/ProductController.java","method_name":"getErrorMessage","content":"/**\n\t * Helper method to generate error massage for missing and empty params\n\t * @param arr\n\t * @return\n\t */\nString getErrorMessage(List<String> arr) {\n\t\tString output = \"\";\n\t\tfor (int i = 0; i < arr.size(); i++)\n\t\t\toutput += \"The field \" + arr.get(i) + \" is empty.,\";\n\n\t\treturn output;\n\t}"} {"path":"downloaded/RiskTolerance.java","method_name":"parse","content":"/**\n\t * Parse a {@link RiskTolerance} from a String.\n\t * @param s The String to parse\n\t * @return The parsed {@link RiskTolerance} or null\n\t */\npublic static RiskTolerance parse(String s) {\n\t\tswitch (s) {\n\t\t\tcase \"low_risk_tolerance\": return LOW_RISK_TOLERANCE;\n\t\t\tcase \"med_risk_tolerance\": return MED_RISK_TOLERANCE;\n\t\t\tcase \"high_risk_tolerance\": return HIGH_RISK_TOLERANCE;\n\t\t\tdefault: return null;\n\t\t}\n\t}"} {"path":"downloaded/RiskTolerance.java","method_name":"toString","content":"/**\n\t * Parse a {@link RiskTolerance} from a String.\n\t * @param s The String to parse\n\t * @return The parsed {@link RiskTolerance} or null\n\t */\n@Override\n\tpublic String toString() { return this.value; }"} {"path":"downloaded/RiskTolerance.java","method_name":"getValue","content":"/**\n\t * Parse a {@link RiskTolerance} from a String.\n\t * @param s The String to parse\n\t * @return The parsed {@link RiskTolerance} or null\n\t */\n@Override\n\tpublic String getValue() { return this.value; }"} {"path":"downloaded/CellularPhone.java","method_name":"getCost","content":"/**\n     *\n     * @param tariffa\n     */\npublic float getCost(CellularPhone phone, int durata) {\n        float costo = 0;\n        costo = trovaTariffa(new Prezziario(this.getMarca(), phone.getMarca(), 0)) * durata;\n        if (costo < 0) {\n            throw new IllegalArgumentException(\"Tariffa non presente\");\n        }\n        return costo;\n    }"} {"path":"downloaded/CellularPhone.java","method_name":"trovaTariffa","content":"/**\n     * metodo alternativo usando metodi contains indexOf\n     * @param phone\n     * @return float\n     */\nprivate static float trovaTariffa(Prezziario phone) {\n        float tariffa = -1;\n        if (prezziario.contains(phone)) {\n            tariffa = prezziario.get(prezziario.indexOf(phone)).getCosto();\n        }\n        return tariffa;\n    }"} {"path":"downloaded/NamedArguments.java","method_name":"addSwitch","content":"/**\n   * Explicit serialVersionUID.\n   */\n@Override\n  public NamedArguments addSwitch(final String name, final String usage) {\n    return super.addSwitch(name, usage);\n  }"} {"path":"downloaded/NamedArguments.java","method_name":"printUsage","content":"/**\n   * Explicit serialVersionUID.\n   */\n@Override\n  public NamedArguments printUsage() {\n    if (title != null) System.out.println(title);\n    int maxLen = 0;\n    for (final CLIArgument arg: argDefs.values()) {\n      final String s = arg.isSwitch() ? arg.getName() : arg.getName() + \" <value>\";\n      if (s.length() > maxLen) maxLen = s.length();\n    }\n    final String format = \"%-\" + maxLen + \"s : %s%n\";\n    for (final Map.Entry<String, CLIArgument> entry: argDefs.entrySet()) {\n      final CLIArgument arg = entry.getValue();\n      final String s = arg.isSwitch() ? arg.getName() : arg.getName() + \" <value>\";\n      System.out.printf(format, s, arg.getUsage());\n    }\n    return this;\n  }"} {"path":"downloaded/AnafiReturnHomePilotingItf.java","method_name":"getPilotingItf","content":"/**\n     * Constructor.\n     *\n     * @param activationController activation controller that owns this piloting interface controller\n     */\n@Override\n    @NonNull\n    public final ReturnHomePilotingItfCore getPilotingItf() {\n        return mPilotingItf;\n    }"} {"path":"downloaded/NamedArguments.java","method_name":"parseArguments","content":"/**\n   * Explicit serialVersionUID.\n   */\n@Override\n  public NamedArguments parseArguments(final String...clArgs)  throws Exception {\n    int pos = 0;\n    try {\n      while (pos < clArgs.length) {\n        final String name = clArgs[pos++];\n        final CLIArgument arg = argDefs.get(name);\n        if (arg == null) throw new IllegalArgumentException(\"Unknown argument: \" + name);\n        if (arg.isSwitch()) setBoolean(name, true);\n        else setString(name, clArgs[pos++]);\n      }\n    } catch (final Exception e) {\n      printError(null, e, clArgs);\n      throw e;\n    }\n    return this;\n  }"} {"path":"downloaded/NamedArguments.java","method_name":"addArg","content":"/**\n   * Add a new argument with an explicit value.\n   * @param name the name of the argument.\n   * @param usage a string describing the argument's usage.\n   * @param aliases an optional set of alternative names for this option.\n   * @return return this object.\n   */\npublic NamedArguments addArg(final String name, final String usage, final String[] aliases) {\n    argDefs.put(name, new CLIArgument(name, false, usage, aliases));\n    return this;\n  }"} {"path":"downloaded/NamedArguments.java","method_name":"addSwitch","content":"/**\n   * Add a new argument as a boollean switch.\n   * @param name the name of the argument.\n   * @param usage a string describing the argument's usage.\n   * @param aliases an optional set of alternative names for this option.\n   * @return return this object.\n   */\npublic NamedArguments addSwitch(final String name, final String usage, final String[] aliases) {\n    argDefs.put(name, new CLIArgument(name, true, usage, aliases));\n    return this;\n  }"} {"path":"downloaded/AnafiReturnHomePilotingItf.java","method_name":"isPersisted","content":"/**\n     * Tells whether device specific settings are persisted for this component.\n     *\n     * @return {@code true} if the component has persisted device settings, otherwise {@code false}\n     */\nprivate boolean isPersisted() {\n        return mDeviceDict != null && !mDeviceDict.isNew();\n    }"} {"path":"downloaded/AnafiReturnHomePilotingItf.java","method_name":"applyAutoTrigger","content":"/**\n     * Applies auto trigger.\n     * <ul>\n     * <li>Finds an appropriate fallback value if the given value is null, or unsupported;</li>\n     * <li>Sends the computed value to the drone in case it differs from the last received value;</li>\n     * <li>Updates the component's setting accordingly.</li>\n     * </ul>\n     *\n     * @param enabled value to apply\n     *\n     * @return {@code true} if a command was sent to the device and the component's setting should arm its updating\n     *         flag\n     */\nprivate boolean applyAutoTrigger(@Nullable Boolean enabled) {\n        if (enabled == null) {\n            if (mAutoTrigger == null) {\n                return false;\n            }\n            enabled = mAutoTrigger;\n        }\n\n        boolean updating = mAutoTrigger != enabled\n                           && sendCommand(ArsdkFeatureRth.encodeSetAutoTriggerMode(convert(enabled)));\n\n        mAutoTrigger = enabled;\n        mPilotingItf.autoTrigger().updateValue(enabled);\n\n        return updating;\n    }"} {"path":"downloaded/AnafiReturnHomePilotingItf.java","method_name":"applyPreferredTarget","content":"/**\n     * Applies preferred target.\n     * <ul>\n     * <li>Finds an appropriate fallback value if the given value is null, or unsupported;</li>\n     * <li>Sends the computed value to the drone in case it differs from the last received value;</li>\n     * <li>Updates the component's setting accordingly.</li>\n     * </ul>\n     *\n     * @param preferredTarget value to apply\n     *\n     * @return {@code true} if a command was sent to the device and the component's setting should arm its updating\n     *         flag\n     */\nprivate boolean applyPreferredTarget(@Nullable ReturnHomePilotingItf.Target preferredTarget) {\n        if (preferredTarget == null) {\n            if (mPreferredTarget == null) {\n                return false;\n            }\n            preferredTarget = mPreferredTarget;\n        }\n\n        boolean updating = mPreferredTarget != preferredTarget\n                           && sendCommand(ArsdkFeatureRth.encodeSetPreferredHomeType(convert(preferredTarget)));\n\n        mPreferredTarget = preferredTarget;\n        mPilotingItf.getPreferredTarget()\n                    .updateValue(preferredTarget);\n\n        return updating;\n    }"} {"path":"downloaded/AnafiReturnHomePilotingItf.java","method_name":"applyEndingBehavior","content":"/**\n     * Applies ending behavior.\n     * <ul>\n     * <li>Finds an appropriate fallback value if the given value is null, or unsupported;</li>\n     * <li>Sends the computed value to the drone in case it differs from the last received value;</li>\n     * <li>Updates the component's setting accordingly.</li>\n     * </ul>\n     *\n     * @param endingBehavior value to apply\n     *\n     * @return {@code true} if a command was sent to the device and the component's setting should arm its updating\n     *         flag\n     */\nprivate boolean applyEndingBehavior(@Nullable ReturnHomePilotingItf.EndingBehavior endingBehavior) {\n        if (endingBehavior == null) {\n            if (mEndingBehavior == null) {\n                return false;\n            }\n            endingBehavior = mEndingBehavior;\n        }\n\n        boolean updating = mEndingBehavior != endingBehavior\n                           && sendCommand(ArsdkFeatureRth.encodeSetEndingBehavior(convert(endingBehavior)));\n\n        mEndingBehavior = endingBehavior;\n        mPilotingItf.getEndingBehavior()\n                .updateValue(endingBehavior);\n\n        return updating;\n    }"} {"path":"downloaded/AnafiReturnHomePilotingItf.java","method_name":"applyAutoStartOnDisconnectDelay","content":"/**\n     * Applies auto-start on disconnect delay.\n     * <ul>\n     * <li>Finds an appropriate fallback value if the given value is null, or unsupported;</li>\n     * <li>Sends the computed value to the drone in case it differs from the last received value;</li>\n     * <li>Updates the component's setting accordingly.</li>\n     * </ul>\n     *\n     * @param delay value to apply\n     *\n     * @return {@code true} if a command was sent to the device and the component's setting should arm its updating\n     *         flag\n     */\nprivate boolean applyAutoStartOnDisconnectDelay(@Nullable Integer delay) {\n        if (delay == null) {\n            if (mAutoStartOnDisconnectDelay == null) {\n                return false;\n            }\n            delay = mAutoStartOnDisconnectDelay;\n        }\n\n        boolean updating = !delay.equals(mAutoStartOnDisconnectDelay)\n                           && sendCommand(ArsdkFeatureRth.encodeSetDelay(delay));\n\n        mAutoStartOnDisconnectDelay = delay;\n        mPilotingItf.getAutoStartOnDisconnectDelay()\n                    .updateValue(delay);\n\n        return updating;\n    }"} {"path":"downloaded/AnafiReturnHomePilotingItf.java","method_name":"applyEndingHoveringAltitude","content":"/**\n     * Applies ending hovering altitude.\n     * <ul>\n     * <li>Finds an appropriate fallback value if the given value is null, or unsupported;</li>\n     * <li>Sends the computed value to the drone in case it differs from the last received value;</li>\n     * <li>Updates the component's setting accordingly.</li>\n     * </ul>\n     *\n     * @param altitude value to apply\n     *\n     * @return {@code true} if a command was sent to the device and the component's setting should arm its updating\n     *         flag\n     */\nprivate boolean applyEndingHoveringAltitude(@Nullable Double altitude) {\n        if (altitude == null) {\n            if (mEndingHoveringAltitude == null) {\n                return false;\n            }\n            altitude = mEndingHoveringAltitude;\n        }\n\n        boolean updating = !altitude.equals(mEndingHoveringAltitude) && sendCommand(\n                ArsdkFeatureRth.encodeSetEndingHoveringAltitude(altitude.floatValue()));\n\n        mEndingHoveringAltitude = altitude;\n        mPilotingItf.getEndingHoveringAltitude().updateValue(altitude);\n\n        return updating;\n    }"} {"path":"downloaded/AnafiReturnHomePilotingItf.java","method_name":"applyMinAltitude","content":"/**\n     * Applies minimum altitude.\n     * <ul>\n     * <li>Finds an appropriate fallback value if the given value is null, or unsupported;</li>\n     * <li>Sends the computed value to the drone in case it differs from the last received value;</li>\n     * <li>Updates the component's setting accordingly.</li>\n     * </ul>\n     *\n     * @param altitude value to apply\n     *\n     * @return {@code true} if a command was sent to the device and the component's setting should arm its updating\n     *         flag\n     */\nprivate boolean applyMinAltitude(@Nullable Double altitude) {\n        if (altitude == null) {\n            if (mMinAltitude == null) {\n                return false;\n            }\n            altitude = mMinAltitude;\n        }\n\n        boolean updating = !altitude.equals(mMinAltitude) && sendCommand(\n                ArsdkFeatureRth.encodeSetMinAltitude(altitude.floatValue()));\n\n        mMinAltitude = altitude;\n        mPilotingItf.getMinAltitude().updateValue(altitude);\n\n        return updating;\n    }"} {"path":"downloaded/AnafiReturnHomePilotingItf.java","method_name":"convert","content":"/**\n     * Converts an auto trigger into its arsdk\n     * {@link ArsdkFeatureRth.AutoTriggerMode representation}.\n     *\n     * @param enabled new return home auto trigger to convert\n     *\n     * @return arsdk representation of the specified target\n     */\n@NonNull\n    private static ArsdkFeatureRth.AutoTriggerMode convert(@NonNull Boolean enabled) {\n        return enabled ? ArsdkFeatureRth.AutoTriggerMode.ON : ArsdkFeatureRth.AutoTriggerMode.OFF;\n    }"} {"path":"downloaded/AnafiReturnHomePilotingItf.java","method_name":"convert","content":"/**\n     * Converts a groundsdk {@link ReturnHomePilotingItf.Target return home target} into its arsdk\n     * {@link ArsdkFeatureRth.HomeType representation}.\n     *\n     * @param target groundsdk return home target to convert\n     *\n     * @return arsdk representation of the specified target\n     */\n@NonNull\n    private static ArsdkFeatureRth.HomeType convert(@NonNull ReturnHomePilotingItf.Target target) {\n        switch (target) {\n            case NONE:\n                return ArsdkFeatureRth.HomeType.NONE;\n            case TAKE_OFF_POSITION:\n                return ArsdkFeatureRth.HomeType.TAKEOFF;\n            case CUSTOM_LOCATION:\n                return ArsdkFeatureRth.HomeType.CUSTOM;\n            case CONTROLLER_POSITION:\n                return ArsdkFeatureRth.HomeType.PILOT;\n            case TRACKED_TARGET_POSITION:\n                return ArsdkFeatureRth.HomeType.FOLLOWEE;\n        }\n\n        return null;\n    }"} {"path":"downloaded/AnafiReturnHomePilotingItf.java","method_name":"convert","content":"/**\n     * Converts a groundsdk {@link ReturnHomePilotingItf.EndingBehavior return home ending behavior} into its arsdk\n     * {@link ArsdkFeatureRth.EndingBehavior representation}.\n     *\n     * @param endingBehavior groundsdk return home ending behavior to convert\n     *\n     * @return arsdk representation of the specified ending behavior\n     */\n@NonNull\n    private static ArsdkFeatureRth.EndingBehavior convert(\n            @NonNull ReturnHomePilotingItf.EndingBehavior endingBehavior) {\n        switch (endingBehavior) {\n            case HOVERING:\n                return ArsdkFeatureRth.EndingBehavior.HOVERING;\n            case LANDING:\n                return ArsdkFeatureRth.EndingBehavior.LANDING;\n        }\n\n        return null;\n    }"} {"path":"downloaded/AnafiReturnHomePilotingItf.java","method_name":"convert","content":"/**\n     * Converts an arsdk {@link ArsdkFeatureRth.AutoTriggerMode auto trigger mode} into a boolean.\n     *\n     * @param autoTriggerMode arsdk auto trigger mode to convert\n     *\n     * @return {@code true} if the input is {@link ArsdkFeatureRth.AutoTriggerMode#ON}, otherwise {@code false}\n     */\nprivate static boolean convert(@NonNull ArsdkFeatureRth.AutoTriggerMode autoTriggerMode) {\n        return autoTriggerMode == ArsdkFeatureRth.AutoTriggerMode.ON;\n    }"} {"path":"downloaded/AnafiReturnHomePilotingItf.java","method_name":"convert","content":"/**\n     * Converts an arsdk {@link ArsdkFeatureRth.EndingBehavior ending behavior} into its groundsdk\n     * {@link ReturnHomePilotingItf.EndingBehavior representation}.\n     *\n     * @param endingBehavior arsdk ending behavior to convert\n     *\n     * @return groundsdk representation of the specified ending behavior\n     */\n@NonNull\n    private static ReturnHomePilotingItf.EndingBehavior convert(\n            @NonNull ArsdkFeatureRth.EndingBehavior endingBehavior) {\n        switch (endingBehavior) {\n            case HOVERING:\n                return ReturnHomePilotingItf.EndingBehavior.HOVERING;\n            case LANDING:\n                return ReturnHomePilotingItf.EndingBehavior.LANDING;\n        }\n        return null;\n    }"} {"path":"downloaded/AnafiReturnHomePilotingItf.java","method_name":"convert","content":"/**\n     * Converts an arsdk {@link ArsdkFeatureRth.HomeReachability home reachability} into its groundsdk\n     * {@link ReturnHomePilotingItf.Reachability representation}.\n     *\n     * @param reachability arsdk home reachability to convert\n     *\n     * @return groundsdk representation of the specified reachability\n     */\n@NonNull\n    private static ReturnHomePilotingItf.Reachability convert(@NonNull ArsdkFeatureRth.HomeReachability reachability) {\n        switch (reachability) {\n            case UNKNOWN:\n                return ReturnHomePilotingItf.Reachability.UNKNOWN;\n            case REACHABLE:\n                return ReturnHomePilotingItf.Reachability.REACHABLE;\n            case CRITICAL:\n                return ReturnHomePilotingItf.Reachability.CRITICAL;\n            case NOT_REACHABLE:\n                return ReturnHomePilotingItf.Reachability.NOT_REACHABLE;\n        }\n        return null;\n    }"} {"path":"downloaded/AnafiReturnHomePilotingItf.java","method_name":"convert","content":"/**\n     * Converts an arsdk {@link ArsdkFeatureRth.HomeType home type} into its\n     * groundsdk {@link ReturnHomePilotingItf.Target representation}.\n     *\n     * @param type arsdk home type to convert\n     *\n     * @return groundsdk representation of the specified type\n     */\n@NonNull\n    private static ReturnHomePilotingItf.Target convert(\n            @NonNull ArsdkFeatureRth.HomeType type) {\n        switch (type) {\n            case NONE:\n                return ReturnHomePilotingItf.Target.NONE;\n            case TAKEOFF:\n                return ReturnHomePilotingItf.Target.TAKE_OFF_POSITION;\n            case CUSTOM:\n                return ReturnHomePilotingItf.Target.CUSTOM_LOCATION;\n            case PILOT:\n                return ReturnHomePilotingItf.Target.CONTROLLER_POSITION;\n            case FOLLOWEE:\n                return ReturnHomePilotingItf.Target.TRACKED_TARGET_POSITION;\n        }\n        return null;\n    }"} {"path":"downloaded/AnafiReturnHomePilotingItf.java","method_name":"from","content":"/**\n     * Converts a bitfield representation of multiple {@code ArsdkFeatureRth.HomeType} to its equivalent set of\n     * {@code ReturnHomePilotingItf.Target}.\n     *\n     * @param bitfield bitfield representation of RTH feature home type to convert\n     *\n     * @return the equivalent set of groundsdk targets\n     */\n@NonNull\n    private static EnumSet<ReturnHomePilotingItf.Target> from(int bitfield) {\n        EnumSet<ReturnHomePilotingItf.Target> targets = EnumSet.noneOf(ReturnHomePilotingItf.Target.class);\n        ArsdkFeatureRth.HomeType.each(bitfield, arsdk -> targets.add(convert(arsdk)));\n        return targets;\n    }"} {"path":"downloaded/Lexical.java","method_name":"/\n    public st","content":"/**\n     * 右线性正规文法转换为DFA\n     *\n     * @param grammar 文法\n  \n@return DFA\n     */\n    public static NFA getNfaByGrammar(Grammar grammar) {\n        //\n        NFA nfa = new NFA();\n        ArrayList<Symbol> stateList = new ArrayList<>();\n        stateList.add(null);\n        //状态命名\n        for (Production production : grammar.getProductions()) {\n            //左部非终结符\n            Symbol left = production.getLeft();\n            //不是非终结符，文法错误\n            if (left.getType() != Symbol.VN) {\n                return null;\n            }\n            if (!stateList.contains(left)) {\n                stateList.add(left);\n            }\n        }\n        //添加状态\n        for (int i = 1; i < stateList.size(); i++) {\n            nfa.getStates().add(i);\n        }\n        //添加初态\n        nfa.getInitialStates().add(stateList.indexOf(grammar.getStart()));\n        //添加终态\n        int finalState = stateList.size();\n        nfa.getStates().add(finalState);\n        nfa.getFinalStates().add(finalState);\n        //\n        for (Production production : grammar.getProductions()) {\n            int cur = stateList.indexOf(production.getLeft());\n            Symbol rightFirst = production.getRight().get(0);\n            int len = production.getRight().size();\n            Set<Integer> target = new HashSet<>();\n\n            nfa.getAlphabets().add(rightFirst);\n            if (len < 2) {\n                if (rightFirst.equals(nfa.EPSILON)) {\n                    target.add(finalState);\n                } else if (rightFirst.getType() == Symbol.VT) {\n                    target.add(finalState);\n                }\n            } else {\n                Symbol rightSecond = production.getRight().get(1);\n                target.add(stateList.indexOf(rightSecond));\n      "} {"path":"downloaded/CrimeConverter.java","method_name":"fromUUID","content":"/**\n     * Converter from UUID to bd format (String)\n     * @param mUUID UUID we need to convert\n     * @return converted UUID so we put it onto db\n     */\n@TypeConverter\n    public String fromUUID(UUID mUUID){\n        return mUUID.toString();\n    }"} {"path":"downloaded/CrimeConverter.java","method_name":"toUUID","content":"/**\n     Converter from bd format (String) to UUID\n     * @param string String we need to convert\n     * @return UUID that we can use in application\n     */\n@TypeConverter\n    public UUID toUUID(String string){\n        return UUID.fromString(string);\n    }"} {"path":"downloaded/CrimeConverter.java","method_name":"fromDate","content":"/**\n     Converter from Date to bd format (long)\n     * @param mDate Date we need to convert\n     * @return converted Date so we put it onto db\n     */\n@TypeConverter\n    public long fromDate(Date mDate){\n        return mDate.getTime();\n    }"} {"path":"downloaded/CrimeConverter.java","method_name":"toDate","content":"/**\n     Converter from bd format (long) to Date\n     * @param l long we need to convert\n     * @return Date that we can use in application\n     */\n@TypeConverter\n    public Date toDate(long l){\n        return new Date(l);\n    }"} {"path":"downloaded/AbstractAction.java","method_name":"getManagerFactory","content":"/**\n\t * \n\t */\npublic static ManagerFactory getManagerFactory() {\n\t\treturn managerFactory;\n\t}"} {"path":"downloaded/ArrayListIterator.java","method_name":"nextIndex","content":"/**\n\t * Construct a list iterator for the specified array, starting at the\n\t * specified start index and continuing for the specified length.\n\t *\n\t * @param array\n\t *            the array\n\t * @param start\n\t *            the start\n\t * @param length\n\t *            the length\n\t */\npublic int nextIndex() {\n\t\treturn this.nextIndex;\n\t}"} {"path":"downloaded/ArrayListIterator.java","method_name":"previousIndex","content":"/**\n\t * Construct a list iterator for the specified array, starting at the\n\t * specified start index and continuing for the specified length.\n\t *\n\t * @param array\n\t *            the array\n\t * @param start\n\t *            the start\n\t * @param length\n\t *            the length\n\t */\npublic int previousIndex() {\n\t\treturn this.nextIndex - 1;\n\t}"} {"path":"downloaded/ArrayListIterator.java","method_name":"hasPrevious","content":"/**\n\t * Construct a list iterator for the specified array, starting at the\n\t * specified start index and continuing for the specified length.\n\t *\n\t * @param array\n\t *            the array\n\t * @param start\n\t *            the start\n\t * @param length\n\t *            the length\n\t */\npublic boolean hasPrevious() {\n\t\treturn this.nextIndex > this.minIndex;\n\t}"} {"path":"downloaded/ArrayListIterator.java","method_name":"previous","content":"/**\n\t * Construct a list iterator for the specified array, starting at the\n\t * specified start index and continuing for the specified length.\n\t *\n\t * @param array\n\t *            the array\n\t * @param start\n\t *            the start\n\t * @param length\n\t *            the length\n\t */\npublic E previous() {\n\t\tif (this.hasPrevious()) {\n\t\t\treturn this.array[--this.nextIndex];\n\t\t}\n\t\tthrow new NoSuchElementException();\n\t}"} {"path":"downloaded/ArrayListIterator.java","method_name":"toString","content":"/**\n\t * Construct a list iterator for the specified array, starting at the\n\t * specified start index and continuing for the specified length.\n\t *\n\t * @param array\n\t *            the array\n\t * @param start\n\t *            the start\n\t * @param length\n\t *            the length\n\t */\n@Override\n\tpublic String toString() {\n\t\treturn super.toString();\n\t}"} {"path":"downloaded/Statement_For_GenericImpl.java","method_name":"eStaticClass","content":"/**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n@Override\n  protected EClass eStaticClass()\n  {\n    return LuaPackage.Literals.STATEMENT_FOR_GENERIC;\n  }"} {"path":"downloaded/Statement_For_GenericImpl.java","method_name":"getNames","content":"/**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\npublic EList<String> getNames()\n  {\n    if (names == null)\n    {\n      names = new EDataTypeEList<String>(String.class, this, LuaPackage.STATEMENT_FOR_GENERIC__NAMES);\n    }\n    return names;\n  }"} {"path":"downloaded/Statement_For_GenericImpl.java","method_name":"getExpressions","content":"/**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\npublic EList<Expression> getExpressions()\n  {\n    if (expressions == null)\n    {\n      expressions = new EObjectContainmentEList<Expression>(Expression.class, this, LuaPackage.STATEMENT_FOR_GENERIC__EXPRESSIONS);\n    }\n    return expressions;\n  }"} {"path":"downloaded/Statement_For_GenericImpl.java","method_name":"getBlock","content":"/**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\npublic Block getBlock()\n  {\n    return block;\n  }"} {"path":"downloaded/Statement_For_GenericImpl.java","method_name":"basicSetBlock","content":"/**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\npublic NotificationChain basicSetBlock(Block newBlock, NotificationChain msgs)\n  {\n    Block oldBlock = block;\n    block = newBlock;\n    if (eNotificationRequired())\n    {\n      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LuaPackage.STATEMENT_FOR_GENERIC__BLOCK, oldBlock, newBlock);\n      if (msgs == null) msgs = notification; else msgs.add(notification);\n    }\n    return msgs;\n  }"} {"path":"downloaded/Statement_For_GenericImpl.java","method_name":"eInverseRemove","content":"/**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n@Override\n  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)\n  {\n    switch (featureID)\n    {\n      case LuaPackage.STATEMENT_FOR_GENERIC__EXPRESSIONS:\n        return ((InternalEList<?>)getExpressions()).basicRemove(otherEnd, msgs);\n      case LuaPackage.STATEMENT_FOR_GENERIC__BLOCK:\n        return basicSetBlock(null, msgs);\n    }\n    return super.eInverseRemove(otherEnd, featureID, msgs);\n  }"} {"path":"downloaded/Statement_For_GenericImpl.java","method_name":"eGet","content":"/**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n@Override\n  public Object eGet(int featureID, boolean resolve, boolean coreType)\n  {\n    switch (featureID)\n    {\n      case LuaPackage.STATEMENT_FOR_GENERIC__NAMES:\n        return getNames();\n      case LuaPackage.STATEMENT_FOR_GENERIC__EXPRESSIONS:\n        return getExpressions();\n      case LuaPackage.STATEMENT_FOR_GENERIC__BLOCK:\n        return getBlock();\n    }\n    return super.eGet(featureID, resolve, coreType);\n  }"} {"path":"downloaded/Statement_For_GenericImpl.java","method_name":"eSet","content":"/**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n@SuppressWarnings(\"unchecked\")\n  @Override\n  public void eSet(int featureID, Object newValue)\n  {\n    switch (featureID)\n    {\n      case LuaPackage.STATEMENT_FOR_GENERIC__NAMES:\n        getNames().clear();\n        getNames().addAll((Collection<? extends String>)newValue);\n        return;\n      case LuaPackage.STATEMENT_FOR_GENERIC__EXPRESSIONS:\n        getExpressions().clear();\n        getExpressions().addAll((Collection<? extends Expression>)newValue);\n        return;\n      case LuaPackage.STATEMENT_FOR_GENERIC__BLOCK:\n        setBlock((Block)newValue);\n        return;\n    }\n    super.eSet(featureID, newValue);\n  }"} {"path":"downloaded/Statement_For_GenericImpl.java","method_name":"eUnset","content":"/**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n@Override\n  public void eUnset(int featureID)\n  {\n    switch (featureID)\n    {\n      case LuaPackage.STATEMENT_FOR_GENERIC__NAMES:\n        getNames().clear();\n        return;\n      case LuaPackage.STATEMENT_FOR_GENERIC__EXPRESSIONS:\n        getExpressions().clear();\n        return;\n      case LuaPackage.STATEMENT_FOR_GENERIC__BLOCK:\n        setBlock((Block)null);\n        return;\n    }\n    super.eUnset(featureID);\n  }"} {"path":"downloaded/Statement_For_GenericImpl.java","method_name":"eIsSet","content":"/**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n@Override\n  public boolean eIsSet(int featureID)\n  {\n    switch (featureID)\n    {\n      case LuaPackage.STATEMENT_FOR_GENERIC__NAMES:\n        return names != null && !names.isEmpty();\n      case LuaPackage.STATEMENT_FOR_GENERIC__EXPRESSIONS:\n        return expressions != null && !expressions.isEmpty();\n      case LuaPackage.STATEMENT_FOR_GENERIC__BLOCK:\n        return block != null;\n    }\n    return super.eIsSet(featureID);\n  }"} {"path":"downloaded/Statement_For_GenericImpl.java","method_name":"toString","content":"/**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n@Override\n  public String toString()\n  {\n    if (eIsProxy()) return super.toString();\n\n    StringBuffer result = new StringBuffer(super.toString());\n    result.append(\" (names: \");\n    result.append(names);\n    result.append(')');\n    return result.toString();\n  }"} {"path":"downloaded/BibTeXMLImporterTest.java","method_name":"getTestFiles","content":"/**\n     * Generates a List of all files in the package \"/src/test/resources/net/sf/jabref/logic/importer/fileformat\"\n     *\n     * @return A list of Names\n     * @throws IOException\n     */\npublic List<Path> getTestFiles() throws Exception {\n        try (Stream<Path> stream = Files.list(Paths.get(BibTeXMLImporterTest.class.getResource(\"\").toURI()))) {\n            return stream.filter(p -> !Files.isDirectory(p)).collect(Collectors.toList());\n        }\n\n    }"} {"path":"downloaded/Passenger.java","method_name":"equals","content":"/**\n\t * @param id\n\t * @param firstName\n\t * @param lastName\n\t * @param dob\n\t * @param gender\n\t * @param address\n\t * @param bookingId\n\t */\n@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tPassenger other = (Passenger) obj;\n\t\tif (this.id == null) {\n\t\t\tif (other.id != null)\n\t\t\t\treturn false;\n\t\t} else if (!this.id.equals(other.id))\n\t\t\treturn false;\n\t\treturn true;\n\t}"} {"path":"downloaded/Passenger.java","method_name":"getAddress","content":"/**\n\t * @return the address\n\t */\npublic String getAddress() {\n\t\treturn this.address;\n\t}"} {"path":"downloaded/Passenger.java","method_name":"getBookingId","content":"/**\n\t * @return the bookingId\n\t */\npublic Integer getBookingId() {\n\t\treturn this.bookingId;\n\t}"} {"path":"downloaded/Passenger.java","method_name":"getDob","content":"/**\n\t * @return the dob\n\t */\npublic LocalDate getDob() {\n\t\treturn this.dob;\n\t}"} {"path":"downloaded/Passenger.java","method_name":"getFirstName","content":"/**\n\t * @return the firstName\n\t */\npublic String getFirstName() {\n\t\treturn this.firstName;\n\t}"} {"path":"downloaded/Passenger.java","method_name":"getGender","content":"/**\n\t * @return the gender\n\t */\npublic String getGender() {\n\t\treturn this.gender;\n\t}"} {"path":"downloaded/Passenger.java","method_name":"getId","content":"/**\n\t * @return the id\n\t */\npublic Integer getId() {\n\t\treturn this.id;\n\t}"} {"path":"downloaded/Passenger.java","method_name":"getLastName","content":"/**\n\t * @return the lastName\n\t */\npublic String getLastName() {\n\t\treturn this.LastName;\n\t}"} {"path":"downloaded/Passenger.java","method_name":"hashCode","content":"/**\n\t * @return the lastName\n\t */\n@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + ((this.id == null) ? 0 : this.id.hashCode());\n\t\treturn result;\n\t}"} {"path":"downloaded/ProtoVisitor.java","method_name":"getDescriptorAndMessageByName","content":"/**\n   * Protobuf repeated message stored as list<DynamicMessage>, and every dynamic message contain key field\n   * and value field, which key field's value stored user properties key, value field's value stored\n   * user properties value.\n   */\nprivate static Pair<Descriptors.FieldDescriptor, Object> getDescriptorAndMessageByName(Object pathValue, FieldPathUtils.PathInfo pathInfo) {\n    Descriptors.FieldDescriptor targetDescriptor = null;\n    Object targetMessage = null;\n\n    if (pathValue instanceof DynamicMessage) {\n      targetDescriptor = ((DynamicMessage) pathValue)\n          .getDescriptorForType()\n          .findFieldByName(pathInfo.getName());\n      targetMessage = pathValue;\n    } else if (pathValue instanceof List) {\n      Map<String, DynamicMessage> mapPathValue = Maps.newHashMap();\n      for (DynamicMessage message : (List<DynamicMessage>) pathValue) {\n        mapPathValue.put(message.getField(message.getDescriptorForType()\n            .findFieldByName(ProtoUtils.PROTO_MAP_TYPE_KEY)).toString(), message);\n      }\n      targetMessage = mapPathValue.get(pathInfo.getName());\n      targetDescriptor = mapPathValue.get(pathInfo.getName())\n          .getDescriptorForType()\n          .findFieldByName(ProtoUtils.PROTO_MAP_TYPE_VALUE);\n    }\n    return ImmutablePair.of(targetDescriptor, targetMessage);\n  }"} {"path":"downloaded/Passenger.java","method_name":"toString","content":"/**\n\t * @param lastName\n\t *            the lastName to set\n\t */\n@Override\n\tpublic String toString() {\n\t\treturn this.firstName + \" \" + this.LastName;\n\t}"} {"path":"downloaded/ProtoVisitor.java","method_name":"getPathMessage","content":"/**\n   * Find path message field from raw message.\n   */\npublic static Object getPathMessage(Descriptors.FieldDescriptor fieldDescriptor,\n                                      DynamicMessage message,\n                                      FieldPathUtils.PathInfo pathInfo,\n                                      FeatureContext ctx) {\n    if (FieldPathUtils.PathType.ARRAY.equals(pathInfo.getPathType())) {\n      int repeatedFieldCount = message.getRepeatedFieldCount(fieldDescriptor);\n      if (repeatedFieldCount > pathInfo.getIndex()) {\n        return ProtoUtils.getArrayField(message, fieldDescriptor, pathInfo.getIndex());\n      }\n      return null;\n    } else {\n      return ProtoUtils.getField(message, fieldDescriptor, ctx);\n    }\n  }"} {"path":"downloaded/ProtoVisitor.java","method_name":"genFeatureContext","content":"/**\n   * Find path message field from raw message.\n   */\npublic static ProtoVisitor.FeatureContext genFeatureContext(Map<String, String> features) {\n    ProtoVisitor.FeatureContext context = ProtoVisitor.FeatureContext.defaultContext();\n    if (MapUtils.isEmpty(features)) {\n      return context;\n    }\n    for (String key : features.keySet()) {\n      ProtoVisitor.Feature feature = ProtoVisitor.Feature.transformFeature(key);\n      if (Objects.nonNull(feature)) {\n        LOG.info(\"configuration feature = {} set value = {}.\", feature, features.get(key));\n        context.configureFeature(feature, Boolean.parseBoolean(features.get(key)));\n      }\n    }\n    return context;\n  }"} {"path":"downloaded/RoutingTable.java","method_name":"addRoute","content":"/**\n     * Adds a new route\n     * \n     * @param to\n     *            - destination node\n     * @param via\n     *            - the next node in the route\n     */\npublic synchronized void addRoute(String to, String via) {\n\tif(routeExists(to, via)) {\n\t    return;\n\t}\n\taddForwardEntry(to, via);\n\tinverseTable.add(via, to);\n    }"} {"path":"downloaded/RoutingTable.java","method_name":"getBestViaTo","content":"/**\n     * Adds a new route\n     * \n     * @param to\n     *            - destination node\n     * @param via\n     *            - the next node in the route\n     */\npublic String getBestViaTo(String to) {\n\tRoutesMap rm = forwardTable.get(to);\n\tif (rm == null) {\n\t    return null;\n\t}\n\treturn rm.getBestVia();\n    }"} {"path":"downloaded/RoutingTable.java","method_name":"routeExists","content":"/**\n     * Checks if we have at least one route to the target\n     * @param to\n     * @return\n     */\npublic boolean routeExists(String to) {\n\tRoutesMap routesMap = forwardTable.get(to);\n\tif(routesMap == null) {\n\t    return false;\n\t}\n\treturn (routesMap.size() > 0);\n    }"} {"path":"downloaded/RoutingTable.java","method_name":"routeExists","content":"/**\n     * Checks if we have at least one route to the target\n     * @param to\n     * @return\n     */\npublic boolean routeExists(String to, String via) {\n\tRoutesMap routesMap = forwardTable.get(to);\n\tif(routesMap == null) {\n\t    return false;\n\t}\n\treturn routesMap.hasVia(via);\n    }"} {"path":"downloaded/Contacto.java","method_name":"getIdContacto","content":"/**\n     * Access method for idContacto.\n     *\n     * @return the current value of idContacto\n     */\npublic int getIdContacto() {\n        return idContacto;\n    }"} {"path":"downloaded/Contacto.java","method_name":"getNombreCompleto","content":"/**\n     * Access method for nombreCompleto.\n     *\n     * @return the current value of nombreCompleto\n     */\npublic String getNombreCompleto() {\n        return nombreCompleto;\n    }"} {"path":"downloaded/Contacto.java","method_name":"getCorreo","content":"/**\n     * Access method for correo.\n     *\n     * @return the current value of correo\n     */\npublic String getCorreo() {\n        return correo;\n    }"} {"path":"downloaded/Contacto.java","method_name":"getMensaje","content":"/**\n     * Access method for mensaje.\n     *\n     * @return the current value of mensaje\n     */\npublic String getMensaje() {\n        return mensaje;\n    }"} {"path":"downloaded/Contacto.java","method_name":"equalKeys","content":"/**\n     * Compares the key for this instance with another Contacto.\n     *\n     * @param other The object to compare to\n     * @return True if other object is instance of class Contacto and the key\n     *         objects are equal\n     */\nprivate boolean equalKeys(Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (!(other instanceof Contacto)) {\n            return false;\n        }\n        Contacto that = (Contacto) other;\n        if (this.getIdContacto() != that.getIdContacto()) {\n            return false;\n        }\n        return true;\n    }"} {"path":"downloaded/Contacto.java","method_name":"equals","content":"/**\n     * Compares this instance with another Contacto.\n     *\n     * @param other The object to compare to\n     * @return True if the objects are the same\n     */\n@Override\n    public boolean equals(Object other) {\n        if (!(other instanceof Contacto))\n            return false;\n        return this.equalKeys(other) && ((Contacto) other).equalKeys(this);\n    }"} {"path":"downloaded/Contacto.java","method_name":"hashCode","content":"/**\n     * Returns a hash code for this instance.\n     *\n     * @return Hash code\n     */\n@Override\n    public int hashCode() {\n        int i;\n        int result = 17;\n        i = getIdContacto();\n        result = 37 * result + i;\n        return result;\n    }"} {"path":"downloaded/Contacto.java","method_name":"toString","content":"/**\n     * Returns a debug-friendly String representation of this instance.\n     *\n     * @return String representation of this instance\n     */\n@Override\n    public String toString() {\n        StringBuffer sb = new StringBuffer(\"[Contacto |\");\n        sb.append(\" idContacto=\").append(getIdContacto());\n        sb.append(\"]\");\n        return sb.toString();\n    }"} {"path":"downloaded/Contacto.java","method_name":"getPrimaryKey","content":"/**\n     * Return all elements of the primary key.\n     *\n     * @return Map of key names to values\n     */\npublic Map<String, Object> getPrimaryKey() {\n        Map<String, Object> ret = new LinkedHashMap<String, Object>(6);\n        ret.put(\"idContacto\", Integer.valueOf(getIdContacto()));\n        return ret;\n    }"} {"path":"downloaded/ServerCommandInterpreter.java","method_name":"nextArgument","content":"/**\n\t * Get the next argument in the input.\n\t * \n\t * E.g. if the commandline is hello world, the _hello method will get \"world\" as the first argument.\n\t * \n\t * @return A string containing the next argument on the command line\n\t */\npublic String nextArgument() {\n\t\tif (tok == null || !tok.hasMoreElements())\n\t\t\treturn null;\n\n\t\tString arg = tok.nextToken();\n\t\tif (arg.startsWith(\"\\\"\")) { //$NON-NLS-1$\n\t\t\tif (arg.endsWith(\"\\\"\")) { //$NON-NLS-1$\n\t\t\t\tif (arg.length() >= 2)\n\t\t\t\t\t// strip the beginning and ending quotes\n\t\t\t\t\treturn arg.substring(1, arg.length() - 1);\n\t\t\t}\n\t\t\tString remainingArg = tok.nextToken(\"\\\"\"); //$NON-NLS-1$\n\t\t\targ = arg.substring(1) + remainingArg;\n\t\t\t// skip to next whitespace separated token\n\t\t\ttok.nextToken(WS_DELIM);\n\t\t}\n\t\telse if (arg.startsWith(\"'\")) { //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tif (arg.endsWith(\"'\")) { //$NON-NLS-1$\n\t\t\t\tif (arg.length() >= 2)\n\t\t\t\t\t// strip the beginning and ending quotes\n\t\t\t\t\treturn arg.substring(1, arg.length() - 1);\n\t\t\t}\n\t\t\tString remainingArg = tok.nextToken(\"'\"); //$NON-NLS-1$\n\t\t\targ = arg.substring(1) + remainingArg;\n\t\t\t// skip to next whitespace separated token\n\t\t\ttok.nextToken(WS_DELIM);\n\t\t}\n\t\treturn arg;\n\t}"} {"path":"downloaded/ServerCommandInterpreter.java","method_name":"execute","content":"/**\n\t * Execute a command line as if it came from the end user.\n\t * \n\t * Searches the list of command providers using introspection until it finds one that contains a matching method. It\n\t * searches for a method with the name \"_cmd\" where cmd is the command to execute. For example, for a command of\n\t * \"launch\" execute searches for a method called \"_launch\".\n\t * \n\t * @param cmd The name of the command to execute.\n\t * @return The object returned by the method executed.\n\t */\npublic Object execute(String cmd) {\n\t\tObject retval = null;\n\t\tClass[] parameterTypes = new Class[] { CommandInterpreter.class };\n\t\tObject[] parameters = new Object[] { this };\n\t\tboolean executed = false;\n\t\tint size = commandProviders.length;\n\t\tfor (int i = 0; !executed && (i < size); i++) {\n\t\t\ttry {\n\t\t\t\tObject target = commandProviders[i];\n\t\t\t\tMethod method = target.getClass().getMethod(\"_\" + cmd, parameterTypes); //$NON-NLS-1$\n\t\t\t\tretval = method.invoke(target, parameters);\n\t\t\t\texecuted = true; // stop after the command has been found\n\t\t\t}\n\t\t\tcatch (NoSuchMethodException ite) {\n\t\t\t\t// keep going - maybe another command provider will be able to\n\t\t\t\t// execute this command\n\t\t\t}\n\t\t\tcatch (InvocationTargetException ite) {\n\t\t\t\texecuted = true; // don't want to keep trying - we found the\n\t\t\t\t// method but got an error\n\t\t\t\tprintStackTrace(ite.getTargetException());\n\t\t\t}\n\t\t\tcatch (Exception ee) {\n\t\t\t\texecuted = true; // don't want to keep trying - we got an error\n\t\t\t\t// we don't understand\n\t\t\t\tprintStackTrace(ee);\n\t\t\t}\n\t\t}\n\t\t// if no command was found to execute, display help for all registered\n\t\t// command providers\n\t\tif (!executed) {\n\t\t\tfor (int i = 0; i < size; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tCommandProvider commandProvider = (CommandProvider) commandProviders[i];\n\t\t\t\t\tout.print(commandProvider.getHelp());\n\t\t\t\t\tout.flush();\n\t\t\t\t}\n\t\t\t\tcatch (Exception ee) {\n\t\t\t\t\tprintStackTrace(ee);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// call help for the more command provided by this class\n\t\t\tout.print(getHelp());\n\t\t\tout.flush();\n\t\t}\n\t\treturn retval;\n\t}"} {"path":"downloaded/ServerCommandInterpreter.java","method_name":"println","content":"/**\n\t * Prints an object to the output medium (appended with newline character).\n\t * <p>\n\t * If running on the target environment, the user is prompted with '--more' if more than the configured number of\n\t * lines have been printed without user prompt. This enables the user of the program to have control over scrolling.\n\t * <p>\n\t * For this to work properly you should not embed \"\\n\" etc. into the string.\n\t * \n\t * @param o the object to be printed\n\t */\npublic void println(Object o) {\n\t\tif (o == null) {\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (out) {\n\t\t\tprintline(o);\n\t\t}\n\t}"} {"path":"downloaded/ServerCommandInterpreter.java","method_name":"printDictionary","content":"/**\n\t * Prints the given dictionary sorted by keys.\n\t * \n\t * @param dic the dictionary to print\n\t * @param title the header to print above the key/value pairs\n\t */\npublic void printDictionary(Dictionary dic, String title) {\n\t\tif (dic == null)\n\t\t\treturn;\n\n\t\tint count = dic.size();\n\t\tString[] keys = new String[count];\n\t\tEnumeration keysEnum = dic.keys();\n\t\tint i = 0;\n\t\twhile (keysEnum.hasMoreElements()) {\n\t\t\tkeys[i++] = (String) keysEnum.nextElement();\n\t\t}\n\t\tUtil.sortByString(keys);\n\n\t\tif (title != null) {\n\t\t\tprintln(title);\n\t\t}\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tprintln(\" \" + keys[i] + \" = \" + dic.get(keys[i])); //$NON-NLS-1$//$NON-NLS-2$\n\t\t}\n\t\tprintln();\n\t}"} {"path":"downloaded/ServerCommandInterpreter.java","method_name":"getHelp","content":"/**\n\t * Answer a string (may be as many lines as you like) with help texts that explain the command.\n\t */\npublic String getHelp() {\n\t\tStringBuffer help = new StringBuffer(256);\n\t\thelp.append(ConsoleMsg.CONSOLE_HELP_CONTROLLING_CONSOLE_HEADING);\n\t\thelp.append(newline);\n\t\thelp.append(tab);\n\t\thelp.append(\"more - \"); //$NON-NLS-1$\n\t\thelp.append(ConsoleMsg.CONSOLE_HELP_MORE);\n\t\thelp.append(newline);\n\t\treturn help.toString();\n\t}"} {"path":"downloaded/Computer.java","method_name":"] giveRandom","content":"/**\n     * giveRandomNb() permet de récupérer une combinaison de 4 chiffres avec l'objet Random.\n     * @return La valeur de retour est une liste en int\n     \n  public int[] giveRandomNb(){\n        Random objRandom = new Random();\n        int[] tabRandom = new int[4];\n        for(int i=0; i<4;i++){\n            tabRandom[i]=objRandom.nextInt(10);\n        }\n        return tabRandom;\n   "} {"path":"downloaded/RenameConverterUnitTest.java","method_name":"suite","content":"/**\n     * <p>Returns the test suite of this class.</p>\n     *\n     * @return the test suite of this class.\n     */\npublic static Test suite() {\n        return new TestSuite(RenameConverterUnitTest.class);\n    }"} {"path":"downloaded/Done.java","method_name":"resume","content":"/**\n     * From Continuation.\n     */\npublic Result resume(Object value, Integer fuel_remaining)\n    {\n        return new FinishedSuccessfully(value, fuel_remaining);\n    }"} {"path":"downloaded/ClassUtil.java","method_name":"tic Set<Cl","content":"/**\n     * 获取制定包下面的类\n     * @param pack\n    \neturn\n     */\n    public static Set<Class<?>> getClasses(Set<String> pack) {\n        pack = Optional.fromNullable(pack).or(Collections.<String>emptySet());\n        checkArgument(!pack.isEmpty(), \"please set base scan controller package !\");\n\n        Set<Class<?>> classes = Sets.newLinkedHashSet();\n        boolean recursive = true;\n\n        Map<String, String> packageDirMap = formatPackageName(pack);\n        Enumeration<URL> dirs;\n        Set<String> packageDirNames = packageDirMap.keySet();\n        for(String packageDirName : packageDirNames) {\n            try {\n                dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);\n\n                while(dirs.hasMoreElements()) {\n                    URL url = dirs.nextElement();\n                    String protocol = url.getProtocol();\n                    if(URLTypeEnum.FILE.getName().equals(protocol)) {\n                        LOGGER.infoLog(ClassUtil.class, \"getClasses\", \"file type is scanning ... \");\n                        String filePath = URLDecoder.decode(url.getFile(), Charsets.UTF_8.name());\n\n                        findAndAddClassByFile(packageDirMap.get(packageDirName), filePath, recursive, classes);\n                    } else if(URLTypeEnum.JAR.getName().equals(protocol)) {\n                        LOGGER.infoLog(ClassUtil.class, \"getClasses\", \"jar type is scanning ...\");\n                        JarFile jarFile = ((JarURLConnection)url.openConnection()).getJarFile();\n                        Enumeration<JarEntry> enumeration = jarFile.entries();\n\n                        while(enumeration.hasMoreElements()) {\n                            JarEntry entry = enumeration.nextElement();\n                            String name = entry.getName();\n\n                            /**如果是以/开头，则获取后面的字符串**/\n                            if('/' == name.charAt(0)) {\n                                name = name.substring(1);\n                            }\n                            if(name.startsWith(packageDirName)) {\n                                int index = name.lastIndexOf('/');\n                                if(-1 != index) {\n                                    packageDirMap.put(packageDirName, CharMatcher.is('/').replaceFrom(\n                                            name.substring(0, index), '.'));\n\n                                    if(-1 != index || recursive) {\n                                        if(name.endsWith(\".class\") && ! entry.isDirectory()) {\n                                            String className = name.substring(\n                                              packageDirMap.get(packageDirName).length() + 1,\n                                                    name.length() - 6);\n\n                                            classes.add(Class.forName(getClassPath(packageDirMap.get(packageDirName), className)));\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } catch (Exception e) {\n                LOGGER.errorLog(ClassUtil.class, \"getClasses\", e);\n    "} {"path":"downloaded/ClassUtil.java","method_name":"     * @return\n  ","content":"/**\n     * 获取制定包下面的类\n     * @param pack\n    \n� . 替换成 /\n     * @param pack\n     * @return\n     */\n    private static Map<String, String> formatPackageName(Set<String> pack) {\n        Map<String, String> result = Maps.newHashMap();\n        for(String s : pack) {\n            String packageDirName = CharMatcher.is('.').replaceFrom(s, '/');\n            result."} {"path":"downloaded/ClassUtil.java","method_name":"      }\n        retur","content":"/**\n     * 获取制定包下面的类\n     * @param pack\n    \nckageDirName, s);\n        }\n        return result;\n    }\n\n    private static void findAndAddClassByFile(String packName,\n                                              String packagePath,\n                                              final boolean recursive,\n                                              Set<Class<?>> classes) {\n        File dir = new File(packagePath);\n        if(!dir.exists() || !dir.isDirectory()) {\n            return;\n        }\n        File[] dirFiles = dir.listFiles(new FileFilter() {\n            @Override\n            public boolean accept(File file) {\n                return (recursive && file.isDirectory())\n                        || (file.getName().endsWith(\".class\"));\n            }\n        });\n\n        for(File file : dirFiles) {\n            if(file.isDirectory()) {\n                findAndAddClassByFile(getClassPath(packName, file.getName()), file.getAbsolutePath(),\n                        recursive, classes);\n            } else {\n                String className = file.getName().substring(0, file.getName().length() - 6);\n                try {\n                    classes.add(Thread.currentThread().getContextClassLoader().loadClass(getClassPath(packName,className)));\n                } catch (ClassNotFoundException e) {\n                    LOGGER.errorLog(ClassUtil.class, \"findAndAddCla"} {"path":"downloaded/ClassUtil.java","method_name":"   }\n       ","content":"/**\n     * 获取制定包下面的类\n     * @param pack\n    \nle\", e);\n                }\n            }\n        }\n    }\n\n    private static String getClassPath(String packName, String className) {\n        return joiner.join(Strings"} {"path":"downloaded/Simple__className_Service.java","method_name":"\tpublic ","content":"/**\n    \t * 循环查找表字段是否含有rybh，有的话�\n�生成jbxxList 方法，没有就不生成\n    \t */\n    \t<#list table.columns as column>\n    \t<#if column.columnNameLower == \"rybh\">\n        \n    \t@Override\n    \t@UseDataSource(\"read_ds\")\n    \t@Transactional(readOnly = true, propagation = Propagation.NOT_SUPPORTED)\n    \tpublic ResponseMessage<PagerResult<Map<String, Object>>> jbxxlist(Entity param) {\n    \t\tPagerResult page = new PagerResult<List<Map<String, Object>>>();\n    \t\tList<Map<String, Object>> list = getDao().jbxxlist(param);\n    \t\tlist.forEach(x -> {\n    \t\t\tif (!StringUtils.isNullOrEmpty(x.get(\"xb\"))) {\n    \t\t\t\tx.put(\"xbString\", CacheUtils.get().getDictionary(\"XB\", x.get(\"xb\").toString()));\n    \t\t\t}\n    \t\t\tif (!StringUtils.isNullOrEmpty(x.get(\"hjd\"))) {\n    \t\t\t\tx.put(\"hjdString\", CacheUtils.get().getDictionary(\"XZQH\", x.get(\"hjd\").toString()));\n    \t\t\t}\n    \t\t\tif (!StringUtils.isNullOrEmpty(x.get(\"ay\"))) {\n    \t\t\t\tx.put(\"ayString\", CacheUtils.get().getDictionary(\"JLSAJLB\", x.get(\"ay\").toString()));\n    \t\t\t}\n    \t\t\tif (!StringUtils.isNullOrEmpty(x.get(\"bahj\"))) {\n    \t\t\t\tx.put(\"bahjString\", CacheUtils.get().getDictionary(\"BAJD\", x.get(\"bahj\").toString()));\n    \t\t\t}\n    \t\t\tif (!StringUtils.isNullOrEmpty(x.get(\"rsrq\"))) {\n    \t\t\t\tx.put(\"rsrqString\", new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(x.get(\"rsrq\")));\n    \t\t\t}\n    \t\t\tif (!StringUtils.isNullOrEmpty(x.get(\"cssj\"))) {\n    \t\t\t\tx.put(\"cssjString\", new SimpleDateFormat(\"yyyy-MM-dd\").format(x.get(\"cssj\")));\n    \t\t\t}\n\n    \t\t});\n\n    \t\tpage.setData(list);\n    \t\tpage.setTotal(getDao().jbxxco"} {"path":"downloaded/TrieDataNode.java","method_name":"getData","content":"/**\n     * Getter for data\n     * @return data\n     */\npublic char getData() {\n        return data;\n    }"} {"path":"downloaded/TrieDataNode.java","method_name":"getIsTerminate","content":"/**\n     * Getter for data\n     * @return data\n     */\npublic boolean getIsTerminate() {\n        return isTerminate;\n    }"} {"path":"downloaded/TrieDataNode.java","method_name":"getChild","content":"/**\n     * Getter for data\n     * @return data\n     */\npublic List<TrieDataNode> getChild() {\n        return child;\n    }"} {"path":"downloaded/TrieDataNode.java","method_name":"toString","content":"/**\n     * Getter for data\n     * @return data\n     */\n@Override\n    public String toString() {\n        return Character.toString(data);\n    }"} {"path":"downloaded/Control.java","method_name":"selectionScript","content":"/**\n     * A script that can be run to find this control on the client side. After running this script,\n     * it is possible to use the token returned by the {@link #identificationToken()} method to\n     * reach the control.\n     */\nprotected String selectionScript() {\n        return String.format(\"let %1$s = document.getElementById('%1$s');\\n\", this.getClientId().get());\n    }"} {"path":"downloaded/Control.java","method_name":"identificationToken","content":"/**\n     * A token that can be used to reach this control on the client side. This token can be used\n     * after running the control's rendering script or after running the script returned by the\n     * {@link #selectionScript()} method.\n     */\nprotected String identificationToken() {\n        return this.getClientId().get();\n    }"} {"path":"downloaded/ExceptionResponse.java","method_name":"getMessage","content":"/**\n     * Metodo de recuperacao de mensagem.\n     *\n     * @return String\n     */\n@Override\n    public String getMessage() {\n        return message;\n    }"} {"path":"downloaded/ExceptionResponse.java","method_name":"getHttpStatus","content":"/**\n     * Metodo de recuperacao de Http Status.\n     *\n     * @return HttpStatus\n     */\npublic HttpStatus getHttpStatus() {\n        return httpStatus;\n    }"} {"path":"downloaded/NewExamActivity.java","method_name":"dateSetListener","content":"/**\n     * saves date as result of DatePickerDialog\n     * @return date as String with correct format.\n     */\nprivate DatePickerDialog.OnDateSetListener dateSetListener() {\n        return new DatePickerDialog.OnDateSetListener() {\n\n            @Override\n            public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {\n                date = year + \".\" + month + \".\" + dayOfMonth;\n                setDateB.setText(date);\n            }\n        };\n    }"} {"path":"downloaded/ArticleDetailVm.java","method_name":"= \"\";\n        ","content":"/**\n     * 初始化\n \nregisterCode = \"\";\n        }\n\n    }\n\n    /**\n     * 初始化头部数据\n     */\n    private void initHeaderData() {\n\n        HashMap params = new HashMap();\n        params.put(\"token\", token);\n        params.put(\"baseUrl\", Config.baseUrl2);\n        params.put(\"id\", dynamicId);\n        params.put(\"baseMethod\", Method.DYNAMICARTICLEDETAIL);\n\n        OkHttpUtil.getRequest(articleDetailActivity, params, new RequestCallBack<ArticleDetailBean>() {\n            @Override\n            public void onSuccess(Response<ArticleDetailBean> response) {\n                ArticleDetailBean articleDetailBean = response.body();\n\n                if (!EmptyUtil.isEmpty(articleDetailBean)) {\n                    int resultCode = articleDetailBean.getResultCode();\n                    if (resultCode == StatusVariable.REQUESTSUCCESS) {\n                        ArticleDetailBean.ResultBean resultBean = articleDetailBean.getResult();\n                        if (!EmptyUtil.isEmpty(resultBean)) {\n                            String isOneself = resultBean.getIsOneself();\n                            dataBean = resultBean.getData();\n\n                            registerID = articleDetailBean.getResult().getData().getRegisterID();\n\n                            articleDetailActivity.isOneSelf.set(isOneself);\n\n                            articleDetailActivity.dyId.set(articleDetailBean.getResult().getData().getRegisterID());\n\n                            // registerCode = (String) SharedPreferencesUtils.getParam(articleDetailActivity, \"registerCode\", \"\");\n\n                            if (!registerCode.equals(articleDetailBean.getResult().getData().getRegisterID())) {\n                                binding.tvFollow.setVisibility(View.VISIBLE);\n                            } else {\n                                articleDetailActivity.setRightText();\n                                binding.tvFollow.setVisibility(View.GONE);\n                            }\n\n                            if (dataBean.getIsLike().equals(\"0\")) {\n                                binding.imgDynamiczan.setImageResource(R.mipmap.icon_grayzan);\n                            } else {\n                                binding.imgDynamiczan.setImageResource(R.mipmap.icon_lightzan);\n                            }\n                            //标题\n                            if (!EmptyUtil.isEmpty(dataBean.getTitle())) {\n                                binding.tvArticleTitle.setText((String) dataBean.getTitle());\n                            }\n\n                            //名字\n                            if (!EmptyUtil.isEmpty(dataBean.getRegisterNickName())) {\n                                binding.tvArticleName.setText(dataBean.getRegisterNickName());\n                            } else {\n                                binding.tvArticleName.setText(articleDetailActivity.getResources().getString(R.string.tourist));\n                            }\n                            //头像\n                            if (!EmptyUtil.isEmpty(dataBean.getRegisterPhoto())) {\n                                GlideUtil.LoadCircleImage(articleDetailActivity, dataBean.getRegisterPhoto(), binding.imgHeader);\n                            } else {\n                                binding.imgHeader.setImageResource(R.mipmap.icon_defaultheader_yes);\n\n                            }\n//                        //详情\n                            String pruduce = (String) dataBean.getPosition();\n                            //是否是认证 1:是 0：否\n                            if (!EmptyUtil.isEmpty(dataBean.getIsAuth())) {\n                                if (dataBean.getIsAuth().equals(StatusVariable.YESAUTH)) {\n                                    binding.imgV.setVisibility(View.VISIBLE);\n                                } else {\n                                    binding.imgV.setVisibility(View.GONE);\n                                }\n                            }\n                            //是否是精品 0：不是 1：是\n                            if (!EmptyUtil.isEmpty(dataBean.getSplendidStatic())) {\n                                if (dataBean.getSplendidStatic().equals(StatusVariable.SPLENDIDSTATIC)) {\n                                    binding.articlesift.setVisibility(View.VISIBLE);\n                                } else {\n                                    binding.articlesift.setVisibility(View.GONE);\n                                }\n                            }\n                            String position = (String) dataBean.getPosition();\n                            long time = dataBean.getCreateTime();\n                            long fronttimelong = DateUtil.frontDate();//当前时间的前一天时间\n                            //动态时间\n                            if (!EmptyUtil.isEmpty(time)) {\n                                String date = DateUtil.DateToStr(time, StatusVariable.HM);\n                                if (DateUtil.isSameDay(System.currentTimeMillis(), time)) {\n                                    if (!EmptyUtil.isEmpty(pruduce)) {\n                                        binding.tvArticletime.setText(\"今天\" + date + \" \" + (String) dataBean.getPosition());\n                                    } else {\n                                        binding.tvArticletime.setText(\"今天\" + date);\n                                    }\n                                } else if (DateUtil.isSameDay(fronttimelong, time)) {\n                                    if (!EmptyUtil.isEmpty(pruduce)) {\n                                        binding.tvArticletime.setText(\"昨天\" + date + \" \" + (String) dataBean.getPosition());\n                                    } else {\n                                        binding.tvArticletime.setText(\"昨天\" + date);\n                                    }\n\n                                } else {\n                                    String timeStr = DateUtil.DateToStr(time, StatusVariable.YMD);\n                                    if (!EmptyUtil.isEmpty(timeStr)) {\n                                        if (!EmptyUtil.isEmpty(position)) {\n                                            binding.tvArticletime.setText(timeStr + \" \" + position);\n                                        } else {\n                                            binding.tvArticletime.setText(timeStr);\n                                        }\n                                    } else {\n                                        binding.tvArticletime.setText(position);\n                                    }\n\n\n                                }\n                            } else {\n                                if (!EmptyUtil.isEmpty(pruduce)) {\n                                    binding.tvArticletime.setText((String) dataBean.getPosition());\n                                }\n                            }\n                            //平台类型\n                            String platform = articleDetailBean.getResult().getData().getPlatform();\n                            String content = articleDetailBean.getResult().getData().getContent();\n                            if (!EmptyUtil.isEmpty(platform)) {\n\n                                if (!EmptyUtil.isEmpty(content)) {\n                                    String content1 = Util.getFinalContent(content);\n                                    String appNewContent = Util.getAPPNewContent(content1);\n                                    binding.webWebView.loadData(appNewContent, \"text/html; charset=UTF-8\", null);\n                                }\n\n                            }\n                            if (!EmptyUtil.isEmpty(dataBean.getIsFollow())) {\n                                String isFollow = dataBean.getIsFollow();\n                                if (isFollow.equals(\"1\")) {\n                                    binding.tvFollow.setEnabled(true);\n                                    binding.tvFollow.setText(\"已关注\");\n                                    binding.tvFollow.setTextColor(articleDetailActivity.getResources().getColor(R.color.color_999999));\n                                    binding.tvFollow.setBackground(articleDetailActivity.getResources().getDrawable(R.drawable.attentionbg_yes));\n                                } else {\n                                    binding.tvFollow.setEnabled(true);\n                                    binding.tvFollow.setText(\"关注\");\n                                    binding.tvFollow.setTextColor(articleDetailActivity.getResources().getColor(R.color.color_FF8F00));\n                                    binding.tvFollow.setBackground(articleDetailActivity.getResources().getDrawable(R.drawable.attentionbg_no));\n                                }\n                            }\n                            binding.tvCommand.setText(\"评论\" + dataBean.getCommentsCount());\n                            binding.tvFavour.setText(\"点赞\" + dataBean.getLikesCount());\n                        }\n                    }\n\n                }\n            }\n\n            @Override\n            public ArticleDetailBean parseNetworkResponse(String jsonResult) {\n\n                ArticleDetailBean articleDetailBean = JSON.parseObject(jsonResult, ArticleDetailBean.class);\n\n                return articleDetailBean;\n            }\n\n            @Ov"} {"path":"downloaded/ArticleDetailVm.java","method_name":"   if (!EmptyUtil.i","content":"/**\n     * 初始化\n \n                if (!EmptyUtil.isEmpty(msg)) {\n                    toastUtil.centerToast(msg);\n                }\n            }\n        });\n    }\n\n    /**\n     * 评论数据\n     *\n     * @param loadType\n     */\n    private void initCommentListData(final int loadType) {\n\n        HashMap params = new HashMap();\n        params.put(\"baseMethod\", Method.COMMENTLIST);\n        params.put(\"baseUrl\", Config.baseUrl2);\n        params.put(\"id\", dynamicId);\n        params.put(\"currentPage\", page + \"\");\n        params.put(\"pageSize\", \"10\");\n        params.put(\"token\", token);\n        params.put(\"timestamp\", timestamp);\n\n        OkHttpUtil.postRequest(articleDetailActivity, params, new RequestCallBack<CommentFavourBean>() {\n            @Override\n            public void onSuccess(Response<CommentFavourBean> response) {\n                CommentFavourBean commentFavourBean = response.body();\n\n                if (!EmptyUtil.isEmpty(commentFavourBean)) {\n                    int resultCode = commentFavourBean.getResultCode();\n                    if (resultCode == StatusVariable.REQUESTSUCCESS) {\n                        CommentFavourBean.ResultBean resultBean = commentFavourBean.getResult();\n                        if (!EmptyUtil.isEmpty(resultBean)) {\n                            totalPage = resultBean.getTotalPage();\n                            List<CommentFavourBean.ResultBean.DataBean> dataList = resultBean.getData();\n\n                            if (tabType == 0) {\n                                binding.tvCommand.setText(\"评论\" + commentFavourBean.getResult().getAllRow());\n                                if (totalPage > 0) {\n\n                                    if (loadType == StatusVariable.LOADMORE) {\n                                        articleDetailAdapter.loadMoreData(dataList);\n                                        binding.smartRefreshlayout.finishLoadMore();\n                                    } else {\n                                        binding.smartRefreshlayout.finishRefresh();\n                                        articleDetailAdapter.loadData(dataList);\n                                    }\n                                } else {\n                                    toastUtil.centerToast(articleDetailActivity.getResources().getString(R.string.command_null));\n                                    articleDetailAdapter.loadData(new ArrayList<CommentFavourBean.ResultBean.DataBean>());\n                                }\n                            } else {\n                                binding.tvCommand.setText(\"评论\" + commentFavourBean.getResult().getAllRow());\n                            }\n                        }\n                        page++;\n                    }\n                }\n            }\n\n            @Override\n            public CommentFavourBean parseNetworkResponse(String jsonResult) {\n\n                CommentFavourBean commandPraiseBean = JSON.parseObject(jsonResult, CommentFavourBean.class);\n\n                return commandPraiseBean;\n            }\n"} {"path":"downloaded/ArticleDetailVm.java","method_name":") {\n              ","content":"/**\n     * 初始化\n \n, String msg) {\n                if (!EmptyUtil.isEmpty(msg)) {\n                    toastUtil.centerToast(msg);\n                }\n            }\n        });\n    }\n\n    /**\n     * 点赞数据\n     *\n     * @param loadType\n     */\n    public void initFavourListData(final int loadType) {\n\n        HashMap params = new HashMap();\n        params.put(\"baseMethod\", Method.FAVOURLIST);\n        params.put(\"baseUrl\", Config.baseUrl2);\n        params.put(\"socialInfoId\", dynamicId);\n        params.put(\"currentPage\", page + \"\");\n        params.put(\"pageSize\", \"10\");\n        params.put(\"token\", token);\n\n        OkHttpUtil.getRequest(articleDetailActivity, params, new RequestCallBack<FavourBean>() {\n            @Override\n            public void onSuccess(Response<FavourBean> response) {\n\n                FavourBean favourBean = response.body();\n\n                if (!EmptyUtil.isEmpty(favourBean)) {\n                    int resultCode = favourBean.getResultCode();\n                    if (resultCode == StatusVariable.REQUESTSUCCESS) {\n                        FavourBean.ResultBean resultBean = favourBean.getResult();\n                        if (!EmptyUtil.isEmpty(resultBean)) {\n                            totalPage = resultBean.getTotalPage();\n\n                            if (tabType == 0) {\n                                binding.tvFavour.setText(\"点赞\" + resultBean.getTotal());\n                            } else {\n                                binding.tvFavour.setText(\"点赞\" + resultBean.getTotal() + \"\");\n\n                                if (totalPage > 0) {\n                                    List<FavourBean.ResultBean.ListBean> list = resultBean.getList();\n                                    List<CommentFavourBean.ResultBean.DataBean> data = new ArrayList<>();\n                                    if (!EmptyUtil.isEmpty(list)) {\n                                        for (FavourBean.ResultBean.ListBean listBean : list) {\n                                            CommentFavourBean.ResultBean.DataBean dataBean = new CommentFavourBean.ResultBean.DataBean();\n                                            dataBean.setPosition(listBean.getPosition());\n                                            dataBean.setRegisterId(listBean.getRegisterId());\n                                            dataBean.setRegisterNickName(listBean.getRegisterNickName());\n                                            dataBean.setRegisterPhoto(listBean.getRegisterPhoto());\n                                            dataBean.setCreateDate(listBean.getCreateDate());\n                                            dataBean.setIsAuth(listBean.getIsAuth());\n                                            data.add(dataBean);\n                                        }\n\n                                        if (!EmptyUtil.isEmpty(data)) {\n                                            if (loadType == StatusVariable.REFRESH) {\n                                                articleDetailAdapter.loadData(data);\n                                            } else {\n                                                articleDetailAdapter.loadMoreData(data);\n                                            }\n                                        }\n                                    }\n                                } else {\n                                    toastUtil.centerToast(articleDetailActivity.getResources().getString(R.string.zan_null));\n                                    articleDetailAdapter.loadData(new ArrayList<CommentFavourBean.ResultBean.DataBean>());\n                                }\n                            }\n                        }\n                        page++;\n                    }\n\n                }\n            }\n\n            @Override\n            public FavourBean parseNetworkResponse(String jsonResult) {\n\n                FavourBean favourBean = JSON.parseObject(jsonResult, FavourBean.class);\n\n                return favourBean;\n"} {"path":"downloaded/ArticleDetailVm.java","method_name":"   public voi","content":"/**\n     * 初始化\n \nde\n            public void onFailed(int code, String msg) {\n                if (!EmptyUtil.isEmpty(msg)) {\n                    toastUtil.centerToast(msg);\n                }\n\n            }\n        });\n\n    }\n\n    /**\n     * 删除文章\n     */\n    public void deleteArticle() {\n\n        if (EmptyUtil.isEmpty(token)) {\n            IntentUtil.startActivity(articleDetailActivity, LoginActivity.class);\n            return;\n        }\n\n        HttpRequestUtil.delete(articleDetailActivity, token, dynamicId, new HttpRequestCallBack() {\n            @Override\n            public void httpSuccess(ResultBean resultBean) {\n                if (!EmptyUtil.isEmpty(resultBean)) {\n                    int resultCode = resultBean.getResultCode();\n                    if (resultCode == StatusVariable.REQUESTSUCCESS) {\n                        toastUtil.centerToast(articleDetailActivity.getResources().getString(R.string.delete_success));\n                        articleDetailActivity.setResult(StatusVariable.DELEATECODESUCCESS);\n                        articleDetailActivity.finish();\n                    } else {\n                        toastUtil.centerToast(articleDetailActivity.getResources().getString(R.string.delete_failed));\n                    }\n                }\n"} {"path":"downloaded/ArticleDetailVm.java","method_name":"     publ","content":"/**\n     * 初始化\n \nride\n            public void httpFailed(int code, String msg) {\n                toastUtil.centerToast(msg);\n            }\n\n            @Override\n            public void httpFinish() {\n\n            }\n        });\n    }\n\n    /**\n     * 关注\n     */\n    public void attention() {\n\n        if (EmptyUtil.isEmpty(token)) {\n            IntentUtil.startActivity(articleDetailActivity, LoginActivity.class);\n            return;\n        }\n\n        HttpRequestUtil.attention(articleDetailActivity, token, dataBean.getRegisterID(), new HttpRequestCallBack() {\n            @Override\n            public void httpSuccess(ResultBean resultBean) {\n                if (!EmptyUtil.isEmpty(resultBean)) {\n                    int resultCode = resultBean.getResultCode();\n                    if (resultCode == StatusVariable.REQUESTSUCCESS) {\n\n\n                        if (resultBean.getResultMsg().equals(\"关注用户成功\")) {\n                            binding.tvFollow.setEnabled(true);\n                            binding.tvFollow.setText(\"已关注\");\n                            binding.tvFollow.setTextColor(articleDetailActivity.getResources().getColor(R.color.color_999999));\n                            binding.tvFollow.setBackground(articleDetailActivity.getResources().getDrawable(R.drawable.attentionbg_yes));\n                        } else {\n                            binding.tvFollow.setEnabled(true);\n                            binding.tvFollow.setText(\"关注\");\n                            binding.tvFollow.setTextColor(articleDetailActivity.getResources().getColor(R.color.color_FF8F00));\n                            binding.tvFollow.setBackground(articleDetailActivity.getResources().getDrawable(R.drawable.attentionbg_no));\n                        }\n                        toastUtil.centerToast(resultBean.getResultMsg());\n                    } else {\n                        toastUtil.centerToast(resultBean.getResultMsg());\n              "} {"path":"downloaded/ArticleDetailVm.java","method_name":"leDetailA","content":"/**\n     * 初始化\n \ns.toast(articleDetailActivity, commandPraiseBean.getResultMsg());\n//                    }\n//                }\n//            }\n//\n//            @Override\n//            public void onFailed(String code, String msg) {\n//                ToastUtils.toast(articleDetailActivity, msg);\n//            }\n//        });\n\n    }\n\n    /**\n     * 初始化点击事件\n     */\n    private void initClick() {\n\n        binding.llCommand.setOnClickListener(this);\n        binding.llFavour.setOnClickListener(this);\n\n        articleDetailAdapter.setArticleClick(new ArticleDetailAdapter.ArticleClick() {\n            @Override\n            public void articleclick(CommentFavourBean.ResultBean.DataBean dataBean, int position, String id) {\n                if (EmptyUtil.isEmpty(token)) {\n                    IntentUtil.startActivity(articleDetailActivity, LoginActivity.class);\n                    return;\n                }\n                if (!registerID.equals(registerCode)) {\n                    if (registerCode.equals(registerID) || id.equals(registerCode)) {\n                        commentId = dataBean.getId();\n                        showCommentEdit(\"reView\");\n                    } else {\n                        toastUtil.centerToast(articleDetailActivity.getResources().getString(R.string.forbid_command));\n                    }\n                } else {\n                    String socialInfoId = dataBean.getId();\n                    commentId = socialInfoId;\n                    showCommentEdit(\"reView\");\n                }\n\n            }\n        });\n\n        articleDetailAdapter.setArticleReplyInfoClick(new ArticleDetailAdapter.ArticleReplyInfoClick() {\n            @Override\n            public void articleReplyInfoClick(CommentFavourBean.ResultBean.DataBean.ReplyInfosBean dataBean, String strid, String id) {\n                if (EmptyUtil.isEmpty(token)) {\n                    IntentUtil.startActivity(articleDetailActivity, LoginActivity.class);\n                    return;\n                }\n                if (!registerID.equals(registerCode)) {\n                    if (registerCode.equals(id)) {\n                        commentId = strid;\n                        replyId = dataBean.getCommentId();\n                        showCommentEdit(\"reView\");\n                    } else {\n                        toastUtil.centerToast(articleDetailActivity.getResources().getString(R.string.forbid_command));\n                    }\n                } else {\n                    commentId = dataBean.getCommentId();\n                    showCommentEdit(\"reView\");\n                }\n            }\n        });\n\n        //关注\n        binding.tvFollow.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n\n                if (EmptyUtil.isEmpty(token)) {\n                    IntentUtil.startActivity(articleDetailActivity, LoginActivity.class);\n                    return;\n                }\n                attention();\n            }\n        });\n\n        binding.imgHeader.setOnClickListener(new View.OnClickListener() {\n            @Override\n  "} {"path":"downloaded/UnaryOperationButton.java","method_name":"chooseOperators","content":"/**\n\t * Determines which operation should be used by the button name.\n\t *\n\t * @param name the name of the button\n\t * @return the operator pair\n\t */\nprivate OperatorPair chooseOperators(String name) {\n\t\t\n\t\tswitch(name) {\n\t\t\n\t\tcase \"sin\":\n\t\t\treturn new OperatorPair(SIN, ASIN);\n\t\t\t\n\t\tcase \"cos\":\n\t\t\treturn new OperatorPair(COS, ACOS);\n\t\t\t\n\t\tcase \"tan\":\n\t\t\treturn new OperatorPair(TAN, ATAN);\n\t\t\t\n\t\tcase \"ctg\":\n\t\t\treturn new OperatorPair(CTG, ACTG);\n\t\t\t\n\t\tcase \"log\":\n\t\t\treturn new OperatorPair(LOG, LOG_INV);\n\t\t\t\n\t\tcase \"ln\":\n\t\t\treturn new OperatorPair(LN, LN_INV);\n\t\t\n\t\tcase \"1/x\":\n\t\t\treturn new OperatorPair(X_INV, X_INV);\n\t\t\t\n\t\tdefault:\n\t\t\tthrow new IllegalStateException(\"Invalid unary operator\");\n\t\t}\n\t}"} {"path":"downloaded/SenderFactory.java","method_name":"createSender","content":"/**\n\t * Create a sender instance to send collected log achieve to server via TCP\n\t * socket\n\t * \n\t * @param filename\n\t *            String filename of the collected log achieve to be sent\n\t * @param destIp\n\t *            String server IP\n\t * @param destPort\n\t *            int server port\n\t * @return Sender sender instance\n\t */\npublic static Sender createSender(final String filename, String destIp, int destPort) {\n\t\treturn new Sender(filename, destIp, destPort);\n\t}"} {"path":"downloaded/FormAmbilObat.java","method_name":"getTxtKodeAmbilObat","content":"/**\n     * Creates new form FormAmbilObat\n     */\npublic javax.swing.JTextField getTxtKodeAmbilObat(){\n        return txtKodeAmbilObat;\n    }"} {"path":"downloaded/FormAmbilObat.java","method_name":"getTxtKodePeriksa","content":"/**\n     * Creates new form FormAmbilObat\n     */\npublic javax.swing.JTextField getTxtKodePeriksa(){\n        return txtKodePeriksa;\n    }"} {"path":"downloaded/FormAmbilObat.java","method_name":"getTxtKodeKeluhan","content":"/**\n     * Creates new form FormAmbilObat\n     */\npublic javax.swing.JTextField getTxtKodeKeluhan(){\n        return txtKodeKeluhan;\n    }"} {"path":"downloaded/FormAmbilObat.java","method_name":"getTxtNamaKeluhan","content":"/**\n     * Creates new form FormAmbilObat\n     */\npublic javax.swing.JTextField getTxtNamaKeluhan(){\n        return txtNamaKeluhan;\n    }"} {"path":"downloaded/FormAmbilObat.java","method_name":"getTxtKodePasien","content":"/**\n     * Creates new form FormAmbilObat\n     */\npublic javax.swing.JTextField getTxtKodePasien(){\n        return txtKodeKeluhan2;\n    }"} {"path":"downloaded/FormAmbilObat.java","method_name":"getTxtNamaPasien","content":"/**\n     * Creates new form FormAmbilObat\n     */\npublic javax.swing.JTextField getTxtNamaPasien(){\n        return txtNamaKeluhan2;\n    }"} {"path":"downloaded/FormAmbilObat.java","method_name":"getTxtKodePetugas","content":"/**\n     * Creates new form FormAmbilObat\n     */\npublic javax.swing.JTextField getTxtKodePetugas(){\n        return txtKodeKeluhan3;\n    }"} {"path":"downloaded/FormAmbilObat.java","method_name":"getTxtNamaPetugas","content":"/**\n     * Creates new form FormAmbilObat\n     */\npublic javax.swing.JTextField getTxtNamaPetugas(){\n        return txtNamaKeluhan3;\n    }"} {"path":"downloaded/FormAmbilObat.java","method_name":"getTxtDiagnosa","content":"/**\n     * Creates new form FormAmbilObat\n     */\npublic javax.swing.JTextField getTxtDiagnosa(){\n        return txtDiagnosa;\n    }"} {"path":"downloaded/FormAmbilObat.java","method_name":"getCboKode","content":"/**\n     * Creates new form FormAmbilObat\n     */\npublic javax.swing.JComboBox<String> getCboKode(){\n        return cboKode;\n    }"} {"path":"downloaded/FormAmbilObat.java","method_name":"getTxtSatuan","content":"/**\n     * Creates new form FormAmbilObat\n     */\npublic javax.swing.JTextField getTxtSatuan(){\n        return txtSatuan;\n    }"} {"path":"downloaded/FormAmbilObat.java","method_name":"getTxtJumlah","content":"/**\n     * Creates new form FormAmbilObat\n     */\npublic javax.swing.JTextField getTxtJumlah(){\n        return txtJumlah;\n    }"} {"path":"downloaded/FormAmbilObat.java","method_name":"getTabelPeriksa","content":"/**\n     * Creates new form FormAmbilObat\n     */\npublic javax.swing.JTable getTabelPeriksa(){\n        return tabelPeriksa;\n    }"} {"path":"downloaded/FormAmbilObat.java","method_name":"getTabelAmbilObat","content":"/**\n     * Creates new form FormAmbilObat\n     */\npublic javax.swing.JTable getTabelAmbilObat(){\n        return tabelAmbilObat;\n    }"} {"path":"downloaded/CompanyFX.java","method_name":"setCompanyTable","content":"/**\n     * Initializes the controller class.\n     */\npublic void setCompanyTable(){\n        companyname_column.setCellValueFactory(new PropertyValueFactory(\"name\"));\n        companyname_column.setCellFactory(TextFieldTableCell.forTableColumn());\n        companyname_column.setOnEditCommit((TableColumn.CellEditEvent<Company, String> t) -> {\n            (t.getTableView().getItems().get(t.getTablePosition().getRow())).setName(t.getNewValue());\n            msabase.getCompanyDAO().update(t.getTableView().getItems().get(t.getTablePosition().getRow()));\n        });\n        \n        rfc_column.setCellValueFactory(new PropertyValueFactory(\"rfc\"));\n        rfc_column.setCellFactory(TextFieldTableCell.forTableColumn());\n        rfc_column.setOnEditCommit((TableColumn.CellEditEvent<Company, String> t) -> {\n            (t.getTableView().getItems().get(t.getTablePosition().getRow())).setRfc(t.getNewValue());\n            msabase.getCompanyDAO().update(t.getTableView().getItems().get(t.getTablePosition().getRow()));\n        });\n        \n        taxid_column.setCellValueFactory(new PropertyValueFactory(\"tax_id\"));\n        taxid_column.setCellFactory(TextFieldTableCell.forTableColumn());\n        taxid_column.setOnEditCommit((TableColumn.CellEditEvent<Company, String> t) -> {\n            (t.getTableView().getItems().get(t.getTablePosition().getRow())).setTax_id(t.getNewValue());\n            msabase.getCompanyDAO().update(t.getTableView().getItems().get(t.getTablePosition().getRow()));\n        });\n        \n        paymentterms_column.setCellValueFactory(new PropertyValueFactory(\"payment_terms\"));\n        paymentterms_column.setCellFactory(TextFieldTableCell.forTableColumn());\n        paymentterms_column.setOnEditCommit((TableColumn.CellEditEvent<Company, String> t) -> {\n            (t.getTableView().getItems().get(t.getTablePosition().getRow())).setPayment_terms(t.getNewValue());\n            msabase.getCompanyDAO().update(t.getTableView().getItems().get(t.getTablePosition().getRow()));\n        });\n        \n        supplier_column.setCellValueFactory(new PropertyValueFactory<>(\"supplier\"));\n        supplier_column.setCellFactory(column -> new CheckBoxTableCell<>());\n        supplier_column.setCellValueFactory(cellData -> {\n            Company cellValue = cellData.getValue();\n            BooleanProperty property = new SimpleBooleanProperty(cellValue.isSupplier());\n            // Add listener to handler change\n            property.addListener((observable, oldValue, newValue) -> {\n                cellValue.setSupplier(newValue);\n                msabase.getCompanyDAO().update(cellValue);\n            });\n            return property;\n        });\n        \n        client_column.setCellValueFactory(new PropertyValueFactory<>(\"client\"));\n        client_column.setCellFactory(column -> new CheckBoxTableCell<>());\n        client_column.setCellValueFactory(cellData -> {\n            Company cellValue = cellData.getValue();\n            BooleanProperty property = new SimpleBooleanProperty(cellValue.isClient());\n            // Add listener to handler change\n            property.addListener((observable, oldValue, newValue) -> {\n                cellValue.setClient(newValue);\n                msabase.getCompanyDAO().update(cellValue);\n            });\n            return property;\n        });\n        \n    }"} {"path":"downloaded/CustomAcceptProvider.java","method_name":"isFullyContained","content":"/**\n     * Test if a widget is fully with in the bounds of the container widget.\n     *\n     * @param widget The widget to test\n     * @return True if the widget is in the containers bounds.\n     */\nprotected boolean isFullyContained(Widget widget) {\n        // Calling getPreferredBounds forces the bounds to be calculated if it\n        // has not already been calculated.  For example when the Widget was\n        // just created and therefore has not had a chance to be displayed.\n        Rectangle area = widget.getClientArea();\n\n        boolean retVal = false;\n        if (area != null) {\n            Rectangle sceneArea = widget.convertLocalToScene(area);\n\n            Rectangle localArea = scene.convertSceneToLocal(sceneArea);\n            Rectangle myArea = scene.getClientArea();\n            retVal = myArea.contains(localArea);\n        }\n\n        return retVal;\n    }"} {"path":"downloaded/CustomAcceptProvider.java","method_name":"isWidgetMove","content":"/**\n     * Test if a widget is fully with in the bounds of the container widget.\n     *\n     * @param widget The widget to test\n     * @return True if the widget is in the containers bounds.\n     */\nprotected boolean isWidgetMove(Transferable transferable) {\n        return transferable.isDataFlavorSupported(MoveWidgetTransferable.FLAVOR);\n    }"} {"path":"downloaded/CustomAcceptProvider.java","method_name":"isPaletteItem","content":"/**\n     * Test if a widget is fully with in the bounds of the container widget.\n     *\n     * @param widget The widget to test\n     * @return True if the widget is in the containers bounds.\n     */\nprotected boolean isPaletteItem(Transferable transferable) {\n        return transferable.isDataFlavorSupported(DataFlavor.imageFlavor);\n    }"} {"path":"downloaded/NideshopSpecification.java","method_name":" publ","content":"    /**\n     * 规范名称\n     *\n     * @mbggener\nnUID = 1L;\n\n    public Integer getId() {\n        "} {"path":"downloaded/NideshopSpecification.java","method_name":"  publi","content":"    /**\n     * 规范名称\n     *\n     * @mbggener\n id;\n    }\n\n    public String getName() {\n        re"} {"path":"downloaded/NideshopSpecification.java","method_name":"    public B","content":"    /**\n     * 规范名称\n     *\n     * @mbggener\name;\n    }\n\n    public Byte getSortOrder() {\n        return "} {"path":"downloaded/NideshopSpecification.java","method_name":"  public","content":"    /**\n     * 规范名称\n     *\n     * @mbggener\nder;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(getClass().getSimpleName());\n        sb.append(\" [\");\n        sb.append(\"Hash = \").append(hashCode());\n        sb.append(\", id=\").append(id);\n        sb.append(\", name=\").append(name);\n        sb.append(\", sortOrder=\").append(sortOrder);\n        sb.append(\", serialVersionUID=\").append(serialVersionUID);\n        sb.append(\"]\");\n        return sb.t"} {"path":"downloaded/GetAccountStatusOpStep.java","method_name":"execute","content":"/**\n\t * SendHostStep constructor.\n\t */\n@SuppressWarnings(\"unchecked\")\n\tpublic int execute() throws Exception {\n\t\tSystem.out.println(\"--------------------------GetAccountStatusOpStep-------------------------\");\n\t\tlocale = (Locale) getContext().getValueAt(\"dse_locale\");\n\t\tsql = new Sql(locale.toString().toUpperCase());\n\t\tem = emf.createEntityManager();\n\t\tString strange = \"\";\n\t\tNumFormat NumFrm;\n\t\ttry {\n\t\t\tgetContext().setValueAt(\"AccountStatus\", \"\");\n\t\t\tgetContext().setValueAt(\"AccountStatusCo\", \"\");\n\t\t\tgetContext().setValueAt(\"Showstatus\", \"F\");\n\t\t\tString loEUserID = (String) getContext().getValueAt(\"glbEUserID\");\n\t\t\tString loKHID = (String) getContext().getValueAt(\"glbKHID\");\n\t\t\tString loAcctNbrCo;\n\t\t\tString Status=\"\";\n\t\t\tloAcctNbrCo = (String) getContext().getValueAt(\"AcctNbr\");\n\t\t\tSystem.out.println(\"Tai Khoan Lien Ket:\"+loAcctNbrCo);\n\t\t\tString loStatusAcctCo = \"\";\n\t\t\tString loMiaccttypdesc = \"\";\n\t\t\tif(!loAcctNbrCo.equals(\"\"))\n\t\t\t{\t\t\t\n\t\t\t\t//NhiLTH, 23/05/2018, lay so du tu DNA\n\t\t\t\tString qry = \"select a.curracctstatcd, nvl(b.miaccttypdesc,' ') \"+ \n\t\t\t\t\t\t\"from acct@lan a, mjmiaccttyp@lan b \"+\n\t\t\t\t\t\t\"where a.mjaccttypcd=b.mjaccttypcd and a.currmiaccttypcd=b.miaccttypcd \"+\n\t\t\t\t\t\t\"and a.acctnbr=?1 \";\n\t\t\t\t\tList a = em.createNativeQuery(qry).setParameter(1,loAcctNbrCo).getResultList();\n\t\t\t\t\tIterator i = a.iterator();\n\t\t\t\t\tObject[] result;\n\t\t\t\t\tif (i.hasNext()) {\n\t\t\t\t\t\tresult = (Object[]) i.next();\n\t\t\t\t\t\tif(result != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloStatusAcctCo = (String) result[0];\n\t\t\t\t\t\t\tloMiaccttypdesc = (String) result[1];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tAccountBalance accountBalance = new AccountBalance(getContext(), loAcctNbrCo, false);\t\n\t\t\t\t\tdouble ACCTAVAILAMT= 0.0;\n\t\t\t\t\tACCTAVAILAMT = accountBalance.getAccount().getACCTAVAILAMT();\n\t\t\t\t\t\n\t\t\t\t\tSystem.out.println(\"Trang thai tai khoan la:\"+loStatusAcctCo);\n\t\t\t\t\tgetContext().setValueAt(\"AccountStatus\", loStatusAcctCo);\n\t\t\t\t\tgetContext().setValueAt(\"Showstatus\", \"T\");\n\n\t\t\t\t\tif(loStatusAcctCo.equals(\"IACT\") || loStatusAcctCo.equals(\"DORM\"))\n\t\t\t\t\t{\n//\t\t\t\t\t\tgetContext().setValueAt(\"Showstatus\", \"T\");\n//\t\t\t\t\t\tqry = \"select nvl(b.miaccttypdesc,' '), to_char(nvl(c.availablebalance,0)) sodu \"+ \n//\t\t\t\t\t\t\"from acct@lan a, mjmiaccttyp@lan b, acct_web c \"+\n//\t\t\t\t\t\t\"where a.mjaccttypcd=b.mjaccttypcd and a.currmiaccttypcd=b.miaccttypcd and a.acctnbr = c.acctnbr \"+\n//\t\t\t\t\t\t\"and a.acctnbr=?1 \";\n//\t\t\t\t\t\n//\t\t\t\t\t\t\tQuery query = em.createNativeQuery(qry);\n//\t\t\t\t\t\t\tquery.setParameter(1, loAcctNbrCo);\n//\t\t\t\t\t\t\t\n//\t\t\t\t\t\t\tList accts = query.getResultList();\n//\t\t\t\t\t\t\ti = accts.iterator();\n//\t\t\t\t\t\t\t\n//\t\t\t\t\t\t\tstrange = \"###,###,###,###,##0\";\n//\t\t\t\t\t\t\tNumFrm = new NumFormat(strange, locale.toString());\n//\t\t\t\t\t\t\t\n//\t\t\t\t\t\t\tif (i.hasNext()) {\n//\t\t\t\t\t\t\t\tresult = (Object[]) i.next();\n//\t\t\t\t\t\t\t\tif(result != null)\n//\t\t\t\t\t\t\t\t{\t\n//\t\t\t\t\t\t\t\t\t\n//\t\t\t\t\t\t\t\t\tCommonMessage ms= CommonMessage.getInstance();\n//\t\t\t\t\t\t\t\t\tgetContext().setValueAt(\"AccountStatusNo\", (String) result[0]+\" \"+ms.getMessage(\"so_du\", locale.toString()) +NumFrm.format(Double.parseDouble(result[1].toString()))+\".<br/>\"+\n//\t\t\t\t\t\t\t\t\t\t\tms.getMessage(\"tai_khoan\", locale.toString())+\" \"\n//\t\t\t\t\t\t\t\t\t\t\t+loAcctNbrCo+\" \"+ ms.getMessage(\"dang_bi_Inactive_Normant\", locale.toString())\n//\t\t\t\t\t\t\t\t\t\t\t+ \".<br/>\" +ms.getMessage(\"khach_hang_phai_kich_hoat_tai_khoan\", locale.toString())+\": \"\n//\t\t\t\t\t\t\t\t\t\t\t+ ms.getMessage(\"tien_ich_kich_hoat_tai_khoan_Inactive_Normant\", locale.toString()));\n//\t\t\t\t\t\t\t\t\treturn 1;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n//\t\t\t\t\t\t\t\t}\n//\t\t\t\t\t\t\t}\n//\t\t\t\t\t\t\telse\n//\t\t\t\t\t\t\t{\n//\t\t\t\t\t\t\t\tCommonMessage ms= CommonMessage.getInstance();\n//\t\t\t\t\t\t\t\tgetContext().setValueAt(\"AccountStatusNo\", \"\"+\" \"+ms.getMessage(\"so_du\", locale.toString()) + NumFrm.format(0.0)+\".<br/>\"+\n//\t\t\t\t\t\t\t\t\t\tms.getMessage(\"tai_khoan\", locale.toString())+\" \"\n//\t\t\t\t\t\t\t\t\t\t+loAcctNbrCo+\" \"+ ms.getMessage(\"dang_bi_Inactive_Normant\", locale.toString())\n//\t\t\t\t\t\t\t\t\t\t+ \".<br/>\" +ms.getMessage(\"khach_hang_phai_kich_hoat_tai_khoan\", locale.toString())+\": \"\n//\t\t\t\t\t\t\t\t\t\t+ ms.getMessage(\"tien_ich_kich_hoat_tai_khoan_Inactive_Normant\", locale.toString()));\n//\t\t\t\t\t\t\t\treturn 1;\t\n//\t\t\t\t\t\t\t}\n//\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tstrange = \"###,###,###,###,##0\";\n\t\t\t\t\t\t\tNumFrm = new NumFormat(strange, locale.toString());\n\t\t\t\t\t\t\tCommonMessage ms= CommonMessage.getInstance();\n\t\t\t\t\t\t\tgetContext().setValueAt(\"AccountStatusNo\", \"\"+\" \"+ms.getMessage(\"so_du\", locale.toString()) + NumFrm.format(ACCTAVAILAMT)+\".<br/>\"+\n\t\t\t\t\t\t\t\t\tms.getMessage(\"tai_khoan\", locale.toString())+\" \"\n\t\t\t\t\t\t\t\t\t+loAcctNbrCo+\" \"+ ms.getMessage(\"dang_bi_Inactive_Normant\", locale.toString())\n\t\t\t\t\t\t\t\t\t+ \".<br/>\" +ms.getMessage(\"khach_hang_phai_kich_hoat_tai_khoan\", locale.toString())+\": \"\n\t\t\t\t\t\t\t\t\t+ ms.getMessage(\"tien_ich_kich_hoat_tai_khoan_Inactive_Normant\", locale.toString()));\n\t\t\t\t\t\t\treturn 1;\t\n\t\t\t\t\t}else\n\t\t\t\t\t{\n\t\t\t\t\t\t//getContext().setValueAt(\"Showstatus\", \"T\");\n//\t\t\t\t\t\tqry = \"select nvl(b.miaccttypdesc,' '), to_char(nvl(c.availablebalance,0)) sodu \"+ \n//\t\t\t\t\t\t\"from acct@lan a, mjmiaccttyp@lan b, acct_web c \"+\n//\t\t\t\t\t\t\"where a.mjaccttypcd=b.mjaccttypcd and a.currmiaccttypcd=b.miaccttypcd and a.acctnbr = c.acctnbr \"+\n//\t\t\t\t\t\t\"and a.acctnbr=?1 \";\n//\t\t\t\t\t\n//\t\t\t\t\t\t\tQuery query = em.createNativeQuery(qry);\n//\t\t\t\t\t\t\tquery.setParameter(1, loAcctNbrCo);\n//\t\t\t\t\t\t\t\n//\t\t\t\t\t\t\tList accts = query.getResultList();\n//\t\t\t\t\t\t\ti = accts.iterator();\n//\t\t\t\t\t\t\t\n//\t\t\t\t\t\t\tstrange = \"###,###,###,###,##0\";\n//\t\t\t\t\t\t\tNumFrm = new NumFormat(strange, locale.toString());\n//\t\t\t\t\t\t\t\n//\t\t\t\t\t\t\tif (i.hasNext()) {\n//\t\t\t\t\t\t\t\tresult = (Object[]) i.next();\n//\t\t\t\t\t\t\t\tif(result != null)\n//\t\t\t\t\t\t\t\t{\t\n//\t\t\t\t\t\t\t\t\t\n//\t\t\t\t\t\t\t\t\tCommonMessage ms= CommonMessage.getInstance();\n//\t\t\t\t\t\t\t\t\tgetContext().setValueAt(\"AccountStatusNo\", (String) result[0]+\" \"+ms.getMessage(\"so_du\", locale.toString()) +NumFrm.format(Double.parseDouble(result[1].toString())));\n//\t\t\t\t\t\t\t\t\treturn 1;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n//\t\t\t\t\t\t\t\t}\n//\t\t\t\t\t\t\t}\n//\t\t\t\t\t\t\telse\n//\t\t\t\t\t\t\t{\n//\t\t\t\t\t\t\t\tCommonMessage ms= CommonMessage.getInstance();\n//\t\t\t\t\t\t\t\tgetContext().setValueAt(\"AccountStatusNo\", \"\"+\" \"+ms.getMessage(\"so_du\", locale.toString()) + NumFrm.format(0.0)\t\t\t\t\t\t);\n//\t\t\t\t\t\t\t\treturn 1;\t\n//\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstrange = \"###,###,###,###,##0\";\n\t\t\t\t\t\t\tNumFrm = new NumFormat(strange, locale.toString());\n\t\t\t\t\t\t\tCommonMessage ms= CommonMessage.getInstance();\n\t\t\t\t\t\t\tgetContext().setValueAt(\"AccountStatusNo\", \"\"+\" \"+ms.getMessage(\"so_du\", locale.toString()) + NumFrm.format(ACCTAVAILAMT));\n\t\t\t\t\t\t\treturn 1;\t\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t\tcatch (Exception ex) \n\t\t{\n\t\t\tSystem.out.println(ex.toString());\n\t\t\tgetContext().setValueAt(\"TrxErrorCode\", \"199999#\");\n\t\t\tgetContext().setValueAt(\"TrxErrorMessage\", sql.getErrorString(\"199999#\"));\n\t\t\treturn 1;\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tif(em != null && em.isOpen())\n\t\t\t{\n\t\t\t\tem.close();\n\t\t\t\tem=null;\n\t\t\t}\n\t\t}\n\t}"} {"path":"downloaded/Loader.java","method_name":"initialize","content":"/**\n\t * Initialize the contents of the frame.\n\t */\nprivate void initialize() \n\t{\n\t\tframe = new JFrame(\"Loader Test\");\n\t\tfinal DefaultListModel<JItemPanel> ApplicationList = new DefaultListModel<JItemPanel>();\n\t\t\n\t\tframe.addWindowListener(new WindowAdapter() \n\t\t{\n\t\t\t@Override\n\t\t\tpublic void windowClosing(WindowEvent e) \n\t\t\t{\n\t\t\t\tFileWork.Save(ApplicationList);\n\t\t\t\t//Speichern nach beendigung\n\t\t\t}\n\t\t});\n\t\tframe.setBounds(100, 100, 450, 400);\n\t\tframe.setMinimumSize(new Dimension(450, 400));\n\t\tframe.setPreferredSize(new Dimension(450, 400));\n\t\tframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t\tframe.getContentPane().setLayout(null);\n\t\t\t\n\t\t//final ArrayList<LItem> LItemList = new ArrayList<LItem>();\n\t\t//final ArrayList<JItemPanel> LPanelList = new ArrayList<JItemPanel>();\n\t\t\n\t\t\t\t\n\t\t//-------------TestItem---------------------\n\t\t//LItem Item = new LItem(\"P:\\\\GoldWave\\\\GoldWave.exe\", \"Goldwave\");\n\t\t//JItemPanel IPanel = new JItemPanel(Item);\n\t\t//ApplicationList.addElement(IPanel);\n\t\t//-------------TestItem---------------------\n\t\t\n\t\t\n\t\t//LItemList.add(Item);\n\t\t//LPanelList.add(IPanel);\n\t\t\n\t\tFileWork = new IOData();\n\t\tFileWork.Load(ApplicationList);\n\t\t\n\t\tJButton btnNeuesItem = new JButton(\"Neues Item\");\n\t\t\n\t\tframe.getContentPane().add(btnNeuesItem);\n\t\tbtnNeuesItem.addActionListener(new ActionListener() \n\t\t{\n\t\t\tpublic void actionPerformed(ActionEvent arg0) \n\t\t\t{\n\t\t\t\t\n\t\t\t\tJFileChooser FD = new JFileChooser();\n\t\t\t\tFD.setDialogTitle(\"Anwendung wählen\");\n\t\t\t\tFD.setFileFilter(new FileFilter() \n\t\t\t\t{\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getDescription() \n\t\t\t\t\t{\n\t\t\t\t\t\treturn \"*.exe, *.com, *.bat, *.cmd, *,pif\" ;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic boolean accept(File f) \n\t\t\t\t\t{\n\t\t\t\t\t\treturn f.isDirectory() || f.getName().matches(\".*\\\\.(exe|com|bat|cmd|pif)\");\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tFD.setVisible(true);\n\t\t\t\tFD.showOpenDialog(null);\n\t\t\t\t//JOptionPane.showMessageDialog(null, FD.getCurrentDirectory().toString()+\" \"+FD.getSelectedFile().toString());\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tLItem Item = new LItem(FD.getCurrentDirectory().toString(), FD.getSelectedFile().toString());\n\t\t\t\t//LItemList.add(Item);\n\t\t\t\tJItemPanel IPanel = new JItemPanel(Item);\n\t\t\t\t//LPanelList.add(IPanel);\n\t\t\t\tApplicationList.addElement(IPanel);\n\t\t\t}\n\t\t});\n\t\t\n\t\tbtnNeuesItem.setBounds(21, 11, 89, 23);\n\t\t\n\t\t\n\t\t// Checkboxliste\n\t\t\n\t\tJLoaderList list = new JLoaderList();\n\t\tlist.setModel(ApplicationList);\n\t\tlist.setBounds(10, 35, 300, 200);\n\t\tlist.ensureIndexIsVisible(2);\n\t\t\n\n\t\tJScrollPane scrollPane = new JScrollPane(list);\n\t\tscrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);\n\t\tscrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);\n\t\t\t\t\n\t\tscrollPane.setBounds(20, 50, 400, 300);\n\t\t//frame.getContentPane().add(list_1);\n\t\tframe.getContentPane().add(scrollPane);\n\t\t\n\t\t\n\t\t//JOptionPane.showMessageDialog(pApplications, TestItem.getNumbOfCores());\n\t"} {"path":"downloaded/AdminHomePageFXMLController.java","method_name":"selectAction","content":"/**\n     * Initializes the controller class.\n     */\n@FXML\n    private void selectAction(ActionEvent event) {\n        String selectedTable=tableBox.getValue();\n        String window=null;\n        if(selectedTable==null)\n        {\n            warningText1.setVisible(true);\n            return;\n        }\n        if(selectedTable.equals(\"Customer\"))\n            window=\"CustomerTableViewAdmin\";\n        else if(selectedTable.equals(\"Country\"))\n            window=\"CountryViewTableAdmin\";\n        else if(selectedTable.equals(\"Database Admin\"))\n            window=\"DatabaseAdminTableViewAdmin\";\n        else if(selectedTable.equals(\"City\"))\n            window=\"CityTableViewAdmin\";\n        else if(selectedTable.equals(\"Company\"))\n            window=\"CompanyTableViewAdmin\";\n        else if(selectedTable.equals(\"Hotel\"))\n            window=\"HotelTableViewAdmin\";\n        else if(selectedTable.equals(\"Sites\"))\n            window=\"SitesTableViewAdmin\";\n        else if(selectedTable.equals(\"Tour Packages\"))\n            window=\"TourPackageTableViewAdmin\";\n        window+=\".fxml\";\n        try {\n        Stage stage = (Stage) backButton.getScene().getWindow();\n        Parent root1 = FXMLLoader.load(getClass().getResource(window));\n        Scene s1=new Scene(root1);\n        stage.setScene(s1);\n        stage.show();\n        }\n        catch(Exception e){ System.out.println(e);}  \n    \n    }"} {"path":"downloaded/AdminHomePageFXMLController.java","method_name":"InsertAction","content":"/**\n     * Initializes the controller class.\n     */\n@FXML\n    private void InsertAction(ActionEvent event)\n    {\n        String selectedTable=tableBox.getValue();\n        if(selectedTable==null)\n        {\n            warningText1.setVisible(true);\n            return;\n        }\n        String windowString=null;\n        if(selectedTable.equals(\"Country\"))\n            windowString=\"Country\";\n        else if(selectedTable.equals(\"City\"))\n            windowString=\"City\";\n        else if(selectedTable.equals(\"Company\"))\n            windowString=\"Company\";\n        else if(selectedTable.equals(\"Hotel\"))\n            windowString=\"Hotel\";\n        else if(selectedTable.equals(\"Hotel Rooms\"))\n            windowString=\"HotelRoom\";\n        else if(selectedTable.equals(\"Sites\"))\n            windowString=\"Sites\";\n        else if(selectedTable.equals(\"Staff\"))\n            windowString=\"Staff\";\n        else if(selectedTable.equals(\"Tour Packages\"))\n            windowString=\"TourPackage\";\n        else\n        {\n            warningText.setVisible(true);\n            return;\n        }\n        windowString+=\"FXML.fxml\";\n        try {\n        Stage stage = (Stage) backButton.getScene().getWindow();\n        Parent root1 = FXMLLoader.load(getClass().getResource(windowString));\n        Scene s1=new Scene(root1);\n        stage.setScene(s1);\n        stage.show();\n        }\n        catch(Exception e){ System.out.println(e);}  \n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"useTemplet","content":"/**\n     * Unrepeatable random\n     */\npublic Rect useTemplet(int index, Rect rect) {\n        if (!isInitReady()) {\n            rect.set(0, 0, 0, 0);\n            return rect;\n        }\n\n        int templetId = 0;\n        int overIndex = index % mNumTempletItemTotal;\n        int times = index / mNumTempletItemTotal;\n\n        templetId = getTempletId(overIndex, OVER_INDEX);\n        switch (templetId) {\n            case TEMPLET0:\n                rect = LayoutTemplet0(index, rect, overIndex, times);\n                break;\n\n            case TEMPLET1:\n                rect = LayoutTemplet1(index, rect, overIndex, times);\n                break;\n\n            case TEMPLET2:\n                rect = LayoutTemplet2(index, rect, overIndex, times);\n                break;\n\n            case TEMPLET3:\n                rect = LayoutTemplet3(index, rect, overIndex, times);\n                break;\n\n            case TEMPLET4:\n                rect = LayoutTemplet4(index, rect, overIndex, times);\n                break;\n\n            case TEMPLET5:\n                rect = LayoutTemplet5(index, rect, overIndex, times);\n                break;\n\n            // ========== Templet add/remove ==========\n            /**\n             case X:\n             rect = LayoutTempletX(index, rect, overIndex, times);\n             break;\n             */\n            // ========== Templet add/remove ==========\n\n            default:\n                break;\n        }\n\n        return rect;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"getContentHeight","content":"/**\n     * Unrepeatable random\n     */\npublic int getContentHeight(int slotCount) {\n        if (!isInitReady()) return 0;\n\n        int templetId = 0;\n        int contentHeight = 0;\n        int overHeight = 0;\n        int frontHeight = 0;\n\n        boolean divideZero = mNumTempletItemTotal == 0 ? true : false;\n        int times = divideZero ? 0 : slotCount / mNumTempletItemTotal;\n        int overCount = divideZero ? 0 : slotCount % mNumTempletItemTotal;\n        if (overCount != 0) {\n            templetId = getTempletId(overCount, OVER_COUNT);\n            frontHeight = getFrontHeight(templetId);\n            overCount = overCount - getFrontItemCount(templetId);\n        }\n\n        if (overCount != 0) {\n            switch (templetId) {\n                case TEMPLET0:\n                    overHeight = calcOverHeightTemplet0(overCount, overHeight);\n                    break;\n\n                case TEMPLET1:\n                    overHeight = calcOverHeightTemplet1(overCount, overHeight);\n                    break;\n\n                case TEMPLET2:\n                    overHeight = calcOverHeightTemplet2(overCount, overHeight);\n                    break;\n\n                case TEMPLET3:\n                    overHeight = calcOverHeightTemplet3(overCount, overHeight);\n                    break;\n\n                case TEMPLET4:\n                    overHeight = calcOverHeightTemplet4(overCount, overHeight);\n                    break;\n\n                case TEMPLET5:\n                    overHeight = calcOverHeightTemplet5(overCount, overHeight);\n                    break;\n\n                // ========== Templet add/remove ==========\n                /**\n                 case TEMPLETX:\n                 overHeight = calcOverHeightTempletX(overCount, overHeight);\n                 break;\n                 */\n                // ========== Templet add/remove ==========\n\n                default:\n                    break;\n            }\n        }\n\n        contentHeight = times * mTempletTotalHeight + frontHeight + overHeight;\n\n        return contentHeight;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"getTempletId","content":"/**\n     * Unrepeatable random\n     */\nprivate int getTempletId(int result, int overType) {\n        int templetId = 0;\n\n        switch (overType) {\n            case OVER_INDEX:\n                for (int i = 0; i < mCountTemplet; i++) {\n                    if (i == 0) {\n                        if (result < mNumTempletPlus[0]) {\n                            templetId = mTempletId[0];\n                        }\n                    } else {\n                        if (result >= mNumTempletPlus[i - 1] && result < mNumTempletPlus[i]) {\n                            templetId = mTempletId[i];\n                        }\n                    }\n                }\n                break;\n\n            case OVER_COUNT:\n                for (int i = 0; i < mCountTemplet; i++) {\n                    if (i == 0) {\n                        if (result <= mNumTempletPlus[0]) {\n                            templetId = mTempletId[0];\n                        }\n                    } else {\n                        if (result > mNumTempletPlus[i - 1] && result <= mNumTempletPlus[i]) {\n                            templetId = mTempletId[i];\n                        }\n                    }\n                }\n                break;\n\n            case OVER_POSITION:\n                for (int i = 0; i < mCountTemplet; i++) {\n                    if (i == 0) {\n                        if (result < mTempletPlusHeight[0]) {\n                            templetId = mTempletId[0];\n                        }\n                    } else {\n                        if (result >= mTempletPlusHeight[i - 1] && result < mTempletPlusHeight[i]) {\n                            templetId = mTempletId[i];\n                        }\n                    }\n                }\n                break;\n        }\n\n        return templetId;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"getFrontHeight","content":"/**\n     * Unrepeatable random\n     */\nprivate int getFrontHeight(int templetId) {\n        int frontHeight = 0;\n        int templetIdIndex = getTempletIdIndex(templetId);\n\n        if (templetIdIndex != 0) {\n            frontHeight = mTempletPlusHeight[templetIdIndex - 1];\n        }\n\n        return frontHeight;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"getFrontItemCount","content":"/**\n     * Unrepeatable random\n     */\nprivate int getFrontItemCount(int templetId) {\n        int frontItemCount = 0;\n        int templetIdIndex = getTempletIdIndex(templetId);\n\n        if (templetIdIndex != 0) {\n            frontItemCount = mNumTempletPlus[templetIdIndex - 1];\n        }\n\n        return frontItemCount;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"calcOverHeightTemplet0","content":"/**\n     * Unrepeatable random\n     */\nprivate int calcOverHeightTemplet0(int overCount, int overHeight) {\n        if (overCount < 4) {\n            overHeight = mItemHeight * 2;\n        } else {\n            overHeight = mItemHeight * 3;\n        }\n\n        return overHeight;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"calcOverHeightTemplet1","content":"/**\n     * Unrepeatable random\n     */\nprivate int calcOverHeightTemplet1(int overCount, int overHeight) {\n        if (overCount < 4) {\n            overHeight = mItemHeight;\n        } else {\n            overHeight = mItemHeight * 2;\n        }\n\n        return overHeight;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"calcOverHeightTemplet2","content":"/**\n     * Unrepeatable random\n     */\nprivate int calcOverHeightTemplet2(int overCount, int overHeight) {\n        if (overCount < 3) {\n            overHeight = mItemHeight * 2;\n        } else {\n            overHeight = mItemHeight * 3;\n        }\n\n        return overHeight;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"calcOverHeightTemplet3","content":"/****************************************************************************\n     *                      Templet code area --Start\n     ****************************************************************************/\nprivate int calcOverHeightTemplet3(int overCount, int overHeight) {\n        if (overCount < 3) {\n            overHeight = mItemHeight * 2;\n        } else {\n            overHeight = mItemHeight * 4;\n        }\n\n        return overHeight;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"calcOverHeightTemplet4","content":"/****************************************************************************\n     *                      Templet code area --Start\n     ****************************************************************************/\nprivate int calcOverHeightTemplet4(int overCount, int overHeight) {\n        if (overCount < 4) {\n            overHeight = mItemHeight * 2;\n        } else if (overCount == 4) {\n            overHeight = mItemHeight * 3;\n        } else {\n            overHeight = mItemHeight * 4;\n        }\n\n        return overHeight;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"calcOverHeightTemplet5","content":"/****************************************************************************\n     *                      Templet code area --Start\n     ****************************************************************************/\nprivate int calcOverHeightTemplet5(int overCount, int overHeight) {\n        if (overCount == 1) {\n            overHeight = mItemHeight;\n        } else if (overCount < 4) {\n            overHeight = mItemHeight * 2;\n        } else if (overCount < 6) {\n            overHeight = mItemHeight * 4;\n        } else {\n            overHeight = mItemHeight * 6;\n        }\n\n        return overHeight;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"getTempletIdIndex","content":"/****************************************************************************\n     *                      Templet code area --Start\n     ****************************************************************************/\nprivate int getTempletIdIndex(int id) {\n        int idIndex = 0;\n        for (int i = 0; i < mCountTemplet; i++) {\n            if (mTempletId[i] == id) {\n                idIndex = i;\n            }\n        }\n\n        return idIndex;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"getSlotIndex","content":"/****************************************************************************\n     *                      Templet code area --Start\n     ****************************************************************************/\npublic int getSlotIndex(int absoluteX, int absoluteY, int index) {\n        if (!isInitReady()) return 0;\n\n        int templetId = 0;\n        int overIndex = 0;\n        int frontCount = 0;\n\n        boolean divideZero = mTempletTotalHeight == 0 ? true : false;\n        int times = divideZero ? 0 : absoluteY / mTempletTotalHeight;\n        int overPos = divideZero ? 0 : absoluteY % mTempletTotalHeight;\n\n        if (overPos != 0) {\n            templetId = getTempletId(overPos, OVER_POSITION);\n            frontCount = getFrontItemCount(templetId);\n            overPos = overPos - getFrontHeight(templetId);\n        }\n\n        if (overPos != 0) {\n            switch (templetId) {\n                case TEMPLET0:\n                    overIndex = calcTouchIndexTemplet0(overPos, absoluteX, overIndex);\n                    break;\n\n                case TEMPLET1:\n                    overIndex = calcTouchIndexTemplet1(overPos, absoluteX, overIndex);\n                    break;\n\n                case TEMPLET2:\n                    overIndex = calcTouchIndexTemplet2(overPos, absoluteX, overIndex);\n                    break;\n\n                case TEMPLET3:\n                    overIndex = calcTouchIndexTemplet3(overPos, absoluteX, overIndex);\n                    break;\n\n                case TEMPLET4:\n                    overIndex = calcTouchIndexTemplet4(overPos, absoluteX, overIndex);\n                    break;\n\n                case TEMPLET5:\n                    overIndex = calcTouchIndexTemplet5(overPos, absoluteX, overIndex);\n                    break;\n\n                // ========== Templet add/remove ==========\n                /**\n                 case TEMPLETX:\n                 overIndex = calcTouchIndexTempletX(overPos, absoluteX, overIndex);\n                 break;\n                 */\n                // ========== Templet add/remove ==========\n\n                default:\n                    break;\n            }\n        }\n\n        index = Math.max(0, (times * mNumTempletItemTotal + overIndex + frontCount - 1));\n\n        return index;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"calcTouchIndexTemplet0","content":"/****************************************************************************\n     *                      Templet code area --Start\n     ****************************************************************************/\nprivate int calcTouchIndexTemplet0(int overPos, int absoluteX, int overIndex) {\n        if (overPos < mItemHeight) {\n            if (absoluteX < mItemWidth * 2) {\n                overIndex = 1;\n            } else {\n                overIndex = 2;\n            }\n        } else if (overPos < mItemHeight * 2) {\n            if (absoluteX < mItemWidth * 2) {\n                overIndex = 1;\n            } else {\n                overIndex = 3;\n            }\n        } else {\n            if (absoluteX < mItemWidth) {\n                overIndex = 4;\n            } else if (absoluteX < mItemWidth * 2) {\n                overIndex = 5;\n            } else {\n                overIndex = 6;\n            }\n        }\n\n        return overIndex;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"calcTouchIndexTemplet1","content":"/****************************************************************************\n     *                      Templet code area --Start\n     ****************************************************************************/\nprivate int calcTouchIndexTemplet1(int overPos, int absoluteX, int overIndex) {\n        if (overPos < mItemHeight) {\n            if (absoluteX < mItemWidth) {\n                overIndex = 1;\n            } else if (absoluteX < mItemWidth * 2) {\n                overIndex = 2;\n            } else {\n                overIndex = 3;\n            }\n        } else {\n            if (absoluteX < mItemWidth) {\n                overIndex = 4;\n            } else if (absoluteX < mItemWidth * 2) {\n                overIndex = 5;\n            } else {\n                overIndex = 6;\n            }\n        }\n\n        return overIndex;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"calcTouchIndexTemplet2","content":"/****************************************************************************\n     *                      Templet code area --Start\n     ****************************************************************************/\nprivate int calcTouchIndexTemplet2(int overPos, int absoluteX, int overIndex) {\n        if (overPos < mItemHeight * 2) {\n            if (absoluteX < mItemWidth * 3 / 2) {\n                overIndex = 1;\n            } else {\n                overIndex = 2;\n            }\n        } else {\n            if (absoluteX < mItemWidth) {\n                overIndex = 3;\n            } else if (absoluteX < mItemWidth * 2) {\n                overIndex = 4;\n            } else {\n                overIndex = 5;\n            }\n        }\n\n        return overIndex;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"calcTouchIndexTemplet3","content":"/****************************************************************************\n     *                      Templet code area --Start\n     ****************************************************************************/\nprivate int calcTouchIndexTemplet3(int overPos, int absoluteX, int overIndex) {\n        if (overPos < mItemHeight * 2) {\n            if (absoluteX < mItemWidth * 3 / 2) {\n                overIndex = 1;\n            } else {\n                overIndex = 2;\n            }\n        } else {\n            if (absoluteX < mItemWidth * 3 / 2) {\n                overIndex = 3;\n            } else {\n                overIndex = 4;\n            }\n        }\n\n        return overIndex;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"calcTouchIndexTemplet4","content":"/****************************************************************************\n     *                      Templet code area --Start\n     ****************************************************************************/\nprivate int calcTouchIndexTemplet4(int overPos, int absoluteX, int overIndex) {\n        if (overPos < mItemHeight) {\n            if (absoluteX < mItemWidth * 2) {\n                overIndex = 1;\n            } else {\n                overIndex = 2;\n            }\n        } else if (overPos < mItemHeight * 2) {\n            if (absoluteX < mItemWidth * 2) {\n                overIndex = 1;\n            } else {\n                overIndex = 3;\n            }\n        } else if (overPos < mItemHeight * 3) {\n            if (absoluteX < mItemWidth) {\n                overIndex = 4;\n            } else {\n                overIndex = 5;\n            }\n        } else {\n            if (absoluteX < mItemWidth) {\n                overIndex = 6;\n            } else {\n                overIndex = 5;\n            }\n        }\n\n        return overIndex;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"calcTouchIndexTemplet5","content":"/****************************************************************************\n     *                      Templet code area --Start\n     ****************************************************************************/\nprivate int calcTouchIndexTemplet5(int overPos, int absoluteX, int overIndex) {\n        if (overPos < mItemHeight) {\n            if (absoluteX < mItemWidth) {\n                overIndex = 1;\n            } else {\n                overIndex = 2;\n            }\n        } else if (overPos < mItemHeight * 2) {\n            if (absoluteX < mItemWidth) {\n                overIndex = 3;\n            } else {\n                overIndex = 2;\n            }\n        } else if (overPos < mItemHeight * 4) {\n            if (absoluteX < mItemWidth * 3 / 2) {\n                overIndex = 4;\n            } else {\n                overIndex = 5;\n            }\n        } else if (overPos < mItemHeight * 5) {\n            if (absoluteX < mItemWidth * 2) {\n                overIndex = 6;\n            } else {\n                overIndex = 7;\n            }\n        } else {\n            if (absoluteX < mItemWidth * 2) {\n                overIndex = 6;\n            } else {\n                overIndex = 8;\n            }\n        }\n\n        return overIndex;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"getVisibleRangeIndex","content":"/****************************************************************************\n     *                      Templet code area --Start\n     ****************************************************************************/\npublic int getVisibleRangeIndex(int position, int result, boolean isStart) {\n        if (!isInitReady()) return 0;\n\n        int templetId = 0;\n        int overIndex = 0;\n        int frontCount = 0;\n\n        boolean divideZero = mTempletTotalHeight == 0 ? true : false;\n        int times = divideZero ? 0 : position / mTempletTotalHeight;\n        int overPos = divideZero ? 0 : position % mTempletTotalHeight;\n\n        if (overPos != 0) {\n            templetId = getTempletId(overPos, OVER_POSITION);\n            frontCount = getFrontItemCount(templetId);\n            overPos = overPos - getFrontHeight(templetId);\n        }\n\n        if (overPos != 0) {\n            switch (templetId) {\n                case TEMPLET0:\n                    overIndex = calcIndexTemplet0(overPos, isStart, overIndex);\n                    break;\n\n                case TEMPLET1:\n                    overIndex = calcIndexTemplet1(overPos, isStart, overIndex);\n                    break;\n\n                case TEMPLET2:\n                    overIndex = calcIndexTemplet2(overPos, isStart, overIndex);\n                    break;\n\n                case TEMPLET3:\n                    overIndex = calcIndexTemplet3(overPos, isStart, overIndex);\n                    break;\n\n                case TEMPLET4:\n                    overIndex = calcIndexTemplet4(overPos, isStart, overIndex);\n                    break;\n\n                case TEMPLET5:\n                    overIndex = calcIndexTemplet5(overPos, isStart, overIndex);\n                    break;\n\n                // ========== Templet add/remove ==========\n                /**\n                 case TEMPLETX:\n                 overIndex = calcIndexTempletX(overPos, isStart, overIndex);\n                 break;\n                 */\n                // ========== Templet add/remove ==========\n\n                default:\n                    break;\n            }\n        }\n\n        if (isStart) {\n            result = Math.max(0, (times * mNumTempletItemTotal + overIndex + frontCount - 1));\n        } else {\n            result = Math.min(mSlotCount, times * mNumTempletItemTotal + overIndex + frontCount);\n        }\n\n        return result;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"calcIndexTemplet0","content":"/****************************************************************************\n     *                      Templet code area --Start\n     ****************************************************************************/\nprivate int calcIndexTemplet0(int overPos, boolean isStart, int result) {\n        // Start index\n        if (isStart) {\n            if (overPos < mItemHeight * 2) {\n                result = 1;\n            } else {\n                result = 4;\n            }\n        }\n        // End index\n        else {\n            if (overPos < mItemHeight) {\n                result = 2;\n            } else if (overPos < mItemHeight * 2) {\n                result = 3;\n            } else {\n                result = 6;\n            }\n        }\n\n        return result;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"calcIndexTemplet1","content":"/****************************************************************************\n     *                      Templet code area --Start\n     ****************************************************************************/\nprivate int calcIndexTemplet1(int overPos, boolean isStart, int result) {\n        // Start index\n        if (isStart) {\n            if (overPos < mItemHeight) {\n                result = 1;\n            } else {\n                result = 4;\n            }\n        }\n        // End index\n        else {\n            if (overPos < mItemHeight) {\n                result = 3;\n            } else {\n                result = 6;\n            }\n        }\n\n        return result;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"calcIndexTemplet2","content":"/****************************************************************************\n     *                      Templet code area --Start\n     ****************************************************************************/\nprivate int calcIndexTemplet2(int overPos, boolean isStart, int result) {\n        // Start index\n        if (isStart) {\n            if (overPos < mItemHeight * 2) {\n                result = 1;\n            } else {\n                result = 3;\n            }\n        }\n        // End index\n        else {\n            if (overPos < mItemHeight * 2) {\n                result = 2;\n            } else {\n                result = 5;\n            }\n        }\n\n        return result;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"calcIndexTemplet3","content":"/****************************************************************************\n     *                      Templet code area --Start\n     ****************************************************************************/\nprivate int calcIndexTemplet3(int overPos, boolean isStart, int result) {\n        // Start index\n        if (isStart) {\n            if (overPos < mItemHeight * 2) {\n                result = 1;\n            } else {\n                result = 3;\n            }\n        }\n        // End index\n        else {\n            if (overPos < mItemHeight * 2) {\n                result = 2;\n            } else {\n                result = 4;\n            }\n        }\n\n        return result;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"calcIndexTemplet4","content":"/****************************************************************************\n     *                      Templet code area --Start\n     ****************************************************************************/\nprivate int calcIndexTemplet4(int overPos, boolean isStart, int result) {\n        // Start index\n        if (isStart) {\n            if (overPos < mItemHeight * 2) {\n                result = 1;\n            } else {\n                result = 4;\n            }\n        }\n        // End index\n        else {\n            if (overPos < mItemHeight) {\n                result = 2;\n            } else if (overPos < mItemHeight * 2) {\n                result = 3;\n            } else if (overPos < mItemHeight * 3) {\n                result = 5;\n            } else {\n                result = 6;\n            }\n        }\n\n        return result;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"calcIndexTemplet5","content":"/****************************************************************************\n     *                      Templet code area --Start\n     ****************************************************************************/\nprivate int calcIndexTemplet5(int overPos, boolean isStart, int result) {\n        // Start index\n        if (isStart) {\n            if (overPos < mItemHeight * 2) {\n                result = 1;\n            } else if (overPos < mItemHeight * 4) {\n                result = 4;\n            } else {\n                result = 6;\n            }\n        }\n        // End index\n        else {\n            if (overPos < mItemHeight) {\n                result = 2;\n            } else if (overPos < mItemHeight * 2) {\n                result = 3;\n            } else if (overPos < mItemHeight * 4) {\n                result = 5;\n            } else if (overPos < mItemHeight * 5) {\n                result = 7;\n            } else {\n                result = 8;\n            }\n        }\n\n        return result;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"LayoutTemplet0","content":"/**\n     * ====================== Templet 0 -Start ==========================\n     * _____2_____ __1__\n     * |           |     |\n     * |           |  2  |\n     * 2     1     |_____|\n     * |           |     |\n     * |           |  3  |\n     * |___________|_____|\n     * |     |     |     |\n     * 1  4  |  5  |  6  |\n     * |_____|_____|_____|\n     **/\nprivate Rect LayoutTemplet0(int index, Rect rect, int overIndex, int times) {\n        int x, y;\n\n        int frontHeight = getFrontHeight(0);\n        overIndex = overIndex - getFrontItemCount(0);\n\n        if (overIndex == 0) {\n            x = mHorizontalPadding;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight;\n            rect.set(x, y, x + mItemWidth + mSlotWidth, y + mItemHeight + mSlotHeight);\n        } else if (overIndex == 1) {\n            x = mHorizontalPadding + mItemWidth * 2;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight;\n            rect.set(x, y, x + mSlotWidth, y + mSlotHeight);\n        } else if (overIndex == 2) {\n            x = mHorizontalPadding + mItemWidth * 2;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight + mItemHeight;\n            rect.set(x, y, x + mSlotWidth, y + mSlotHeight);\n        } else if (overIndex == 3) {\n            x = mHorizontalPadding;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight + mItemHeight * 2;\n            rect.set(x, y, x + mSlotWidth, y + mSlotHeight);\n        } else if (overIndex == 4) {\n            x = mHorizontalPadding + mItemWidth;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight + mItemHeight * 2;\n            rect.set(x, y, x + mSlotWidth, y + mSlotHeight);\n        } else if (overIndex == 5) {\n            x = mHorizontalPadding + mItemWidth * 2;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight + mItemHeight * 2;\n            rect.set(x, y, x + mSlotWidth, y + mSlotHeight);\n        }\n\n        return rect;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"LayoutTemplet1","content":"/**\n     * ====================== Templet 1 -Start =======================\n     * __1__ _____ _____\n     * |     |     |     |\n     * 1  1  |  2  |  3  |\n     * |_____|_____|_____|\n     * |     |     |     |\n     * |  4  |  5  |  6  |\n     * |_____|_____|_____|\n     **/\nprivate Rect LayoutTemplet1(int index, Rect rect, int overIndex, int times) {\n        int x, y;\n\n        int frontHeight = getFrontHeight(1);\n        overIndex = overIndex - getFrontItemCount(1);\n\n        if (overIndex == 0) {\n            x = mHorizontalPadding;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight;\n            rect.set(x, y, x + mSlotWidth, y + mSlotHeight);\n        } else if (overIndex == 1) {\n            x = mHorizontalPadding + mItemWidth;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight;\n            rect.set(x, y, x + mSlotWidth, y + mSlotHeight);\n        } else if (overIndex == 2) {\n            x = mHorizontalPadding + mItemWidth * 2;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight;\n            rect.set(x, y, x + mSlotWidth, y + mSlotHeight);\n        } else if (overIndex == 3) {\n            x = mHorizontalPadding;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight + mItemHeight;\n            rect.set(x, y, x + mSlotWidth, y + mSlotHeight);\n        } else if (overIndex == 4) {\n            x = mHorizontalPadding + mItemWidth;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight + mItemHeight;\n            rect.set(x, y, x + mSlotWidth, y + mSlotHeight);\n        } else if (overIndex == 5) {\n            x = mHorizontalPadding + mItemWidth * 2;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight + mItemHeight;\n            rect.set(x, y, x + mSlotWidth, y + mSlotHeight);\n        }\n\n        return rect;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"LayoutTemplet2","content":"/**\n     * ====================== Templet 2 -Start =======================\n     * ___1.5__ ___1.5__\n     * |        |        |\n     * |\t\t  |\t\t   |\n     * 2    1   |    2   |\n     * |        |        |\n     * |________|________|\n     * |     |     |\t   |\n     * 1  3  |  4  |\t5  |\n     * |_____|_____|_____|\n     * 1\n     **/\nprivate Rect LayoutTemplet2(int index, Rect rect, int overIndex, int times) {\n        int x, y;\n\n        int frontHeight = getFrontHeight(2);\n        overIndex = overIndex - getFrontItemCount(2);\n\n        if (overIndex == 0) {\n            x = mHorizontalPadding;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight;\n            rect.set(x, y, x + mSlotWidth + mItemWidth / 2, y + mItemHeight + mSlotHeight);\n        } else if (overIndex == 1) {\n            x = mHorizontalPadding + mItemWidth * 3 / 2;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight;\n            rect.set(x, y, x + mSlotWidth + mItemWidth / 2, y + mItemHeight + mSlotHeight);\n        } else if (overIndex == 2) {\n            x = mHorizontalPadding;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight + mItemHeight * 2;\n            rect.set(x, y, x + mSlotWidth, y + mSlotHeight);\n        } else if (overIndex == 3) {\n            x = mHorizontalPadding + mItemWidth;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight + mItemHeight * 2;\n            rect.set(x, y, x + mSlotWidth, y + mSlotHeight);\n        } else if (overIndex == 4) {\n            x = mHorizontalPadding + mItemWidth * 2;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight + mItemHeight * 2;\n            rect.set(x, y, x + mSlotWidth, y + mSlotHeight);\n        }\n\n        return rect;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"LayoutTemplet3","content":"/**\n     * ====================== Templet 3 -Start =======================\n     * ___1.5__ ___1.5__\n     * |        |        |\n     * |        |        |\n     * 1.5   1   |    2   |\n     * |        |        |\n     * |________|________|\n     * |        |        |\n     * |        |        |\n     * 1.5   3   |    4   |\n     * |        |        |\n     * |________|________|\n     **/\nprivate Rect LayoutTemplet3(int index, Rect rect, int overIndex, int times) {\n        int x, y;\n\n        int frontHeight = getFrontHeight(3);\n        overIndex = overIndex - getFrontItemCount(3);\n\n        if (overIndex == 0) {\n            x = mHorizontalPadding;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight;\n            rect.set(x, y, x + mSlotWidth + mItemWidth / 2, y + mItemHeight + mSlotHeight);\n        } else if (overIndex == 1) {\n            x = mHorizontalPadding + mItemWidth * 3 / 2;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight;\n            rect.set(x, y, x + mSlotWidth + mItemWidth / 2, y + mItemHeight + mSlotHeight);\n        } else if (overIndex == 2) {\n            x = mHorizontalPadding;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight + mItemHeight * 2;\n            rect.set(x, y, x + mSlotWidth + mItemWidth / 2, y + mItemHeight + mSlotHeight);\n        } else if (overIndex == 3) {\n            x = mHorizontalPadding + mItemWidth * 3 / 2;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight + mItemHeight * 2;\n            rect.set(x, y, x + mSlotWidth + mItemWidth / 2, y + mItemHeight + mSlotHeight);\n        }\n\n        return rect;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"LayoutTemplet4","content":"/**\n     * ====================== Templet 4 -Start =======================\n     * _____2_____ __1__\n     * |           |     |\n     * |           |  2  |\n     * 2     1     |_____|\n     * |           |     |\n     * |           |  3  |\n     * |___________|_____|\n     * |\t   |\t\t   |\n     * 1\t4  |\t\t   |\n     * |_____|\t 5\t   2\n     * |\t   |\t\t   |\n     * 1\t6  |\t\t   |\n     * |_____|__________ |\n     * 1\t\t 2\n     **/\nprivate Rect LayoutTemplet4(int index, Rect rect, int overIndex, int times) {\n        int x, y;\n\n        int frontHeight = getFrontHeight(4);\n        overIndex = overIndex - getFrontItemCount(4);\n\n        if (overIndex == 0) {\n            x = mHorizontalPadding;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight;\n            rect.set(x, y, x + mItemWidth + mSlotWidth, y + mItemHeight + mSlotHeight);\n        } else if (overIndex == 1) {\n            x = mHorizontalPadding + mItemWidth * 2;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight;\n            rect.set(x, y, x + mSlotWidth, y + mSlotHeight);\n        } else if (overIndex == 2) {\n            x = mHorizontalPadding + mItemWidth * 2;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight + mItemHeight;\n            rect.set(x, y, x + mSlotWidth, y + mSlotHeight);\n        } else if (overIndex == 3) {\n            x = mHorizontalPadding;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight + mItemHeight * 2;\n            rect.set(x, y, x + mSlotWidth, y + mSlotHeight);\n        } else if (overIndex == 4) {\n            x = mHorizontalPadding + mItemWidth;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight + mItemHeight * 2;\n            rect.set(x, y, x + mItemWidth + mSlotWidth, y + mItemHeight + mSlotHeight);\n        } else if (overIndex == 5) {\n            x = mHorizontalPadding;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight + mItemHeight * 3;\n            rect.set(x, y, x + mSlotWidth, y + mSlotHeight);\n        }\n\n        return rect;\n    }"} {"path":"downloaded/AlbumTemplet.java","method_name":"LayoutTemplet5","content":"/**\n     * ====================== Templet 5 -Start =======================\n     * ___1__ ____2_____\n     * |\t\t|\t\t   |\n     * 1\t 1\t|\t\t   |\n     * |______|\t  2\t   |\n     * |\t\t|\t\t   |\n     * 1\t 3\t|\t\t   |\n     * |______|__________|\n     * |        |        |\n     * |\t\t  |\t\t   |\n     * 2    4   |    5   |\n     * |        |        |\n     * |        |        |\n     * |___1.5__|___1.5__|\n     * |          |      |\n     * |          |   7  1\n     * 2     6    |______|\n     * |          |      |\n     * |          |   8  1\n     * |__________|______|\n     **/\nprivate Rect LayoutTemplet5(int index, Rect rect, int overIndex, int times) {\n        int x, y;\n\n        int frontHeight = getFrontHeight(5);\n        overIndex = overIndex - getFrontItemCount(5);\n\n        if (overIndex == 0) {\n            x = mHorizontalPadding;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight;\n            rect.set(x, y, x + mSlotWidth, y + mSlotHeight);\n        } else if (overIndex == 1) {\n            x = mHorizontalPadding + mItemWidth;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight;\n            rect.set(x, y, x + mItemWidth + mSlotWidth, y + mItemHeight + mSlotHeight);\n        } else if (overIndex == 2) {\n            x = mHorizontalPadding;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight + mItemHeight;\n            rect.set(x, y, x + mSlotWidth, y + mSlotHeight);\n        } else if (overIndex == 3) {\n            x = mHorizontalPadding;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight + mItemHeight * 2;\n            rect.set(x, y, x + mSlotWidth + mItemWidth / 2, y + mItemHeight + mSlotHeight);\n        } else if (overIndex == 4) {\n            x = mHorizontalPadding + mItemWidth * 3 / 2;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight + mItemHeight * 2;\n            rect.set(x, y, x + mSlotWidth + mItemWidth / 2, y + mItemHeight + mSlotHeight);\n        } else if (overIndex == 5) {\n            x = mHorizontalPadding;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight + mItemHeight * 4;\n            rect.set(x, y, x + mItemWidth + mSlotWidth, y + mItemHeight + mSlotHeight);\n        } else if (overIndex == 6) {\n            x = mHorizontalPadding + mItemWidth * 2;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight + mItemHeight * 4;\n            rect.set(x, y, x + mSlotWidth, y + mSlotHeight);\n        } else if (overIndex == 7) {\n            x = mHorizontalPadding + mItemWidth * 2;\n            y = mVerticalPadding + times * mTempletTotalHeight + frontHeight + mItemHeight * 5;\n            rect.set(x, y, x + mSlotWidth, y + mSlotHeight);\n        }\n\n        return rect;\n    }"} {"path":"downloaded/Typhoon.java","method_name":"isGlobalAI","content":"/**\n\t * Method isGlobalAI.\n\t * @return boolean\n\t */\n@Override\n\tpublic boolean isGlobalAI()\n\t{\n\t\treturn true;\n\t}"} {"path":"downloaded/Typhoon.java","method_name":"checkAggression","content":"/**\n\t * Method checkAggression.\n\t * @param target Creature\n\t * @return boolean\n\t */\n@Override\n\tpublic boolean checkAggression(Creature target)\n\t{\n\t\tfinal NpcInstance actor = getActor();\n\t\t\n\t\tif (actor.isDead())\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif ((getIntention() != CtrlIntention.AI_INTENTION_ACTIVE) && (current_point > -1))\n\t\t{\n\t\t\tcurrent_point--;\n\t\t}\n\t\t\n\t\tactor.getAggroList().addDamageHate(target, 0, 1);\n\t\tsetIntention(CtrlIntention.AI_INTENTION_ATTACK, target);\n\t\treturn true;\n\t}"} {"path":"downloaded/Typhoon.java","method_name":"thinkActive","content":"/**\n\t * Method thinkActive.\n\t * @return boolean\n\t */\n@Override\n\tpublic boolean thinkActive()\n\t{\n\t\tfinal NpcInstance actor = getActor();\n\t\t\n\t\tif (actor.isDead())\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif (_def_think)\n\t\t{\n\t\t\tif (doTask())\n\t\t\t{\n\t\t\t\tclearTasks();\n\t\t\t}\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif (super.thinkActive())\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif ((System.currentTimeMillis() > wait_timeout) && ((current_point > -1) || Rnd.chance(5)))\n\t\t{\n\t\t\tif (!wait && (current_point == 31))\n\t\t\t{\n\t\t\t\twait_timeout = System.currentTimeMillis() + 30000;\n\t\t\t\twait = true;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\twait_timeout = 0;\n\t\t\twait = false;\n\t\t\tcurrent_point++;\n\t\t\t\n\t\t\tif (current_point >= points.length)\n\t\t\t{\n\t\t\t\tcurrent_point = 0;\n\t\t\t}\n\t\t\t\n\t\t\tactor.setWalking();\n\t\t\taddTaskMove(points[current_point], true);\n\t\t\tdoTask();\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif (randomAnimation())\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn false;\n\t}"} {"path":"downloaded/Typhoon.java","method_name":"randomWalk","content":"/**\n\t * Method randomWalk.\n\t * @return boolean\n\t */\n@Override\n\tprotected boolean randomWalk()\n\t{\n\t\treturn false;\n\t}"} {"path":"downloaded/InverseTransformSampling.java","method_name":"nextDouble","content":"/**\n     * Construct a random number generator to sample from a distribution.\n     *\n     * @param distribution the distribution to sample from\n     */\n@Override\n    public double nextDouble() {\n        double u = uniform.nextDouble();\n        return distribution.quantile(u);\n    }"} {"path":"downloaded/Board.java","method_name":" scor","content":"\t/**\n\t * Computes the score of a player.\n\t *\n\t * @param player Specifies the player\n\t * @return The current score of the specified player\n\t *\n\tint score(Player player)\n\t{\n\t\treturn IntStream.range(0, state.size())\n\t\t\t.map(i -> state.get(i) == player.getId() ? (int) Math.pow(2, i) : 0)\n\t\t\t.reduce(0, (a, b) -> a + b);\n\t"} {"path":"downloaded/Board.java","method_name":" valu","content":"\t/**\n\t * Retrieves the value at the specified position/field index.\n\t *\n\t * @param field Specifies the position/field index of interest\n\t * @return The value at the position/field index\n\t *\n\tpublic int value(int field)\n\t{\n\t\tif (field < 0 || field > state.size() - 1)\n\t\t{\n\t\t\tthrow new IllegalArgumentException();\n\t\t}\n\t\treturn state.get(field);\n\t"} {"path":"downloaded/Board.java","method_name":" isWinningStat","content":"\t/**\n\t * Checks whether the board's state is a winning state or not.\n\t *\n\t * @param score Specifies the board's state as a score value\n\t * @return True, if the score is a winning score. False, otherwise\n\t *\n\tboolean isWinningState(int score)\n\t{\n\t\treturn winningScores.stream()\n\t\t\t.anyMatch(winningScore -> (winningScore & score) == winningScore);\n\t"} {"path":"downloaded/Board.java","method_name":" isDrawStat","content":"\t/**\n\t * Checks whether the board's state is a tie or not.\n\t *\n\t * @return True, if the board's state is a tie. False, otherwise\n\t *\n\tboolean isDrawState()\n\t{\n\t\treturn !state.contains(0);\n\t"} {"path":"downloaded/Board.java","method_name":" isValidMov","content":"\t/**\n\t * Checks whether the specified move is valid or not.\n\t *\n\t * @param move Specifies the move as a position/field index\n\t * @return True, if the move is valid. False, otherwise\n\t *\n\tboolean isValidMove(int move)\n\t{\n\t\treturn move >= 0 && move <= state.size() - 1 && state.get(move) == 0;\n\t"} {"path":"downloaded/Board.java","method_name":" getSiz","content":"\t/**\n\t * Retrieves the board's size of each dimension.\n\t *\n\t * @return The board's size of each dimension\n\t *\n\tpublic int getSize()\n\t{\n\t\treturn size;\n\t"} {"path":"downloaded/Board.java","method_name":" setSiz","content":"\t/**\n\t * Initializes the board.\n\t *\n\t * @param size Specifies the board's size of each dimension\n\t * @return The board\n\t *\n\tBoard setSize(int size)\n\t{\n\t\tif (size < 3 || size > 5)\n\t\t{\n\t\t\tthrow new IllegalArgumentException();\n\t\t}\n\n\t\tthis.size = size;\n\t\tstate = new ArrayList<>(size * size);\n\t\tfor (int i = 0; i < size * size; i++)\n\t\t{\n\t\t\tstate.add(0);\n\t\t}\n\t\twinningScores = new ArrayList<>(2 * size + 2);\n\n\t\tClassLoader classLoader = getClass().getClassLoader();\n\t\tString name = String.format(Locale.US, \"scores/%dx%d\", size, size);\n\t\tURI uri = null;\n\t\ttry\n\t\t{\n\t\t\turi = classLoader.getResource(name).toURI();\n\t\t} catch (URISyntaxException e)\n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\t\ttry (Stream<String> stream = Files.lines(Paths.get(uri)))\n\t\t{\n\t\t\tstream.forEach(line -> winningScores.add(Integer.valueOf(line)));\n\t\t} catch (IOException e)\n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn this;\n\t"} {"path":"downloaded/Board.java","method_name":" getStat","content":"\t/**\n\t * Retrieves the board's state as a list of positions/field indexes.\n\t *\n\t * @return The board's state\n\t *\n\tList<Integer> getState()\n\t{\n\t\treturn state;\n\t"} {"path":"downloaded/Board.java","method_name":" toStrin","content":"\t/**\n\t * Computes the board's state string representation.\n\t *\n\t * @return The board's state string representation\n\t *\n\t@Override\n\tpublic String toString()\n\t{\n\t\tStringBuilder stringBuilder = new StringBuilder();\n\t\tfor (int i = 0; i < 2 * size + 1; i++)\n\t\t{\n\t\t\tstringBuilder.append(\"-\");\n\t\t}\n\t\tstringBuilder.append(\"\\n|\");\n\t\tfor (int i = 0; i < state.size(); i++)\n\t\t{\n\t\t\tstringBuilder.append(state.get(i)).append(\"|\");\n\t\t\tif (i % size == size - 1 && i < state.size() - 1)\n\t\t\t{\n\t\t\t\tstringBuilder.append(\"\\n|\");\n\t\t\t}\n\t\t}\n\t\tstringBuilder.append(\"\\n\");\n\t\tfor (int i = 0; i < 2 * size + 1; i++)\n\t\t{\n\t\t\tstringBuilder.append(\"-\");\n\t\t}\n\t\treturn stringBuilder.toString();\n\t"} {"path":"downloaded/AppOps.java","method_name":"formatTitle","content":"/**\n     * Format the title of the quiz before it can be joined with author name to\n     * form the id. Take away the space That is inside the string and replace\n     * it with underscore and if there is an underscore replace with a space.\n     *\n     * @param title\n     * @return String\n     */\npublic static String formatTitle(String title)\n    {\n        char[] temp = title.trim().toCharArray();\n        int count = 0;\n        for (char c : temp) {\n            if (c == ' ') {\n                temp[count] = '_';\n            } else if (c == '_') {\n                temp[count] = ' ';\n            }\n            count++;\n        }\n        \n        return String.valueOf(temp);\n        \n    }"} {"path":"downloaded/AppOps.java","method_name":"getModel","content":"/**\n     * Return a specific entity object Quiz or KeywordUser\n     *\n     * @param type\n     * @return String\n     */\npublic static Serviceable getModel(AppModels type)\n    {\n        Serviceable tempObj;\n        switch (type) {\n            case KEYWORD_USER:\n                tempObj = new KeywordUser();\n                break;\n            case QUIZ:\n                tempObj = new Quiz();\n                \n                break;\n            default:\n                tempObj = null;\n                break;\n        }\n        \n        return tempObj;\n    }"} {"path":"downloaded/AppOps.java","method_name":"verifyEntry","content":"/**\n     * Return a specific entity object Quiz or KeywordUser\n     *\n     * @param type\n     * @return String\n     */\npublic static String verifyEntry(String sentence, String keys){\n        String isVerified = \"success\";\n        String delimeter = \"\\\\s|,|\\\\.\";\n        String[] splitSentence = sentence.split(\" \");\n        \n        for (String key : keys.split(delimeter))\n        {\n            for(String element : splitSentence)\n            {\n                if(!element.equals( key.trim() ))\n                {\n                    isVerified =  \" The key \" + key + \" doesn't match any word in the corresponding sentence\";\n                    return isVerified ;\n                }\n            }\n            if (sentence.equals(\"\") || key.equals(\"\"))\n            {\n                isVerified =  \"Sentence and keys cannot be left empty\";\n                return isVerified ;\n            }\n        }\n        \n        System.out.println(\"verified is about leave and isverified is..: \"+isVerified);\n        \n        return isVerified;\n    }"} {"path":"downloaded/WaitingRoom.java","method_name":"pop","content":"/**\n     * Return a connected with if there is any, otherwise an empty optional\n     * @return an optional of a view\n     */\npublic Optional<View> pop() {\n        synchronized (connectedViews) {\n            if (connectedViews.isEmpty()) {\n                return Optional.empty();\n            } else {\n                return Optional.of(connectedViews.remove());\n            }\n        }\n    }"} {"path":"downloaded/ApplicationProp.java","method_name":"getCiqDir","content":"/**\n\t * serialVersionUID\n\t */\npublic String getCiqDir() {\n\t\treturn ciqDir;\n\t}"} {"path":"downloaded/ApplicationProp.java","method_name":"getBackDir","content":"/**\n\t * serialVersionUID\n\t */\npublic String getBackDir() {\n\t\treturn backDir;\n\t}"} {"path":"downloaded/ApplicationProp.java","method_name":"getReissueTmpDir","content":"/**\n\t * serialVersionUID\n\t */\npublic String getReissueTmpDir() {\n\t\treturn reissueTmpDir;\n\t}"} {"path":"downloaded/ApplicationProp.java","method_name":"getReissueDir","content":"/**\n\t * serialVersionUID\n\t */\npublic String getReissueDir() {\n\t\treturn reissueDir;\n\t}"} {"path":"downloaded/ApplicationProp.java","method_name":"getUnifiedCiqDir","content":"/**\n\t * serialVersionUID\n\t */\npublic String getUnifiedCiqDir() {\n\t\treturn unifiedCiqDir;\n\t}"} {"path":"downloaded/ApplicationProp.java","method_name":"getUnifiedBackDir","content":"/**\n\t * serialVersionUID\n\t */\npublic String getUnifiedBackDir() {\n\t\treturn unifiedBackDir;\n\t}"} {"path":"downloaded/ApplicationProp.java","method_name":"getReissueNoticeTmpDir","content":"/**\n\t * serialVersionUID\n\t */\npublic String getReissueNoticeTmpDir() {\n\t\treturn reissueNoticeTmpDir;\n\t}"} {"path":"downloaded/ApplicationProp.java","method_name":"getReissueNoticeDir","content":"/**\n\t * serialVersionUID\n\t */\npublic String getReissueNoticeDir() {\n\t\treturn reissueNoticeDir;\n\t}"} {"path":"downloaded/FieldVerifier.java","method_name":"isValidName","content":"/**\n\t * Verifies that the specified name is valid for our service.\n\t * \n\t * In this example, we only require that the name is at least four characters. In your application, you can use more\n\t * complex checks to ensure that usernames, passwords, email addresses, URLs, and other fields have the proper\n\t * syntax.\n\t * \n\t * @param name\n\t *           the name to validate\n\t * @return true if valid, false if invalid\n\t */\npublic static boolean isValidName(String name) {\n\t\tif (name == null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn name.length() > 3;\n\t}"} {"path":"downloaded/JCacheIdentifier.java","method_name":"getName","content":"/**\n     * Get the JCache map name\n     *\n     * @return JCache name\n     */\npublic String getName()\n        {\n        return m_sCacheName;\n        }"} {"path":"downloaded/JCacheIdentifier.java","method_name":"getCacheManagerURI","content":"/**\n     * Get the JCache CacheManager URI, a unique identifier for the JCache CacheManager\n     *\n     * @return {@link javax.cache.CacheManager} URI context\n     */\npublic String getCacheManagerURI()\n        {\n        return m_sCacheMgrURI;\n        }"} {"path":"downloaded/JCacheIdentifier.java","method_name":"getCanonicalCacheName","content":"/**\n     * Get the JCache Adapter internal name for this {@link JCacheIdentifier}\n     *\n     * @return internal JCache Adapter coherence-based map name.\n     */\npublic String getCanonicalCacheName()\n        {\n        return m_sCacheMgrURI + URI_NAME_SEPARATOR + m_sCacheName;\n        }"} {"path":"downloaded/JCacheIdentifier.java","method_name":"equals","content":"/**\n     * Get the JCache Adapter internal name for this {@link JCacheIdentifier}\n     *\n     * @return internal JCache Adapter coherence-based map name.\n     */\n@Override\n    public boolean equals(Object o)\n        {\n        if (o == null || !(o instanceof JCacheIdentifier))\n            {\n            return false;\n            }\n        else\n            {\n            JCacheIdentifier id = (JCacheIdentifier) o;\n\n            return m_sCacheMgrURI.equals(id.m_sCacheMgrURI) && m_sCacheName.equals(m_sCacheName);\n            }\n        }"} {"path":"downloaded/JCacheIdentifier.java","method_name":"hashCode","content":"/**\n     * Get the JCache Adapter internal name for this {@link JCacheIdentifier}\n     *\n     * @return internal JCache Adapter coherence-based map name.\n     */\n@Override\n    public int hashCode()\n        {\n        return m_sCacheMgrURI.hashCode() + m_sCacheName.hashCode();\n        }"} {"path":"downloaded/JCacheIdentifier.java","method_name":"toString","content":"/**\n     * Get the JCache Adapter internal name for this {@link JCacheIdentifier}\n     *\n     * @return internal JCache Adapter coherence-based map name.\n     */\n@Override\n    public String toString()\n        {\n        return getCanonicalCacheName();\n        }"} {"path":"downloaded/MavenSession.java","method_name":"removeForkedProject","content":"/**\n     * Peel off the last forked project from the stack, and restore it as the currentProject. This\n     * signifies the cleanup of a completed forked-execution context.\n     */\npublic MavenProject removeForkedProject()\n    {\n        if ( !forkedProjectStack.isEmpty() )\n        {\n            MavenProject lastCurrent = currentProject;\n            currentProject = (MavenProject) forkedProjectStack.pop();\n\n            return lastCurrent;\n        }\n\n        return null;\n    }"} {"path":"downloaded/MavenSession.java","method_name":"getCurrentProject","content":"/**\n     * Return the current project for use in a mojo execution.\n     */\npublic MavenProject getCurrentProject()\n    {\n        return currentProject;\n    }"} {"path":"downloaded/MavenSession.java","method_name":"getReports","content":"/**\n     * Retrieve the list of reports ({@link MavenReport} instances) that have been executed against\n     * this project, for use in another mojo's execution.\n     */\npublic List getReports()\n    {\n        if ( reports == null )\n        {\n            return Collections.EMPTY_LIST;\n        }\n\n        return new ArrayList( reports.values() );\n    }"} {"path":"downloaded/MavenSession.java","method_name":"getReportMojoDescriptors","content":"/**\n     * Add a newly-executed report ({@link MavenReport} instance) to the reports collection, for\n     * future reference.\n     */\npublic Set getReportMojoDescriptors()\n    {\n        if ( reports == null )\n        {\n            return Collections.EMPTY_SET;\n        }\n\n        return reports.keySet();\n    }"} {"path":"downloaded/MavenSession.java","method_name":"getBuildPlan","content":"/**\n     * Add a newly-executed report ({@link MavenReport} instance) to the reports collection, for\n     * future reference.\n     */\npublic BuildPlan getBuildPlan( String projectId )\n    {\n        return (BuildPlan) buildPlans.get( projectId );\n    }"} {"path":"downloaded/MavenSession.java","method_name":"getBuildPlan","content":"/**\n     * Add a newly-executed report ({@link MavenReport} instance) to the reports collection, for\n     * future reference.\n     */\npublic BuildPlan getBuildPlan( MavenProject project )\n    {\n        return (BuildPlan) buildPlans.get( project.getId() );\n    }"} {"path":"downloaded/MavenSession.java","method_name":"getBuildPlans","content":"/**\n     * Add a newly-executed report ({@link MavenReport} instance) to the reports collection, for\n     * future reference.\n     */\npublic Map getBuildPlans()\n    {\n        return buildPlans;\n    }"} {"path":"downloaded/MavenSession.java","method_name":"getProjectBuilderConfiguration","content":"/**\n     * Add a newly-executed report ({@link MavenReport} instance) to the reports collection, for\n     * future reference.\n     */\npublic ProjectBuilderConfiguration getProjectBuilderConfiguration()\n    {\n        return request.getProjectBuildingConfiguration();\n    }"} {"path":"downloaded/MavenSession.java","method_name":"getPluginGroups","content":"/**\n     * Add a newly-executed report ({@link MavenReport} instance) to the reports collection, for\n     * future reference.\n     */\npublic List<String> getPluginGroups()\n    {\n        return request.getPluginGroups();\n    }"} {"path":"downloaded/MavenSession.java","method_name":"isOffline","content":"/**\n     * Add a newly-executed report ({@link MavenReport} instance) to the reports collection, for\n     * future reference.\n     */\npublic boolean isOffline()\n    {\n        return request.isOffline();\n    }"} {"path":"downloaded/SystemUser.java","method_name":" getAuthenticatio","content":" /** Last time JWT was generated *\n @Override\n    public SiteWhereAuthentication getAuthentication() throws SiteWhereException {\n\tif ((System.currentTimeMillis() - lastGenerated) > (RENEW_INTERVAL_SEC * 1000)) {\n\t    this.last = getTokenManagement().getAuthenticationForUser(getInstanceSettings().getKeycloakSystemUsername(),\n\t\t    getInstanceSettings().getKeycloakSystemPassword());\n\t    this.lastGenerated = System.currentTimeMillis();\n\t}\n\treturn this.last;\n    "} {"path":"downloaded/SystemUser.java","method_name":" getAuthenticationForTenan","content":" /** Last time JWT was generated *\n @Override\n    public SiteWhereAuthentication getAuthenticationForTenant(SiteWhereTenant tenant) throws SiteWhereException {\n\tSiteWhereAuthentication existing = getAuthentication();\n\tSiteWhereAuthentication clone = new SiteWhereAuthentication(existing.getUsername(),\n\t\texisting.getGrantedAuthorities(), existing.getJwt());\n\tclone.setTenantToken(tenant.getMetadata().getName());\n\treturn clone;\n    "} {"path":"downloaded/SystemUser.java","method_name":" getInstanceSetting","content":" /** Last time JWT was generated *\n protected IInstanceSettings getInstanceSettings() {\n\treturn instanceSettings;\n    "} {"path":"downloaded/SystemUser.java","method_name":" getTokenManagemen","content":" /** Last time JWT was generated *\n protected ITokenManagement getTokenManagement() {\n\treturn tokenManagement;\n    "} {"path":"downloaded/InsertDeleteGetRandomO1.java","method_name":"insert","content":"/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\npublic boolean insert(int val) {\n    boolean contain = _map.containsKey(val);\n    if ( contain ) return false;\n    _map.put( val, _list.size());\n    _list.add(val);\n    return true;\n  }"} {"path":"downloaded/InsertDeleteGetRandomO1.java","method_name":"remove","content":"/** Removes a value from the set. Returns true if the set contained the specified element. */\npublic boolean remove(int val) {\n    boolean contain = _map.containsKey(val);\n    if ( ! contain ) return false;\n    int loc = _map.get(val);\n    if (loc < _list.size() - 1 ) { // not the last one than swap the last one with this val\n      int lastone = _list.get(_list.size() - 1 );\n      _list.set( loc , lastone );\n      _map.put(lastone, loc);\n    }\n    _map.remove(val);\n    _list.remove(_list.size() - 1);\n    return true;\n  }"} {"path":"downloaded/InsertDeleteGetRandomO1.java","method_name":"getRandom","content":"/** Get a random element from the set. */\npublic int getRandom() {\n    return _list.get( rand.nextInt(_list.size()) );\n  }"} {"path":"downloaded/Room.java","method_name":"getRoomId","content":"/**\n\t * Returns the room id\n\t *\n\t * @return the room id\n\t */\npublic Long getRoomId() {\n\t\treturn roomId;\n\t}"} {"path":"downloaded/Room.java","method_name":"getRoomType","content":"/**\n\t * Returns the room type\n\t *\n\t * @return the room type\n\t */\npublic RoomType getRoomType() {\n\t\treturn roomType;\n\t}"} {"path":"downloaded/Room.java","method_name":"getRoomView","content":"/**\n\t * Returns the room view\n\t *\n\t * @return the room view\n\t */\npublic RoomView getRoomView() {\n\t\treturn roomView;\n\t}"} {"path":"downloaded/Room.java","method_name":"getBedType","content":"/**\n\t * Returns the bed type\n\t *\n\t * @return the bed type\n\t */\npublic BedType getBedType() {\n\t\treturn bedType;\n\t}"} {"path":"downloaded/Room.java","method_name":"getDefaultPricePerNight","content":"/**\n\t * Returns the default price per night\n\t *\n\t * @return the default price per night\n\t */\npublic Double getDefaultPricePerNight() {\n\t\treturn defaultPricePerNight;\n\t}"} {"path":"downloaded/Room.java","method_name":"getDescription","content":"/**\n\t * Returns the description\n\t *\n\t * @return the description\n\t */\npublic String getDescription() {\n\t\treturn description;\n\t}"} {"path":"downloaded/Room.java","method_name":"getImagesUrl","content":"/**\n\t * Returns the images url\n\t *\n\t * @return the images url\n\t */\npublic List<String> getImagesUrl() {\n\t\tif (imagesUrl == null) {\n\t\t\timagesUrl = new ArrayList<String>();\n\t\t}\n\t\treturn imagesUrl;\n\t}"} {"path":"downloaded/RecoverPasswordService.java","method_name":"sendEmployeeInfo","content":"/**\n     * Send employee info.\n     *\n     * @param email the email\n     * @param employeeCode the employee code\n     * @return the service result\n     * @throws IOException Signals that an I/O exception has occurred.\n     * @throws TemplateException the template exception\n     * @throws MessagingException the messaging exception\n     */\npublic ServiceResult<User_login> sendEmployeeInfo(final String email, final String employeeCode)\n            throws IOException, TemplateException, MessagingException {\n        final List<Message> errors = new ArrayList<>();\n\n        final StringBuilder sb = new StringBuilder();\n        sb.append(\"SELECT u FROM User_login u, Employee_mst e \").append(\" WHERE \");\n        sb.append(\"u.ul_user_code=e.emp_code\").append(\" AND \");\n        sb.append(\"e.emp_mail='\" + email).append(\"' AND \");\n        sb.append(\"e.emp_code=\" + employeeCode).append(\"\");\n        List<User_login> users = super.emMain.createQuery(sb.toString(), User_login.class).getResultList();\n\n        if (users.size() > 0) {\n            for (final User_login user : users) {\n                final UUID uniqueId = UUID.randomUUID();\n                final String sessionId = uniqueId.toString();\n                if (this.updateSessionId(user, sessionId).isSuccessful()) {\n                    final StringBuilder url = new StringBuilder();\n                    url.append(Faces.getRequestBaseURL());\n                    url.append(AuthenticationConstants.INDEX_PAGE + \"?\");\n                    url.append(\"path=recover_password\").append(\"&\");\n                    url.append(\"sessionId=\" + sessionId);\n                    EmailHelper.sendRecoverPassword(user, email, url.toString());\n                }\n            }\n        }\n        else {\n            errors.add(ErrorMessage.resetpass_005_employeeId_or_email_not_correct());\n            return new ServiceResult<User_login>(false, errors);\n        }\n        return new ServiceResult<User_login>(true, errors);\n    }"} {"path":"downloaded/RecoverPasswordService.java","method_name":"updateSessionId","content":"/**\n     * Update session id.\n     *\n     * @param user the user\n     * @param sessionId the session id\n     * @return the service result\n     */\n@SuppressWarnings(value = \"RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT\", justification = \"Not use return value\")\n    public ServiceResult<Boolean> updateSessionId(final User_login user, final String sessionId) {\n        final List<Message> errors = new ArrayList<>();\n        try {\n            user.setUl_session_id(sessionId);\n            this.emMain.merge(user);\n        } catch (final PersistenceException e) {\n            super.log.debug(\"EXCEPTION WHEN UPDATE SESSIONID INTO USER_LOGIN TABLE\", e);\n            errors.add(ErrorMessage.resetpass_001_have_not_send());\n            return new ServiceResult<>(false, errors);\n        }\n        return new ServiceResult<>(true, errors);\n    }"} {"path":"downloaded/RecoverPasswordService.java","method_name":"changePassword","content":"/**\n     * Change password.\n     *\n     * @param newPassword the new password\n     * @param reNewPassword the re new password\n     * @param sessionId the session id\n     * @return the service result\n     */\npublic ServiceResult<User_login> changePassword(final String newPassword, final String reNewPassword,\n            final String sessionId) {\n        final List<Message> errors = new ArrayList<>();\n        if (!StringUtils.areEqual(newPassword, reNewPassword)) {\n            errors.add(ErrorMessage.resetpass_004_password_confirm_not_matched());\n        }\n        if (errors.size() > 0) {\n            return new ServiceResult<>(errors.isEmpty(), errors);\n        }\n\n        final StringBuilder sb = new StringBuilder();\n        sb.append(\"SELECT u FROM User_login u\").append(\" WHERE \");\n        sb.append(\"u.ul_session_id='\" + sessionId).append(\"' AND \");\n        sb.append(\"u.last_updated_at >= '\" + DateUtils.getPreviousDayFromCurrentDate(DateUtils.getCurrentDatetime()))\n                .append(\"'\");\n        final List<User_login> users = super.emMain.createQuery(sb.toString(), User_login.class).getResultList();\n        if (users.size() > 0) {\n            for (final User_login user : users) {\n                try {\n\n                    // user.setUl_password(newPassword);\n                    user.setUl_passsalt(EncryptStringUtils.encrypt(newPassword));\n                    user.setUl_session_id(null);\n                    // this.emMain.merge(user);\n                    this.emMain.flush();\n                } catch (final PersistenceException e) {\n                    super.log.debug(\"EXCEPTION WHEN CHANGE PASSWORD , MAY BE NOT ENCRYPT PASSWORD OR INSERT\", e);\n                    errors.add(ErrorMessage.resetpass_003_change_pass_not_success());\n                    return new ServiceResult<>(false, errors);\n                }\n            }\n            return new ServiceResult<>(true);\n        }\n        else {\n            errors.add(ErrorMessage.resetpass_002_sessionid_expired());\n        }\n        return new ServiceResult<>(false, errors);\n    }"} {"path":"downloaded/EVCacheConfiguration.java","method_name":"create","content":"/**\n     * Instantiates a new EVCache configuration.\n     *\n     * @param name                     Name of the Cache, @{@link org.springframework.cache.annotation.Cacheable} cacheNames\n     * @param appName                  Name of the EVCache App, Cluster Name, Recommend Upper Case\n     * @param keyPrefix                Name of Cache Prefix Key, Don't contain colon(:) character\n     * @param timeToLive               Default Time To Live(TTL), Seconds\n     * @param retryEnabled             Retry across Server Group for cache misses and exceptions\n     * @param exceptionThrowingEnabled Whether or not exception throwing is to be enabled.\n     */\nprivate static EVCacheClientPoolConfigurationProperties create(final String keyPrefix,\n                                                                   final Duration timeToLive,\n                                                                   final boolean retryEnabled,\n                                                                   final boolean exceptionThrowingEnabled) {\n        final EVCacheClientPoolConfigurationProperties result = new EVCacheClientPoolConfigurationProperties();\n        result.setKeyPrefix(keyPrefix);\n        result.setTimeToLive(timeToLive);\n        result.setRetryEnabled(retryEnabled);\n        result.setExceptionThrowingEnabled(exceptionThrowingEnabled);\n        return result;\n    }"} {"path":"downloaded/EVCacheConfiguration.java","method_name":"equals","content":"/**\n     * Instantiates a new EVCache configuration.\n     *\n     * @param name                     Name of the Cache, @{@link org.springframework.cache.annotation.Cacheable} cacheNames\n     * @param appName                  Name of the EVCache App, Cluster Name, Recommend Upper Case\n     * @param keyPrefix                Name of Cache Prefix Key, Don't contain colon(:) character\n     * @param timeToLive               Default Time To Live(TTL), Seconds\n     * @param retryEnabled             Retry across Server Group for cache misses and exceptions\n     * @param exceptionThrowingEnabled Whether or not exception throwing is to be enabled.\n     */\n@Override\n    public boolean equals(final Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null || getClass() != obj.getClass()) {\n            return false;\n        }\n        final EVCacheConfiguration that = (EVCacheConfiguration) obj;\n        return new EqualsBuilder()\n            .append(name, that.name)\n            .isEquals();\n    }"} {"path":"downloaded/EVCacheConfiguration.java","method_name":"hashCode","content":"/**\n     * Instantiates a new EVCache configuration.\n     *\n     * @param name                     Name of the Cache, @{@link org.springframework.cache.annotation.Cacheable} cacheNames\n     * @param appName                  Name of the EVCache App, Cluster Name, Recommend Upper Case\n     * @param keyPrefix                Name of Cache Prefix Key, Don't contain colon(:) character\n     * @param timeToLive               Default Time To Live(TTL), Seconds\n     * @param retryEnabled             Retry across Server Group for cache misses and exceptions\n     * @param exceptionThrowingEnabled Whether or not exception throwing is to be enabled.\n     */\n@Override\n    public int hashCode() {\n        return new HashCodeBuilder()\n            .append(name)\n            .toHashCode();\n    }"} {"path":"downloaded/EVCacheConfiguration.java","method_name":"getName","content":"/**\n     * Instantiates a new EVCache configuration.\n     *\n     * @param name                     Name of the Cache, @{@link org.springframework.cache.annotation.Cacheable} cacheNames\n     * @param appName                  Name of the EVCache App, Cluster Name, Recommend Upper Case\n     * @param keyPrefix                Name of Cache Prefix Key, Don't contain colon(:) character\n     * @param timeToLive               Default Time To Live(TTL), Seconds\n     * @param retryEnabled             Retry across Server Group for cache misses and exceptions\n     * @param exceptionThrowingEnabled Whether or not exception throwing is to be enabled.\n     */\npublic String getName() {\n        return name;\n    }"} {"path":"downloaded/EVCacheConfiguration.java","method_name":"getAppName","content":"/**\n     * Instantiates a new EVCache configuration.\n     *\n     * @param name                     Name of the Cache, @{@link org.springframework.cache.annotation.Cacheable} cacheNames\n     * @param appName                  Name of the EVCache App, Cluster Name, Recommend Upper Case\n     * @param keyPrefix                Name of Cache Prefix Key, Don't contain colon(:) character\n     * @param timeToLive               Default Time To Live(TTL), Seconds\n     * @param retryEnabled             Retry across Server Group for cache misses and exceptions\n     * @param exceptionThrowingEnabled Whether or not exception throwing is to be enabled.\n     */\npublic String getAppName() {\n        return appName;\n    }"} {"path":"downloaded/EVCacheConfiguration.java","method_name":"getProperties","content":"/**\n     * Instantiates a new EVCache configuration.\n     *\n     * @param name                     Name of the Cache, @{@link org.springframework.cache.annotation.Cacheable} cacheNames\n     * @param appName                  Name of the EVCache App, Cluster Name, Recommend Upper Case\n     * @param keyPrefix                Name of Cache Prefix Key, Don't contain colon(:) character\n     * @param timeToLive               Default Time To Live(TTL), Seconds\n     * @param retryEnabled             Retry across Server Group for cache misses and exceptions\n     * @param exceptionThrowingEnabled Whether or not exception throwing is to be enabled.\n     */\npublic EVCacheClientPoolConfigurationProperties getProperties() {\n        return properties;\n    }"} {"path":"downloaded/Insert.java","method_name":"getTupleDesc","content":"/**\n     * Constructor.\n     * @param tid The transaction running the insert.\n     * @param child The child operator from which to read tuples to be inserted.\n     * @param tableid The table in which to insert tuples.\n     * @throws DbException if TupleDesc of child differs from table into which we are to insert.\n     */\npublic TupleDesc getTupleDesc() {\n        return td;\n    }"} {"path":"downloaded/Insert.java","method_name":"readNext","content":"/**\n     * Inserts tuples read from child into the tableid specified by the\n     * constructor. It returns a one field tuple containing the number of\n     * inserted records. Inserts should be passed through BufferPool.\n     * An instances of BufferPool is available via Database.getBufferPool().\n     * Note that insert DOES NOT need check to see if a particular tuple is\n     * a duplicate before inserting it.\n     *\n     * @return A 1-field tuple containing the number of inserted records, or\n    * null if called more than once.\n     * @see Database#getBufferPool\n     * @see BufferPool#insertTuple\n     */\nprotected Tuple readNext()\n            throws TransactionAbortedException, DbException {\n        if(readNextCalled)\n            return null;\n        readNextCalled = true;\n\n        BufferPool bp = Database.getBufferPool();\n        int insertCount = 0;\n        while(child.hasNext()) {\n            bp.insertTuple(tid, tableid, child.next());\n            insertCount++;\n        }\n\n        Tuple retTuple = new Tuple(td);\n        retTuple.setField(0, new IntField(insertCount));\n        return retTuple;\n    }"} {"path":"downloaded/longestRepeatedSuffixTree.java","method_name":"getLongestRepeatedSubstringLength","content":"/**\n     * Getter for the length of the longest repeated substring\n     * @return length of the longest repeated substring\n     */\npublic int getLongestRepeatedSubstringLength()\n    {\n        return maxLength;\n    }"} {"path":"downloaded/ProductPane.java","method_name":"ivate P","content":"/**\n\t * Create the panel.\n\t */\neleteBtn);\n\n\t}\n\t\n\tprivate ProductPane getThis(){"} {"path":"downloaded/FabricTransUtil.java","method_name":" byte[] R1T","content":"/**\n     * R1 交易签名\n     * @param stringPrivateKey\n     * @param signString\n     * @return\n */\n    public static byte[] R1TransSign(String stringPrivateKey, byte[] signString) throws CryptoException, IllegalAccessException, InstantiationException, ClassNotFoundException, InvalidArgumentException, UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException {\n            CryptoPrimitives cryptoPrimitives = new CryptoPrimitives();\n            cryptoPrimitives.init();\n            PrivateKey privateKey = cryptoPrimitives.bytesToPrivateKey(stringPrivateKey.getBytes());\n            byte[] signature = cryptoPrimitives.sign(privateKey, signString);\n            return signatur"} {"path":"downloaded/FabricTransUtil.java","method_name":"c static byt","content":"/**\n     * R1 交易签名\n     * @param stringPrivateKey\n     * @param signString\n     * @return\nurn\n     */\n    public static byte[] Sm2TransSign(String stringPrivateKey, byte[] signString) throws CryptoException, IllegalAccessException, InstantiationException, ClassNotFoundException, InvalidArgumentException, UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException {\n        byte[] sm3DigestBytes = Sm2SignUtil.SM3Digest(signString);\n        byte[] signBytes = new byte[0];\n        try {\n            signBytes = Sm2SignUtil.SM2Sign(sm3DigestBytes, Sm2SignUtil.getPrivateKey(stringPrivateKey.getBytes()));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return "} {"path":"downloaded/PanValueObjectVO.java","method_name":"iable","content":"/**\n\t * 编号，代表�\n\t\tif ((avaliablePaiList.getPaiCount("} {"path":"downloaded/PanValueObjectVO.java","method_name":"\n\tpublic int ","content":"/**\n\t * 编号，代表�\n��提示\n\t\t\tliujuWarning = true;\n\t\t}\n\t}\n\n\tpublic int getNo() {\n\t\treturn no;\n\t}\n\n\t"} {"path":"downloaded/PanValueObjectVO.java","method_name":"\n\t}\n\n\tpublic void","content":"/**\n\t * 编号，代表�\nrn playerList;\n\t}\n\n\tpublic void setPlayerList(List<MajiangPlaye"} {"path":"downloaded/PanValueObjectVO.java","method_name":"}\n\n\tpublic void set","content":"/**\n\t * 编号，代表�\n\t\treturn zhuangPlayerId;\n\t}\n\n\tpublic void setZhuangPlayerId(String zhuangPlayer"} {"path":"downloaded/PanValueObjectVO.java","method_name":"tAvaliablePaiList(P","content":"/**\n\t * 编号，代表�\nist;\n\t}\n\n\tpublic void setAvaliablePaiList(PaiListValueObject avaliablePaiList"} {"path":"downloaded/PanValueObjectVO.java","method_name":"blic void setPublicGuipa","content":"/**\n\t * 编号，代表�\niList;\n\t}\n\n\tpublic void setPublicGuipaiList(List<MajiangPai> publicGuipaiList"} {"path":"downloaded/PanValueObjectVO.java","method_name":"PublicWaitingPlaye","content":"/**\n\t * 编号，代表�\n\n\tpublic void setPublicWaitingPlayerId(String publicWaitingPlayerId)"} {"path":"downloaded/PanValueObjectVO.java","method_name":"r;\n\t}\n\n\tpublic","content":"/**\n\t * 编号，代表�\n activePaiCursor;\n\t}\n\n\tpublic void setActivePaiCursor(PaiCu"} {"path":"downloaded/JwtRequestFilter.java","method_name":"extractFromAuthorization","content":"/**\n     * Instantiates a new Jwt request filter.\n     *\n     * @param jwtTokenUtil the jwt token util\n     * @param authService  the auth service\n     */\nprivate String extractFromAuthorization(String str) {\n        if (str != null && str.startsWith(\"Bearer \")) {\n            return str.substring(7);\n        }\n        return \"\";\n    }"} {"path":"downloaded/JwtRequestFilter.java","method_name":"extractFromCookie","content":"/**\n     * Instantiates a new Jwt request filter.\n     *\n     * @param jwtTokenUtil the jwt token util\n     * @param authService  the auth service\n     */\nprivate String extractFromCookie(String str) {\n        String token = \"\";\n        if (str != null) {\n            int pos = str.indexOf(\"token=\");\n            if (pos >= 0) {\n                token = str.substring(pos + 6);\n                pos = token.indexOf(';');\n                if (pos >= 0) {\n                    token = token.substring(0, pos);\n                }\n            }\n        }\n        return token;\n    }"} {"path":"downloaded/NumberUtil.java","method_name":"sum","content":"/**\n\t * Sum all double values from a list, and keep two decimals.\n\t * @param doubleList\n\t * @return\n\t */\npublic static double sum(List<Double> doubleList) {\n\t\tdouble sum = 0;\n\t\tint size = doubleList.size();\n\t\tfor (int i = 0; i < size; i++) {\n\t\t\tsum += doubleList.get(i);\n\t\t}\n\t\t\n\t\treturn (double) Math.round(sum * 100) / 100;//保留两"} {"path":"downloaded/NumberUtil.java","method_name":"atic doub","content":"/**\n\t * Sum all double values from a list, and keep two decimals.\n\t * @param doubleList\n\t * @return\n\t */\n��数\n\t}\n\t\n\tpublic static double sumAmount(DataGrid datagrid) {\n\t\tIntStream is = null;\n\t\tint[] selectedRowIndices = datagrid.getSelectedRows();\n\t\tif (null != selectedRowIndices && selectedRowIndices.length > 0) {\n\t\t\tis = IntStream.of(selectedRowIndices);\n\t\t} else {\n\t\t\tif (datagrid == null || datagrid.getModel().getRowCount() < 1) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tis = IntStream.range(0, datagrid.getModel().getRowCount());// Exclusive\n\t\t}\n\t\t\n\t\tList<Double> doubleList = new ArrayList<Double>();\n\t\tis.forEach((ele) -> {\n\t\t\tString amountStr = (String) datagrid.getValueAt(ele, 4);\n\t\t\tdouble amount = Double.parseDouble(amountStr.replaceAll(\",\", \"\"));\n\t\t\tdoubleList.add(amount);\n\t\t});\n\t\t\n\t\treturn doubleList.stream().reduce((acc, ele) -> acc += ele).or"} {"path":"downloaded/SQLSelectService.java","method_name":"getPageWriter","content":"/**\n     * @return the pageWriter\n     */\npublic DataOutputStream getPageWriter() {\n        return pageWriter;\n    }"} {"path":"downloaded/SQLSelectService.java","method_name":"getSql","content":"/**\n     * @return the sql\n     */\npublic String getSql() {\n        String rs = getRequestString();\n        String field=\"\";\n        field = rs.substring(rs.indexOf(\"Field=\")+6,rs.indexOf(\"&Submit\"));\n        String criteria=rs.substring(rs.indexOf(\"Criteria=\")+9,rs.indexOf(\"&Field=\"));\n         criteria = \"'%\" + criteria + \"%'\";\n        String sqlcommand = String.format(\"select * from employee where %s like %s \", field,criteria);\n        //System.out.println(sql);\n        return sqlcommand;\n    }"} {"path":"downloaded/SQLSelectService.java","method_name":"getRequestString","content":"/**\n     * @return the requestString\n     */\npublic String getRequestString() {\n        return requestString;\n    }"} {"path":"downloaded/ComparatorTest.java","method_name":"compare","content":"/** Compares returns reverse hash order. */\n@Override\n  public int compare(Object arg0, Object arg1) {\n    int a = arg0.hashCode();\n    int b = arg1.hashCode();\n    int accum;\n    if (a == b) {\n      accum = 0;\n    } else if (a > b) {\n      accum = 1;\n    } else {\n      accum = -1;\n    }\n    return accum;\n  }"} {"path":"downloaded/FileNode.java","method_name":"get_selected","content":"/**\n\t * \n\t */\npublic static FileNode get_selected() {\n\t\tif (allowAction)\n\t\t\treturn selected;\n\t\telse\n\t\t\treturn null;\n\t}"} {"path":"downloaded/FileNode.java","method_name":"IsDirectory","content":"/**\n\t * \n\t */\npublic boolean IsDirectory() {\n\t\tif (file != null)\n\t\t\treturn file.isDirectory();\n\t\treturn false;\n\t}"} {"path":"downloaded/FileNode.java","method_name":"get_path","content":"/**\n\t * \n\t */\npublic String get_path() {\n\t\tif (file == null)\n\t\t\treturn null;\n\t\treturn file.getAbsolutePath();\n\t}"} {"path":"downloaded/FileNode.java","method_name":"get_file","content":"/**\n\t * \n\t */\npublic File get_file() {\n\t\treturn file;\n\t}"} {"path":"downloaded/FileNode.java","method_name":"keyPressed","content":"/**\n\t * \n\t */\n@Override\n\tpublic void keyPressed(KeyEvent e) {\n\t\t// TODO Auto-generated method stub\n\t\tif (e.getSource() == rename) {\n\t\t\tif (e.getKeyCode() == 10) {\n\t\t\t\tSystem.out.println(file.getParent());\t\t\t\t\t\t\t\t\n\t\t\t\tif (file.getParent() == null) {\n\t\t\t\t\tJOptionPane.showMessageDialog(null,\n\t\t\t\t\t\t\t\"Not support rename a disk driver !\");\n\t\t\t\t\treturn;\n\t\t\t\t}\t\t\t\t\n\t\t\t\tFile file2 = new File(file.getParent(), rename.getText());\n\t\t\t\tif (file.renameTo(file2)) {\n\t\t\t\t\tif (IsDirectory())\n\t\t\t\t\t\tMyObservable.monitor.update_tree();\n\t\t\t\t\tMyObservable.monitor.update(file.getParent());\n\t\t\t\t} else {\n\t\t\t\t\tJOptionPane.showMessageDialog(null, \"Rename fail !\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}"} {"path":"downloaded/GameView.java","method_name":"start","content":"/**\n\t * @wbp.parser.constructor\n\t */\npublic void start(){\n\t\tisRunning = true;\n\t\tnew SwingWorker<Void, Void>() {\n\t\t\t@Override\n\t\t\tprotected Void doInBackground() throws Exception {\n\t\t\t\twhile(isRunning){\n\t\t\t\t\tGameView.this.gameLogic.updateMap();\n\t\t\t\t\tpublish();\n\t\t\t\t\tThread.sleep(GameView.this.interval);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected void process(List<Void> chunks) {\n\t\t\t\tsuper.process(chunks);\n\t\t\t\tGameView.this.repaint();\n\t\t\t}\n\t\t}.execute();\n\t}"} {"path":"downloaded/GameView.java","method_name":"getRow","content":"/**\n\t * @wbp.parser.constructor\n\t */\npublic int getRow() {\n\t\treturn row;\n\t}"} {"path":"downloaded/GameView.java","method_name":"getCol","content":"/**\n\t * @wbp.parser.constructor\n\t */\npublic int getCol() {\n\t\treturn col;\n\t}"} {"path":"downloaded/GameView.java","method_name":"getInterval","content":"/**\n\t * @wbp.parser.constructor\n\t */\npublic long getInterval() {\n\t\treturn interval;\n\t}"} {"path":"downloaded/GameView.java","method_name":"getCellSize","content":"/**\n\t * @wbp.parser.constructor\n\t */\npublic int getCellSize() {\n\t\treturn cellSize;\n\t}"} {"path":"downloaded/HotelFabric.java","method_name":"createHotel","content":"/**\n\t * This method creates a {@link Hotel}.\n\t * \n\t * @param c\n\t *            The {@link City} of the {@link Hotel}.\n\t * @param name\n\t *            The name of the {@link Hotel}.\n\t * @param reservationDayNumber\n\t *            The number of days of the period before the\n\t *            {@link Reservation} in which you can't cancel it.\n\t * @return The new {@link Customer}.\n\t */\npublic Hotel createHotel(City c, String name, int reservationDayNumber) {\n\t\tHashMap<String, Object> parameters = new HashMap<String, Object>();\n\t\tparameters.put(\"name\", name);\n\t\tparameters.put(\"resiliationDayNumber\", reservationDayNumber);\n\t\tparameters.put(\"fk_idCity\", c.getId());\n\n\t\treturn super.create(parameters);\n\t}"} {"path":"downloaded/HotelFabric.java","method_name":"getHotelsOf","content":"/**\n\t * This method gets the {@link List} of {@link Hotel} of a {@link City}.\n\t * \n\t * @param city\n\t *            The {@link City}.\n\t * @return A {@link List} of {@link Hotel}.\n\t */\npublic List<Hotel> getHotelsOf(City city) {\n\t\treturn super.getFromForeignKey(\"fk_idCity\", city);\n\t}"} {"path":"downloaded/DnsRequestProcessedEvent.java","method_name":"isCacheHit","content":"/** True if this response has DNSSEC rrsig */\npublic boolean isCacheHit() {\n        return cacheHit;\n    }"} {"path":"downloaded/DnsRequestProcessedEvent.java","method_name":"isDNSSEC","content":"/** True if this response has DNSSEC rrsig */\npublic boolean isDNSSEC() {\n        return dnssec;\n    }"} {"path":"downloaded/DnsRequestProcessedEvent.java","method_name":"getDomain","content":"/** True if this response has DNSSEC rrsig */\npublic String getDomain() {\n        return domain;\n    }"} {"path":"downloaded/DnsRequestProcessedEvent.java","method_name":"getType","content":"/** True if this response has DNSSEC rrsig */\npublic String getType() {\n        return type;\n    }"} {"path":"downloaded/DnsRequestProcessedEvent.java","method_name":"getStartTime","content":"/** True if this response has DNSSEC rrsig */\npublic long getStartTime() {\n        return startTime;\n    }"} {"path":"downloaded/DnsRequestProcessedEvent.java","method_name":"getElapsed","content":"/** True if this response has DNSSEC rrsig */\npublic int getElapsed() {\n        return elapsed;\n    }"} {"path":"downloaded/DnsRequestProcessedEvent.java","method_name":"getStatus","content":"/** True if this response has DNSSEC rrsig */\npublic String getStatus() {\n        return status;\n    }"} {"path":"downloaded/DnsRequestProcessedEvent.java","method_name":"getAnswer","content":"/** True if this response has DNSSEC rrsig */\npublic String getAnswer() {\n        return answer;\n    }"} {"path":"downloaded/DnsRequestProcessedEvent.java","method_name":"getOriginalAnswer","content":"/** True if this response has DNSSEC rrsig */\npublic String getOriginalAnswer() {\n        return originalAnswer;\n    }"} {"path":"downloaded/DnsRequestProcessedEvent.java","method_name":"getUpstreamId","content":"/** True if this response has DNSSEC rrsig */\npublic Integer getUpstreamId() {\n        return upstreamId;\n    }"} {"path":"downloaded/DnsRequestProcessedEvent.java","method_name":"getBytesSent","content":"/** True if this response has DNSSEC rrsig */\npublic int getBytesSent() {\n        return bytesSent;\n    }"} {"path":"downloaded/DnsRequestProcessedEvent.java","method_name":"getBytesReceived","content":"/** True if this response has DNSSEC rrsig */\npublic int getBytesReceived() {\n        return bytesReceived;\n    }"} {"path":"downloaded/DnsRequestProcessedEvent.java","method_name":"getRules","content":"/** True if this response has DNSSEC rrsig */\npublic List<String> getRules() {\n        return rules;\n    }"} {"path":"downloaded/DnsRequestProcessedEvent.java","method_name":"getFilterListIds","content":"/** True if this response has DNSSEC rrsig */\npublic int[] getFilterListIds() {\n        return filterListIds;\n    }"} {"path":"downloaded/DnsRequestProcessedEvent.java","method_name":"isWhitelist","content":"/** True if this response has DNSSEC rrsig */\npublic boolean isWhitelist() {\n        return whitelist;\n    }"} {"path":"downloaded/DnsRequestProcessedEvent.java","method_name":"getError","content":"/** True if this response has DNSSEC rrsig */\npublic String getError() {\n        return error;\n    }"} {"path":"downloaded/DnsRequestProcessedEvent.java","method_name":"toString","content":"/** True if this response has DNSSEC rrsig */\n@Override\n    public String toString() {\n        return \"DnsRequestProcessedEvent{\" +\n                \"domain='\" + domain + '\\'' +\n                \", type='\" + type + '\\'' +\n                \", startTime=\" + startTime +\n                \", elapsed=\" + elapsed +\n                \", status='\" + status + '\\'' +\n                \", answer='\" + answer + '\\'' +\n                \", originalAnswer='\" + originalAnswer + '\\'' +\n                \", upstreamId=\" + upstreamId +\n                \", bytesSent=\" + bytesSent +\n                \", bytesReceived=\" + bytesReceived +\n                \", rules=\" + rules +\n                \", filterListIds=\" + Arrays.toString(filterListIds) +\n                \", whitelist=\" + whitelist +\n                \", error='\" + error + '\\'' +\n                \", cacheHit=\" + cacheHit +\n                \", dnssec=\" + dnssec +\n                '}';\n    }"} {"path":"downloaded/FallbackState.java","method_name":"matchHeight","content":"/**\n\t * This brings the centre of the ball down to the car's height so that rendering\n\t * doesn't clip through the ground.\n\t */\n@SuppressWarnings (\"unused\")\n\tprivate Vector3 matchHeight(Vector3 position, CarData car){\n\t\treturn position.plus(car.orientation.up.scaled(Constants.RIPPER_RESTING - Constants.BALL_RADIUS));\n\t}"} {"path":"downloaded/FallbackState.java","method_name":"getLocalPosition","content":"/**\n\t * This brings the centre of the ball down to the car's height so that rendering\n\t * doesn't clip through the ground.\n\t */\nprivate Vector3 getLocalPosition(CarData car, Vector3 startLocal, Vector3 goalLocal, int ply,\n\t\t\tVector3 impactPointLocal){\n\t\tif(ply >= 30)\n\t\t\treturn null;\n\n\t\tdouble distance = impactPointLocal.distanceFlat(startLocal);\n\n\t\tVector3 endLocal = impactPointLocal\n\t\t\t\t.plus(impactPointLocal.minus(goalLocal).withZ(0).scaledToMagnitude(distance * scope)).withZ(0);\n\t\tendLocal = startLocal.plus(endLocal.minus(startLocal).scaled(dropoff));// .confine(35, 50);\n\n\t\tif(car.hasWheelContact){\n\t\t\t// wildfire.renderer.drawLine3d(Color.RED, Utils.toGlobal(car,\n\t\t\t// startLocal).fbs(), Utils.toGlobal(car, endLocal).fbs());\n\t\t\tfinal double size = 80;\n\t\t\tVector3 globalStart = Utils.toGlobal(car, startLocal);\n\t\t\tVector3 globalEnd = Utils.toGlobal(car, endLocal);\n\t\t\twildfire.renderer.drawUprightSquare(globalStart.plus(car.orientation.up.scaled(size / 2)), Color.RED,\n\t\t\t\t\tglobalEnd.minus(globalStart), car.orientation.up, size);\n\t\t}\n\n\t\tVector3 next = getLocalPosition(car, endLocal, goalLocal, ply + 1, impactPointLocal);\n\t\treturn ply < targetPly ? (ply == targetPly ? startLocal : next) : endLocal;\n\t}"} {"path":"downloaded/FallbackState.java","method_name":"isOkayToSmartDodge","content":"/**\n\t * This brings the centre of the ball down to the car's height so that rendering\n\t * doesn't clip through the ground.\n\t */\nprivate boolean isOkayToSmartDodge(InfoPacket input){\n\t\tCarData car = input.car;\n\t\tif(!car.onFlatGround)\n\t\t\treturn false;\n\n//\t\tif(Utils.distanceToWall(input.info.jumpImpact.getBallPosition()) < (input.car.onFlatGround ? 220 : 180)) return false;\n//\t\treturn input.info.jumpImpact.getTime() < 2.5 && input.info.impact.getBallPosition().minus(car.position).dotProduct(car.orientation.up) > 170;\n\n\t\t// return input.info.impact.getTime() < 4 && Utils.toLocal(car,\n\t\t// input.info.impact.getBallPosition()).z > 205;\n\n\t\tif(input.info.impact.getPosition().minus(car.position).dotProduct(car.orientation.up)\n\t\t\t\t+ (Constants.RIPPER_RESTING - Constants.BALL_RADIUS) > 140 && input.info.impactDistance < 4000){\n\n//\t\t\tif(Utils.toLocal(car, input.info.impact.getBallPosition()).z < 180){\n//\t\t\t\treturn false;\n//\t\t\t}else if(input.info.impact.getTime() < 2 && Behaviour.correctSideOfTarget(car, input.info.impact.getBallPosition())){\n//\t\t\t\treturn true;\n//\t\t\t}\n\n\t\t\tImpact jumpImpact = input.info.jumpImpact;\n\t\t\tVector3 jumpImpactPosition = jumpImpact.getBallPosition();\n\n\t\t\tif(jumpImpact.getTime() > 2){\n\t\t\t\tif(Utils.distanceToWall(jumpImpactPosition) < (input.car.onFlatGround ? 220 : 180))\n\t\t\t\t\treturn false;\n\t\t\t}\n//\t\t\telse if(jumpImpact.getTime() < 1){\n//\t\t\t\treturn true;\n//\t\t\t}\n\n\t\t\tVector3 carPosition = car.position;\n\t\t\tVector2 trace = Utils.traceToWall(carPosition.flatten(), jumpImpactPosition.flatten());\n\t\t\tVector2 carToTrace = trace.minus(carPosition.flatten());\n\n\t\t\tif(carToTrace.y * car.sign < 0){\n\t\t\t\t// if(jumpImpact.y * car.sign < -(Constants.PITCHLENGTH - 1800)){\n\t\t\t\t// return Math.abs(carToTrace.normalized().x) > 0.8;\n\t\t\t\t// }\n\t\t\t\treturn Math.abs(trace.x) > (trace.x * jumpImpactPosition.x < 0 ? Constants.GOAL_WIDTH + 250\n\t\t\t\t\t\t: Constants.PITCH_WIDTH - 1200);\n\t\t\t}else{\n\t\t\t\tif(jumpImpact.getTime() < 1.5)\n\t\t\t\t\treturn true;\n\t\t\t\treturn Math.abs(trace.x) < Constants.GOAL_WIDTH + 50\n\t\t\t\t\t\t|| Math.abs(trace.x) > Constants.PITCH_WIDTH - 1300;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"iCurrentInputSourceHasSignal","content":"/**\n\t * Record the main output has signal\n\t * \n\t * @return\n\t */\npublic boolean iCurrentInputSourceHasSignal() {\n\t\treturn mTVInputManager.getDefaultOutput().hasSignal();\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isNonPIPMode","content":"/**\n\t * Record the main output has signal\n\t * \n\t * @return\n\t */\npublic boolean isNonPIPMode() {\n\t\tif (mTVInputManager.getOuputMode() == 0) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"iGetInputSourceList","content":"/**\n\t * Record the main output has signal\n\t * \n\t * @return\n\t */\npublic String[] iGetInputSourceList() {\n\t\treturn mTVInputManager.getInputSourceArray();\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"iGetOutputSourceList","content":"/**\n\t * Record the main output has signal\n\t * \n\t * @return\n\t */\npublic String[] iGetOutputSourceList() {\n\t\treturn mTVInputManager.getOutputArray();\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"iGetCurrentSouce","content":"/**\n\t * Record the main output has signal\n\t * \n\t * @return\n\t */\npublic String iGetCurrentSouce() {\n\t\treturn mTVInputManager.getCurrInputSource();\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"iFindTvSource","content":"/**\n\t * Record the main output has signal\n\t * \n\t * @return\n\t */\nprivate String iFindTvSource() {\n\t\tint tmp = 0;\n\n\t\tfor (tmp = 0; tmp < mSourceList.size(); tmp++) {\n\t\t\tif (null !=mTVInputManager.getTypeFromInputSource(mSourceList.get(tmp)) && TVInputManager.INPUT_TYPE_TV\n\t\t\t\t\t.equals(mTVInputManager.getTypeFromInputSource(mSourceList.get(tmp)))) {\n\t\t\t\treturn mSourceList.get(tmp);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isCurrentSourceTv","content":"/**\n\t * Record the main output has signal\n\t * \n\t * @return\n\t */\npublic boolean isCurrentSourceTv() {\n\t\tString ins = mTVInputManager.getTypeFromInputSource(iGetCurrentSouce());\n\t\treturn TVInputManager.INPUT_TYPE_TV.equals(ins);\n\n\t\t// return mTVInputManager.getTypeFromInputSource(iGetCurrentSouce())\n\t\t// .equals(TVInputManager.INPUT_TYPE_TV);\n\t}"} {"path":"downloaded/EssayStatisticsController.java","method_name":"<Lis","content":"\n\n    /**\n     *  数据统计 - 单题列表\n     * @\nn 分页之后的结果\n     */\n    @LogPrint\n    @GetMapping(value = \"list\", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)\n    public PageUtil<List<EssaySimilarQuestionGroupVO>> list(@RequestParam(defaultValue = \"1\") int page,\n                                                            @RequestParam(defaultValue = \"20\") int pageSize,\n                                                            @RequestParam(name = \"title\", defaultValue = \"\") String title,\n                                                            @RequestParam(name = \"type\", defaultValue = \"0\") int type) {\n        //利用SpringDate jpa 提供的方法来完成分页:  第三个参数是用来排序的(通过id降序排列返回数据)\n        PageRequest pageable = new PageRequest(page - 1, pageSize, Sort.D"} {"path":"downloaded/EssayStatisticsController.java","method_name":"  @LogPrin","content":"\n\n    /**\n     *  数据统计 - 单题列表\n     * @\nroup(pageable, title, type);\n    }\n\n\n    /**\n     * 查询批改单/套题总数\n     *\n     * @return 查询总数\n     */\n    @LogPrint\n    @GetMapping(value = \"sum/{type}/{paperType}\", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)\n    public long correctSum(@P"} {"path":"downloaded/EssayStatisticsController.java","method_name":"d\n     * ","content":"\n\n    /**\n     *  数据统计 - 单题列表\n     * @\n    }\n\n    /**\n     * 数据统计 - 套题列表\n     *\n     * @param title\n     * @param year\n     * @param areaId\n     * @return\n     */\n    @LogPrint\n    @GetMapping(value = \"paperList\", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)\n    public Object paperList(@RequestParam(defaultValue = \"1\") int page,\n                            @RequestParam(defaultValue = \"20\") int pageSize,\n                            @RequestParam(name = \"title\", defaultValue = \"\") String title,\n                            @RequestParam(name = \"year\", defaultValue = \"\") String year,\n                            @RequestParam(name = \"areaId\", defaultValue = \"-1\") int areaId,\n                            @RequestParam(name = \"paperType\") int paperType) {\n        PageRequest pageable = new PageRequest(pa"} {"path":"downloaded/EssayStatisticsController.java","method_name":"@param id\n  ","content":"\n\n    /**\n     *  数据统计 - 单题列表\n     * @\nervice.findAllPaper(pageable, title, year, areaId,paperType);\n    }\n\n    /**\n     * 查询单题结果信息\n     *\n     * @param id\n     * @return\n     */\n    @LogPrint\n    @GetMapping(value = \"detailSingle/{id}\", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)\n    "} {"path":"downloaded/EssayStatisticsController.java","method_name":"     * @return\n ","content":"\n\n    /**\n     *  数据统计 - 单题列表\n     * @\nGroupId(id,EssayAnswerCardEnum.ModeTypeEnum.NORMAL);\n    }\n\n    /**\n     * 成绩列表\n     *\n     * @param areaId\n     * @param questionId\n     * @return\n     */\n    @LogPrint\n    @PostMapping(value = \"detailSingle/{areaId}/{questionId}\", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)\n    public Object detailSingleUser(@RequestParam(defaultValue = \"1\") int page,\n                                   @RequestParam(defaultValue = \"20\") int pageSize, @PathVariable Long areaId, @PathVariable Long questionId) {\n        PageRequest pageable"} {"path":"downloaded/NavIntegration.java","method_name":"isCurrentSourceDTV","content":"/**\n\t * Record the main output has signal\n\t * \n\t * @return\n\t */\npublic boolean isCurrentSourceDTV() {\n\t\treturn (null != mTVInputManager.getCurrInputSource() && \"dtv\".equals(mTVInputManager.getCurrInputSource()));\n\t}"} {"path":"downloaded/EssayStatisticsController.java","method_name":"�细信息\n","content":"\n\n    /**\n     *  数据统计 - 单题列表\n     * @\nturn essayStatisticsService.findBySingleGroupIdAndPage(pageable, areaId, questionId);\n    }\n\n    /**\n     * 添加套题详细信息\n     *\n     * @param id\n     * @return\n     */\n    @LogPrint\n    @GetMapping(value = \"detailPaper/{id}\", produces = MediaType.AP"} {"path":"downloaded/EssayStatisticsController.java","method_name":" {\n        r","content":"\n\n    /**\n     *  数据统计 - 单题列表\n     * @\nTION_JSON_UTF8_VALUE)\n    public Object detailPaper(@PathVariable Long id) {\n        return essayStatisticsService.findByPaperId(id,EssayAnswerCardEnum.ModeTypeEnum.NORMAL);\n    }\n    @LogPrint\n    @GetMappin"} {"path":"downloaded/NavIntegration.java","method_name":"isCurrentSourceVGA","content":"/**\n\t * Record the main output has signal\n\t * \n\t * @return\n\t */\npublic boolean isCurrentSourceVGA() {\n\t\tString ins = mTVInputManager.getTypeFromInputSource(iGetCurrentSouce());\n\t\treturn (null != ins && ins.equals(TVInputManager.INPUT_TYPE_VGA));\n\t\t// return mTVInputManager.getTypeFromInputSource(iGetCurrentSouce())\n\t\t// .equals(TVInputManager.INPUT_TYPE_VGA);\n\t}"} {"path":"downloaded/EssayStatisticsController.java","method_name":"   return essayS","content":"\n\n    /**\n     *  数据统计 - 单题列表\n     * @\nue = \"getPageExcel\")\n    public ModelAndView getPageExcel(Long pageId){\n\n        return essayStatisticsService.getPageExcel(pageId, EssayAnswerCardEnum.ModeTypeEnum.NORMAL);\n    }\n    @LogPrint\n    @GetMapping(value = \"ge"} {"path":"downloaded/NavIntegration.java","method_name":"vgaNotSupport","content":"/**\n\t * Record the main output has signal\n\t * \n\t * @return\n\t */\npublic boolean vgaNotSupport() {\n\t\tif (isCurrentSourceVGA()\n\t\t\t\t&& mTVInputManager.getDefaultOutput()\n\t\t\t\t\t\t.getInstanceVideoResolution().getTimingType() == TVOutputCommon.TimingType.TIMING_TYPE_NOT_SUPPORT) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isCurrentSourceComponent","content":"/**\n\t * Record the main output has signal\n\t * \n\t * @return\n\t */\npublic boolean isCurrentSourceComponent(){\n\t\tString ins = mTVInputManager.getTypeFromInputSource(iGetCurrentSouce());\n\t\treturn TVInputManager.INPUT_TYPE_COMPONENT.equals(ins);\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isCurrentSourceHDMI","content":"/**\n\t * Record the main output has signal\n\t * \n\t * @return\n\t */\npublic boolean isCurrentSourceHDMI() {\n\t\tif(null !=iGetCurrentSouce()){\n\t\t   return (null != mTVInputManager.getTypeFromInputSource(iGetCurrentSouce()) && TVInputManager.INPUT_TYPE_HDMI\n\t\t\t\t.equals(mTVInputManager.getTypeFromInputSource(iGetCurrentSouce())));\n\t\t}else{\n\t\t   return false;\n\t\t}\n\t\t\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isCurrentSourceAV","content":"/**\n\t * Record the main output has signal\n\t * \n\t * @return\n\t */\npublic boolean isCurrentSourceAV() {\n\t\tString ins = mTVInputManager.getTypeFromInputSource(iGetCurrentSouce());\n\t\treturn TVInputManager.INPUT_TYPE_AV.equals(ins);\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"iGetResolution","content":"/**\n\t * Record the main output has signal\n\t * \n\t * @return\n\t */\npublic Rect iGetResolution() {\n\t\tmTvOutput = mTVInputManager.getDefaultOutput();\t\n\t\tif (mTvOutput.getInstanceVideoResolution().getTimingType() == TVOutputCommon.TimingType.TIMING_TYPE_NOT_SUPPORT) {\n\t\t\treturn new Rect(0,0,0,0);\n\t\t} else {\n\t\treturn mTvOutput.getInstanceVideoResolution().getVideoResolution();\t\t\n\t}\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isTimingTypeGraphic","content":"/**\n\t * Record the main output has signal\n\t * \n\t * @return\n\t */\npublic boolean isTimingTypeGraphic() {\n\t\tmTvOutput = mTVInputManager.getDefaultOutput();\t\n\t\tif (mTvOutput.getInstanceVideoResolution().getTimingType() == TVOutputCommon.TimingType.TIMING_TYPE_GRAPHIC) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"iGetVideoFormat","content":"/**\n\t * Record the main output has signal\n\t * \n\t * @return\n\t */\npublic String iGetVideoFormat() {\n\t\tmTvOutput = mTVInputManager.getDefaultOutput();\n\t\treturn mTvOutput.getInstanceVideoResolution().getVideoFormat();\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"iGetVedioFrequency","content":"/**\n\t * Record the main output has signal\n\t * \n\t * @return\n\t */\npublic int iGetVedioFrequency() { // hzy fix CR:363961\n\t\tmTvOutput = mTVInputManager.getDefaultOutput();\n\t\treturn mTvOutput.getInstanceVideoResolution().getVideoFramerate();\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isVideoProgressive","content":"/**\n\t * Record the main output has signal\n\t * \n\t * @return\n\t */\npublic boolean isVideoProgressive() {\n\t\tmTvOutput = mTVInputManager.getDefaultOutput();\n\t\treturn mTvOutput.getInstanceVideoResolution().isVideoProgressive();\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isCurrentSourceATVPlaying","content":"/**\n\t * Record the main output has signal\n\t * \n\t * @return\n\t */\npublic boolean isCurrentSourceATVPlaying(){\n\t\t\n\t\t\n\t\tif(null != mTVInputManager.getCurrInputSource() \n\t\t\t\t&& \"atv\".equals(mTVInputManager.getCurrInputSource())){\n\t\t\tif(!mTVInputManager.isBlock(iGetCurrentSouce())){\n\t\t\t\tif(mTvChannelSelector.getCurrentChannel()!=null && iGetChannelLength()>0){\n\t\t\t\t\t\treturn !isCurrentChannelBlocked();\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isCurrentSourceBlocked","content":"/**\n\t * judge current source is blocked or not.\n\t * \n\t * @return\n\t */\npublic boolean isCurrentSourceBlocked() {\n\t\treturn mTVInputManager.isBlock(iGetCurrentSouce());\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isCurrentSourceUserBlocked","content":"/**\n\t * judge current source is blocked or not.\n\t * \n\t * @return\n\t */\npublic boolean isCurrentSourceUserBlocked() {\n//\t\tString ins = mTVInputManager.getCurrInputSource();\n//\t\tif (ins != null) {\n//\t\t\tTVInput in = mTVInputManager.getInput(ins);\n//\t\t\tif (in != null) {\n//\t\t\t\treturn in.isUsrUnblocked();\n//\t\t\t}\n//\t\t}\n\t\t\n\t\tTVCommonManager tvMgr=TVCommonManager.getInstance(mContext);\n\t\treturn tvMgr.isInputSourceBlocked(tvMgr.getCurrentInputSource());\n\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isCurrentSourceBlocking","content":"/**\n\t * judge current source is blocked or not.\n\t * \n\t * @return\n\t */\npublic boolean isCurrentSourceBlocking(){\n\t\tboolean tmpSource=isCurrentSourceBlocked();\n\t\tif(isCurrentSourceTv()){\n\t\t\tTVChannel channel=iGetCurrentChannel();\n\t\t\tboolean tmpChannel = ((channel == null) || (channel != null && channel.isBlocked()/*!channel\n\t\t\t\t\t.isUsrUnblocked()*/));\n\t\t\treturn tmpChannel && tmpSource;\n\t\t}else{\n\t\t\treturn tmpSource;\n\t\t}\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isCurrentChannelBlocking","content":"/**\n\t * judge current source is blocked or not.\n\t * \n\t * @return\n\t */\npublic boolean isCurrentChannelBlocking(){\n\t\tTVChannel channel=iGetCurrentChannel();\n\t\tif(channel==null){\n\t\t\treturn false;\n\t\t}else{\n\t\t\treturn (channel.isBlocked() /*&& !channel.isUsrUnblocked()*/);\n\t\t}\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isTheSourceBlocked","content":"/**\n\t * judge the source is blocked or not.\n\t * \n\t * @param inputsource\n\t * @return\n\t */\npublic boolean isTheSourceBlocked(String inputsource) {\n\t\treturn mTVInputManager.isBlock(inputsource);\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"iPowerOffMinutesLeft","content":"/**\n\t * return timer's time left in minutes. this function if write for menu\n\t * timer.\n\t * \n\t * @param timer_name\n\t * @return\n\t */\npublic long iPowerOffMinutesLeft(String timer_name) {\n\t\tlong time = 0;\n\n\t\tPowerOffTimer mPowerOffTimer = mTvTimerManager\n\t\t\t\t.getPowerOffTimer(timer_name);\n\n\t\tif (mPowerOffTimer != null) {\n\t\t\ttime = mPowerOffTimer.getTimeLeft();\n\t\t\tif (time % 60000 > 0) {\n\t\t\t\ttime = time / 60000 + 1;// milliseconds to minutes\n\t\t\t} else {\n\t\t\t\ttime = time / 60000;\n\t\t\t}\n\t\t}\n\n\t\treturn time;\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"iGetChannelList","content":"/**\n\t * @deprecated\n\t */\npublic List<TVChannel> iGetChannelList() {\n\t\treturn mTvChannelManager.getChannels();\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"iGetChannelLength","content":"/**\n\t * @deprecated\n\t */\npublic int iGetChannelLength() {\n\t\treturn mTvChannelManager.getChannelLength();\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"iHasChannel","content":"/**\n\t * @deprecated\n\t */\npublic boolean iHasChannel() {\n\t\tif (mTvChannelManager.getChannelLength() > 0) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isCurrentChannelPAL","content":"/**\n\t * @deprecated\n\t */\npublic boolean isCurrentChannelPAL() {\n\t\tTVChannel mChannel = mTvChannelSelector.getCurrentChannel();\n\n\t\tif (mChannel != null) {\n\t\t\treturn \tmChannel.isAnalog();\n\t\t}\n\t\treturn false;\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isCurrentChannelDTV","content":"/**\n\t * @deprecated\n\t */\npublic boolean isCurrentChannelDTV() {\n\t\tTVChannel mChannel = mTvChannelSelector.getCurrentChannel();\n\n\t\tif (mChannel != null) {\n\t\t\treturn mChannel.isDTV();\n\t\t}\n\t\treturn false;\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isCurrentChannelRadio","content":"/**\n\t * @deprecated\n\t */\npublic boolean isCurrentChannelRadio() {\n\t\tTVChannel mChannel = mTvChannelSelector.getCurrentChannel();\n\n\t\tif (mChannel != null) {\n\t\t\treturn mChannel.isRadio();\n\t\t}\n\t\treturn false;\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"iSelectChannel","content":"/**\n\t * favorite channel up and down filter\n\t */\npublic boolean iSelectChannel(TVChannel ch) {\n\t\tif (ch == null) {\n\t\t\treturn false;\n\t\t}\n//\t\tif (!ch.isValid()) {\n//\t\t\treturn false;\n//\t\t}\n\t\tif (ch.equals(iGetCurrentChannel()) && isCurrentSourceTv()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tiSetSourcetoTv();\n\t\tstartShiftChannelTime = System.currentTimeMillis();\n\t\tmTvChannelSelector.select(ch);\n\t\treturn true;\n\t}"} {"path":"downloaded/Emprestimo.java","method_name":"ong g","content":"    /**\n     * @deprecated (utilizado apenas pela JPA)\n   \n    public Long getId() {\n        Assert.state(Objects.nonNull(id), \"Será que vc esqueceu de persistir o empréstimo?\");\n        return id;"} {"path":"downloaded/NavIntegration.java","method_name":"iSelectChannel","content":"/**\n\t * favorite channel up and down filter\n\t */\npublic boolean iSelectChannel(short num) {\n\t\tTVChannel ch = null;\n\t\tif (num >= 0) {\n\t\t\tch = mTvChannelManager.findChannelByNumber(num);\n\t\t\treturn iSelectChannel(ch);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"iGetCurrentChannel","content":"/**\n\t * favorite channel up and down filter\n\t */\npublic TVChannel iGetCurrentChannel() {\n\t\treturn mTvChannelSelector.getCurrentChannel();\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"iGetChannelList","content":"/**\n\t * \n\t * @param channelType\n\t *            ANALOGUE_TYPE,DIGITAL_TYPE,RADIO_TYPE\n\t * @return channel {@link List} List<TVChannel>\n\t */\npublic List<TVChannel> iGetChannelList(int channelType) {\n\t\tList<TVChannel> channelList = null;\n\t\tif (channelType == RADIO_TYPE) {\n\t\t\tchannelList = mTvChannelManager.getChannels(0,\n\t\t\t\t\tnew ChannelFilter() {\n\n\t\t\t\t\t\tpublic boolean filter(TVChannel channel) {\n\t\t\t\t\t\t\tif (channel.isRadio()) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t} else {\n\t\t\tchannelList = mTvChannelManager.getChannels();// get all channels.\n\t\t}\n\t\treturn channelList;\n\t}"} {"path":"downloaded/Emprestimo.java","method_name":"olean foiDev","content":"    /**\n     * @deprecated (utilizado apenas pela JPA)\n   \n\n\n    public boolean foiDevolvido() {\n        return Objects.nonNull(instanteDevolucao);"} {"path":"downloaded/Emprestimo.java","method_name":"tring to","content":"    /**\n     * @deprecated (utilizado apenas pela JPA)\n   \n\n\n    @Override\n    public String toString() {\n        return \"Emprestimo{\" +\n                \"id=\" + id +\n                \", usuario=\" + usuario +\n                \", exemplarSelecionado=\" + exemplarSelecionado +\n                \", diasEmprestimo=\" + diasEmprestimo +\n                \", instanteDevolucao=\" + instanteDevolucao +\n                '}';"} {"path":"downloaded/Emprestimo.java","method_name":"c int com","content":"    /**\n     * @deprecated (utilizado apenas pela JPA)\n   \n\n\n    @Override\n    public int compareTo(Emprestimo outro) {\n        return instanteEmprestimo.compareTo(outro.instanteEmprestimo);"} {"path":"downloaded/NavIntegration.java","method_name":"iGetFavoriteList","content":"/**\n\t * \n\t * @param channelType\n\t *            ANALOGUE_TYPE,DIGITAL_TYPE,RADIO_TYPE\n\t * @return channel {@link List} List<TVChannel>\n\t */\npublic List<TVChannel> iGetFavoriteList() {\n\t\treturn mTvChannelManager.getChannels(0,\n\t\t\t\tChannelFilter.TVFavoriteFilter);\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isSetCurrentChannelFavorite","content":"/**\n\t * return true: add a current TVchannel into FavoriteList, return false:\n\t * remove one or didn't get current channel\n\t * \n\t * @deprecated\n\t */\npublic boolean isSetCurrentChannelFavorite() {\n\t\tTVChannel mTVChannel = mTvChannelSelector.getCurrentChannel();\n\t\treturn isSetChannelFavorite(mTVChannel);\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isSetChannelFavorite","content":"/**\n\t * return true: add a current TVchannel into FavoriteList, return false:\n\t * remove one or didn't get current channel\n\t * \n\t * @deprecated\n\t */\npublic boolean isSetChannelFavorite(TVChannel mTvChannel) {\n\t\tif (mTvChannel == null) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tif (mTvChannel.isFavorite()) {\n\t\t\t\tmTvChannel.setFavorite(false);\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tmTvChannel.setFavorite(true);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"iSetMute","content":"/**\n\t * mute\n\t */\npublic boolean iSetMute() {\n\t\tif (mTv.isMute()) {\n\t\t\tmTv.setAudioMute(false);\n\t\t} else {\n\t\t\tmTv.setAudioMute(true);\n\t\t}\n\n\t\treturn mTv.isMute();\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isMute","content":"/**\n\t * mute\n\t */\npublic boolean isMute() {\n\t\treturn mTv.isMute();\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isStartSetupwizard","content":"/**\n\t * when power on TV first time, should start setup wizard\n\t */\npublic boolean isStartSetupwizard() {\n\t\treturn sp.getBoolean(\"firstTimePowerOn\", true);\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"iHasSignal","content":"/**\n\t * @deprecated\n\t */\npublic boolean iHasSignal() {\n\t\treturn mTvChannelSelector.hasSignal();\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"iCurrentChannelHasSignal","content":"/**\n\t * replace iHasSignal()\n\t * \n\t * @return\n\t */\npublic boolean iCurrentChannelHasSignal() {\n\t\treturn mTvChannelSelector.hasSignal();\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isPasswordRight","content":"/**\n\t * parental control\n\t */\npublic boolean isPasswordRight(Context context, String mString) {\n\t\tString mPassword;\n\n\t\tmPassword = SaveValue.getInstance(context).readStrValue(\"password\");\n\t\tif (mPassword.equals(mString)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isCurrentChannelBlocked","content":"/**\n\t * judge current channel is blocked or not.\n\t * \n\t * @return\n\t */\npublic boolean isCurrentChannelBlocked() {\n\t\tTVChannel ch = mTvChannelSelector.getCurrentChannel();\n\t\tif (ch != null) {\n\t\t\treturn ch.isBlocked();\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isCurrentChannelUserBlocked","content":"/**\n\t * user unlocked this channel.\n\t * \n\t * @return\n\t */\npublic boolean isCurrentChannelUserBlocked() {\n\t\tTVChannel ch = mTvChannelSelector.getCurrentChannel();\n\t\tif (ch != null) {\n\t\t\treturn !ch.isBlocked();\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"getScrambleState","content":"/**\n\t * user unlocked this channel.\n\t * \n\t * @return\n\t */\nprivate String getScrambleState() {\n\t\treturn mTvChannelSelector.getScrambleState();\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isAudioScrambled","content":"/**\n\t * user unlocked this channel.\n\t * \n\t * @return\n\t */\npublic boolean isAudioScrambled() {\n\t\tString state = getScrambleState();\n\t\tif (state.equals(STATE_AUDIO_AND_VIDEO_SCRAMBLED)\n\t\t\t\t|| state.equals(STATE_AUDIO_CLEAR_VIDEO_SCRAMBLED)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isVideoScrambled","content":"/**\n\t * user unlocked this channel.\n\t * \n\t * @return\n\t */\npublic boolean isVideoScrambled() {\n\t\tString state = getScrambleState();\n\t\tif (state.equals(STATE_AUDIO_AND_VIDEO_SCRAMBLED)\n\t\t\t\t|| state.equals(STATE_VIDEO_CLEAR_AUDIO_SCRAMBLED)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"iGetCurrentSubtitleLangAddIndex","content":"/**\n\t * user unlocked this channel.\n\t * \n\t * @return\n\t */\npublic String iGetCurrentSubtitleLangAddIndex() {\n\t\tMtkLog.d(\"foxy\",\n\t\t\t\t\"iGetCurrentSubtitleLangAddIndex mTv.getCurSubtitleLang()\"\n\t\t\t\t\t\t+ mTv.getCurSubtitleLang());\n\t\tString mCurSubtitleLang = mTv.getCurSubtitleLang();\n\t\tif (isSubtitleShowing || null == mCurSubtitleLang || mCurSubtitleLang.length()== 0) {\n\t\t\tsubRepeat = iGetCurrentSubtitleIndex();\n\t\t\tif (subRepeat != 0) {\n\t\t\t\t\n\t\t\t\treturn mCurSubtitleLang + subRepeat;\n\t\t\t}\n\t\t\treturn mCurSubtitleLang;\n\t\t} else {\n\t\t\treturn \"stop\";\n\t\t}\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"iGetCurrentSubtitleLang","content":"/**\n\t * user unlocked this channel.\n\t * \n\t * @return\n\t */\npublic String iGetCurrentSubtitleLang() {\n\t\tif (isSubtitleShowing) {\n\t\t\treturn mTv.getCurSubtitleLang();\n\t\t} else {\n\t\t\treturn \"stop\";\n\t\t}\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"iSetNextSubtitleLang","content":"/**\n\t * user unlocked this channel.\n\t * \n\t * @return\n\t */\npublic void iSetNextSubtitleLang() {\n\t\tString totalSubtitleLang = mTv.getSubtitleLang();\n\t\tString curSubtitleLang = mTv.getCurSubtitleLang();\n\t\tif (null == totalSubtitleLang  || null == curSubtitleLang \n\t\t\t\t||curSubtitleLang.length() == 0 || totalSubtitleLang.length() == 0 ) {\n\t\t\tMtkLog.v(\"foxy\", \"null in next sub\");\n\t\t\treturn;\n\t\t}\n\t\tint str = 0;\n\t\tif (totalSubtitleLang.length() > 0) {\n\t\t\tsubtitle = new String[totalSubtitleLang.length() / SUBTITTLE_LEN];\n\t\t\twhile (str < totalSubtitleLang.length()) {\n\t\t\t\tsubtitle[str / SUBTITTLE_LEN] = totalSubtitleLang.substring(\n\t\t\t\t\t\tstr, str + SUBTITTLE_LEN);\n\t\t\t\tstr += SUBTITTLE_LEN;\n\t\t\t}\n\t\t} \n\t\tNavIntegration.subTittleTag++;\n\t\tif (NavIntegration.subTittleTag > subtitle.length) {\n\t\t\tif (isSubtitleShowing) {\n\t\t\t\tmTv.syncStopSubtitleStream();\n\t\t\t\tisSubtitleShowing = false;\n\t\t\t} else {\n\t\t\t\tNavIntegration.subTittleTag = 1;\n\t\t\t\tmTv.setSubtitleLang(subtitle[0]);\n\t\t\t\tisSubtitleShowing = true;\n\t\t\t}\n\t\t} else {\n\t\t\tMtkLog.d(\"foxy\", \"NavIntegration.subTittleTag :\"\n\t\t\t\t\t+ NavIntegration.subTittleTag);\n\t\t\tmTv.setSubtitleLang(subtitle[NavIntegration.subTittleTag - 1]);\n\t\t\tisSubtitleShowing = true;\n\t\t}\n\t\t\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isDTVHasChannels","content":"/**\n\t * user unlocked this channel.\n\t * \n\t * @return\n\t */\npublic boolean isDTVHasChannels() {\n//\t\tTVChannelList list = mTvChannelManager\n//\t\t\t\t.getList(TVChannelManager.LIST_DVB_NAME);\n//\t\tif (list != null && list.getChannelLength() > 0) {\n//\t\t\treturn true;\n//\t\t}\n\t\t//TODO special\n\t\treturn true;\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"aspectRatioCanSet","content":"/**\n\t * user unlocked this channel.\n\t * \n\t * @return\n\t */\npublic boolean aspectRatioCanSet(){\n\t\tmTvOutput = mTVInputManager.getDefaultOutput();\n\t\treturn mTvOutput.aspectRatioCanSet();\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"isCapLogo","content":"/**\n\t * user unlocked this channel.\n\t * \n\t * @return\n\t */\npublic boolean isCapLogo(){\n\t\tTVStorage tvStorage = mTv.getStorage();\n\t\treturn tvStorage.isCaptureLogo();\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"canDoCapLogo","content":"/**\n\t * user unlocked this channel.\n\t * \n\t * @return\n\t */\npublic boolean canDoCapLogo() {\n\t\tif (iCurrentInputSourceHasSignal() && !isCurrentChannelRadio()\n\t\t\t\t&& !isVideoScrambled() && isCapLogo()) {\n\t\t\treturn   !isCurrentChannelBlocked();\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}"} {"path":"downloaded/NavIntegration.java","method_name":"iGetCurrentSubtitleIndex","content":"/**\n\t * user unlocked this channel.\n\t * \n\t * @return\n\t */\npublic int iGetCurrentSubtitleIndex() {\n\t\tString totalSubtitleLang = mTv.getSubtitleLang();\n\t\tif(null == totalSubtitleLang  || totalSubtitleLang.length() == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tsubtitle = new String[totalSubtitleLang.length() / SUBTITTLE_LEN];\n\t\tint str = 0;\n\t\tint repeat = 0;\n\t\tint allRepeat = 0;\n\t\tif (totalSubtitleLang.length() > 0) {\n\t\t\twhile (str < totalSubtitleLang.length()) {\n\t\t\t\tsubtitle[str / SUBTITTLE_LEN] = totalSubtitleLang.substring(\n\t\t\t\t\t\tstr, str + SUBTITTLE_LEN);\n\t\t\t\tstr += SUBTITTLE_LEN;\n\t\t\t}\n\t\t\tMtkLog.i(\"foxy\", \"subTittleTag: \" + NavIntegration.subTittleTag);\n\t\t\tfor (int i = 0; i < subtitle.length; i++) {\n\t\t\t\tif (subtitle[i]\n\t\t\t\t\t\t.equals(subtitle[NavIntegration.subTittleTag - 1])) {\n\t\t\t\t\tallRepeat++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (allRepeat > 1) {\n\t\t\t\tfor (int i = 0; i < NavIntegration.subTittleTag; i++) {\n\t\t\t\t\tif (subtitle[i]\n\t\t\t\t\t\t\t.equals(subtitle[NavIntegration.subTittleTag - 1])) {\n\t\t\t\t\t\trepeat++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn repeat;\n\t}"} {"path":"downloaded/PharmacyDAO.java","method_name":"     */\n    pub","content":"    \n    /**Paraméteres konstruktor, amely egy {@link pharmacy.DAO.PharmacyDAO} objektumot hoz létre.\n     * @param entityManager egy {@link javax.persistence.EntityManager} objek\nsszes beteg listája\n     */\n    public List<Patient> getPatientsList() {\n    \tTypedQuery<Patient> p = entityManager.createQuery(\"SELECT p from pharmacy.model.Patient p\",Patient.class);\n   "} {"path":"downloaded/PharmacyDAO.java","method_name":" gyógyszer listá","content":"    \n    /**Paraméteres konstruktor, amely egy {@link pharmacy.DAO.PharmacyDAO} objektumot hoz létre.\n     * @param entityManager egy {@link javax.persistence.EntityManager} objek\n    * @return az összes gyógyszer listája\n     */\n    public List<Medication> getMedicationsList(){\n    \tTypedQuery<Medication> m = entityManager.createQuery(\"SELECT m from pharmacy.model.Medication m"} {"path":"downloaded/PharmacyDAO.java","method_name":"eg.\n     * @retu","content":"    \n    /**Paraméteres konstruktor, amely egy {@link pharmacy.DAO.PharmacyDAO} objektumot hoz létre.\n     * @param entityManager egy {@link javax.persistence.EntityManager} objek\n} metódussal kapjuk meg.\n     * @return az összes vásárlás listája\n     */\n    public List<Purchase> getPurchasesList(){\n    \tTypedQuery<Purchase> pch = entityManager.createQuery(\"SELECT pch from"} {"path":"downloaded/PharmacyDAO.java","method_name":"* @exception ","content":"    \n    /**Paraméteres konstruktor, amely egy {@link pharmacy.DAO.PharmacyDAO} objektumot hoz létre.\n     * @param entityManager egy {@link javax.persistence.EntityManager} objek\nextusból\n     * @exception EntityExistsException ha az entitás már létezik az adatbázisban\n     */\n    public Patient createPatient(String tajszam, String name,\n\t\t\tString address, LocalDate birthdate, int patientRank) {\n    \ttry {\n\t    \tPatient patient = new Patient(tajszam, name, address, birthdate, patientRank);\n\t    \tentityManager.persist(patient);\n\t    \treturn patient;\n    \t} catch (IllegalArgumentException | EntityExistsException "} {"path":"downloaded/PharmacyDAO.java","method_name":" leválasztott a","content":"    \n    /**Paraméteres konstruktor, amely egy {@link pharmacy.DAO.PharmacyDAO} objektumot hoz létre.\n     * @param entityManager egy {@link javax.persistence.EntityManager} objek\na az entitás már leválasztott a kontextusból\n     * @exception EntityExistsException ha az entitás már létezik az adatbázisban\n     */\n    public Medication createMedication(String name, String manufacturer,\n\t\t\tint dose, int quantity, String description, \n\t\t\tint unitprice, int supportedMed){\n    \ttry {\n\t    \tMedication medication = new Medication(name, manufacturer, dose, quantity, description, unitprice, supportedMed);\n\t    \tentityManager.persist(medication);\n\t    \treturn medication;\n    \t} catch (IllegalArgumentE"} {"path":"downloaded/PharmacyDAO.java","method_name":"IllegalArgumen","content":"    \n    /**Paraméteres konstruktor, amely egy {@link pharmacy.DAO.PharmacyDAO} objektumot hoz létre.\n     * @param entityManager egy {@link javax.persistence.EntityManager} objek\n   * @exception IllegalArgumentException ha az entitás már leválasztott a kontextusból\n     * @exception EntityExistsException ha az entitás már létezik az adatbázisban\n     */\n    public Purchase createPurchase(Patient patient, int price, LocalDate date, List<Medication> medications) {\n    \ttry {\n\t    \tPurchase purchase = new Purchase(patient, price, date);\n\t    \tentityManager.persist(purchase); \t\n\t    \tfor(Medication m : medications){\n\t    \t\tpurchase.getMedicationList().add(m);\n\t    \t}\n\t    \tentityManager.merge(purchase);\n\t    \tr"} {"path":"downloaded/PharmacyDAO.java","method_name":"a beteg azonos�","content":"    \n    /**Paraméteres konstruktor, amely egy {@link pharmacy.DAO.PharmacyDAO} objektumot hoz létre.\n     * @param entityManager egy {@link javax.persistence.EntityManager} objek\n   * @param id a beteg azonosítója\n     * @return a megtalált beteg objektum\n     * @exception IllegalArgumentException ha az első paraméter nem létező entitásosztály,\n     * vagy a második paraméter nem megfelelő típusú elsődleges k"} {"path":"downloaded/PharmacyDAO.java","method_name":"* @param id a gyó","content":"    \n    /**Paraméteres konstruktor, amely egy {@link pharmacy.DAO.PharmacyDAO} objektumot hoz létre.\n     * @param entityManager egy {@link javax.persistence.EntityManager} objek\natbázisban.\n     * @param id a gyógyszer azonosítója\n     * @return a megtalált gyógyszer objektum\n     * @exception IllegalArgumentException ha az első paraméter nem létező entitásosztály,\n     * vagy a második paraméter nem megfelelő típusú el"} {"path":"downloaded/PharmacyDAO.java","method_name":"árlást az adat","content":"    \n    /**Paraméteres konstruktor, amely egy {@link pharmacy.DAO.PharmacyDAO} objektumot hoz létre.\n     * @param entityManager egy {@link javax.persistence.EntityManager} objek\nsi a\n     * vásárlást az adatbázisban.\n     * @param id a vásárlás azonosítója\n     * @return a megtalált vásárlás objektum\n     * @exception IllegalArgumentException ha az első paraméter nem létező entitásosztály,\n     * vagy a másodi"} {"path":"downloaded/SearchRestaurantTab2.java","method_name":"newInstance","content":"/**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @param param1 Parameter 1.\n     * @param param2 Parameter 2.\n     * @return A new instance of fragment SearchRestaurantTab2.\n     */\npublic static SearchRestaurantTab2 newInstance(String param1, String param2) {\n        SearchRestaurantTab2 fragment = new SearchRestaurantTab2();\n        Bundle args = new Bundle();\n        args.putString(ARG_PARAM1, param1);\n        args.putString(ARG_PARAM2, param2);\n        fragment.setArguments(args);\n        return fragment;\n    }"} {"path":"downloaded/SearchRestaurantTab2.java","method_name":"onCreateView","content":"/**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @param param1 Parameter 1.\n     * @param param2 Parameter 2.\n     * @return A new instance of fragment SearchRestaurantTab2.\n     */\n@Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        prefs = this.getActivity().getSharedPreferences(\"MyData\", MODE_PRIVATE);\n        currentUser = prefs.getString(\"currentUser\", \"noUser\");\n        View view = inflater.inflate(R.layout.fragment_favorite_restaurant, container, false);\n        buildRecyclerView(view);\n\n        // Inflate the layout for this fragment\n        return view;\n    }"} {"path":"downloaded/SearchRestaurantTab2.java","method_name":"buildRecyclerView","content":"/**\n     * This interface must be implemented by activities that contain this\n     * fragment to allow an interaction in this fragment to be communicated\n     * to the activity and potentially other fragments contained in that\n     * activity.\n     * <p>\n     * See the Android Training lesson <a href=\n     * \"http://developer.android.com/training/basics/fragments/communicating.html\"\n     * >Communicating with Other Fragments</a> for more information.\n     */\nprivate void buildRecyclerView(final View view) {\n        DatabaseReference database = FirebaseDatabase.getInstance().getReference();\n        DatabaseReference restaurantRef = database.child(\"Company\").child(\"Profile\");\n        topRestaurant = new ArrayList<>();\n        restaurantRef.addListenerForSingleValueEvent(new ValueEventListener() {\n            @Override\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\n                if(!dataSnapshot.exists())\n                    return;\n                for (DataSnapshot restaurant : dataSnapshot.getChildren()){\n                    if(restaurant.getValue(Restaurant.class).getRatingCounter() != null && !restaurant.getValue(Restaurant.class).getRatingCounter().equals(\"0\"))\n                        topRestaurant.add(restaurant.getValue(Restaurant.class));\n                }\n                // ORDINARE LISTA\n                Collections.sort(topRestaurant, new Comparator<Restaurant>() {\n                    @Override\n                    public int compare(Restaurant o1, Restaurant o2) {\n                        float score1 = (0.75f * Float.parseFloat(o1.getRatingAvg())) * (0.25f * Float.parseFloat(o1.getRatingCounter()));\n                        float score2 = (0.75f * Float.parseFloat(o2.getRatingAvg())) * (0.25f * Float.parseFloat(o2.getRatingCounter()));\n                        if (score1 > score2)\n                            return -1;\n                        else if (score1 < score2)\n                            return 1;\n                        else\n                            return 0;\n                    }\n                });\n                for (Restaurant element : topRestaurant) {\n                    float score1 = (0.75f * Float.parseFloat(element.getRatingAvg())) * (0.25f * Float.parseFloat(element.getRatingCounter()));\n                    SmartLogger.d(\"Score: \" + String.valueOf(score1));\n                }\n                recyclerView = (RecyclerView) view.findViewById(R.id.favoriteRecyclerViewTab);\n                adapter = new SearchRestaurantTab2Adapter(getContext(), topRestaurant);\n                RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getContext());\n                recyclerView.setLayoutManager(mLayoutManager);\n                recyclerView.setItemAnimator(new DefaultItemAnimator());\n                recyclerView.setAdapter(adapter);\n            }\n\n            @Override\n            public void onCancelled(@NonNull DatabaseError databaseError) {\n\n            }\n        });\n    }"} {"path":"downloaded/FibonacciNumberApp1.java","method_name":"fibNum","content":"/**\n   * Analysis: time complexity is O(2^n) due to the individual method calls for each level of\n   * recursion. Too many recursive calls can lead to a StackOverFlow exception if there is not\n   * enough memory.\n   *\n   * @param n\n   * @return\n   */\npublic int fibNum(int n) {\n\n    //base case\n    if ((n == 0) || (n == 1)) {\n      logger.info(\"Fibonacci number successfully computed\");\n      return n;\n    } else if (n > 1) { //recursive case\n      logger.info(\"Fibonacci number successfully computed\");\n      return fibNum(n - 1) + fibNum(n - 2);\n    } else {\n      throw new IllegalArgumentException(\"Invalid argument, input is less than 0\");\n    }\n  }"} {"path":"downloaded/GridDhtTxPrepareRequest.java","method_name":"last","content":"/**\n     * @return {@code True} if this is last prepare request for node.\n     */\npublic boolean last() {\n        return last;\n    }"} {"path":"downloaded/GridDhtTxPrepareRequest.java","method_name":"nearXidVersion","content":"/**\n     * @return Near transaction ID.\n     */\npublic GridCacheVersion nearXidVersion() {\n        return nearXidVer;\n    }"} {"path":"downloaded/GridDhtTxPrepareRequest.java","method_name":"allowForStartup","content":"/** {@inheritDoc} */\n@Override public boolean allowForStartup() {\n        return true;\n    }"} {"path":"downloaded/GridDhtTxPrepareRequest.java","method_name":"nearNodeId","content":"/**\n     * @return Near node ID.\n     */\npublic UUID nearNodeId() {\n        return nearNodeId;\n    }"} {"path":"downloaded/GridDhtTxPrepareRequest.java","method_name":"subjectId","content":"/**\n     * @return Subject ID.\n     */\n@Nullable public UUID subjectId() {\n        return subjId;\n    }"} {"path":"downloaded/GridDhtTxPrepareRequest.java","method_name":"taskNameHash","content":"/**\n     * @return Task name hash.\n     */\npublic int taskNameHash() {\n        return taskNameHash;\n    }"} {"path":"downloaded/GridDhtTxPrepareRequest.java","method_name":"nearWrites","content":"/**\n     * @return Near writes.\n     */\npublic Collection<GridCacheTxEntry<K, V>> nearWrites() {\n        return nearWrites == null ? Collections.<GridCacheTxEntry<K, V>>emptyList() : nearWrites;\n    }"} {"path":"downloaded/GridDhtTxPrepareRequest.java","method_name":"invalidateNearEntry","content":"/**\n     * @param idx Index to get invalidation flag value.\n     * @return Invalidation flag value.\n     */\npublic boolean invalidateNearEntry(int idx) {\n        return invalidateNearEntries.get(idx);\n    }"} {"path":"downloaded/GridDhtTxPrepareRequest.java","method_name":"needPreloadKey","content":"/**\n     * Checks whether entry info should be sent to primary node from backup.\n     *\n     * @param idx Index.\n     * @return {@code True} if value should be sent, {@code false} otherwise.\n     */\npublic boolean needPreloadKey(int idx) {\n        return preloadKeys != null && preloadKeys.get(idx);\n    }"} {"path":"downloaded/GridDhtTxPrepareRequest.java","method_name":"futureId","content":"/**\n     * @return Future ID.\n     */\npublic GridUuid futureId() {\n        return futId;\n    }"} {"path":"downloaded/GridDhtTxPrepareRequest.java","method_name":"miniId","content":"/**\n     * @return Mini future ID.\n     */\npublic GridUuid miniId() {\n        return miniId;\n    }"} {"path":"downloaded/GridDhtTxPrepareRequest.java","method_name":"topologyVersion","content":"/**\n     * @return Topology version.\n     */\n@Override public long topologyVersion() {\n        return topVer;\n    }"} {"path":"downloaded/GridDhtTxPrepareRequest.java","method_name":"owned","content":"/**\n     * @return Owned versions map.\n     */\npublic Map<K, GridCacheVersion> owned() {\n        return owned;\n    }"} {"path":"downloaded/GridDhtTxPrepareRequest.java","method_name":"toString","content":"/** {@inheritDoc} */\n@Override public String toString() {\n        return S.toString(GridDhtTxPrepareRequest.class, this, \"super\", super.toString());\n    }"} {"path":"downloaded/GridDhtTxPrepareRequest.java","method_name":"clone","content":"/** {@inheritDoc} */\n@SuppressWarnings({\"CloneDoesntCallSuperClone\", \"CloneCallsConstructors\"})\n    @Override public GridTcpCommunicationMessageAdapter clone() {\n        GridDhtTxPrepareRequest _clone = new GridDhtTxPrepareRequest();\n\n        clone0(_clone);\n\n        return _clone;\n    }"} {"path":"downloaded/GridDhtTxPrepareRequest.java","method_name":"writeTo","content":"/** {@inheritDoc} */\n@SuppressWarnings(\"all\")\n    @Override public boolean writeTo(ByteBuffer buf) {\n        commState.setBuffer(buf);\n\n        if (!super.writeTo(buf))\n            return false;\n\n        if (!commState.typeWritten) {\n            if (!commState.putByte(directType()))\n                return false;\n\n            commState.typeWritten = true;\n        }\n\n        switch (commState.idx) {\n            case 20:\n                if (!commState.putGridUuid(futId))\n                    return false;\n\n                commState.idx++;\n\n            case 21:\n                if (!commState.putBitSet(invalidateNearEntries))\n                    return false;\n\n                commState.idx++;\n\n            case 22:\n                if (!commState.putBoolean(last))\n                    return false;\n\n                commState.idx++;\n\n            case 23:\n                if (!commState.putGridUuid(miniId))\n                    return false;\n\n                commState.idx++;\n\n            case 24:\n                if (!commState.putUuid(nearNodeId))\n                    return false;\n\n                commState.idx++;\n\n            case 25:\n                if (nearWritesBytes != null) {\n                    if (commState.it == null) {\n                        if (!commState.putInt(nearWritesBytes.size()))\n                            return false;\n\n                        commState.it = nearWritesBytes.iterator();\n                    }\n\n                    while (commState.it.hasNext() || commState.cur != NULL) {\n                        if (commState.cur == NULL)\n                            commState.cur = commState.it.next();\n\n                        if (!commState.putByteArray((byte[])commState.cur))\n                            return false;\n\n                        commState.cur = NULL;\n                    }\n\n                    commState.it = null;\n                } else {\n                    if (!commState.putInt(-1))\n                        return false;\n                }\n\n                commState.idx++;\n\n            case 26:\n                if (!commState.putCacheVersion(nearXidVer))\n                    return false;\n\n                commState.idx++;\n\n            case 27:\n                if (!commState.putByteArray(ownedBytes))\n                    return false;\n\n                commState.idx++;\n\n            case 28:\n                if (!commState.putLong(topVer))\n                    return false;\n\n                commState.idx++;\n\n            case 29:\n                if (!commState.putUuid(subjId))\n                    return false;\n\n                commState.idx++;\n\n            case 30:\n                if (!commState.putInt(taskNameHash))\n                    return false;\n\n                commState.idx++;\n\n            case 31:\n                if (!commState.putBitSet(preloadKeys))\n                    return false;\n\n                commState.idx++;\n\n        }\n\n        return true;\n    }"} {"path":"downloaded/GridDhtTxPrepareRequest.java","method_name":"readFrom","content":"/** {@inheritDoc} */\n@SuppressWarnings(\"all\")\n    @Override public boolean readFrom(ByteBuffer buf) {\n        commState.setBuffer(buf);\n\n        if (!super.readFrom(buf))\n            return false;\n\n        switch (commState.idx) {\n            case 20:\n                GridUuid futId0 = commState.getGridUuid();\n\n                if (futId0 == GRID_UUID_NOT_READ)\n                    return false;\n\n                futId = futId0;\n\n                commState.idx++;\n\n            case 21:\n                BitSet invalidateNearEntries0 = commState.getBitSet();\n\n                if (invalidateNearEntries0 == BIT_SET_NOT_READ)\n                    return false;\n\n                invalidateNearEntries = invalidateNearEntries0;\n\n                commState.idx++;\n\n            case 22:\n                if (buf.remaining() < 1)\n                    return false;\n\n                last = commState.getBoolean();\n\n                commState.idx++;\n\n            case 23:\n                GridUuid miniId0 = commState.getGridUuid();\n\n                if (miniId0 == GRID_UUID_NOT_READ)\n                    return false;\n\n                miniId = miniId0;\n\n                commState.idx++;\n\n            case 24:\n                UUID nearNodeId0 = commState.getUuid();\n\n                if (nearNodeId0 == UUID_NOT_READ)\n                    return false;\n\n                nearNodeId = nearNodeId0;\n\n                commState.idx++;\n\n            case 25:\n                if (commState.readSize == -1) {\n                    if (buf.remaining() < 4)\n                        return false;\n\n                    commState.readSize = commState.getInt();\n                }\n\n                if (commState.readSize >= 0) {\n                    if (nearWritesBytes == null)\n                        nearWritesBytes = new ArrayList<>(commState.readSize);\n\n                    for (int i = commState.readItems; i < commState.readSize; i++) {\n                        byte[] _val = commState.getByteArray();\n\n                        if (_val == BYTE_ARR_NOT_READ)\n                            return false;\n\n                        nearWritesBytes.add((byte[])_val);\n\n                        commState.readItems++;\n                    }\n                }\n\n                commState.readSize = -1;\n                commState.readItems = 0;\n\n                commState.idx++;\n\n            case 26:\n                GridCacheVersion nearXidVer0 = commState.getCacheVersion();\n\n                if (nearXidVer0 == CACHE_VER_NOT_READ)\n                    return false;\n\n                nearXidVer = nearXidVer0;\n\n                commState.idx++;\n\n            case 27:\n                byte[] ownedBytes0 = commState.getByteArray();\n\n                if (ownedBytes0 == BYTE_ARR_NOT_READ)\n                    return false;\n\n                ownedBytes = ownedBytes0;\n\n                commState.idx++;\n\n            case 28:\n                if (buf.remaining() < 8)\n                    return false;\n\n                topVer = commState.getLong();\n\n                commState.idx++;\n\n            case 29:\n                UUID subjId0 = commState.getUuid();\n\n                if (subjId0 == UUID_NOT_READ)\n                    return false;\n\n                subjId = subjId0;\n\n                commState.idx++;\n\n            case 30:\n                if (buf.remaining() < 4)\n                    return false;\n\n                taskNameHash = commState.getInt();\n\n                commState.idx++;\n\n            case 31:\n                BitSet preloadKeys0 = commState.getBitSet();\n\n                if (preloadKeys0 == BIT_SET_NOT_READ)\n                    return false;\n\n                preloadKeys = preloadKeys0;\n\n                commState.idx++;\n\n        }\n\n        return true;\n    }"} {"path":"downloaded/GridDhtTxPrepareRequest.java","method_name":"directType","content":"/** {@inheritDoc} */\n@Override public byte directType() {\n        return 33;\n    }"} {"path":"downloaded/Utility.java","method_name":"getNullPropertyNames","content":"/**\n\t    * Creates a String array of the properties' names that are either null or 0\n\t    * \n\t    * credit to:\n\t    * https://stackoverflow.com/a/19739041/13242162\n\t    * \n\t    * @param source(ResidentRequest)\n\t    * @return String[] of null or equal to 0 property names\n\t    */\npublic static String[] getNullPropertyNames(Object request) {\n\t        final BeanWrapper req = new BeanWrapperImpl(request);\n\t        PropertyDescriptor[] pds = req.getPropertyDescriptors();\n\t        \n\t        Set<String> emptyNames = new HashSet<String>();\n\t        for (PropertyDescriptor pd : pds) {\n\t            Object srcValue = req.getPropertyValue(pd.getName());\n\t            if (srcValue == null || srcValue.equals(0) )\n\t                emptyNames.add(pd.getName());\n\t        }\n\t        String[] result = new String[emptyNames.size()];\n\t        return emptyNames.toArray(result);\n\t    }"} {"path":"downloaded/ArticleServiceImpl.java","method_name":"rticle>","content":"/**\n     * 获取列表\n     *\n     * @param map\n     * @return\n */\n    @Override\n    public PageResultDTO<Article> getList(Map<String, String> map) {\n        Integer pageNum = Integer.parseInt(map.get(\"pageNum\"));\n        Integer pageSize = Integer.parseInt(map.get(\"pageSize\"));\n        PageHelper.startPage(pageNum, pageSize);\n        List<Article> list = articleMapper.selectArticleList(map);\n        return PageResultUtil.build(list"} {"path":"downloaded/ArticleServiceImpl.java","method_name":"\n    pu","content":"/**\n     * 获取列表\n     *\n     * @param map\n     * @return\n@return\n     */\n    @Override\n    public Article getById(Integer id) {\n        return articleMapper.que"} {"path":"downloaded/ArticleServiceImpl.java","method_name":"\n    public A","content":"/**\n     * 获取列表\n     *\n     * @param map\n     * @return\nyId(id);\n    }\n\n    @Override\n    public Article updateArticle(ArticleDto articleDto) {\n        int id = articleDto.getId();\n\n        Article find = getById(id);\n\n        if (find == null) {\n            throw new ServiceException(SysRetCodeEnum.VALID_ARTICLE_EMPTY);\n        }\n\n        int result = articleMapper.updateArticle(articleDto);\n\n        if (result < 1) {\n            throw new ServiceException(SysRetCodeEnum.ARTICLE_UPDATE_ERROR);\n        }\n        return getById(articl"} {"path":"downloaded/ConfigurationImpl.java","method_name":"eStaticClass","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tprotected EClass eStaticClass() {\n\t\treturn ConfigurationPackage.Literals.CONFIGURATION;\n\t}"} {"path":"downloaded/bean.java","method_name":"  public ","content":"            /**\n             * avatar : http://blog.zhaoliang5156.cn/api/images/head_zhu_2019_08_01.jpeg\n             * name : 小美1\ne;\n\n            public String getAvatar() {\n                return avata"} {"path":"downloaded/ConfigurationImpl.java","method_name":"getVariabilityPoints","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic EList<VariabilityPoint> getVariabilityPoints() {\n\t\tif (variabilityPoints == null) {\n\t\t\tvariabilityPoints = new EObjectResolvingEList<VariabilityPoint>(VariabilityPoint.class, this, ConfigurationPackage.CONFIGURATION__VARIABILITY_POINTS);\n\t\t}\n\t\treturn variabilityPoints;\n\t}"} {"path":"downloaded/ConfigurationImpl.java","method_name":"getRule","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic Rule getRule() {\n\t\tif (rule != null && rule.eIsProxy()) {\n\t\t\tInternalEObject oldRule = (InternalEObject)rule;\n\t\t\trule = (Rule)eResolveProxy(oldRule);\n\t\t\tif (rule != oldRule) {\n\t\t\t\tif (eNotificationRequired())\n\t\t\t\t\teNotify(new ENotificationImpl(this, Notification.RESOLVE, ConfigurationPackage.CONFIGURATION__RULE, oldRule, rule));\n\t\t\t}\n\t\t}\n\t\treturn rule;\n\t}"} {"path":"downloaded/ConfigurationImpl.java","method_name":"basicGetRule","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic Rule basicGetRule() {\n\t\treturn rule;\n\t}"} {"path":"downloaded/ConfigurationImpl.java","method_name":"eGet","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tpublic Object eGet(int featureID, boolean resolve, boolean coreType) {\n\t\tswitch (featureID) {\n\t\t\tcase ConfigurationPackage.CONFIGURATION__RULE:\n\t\t\t\tif (resolve) return getRule();\n\t\t\t\treturn basicGetRule();\n\t\t\tcase ConfigurationPackage.CONFIGURATION__VARIABILITY_POINTS:\n\t\t\t\treturn getVariabilityPoints();\n\t\t}\n\t\treturn super.eGet(featureID, resolve, coreType);\n\t}"} {"path":"downloaded/ConfigurationImpl.java","method_name":"eSet","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@SuppressWarnings(\"unchecked\")\n\t@Override\n\tpublic void eSet(int featureID, Object newValue) {\n\t\tswitch (featureID) {\n\t\t\tcase ConfigurationPackage.CONFIGURATION__RULE:\n\t\t\t\tsetRule((Rule)newValue);\n\t\t\t\treturn;\n\t\t\tcase ConfigurationPackage.CONFIGURATION__VARIABILITY_POINTS:\n\t\t\t\tgetVariabilityPoints().clear();\n\t\t\t\tgetVariabilityPoints().addAll((Collection<? extends VariabilityPoint>)newValue);\n\t\t\t\treturn;\n\t\t}\n\t\tsuper.eSet(featureID, newValue);\n\t}"} {"path":"downloaded/ConfigurationImpl.java","method_name":"eUnset","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tpublic void eUnset(int featureID) {\n\t\tswitch (featureID) {\n\t\t\tcase ConfigurationPackage.CONFIGURATION__RULE:\n\t\t\t\tsetRule((Rule)null);\n\t\t\t\treturn;\n\t\t\tcase ConfigurationPackage.CONFIGURATION__VARIABILITY_POINTS:\n\t\t\t\tgetVariabilityPoints().clear();\n\t\t\t\treturn;\n\t\t}\n\t\tsuper.eUnset(featureID);\n\t}"} {"path":"downloaded/ConfigurationImpl.java","method_name":"eIsSet","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tpublic boolean eIsSet(int featureID) {\n\t\tswitch (featureID) {\n\t\t\tcase ConfigurationPackage.CONFIGURATION__RULE:\n\t\t\t\treturn rule != null;\n\t\t\tcase ConfigurationPackage.CONFIGURATION__VARIABILITY_POINTS:\n\t\t\t\treturn variabilityPoints != null && !variabilityPoints.isEmpty();\n\t\t}\n\t\treturn super.eIsSet(featureID);\n\t}"} {"path":"downloaded/ConfigurationImpl.java","method_name":"toPresenceCondition","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tpublic String toPresenceCondition() {\n\t\tString expression = rule.getFeatureModel();\n\t\t\n\t\tfor(VariabilityPoint vp : variabilityPoints) {\n\t\t\tif(vp.getBinding() == VariabilityPointBinding.TRUE) {\n\t\t\t\texpression += \" and \";\n\t\t\t\texpression += \"def(\" + vp.getName() + \")\";\n\t\t\t} else if(vp.getBinding() == VariabilityPointBinding.FALSE) {\n\t\t\t\texpression += \" and \";\n\t\t\t\texpression += \"!(def(\" + vp.getName() + \"))\";\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(expression);\n\t\t\n\t\treturn expression;\n\t}"} {"path":"downloaded/bean.java","method_name":"  publi","content":"            /**\n             * avatar : http://blog.zhaoliang5156.cn/api/images/head_zhu_2019_08_01.jpeg\n             * name : 小美1\n }\n\n            public String getName() {\n                return nam"} {"path":"downloaded/FolderListener.java","method_name":"atic Properti","content":"/** 加载默�\n��置文件 */\n\tprivate static Properties getProperties(String file) {\n\t\tfile = file == null ? \"config.properties\" : file;\n\t\ttry {\n\t\t\tprop.load(PropUtil.class.getClassLoader().getResourceAsStream(file));\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t"} {"path":"downloaded/OrderForZLQServiseImpl.java","method_name":"<OrderCheck","content":"/**\n\t * 订单审批列表查询\n\t * @param orderCheckQuery\n\n* @return\n\t */\n\t@Override\n\tpublic PagedResponse<List<OrderCheckVo>> findByParam(OrderCheckQuery orderCheckQuery){\n\t\tPagedResponse<List<OrderCheckVo>> result = new PagedResponse<List<OrderCheckVo>>();\n\t\ttry {\n\t\t\tString sql = \"select xo.user_id as userId,xo.assign_id as assignId, xo.assign_name as assignName,\"\n\t\t\t\t\t+ \" xo.loan_number loanNumber,od.real_name userName, od.mobile mobile,od.source channel,\"\n\t\t\t\t\t+ \" xo.loan_time loanTime,xo.app_name appName,xo.assign_time assignTime,xo.order_no orderNo,\"\n\t\t\t\t\t+ \" case when xo.order_status = \" + OrderStatus.AUDIT.getCode() + \" then 1 \"\n\t\t\t\t\t+ \" when xo.audit_status = 1 and xo.reviewed_id is not null and xo.reviewed_id != '' then 2 \"\n\t\t\t\t\t+ \" when xo.audit_status = 0 and xo.reviewed_id is not null and xo.reviewed_id != '' then 3 \"\n\t\t\t\t\t+ \" end as auditStatus\"\n\t\t\t\t\t+ \" from t_order xo INNER JOIN t_order_detail od on xo.order_no=od.order_no \"\n\t\t\t\t\t+ \" WHERE  1=1 and xo.who_audit='1' \"\n\t\t\t\t\t+ \" and (xo.assign_id is not null or xo.assign_id !='')\";\n\t\t\tStringBuffer buff = new StringBuffer();\n\t\t\tif (orderCheckQuery.getAuditStatus() == null) {\n\t\t\t\tbuff.append(\" and (xo.order_status = \" + OrderStatus.AUDIT.getCode() + \" or (xo.reviewed_id is not null and xo.reviewed_id != '')) \");\n\t\t\t} else if (orderCheckQuery.getAuditStatus().intValue() == 1) {\n\t\t\t\tbuff.append(\" and xo.order_status = \" + OrderStatus.AUDIT.getCode() + \" \");\n\t\t\t} else if (orderCheckQuery.getAuditStatus().intValue() == 2) {\n\t\t\t\tbuff.append(\" and xo.audit_status = 1 and xo.reviewed_id is not null and xo.reviewed_id != '' \");\n\t\t\t} else if (orderCheckQuery.getAuditStatus().intValue() == 3) {\n\t\t\t\tbuff.append(\" and xo.audit_status = 0  and xo.reviewed_id is not null and xo.reviewed_id != '' \");\n\t\t\t}\n\t\t\tif (StringUtils.isNotBlank(orderCheckQuery.getUserName())) {\n\t\t\t\tbuff.append(\" and od.real_name ='\").append(orderCheckQuery.getUserName()).append(\"'\");\n\t\t\t}\n\t\t\tif (StringUtils.isNotBlank(orderCheckQuery.getAssignId())) {\n\t\t\t\tbuff.append(\" and xo.assign_id ='\").append(orderCheckQuery.getAssignId()).append(\"'\");\n\t\t\t}\n\t\t\tif (StringUtils.isNotBlank(orderCheckQuery.getAccountNumber())) {\n\t\t\t\tbuff.append(\" and od.mobile='\").append(orderCheckQuery.getAccountNumber()).append(\"'\");\n\t\t\t}\n\t\t\tif (StringUtils.isNotBlank(orderCheckQuery.getCheckPersonnel())) {\n\t\t\t\tbuff.append(\" and  xo.assign_name='\").append(orderCheckQuery.getCheckPersonnel()).append(\"'\");\n\t\t\t}\n\t\t\tif (StringUtils.isNotBlank(orderCheckQuery.getAppName())) {\n\t\t\t\tbuff.append(\" and  od.source='\").append(orderCheckQuery.getAppName()).append(\"'\");\n\t\t\t}\n\t\t\tif (StringUtils.isNotBlank(orderCheckQuery.getBeginTime())) {\n\t\t\t\tbuff.append(\" and xo.assign_time >='\").append(orderCheckQuery.getBeginTime()).append(\"'\");\n\t\t\t}\n\t\t\tif (StringUtils.isNotBlank(orderCheckQuery.getEndTime())) {\n\t\t\t\tbuff.append(\" and xo.assign_time <='\").append(orderCheckQuery.getEndTime()).append(\"'\");\n\t\t\t}\n\t\t\tif (StringUtils.isNotBlank(orderCheckQuery.getIntoTimeStart())) {\n\t\t\t\tbuff.append(\" and xo.create_time >='\").append(orderCheckQuery.getIntoTimeStart()).append(\"'\");\n\t\t\t}\n\t\t\tif (StringUtils.isNotBlank(orderCheckQuery.getIntoTimeEnd())) {\n\t\t\t\tbuff.append(\" and xo.create_time <='\").append(orderCheckQuery.getIntoTimeEnd()).append(\"'\");\n\t\t\t}\n\t\t\tbuff.append(\" ORDER BY xo.assign_time\");\n\n\t\t\tString querySql = sql + buff.toString();\n\t\t\tList<OrderCheckVo> orderList = orderSqlService.pageT(querySql, orderCheckQuery.getPageNo(), orderCheckQuery.getPageSize(), OrderCheckVo.class);\n\t\t\tLong ct = orderSqlService.count(querySql);\n\t\t\tresult.setData(orderList);\n\t\t\tresult.setTotal(ct);\n\t\t\tresult.setSuccess(true);\n\t\t\treturn result;\n\t\t}catch (Exception e){\n\t\t\tlogger.error(\"订单审批列表查询异常 e=\"+e.getMessage());\n\t\t\tresult.setSuccess(false);\n\t\t\tresult.setMsg(\"操"} {"path":"downloaded/FolderListener.java","method_name":"e static St","content":"/** 加载默�\nurn prop;\n\t}\n\t\n\tprivate static String getProperty(String key) {\n\t\tProperties properties = FolderListener.getProperties(null);\n\t\tString property = properties.getProperty(key);\n\t\tret"} {"path":"downloaded/OrderForZLQServiseImpl.java","method_name":"result;\n\t\t}\n\t}\n","content":"/**\n\t * 订单审批列表查询\n\t * @param orderCheckQuery\n\n异常，请联系管理员\");\n\t\t\treturn result;\n\t\t}\n\t}\n\n\t@Override\n\tpublic List<OrderRecordHisVo> findHisByUserId(UserNoParam user) {\n\t\t//CommonResponse<OrderRecordHisVo>  his=new CommonResponse<OrderRecordHisVo>();\n\t\t//OrderRecordHisVo orderRecordHisVo=new OrderRecordHisVo();\n\t\tList<OrderRecordHisVo> orderHisList=(List<OrderRecordHisVo>) mapper.getOrderHisRecord(user);\n\t\t\n\t\t//"} {"path":"downloaded/OrderForZLQServiseImpl.java","method_name":"eturn orderHi","content":"/**\n\t * 订单审批列表查询\n\t * @param orderCheckQuery\n\nDO Auto-generated method stub\n\t\treturn orderHisList;\n\t}\n\n\t@Override\n\tpublic CommonResponse checkApproval(ExamReq req) {\n\t\tCommonResponse common = new CommonResponse<>();\n\t\tif(null == req){\n\t\t\tcommon.setSuccess(false);\n\t\t\tcommon.setMsg(\"产品不能为空\");\n\t\t\treturn common;\n\t\t}\n\t\t\n\t\tString sql = \"select * from t_order where order_no = '%s'\";\n\t\tList<OrderCheckVo> list = orderSqlService.queryT(String.format(sql, req.getOrderNo()), OrderCheckVo.class);\n\t\tif(null == list || list.size()<1){\n\t\t\tcommon.setSuccess(false);\n\t\t\tcommon.setMsg(\"无订单号\");\n\t\t\treturn common;\n\t\t}\n\t\tOrderCheckVo order = list.get(0);\n\t\tif(!(req.getLoanUserId().equals(order.getAssignId()))){\n\t\t\tcommon.setSuccess(false);\n\t\t\tcommon.setMsg(\"订单已分配他人\");\n\t\t\treturn common;\n\t\t}\n\t\tif(10 != order.getOrderStatus()){\n\t\t\tcommon.setSuccess(false);\n\t\t\tcommon.setMsg(\"订单已不在审核中\");\n\t\t\treturn common;\n\t\t}\n\t\t\n\t\tif(\"0\".equals(req.getCheckProduct())){\n\t\t\tString updSql = \"update t_order set order_status='%s',audit_status='%s',reviewed_id='%s',reviewed_name='%s',reviewed_time=now(),reviewed_remark='%s' where order_no='%s'\";\n\t\t\torderSqlService.updateSql(String.format(updSql, OrderStatus.AUDIT_REFUSE.getCode(),\"0\",req.getLoanUserId(),req.getLoanUserName(),req.getRemark(),req.getOrderNo()));\n\t\t}else{\n\t\t\tProductOrderVo product = new ProductOrderVo();\n\t\t\tproduct.setOrderNo(order.getOrderNo());\n\t\t\tproduct.setUserId(order.getUserId());\n\t\t\tBoolean flag = orderToBillByProductService.getProductInfo(product);\n\t\t\tif(flag){\n\t\t\t\tString updSql = \"update t_order set order_status='%s',audit_status='%s',reviewed_id='%s',reviewed_name='%s',reviewed_time=now(),reviewed_remark='%s',real_loan_amount ='%s' where order_no='%s'\";\n\t\t\t\torderSqlService.updateSql(String.format(updSql, OrderStatus.AUDIT_SUCCESS.getCode(),\"1\",req.getLoanUserId(),req.getLoanUserName(),req.getRemark(),new BigDecimal(req.getCheckProduct()),req.getOrderNo()));\n\t\t\t}else{\n\t\t\t\tcommon.setSuccess(false);\n\t\t\t\tcommon.setMsg(\"订单产品已存在该订单号\");\n\t\t\t\treturn common;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tString id= UUID.randomUUID().toString().replace(\"-\", \"\")+Uuid.getUuid24();\n\t\tOrderReviewed reviewed = new OrderReviewed();\n\t\treviewed.setId(id);\n\t\treviewed.setOrderNo(order.getOrderNo());\n\t\treviewed.setUserId(order.getUserId());\n\t\treviewed.setReviewedId(req.getLoanUserId());\n\t\treviewed.setReviewedName(req.getLoanUserName());\n\t\treviewed.setReviewedTime(new Date());\n\t\treviewed.setRemark(re"} {"path":"downloaded/OrderForZLQServiseImpl.java","method_name":"aveOrderReview","content":"/**\n\t * 订单审批列表查询\n\t * @param orderCheckQuery\n\ntRemark());\n\t\torderDao.saveOrderReviewed(reviewed);\n\t\t\n\t\tcommon.setSuccess(true);\n\t\tcommon.setMsg(\"操作成功\");\n\t\treturn common;\n\t}\n\t\n\t@Override\n\tpublic Order findManagerFee(OrderInfo orderInfo) {\n\t\tOrder order=new Order();\n\t\tString sql =\"select * from  t_order  where  or"} {"path":"downloaded/OrderForZLQServiseImpl.java","method_name":"o()+\"'\";\n\t\tList","content":"/**\n\t * 订单审批列表查询\n\t * @param orderCheckQuery\n\n_no='\"+orderInfo.getOrderNo()+\"'\";\n\t\tList<Order> list=orderSqlService.queryT(sql, Order.class);\n\t\torder=list.get(0);\n\t\treturn order;\n\t}\n\n\t@Override\n\tpublic Boolean findOrderStatus(OrderInfo orderinfo) {\n\t\tBoolean bool=false;\n\t\ttry {\n\t\t\tif(orderinfo.getMark().equals(\"1\")) {\n\t\t\t\t//order_status='\"+orderinfo.getOrderStatus()+\"'  and \n\t\t\t\tString sql =\"select * from  t_order  where    order_no='\"+orderinfo.getOrderNo()+\"'\";\n\t\t\t\tList<OrderInfo> orderList=orderSqlService.queryT(sql, OrderInfo.class);\n\t\t\t\tif(orderList!=null &&orderList.size()>0) {\n\t\t\t\t\t//存在记录修改审核状态是审核通过\n\t\t\t\t\t//String sqlupd =\"update  t_order set  order_status=''   where  order_status='\"+order.getOrderStatus()+\"'  and   order_no='\"+order.getOrderNo()+\"'\";\n\t\t\t\t\t//bool=orderSqlService.updateSql(sqlupd);\n\t\t\t\t\tfor(OrderInfo or:orderList) {\n\t\t\t\t\t\tor.setOrderStatus(1200);\n\t\t\t\t\t\tor.setUpdateTime(new Date());\n\t\t\t\t\t\torderDao.update(or);\n\t\t\t\t\t}\n\t\t\t\t\tbool=true;\n\t\t\t\t}\n\t\t\t}else if(orderinfo.getMark().equals(\"2\")) {\n\t\t\t\t// 3天改8天\n\t\t\t\tString sql =\"select * from  t_order  where  order_status='20'  and order_no='\"+orderinfo.getOrderNo()+\"'\";\n\t\t\t\tList<OrderInfo> orderList=orderSqlService.queryT(sql, OrderInfo.class);\n\t\t\t\tif(orderList!=null &&orderList.size()>0) {\n\t\t\t\t\tfor(OrderInfo or:orderList) {\n\t\t\t\t\t\tor.setOrderStatus(1100"} {"path":"downloaded/OrderForZLQServiseImpl.java","method_name":"order","content":"/**\n\t * 订单审批列表查询\n\t * @param orderCheckQuery\n\n\t\t\t\t\t\tor.setUpdateTime(new Date());\n\t\t\t\t\t\torderDao.update(or);\n\t\t\t\t\t}\n\t\t\t\t\tbool=true;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\treturn bool;\n\t}\n\n\t@Override\n\tpublic CommonResponse<Boolean> check(String orderId) {\n\t\tCommonResponse<Boolean> common = new CommonResponse<Boolean>();\n\t\tStringBuffer sb = new StringBuffer();\n\t\tsb.append(\" SELECT\");\n\t\tsb.append(\" *\");\n\t\tsb.append(\" FROM\");\n\t\tsb.append(\" t_order\");\n\t\tsb.append(\" WHERE 1=1\");\n\t\tsb.append(\" and order_no = '\" + orderId +\"'\");\n\t\tsb.append(\" and who_audit = 0 \");\n\t\tsb.append(\" AND order_status <= \" + OrderStatus.AUDIT.getCode());\n\t\tLong ret = orderSqlService.count(sb.toString());\n\t\tco"} {"path":"downloaded/OrderForZLQServiseImpl.java","method_name":"Data(true);\t","content":"/**\n\t * 订单审批列表查询\n\t * @param orderCheckQuery\n\nn.setSuccess(true);\n\t\tif(ret > 0){\n\t\t\tcommon.setData(true);\t\n\t\t}else if(ret == 0){\n\t\t\tcommon.setData(false);\t\n\t\t}else{\n\t\t\tcommon.setSuccess(false);\n\t\t}\n\t\treturn common;\n\t}\n\n\t@Override\n\tpublic CommonResponse<List<ExamReq>> queryProduct(ExamReq req) {\n\t\tCommonResponse<List<ExamReq>> comon = new CommonResponse<List<ExamReq>>();\n\t\tProductInfoForZzlVO info = productContract.getProductForZzl(\"\");\n\t\tList<ExamReq> list = new ArrayList<ExamReq>();\n\t\tif(null != info){\n\t\t\tExamReq exam1 = new ExamReq();\n\t\t\tString m = info.getMoney();\n\t\t\tif(m.contains(\".\")){\n\t\t\t\tString[] arr = m.split(\"\\\\.\");\n\t\t\t\texam1.setCheckProduct(arr[0]);\n\t\t\t\texam1.setCheckProductName(arr[0]);\n\t\t\t}else{\n\t\t\t\texam1.setCheckProduct(info.getMoney());\n\t\t\t\texam1.setCheckProductName(info.getMoney());\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tlist.add(exam1);\n\t\t}\n\t\tExamReq "} {"path":"downloaded/ExcursionPage.java","method_name":"clickFindExcursions","content":"/**\n\t * This methods find the excursion link and clicks on it.\n\t * @return returns the WebElement of the excursion link if found.  Otherwise, it returns null.\n\t */\npublic WebElement clickFindExcursions( ) {\n\t\t\n\t\t/**\n\t\t * At times a survey dialog may appear on any page.\n\t\t * This methods waits a period amount of time for the dialog to appear before closing it.\n\t\t * Note: If the Survey dialog was already closed, it will not check again.  This is only a 1 time check.\n\t\t */\n\t\tcloseWelcomeSurveyDialog( 10 );\n\t\t\n\t\t/* --- We then go find the Button \"FIND EXCURSIONS\" to click it. ---- */\n\t\tWebElement button = driver.findElement( this.excursionbuttonLocator );\n\t\tif( null != button ) {\n\t\t\t\n\t\t\t/* --- Let's click the button. --- */\n\t\t\tbutton.click( );\n\t\t\t\n\t\t\t/* --- Let's return the WebElement. --- */\n\t\t\treturn button;\n\t\t}\n\t\t\n\t\t/* --- Let's set the last error message. --- */\n\t\tsetLastErrorMsg( new Object( ) { }.getClass( ).getEnclosingMethod( ).getName( ) + \"Unable to find the 'Find Excursion Button' element.\" );\n\t\t\n\t\treturn null;\n\t}"} {"path":"downloaded/ExcursionPage.java","method_name":"selectDestination","content":"/**\n\t * In the destination dropdown it selects a given destination and returns the WebElement if found.\n\t * @param destination destination to select for.\n\t * @param click if destination found, select it.  Otherwise, do not selected it. \n\t * @return the selected destination WebElement if found.  Otherwise, it returns null.\n\t */\npublic WebElement selectDestination( String destination ) {\n\t\t\n\t\t/**\n\t\t * At times a survey dialog may appear on any page.\n\t\t * This methods waits a period amount of time for the dialog to appear before closing it.\n\t\t * Note: If the Survey dialog was already closed, it will not check again.  This is only a 1 time check.\n\t\t */\n\t\tcloseWelcomeSurveyDialog( 3 );\n\t\t\n\t\t/* --- Let's go to the dropdown - Destination. --- */\n\t\tWebElement destinationDropdown = this.driver.findElement( dropdownDestinationLocator );\n\t\tif( null == destinationDropdown ) {\n\t\t\t\n\t\t\t/* --- Let's set the last error message. --- */\n\t\t\tsetLastErrorMsg( new Object( ) { }.getClass( ).getEnclosingMethod( ).getName( ) + \"Unable to find the destination dropdown box element.\" );\n\t\t\treturn null;\n\t\t}\n\t\n\t\t/* --- Let's click the drop down. --- */\n\t\tdestinationDropdown.click( );\n\t\t\n\t\t/* --- Let's get the whole list. --- */\n\t\tList< WebElement > destinationOptions = driver.findElements( dropdownDestinationSuggestedResultsLocator );\n\t\t\n\t\tWebElement suggestedDestinationEntry = null;\n\t\tfor( WebElement option : destinationOptions ) {\n\t\t\t\n\t\t\t/* --- Let's display the available cruises. --- */\n\t\t\tif( option.getText().toLowerCase( ).contentEquals( destination.toLowerCase( ) ) ) {\n\t\t\t\t\n\t\t\t\t/* --- Let's select the item and then let's wait for the dialog loading to fade. --- */\n\t\t\t\toption.click( );\n\t\t\t\twaitForDialogLoadingBackdropToFade( );\n\t\t\t\t\n\t\t\t\tsuggestedDestinationEntry = option;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t/* --- If we find the destination, let's return the WebElement. --- */\n\t\tif( null != suggestedDestinationEntry )\n\t\t\treturn suggestedDestinationEntry;\n\t\t\n\t\t/* --- Let's set the last error message. --- */\n\t\tsetLastErrorMsg( new Object( ) { }.getClass( ).getEnclosingMethod( ).getName( ) + \"Unable to find the suggested \" + destination + \" entry element.\" );\n\t\t\n\t\treturn null;\n\t}"} {"path":"downloaded/DynamicArrayQueue.java","method_name":"ems[tai","content":"/**\n     * 尾结点�\n       items[tail++] = item;\n        size++;\n    }\n\n    /**\n     * 出队\n     */\n    public T dequeue() {\n        if (head == tail) {\n            throw new RuntimeException(\"index out of bounds\");\n  "} {"path":"downloaded/Miscellaneous.java","method_name":"addBinaryNumbers","content":"/**\n\t * Returns the binary sum of two binary numbers represented as strings.\n\t * Space: O(n)\n\t * Time: O(n) where n is the length of the longer string.\n\t * @param num1 binary number represented as a string.\n\t * @param num2 binary number represented as a string.\n\t * @return the binary sum of two binary numbers represented as strings.\n\t */\npublic static String addBinaryNumbers(String num1, String num2) {\n\t\tif (num1 == null || num2 == null)\n\t\t\treturn null;\n\t\t\n\t\tint index1 = num1.length() - 1;\n\t\tint index2 = num2.length() - 1;\n\t\tboolean carry = false;\n\t\tString result = \"\";\n\t\t\n\t\twhile(index1 >= 0 && index2 >= 0) {\n\t\t\tint sum = Integer.parseInt(num1.substring(index1, index1 + 1)) + Integer.parseInt(num2.substring(index2, index2 + 1));\n\t\t\tif (sum == 0) {\n\t\t\t\tif (carry) {\n\t\t\t\t\tresult += '1';\n\t\t\t\t\tcarry = false;\n\t\t\t\t} else\n\t\t\t\t\tresult += '0';\n\t\t\t} else if (sum == 1) {\n\t\t\t\tif (carry)\n\t\t\t\t\tresult += '0';\n\t\t\t\telse\n\t\t\t\t\tresult += '1';\n\t\t\t} else { // sum == 2\n\t\t\t\tif (carry)\n\t\t\t\t\tresult += '1';\n\t\t\t\telse {\n\t\t\t\t\tresult += '0';\n\t\t\t\t\tcarry = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tindex1--;\n\t\t\tindex2--;\n\t\t}\n\t\t\n\t\twhile(index1 >= 0) {\n\t\t\tif (num1.charAt(index1) == '0') {\n\t\t\t\tif (carry) {\n\t\t\t\t\tresult += '1';\n\t\t\t\t\tcarry = false;\n\t\t\t\t} else\n\t\t\t\t\tresult += '0';\n\t\t\t} else { // num1.charAt(index1) == '1'\n\t\t\t\tif (carry)\n\t\t\t\t\tresult += '0';\n\t\t\t\telse\n\t\t\t\t\tresult += '1';\n\t\t\t}\n\t\t\t\n\t\t\tindex1--;\n\t\t}\n\t\t\n\t\twhile(index2 >= 0) {\n\t\t\tif (num2.charAt(index2) == '0') {\n\t\t\t\tif (carry) {\n\t\t\t\t\tresult += '1';\n\t\t\t\t\tcarry = false;\n\t\t\t\t} else\n\t\t\t\t\tresult += '0';\n\t\t\t} else { // num2.charAt(index2) == '1'\n\t\t\t\tif (carry)\n\t\t\t\t\tresult += '0';\n\t\t\t\telse\n\t\t\t\t\tresult += '1';\n\t\t\t}\n\t\t\t\n\t\t\tindex2--;\n\t\t}\n\t\t\n\t\tif (carry)\n\t\t\tresult += '1';\n\t\t\n\t\t// reverse result string\n\t\tString reverseResult = \"\";\n\t\tfor (int i = result.length() - 1; i >= 0; i--)\n\t\t\treverseResult += result.charAt(i);\n\t\t\n\t\treturn reverseResult;\n\t}"} {"path":"downloaded/Miscellaneous.java","method_name":"rightShift","content":"/**\n\t * Shift right faster, using a little more memory.\n\t * Space: O(k) where k is the number of positions shifted.\n\t * Time: O(n) where n is the number of elements.\n\t * @param array element E array.\n\t * @param shift number of positions to shift.\n\t */\npublic static <E> void rightShift (E[] array, int shift) {\n\t\tif (shift > 0) {\n\t\t\t// save items displaced off of right end\n\t\t\tArrayList<E> temp = new ArrayList<E>();\n\t\t\tint length = array.length;\n\t\t\tfor (int i = length - shift ; i < length; i++) {\n\t\t\t\ttemp.add(array[i]);\n\t\t\t}\n\t\t\t\n\t\t\t// copy in place\n\t\t\tfor (int i = length - 1; i > shift - 1; i--) {\n\t\t\t\tarray[i] = array[i - shift];\n\t\t\t}\n\t\t\t\n\t\t\t// copy displaced items to left end\n\t\t\tfor (int i = 0; i < shift; i++) {\n\t\t\t\tarray[i] = temp.get(i);\n\t\t\t}\n\t\t} else return;\n\t}"} {"path":"downloaded/Miscellaneous.java","method_name":"leftShift","content":"/**\n\t * Shift left using the least memory.\n\t * Space: O(1)\n\t * Time: O(2n) where n is the number of elements.\n\t * @param array element E array.\n\t * @param shift number of positions to shift.\n\t */\npublic static <E> void leftShift (E[] array, int shift) {\n\t\tif (shift > 0) {\n\t\t\tint length = array.length;\n\t\t\treverse(array, 0, length - 1);\n\t\t\treverse(array, 0, length - shift - 1);\n\t\t\treverse(array, length - shift, length - 1);\n\t\t} else return;\n\t}"} {"path":"downloaded/MillGui.java","method_name":"getNewState","content":"/**\n\t * Returns the new state of the mill board.\n\t * @return String: new state\n\t */\npublic String getNewState() {\n\t\treturn this.newState;\n\t}"} {"path":"downloaded/MillGui.java","method_name":"locationToIndex","content":"/**\n\t * Returns the new state of the mill board.\n\t * @return String: new state\n\t */\npublic int locationToIndex(char row, char col) {\n\t\t\n\t\tint index = 0;\n\t\tint p1 = 0; //row\n\t\tint p2 = 0; //col\n\t\tint p3 = 0; // if col == 1 2 3 \n\t\t\n\t\tswitch (row) {\n\t\tcase 'A': \n\t\t\tp1 = 1;\n\t\t\tbreak;\n\t\tcase 'B':\n\t\t\tp1 = 2;\n\t\t\tbreak;\n\t\tcase 'C':\n\t\t\tp1 = 3;\n\t\t\tbreak;\n\t\tcase 'D':\n\t\t\tp1 = 4;\n\t\t\tbreak;\n\t\tcase 'E':\n\t\t\tp1 = 5;\n\t\t\tbreak;\n\t\tcase 'F':\n\t\t\tp1 = 6;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tswitch (col) {\n\t\tcase '7':\n\t\t\tp2 = 0;\n\t\t\tbreak;\n\t\tcase '6':\n\t\t\tp2 = 1;\n\t\t\tbreak;\n\t\tcase '5':\n\t\t\tp2 = 2;\n\t\t\tbreak;\n\t\tcase '4':\n\t\t\tp2 = 3;\n\t\t\tbreak;\n\t\tcase '3':\n\t\t\tp2 = 4;\n\t\t\tp3 = 3;\n\t\t\tbreak;\n\t\tcase '2':\n\t\t\tp2 = 5;\n\t\t\tp3 = 3;\n\t\t\tbreak;\n\t\tcase '1':\n\t\t\tp2 = 6;\n\t\t\tp3 = 3;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\t\n\t\treturn (p1 + (p2*3) + p3) - 1;\n\t\t\n\t}"} {"path":"downloaded/PropertyUtils.java","method_name":"getProperty","content":"/**\n     * Returns the property associated with the key. Note that a system property can override the specified property,\n     * i.e. if there is a system property with the same name it will be used in preference to the resource bundle\n     * property.\n     * \n     * @param key\n     * @return\n     */\npublic static String getProperty( String key )\n    {\n        if (System.getProperties().containsKey( key ))\n        {\n            return System.getProperty( key );\n        }\n        return _resourceBundle.getString( key );\n    }"} {"path":"downloaded/RangeScan.java","method_name":"from","content":"/**\n   * Returns the {@link ScanTerm} used to start scanning from.\n   *\n   * @return the {@link ScanTerm} used to start scanning from.\n   */\npublic Optional<ScanTerm> from() {\n    return Optional.ofNullable(from);\n  }"} {"path":"downloaded/RangeScan.java","method_name":"to","content":"/**\n   * Returns the {@link ScanTerm} to scan to.\n   *\n   * @return the {@link ScanTerm} to scan to.\n   */\npublic Optional<ScanTerm> to() {\n    return Optional.ofNullable(to);\n  }"} {"path":"downloaded/RangeScan.java","method_name":"build","content":"/**\n   * Returns the {@link ScanTerm} to scan to.\n   *\n   * @return the {@link ScanTerm} to scan to.\n   */\n@Stability.Internal\n  public Built build() {\n    return new Built();\n  }"} {"path":"downloaded/AjudaTextualNegocio.java","method_name":" carregarArquivoAjudaTextua","content":"/** Retorna o texto do arquivo .doc passado por parâmetro *\n\t@SuppressWarnings(\"CallToThreadDumpStack\")\n\tpublic String carregarArquivoAjudaTextual(String caminho) {\n\t\ttry {\n\t\t\tarquivoTexto = new File(caminho);\n\t\t\tBufferedReader buffer = new BufferedReader(new FileReader(arquivoTexto));\n\t\t\tString str = \"\";\n\n\t\t\twhile (buffer.ready()) {\n\t\t\t\tif (str.isEmpty()) {\n\t\t\t\t\tstr = str + buffer.readLine();\n\t\t\t\t} else {\n\t\t\t\t\tstr = str + \"\\r\\n\" + buffer.readLine();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn str;\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn \"\";\n\t"} {"path":"downloaded/CostumerScreen.java","method_name":"displayScreen","content":"/**+\n     * Provides the costumer with several options to access the bank's system and their accounts\n     * @return A BankScreen depending on the users selections\n     */\npublic BankSystemScreen displayScreen() {\n\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Welcome to your Bank\");\n        System.out.println(\"Costumer Screen\");\n        System.out.println(\"What would you like to do?\");\n        System.out.println(\"1. Open Account\");\n        System.out.println(\"2. Access Account\");\n        System.out.println(\"3. Apply for Line of Credit\");\n        System.out.println(\"4. LogOff\");\n\n        try {\n            String input = scanner.nextLine();\n            switch (input) {\n                case \"1\":\n                    return new OpenAccountScreen(costumer, bank.getEmployee());\n                case \"2\":\n                    return new AccountScreen(costumer);\n                case \"3\":\n                    return new ApplyForLineOfCreditScreen(costumer, bank.getEmployee());\n                case \"4\":\n                    return new BankScreen();\n                default:\n                    return displayScreen();\n            }\n        }catch (Exception ex){\n            System.out.println(\"Something went wrong. Let's try again...\");\n            rootLogger.error(\"INPUT: message: {}\", ex.getMessage());\n            return displayScreen();\n        }\n    }"} {"path":"downloaded/_EntityAddress.java","method_name":"getRetracted","content":"/** non-null means the relationship has been retracted */\npublic Timestamp getRetracted() { return Retracted; }"} {"path":"downloaded/_EntityAddress.java","method_name":"getAddressID","content":"/** Reference to the table that actually holds all addresses and which is also stored in the Entity table */\npublic Long getAddressID() { return AddressID; }"} {"path":"downloaded/_EntityAddress.java","method_name":"getEntityID","content":"/** The entity the address is for */\npublic Long getEntityID() { return EntityID; }"} {"path":"downloaded/_EntityAddress.java","method_name":"getAddressTypeID","content":"/** The kind of relationship the address has with the entity */\npublic Long getAddressTypeID() { return AddressTypeID; }"} {"path":"downloaded/_EntityAddress.java","method_name":"fetchOneAddressAddressIDAddressID","content":"/** The kind of relationship the address has with the entity */\npublic dbaccess.Address fetchOneAddressAddressIDAddressID() { try {\n  if (AddressAddressIDAddressIDObj != null) { return AddressAddressIDAddressIDObj;}\n  return(AddressAddressIDAddressIDObj =\n    dbaccess.bridge._Address.fetchOne(\"AddressID\", (long)AddressID));\n  } catch (NullPointerException e) { return null; }}"} {"path":"downloaded/_EntityAddress.java","method_name":"fetchOneEntityEntityIDEntityID","content":"/** The kind of relationship the address has with the entity */\npublic dbaccess.Entity fetchOneEntityEntityIDEntityID() { try {\n  if (EntityEntityIDEntityIDObj != null) { return EntityEntityIDEntityIDObj;}\n  return(EntityEntityIDEntityIDObj =\n    dbaccess.bridge._Entity.fetchOne(\"EntityID\", (long)EntityID));\n  } catch (NullPointerException e) { return null; }}"} {"path":"downloaded/_EntityAddress.java","method_name":"fetchOneAddressTypeAddressTypeIDAddressTypeID","content":"/** The kind of relationship the address has with the entity */\npublic dbaccess.AddressType fetchOneAddressTypeAddressTypeIDAddressTypeID() { try {\n  if (AddressTypeAddressTypeIDAddressTypeIDObj != null) { return AddressTypeAddressTypeIDAddressTypeIDObj;}\n  return(AddressTypeAddressTypeIDAddressTypeIDObj =\n    dbaccess.bridge._AddressType.fetchOne(\"AddressTypeID\", (long)AddressTypeID));\n  } catch (NullPointerException e) { return null; }}"} {"path":"downloaded/_EntityAddress.java","method_name":"testDirtyFlags","content":"/** The kind of relationship the address has with the entity */\npublic boolean testDirtyFlags() { return (\n  RetractedChanged ||\n  AddressIDChanged ||\n  EntityIDChanged ||\n  AddressTypeIDChanged);\n}"} {"path":"downloaded/_EntityAddress.java","method_name":"fetchPrimaryKey","content":"/** The kind of relationship the address has with the entity */\npublic static String fetchPrimaryKey() { return primaryKey; }"} {"path":"downloaded/_EntityAddress.java","method_name":"fetchByPrimaryKey","content":"/** The kind of relationship the address has with the entity */\npublic static EntityAddress fetchByPrimaryKey(Long colValue) {\n  return (EntityAddress)BaseSQLClass.getOne(EntityAddress.class, null, primaryKey, colValue);\n}"} {"path":"downloaded/_EntityAddress.java","method_name":"hasPrimaryKey","content":"/** The kind of relationship the address has with the entity */\npublic static boolean hasPrimaryKey() { return false; }"} {"path":"downloaded/MultipleBrowserTest.java","method_name":"sauceBrowserDataProvider","content":"/**\n     * Simple hard-coded DataProvider that explicitly sets the browser combinations to be used.\n     * @param testMethod\n     * @return\n     */\n@DataProvider(name = \"hardCodedBrowsers\")\n    public static Iterator<Object[]> sauceBrowserDataProvider(Method testMethod) {\n        List<Object[]> browsers = new ArrayList<Object[]>();\n        browsers.add(new Object[]{\"firefox\", \"17\", \"Windows 2008\"});\n        return browsers.iterator();\n    }"} {"path":"downloaded/MultipleBrowserTest.java","method_name":"getSessionId","content":"/**\n     * {@inheritDoc}\n     *\n     * @return\n     */\n@Override\n    public String getSessionId() {\n        SessionId sessionId = ((RemoteWebDriver) driver).getSessionId();\n        return (sessionId == null) ? null : sessionId.toString();\n    }"} {"path":"downloaded/MultipleBrowserTest.java","method_name":"getAuthentication","content":"/**\n     * {@inheritDoc}\n     *\n     * @return\n     */\n@Override\n    public SauceOnDemandAuthentication getAuthentication() {\n        return authentication;\n    }"} {"path":"downloaded/WeightCacheImpl.java","method_name":"��值的忽略�","content":"/**\n\t * ^[1-9]d*.d*$ //大于等于1\n�不对、小于等于默认权值的忽略，不加入缓存\n\t */\n\t@Override\n\tprotected boolean tryCacheKeyValue(String resourceKey, String resourceValue) {\n\t\tif (!key2weight.containsKey(resourceKey)) {\n\t\t\tif (resourceValue.matches(REGEX_FLOAT_1MORE)) {\n\t\t\t\tdouble value = Double.parseDouble(resourceValue);\n\t\t\t\tif (Double.compare(value, DEFAULT_VALUE) > 0) {\n\t\t\t\t\tkey2weight.put(resourceKey, new KeyWeight(resou"} {"path":"downloaded/PipelineCampaignController.java","method_name":"viewCrmCampaign","content":"/**\n\t * get mapping for crm campaign\n\t */\n@GetMapping(\"/view-crm-campaign\")\n\tpublic String viewCrmCampaign(Model model) {\n\t\tlogger.info(\"Method : viewCrmCampaign starts\");\n\n\t\tlogger.info(\"Method : viewCrmCampaign end\");\n\t\treturn \"crm/viewCrmCampaign\";\n\n\t}"} {"path":"downloaded/PipelineCampaignController.java","method_name":"viewCrmCampaignThroughAjax","content":"/**\n\t * get mapping for view Crm campaign ThroughAjax\n\t */\n@SuppressWarnings(\"unchecked\")\n\t@GetMapping(\"/view-crm-campaign-throughajax\")\n\tpublic @ResponseBody DataTableResponse viewCrmCampaignThroughAjax(Model model, HttpServletRequest request,\n\t\t\t@RequestParam String param1) {\n\t\tlogger.info(\"Method : viewCrmCampaignThroughAjax starts\");\n\n\t\tDataTableResponse response = new DataTableResponse();\n\t\tDataTableRequest tableRequest = new DataTableRequest();\n\n\t\ttry {\n\t\t\tString start = request.getParameter(\"start\");\n\t\t\tString length = request.getParameter(\"length\");\n\t\t\tString draw = request.getParameter(\"draw\");\n\n\t\t\ttableRequest.setStart(Integer.parseInt(start));\n\t\t\ttableRequest.setLength(Integer.parseInt(length));\n\t\t\ttableRequest.setParam1(param1);\n\n\t\t\tJsonResponse<List<PipelineCampaignModel>> jsonResponse = new JsonResponse<List<PipelineCampaignModel>>();\n\t\t\tjsonResponse = restClient.postForObject(env.getPipeline() + \"getAllCampaign\", tableRequest,\n\t\t\t\t\tJsonResponse.class);\n\t\t\tObjectMapper mapper = new ObjectMapper();\n\n\t\t\tList<PipelineCampaignModel> form = mapper.convertValue(jsonResponse.getBody(),\n\t\t\t\t\tnew TypeReference<List<PipelineCampaignModel>>() {\n\t\t\t\t\t});\n\n\t\t\tString s = \"\";\n\t\t\tfor (PipelineCampaignModel m : form) {\n\t\t\t\tbyte[] pId = Base64.getEncoder().encode(m.getCampaign().getBytes());\n\t\t\t\ts = \"\";\n\t\t\t\ts = \"<a data-toggle='modal' title='View' data-target='#myModal' href='javascript:void(0)' onclick='viewInModelData(\\\"\"\n\t\t\t\t\t\t+ new String(pId) + \"\\\")'><i class='fa fa-search search'></i></a>\";\n\t\t\t\ts = s + \" &nbsp;&nbsp <a href='view-crm-campaign-edit?id=\" + new String(pId)\n\t\t\t\t\t\t+ \"' ><i class=\\\"fa fa-edit\\\"></i></a> &nbsp;&nbsp; <a href= 'javascript:void(0)' \"\n\t\t\t\t\t\t+ \"' onclick='deleteCampaign(\\\"\" + new String(pId) + \"\\\")' ><i class=\\\"fa fa-trash\\\"></i></a> \";\n\t\t\t\tm.setAction(s);\n\t\t\t\ts = \"\";\n\t\t\t}\n\n\t\t\tresponse.setRecordsTotal(jsonResponse.getTotal());\n\t\t\tresponse.setRecordsFiltered(jsonResponse.getTotal());\n\t\t\tresponse.setDraw(Integer.parseInt(draw));\n\t\t\tresponse.setData(form);\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\tlogger.info(\"Method : viewCrmCampaignThroughAjax end\");\n\t\treturn response;\n\t}"} {"path":"downloaded/PipelineCampaignController.java","method_name":"editCrmCampaign","content":"/**\n\t * get mapping for edit lost reason\n\t */\n@SuppressWarnings(\"unchecked\")\n\t@GetMapping(\"/view-crm-campaign-edit\")\n\tpublic String editCrmCampaign(Model model, @RequestParam(\"id\") String encodeId, HttpSession session) {\n\t\tlogger.info(\"Method : editCrmCampaign starts\");\n\t\tbyte[] encodeByte = Base64.getDecoder().decode(encodeId.getBytes());\n\t\tString id = (new String(encodeByte));\n\t\tPipelineCampaignModel PipelineCampaignModel = new PipelineCampaignModel();\n\t\tJsonResponse<PipelineCampaignModel> jsonResponse = new JsonResponse<PipelineCampaignModel>();\n\t\ttry {\n\t\t\tjsonResponse = restClient.getForObject(\n\t\t\t\t\tenv.getPipeline() + \"getCrmCampaignById?id=\" + id + \"&Action=editCampaign\", JsonResponse.class);\n\t\t\tSystem.out.println(\"jsonResponse\" + jsonResponse);\n\t\t} catch (RestClientException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\tString message = (String) session.getAttribute(\"message\");\n\n\t\tif (message != null && message != \"\") {\n\t\t\tmodel.addAttribute(\"message\", message);\n\t\t}\n\n\t\tObjectMapper mapper = new ObjectMapper();\n\n\t\tPipelineCampaignModel = mapper.convertValue(jsonResponse.getBody(), PipelineCampaignModel.class);\n\t\tsession.setAttribute(\"message\", \"\");\n\n\t\tmodel.addAttribute(\"PipelineCampaignModel\", PipelineCampaignModel);\n\t\ttry {\n\t\t\tDropDownModel[] user = restClient.getForObject(env.getPipeline() + \"getCrmResponsible\",\n\t\t\t\t\tDropDownModel[].class);\n\n\t\t\tList<DropDownModel> userList = Arrays.asList(user);\n\t\t\tmodel.addAttribute(\"userList\", userList);\n\t\t} catch (RestClientException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\ttry {\n\t\t\tDropDownModel[] tag = restClient.getForObject(env.getPipeline() + \"getCrmTagList\", DropDownModel[].class);\n\n\t\t\tList<DropDownModel> tagList = Arrays.asList(tag);\n\t\t\tmodel.addAttribute(\"tagList\", tagList);\n\t\t} catch (RestClientException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\tlogger.info(\"Method : editCrmCampaign end\");\n\t\treturn \"crm/addCrmCampaign\";\n\t}"} {"path":"downloaded/PipelineCampaignController.java","method_name":"modelView","content":"/**\n\t * post Mapping for viewInModelData in lost reason\n\t * \n\t */\n@SuppressWarnings(\"unchecked\")\n\t@PostMapping(value = { \"/view-crm-campaign-modeldata\" })\n\tpublic @ResponseBody JsonResponse<Object> modelView(Model model, @RequestBody String index, BindingResult result) {\n\t\tlogger.info(\"Method : modelView starts\");\n\t\tJsonResponse<Object> res = new JsonResponse<Object>();\n\t\tbyte[] encodeByte = Base64.getDecoder().decode(index.getBytes());\n\t\tString id = (new String(encodeByte));\n\n\t\ttry {\n\t\t\tres = restClient.getForObject(env.getPipeline() + \"getCrmCampaignById?id=\" + id + \"&Action=\" + \"ModelView\",\n\t\t\t\t\tJsonResponse.class);\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tif (res.getMessage() != null) {\n\n\t\t\tres.setCode(res.getMessage());\n\t\t\tres.setMessage(\"Unsuccess\");\n\t\t} else {\n\t\t\tres.setMessage(\"success\");\n\t\t}\n\n\t\tlogger.info(\"Method : modelView end\");\n\t\treturn res;\n\t}"} {"path":"downloaded/PipelineCampaignController.java","method_name":"deleteCampaign","content":"/**\n\t * GetMapping for delete activity types\n\t */\n@SuppressWarnings(\"unchecked\")\n\t@GetMapping(\"/view-crm-campaign-delete\")\n\tpublic @ResponseBody JsonResponse<Object> deleteCampaign(@RequestParam String id, HttpSession session) {\n\t\tlogger.info(\"Method : deleteCampaign starts\");\n\n\t\tJsonResponse<Object> resp = new JsonResponse<Object>();\n\t\tbyte[] encodeByte = Base64.getDecoder().decode(id.getBytes());\n\t\tString id1 = (new String(encodeByte));\n\t\tString userId = null;\n\t\ttry {\n\t\t\tuserId = (String) session.getAttribute(\"USER_ID\");\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\ttry {\n\n\t\t\tresp = restClient.getForObject(env.getPipeline() + \"deleteCampaign?id=\" + id1 + \"&createdBy=\" + userId,\n\t\t\t\t\tJsonResponse.class);\n\n\t\t} catch (RestClientException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tif (resp.getMessage() != null && resp.getMessage() != \"\") {\n\t\t\tSystem.out.println(\"if block getmsg() not false : \" + resp.getMessage());\n\t\t\tresp.setCode(resp.getMessage());\n\t\t\tresp.setMessage(\"Unsuccess\");\n\t\t} else {\n\t\t\tresp.setMessage(\"success\");\n\t\t}\n\t\tlogger.info(\"Method : deleteCampaign ends\");\n\t\treturn resp;\n\t}"} {"path":"downloaded/DAOJuegos.java","method_name":"insertarNuevoJuego","content":"/**\n     * Inserta un nuevo juego\n     * @param juego\n     * @return resultado de la operacion\n     */\npublic boolean insertarNuevoJuego(Juegos juego) {\n\n        String metodo=\"insertarNuevoJuego\";\n        boolean res = false;\n\n        Session session = null;\n        Transaction tx = null;\n\n        try {\n            session = HibernateUtil.currentSession();\n            tx = session.beginTransaction();\n\n            //guardamos\n            session.save(juego);\n\n            session.flush();\n            tx.commit();\n\n            log.info(\"DAOJuegos: \"+metodo+\": Juego \" + juego.getNombre() + \" INSERTADO OK\");\n            res = true;\n\n        } catch (org.hibernate.HibernateException he) {\n            tx.rollback();\n            log.error(\"DAOJuegos: \"+metodo+\": Error de Hibernate: \" + he.getMessage());\n        } catch (SQLException sqle) {\n            tx.rollback();\n            log.error(\"DAOJuegos: \"+metodo+\": Error SQLException: \" + sqle.getMessage());\n        } catch (Exception e) {\n            tx.rollback();\n            log.error(\"DAOJuegos: \"+metodo+\": Error Exception: \" + e.getMessage());\n        } finally {\n            // Liberamos sesión\n            HibernateUtil.closeSession();\n            log.info(\"DAOJuegos: \"+metodo+\": Sesion liberada. Finished\");\n        }\n\n        return res;\n    "} {"path":"downloaded/DAOJuegos.java","method_name":" getJuegosCasin","content":" /**\n     * Obtiene todos los juegos activos del Casino\n     * @return lista de todos los juegos\n     *\n public ArrayList getJuegosCasino() {\n\n        String metodo = \"getJuegosCasino\";\n        ArrayList lista = new ArrayList();\n        Session session = null;\n        Transaction tx = null;\n\n        try {\n            session = HibernateUtil.currentSession();\n            tx = session.beginTransaction();\n\n            lista = (ArrayList) session.createQuery(\"from Juegos\").list();\n\n            session.flush();\n            tx.commit();\n\n            log.info(\"DAOJuegos: \" + metodo + \": Se obtienen \" + lista.size() + \" juegos\");\n\n        } catch (org.hibernate.HibernateException he) {\n            tx.rollback();\n            log.error(\"DAOJuegos: \" + metodo + \": Error de Hibernate: \" + he.getMessage());\n        } catch (SQLException sqle) {\n            tx.rollback();\n            log.error(\"DAOJuegos: \" + metodo + \": Error SQLException: \" + sqle.getMessage());\n        } catch (Exception e) {\n            tx.rollback();\n            log.error(\"DAOJuegos: \" + metodo + \": Error Exception: \" + e.getMessage());\n        } finally {\n            // Liberamos sesión\n            HibernateUtil.closeSession();\n            log.info(\"DAOJuegos: \" + metodo + \": Sesion liberada. Finished\");\n        }\n\n        return lista;\n   "} {"path":"downloaded/DAOJuegos.java","method_name":"s getJuegoPorCodi","content":"  /**\n     * Busca un juego en la BBDD por codigo.\n     * @param codigo codigo del juego\n     * @return objeto Juegos\n     \n  public Juegos getJuegoPorCodigo(int codigo) {\n\n        String metodo = \"getJuegoPorCodigo\";\n\n        Juegos juego = null;\n        Session session = null;\n        Transaction tx = null;\n\n        try {\n            session = HibernateUtil.currentSession();\n            tx = session.beginTransaction();\n\n            juego = (Juegos) session.createQuery(\"from Juegos j where j.codigo= ?\").setString(0, \"\"+codigo).uniqueResult();\n\n            session.flush();\n            tx.commit();\n\n            log.info(\"DAOJuegos: \" + metodo + \": Juego obtenido con CODIGO: \" + juego.getCodigo());\n\n        } catch (org.hibernate.HibernateException he) {\n            tx.rollback();\n            log.error(\"DAOJuegos: \" + metodo + \": Error de Hibernate: \" + he.getMessage());\n        } catch (SQLException sqle) {\n            tx.rollback();\n            log.error(\"DAOJuegos: \" + metodo + \": Error SQLException: \" + sqle.getMessage());\n        } catch (Exception e) {\n            tx.rollback();\n            log.error(\"DAOJuegos: \" + metodo + \": Error Exception: \" + e.getMessage());\n        } finally {\n            // Liberamos sesión\n            HibernateUtil.closeSession();\n            log.info(\"DAOJuegos: \" + metodo + \": Sesion liberada. Finished\");\n        }\n\n        return juego;\n  "} {"path":"downloaded/DAOJuegos.java","method_name":"os getJuegoPorNom","content":"   /**\n     * Busca un juego en la BBDD por nombre.\n     * @param nombre nombre del juego\n     * @return objeto Juegos\n    \n   public Juegos getJuegoPorNombre(String nombre) {\n\n        String metodo = \"getJuegoPorNombre\";\n\n        Juegos juego = null;\n        Session session = null;\n        Transaction tx = null;\n\n        try {\n            session = HibernateUtil.currentSession();\n            tx = session.beginTransaction();\n\n            juego = (Juegos) session.createQuery(\"from Juegos j where j.nombre= ?\").setString(0, \"\"+nombre).uniqueResult();\n\n            session.flush();\n            tx.commit();\n\n            log.info(\"DAOJuegos: \" + metodo + \": Juego obtenido con NOMBRE: \" + juego.getNombre());\n\n        } catch (org.hibernate.HibernateException he) {\n            tx.rollback();\n            log.error(\"DAOJuegos: \" + metodo + \": Error de Hibernate: \" + he.getMessage());\n        } catch (SQLException sqle) {\n            tx.rollback();\n            log.error(\"DAOJuegos: \" + metodo + \": Error SQLException: \" + sqle.getMessage());\n        } catch (Exception e) {\n            tx.rollback();\n            log.error(\"DAOJuegos: \" + metodo + \": Error Exception: \" + e.getMessage());\n        } finally {\n            // Liberamos sesión\n            HibernateUtil.closeSession();\n            log.info(\"DAOJuegos: \" + metodo + \": Sesion liberada. Finished\");\n        }\n\n        return juego;\n "} {"path":"downloaded/DateControlUtil.java","method_name":"turn\n     ","content":"/**\n     * 查询时间处理\n     *\n     * @param startTime 开始时间\n     * @param endTime   结束�\n\n     * @return\n     */\n    public Map getDateMap(String startTime, String endTime) throws ParseException {\n        Map dateMap = new HashMap();\n        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n        Calendar cal = Calendar.getInstance();\n        //只选择了一个时间，则筛选为单日的数据\n        if ((StringUtils.isNotEmpty(startTime) && StringUtils.isEmpty(endTime)) || (StringUtils.isEmpty(startTime) && StringUtils.isNotEmpty(endTime))) {\n            if (StringUtils.isNotEmpty(startTime)) {\n                cal.setTime(format.parse(startTime));\n            }\n            if (StringUtils.isNotEmpty(endTime)) {\n                cal.setTime(format.parse(endTime));\n            }\n        }\n\n        if (StringUtils.isNotEmpty(startTime) && StringUtils.isNotEmpty(endTime)) {\n            //第一个时间=第二个时间，则筛选为单日的数据\n            if (startTime.equals(endTime)) {\n                cal.setTime(format.parse(startTime));\n            } else {\n                cal.setTime(format.parse(endTime));\n                cal.add(Calendar.DAY_OF_MONTH, 1);\n                //结束查询时间\n                String backEndTime = format.format(cal.getTime());\n                dateMap.put(\"startTime\", startTime);\n                dateMap.put(\"endTime\", backEndTime);\n                return dateMap;\n            }\n        }\n        //开始查询时间\n        String backStartTime = format.format(cal.getTime());\n        cal.add(Calendar.DAY_OF_MONTH, 1);\n        //结束查询时间\n        String backEndTime = format.format"} {"path":"downloaded/CertificationRequestInfo.java","method_name":"getVersion","content":"/**\n     * @deprecated use X500Name method.\n     */\npublic ASN1Integer getVersion()\n    {\n        return version;\n    }"} {"path":"downloaded/CertificationRequestInfo.java","method_name":"getSubject","content":"/**\n     * @deprecated use X500Name method.\n     */\npublic X500Name getSubject()\n    {\n        return subject;\n    }"} {"path":"downloaded/CertificationRequestInfo.java","method_name":"getSubjectPublicKeyInfo","content":"/**\n     * @deprecated use X500Name method.\n     */\npublic SubjectPublicKeyInfo getSubjectPublicKeyInfo()\n    {\n        return subjectPKInfo;\n    }"} {"path":"downloaded/CertificationRequestInfo.java","method_name":"getAttributes","content":"/**\n     * @deprecated use X500Name method.\n     */\npublic ASN1Set getAttributes()\n    {\n        return attributes;\n    }"} {"path":"downloaded/CertificationRequestInfo.java","method_name":"toASN1Primitive","content":"/**\n     * @deprecated use X500Name method.\n     */\npublic ASN1Primitive toASN1Primitive()\n    {\n        ASN1EncodableVector v = new ASN1EncodableVector(4);\n\n        v.add(version);\n        v.add(subject);\n        v.add(subjectPKInfo);\n\n        if (attributes != null)\n        {\n            v.add(new DERTaggedObject(false, 0, attributes));\n        }\n\n        return new DERSequence(v);\n    }"} {"path":"downloaded/CertificationRequestInfo.java","method_name":"validateAttributes","content":"/**\n     * @deprecated use X500Name method.\n     */\nprivate static void validateAttributes(ASN1Set attributes)\n    {\n        if (attributes == null)\n        {\n            return;\n        }\n\n        for (Enumeration en = attributes.getObjects(); en.hasMoreElements();)\n        {\n            Attribute attr = Attribute.getInstance(en.nextElement());\n            if (attr.getAttrType().equals(PKCSObjectIdentifiers.pkcs_9_at_challengePassword))\n            {\n                if (attr.getAttrValues().size() != 1)\n                {\n                    throw new IllegalArgumentException(\"challengePassword attribute must have one value\");\n                }\n            }\n        }\n    }"} {"path":"downloaded/Admin.java","method_name":"searchStudent","content":"/**\n\t * Request 1\n\t * This is the function to search for students\n\t *\t\n\t *\thttp://localhost:8080/webapi/students\n\t * @param firstname\n\t * @return the list of student profiles matching the search fields. 200 OK else 500\n\t */\n@POST\n\t@Path(\"students\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\t@Produces(MediaType.APPLICATION_JSON)\n\tpublic Response searchStudent(ParamsObject input){\n\t\tMap<String,List<String>> map = new HashMap<String,List<String>>();\n\t\tArrayList<Students> studentRecords = new ArrayList<Students>();\n\t\tJSONArray resultArray = new JSONArray();\n\t\tJSONObject finalResult = new JSONObject();\n\t\tint total = -1;\n\t\tint begin = 1;\n\t\tint end = 20;\n\ttry{\n\t\tif (input.getFirstname()!=null){\n\t\t\tSystem.out.println(\"got firstname\"+input.getFirstname());\n\t\t\tArrayList<String> firstnameList = new ArrayList<String>();\n\t\t\tfirstnameList.add(input.getFirstname());\n\t\t\tmap.put(\"firstName\",firstnameList);\n\t\t}\n\t\tif (input.getLastname()!=null){\n\t\t\tArrayList<String> lastnameList = new ArrayList<String>();\n\t\t\tlastnameList.add(input.getLastname());\n\t\t\tmap.put(\"lastName\",lastnameList);\n\t\t}\n\t\tif (input.getEmail()!=null){\n\t\t\tArrayList<String> emailList = new ArrayList<String>();\n\t\t\temailList.add(input.getEmail());\n\t\t\tmap.put(\"email\",emailList);\n\t\t}\n\t\tif (input.getDegreeyear()!=null){\n\t\t\tArrayList<String> degreeyearList = new ArrayList<String>();\n\t\t\tdegreeyearList.add(input.getDegreeyear());\n\t\t\tmap.put(\"expectedLastYear\",degreeyearList);\n\t\t}\n\t\tif (input.getEnrollmentstatus()!=null){\n\t\t\tArrayList<String> enrollmentstatusList = new ArrayList<String>();\n\t\t\tenrollmentstatusList.add(input.getEnrollmentstatus());\n\t\t\tmap.put(\"enrollmentStatus\",enrollmentstatusList);\n\t\t}\n\t\tif (input.getCampus()!=null){\n\t\t\tArrayList<String> campusList = new ArrayList<String>();\n\t\t\tcampusList.add(input.getCampus());\n\t\t\tmap.put(\"campus\",campusList);\n\t\t}\n\t\tif (input.getCompany()!=null){\n\t\t\tArrayList<String> companyList = new ArrayList<String>();\n\t\t\tcompanyList.add(input.getCompany());\n\t\t\tmap.put(\"companyName\",companyList);\n\t\t}\n\t\tif (input.getNeuid()!=null){\n\t\t\tArrayList<String> neuIdList = new ArrayList<String>();\n\t\t\tneuIdList.add(input.getNeuid());\n\t\t\tmap.put(\"neuId\",neuIdList);\n\t\t}\n\t\tif (input.getUndergradmajor()!=null){\n\t\t\tArrayList<String> undergradmajor = new ArrayList<String>();\n\t\t\tundergradmajor.add(input.getUndergradmajor());\n\t\t\tmap.put(\"majorName\",undergradmajor);\n\t\t}\n\t\tif (input.getNuundergrad()!=null){\n\t\t\tArrayList<String> nuundergrad = new ArrayList<String>();\n\t\t\tnuundergrad.add(input.getUndergradmajor());\n\t\t\tmap.put(\"institutionName\",nuundergrad);\n\t\t}\n\t\tif (input.getCoop()!=null){\n\t\t\tArrayList<String> coop = new ArrayList<String>();\n\t\t\tcoop.add(input.getCoop());\n\t\t\tmap.put(\"companyName\",coop);\n\t\t}\n\t\tif (input.getGender()!=null){\n\t\t\tArrayList<String> gender = new ArrayList<String>();\n\t\t\tgender.add(input.getGender());\n\t\t\tmap.put(\"gender\",gender);\n\t\t}\n\t\tif (input.getRace()!=null){\n\t\t\tArrayList<String> race = new ArrayList<String>();\n\t\t\trace.add(input.getRace());\n\t\t\tmap.put(\"race\",race);\n\t\t}\n\t\tif (input.getBeginindex()!=null){\n\t\t\tbegin = Integer.valueOf(input.getBeginindex());\n\t\t}\n\t\tif (input.getEndindex()!=null){\n\t\t\tend = Integer.valueOf(input.getEndindex());\n\t\t}\n\t\tstudentRecords = (ArrayList<Students>) studentDao.getAdminFilteredStudents(map, begin, end);\n\t\ttotal = studentDao.getAdminFilteredStudentsCount(map);\n\t\t\n\t\tfor(Students st : studentRecords) {\n\t\t\tJSONObject studentJson = new JSONObject();\n\t\t\tJSONObject eachStudentJson = new JSONObject(st);\n\t\t\tjava.util.Set<String> keys = eachStudentJson.keySet();\n\t\t\tfor(int i=0;i<keys.toArray().length; i++){\n\t\t\t\tstudentJson.put(((String) keys.toArray()[i]).toLowerCase(), eachStudentJson.get((String) keys.toArray()[i]));\n\t\t\t}\n\t\t\tstudentJson.put(\"notes\",administratorNotesDao.getAdministratorNoteRecordByNeuId(studentJson.get(\"neuid\").toString()));\n\t\t\tresultArray.put(studentJson);\n\t\t}\n\t\tfinalResult.put(\"students\", resultArray);\n\t\tfinalResult.put(\"beginindex\", begin);\n\t\tfinalResult.put(\"endindex\", end);\n\t\tfinalResult.put(\"totalcount\", total);\n\t\t\n\t\t}\n\t\tcatch(Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(\"please check the request.\").build();\n\t\t}\n\t\treturn Response.status(Response.Status.OK).entity(finalResult.toString()).build();\n\t}"} {"path":"downloaded/Admin.java","method_name":"getStudentProfile","content":"/**\n\t * Request 2\n\t * This is the function to retrieve a student details based on nuid.\n\t *\t\n\t *\thttp://localhost:8080/webapi/students/090\n\t * @param nuid\n\t * @return the student details matching the nuid. 200 OK else 404\n\t */\n@GET\n\t@Path(\"students/{nuid}\")\n\t@Produces(MediaType.APPLICATION_JSON)\n\tpublic Response getStudentProfile(@PathParam(\"nuid\") String nuid){\n\t\tif(!studentDao.ifNuidExists(nuid)){\n\t\t\treturn Response.status(Response.Status.NOT_FOUND).entity(\"No Student record exists with given ID\").build();\n\t\t} else {\n\t\t\tStudents studentRecord = studentDao.getStudentRecord(nuid);\n\t\t\tJSONObject jsonObj = new JSONObject(studentRecord);\n\t\t\tArrayList<WorkExperiences> workEx = (ArrayList<WorkExperiences>) workExperiencesDao.getWorkExperiencesByNeuId(nuid);\n\t\t\tjsonObj.put(\"company\", workEx);\n\t\t\tArrayList<ElectivesAdmin> electives = (ArrayList<ElectivesAdmin>) electiveDao.getElectivesByNeuId(nuid);\n\t\t\tjsonObj.put(\"courses\", electives);\n\t\t\tList<ExtraExperiences> coop = extraExperiencesDao.getExtraExperiencesByNeuId(nuid);\n\t\t\tjsonObj.put(\"coopexperience\", coop);\n\t\t\tjsonObj.put(\"notes\",administratorNotesDao.getAdministratorNoteRecordByNeuId(nuid));\n\t\t\treturn Response.status(Response.Status.OK).entity(jsonObj.toString()).build();\n\t\t}\n\t}"} {"path":"downloaded/Admin.java","method_name":"getGenderRatio","content":"/**\n\t * Request 3\n\t * This is the function to get the gender ratio counts per year.\n\t *\t\n\t *\thttp://localhost:8080/webapi/analytics/gender-ratio\n\t * @param \n\t * @return the gender ratio is returned as a list of years with counts 200 OK else 400\n\t * @throws SQLException \n\t */\n@POST\n\t@Path(\"analytics/gender-ratio\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\t@Produces(MediaType.APPLICATION_JSON)\n\tpublic Response getGenderRatio(ParamsObject input) throws SQLException{\n\t\tList<GenderRatio> ratio = new ArrayList<GenderRatio>();\n\t\tif (input.getCampus()!=null){\n\t\t\ttry{\n\t\t\t\tratio = genderRatioDao.getYearlyGenderRatio(Campus.valueOf(input.getCampus().toUpperCase()));\n\t\t\t} catch(Exception e){\n\t\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"campus doesn't exist\").build();\n\t\t\t}\n\t\t} else {\n\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"campus field cannot be null\").build();\n\t\t}\n\t\treturn Response.status(Response.Status.OK).entity(ratio).build();\n\t}"} {"path":"downloaded/Admin.java","method_name":"getTopBachelorDegree","content":"/**\n\t * Request 4\n\t * This is the function to get the list of top 10 bachelor degrees.\n\t *\t\n\t *\thttp://localhost:8080/webapi/analytics/top-bachelor-degrees\n\t * @param \n\t * @return the list of top 10 bachelor degrees and number of students 200 OK else 400\n\t * @throws SQLException \n\t * \n\t */\n@POST\n\t@Path(\"analytics/top-bachelor-degrees\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\t@Produces(MediaType.APPLICATION_JSON)\n\tpublic Response getTopBachelorDegree(ParamsObject input) throws SQLException{\n\t\tList<TopBachelor> degrees = new ArrayList<TopBachelor>();\n\t\tif (input.getCampus()!=null && input.getYear()!=null){\n\t\t\ttry{\n\t\t\t\tdegrees = priorEducationsDao.getTopTenBachelors(Campus.valueOf(input.getCampus().toUpperCase()),Integer.valueOf(input.getYear()));\n\t\t\t} catch(Exception e){\n\t\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"campus doesn't exist or year should be integer.\").build();\n\t\t\t}\n\t\t} else if (input.getCampus()!=null && input.getYear()==null){\n\t\t\ttry{\n\t\t\t\tdegrees = priorEducationsDao.getTopTenBachelors(Campus.valueOf(input.getCampus().toUpperCase()),null);\n\t\t\t} catch(Exception e){\n\t\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"campus doesn't exist.\").build();\n\t\t\t}\n\t\t} else if (input.getCampus()==null && input.getYear()!=null){\n\t\t\ttry{\n\t\t\t\tdegrees = priorEducationsDao.getTopTenBachelors(null,Integer.valueOf(input.getYear()));\n\t\t\t} catch(Exception e){\n\t\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"campus doesn't exist or year should be integer.\").build();\n\t\t\t}\n\t\t} else if (input.getCampus()==null && input.getYear()==null){\n\t\t\tdegrees = priorEducationsDao.getTopTenBachelors(null,null);\n\t\t}\n\t\treturn Response.status(Response.Status.OK).entity(degrees).build();\n\t}"} {"path":"downloaded/Admin.java","method_name":"getTopEmployers","content":"/**\n\t * Request 5\n\t * This is the function to get a list of the top 10 employers.\n\t *\t\n\t *\thttp://localhost:8080/webapi/analytics/top-employers\n\t * @param \n\t * @return the list of top 10 employers and number of students 200 OK else 400\n\t * @throws SQLException \n\t * \n\t */\n@POST\n\t@Path(\"analytics/top-employers\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\t@Produces(MediaType.APPLICATION_JSON)\n\tpublic Response getTopEmployers(ParamsObject input) throws SQLException{\n\t\tList<TopEmployer> employers = new ArrayList<TopEmployer>();\n\t\tif (input.getCampus()!=null && input.getYear()!=null){\n\t\t\ttry{\n\t\t\t\temployers = workExperiencesDao.getTopTenEmployers(Campus.valueOf(input.getCampus().toUpperCase()),Integer.valueOf(input.getYear()));\n\t\t\t} catch(Exception e){\n\t\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"campus doesn't exist or year should be integer.\").build();\n\t\t\t}\n\t\t} else if (input.getCampus()!=null && input.getYear()==null){\n\t\t\ttry{\n\t\t\t\temployers = workExperiencesDao.getTopTenEmployers(Campus.valueOf(input.getCampus().toUpperCase()),null);\n\t\t\t} catch(Exception e){\n\t\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"campus doesn't exist.\").build();\n\t\t\t}\n\t\t}else if (input.getCampus()==null && input.getYear()!=null){\n\t\t\ttry{\n\t\t\t\temployers = workExperiencesDao.getTopTenEmployers(null,Integer.valueOf(input.getYear()));\n\t\t\t} catch(Exception e){\n\t\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"campus doesn't exist.\").build();\n\t\t\t}\n\t\t} else if (input.getCampus()==null && input.getYear()==null){\n\t\t\temployers = workExperiencesDao.getTopTenEmployers(null,null);\n\t\t} \n\t\treturn Response.status(Response.Status.OK).entity(employers).build();\n\t}"} {"path":"downloaded/Admin.java","method_name":"getTopElectives","content":"/**\n\t * Request 6\n\t * This is the function to get a list of the top 10 electives.\n\t *\t\n\t *\thttp://localhost:8080/webapi/aanalytics/top-electives\n\t * @param \n\t * @return the list of top 10 electives and number of students 200 OK else 400\n\t * @throws SQLException \n\t * \n\t */\n@POST\n\t@Path(\"analytics/top-electives\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\t@Produces(MediaType.APPLICATION_JSON)\n\tpublic Response getTopElectives(ParamsObject input) throws SQLException{\n\t\tList<TopElective> electives = new ArrayList<TopElective>();\n\t\tif (input.getCampus()!=null && input.getYear()!=null){\n\t\t\ttry{\n\t\t\t\telectives = electivesDao.getTopTenElectives(Campus.valueOf(input.getCampus().toUpperCase()),Integer.valueOf(input.getYear()));\n\t\t\t} catch(Exception e){\n\t\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"campus doesn't exist or year should be integer.\").build();\n\t\t\t}\n\t\t} else if (input.getCampus()!=null && input.getYear()==null){\n\t\t\ttry{\n\t\t\t\telectives = electivesDao.getTopTenElectives(Campus.valueOf(input.getCampus().toUpperCase()),null);\n\t\t\t} catch(Exception e){\n\t\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"campus doesn't exist.\").build();\n\t\t\t}\n\t\t} else if (input.getCampus()==null && input.getYear()!=null){\n\t\t\ttry{\n\t\t\t\telectives = electivesDao.getTopTenElectives(null,Integer.valueOf(input.getYear()));\n\t\t\t} catch(Exception e){\n\t\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"year should be integer.\").build();\n\t\t\t}\n\t\t} else if (input.getCampus()==null && input.getYear()==null){\n\t\t\telectives = electivesDao.getTopTenElectives(null,null);\n\t\t}\n\t\treturn Response.status(Response.Status.OK).entity(electives).build();\n\t}"} {"path":"downloaded/Admin.java","method_name":"getCoopStudents","content":"/**\n\t * Request 7\n\t * This is the function to get the list of students,companies worked for as coop.\n\t *\t\n\t *\thttp://localhost:8080/webapi/analytics/coop-students\n\t * @param \n\t * @return the list student details , companies they worked for as coop 200 OK else 400\n\t * @throws SQLException \n\t * \n\t */\n@POST\n\t@Path(\"analytics/coop-students\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\t@Produces(MediaType.APPLICATION_JSON)\n\tpublic Response getCoopStudents(ParamsObject input) throws SQLException{\n\t\tList<StudentCoopList> coopStudentsList = new ArrayList<StudentCoopList>();\n\t\tif (input.getCampus()!=null && input.getYear()!=null){\n\t\t\ttry{\n\t\t\t\tcoopStudentsList = workExperiencesDao.getStudentCoopCompanies(Campus.valueOf(input.getCampus().toUpperCase()),Integer.valueOf(input.getYear()));\n\t\t\t} catch(Exception e){\n\t\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"campus doesn't exist or year should be integer.\").build();\n\t\t\t}\n\t\t} else if (input.getCampus()!=null && input.getYear()==null){\n\t\t\ttry{\n\t\t\t\tcoopStudentsList = workExperiencesDao.getStudentCoopCompanies(Campus.valueOf(input.getCampus().toUpperCase()),null);\n\t\t\t} catch(Exception e){\n\t\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"campus doesn't exist.\").build();\n\t\t\t}\n\t\t} else if (input.getCampus()==null){\n\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"Campus cannot be null.\").build();\n\t\t}\n\t\treturn Response.status(Response.Status.OK).entity(coopStudentsList).build();\n\t}"} {"path":"downloaded/Admin.java","method_name":"getStudentsWorkingForACompany","content":"/**\n\t * Request 8 \n\t * This is a function for retrieving the students working in a given company\n\t * \n\t * http://localhost:8080/webapi/analytics/company\n\t * @param params\n\t * @return the list student details working for a company 200 OK else 400\n\t */\n@POST\n\t@Path(\"/analytics/company\")\n\tpublic Response getStudentsWorkingForACompany(ParamsObject input){\n\t\tList<StudentBasicInfo> studentsList = new ArrayList<StudentBasicInfo>();\n\t\tif (input.getCampus()!=null && input.getCompany()!=null && input.getYear()!=null){\n\t\t\ttry{\n\t\t\t\tstudentsList = workExperiencesDao.getStudentsWorkingInACompany(Campus.valueOf(input.getCampus().toUpperCase()),Integer.valueOf(input.getYear()),input.getCompany());\n\t\t\t} catch(Exception e){\n\t\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"campus doesn't exist or year should be integer.\").build();\n\t\t\t}\n\t\t} else if (input.getCampus()!=null && input.getCompany()!=null && input.getYear()==null){\n\t\t\ttry{\n\t\t\t\tstudentsList = workExperiencesDao.getStudentsWorkingInACompany(Campus.valueOf(input.getCampus().toUpperCase()),null,input.getCompany());\n\t\t\t} catch(Exception e){\n\t\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"campus doesn't exist.\").build();\n\t\t\t}\n\t\t} else if (input.getCampus()==null || input.getCompany()==null){\n\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"Campus and Company cannot be null.\").build();\n\t\t}\n\n\t\treturn Response.status(Response.Status.OK).\n\t\t\t\tentity(studentsList).build();  \n\t}"} {"path":"downloaded/Admin.java","method_name":"getStudentWorkingFullTime","content":"/**\n\t * Request 9\n\t * This is a function for retrieving the students working as full time\n\t * \n\t * http://localhost:8080/webapi/analytics/working\n\t * @param params\n\t * @return the list student details and company they are working for. 200 OK else 400\n\t */\n@POST\n\t@Path(\"/analytics/working\")\n\tpublic Response getStudentWorkingFullTime(ParamsObject input){\n\t\tList<StudentCoopList> studentsList = new ArrayList<StudentCoopList>();\n\t\tif (input.getCampus()!=null && input.getYear()!=null){\n\t\t\ttry{\n\t\t\t\tstudentsList = workExperiencesDao.\n\t\t\t\t\t\tgetStudentCurrentCompanies(Campus.valueOf(input.getCampus().toUpperCase()),Integer.valueOf(input.getYear()));\n\t\t\t} catch(Exception e){\n\t\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"campus doesn't exist or year should be integer.\").build();\n\t\t\t}\n\t\t} else if (input.getCampus()!=null && input.getYear()==null){\n\t\t\ttry{\n\t\t\t\tstudentsList = workExperiencesDao.\n\t\t\t\t\t\tgetStudentCurrentCompanies(Campus.valueOf(input.getCampus().toUpperCase()),null);\n\t\t\t} catch(Exception e){\n\t\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"campus doesn't exist.\").build();\n\t\t\t}\n\t\t} else if (input.getCampus()==null){\n\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"Campus cannot be null.\").build();\n\t\t}\n\t\treturn Response.status(Response.Status.OK).\n\t\t\t\tentity(studentsList).build();  \n\t}"} {"path":"downloaded/Admin.java","method_name":"getStudentundergradInstitutuins","content":"/**\n\t * Request 10\n\t * This is a function for retrieving the undergrad institutions of all the students\n\t * \n\t * http://localhost:8080/webapi/analytics/undergrad-institutions\n\t * @param params\n\t * @return the list of undergrad institution and count 200 OK else 400\n\t */\n@POST\n\t@Path(\"/analytics/undergrad-institutions\")\n\tpublic Response getStudentundergradInstitutuins(ParamsObject input){\n\t\tList<StudentBachelorInstitution> instList = new ArrayList<StudentBachelorInstitution>();\n\t\tif (input.getCampus()!=null && input.getYear()!=null){\n\t\t\ttry{\n\t\t\t\tinstList = priorEducationsDao.\n\t\t\t\t\t\tgetListOfBachelorInstitutions(Campus.valueOf(input.getCampus().toUpperCase()),Integer.valueOf(input.getYear()));\n\t\t\t} catch(Exception e){\n\t\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"campus doesn't exist or year should be integer.\").build();\n\t\t\t}\n\t\t} else if (input.getCampus()!=null && input.getYear()==null){\n\t\t\ttry{\n\t\t\t\tinstList = priorEducationsDao.\n\t\t\t\t\t\tgetListOfBachelorInstitutions(Campus.valueOf(input.getCampus().toUpperCase()),null);\n\t\t\t} catch(Exception e){\n\t\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"campus doesn't exist.\").build();\n\t\t\t}\n\t\t} else if (input.getCampus()==null){\n\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"Campus cannot be null.\").build();\n\t\t}\n\t\treturn Response.status(Response.Status.OK).\n\t\t\t\tentity(instList).build();  \n\t}"} {"path":"downloaded/Admin.java","method_name":"updateNote","content":"/**\n\t * Request 11\n\t * This is a function to update an existing student notes\n\t * \n\t * http://localhost:8080/webapi/notes/{noteid}\n\t * @param AdministratorNotes\n\t * @return 200 if notes updated successfully else return 404, 500\n\t */\n@PUT\n\t@Path(\"/notes/{noteid}\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\t@Produces(MediaType.APPLICATION_JSON)\n\tpublic Response updateNote(AdministratorNotes input,@PathParam(\"noteid\") String noteid){\n\t\ttry{\n\t\t\tif(administratorNotesDao.updateAdministratorNote(input)){\n\t\t\t\treturn Response.status(Response.Status.OK).\n\t\t\t\t\t\tentity(\"note updated successfully\").build();\n\t\t\t}\n\t\t\t} catch (Exception e){\n\t\t\t\treturn Response.status(Response.Status.NOT_FOUND).entity(\"Please check the note id\").build();\n\t\t\t}\n\t\treturn Response.status(Response.Status.INTERNAL_SERVER_ERROR).\n\t\t\t\tentity(\"note updation failed\").build();\n\t}"} {"path":"downloaded/Admin.java","method_name":"createNote","content":"/**\n\t * Request 12\n\t * This is a function to create a student notes\n\t * \n\t * http://localhost:8080/webapi/{adminneuid}/notes\n\t * @param AdministratorNotes\n\t * @return 200 if notes created successfully else return 400, 404\n\t */\n@POST\n\t@Path(\"/{adminneuid}/notes\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\t@Produces(MediaType.APPLICATION_JSON)\n\tpublic Response createNote(AdministratorNotes input,@PathParam(\"adminneuid\") String adminneuid){\n\t\ttry{\n\t\t\tAdministrators admin = administratorsDao.getAdministratorRecord(adminneuid);\n\t\t\tif(admin == null){\n\t\t\t\treturn Response.status(Response.Status.NOT_FOUND).\n\t\t\t\t\t\tentity(\"Please check the administrator NEUID\").build();\n\t\t\t}\n\t\t\tAdministratorNotes note = administratorNotesDao.addAdministratorNoteRecord(input);\n\t\t\treturn Response.status(Response.Status.OK).\n\t\t\t\t\t\tentity(\"note created\").build();\n\t\t\t} catch (Exception e){\n\t\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"Please check the request\").build();\n\t\t\t}\n\t}"} {"path":"downloaded/Admin.java","method_name":"deleteNote","content":"/**\n\t * Request 13\n\t * This is a function to DELETE a student notes\n\t * \n\t * http://localhost:8080/webapi/notes/{adminnoteid}\n\t * @param \n\t * @return 200 if notes deleted successfully else return 400, 406\n\t */\n@DELETE\n\t@Path(\"/notes/{adminnoteid}\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\t@Produces(MediaType.APPLICATION_JSON)\n\tpublic Response deleteNote(@PathParam(\"adminnoteid\") String adminnoteid){\n\t\ttry{\n\t\t\tif(administratorNotesDao.deleteAdministratorNoteRecord(Integer.valueOf(adminnoteid))){\n\t\t\t\treturn Response.status(Response.Status.OK).\n\t\t\t\t\t\tentity(\"note deleted successfully\").build();\n\t\t\t}\n\t\t\t} catch (Exception e){\n\t\t\t\treturn Response.status(Response.Status.NOT_ACCEPTABLE).entity(\"Please check the request\").build();\n\t\t\t}\n\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(\"Please check the request\").build();\n\t}"} {"path":"downloaded/Admin.java","method_name":"createPassword","content":"/**\n\t * Request 14\n\t * This function creates the password for admin when they reset their password\n\t * \n\t * @param passwordCreateObject\n\t * @return 200 if password changed successfully else return 400,500\n\t */\n@POST\n\t@Path(\"/password-create\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\t@Produces(MediaType.APPLICATION_JSON)\n\tpublic Response createPassword(PasswordCreateObject passwordCreateObject){\n\t\tString email = passwordCreateObject.getEmail();\n\t\tString password = passwordCreateObject.getPassword();\n\t\tString registrationKey = passwordCreateObject.getRegistrationKey();\n\t\tSystem.out.println(email + password + registrationKey); \n\n\t\t// before create password, a student login should exist\n\t\tAdminLogins adminLoginsExisting = adminLoginsDao.findAdminLoginsByEmail(email); \n\t\tif(adminLoginsExisting == null) {\n\t\t\treturn Response.status(Response.Status.BAD_REQUEST).\n\t\t\t\t\tentity(\"Invalid Admin details. Admin does not exist\" ).build();\n\t\t}\n\n\t\tString databaseRegistrationKey = adminLoginsExisting.getRegistrationKey();\n\t\tTimestamp databaseTimestamp = adminLoginsExisting.getKeyExpiration();\n\n\t\t// check if the entered registration key matches \n\t\tif((databaseRegistrationKey.equals(registrationKey))){\n\n\t\t\t// if registration key matches, then check if its valid or not\n\t\t\tTimestamp currentTimestamp = new Timestamp(System.currentTimeMillis());\n\n\t\t\t// check if the database time is after the current time\n\t\t\tif(databaseTimestamp.after(currentTimestamp)){\n\t    \t\tString saltnewStr = email.substring(0, email.length()/2);\n\t    \t\tString setPassword = password+saltnewStr;\n\t            String hashedPassword = SCryptUtil.scrypt(setPassword, 16, 16, 16);\n\t\t\t\tadminLoginsExisting.setAdminPassword(hashedPassword);\n\t\t\t\tadminLoginsExisting.setConfirmed(true);\n\t\t\t\tboolean adminLoginUpdatedWithPassword = adminLoginsDao.updateAdminLogin(adminLoginsExisting);\n\t\t\t\tif(adminLoginUpdatedWithPassword) {\n\t\t\t\t\t\n\t\t\t\t\treturn Response.status(Response.Status.OK).\n\t\t\t\t\t\t\tentity(\"Congratulations Password Reset successfully for Admin!\").build();\n\t\t\t\t} else {\n\t\t\t\t\treturn Response.status(Response.Status.INTERNAL_SERVER_ERROR).\n\t\t\t\t\t\t\tentity(\"Database exception thrown\" ).build();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn Response.status(Response.Status.OK).\n\t\t\t\t\t\tentity(\" Registration key expired!\" ).build();\n\t\t\t}\n\t\t} else {\n\t\t\treturn Response.status(Response.Status.BAD_REQUEST).\n\t\t\t\t\tentity(\"Invalid registration key\" ).build();\n\t\t}\n\t}"} {"path":"downloaded/Admin.java","method_name":"loginUser","content":"/**\n\t * Request 15\n\t * This is a function to login using admin email and password\n\t * \n\t * http://localhost:8080/webapi/login\n\t * @param passwordChangeObject\n\t * @return the token if logged in successfully 200 OK else 404,401,400,500\n\t */\n@POST\n\t@Path(\"/login\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\t@Produces(MediaType.APPLICATION_JSON)\n\tpublic Response loginUser(@Context HttpServletRequest request,LoginObject loginInput){\n\t\tAdminLogins adminLogins = adminLoginsDao.findAdminLoginsByEmail(loginInput.getUsername());\n\t\tif(adminLogins == null){\n\t\t\treturn Response.status(Response.Status.NOT_FOUND).\n\t\t\t\t\tentity(\"User doesn't exist: \" + loginInput.getUsername()).build();\n\t\t}\n\n        boolean matched = false;\n        try{\n        \tString reqPass = loginInput.getPassword();\n    \t\tString saltStr = loginInput.getUsername().substring(0, loginInput.getUsername().length()/2);\n    \t\tString originalPassword = reqPass+saltStr;\n        \tmatched = SCryptUtil.check(originalPassword,adminLogins.getAdminPassword());\n        } catch (Exception e){\n        \treturn Response.status(Response.Status.UNAUTHORIZED).\n\t\t\t\t\tentity(\"Incorrect Password\").build();\n        }\n\n\t\tif(matched){\n\t\t\ttry {\n\t\t\t\tJSONObject jsonObj = new JSONObject();\n\t\t\t\tTimestamp keyGeneration = new Timestamp(System.currentTimeMillis());\n\t\t\t\tTimestamp keyExpiration = new Timestamp(System.currentTimeMillis()+15*60*1000);\n\t\t\t\tadminLogins.setLoginTime(keyGeneration);\n\t\t\t\tadminLogins.setKeyExpiration(keyExpiration);\n\t\t\t\tadminLoginsDao.updateAdminLogin(adminLogins);\n\t\t\t\tString ip = request.getRemoteAddr();\n\t\t\t\tJsonWebEncryption senderJwe = new JsonWebEncryption();\n\t\t\t\tsenderJwe.setPlaintext(adminLogins.getEmail()+\"*#*\"+ip+\"*#*\"+keyGeneration.toString());\n\t\t\t\tsenderJwe.setAlgorithmHeaderValue(KeyManagementAlgorithmIdentifiers.DIRECT);\n\t\t\t\tsenderJwe.setEncryptionMethodHeaderParameter(ContentEncryptionAlgorithmIdentifiers.AES_128_CBC_HMAC_SHA_256);\n\t\t\t\t\n\t\t\t\tString secretKey = ip+\"sEcR3t_nsA-K3y\";\n\t\t\t\tbyte[] key = secretKey.getBytes();\n\t\t\t\tkey = Arrays.copyOf(key, 32);\n\t\t\t\tAesKey keyMain = new AesKey(key);\n\t\t\t\tsenderJwe.setKey(keyMain);\n\t\t\t\tString compactSerialization = senderJwe.getCompactSerialization();\n\t\t\t\tjsonObj.put(\"token\", compactSerialization);\n\t\t\t\tAdministrators admin = administratorsDao.findAdministratorByEmail(loginInput.getUsername());\n\t\t\t\tjsonObj.put(\"id\", admin.getAdministratorNeuId());\n\t\t\t\t\n\t\t\t\treturn Response.status(Response.Status.OK).\n\t\t\t\t\t\tentity(jsonObj.toString()).build();\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\treturn Response.status(Response.Status.INTERNAL_SERVER_ERROR).\n\t\t\t\t\t\tentity(\"Internal Server Error\").build();\n\t\t\t}\n\t\t}else{\n\t\t\treturn Response.status(Response.Status.UNAUTHORIZED).\n\t\t\t\t\tentity(\"Incorrect Password\").build();\n\t\t}\n\t}"} {"path":"downloaded/Admin.java","method_name":"logoutUser","content":"/**\n\t * Request 16\n\t * This is a function to logout\n\t * \n\t * http://localhost:8080/webapi/logout\n\t * @param \n\t * @return 200 OK else 404,500\n\t */\n@POST\n\t@Path(\"/logout\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\t@Produces(MediaType.APPLICATION_JSON)\n\tpublic Response logoutUser(@Context HttpServletRequest request,LoginObject loginInput){\n\t\tAdminLogins adminLogins = adminLoginsDao.findAdminLoginsByEmail(loginInput.getUsername());\n\t\tif(adminLogins == null){\n\t\t\treturn Response.status(Response.Status.NOT_FOUND).\n\t\t\t\t\tentity(\"User doesn't exist: \" + loginInput.getUsername()).build();\n\t\t}\n\t\ttry{\n\t\t\tTimestamp keyExpiration = new Timestamp(System.currentTimeMillis());\n\t\t\tadminLogins.setKeyExpiration(keyExpiration);\n\t\t\tadminLoginsDao.updateAdminLogin(adminLogins);\n\t\t}\n\t\tcatch (Exception e){\n\t\t\treturn Response.status(Response.Status.INTERNAL_SERVER_ERROR).\n\t\t\t\t\tentity(\"Internal Server Error\").build();\t\n\t\t}\n\t\treturn Response.status(Response.Status.OK).\n\t\t\t\tentity(\"Logged Out Successfully\").build();\n\t}"} {"path":"downloaded/Admin.java","method_name":"changeUserPassword","content":"/**\n\t * Request 17\n\t * This is a function to change an existing admin's password\n\t * \n\t * http://localhost:8080/webapi/password-change\n\t * @param passwordChangeObject\n\t * @return 200 if password changed successfully else return 404,400,401\n\t */\n@POST\n\t@Path(\"/password-change\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\t@Produces(MediaType.APPLICATION_JSON)\n\tpublic Response changeUserPassword(PasswordChangeObject passwordChangeObject){\n\t\tAdminLogins adminLogins = adminLoginsDao.findAdminLoginsByEmail(passwordChangeObject.getEmail());\n\n\t\tif(adminLogins == null){\n\t\t\treturn Response.status(Response.Status.NOT_FOUND).\n\t\t\t\t\tentity(\"Email doesn't exist: \" + passwordChangeObject.getEmail()).build();\n\t\t}\n\n        boolean matched = false;\n        try{\n        \tString reqPass = passwordChangeObject.getOldPassword();\n    \t\tString saltStr = passwordChangeObject.getEmail().substring(0, passwordChangeObject.getEmail().length()/2);\n    \t\tString originalPassword = reqPass+saltStr;\n        \tmatched = SCryptUtil.check(originalPassword,adminLogins.getAdminPassword());\n        } catch (Exception e){\n        \treturn Response.status(Response.Status.UNAUTHORIZED).\n\t\t\t\t\tentity(\"Incorrect Password\").build();\n        }\n        \n\t\tif(matched){\n\t\t\tString newPass = passwordChangeObject.getNewPassword();\n    \t\tString saltnewStr = passwordChangeObject.getEmail().substring(0, passwordChangeObject.getEmail().length()/2);\n    \t\tString updatePassword = newPass+saltnewStr;\n            String generatedSecuredPasswordHash = SCryptUtil.scrypt(updatePassword, 16, 16, 16);\n            adminLogins.setAdminPassword(generatedSecuredPasswordHash);\n\t\t\tadminLoginsDao.updateAdminLogin(adminLogins);\n\n\t\t\treturn Response.status(Response.Status.OK).\n\t\t\t\t\tentity(\"Password Changed Succesfully!\" ).build();\n\t\t}else{\n\t\t\treturn Response.status(Response.Status.BAD_REQUEST).\n\t\t\t\t\tentity(\"Incorrect Password: \").build();\n\t\t}\n\t}"} {"path":"downloaded/Admin.java","method_name":"e sendEmailForPasswordResetAdm","content":"/**\n\t * Request 18\n\t * This function sends email to admin’s northeastern ID to reset the password.\n\t * \n\t * @param adminEmail\n\t * @return 200 if password reset successfully else return 404,400,500\n\t \n\n\t@POST\n\t@Path(\"/password-reset\")\n\t@Consumes(MediaType.APPLICATION_JSON)\n\t@Produces(MediaType.APPLICATION_JSON)\n\tpublic Response sendEmailForPasswordResetAdmin(PasswordResetObject passwordResetObject){\n\t\tString adminEmail = passwordResetObject.getEmail();\n\t\tif (adminEmail == null){\n\t\t\t\treturn Response.status(Response.Status.BAD_REQUEST).\n\t\t\t\t\tentity(\"Email Id can't be null\").build();\n\t\t}else{\n\t\t\tAdminLogins adminLogins = adminLoginsDao.findAdminLoginsByEmail(adminEmail);\n\t\t\tif(adminLogins == null){\n\t\t\t\treturn Response.status(Response.Status.NOT_FOUND).\n\t\t\t\t\t\tentity(\"Email doesn't exist: \" + adminEmail).build();\n\t\t\t}\n\t\t\tif(adminLogins.isConfirmed() == false){\n\t\t\t\treturn Response.status(Response.Status.NOT_FOUND).\n\t\t\t\t\t\tentity(\"Password can't be reset....Please create password and register: \" + adminEmail).build();\n\t\t\t}\n\t\t\tString registrationKey = createRegistrationKey(); \n\t\t\tTimestamp keyExpirationTime = new Timestamp(System.currentTimeMillis()+ 15*60*1000);\n\t\t\tAdminLogins adminLoginsNew = new AdminLogins();\n\t\t\tadminLoginsNew.setEmail(adminEmail);\n\t\t\tadminLoginsNew.setAdminPassword(adminLogins.getAdminPassword()); \n\t\t\tadminLoginsNew.setLoginTime(adminLogins.getLoginTime()); \n\t\t\tadminLoginsNew.setRegistrationKey(registrationKey);\n\t\t\tadminLoginsNew.setKeyExpiration(keyExpirationTime);\n\t\t\tadminLoginsNew.setConfirmed(true);\n\n\t\t\tboolean adminLoginUpdated = adminLoginsDao.updateAdminLogin(adminLoginsNew);\n\t\t\tif(adminLoginUpdated) {\n\t\t\t\t// after generation, send email\n\t\t\t\tMailClient.sendPasswordResetEmail(adminEmail, registrationKey);\n\t\t\t\treturn Response.status(Response.Status.OK).\n\t\t\t\t\t\tentity(\"Password Reset link sent succesfully!\" ).build(); \n\t\t\t}\n\t\t\treturn Response.status(Response.Status.INTERNAL_SERVER_ERROR).\n\t\t\t\t\tentity(\"Something Went Wrong\" + adminEmail).build();\n\t\t}\n"} {"path":"downloaded/Admin.java","method_name":"g createRegistrationK","content":"/**\n\t * Request 18\n\t * This function sends email to admin’s northeastern ID to reset the password.\n\t * \n\t * @param adminEmail\n\t * @return 200 if password reset successfully else return 404,400,500\n\t \n\n\tprivate String createRegistrationKey() {\n\t\treturn UUID.randomUUID().toString();\n"} {"path":"downloaded/GamePlayAbstract.java","method_name":"playGameLoop","content":"/**\n     * Method to print Invalid message error if player wants to start playing the game\n     * before adding/removing the player\n     */\n@Override\n    public int playGameLoop() {\n        return 0;\n    }"} {"path":"downloaded/AgendaController.java","method_name":"tring generarActiv","content":"\n    /**\n     * Carga desde la base de datos y genera las actividades que se van a mostrar en el calendario,\n     * esto dependiendo de si se ha seleccionado ver la agenda de un usuario o una general con las\n     * citas de todos los usuarios.\n     * @return String nombre de la página o valor null\n     * @throws Exception Se genera si se produce un error al consultar la base de datos\n \n/\n    public String generarActividades(){\n         try{\n            List<Cita> listaCitas;\n            if(usuarioAgenda==null){\n                listaCitas = service.getCitaFindAll();\n            }else{\n                listaCitas = service.getCitaFindByUsuario(usuarioAgenda);\n                actividadRegistrar.setUsuario(usuarioAgenda);\n            }\n            List<CalendarActivity> listaActividades = new ArrayList();\n            \n            for(Cita cita : listaCitas){\n                CalendarProviderClinica prov = new CalendarProviderClinica(cita.getUsuario1().getIdUsuario()+\"\",\n                                                                           cita.getUsuario1().getNombre()+\" \"+\n                                                                           cita.getUsuario1().getPrimerApellido()+\" \"+\n                                                                           cita.getUsuario1().getSegundoApellido());\n                TimeType tt;\n                if(cita.getEstado().equals(\"ALLDAY\")){\n                    tt = CalendarActivity.TimeType.ALLDAY;\n                }else{\n                    tt = CalendarActivity.TimeType.TIME;\n                }\n                CalendarActivityClinica ca = new CalendarActivityClinica(cita.getIdCita(),\n                                                                         cita.getDescripcion(), \n                                                                         cita.getFechaInicio(), \n                                                                         cita.getFechaFin(), \n                                                                         tt,\n                                                                         prov);\n                ca.setUsuario(cita.getUsuario1());\n                ca.setPaciente(cita.getCuentapaciente3());\n                listaActividades.add(ca);\n            }\n            getModel().setListaActividades(listaActividades);\n            return null;\n        }catch(Exception ex){\n            FacesContext fc = FacesContext.getCurrentInstance();\n            fc.addMessage(null, new FacesMessage(\"Ha ocurrido un error al intentar cargar las citas. Error: \" + ex.getMessage()));\n            return null;\n        } "} {"path":"downloaded/AgendaController.java","method_name":"String agre","content":"\n\n    /**\n     * Registra todos los datos una nueva cita en la base de datos\n     * y la agrega en el modelo del calendario que se muestra en pantalla.\n     * @return String Nombre de la página o valor null\n     * @throws Exception Se genera si se presenta un error al intentar registrar en la base de datos\n\n*/\n    public String agregarCita() {\n        try{\n            if(inicioRegistrar.before(finRegistrar) || !inicioRegistrar.after(finRegistrar)){\n                setMensajeRegistrar(\"\");\n                \n                String tt;\n                if(this.isTodoElDia()){\n                    tt = \"ALLDAY\";\n                }else{\n                    tt = \"TIME\";\n                }\n                \n                Cita cita = new Cita();\n                cita.setIdCita((service.getCitaFindAllByTodo().size()+1)+\"\");\n                cita.setDescripcion(actividadRegistrar.getTitle());\n                cita.setEstado(tt);\n                \n                Timestamp timestampInicio = new Timestamp(inicioRegistrar.getTime());  \n                cita.setFechaInicio(timestampInicio);\n                \n                Timestamp timestampFin = new Timestamp(finRegistrar.getTime());  \n                cita.setFechaFin(timestampFin);\n                \n                cita.setHabilitado(true);\n                cita.setCuentapaciente3(actividadRegistrar.getPaciente());\n                cita.setProveedor(actividadRegistrar.getUsuario().getNombre()+\" \"+\n                                  actividadRegistrar.getUsuario().getSegundoApellido()+\" \"+\n                                  actividadRegistrar.getUsuario().getPrimerApellido());\n                cita.setUsuario1(actividadRegistrar.getUsuario());\n                \n                service.persistCita(cita);\n                service.commitTransaction();\n                \n                generarActividades();\n                \n                actividadRegistrar = new CalendarActivityClinica();\n                \n                return null;\n            }else{\n                setMensajeRegistrar(\"La fecha de inicio debe ser menor o igual a la final\");\n                return null;\n            }\n        }catch(Exception ex){\n            FacesContext fc = FacesContext.getCurrentInstance();\n            fc.addMessage(null, new FacesMessage(\"Ha ocurrido un error al intentar registrar una nueva cita. Error: \" + ex.getMessage()));\n            return null;\n        }"} {"path":"downloaded/AgendaController.java","method_name":" String ed","content":"\n\n    /**\n     * Registra todos los datos una nueva cita en la base de datos\n     * y la agrega en el modelo del calendario que se muestra en pantalla.\n     * @return String Nombre de la página o valor null\n     * @throws Exception Se genera si se presenta un error al intentar registrar en la base de datos\n\n */\n    public String editarCita() {\n        try{\n            if(inicioEditar.before(finEditar) || !inicioEditar.after(finEditar)){\n                \n            }else{\n                setMensajeEditar(\"La fecha de inicio debe ser menor o igual a la final\");\n            }\n            Cita cita = service.getCitaFindById(actividadEditar.getId()).get(0);\n            \n            String tt;\n            if(this.isTodoElDia()){\n                tt = \"ALLDAY\";\n            }else{\n                tt = \"TIME\";\n            }\n            cita.setDescripcion(actividadEditar.getTitle());\n            cita.setEstado(tt);\n            \n            Timestamp timestampInicio = new Timestamp(inicioEditar.getTime());  \n            cita.setFechaInicio(timestampInicio);\n            \n            Timestamp timestampFin = new Timestamp(finEditar.getTime());  \n            cita.setFechaFin(timestampFin);\n            \n            cita.setCuentapaciente3(actividadEditar.getPaciente());\n            cita.setProveedor(actividadEditar.getUsuario().getNombre()+\" \"+\n                              actividadEditar.getUsuario().getSegundoApellido()+\" \"+\n                              actividadEditar.getUsuario().getPrimerApellido());\n            cita.setUsuario1(actividadEditar.getUsuario());\n            \n            service.mergeCita(cita);\n            service.commitTransaction();\n            generarActividades();\n            return null;\n        }catch(Exception ex){\n            FacesContext fc = FacesContext.getCurrentInstance();\n            fc.addMessage(null, new FacesMessage(\"Ha ocurrido un error al intentar editar la actividad. Error: \" + ex.getMessage()));\n            return null;\n        "} {"path":"downloaded/AgendaController.java","method_name":"ic String el","content":"\n\n    /**\n     * Registra todos los datos una nueva cita en la base de datos\n     * y la agrega en el modelo del calendario que se muestra en pantalla.\n     * @return String Nombre de la página o valor null\n     * @throws Exception Se genera si se presenta un error al intentar registrar en la base de datos\n\n   */\n    public String eliminarCita() {\n        try{\n            Cita cita = service.getCitaFindById(actividadEditar.getId()).get(0);\n            cita.setHabilitado(false);\n            service.mergeCita(cita);\n            service.commitTransaction();\n            generarActividades();\n            return null;\n        }catch(Exception ex){\n            FacesContext fc = FacesContext.getCurrentInstance();\n            fc.addMessage(null, new FacesMessage(\"Ha ocurrido un error al intentar eliminar la cita. Error: \" + ex.getMessage()));\n            return null;\n      "} {"path":"downloaded/AgendaController.java","method_name":" DnDAction","content":"\n\n    /**\n     * Registra todos los datos una nueva cita en la base de datos\n     * y la agrega en el modelo del calendario que se muestra en pantalla.\n     * @return String Nombre de la página o valor null\n     * @throws Exception Se genera si se presenta un error al intentar registrar en la base de datos\n\n    */\n    public DnDAction handleDrop(DropEvent dropEvent) {\n        Transferable transferable = dropEvent.getTransferable();\n        CalendarDropSite dropSite = (CalendarDropSite)dropEvent.getDropSite();\n        Date dropSiteDate = dropSite.getDate();\n        CalendarActivity.TimeType timeType = dropSite.getTimeType();\n        \n        // Obtiene la actividad arrastrada\n        CalendarActivityClinica activity = (CalendarActivityClinica)transferable.getData(DataFlavor.getDataFlavor(CalendarActivity.class));\n        \n        // Obtener hora y minutos de fecha de inicio de la actividad\n        Calendar calStartDate = Calendar.getInstance();\n        calStartDate.setTime(activity.getStartDate(null));\n        int horaInicio = calStartDate.get(Calendar.HOUR);\n        int minutosInicio = calStartDate.get(Calendar.MINUTE);\n        \n        // Obtener hora y minutos e fecha fin de la actividad\n        Calendar calEndDate = Calendar.getInstance(); \n        calEndDate.setTime(activity.getEndDate(null));\n        int horaFin = calEndDate.get(Calendar.HOUR);\n        int minutosFin = calEndDate.get(Calendar.MINUTE);\n        \n        // Calcula la diferencia de días entre la fecha de inicio y la de fin\n        long delta = activity.getEndDate(null).getTime() - activity.getStartDate(null).getTime();\n        \n        // Setear hora y minutos de fecha inicio actividad\n        Calendar calActivityStartDate = Calendar.getInstance();\n        calActivityStartDate.setTime(dropSiteDate);\n        calActivityStartDate.set(Calendar.HOUR, horaInicio);\n        calActivityStartDate.set(Calendar.MINUTE, minutosInicio);\n        \n        // Setear hora y minutos de fecha fin actividad\n        Calendar calActivityEndDate = Calendar.getInstance();\n        calActivityEndDate.setTime(new Date(calActivityStartDate.getTime().getTime() + delta));\n        calActivityEndDate.set(Calendar.HOUR, horaFin);\n        calActivityEndDate.set(Calendar.MINUTE, minutosFin);\n        \n        Cita cita = service.getCitaFindById(activity.getId()).get(0);\n        \n        Timestamp timestampInicio = new Timestamp(calActivityStartDate.getTime().getTime());  \n        cita.setFechaInicio(timestampInicio);\n        Timestamp timestampFin = new Timestamp(calActivityEndDate.getTime().getTime());  \n        cita.setFechaFin(timestampFin);\n        \n        service.mergeCita(cita);\n        service.commitTransaction();\n        generarActividades();\n        \n        return DnDAction"} {"path":"downloaded/AgendaController.java","method_name":"blic boolean isPermiso","content":"\n\n    /**\n     * Registra todos los datos una nueva cita en la base de datos\n     * y la agrega en el modelo del calendario que se muestra en pantalla.\n     * @return String Nombre de la página o valor null\n     * @throws Exception Se genera si se presenta un error al intentar registrar en la base de datos\n\n      */\n    public boolean isPermisoAgendaClinica() {\n        for(Rolpermiso rp : LoginController.getUsuarioLogged().getRol1().getRolpermisoList()){\n            if(rp.getPermiso().getDescripcion().equals(\"CAgenda\")){\n                return true;\n            }\n        }\n        return"} {"path":"downloaded/AgendaController.java","method_name":"blic boolean isPermisoA","content":"\n\n    /**\n     * Registra todos los datos una nueva cita en la base de datos\n     * y la agrega en el modelo del calendario que se muestra en pantalla.\n     * @return String Nombre de la página o valor null\n     * @throws Exception Se genera si se presenta un error al intentar registrar en la base de datos\n\n\n     */\n    public boolean isPermisoAgendaPersonal() {\n        for(Rolpermiso rp : LoginController.getUsuarioLogged().getRol1().getRolpermisoList()){\n            if(rp.getPermiso().getDescripcion().equals(\"AAgenda\")){\n                return true;\n            }\n        }\n        return"} {"path":"downloaded/AgendaController.java","method_name":"ServiceFac","content":"\n\n    /**\n     * Registra todos los datos una nueva cita en la base de datos\n     * y la agrega en el modelo del calendario que se muestra en pantalla.\n     * @return String Nombre de la página o valor null\n     * @throws Exception Se genera si se presenta un error al intentar registrar en la base de datos\n\ne;\n    }\n\n    public JavaServiceFacade getService() {\n        return "} {"path":"downloaded/AgendaController.java","method_name":"rModelCl","content":"\n\n    /**\n     * Registra todos los datos una nueva cita en la base de datos\n     * y la agrega en el modelo del calendario que se muestra en pantalla.\n     * @return String Nombre de la página o valor null\n     * @throws Exception Se genera si se presenta un error al intentar registrar en la base de datos\n\nl;\n    }\n\n    public CalendarModelClinica getModel() {\n        retur"} {"path":"downloaded/AgendaController.java","method_name":"oviderClinic","content":"\n\n    /**\n     * Registra todos los datos una nueva cita en la base de datos\n     * y la agrega en el modelo del calendario que se muestra en pantalla.\n     * @return String Nombre de la página o valor null\n     * @throws Exception Se genera si se presenta un error al intentar registrar en la base de datos\n\nr;\n    }\n\n    public CalendarProviderClinica getProveedor() {\n        return pr"} {"path":"downloaded/AgendaController.java","method_name":"tivityClinica getActi","content":"\n\n    /**\n     * Registra todos los datos una nueva cita en la base de datos\n     * y la agrega en el modelo del calendario que se muestra en pantalla.\n     * @return String Nombre de la página o valor null\n     * @throws Exception Se genera si se presenta un error al intentar registrar en la base de datos\n\nr;\n    }\n\n    public CalendarActivityClinica getActividadRegistrar() {\n        return actividadRe"} {"path":"downloaded/AgendaController.java","method_name":"List<Usuario> ge","content":"\n\n    /**\n     * Registra todos los datos una nueva cita en la base de datos\n     * y la agrega en el modelo del calendario que se muestra en pantalla.\n     * @return String Nombre de la página o valor null\n     * @throws Exception Se genera si se presenta un error al intentar registrar en la base de datos\n\ns;\n    }\n\n    public List<Usuario> getListaUsuarios() {\n        return service.getUsuarioFi"} {"path":"downloaded/AgendaController.java","method_name":"ist<Paciente> get","content":"\n\n    /**\n     * Registra todos los datos una nueva cita en la base de datos\n     * y la agrega en el modelo del calendario que se muestra en pantalla.\n     * @return String Nombre de la página o valor null\n     * @throws Exception Se genera si se presenta un error al intentar registrar en la base de datos\n\ns;\n    }\n\n    public List<Paciente> getListaPacientes() {\n        return service.getPacienteFi"} {"path":"downloaded/AgendaController.java","method_name":"ublic boole","content":"\n\n    /**\n     * Registra todos los datos una nueva cita en la base de datos\n     * y la agrega en el modelo del calendario que se muestra en pantalla.\n     * @return String Nombre de la página o valor null\n     * @throws Exception Se genera si se presenta un error al intentar registrar en la base de datos\n\na;\n    }\n\n    public boolean isTodoElDia() {\n        return to"} {"path":"downloaded/AgendaController.java","method_name":"  public Date getI","content":"\n\n    /**\n     * Registra todos los datos una nueva cita en la base de datos\n     * y la agrega en el modelo del calendario que se muestra en pantalla.\n     * @return String Nombre de la página o valor null\n     * @throws Exception Se genera si se presenta un error al intentar registrar en la base de datos\n\nr;\n    }\n\n    public Date getInicioRegistrar() {\n        return inicioRe"} {"path":"downloaded/AgendaController.java","method_name":"  public Date g","content":"\n\n    /**\n     * Registra todos los datos una nueva cita en la base de datos\n     * y la agrega en el modelo del calendario que se muestra en pantalla.\n     * @return String Nombre de la página o valor null\n     * @throws Exception Se genera si se presenta un error al intentar registrar en la base de datos\n\nr;\n    }\n\n    public Date getFinRegistrar() {\n        return finRe"} {"path":"downloaded/AgendaController.java","method_name":"tivityClinica getA","content":"\n\n    /**\n     * Registra todos los datos una nueva cita en la base de datos\n     * y la agrega en el modelo del calendario que se muestra en pantalla.\n     * @return String Nombre de la página o valor null\n     * @throws Exception Se genera si se presenta un error al intentar registrar en la base de datos\n\nr;\n    }\n\n    public CalendarActivityClinica getActividadEditar() {\n        return activida"} {"path":"downloaded/AgendaController.java","method_name":"  public Date g","content":"\n\n    /**\n     * Registra todos los datos una nueva cita en la base de datos\n     * y la agrega en el modelo del calendario que se muestra en pantalla.\n     * @return String Nombre de la página o valor null\n     * @throws Exception Se genera si se presenta un error al intentar registrar en la base de datos\n\nr;\n    }\n\n    public Date getInicioEditar() {\n        return inici"} {"path":"downloaded/AgendaController.java","method_name":"  public Dat","content":"\n\n    /**\n     * Registra todos los datos una nueva cita en la base de datos\n     * y la agrega en el modelo del calendario que se muestra en pantalla.\n     * @return String Nombre de la página o valor null\n     * @throws Exception Se genera si se presenta un error al intentar registrar en la base de datos\n\nr;\n    }\n\n    public Date getFinEditar() {\n        return fi"} {"path":"downloaded/AgendaController.java","method_name":"ublic boolean isT","content":"\n\n    /**\n     * Registra todos los datos una nueva cita en la base de datos\n     * y la agrega en el modelo del calendario que se muestra en pantalla.\n     * @return String Nombre de la página o valor null\n     * @throws Exception Se genera si se presenta un error al intentar registrar en la base de datos\n\nr;\n    }\n\n    public boolean isTodoElDiaEditar() {\n        return todoElDi"} {"path":"downloaded/AgendaController.java","method_name":"public String getMe","content":"\n\n    /**\n     * Registra todos los datos una nueva cita en la base de datos\n     * y la agrega en el modelo del calendario que se muestra en pantalla.\n     * @return String Nombre de la página o valor null\n     * @throws Exception Se genera si se presenta un error al intentar registrar en la base de datos\n\nr;\n    }\n\n    public String getMensajeRegistrar() {\n        return mensajeRe"} {"path":"downloaded/AgendaController.java","method_name":"public String ge","content":"\n\n    /**\n     * Registra todos los datos una nueva cita en la base de datos\n     * y la agrega en el modelo del calendario que se muestra en pantalla.\n     * @return String Nombre de la página o valor null\n     * @throws Exception Se genera si se presenta un error al intentar registrar en la base de datos\n\nr;\n    }\n\n    public String getMensajeEditar() {\n        return mensaj"} {"path":"downloaded/AgendaController.java","method_name":"ublic Usuario ge","content":"\n\n    /**\n     * Registra todos los datos una nueva cita en la base de datos\n     * y la agrega en el modelo del calendario que se muestra en pantalla.\n     * @return String Nombre de la página o valor null\n     * @throws Exception Se genera si se presenta un error al intentar registrar en la base de datos\n\na;\n    }\n\n    public Usuario getUsuarioAgenda() {\n        return usuari"} {"path":"downloaded/TransplantDriver.java","method_name":"formatString","content":"/**\n     * A helper method that formats String inputs by ensuring that it follows proper capitalization.\n     * @param str The String inputs that need to be formatted.\n     * @return The formatted String.\n     */\npublic static String formatString(String str){\n        String[] arr = str.split(\" \");\n        String resultant = \"\";\n        for(int i = 0; i < arr.length;i++){\n            if(arr[i].length() == 1)\n                arr[i] = arr[i].toUpperCase();\n            else if(arr[i].length() == 0)\n                continue;\n            else{\n                arr[i] = Character.toUpperCase(arr[i].charAt(0)) + arr[i].substring(1);\n            }\n        }\n        for(String s : arr)\n            resultant += s + \" \";\n        return resultant.trim();\n    }"} {"path":"downloaded/AttributeResource.java","method_name":"teDto[","content":"/**\n     * 查询.\n     * 查询 Attributes\n */\n    @GetMapping\n    public AttributeStateDto[] getAll(@Specification(value = AttributeStateDto.class) HttpServletRequest request,\n                    @RequestParam(value = \"sort\", required = false) String sort,\n                    @RequestParam(value = \"fields\", required = false) String fields,\n                    @RequestParam(value = \"firstResult\", defaultValue = \"0\") Integer firstResult,\n                    @RequestParam(value = \"maxResults\", defaultValue = \"2147483647\") Integer maxResults,\n                    @RequestParam(value = \"filter\", required = false) String filter) {\n        try {\n        if (firstResult < 0) { firstResult = 0; }\n        if (maxResults == null || maxResults < 1) { maxResults = Integer.MAX_VALUE; }\n\n            Iterable<AttributeState> states = null; \n            CriterionDto criterion = null;\n            if (!StringHelper.isNullOrEmpty(filter)) {\n                criterion = JSON.parseObject(filter, CriterionDto.class);\n            } else {\n                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()\n                    .filter(kv -> AttributeResourceUtils.getFilterPropertyName(kv.getKey()) != null)\n                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));\n            }\n            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), \n                n -> (AttributeMetadata.aliasMap.containsKey(n) ? AttributeMetadata.aliasMap.get(n) : n));\n            states = attributeApplicationService.get(\n                c,\n                AttributeResourceUtils.getQuerySorts(request.getParameterMap()),\n                firstResult, maxResults);\n\n            AttributeStateDto.DtoConverter dtoConverter = new AttributeStateDto.DtoConverter();\n            if (StringHelper.isNullOrEmpty(fields)) {\n                dtoConverter.setAllFieldsReturned(true);\n            } else {\n                dtoConverter.setReturnedFieldsString(fields);\n            }\n            return dtoConverter.toAttributeStateDtoArray(states);\n\n        } catch (DomainError error) { logger.info(error.getMessage(), error); throw error; } catch (Exception ex) { String exMsg = \"[\" + UUID.randomUUID().toString() + \"] Exception caught.\"; logger.error(exMsg, ex); throw new RuntimeException(exMsg, ex);"} {"path":"downloaded/AttributeResource.java","method_name":"<Attrib","content":"/**\n     * 查询.\n     * 查询 Attributes\nributes\n     */\n    @GetMapping(\"_page\")\n    public Page<AttributeStateDto> getPage(@Specification(value = AttributeStateDto.class) HttpServletRequest request,\n                    @RequestParam(value = \"fields\", required = false) String fields,\n                    @RequestParam(value = \"page\", defaultValue = \"0\") Integer page,\n                    @RequestParam(value = \"size\", defaultValue = \"20\") Integer size,\n                    @RequestParam(value = \"filter\", required = false) String filter) {\n        try {\n            Integer firstResult = (page == null ? 0 : page) * size;\n            Integer maxResults = (size ==null ? 0 : size);\n            Iterable<AttributeState> states = null; \n            CriterionDto criterion = null;\n            if (!StringHelper.isNullOrEmpty(filter)) {\n                criterion = JSON.parseObject(filter, CriterionDto.class);\n            } else {\n                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()\n                    .filter(kv -> AttributeResourceUtils.getFilterPropertyName(kv.getKey()) != null)\n                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));\n            }\n            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), \n                n -> (AttributeMetadata.aliasMap.containsKey(n) ? AttributeMetadata.aliasMap.get(n) : n));\n            states = attributeApplicationService.get(\n                c,\n                AttributeResourceUtils.getQuerySorts(request.getParameterMap()),\n                firstResult, maxResults);\n            long count = attributeApplicationService.getCount(c);\n\n            AttributeStateDto.DtoConverter dtoConverter = new AttributeStateDto.DtoConverter();\n            if (StringHelper.isNullOrEmpty(fields)) {\n                dtoConverter.setAllFieldsReturned(true);\n            } else {\n                dtoConverter.setReturnedFieldsString(fields);\n            }\n            Page.PageImpl<AttributeStateDto> statePage =  new Page.PageImpl<>(dtoConverter.toAttributeStateDtoList(states), count);\n            statePage.setSize(size);\n            statePage.setNumber(page);\n            return statePage;\n\n        } catch (DomainError error) { logger.info(error.getMessage(), error); throw error; } catch (Exception ex) { String exMsg = \"[\" + UUID.randomUUID().toString() + \"] Exception caught.\"; logger.error(exMsg, ex); throw new RuntimeException"} {"path":"downloaded/AttributeResource.java","method_name":"eId","content":"/**\n     * 查询.\n     * 查询 Attributes\n 获取单个 Attribute\n     */\n    @GetMapping(\"{attributeId}\")\n    public AttributeStateDto get(@PathVariable(\"attributeId\") String attributeId, @RequestParam(value = \"fields\", required = false) String fields) {\n        try {\n            String idObj = attributeId;\n            AttributeState state = attributeApplicationService.get(idObj);\n            if (state == null) { return null; }\n\n            AttributeStateDto.DtoConverter dtoConverter = new AttributeStateDto.DtoConverter();\n            if (StringHelper.isNullOrEmpty(fields)) {\n                dtoConverter.setAllFieldsReturned(true);\n            } else {\n                dtoConverter.setReturnedFieldsString(fields);\n            }\n            return dtoConverter.toAttributeStateDto(state);\n\n        } catch (DomainError error) { logger.info(error.getMessage(), error); throw error; } catch (Exception ex) { String exMsg = \"[\" + UUID.randomUUID().toString() + \"] Exception caught.\"; logger.error(exMsg, ex); throw new "} {"path":"downloaded/AttributeResource.java","method_name":"TEXT_PLAI","content":"/**\n     * 查询.\n     * 查询 Attributes\nException(exMsg, ex); }\n    }\n\n\n    @GetMapping(value = \"_nextId\", produces = MediaType.TEXT_PLAIN_VALUE)\n    public String getNextId() {\n        try {\n            return attributeIdGenerator.getNextId();\n        } catch (DomainError error) { logger.info(error.getMessage(), error); throw error; } catch (Exception ex) { String exMsg = \"[\" + UUID.randomUUID().toString() + \"] Exception caught.\"; logger.error(exMsg, ex); throw new "} {"path":"downloaded/AttributeResource.java","method_name":"etMappin","content":"/**\n     * 查询.\n     * 查询 Attributes\neException(exMsg, ex); }\n    }\n\n    @GetMapping(\"_count\")\n    public long getCount(@Specification(value = AttributeStateDto.class) HttpServletRequest request,\n                         @RequestParam(value = \"filter\", required = false) String filter) {\n        try {\n            long count = 0;\n            CriterionDto criterion = null;\n            if (!StringHelper.isNullOrEmpty(filter)) {\n                criterion = JSONObject.parseObject(filter, CriterionDto.class);\n            } else {\n                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap());\n            }\n            Criterion c = CriterionDto.toSubclass(criterion,\n                getCriterionTypeConverter(), \n                getPropertyTypeResolver(), \n                n -> (AttributeMetadata.aliasMap.containsKey(n) ? AttributeMetadata.aliasMap.get(n) : n));\n            count = attributeApplicationService.getCount(c);\n            return count;\n\n        } catch (DomainError error) { logger.info(error.getMessage(), error); throw error; } catch (Exception ex) { String exMsg = \"[\" + UUID.randomUUID().toString() + \"] Exception caught.\"; logger.error(exMsg, ex); throw new "} {"path":"downloaded/AttributeResource.java","method_name":"tatu","content":"/**\n     * 查询.\n     * 查询 Attributes\n新建.\n     * 新建 Attribute\n     */\n    @PostMapping(produces = MediaType.TEXT_PLAIN_VALUE) @ResponseStatus(HttpStatus.CREATED)\n    public String post(@RequestBody CreateOrMergePatchAttributeDto.CreateAttributeDto value,  HttpServletResponse response) {\n        try {\n            AttributeCommand.CreateAttribute cmd = value.toCreateAttribute();\n            if (cmd.getAttributeId() == null) {\n                throw DomainError.named(\"nullId\", \"Aggregate Id in cmd is null, aggregate name: %1$s.\", \"Attribute\");\n            }\n            String idObj = cmd.getAttributeId();\n            cmd.setRequesterId(SecurityContextUtil.getRequesterId());\n            attributeApplicationService.when(cmd);\n\n            return idObj;\n        } catch (DomainError error) { logger.info(error.getMessage(), error); throw error; } catch (Exception ex) { String exMsg = \"[\" + UUID.randomUUID().toString() + \"] Exception caught.\"; logger.error(exMsg, ex); th"} {"path":"downloaded/AttributeResource.java","method_name":"te\n","content":"/**\n     * 查询.\n     * 查询 Attributes\n�� or 修改.\n     * 创建 or 修改 Attribute\n     */\n    @PutMapping(\"{attributeId}\")\n    public void put(@PathVariable(\"attributeId\") String attributeId, @RequestBody CreateOrMergePatchAttributeDto value) {\n        try {\n            if (value.getVersion() != null) {\n                value.setCommandType(Command.COMMAND_TYPE_MERGE_PATCH);\n                AttributeCommand.MergePatchAttribute cmd = (AttributeCommand.MergePatchAttribute) value.toCommand();\n                AttributeResourceUtils.setNullIdOrThrowOnInconsistentIds(attributeId, cmd);\n                cmd.setRequesterId(SecurityContextUtil.getRequesterId());\n                attributeApplicationService.when(cmd);\n                return;\n            }\n\n            value.setCommandType(Command.COMMAND_TYPE_CREATE);\n            AttributeCommand.CreateAttribute cmd = (AttributeCommand.CreateAttribute) value.toCommand();\n            AttributeResourceUtils.setNullIdOrThrowOnInconsistentIds(attributeId, cmd);\n            cmd.setRequesterId(SecurityContextUtil.getRequesterId());\n            attributeApplicationService.when(cmd);\n\n        } catch (DomainError error) { logger.info(error.getMessage(), error); throw error; } catch (Exception ex) { String exMsg = \"[\" + UUID.randomUUID().toString() + \"] Exception caught.\"; logger.erro"} {"path":"downloaded/AttributeResource.java","method_name":"etMapping(\"_metadata/filte","content":"/**\n     * 查询.\n     * 查询 Attributes\nogger.error(exMsg, ex); throw new RuntimeException(exMsg, ex); }\n    }\n\n    @GetMapping(\"_metadata/filteringFields\")\n    public List<PropertyMetadataDto> getMetadataFilteringFields() {\n        try {\n\n            List<PropertyMetadataDto> filtering = new ArrayList<>();\n            AttributeMetadata.propertyTypeMap.forEach((key, value) -> {\n                filtering.add(new PropertyMetadataDto(key, value, true));\n            });\n            return filtering;\n\n        } catch (DomainError error) { logger.info(error.getMessage(), error); throw error; } catch (Exception ex) { String exMsg = \"[\" + UUID.randomUUID().toString() + \"] Exception caugh"} {"path":"downloaded/AttributeResource.java","method_name":"   @GetMappin","content":"/**\n     * 查询.\n     * 查询 Attributes\nogger.error(exMsg, ex); throw new RuntimeException(exMsg, ex); }\n    }\n\n    @GetMapping(\"{attributeId}/_events/{version}\")\n    public AttributeEvent getStateEvent(@PathVariable(\"attributeId\") String attributeId, @PathVariable(\"version\") long version) {\n        try {\n\n            String idObj = attributeId;\n            //AttributeStateEventDtoConverter dtoConverter = getAttributeStateEventDtoConverter();\n            return attributeApplicationService.getEvent(idObj, version);\n\n        } catch (DomainError error) { logger.info(error.getMessage(), error); throw error; } catch (Exception ex) { String exMsg = \"[\" + UUID.randomUUID().toString() + \"] Exception caugh"} {"path":"downloaded/AttributeResource.java","method_name":"ping(\"{attribut","content":"/**\n     * 查询.\n     * 查询 Attributes\nogger.error(exMsg, ex); throw new RuntimeException(exMsg, ex); }\n    }\n\n    @GetMapping(\"{attributeId}/_historyStates/{version}\")\n    public AttributeStateDto getHistoryState(@PathVariable(\"attributeId\") String attributeId, @PathVariable(\"version\") long version, @RequestParam(value = \"fields\", required = false) String fields) {\n        try {\n\n            String idObj = attributeId;\n            AttributeStateDto.DtoConverter dtoConverter = new AttributeStateDto.DtoConverter();\n            if (StringHelper.isNullOrEmpty(fields)) {\n                dtoConverter.setAllFieldsReturned(true);\n            } else {\n                dtoConverter.setReturnedFieldsString(fields);\n            }\n            return dtoConverter.toAttributeStateDto(attributeApplicationService.getHistoryState(idObj, version));\n\n        } catch (DomainError error) { logger.info(error.getMessage(), error); throw error; } catch (Exception ex) { String exMsg = \"[\" + UUID.randomUUID().toString() + \"] Exception caugh"} {"path":"downloaded/AttributeResource.java","method_name":"   @GetMapping(\"{","content":"/**\n     * 查询.\n     * 查询 Attributes\n }\n    }\n\n    /**\n     * 查看.\n     * 获取指定 Value 的 AttributeValue\n     */\n    @GetMapping(\"{attributeId}/AttributeValues/{value}\")\n    public AttributeValueStateDto getAttributeValue(@PathVariable(\"attributeId\") String attributeId, @PathVariable(\"value\") String value) {\n        try {\n\n            AttributeValueState state = attributeApplicationService.getAttributeValue(attributeId, value);\n            if (state == null) { return null; }\n            AttributeValueStateDto.DtoConverter dtoConverter = new AttributeValueStateDto.DtoConverter();\n            AttributeValueStateDto stateDto = dtoConverter.toAttributeValueStateDto(state);\n            dtoConverter.setAllFieldsReturned(true);\n            return stateDto;\n\n        } catch (DomainError error) { logger.info(error.getMessage(), error); throw error; } catch (Exception ex) { String exMsg = \"[\" + UUID.randomUUID().toString() + \"] E"} {"path":"downloaded/AttributeResource.java","method_name":" AttributeValue Li","content":"/**\n     * 查询.\n     * 查询 Attributes\n.error(exMsg, ex); throw new RuntimeException(exMsg, ex); }\n    }\n\n    /**\n     * AttributeValue List\n     */\n    @GetMapping(\"{attributeId}/AttributeValues\")\n    public AttributeValueStateDto[] getAttributeValues(@PathVariable(\"attributeId\") String attributeId,\n                    @RequestParam(value = \"sort\", required = false) String sort,\n                    @RequestParam(value = \"fields\", required = false) String fields,\n                    @RequestParam(value = \"filter\", required = false) String filter,\n                    @Specification(value = AttributeValueStateDto.class) HttpServletRequest request) {\n        try {\n            CriterionDto criterion = null;\n            if (!StringHelper.isNullOrEmpty(filter)) {\n                criterion = JSON.parseObject(filter, CriterionDto.class);\n            } else {\n                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()\n                    .filter(kv -> AttributeResourceUtils.getAttributeValueFilterPropertyName(kv.getKey()) != null)\n                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));\n            }\n            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), \n                n -> (AttributeValueMetadata.aliasMap.containsKey(n) ? AttributeValueMetadata.aliasMap.get(n) : n));\n            Iterable<AttributeValueState> states = attributeApplicationService.getAttributeValues(attributeId, c,\n                    AttributeResourceUtils.getAttributeValueQuerySorts(request.getParameterMap()));\n            if (states == null) { return null; }\n            AttributeValueStateDto.DtoConverter dtoConverter = new AttributeValueStateDto.DtoConverter();\n            if (StringHelper.isNullOrEmpty(fields)) {\n                dtoConverter.setAllFieldsReturned(true);\n            } else {\n                dtoConverter.setReturnedFieldsString(fields);\n            }\n            return dtoConverter.toAttributeValueStateDtoArray(states);\n        } catch (DomainError error) { logger.info(error.getMessage(), error); throw error; } catch (Exception ex) { String exMsg = \"[\" + UUID.random"} {"path":"downloaded/AttributeResource.java","method_name":"* 获取指定 Co","content":"/**\n     * 查询.\n     * 查询 Attributes\nsg, ex); throw new RuntimeException(exMsg, ex); }\n    }\n\n    /**\n     * 查看.\n     * 获取指定 Code 的 AttributeAlias\n     */\n    @GetMapping(\"{attributeId}/AttributeAlias/{code}\")\n    public AttributeAliasStateDto getAttributeAlias(@PathVariable(\"attributeId\") String attributeId, @PathVariable(\"code\") String code) {\n        try {\n\n            AttributeAliasState state = attributeApplicationService.getAttributeAlias(attributeId, code);\n            if (state == null) { return null; }\n            AttributeAliasStateDto.DtoConverter dtoConverter = new AttributeAliasStateDto.DtoConverter();\n            AttributeAliasStateDto stateDto = dtoConverter.toAttributeAliasStateDto(state);\n            dtoConverter.setAllFieldsReturned(true);\n            return stateDto;\n\n        } catch (DomainError error) { logger.info(error.getMessage(), error); throw error; } catch (Exception ex) { String exM"} {"path":"downloaded/AttributeResource.java","method_name":"meException(exMsg","content":"/**\n     * 查询.\n     * 查询 Attributes\nD().toString() + \"] Exception caught.\"; logger.error(exMsg, ex); throw new RuntimeException(exMsg, ex); }\n    }\n\n    /**\n     * AttributeAlias List\n     */\n    @GetMapping(\"{attributeId}/AttributeAlias\")\n    public AttributeAliasStateDto[] getAttributeAlias(@PathVariable(\"attributeId\") String attributeId,\n                    @RequestParam(value = \"sort\", required = false) String sort,\n                    @RequestParam(value = \"fields\", required = false) String fields,\n                    @RequestParam(value = \"filter\", required = false) String filter,\n                    @Specification(value = AttributeAliasStateDto.class) HttpServletRequest request) {\n        try {\n            CriterionDto criterion = null;\n            if (!StringHelper.isNullOrEmpty(filter)) {\n                criterion = JSON.parseObject(filter, CriterionDto.class);\n            } else {\n                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()\n                    .filter(kv -> AttributeResourceUtils.getAttributeAliasFilterPropertyName(kv.getKey()) != null)\n                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));\n            }\n            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), \n                n -> (AttributeAliasMetadata.aliasMap.containsKey(n) ? AttributeAliasMetadata.aliasMap.get(n) : n));\n            Iterable<AttributeAliasState> states = attributeApplicationService.getAttributeAlias(attributeId, c,\n                    AttributeResourceUtils.getAttributeAliasQuerySorts(request.getParameterMap()));\n            if (states == null) { return null; }\n            AttributeAliasStateDto.DtoConverter dtoConverter = new AttributeAliasStateDto.DtoConverter();\n            if (StringHelper.isNullOrEmpty(fields)) {\n                dtoConverter.setAllFieldsReturned(true);\n            } else {\n                dtoConverter.setReturnedFieldsString(fields);\n            }\n            return dtoConverter.toAttributeAliasStateDtoArray(states);\n        } catch (DomainError error) { logger.info(error.getMessage(), error); throw error; } catch (Ex"} {"path":"downloaded/AttributeResource.java","method_name":"ed  AttributeStateEventDt","content":"/**\n     * 查询.\n     * 查询 Attributes\n }\n    }\n\n\n    //protected  AttributeStateEventDtoConverter getAttributeStateEventDtoConverter() {\n   "} {"path":"downloaded/AttributeResource.java","method_name":"DtoConverter();\n    //}","content":"/**\n     * 查询.\n     * 查询 Attributes\n return new AttributeStateEventDtoConverter();\n    //}\n\n    protected TypeConverter getCriterionTypeConverter() {\n        return new DefaultTypeConverter();\n    }\n\n    protected PropertyTypeResolver getPropertyTypeResolver() {\n        return new PropertyTypeResolver() {\n            @Override\n            public "} {"path":"downloaded/AttributeResource.java","method_name":"g propertyName) {\n                ret","content":"/**\n     * 查询.\n     * 查询 Attributes\nresolveTypeByPropertyName(String propertyName) {\n                return AttributeResourceUtils.getFilterPropertyType(propertyName);\n            }\n        };\n    }\n\n    protected PropertyTypeResolver getAttributeValuePropertyTypeResolver() {\n        return new PropertyTypeResolver() {\n            @Override\n            public Class resolveT"} {"path":"downloaded/AttributeResource.java","method_name":") {\n                return AttributeR","content":"/**\n     * 查询.\n     * 查询 Attributes\nropertyName(String propertyName) {\n                return AttributeResourceUtils.getAttributeValueFilterPropertyType(propertyName);\n            }\n        };\n    }\n\n    protected PropertyTypeResolver getAttributeAliasPropertyTypeResolver() {\n        return new PropertyTypeResolver() {\n            @Override\n            public Class resolveT"} {"path":"downloaded/SpielInitialisierung.java","method_name":"getSpielfeld","content":"/**\n   * Hier muss ein ISpielfeld-Objekt erzeugt werden. Das muss die Assets\n   * enthalten.\n   * \n   * @return ISpielfeld-Objekt.\n   */\npublic AbstraktesSpielfeld getSpielfeld() {\n    // Hier ein Spielfeld-Objekt erzeugen und zurückliefern.\n    return new Spielfeld();\n  "} {"path":"downloaded/SpielInitialisierung.java","method_name":"g getSpielSteueru","content":" /**\n   * Getter.\n   * \n   * @return In dieser Methode muss das Spielsteuerungsmodul zurückgeliefert\n   *         werden.\n   \n  public AbstrakteSpielSteuerung getSpielSteuerung() {\n    // Hier ein SpielSteuerungs-Objekt erzeugen und zurückliefern.\n    return new SpielSteuerung();\n"} {"path":"downloaded/SpielInitialisierung.java","method_name":"ing getAssetDatei","content":"\n  /**\n   * Liefert den Pfad und Dateinamen des Bildes zum gegebenen AssetTyp.\n   * \n   * @param assetTyp\n   *          AssetTyp, für das der Bild-Pfad geliefert werden soll.\n   * \n   * @return Dateiname mit (relativem) Pfad.\n \n/\n  public String getAssetDateiname(AbstraktesAsset.AssetTyp assetTyp) {\n    switch (assetTyp) {\n      case HELD:\n        return \"chris.png\";\n      case BOESEWICHT:\n        return \"boesewicht.png\";\n      case BAUM:\n        return \"baum.png\";\n      case WAND:\n        return \"wand.png\";\n      case LOCH:\n          return \"loch.png\";\n      case HAUS:\n          return \"haus2.png\";    \n      default:\n        System.out.println(\"Unbekannter AssetTyp: \" + assetTyp);\n    }\n    return null;"} {"path":"downloaded/MazeEditorPage.java","method_name":"newMaze","content":"/**\n    * Bring up a dialog prompting the user to create a new maze.\n    */\npublic void newMaze()\n   {\n      NewMazeDialog dialog;\n      String result;\n      dialog = new NewMazeDialog(Main.getPrimaryFrameInstance());\n      if ( (result = dialog.showDialog()) == null)\n         return;\n\n      MazeInfoModel mim = Main.getPrimaryFrameInstance().getMazeInfoModel();\n\n      if (result.equals(NewMazeDialog.MAZ))\n      {\n         MazeInfo newMi = mim.createNew(\"New Maze \" + mLastNew, false);\n         if (newMi == null)\n         {\n            JOptionPane.showMessageDialog(MazeEditorPage.this,\n                                          \"Unable to create new maze\",\n                                          \"Maze Creation Error\",\n                                          JOptionPane.OK_OPTION);\n            return;\n         }\n         mLastNew++;\n      }\n      else if (result.equals(NewMazeDialog.MZ2))\n      {\n         MazeInfo newMi = mim.createNew(dialog.getText(), true);\n         if (newMi == null)\n         {\n            JOptionPane.showMessageDialog(MazeEditorPage.this,\n                                          \"Unable to create new maze\",\n                                          \"Maze Creation Error\",\n                                          JOptionPane.OK_OPTION);\n            return;\n         }\n         MazeModel mm = newMi.getModel();\n         mm.setSize(dialog.getMazeSize());\n      }\n   }"} {"path":"downloaded/MazeEditorPage.java","method_name":"setTemplate","content":"/**\n    * Set the current template to be used by the maze editor.\n    * @param mt Template to set, or null to clear template.\n    */\nprivate void setTemplate(MazeTemplate mt)\n   {\n      if (mt == mCurrentTemplate)\n         return;\n\n      mCurrentTemplate = mt;\n      if (mCurrentTemplate == null)\n      {\n         mMazeView.setEditable(true);\n      }\n      else\n      {\n         mMazeView.setEditable(false);\n         mt.reset();\n      }\n      mMazeView.setTemplate(mt);\n   }"} {"path":"downloaded/MazeEditorPage.java","method_name":"makeNewMazeButton","content":"/**\n    * Create button to add new maze.\n    */\nprivate JButton makeNewMazeButton()\n   {\n      JButton newMaze = new JButton(\"New Maze\");\n      newMaze.setToolTipText(\"Create a new maze\");\n      newMaze.addActionListener(new ActionListener()\n      {\n         @Override\n         public void actionPerformed(ActionEvent e)\n         {\n            newMaze();\n         }\n      });\n      return newMaze;\n   }"} {"path":"downloaded/MazeEditorPage.java","method_name":"makeRandomMazeButton","content":"/**\n    * Creates a button that randomizes all the walls of the current maze.\n    */\nprivate JButton makeRandomMazeButton()\n   {\n      JButton random = new JButton(\"Randomize Maze\");\n      random.setToolTipText(\"Randomize all the walls of the currently selected Maze.\");\n      random.addActionListener(new ActionListener()\n      {\n         @Override\n         public void actionPerformed(ActionEvent e)\n         {\n            final MazeModel maze = mMazeView.getModel();\n            if (maze != null)\n            {\n               maze.generateRandomMaze();\n               mMazeView.repaint();\n            }\n         }\n      });\n      return random;\n   }"} {"path":"downloaded/MazeEditorPage.java","method_name":"close","content":"/**\n    * Close the current maze.\n    */\n@Override\n   public void close()\n   {\n      MazeInfo mi = (MazeInfo) mOpenMazes.getList().getSelectedValue();\n      if (mi != null)\n      {\n         if (!mi.isMutable())\n         {\n            JOptionPane.showMessageDialog(this,\n                                          \"This maze cannot be closed\",\n                                          \"Maze Close\",\n                                          JOptionPane.INFORMATION_MESSAGE);\n            return;\n         }\n         if (mi.isDirty())\n            saveCurrent();\n         MazeInfoModel mim = Main.getPrimaryFrameInstance().getMazeInfoModel();\n         JList list = mOpenMazes.getList();\n         list.setSelectedIndex(list.getSelectedIndex() - 1);\n         mim.close(mi);\n      }\n   }"} {"path":"downloaded/MazeEditorPage.java","method_name":"getFileTypeDescription","content":"/**\n    * A description of the supported maze file types.\n    */\n@Override\n   public String getFileTypeDescription()\n   {\n      return \"Maze files (.maz, .mz2)\";\n   }"} {"path":"downloaded/MazeEditorPage.java","method_name":"isMyFileType","content":"/**\n    * Checks if the given file is a supported maze file.\n    * @param file The file to check.\n    */\n@Override\n   public boolean isMyFileType(File file)\n   {\n      String lower = file.getName().toLowerCase();\n      if (lower.endsWith(\".maz\") || lower.endsWith(\".mz2\"))\n         return true;\n      else\n         return false;\n   }"} {"path":"downloaded/MazeEditorPage.java","method_name":"canExit","content":"/**\n    * Prompt the user to save any dirty mazes.\n    */\n@Override\n   public boolean canExit()\n   {\n      final PrimaryFrame primary = Main.getPrimaryFrameInstance();\n      DefaultComboBoxModel cbm = primary.getMazeInfoModel().getMazeInfoComboBoxModel();\n      for (int i = 0; i < cbm.getSize(); i++)\n      {\n         MazeInfo mi = (MazeInfo) cbm.getElementAt(i);\n         if (mi.isDirty())\n         {\n            int result;\n            result = JOptionPane.showConfirmDialog(this,\n                                                   \"Would you like to save \\\"\" +\n                                                         mi.getName() +\n                                                         \"\\\"\",\n                                                   \"Save Maze?\",\n                                                   JOptionPane.YES_NO_OPTION,\n                                                   JOptionPane.QUESTION_MESSAGE);\n            if (result == JOptionPane.YES_OPTION)\n               mi.saveMaze();\n            else if (result != JOptionPane.NO_OPTION)\n               return false; // Abort exit if canceled.\n         }\n      }\n      return true;\n   }"} {"path":"downloaded/Device.java","method_name":"g get","content":"\n\t/**\n\t * Obtiene el id de un Device\n\t * @return id\n\t \n\n\tpublic Long getId() {\n\t\treturn id;\n"} {"path":"downloaded/Device.java","method_name":"g getNa","content":"\n\t/**\n\t * Obtiene el nombre de un Device\n\t * @return name\n\t \n\n\tpublic String getName() {\n\t\treturn name;\n"} {"path":"downloaded/Device.java","method_name":"t getNumb","content":"\n\t/**\n\t * Obtiene el numero de un Device\n\t * @return number\n\t \n\n\tpublic int getNumber() {\n\t\treturn number;\n"} {"path":"downloaded/Device.java","method_name":"n getSta","content":"\n\t/**\n\t * Obtiene el estado de un Device\n\t * @return state\n\t \n\n\tpublic boolean getState() {\n\t\treturn state;\n"} {"path":"downloaded/XMLDialog.java","method_name":"getTimeToDisplay","content":"/**\n\t * @return the time this dialog should be played (if 0 or less this dialog will not be time limited)\n\t */\npublic float getTimeToDisplay() {\n\t\treturn timeToDisplay;\n\t}"} {"path":"downloaded/XMLDialog.java","method_name":"getHeader","content":"/**\n\t * Get the header\n\t * @param includeDottedLine if true a dotted underline will be included \n\t * @return\n\t */\npublic String getHeader(boolean includeDottedLine) {\n\t\tif(includeDottedLine) {\n\t\t\tchar[] dottedLine = new char[header.length()];\n\t\t\tfor(byte i = 0; i < dottedLine.length; i++) {\n\t\t\t\tdottedLine[i] = '-';\n\t\t\t}\n\t\t\tString underline = new String(dottedLine);\n\t\t\treturn header + \"\\n\" + underline + \"\\n\";\n\t\t}\n\t\treturn header;\n\t}"} {"path":"downloaded/XMLDialog.java","method_name":"getText","content":"/**\n\t * @return the text from the element\n\t */\npublic String getText() {\n\t\treturn text;\n\t}"} {"path":"downloaded/XMLDialog.java","method_name":"isTimeLimited","content":"/**\n\t * @return whether or not this text is time limited\n\t */\npublic boolean isTimeLimited() {\n\t\treturn timeToDisplay > 0;\n\t}"} {"path":"downloaded/XMLDialog.java","method_name":"hasHeader","content":"/**\n\t * @return whether or not this element has a header attribute\n\t */\npublic boolean hasHeader() {\n\t\treturn header != null;\n\t}"} {"path":"downloaded/XMLDialog.java","method_name":"isSecondEncounter","content":"/**\n\t * @return whether or not this is a second enounter e.g the main dialog has been played already\n\t */\npublic boolean isSecondEncounter() {\n\t\treturn isSecondEncounter;\n\t}"} {"path":"downloaded/XMLDialog.java","method_name":"getDialogAndHeader","content":"/**\n\t * Gives us an array including the header (if any) and the text.\n\t * If no header is given it will simply return an array only containing the one index e.g the text\n\t * @param includeLineChars if true will include a dotted underline after the header eg. Hero ----- text\n\t * @return \n\t */\npublic String[] getDialogAndHeader(boolean includeLineChars) {\n\t\tif(header != null) {\n\t\t\tif(includeLineChars) {\n\t\t\t\treturn new String[]{header, \"-----------\", text};\n\t\t\t}\n\t\t\treturn new String[]{header, text};\n\t\t}\n\t\treturn new String[]{text};\n\t}"} {"path":"downloaded/XMLDialog.java","method_name":"toString","content":"/**\n\t * Gives us an array including the header (if any) and the text.\n\t * If no header is given it will simply return an array only containing the one index e.g the text\n\t * @param includeLineChars if true will include a dotted underline after the header eg. Hero ----- text\n\t * @return \n\t */\n@Override\n\tpublic String toString() {\n\t\treturn \"Name=\" + header + \"\\nText=\" + text + \"\\ntime=\" + timeToDisplay;\n\t}"} {"path":"downloaded/LocalTimeCLA.java","method_name":"convert","content":"/** {@inheritDoc} */\n@Override\n    public LocalTime convert(final String valueStr, final boolean _caseSensitive, final Object target)\n            throws ParseException\n    {\n        if (dtf == null)\n            if (getFormat() != null)\n                try\n                {\n                    dtf = DateTimeFormatter.ofPattern(getFormat());\n                } catch (final Exception e)\n                {\n                    throw new ParseException(\"time format: \" + e.getMessage(), 0);\n                }\n\n        try\n        {\n            if (dtf == null)\n                return TemporalHelper.parseWithPredefinedParsers(valueStr).toLocalTime();\n            return LocalDateTime.parse(valueStr, dtf).toLocalTime();\n        } catch (final Exception e)\n        {\n            throw new ParseException(toString() + \" \" + getFormat() + \": \" + e.getMessage(), 0);\n        }\n    }"} {"path":"downloaded/LocalTimeCLA.java","method_name":"defaultInstanceClass","content":"/** {@inheritDoc} */\n@Override\n    public String defaultInstanceClass()\n    {\n        return \"java.time.LocalTime\";\n    }"} {"path":"downloaded/LocalTimeCLA.java","method_name":"genericClassName","content":"/** {@inheritDoc} */\n@Override\n    public String genericClassName()\n    {\n        return \"java.time.LocalTime\";\n    }"} {"path":"downloaded/LocalTimeCLA.java","method_name":"getValueAsLocalTimeArray","content":"/** {@inheritDoc} */\n@Override\n    public LocalTime[] getValueAsLocalTimeArray() throws ParseException\n    {\n        final LocalTime[] result = new LocalTime[size()];\n\n        for (int r = 0; r < size(); r++)\n            result[r] = getValue(r);\n\n        return result;\n    }"} {"path":"downloaded/LocalTimeCLA.java","method_name":"supportsCaseSensitive","content":"/** {@inheritDoc} */\n@Override\n    public boolean supportsCaseSensitive()\n    {\n        return true;\n    }"} {"path":"downloaded/LocalTimeCLA.java","method_name":"supportsFormat","content":"/** {@inheritDoc} */\n@Override\n    public boolean supportsFormat()\n    {\n        return true;\n    }"} {"path":"downloaded/LocalTimeCLA.java","method_name":"supportsInList","content":"/** {@inheritDoc} */\n@Override\n    public boolean supportsInList()\n    {\n        return false;\n    }"} {"path":"downloaded/SpringTaskUtil.java","method_name":"099)\n     * @para","content":"/**\n     * {秒}：取值范围(0-59)\n     * {分}：取值范围(0-59)\n     * {时}：取值范围(0-23)\n     * {日}：取值范围(1-31)\n     * {月}：取值范围(1-12或JAN-DEC)\n     * {\n��取值范围(1970-2099)\n     * @param minute\n     * @return\n     */\n    public static String getCronExpression(long minute){\n        if(0<minute && minute<60){\n            return \"0 */\"+minute+\" * * * ?\";\n        }else if(60 <= minute && minute<(60*24)){\n            long h = minute/60;\n            return \" 0 * */\"+h+\" * * ?\";\n        }else if(60*24 <=minute && minute<(60*24*31)){\n            long d = minute/(60*24);\n            return \" 0 * * */\"+d+\" * ?\";\n        }else if((60*24*31) <= minute && minute<(60*24*31*12)){\n            long m = minute/(60*24*31);\n            return \" 0 * * * */\"+m+\" ?\";\n        }else{\n            minute = minute-(6"} {"path":"downloaded/SpringTaskUtil.java","method_name":"    * @","content":"/**\n     * {秒}：取值范围(0-59)\n     * {分}：取值范围(0-59)\n     * {时}：取值范围(0-23)\n     * {日}：取值范围(1-31)\n     * {月}：取值范围(1-12或JAN-DEC)\n     * {\nron表达式\n     *\n     * @param dateStr\n     * @return\n     * @Author xy.chen\n     */\n    public static String getCron(String dateStr) {\n        SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        String formatTimeStr = null;\n        try {\n            Date parse = formatter.parse(dateStr);\n            SimpleDateFormat sdf = new SimpleDateFormat(\"ss mm HH dd MM ?\");\n            if (parse != null) {\n                formatTimeStr = sdf.format(parse);\n            }\n        } catch (ParseException e) {\n       "} {"path":"downloaded/SpringTaskUtil.java","method_name":"ron表达�","content":"/**\n     * {秒}：取值范围(0-59)\n     * {分}：取值范围(0-59)\n     * {时}：取值范围(0-23)\n     * {日}：取值范围(1-31)\n     * {月}：取值范围(1-12或JAN-DEC)\n     * {\n* 根据时间获取cron表达式 HH:mm:ss\n     *\n     * @param dateStr\n     * @return\n     * @Author xy.chen\n     */\n    public static String getTimeCron(String dateStr) {\n        SimpleDateFormat formatter = new SimpleDateFormat(\"HH:mm:ss\");\n        String formatTimeStr = null;\n        try {\n            Date parse = formatter.parse(dateStr);\n            SimpleDateFormat sdf = new SimpleDateFormat(\"ss mm HH * * ?\");\n            if (parse != null) {\n                formatTimeStr = sdf.format(parse);\n            }\n        } catc"} {"path":"downloaded/SpringTaskUtil.java","method_name":"          log.","content":"/**\n     * {秒}：取值范围(0-59)\n     * {分}：取值范围(0-59)\n     * {时}：取值范围(0-23)\n     * {日}：取值范围(1-31)\n     * {月}：取值范围(1-12或JAN-DEC)\n     * {\nseException e) {\n            log.error(\"时间转换异常,[{}]\", e.getMessage());\n        }\n        return formatTimeStr;\n    }\n\n    public static Long getMillisecond(String dateStr) {\n        SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        long time = 0L;\n        try {\n            Date parse = formatter.parse(dateStr);\n            time = parse.getT"} {"path":"downloaded/RE.java","method_name":"getNFA","content":"/**\n     * @return The NFA built based on the regular expression\n     */\npublic NFA getNFA() {\n        return regEx();\n    }"} {"path":"downloaded/RE.java","method_name":"regEx","content":"/**\n     *  This method will convert a regular expression into an NFA\n     *\n     * @return NFA\n     */\nprivate NFA regEx() {\n        NFA term = term();\n\n        //If the regex requires a union operation\n        if (more() && peek() == '|') {\n\n            eat('|');\n            NFA regex = regEx();\n            return union(term, regex);\n            //If no union is needed, just return the NFA\n        } else {\n            return term;\n        }\n    }"} {"path":"downloaded/RE.java","method_name":"union","content":"/**\n     * combine 2 NFAs into 1 NFA (the order does not matter)\n     *\n     * @return the combined NFA\n     */\nprivate NFA union(NFA nfa1, NFA nfa2) {\n        NFA result = new NFA();\n\n        String startState = String.valueOf(stateInc++);\n        result.addStartState(startState);\n        result.addNFAStates(nfa1.getStates());\n        result.addNFAStates(nfa2.getStates());\n        result.addTransition(startState, 'e', nfa1.getStartState().getName());\n        result.addTransition(startState, 'e', nfa2.getStartState().getName());\n        result.addAbc(nfa1.getABC());\n        result.addAbc(nfa2.getABC());\n\n        return result;\n\n    }"} {"path":"downloaded/RE.java","method_name":"term","content":"/**\n     * build a term(NFA)  based on factor\n     *\n     * @return the term( empty or multiple factors) that is already in the form of an NFA\n     */\nprivate NFA term() {\n        NFA startFactor = new NFA();\n        while (more() && peek() != ')' && peek() != '|') {\n            NFA newFactor = factor();\n            //If a term is just an empty sequence of factors\n            if (startFactor.getStates().isEmpty()) {\n                startFactor = newFactor;\n            } else {//concatentae the term if there are multple factor\n                startFactor = combine(startFactor, newFactor);\n            }\n        }\n        return startFactor;\n    }"} {"path":"downloaded/RE.java","method_name":"combine","content":"/**\n     * combine two nfas (with order)\n     * @param nfa1 - base nfa\n     * @param nfa2 - nfa added to nfa1\n     * @return combined nfa\n     */\nprivate NFA combine(NFA nfa1, NFA nfa2) {\n        // must use a set for multiple final states\n        Set<State> nfa1FinalStates = nfa1.getFinalStates();\n        //add states from nfa2 to base\n        nfa1.addNFAStates(nfa2.getStates());\n        nfa1.addAbc(nfa2.getABC());\n\n        Iterator<State> itr = nfa1FinalStates.iterator();\n        while (itr.hasNext()) {\n            State state = itr.next();\n             //states are now non-final nfa states\n            ((NFAState) state).setNonFinal();\n            //empty transition used to rach start of nfa2\n            nfa1.addTransition(state.getName(), 'e', nfa2.getStartState().getName());\n        }\n        return nfa1;\n    }"} {"path":"downloaded/RE.java","method_name":"factor","content":"/**\n     * Builds factor from a base, but checks for repitition if needed\n     * @return an nfa built from a base\n     */\nprivate NFA factor() {\n        NFA base = base();\n        //if the regex is longer and the next char is star operator\n        while (more() && peek() == '*') {\n            eat('*');\n            base = star(base);\n        }\n        return base;\n    }"} {"path":"downloaded/RE.java","method_name":"star","content":"/**\n     * Creates a case accepting the star operator if needed\n     * @param base NFA to build on\n     * @return NFA that now includes a star operator\n     */\nprivate NFA star(NFA base) {\n        // new simple nfa to be returned\n        NFA starBase = new NFA();\n        NFAState startS = new NFAState(String.valueOf(stateInc++));\n        NFAState endS = new NFAState(String.valueOf(stateInc++));\n        starBase.addStartState(startS.getName());\n        starBase.addFinalState(endS.getName());\n        //Add all states from root to starBase\n        starBase.addNFAStates(base.getStates());\n        //transitions need to be empty because of star operator\n        starBase.addTransition(startS.getName(), 'e', endS.getName());\n        starBase.addTransition(endS.getName(), 'e', base.getStartState().getName());\n        //new starting state should connect to base\n        starBase.addTransition(startS.getName(), 'e', base.getStartState().getName());\n        starBase.addAbc(base.getABC());\n\n        Iterator<State> itr = base.getFinalStates().iterator();\n        while (itr.hasNext()) {\n            State state = itr.next();\n            starBase.addTransition(state.getName(), 'e', endS.getName());\n            Iterator<State> itr2 = starBase.getFinalStates().iterator();\n            while (itr2.hasNext()) {\n                State state2 = itr2.next();\n                if (state2.getName().equals(state.getName())) {\n                    ((NFAState) state2).setNonFinal();\n                }\n            }\n        }\n        return starBase;\n    }"} {"path":"downloaded/RE.java","method_name":"base","content":"/**\n     * Base can be a character or a regex\n     * @return nfa made from char or regex base\n     */\nprivate NFA base() {\n        //check parenthesis case for base\n        switch (peek()) {\n            case '(':\n                eat('(');\n                NFA reg = regEx();\n                eat(')');\n                return reg;\n            //if not build a base, simple 2 state nfa\n            default:\n            NFA defNfa = new NFA();\n            //fill out the 5 tuple\n            NFAState startS = new NFAState(String.valueOf(stateInc++));\n            NFAState endS = new NFAState(String.valueOf(stateInc++));  \n            char nextChar = next();\n            defNfa.addStartState(startS.getName());\n            defNfa.addFinalState(endS.getName());\n            defNfa.addTransition(startS.getName(), nextChar, endS.getName());\n            Set<Character> alphabet = new LinkedHashSet<Character>();\n            alphabet.add(nextChar);\n            defNfa.addAbc(alphabet);\n            return defNfa;\n        }\n    }"} {"path":"downloaded/RE.java","method_name":"peek","content":"/**\n     * just peek at the next char, no action or removal\n     * @return The next char in the regex\n     */\nprivate char peek() {\n        return regEx.charAt(0);\n    }"} {"path":"downloaded/RE.java","method_name":"next","content":"/**\n     * remove the next char and return it\n     * @return the next char\n     */\nprivate char next() {\n        char c = peek();\n        eat(c);\n        return c;\n    }"} {"path":"downloaded/RE.java","method_name":"more","content":"/**\n     * Helper method to determine length of regex\n     * @return boolean if regex has more characters\n     */\nprivate boolean more() {\n        return regEx.length() > 0;\n    }"} {"path":"downloaded/ProcessadorAnalise.java","method_name":"getAlertaPorAgendamento","content":"/**\n\t * Metodo....:getAlertaPorAgendamento\n\t * Descricao.:Busca o status do alarme baseado nas configuracoes de agendamento (\"scheduling\") \n\t * @param ultimoEvento \t- Ultimo Evento\n\t * @return String\t\t- Descricao do status de alerta\n\t */\nprivate String getAlertaPorAgendamento(Evento ultimoEvento)\n\t{\n\t\t// Busca o tempo de atraso da ultima execucao com o agendamento especificado\n\t\t// Caso o alarme ainda nao possua eventos registrados entao nao considera este\n\t\t// para o estudo do tempo de atraso\n\t\tDate dtAtual\t\t= Calendar.getInstance().getTime();\n\t\tDate dtUltExecucao\t= ultimoEvento.getDataExecucao();\n\t\tDate dtProxExecucao = alarme.getAgendamento().getProximoAgendamento(dtUltExecucao);\n\t\tlong atraso = (dtAtual.getTime() - dtProxExecucao.getTime())/1000/60;\n\n\t\t// O alerta padrao na verificacao por agendamento e o status OK, se existir atraso\n\t\t// entao verifica a faixa do atraso para identificar a gravidade do alarme (alerta ou falha)\n\t\t// porem sempre que considerado o atraso negativo significa que em relacao a data atual\n\t\t// o proximo agendamento nao esta atrasado\n\t\tString alerta = Alarme.ALARME_OK;\n\n\t\t// Verifica se o atraso se classifica como alerta\n\t\tif (atraso > 0 && atraso > alarme.getAtrasoMaxAlerta() && atraso < alarme.getAtrasoMaxFalha())\n\t\t\talerta = Alarme.ALARME_ALERTA;\n\t\t// Verifica se o atraso se classifica como falha\n\t\tif (atraso > 0 && atraso > alarme.getAtrasoMaxFalha())\n\t\t\talerta = Alarme.ALARME_FALHA;\n\n\t\t// Define o motivo do Alarme\n\t\talarme.setMotivoAlarme(Alarme.MOTIVO_ATRASO);\n\n\t\tlogger.debug(alarme.getIdAlarme()+\" - Atraso:\"+atraso);\n\t\treturn alerta;\n\t}"} {"path":"downloaded/ProcessadorAnalise.java","method_name":"getAlertaPorValor","content":"/**\n\t * Metodo....:getAlertaPorValor\n\t * Descricao.:Busca o valor do status do alarme baseado no valor do contador do ultimo evento\n\t * @param ultimoEvento \t- Ultimo evento a ser analisado\n\t * @return String\t\t- Descricao do status do alarme\n\t */\nprivate String getAlertaPorValor(Evento ultimoEvento)\n\t{\n\t\t// O alerta padrao sera o status OK, dependendo do valor do atraso esse alerta pode ser modificado\n\t\tString alerta = Alarme.ALARME_OK;\n\n\t\t// Verifica se o contador classifica como alerta\n\t\tdouble valor = ultimoEvento.getValorContador();\n\t\t// Verifica se o contador classifica como alerta pelo valor minimo ou maximo\n\t\tif ( valor > alarme.getValorMinFalha()  && valor < alarme.getValorMinAlerta() )\n\t\t{\n\t\t\talerta = Alarme.ALARME_ALERTA;\n\t\t\talarme.setMotivoAlarme(Alarme.MOTIVO_VALOR_MIN);\n\t\t}\n\t\telse if ( valor > alarme.getValorMaxAlerta() && valor < alarme.getValorMaxFalha() )\n\t\t\t{\n\t\t\t\talerta = Alarme.ALARME_ALERTA;\n\t\t\t\talarme.setMotivoAlarme(Alarme.MOTIVO_VALOR_MAX);\n\t\t\t}\n\n\t\t// Verifica se o contador classifica como falha. Devido a hierarquia de erro\n\t\t// o teste para falha e feito posterior pois logicamente tem uma gravidade superior\n\t\tif ( valor < alarme.getValorMinFalha() )\n\t\t{\n\t\t\talerta = Alarme.ALARME_FALHA;\n\t\t\talarme.setMotivoAlarme(Alarme.MOTIVO_VALOR_MIN);\n\t\t}\n\t\telse if ( valor > alarme.getValorMaxFalha() )\n\t\t\t{\n\t\t\t\talerta = Alarme.ALARME_FALHA;\n\t\t\t\talarme.setMotivoAlarme(Alarme.MOTIVO_VALOR_MAX);\n\t\t\t}\n\n\t\tlogger.debug(alarme.getIdAlarme()+\" - Contador:\"+valor);\n\t\treturn alerta;\n\t}"} {"path":"downloaded/ProcessadorAnalise.java","method_name":"getAlertaPorStatusExecucao","content":"/**\n\t * Metodo....:getAlertaPorStatusExecucao\n\t * Descricao.:Retorna o status do alarme baseado no valor do status da ultima execucao\n\t * @param ultimoEvento \t- Ultimo evento a ser analisado\n\t * @return String\t\t- Descricao do status do alarme\n\t */\nprivate String getAlertaPorStatusExecucao(Evento ultimoEvento)\n\t{\n\t\t// O alerta padrao sera o status atual do alarme, dependendo do valor do atraso esse alerta pode ser modificado\n\t\tString alerta = Alarme.ALARME_OK;\n\t\t// No caso de status de execucao, o alarme possui somente dois estados\n\t\t// Ok ou Nao Ok que entao se classifica como OK ou FALHA\n\t\tif (ultimoEvento.getCodigoRetorno() != Alarme.CODIGO_RETORNO_OK)\n\t\t\talerta = Alarme.ALARME_FALHA;\n\t\t\n\t\t// Define o motivo do Alarme\n\t\talarme.setMotivoAlarme(Alarme.MOTIVO_RETORNO);\n\n\t\tlogger.debug(alarme.getIdAlarme()+\" - CodigoRetorno:\"+ultimoEvento.getCodigoRetorno());\n\t\treturn alerta;\n\t}"} {"path":"downloaded/ProcessadorAnalise.java","method_name":"getStatusAlarme","content":"/**\n\t * Metodo....:getStatusAlarme\n\t * Descricao.:Define o novo status que sera definido para o alarme\n\t * @param ultimoEvento - Ultimo evento registrado para o alarme\n\t * @return String - Novo status a ser definido dependendo da analise\n\t */\nprivate String getStatusAlarme(Evento ultimoEvento)\n\t{\n\t\t// Se o ultimo evento nao existir para um dado alarme entao o novo status \n\t\t// sera o mesmo status atual definido para o alarme. Portanto a analise sera\n\t\t// feita somente se existir um ultimo evento\n\t\tString statusAlarme = alarme.getStatus();\n\t\tif (ultimoEvento != null)\n\t\t{\n\t\t\t// Busca o valor do alarme ALERTA,FALHA ou OK para o alarme em processamento\n\t\t\t// dependendo de suas configuracoes com relacao a \"scheduling\" (agendamento de datas)\n\t\t\tstatusAlarme = getAlertaPorAgendamento(ultimoEvento);\n\t\t\t\n\t\t\t// Se o status for diferente de OK entao ja atualiza este na tabela para indicar o alerta\n\t\t\t// desse alarme. Caso contrario entao as verificacoes por valores e por resposta serao\n\t\t\t// verificados.\n\t\t\tif (statusAlarme.equals(Alarme.ALARME_OK))\n\t\t\t{\n\t\t\t\tstatusAlarme = getAlertaPorValor(ultimoEvento);\n\t\t\t\t// Caso o status por valor seja ok entao verifica por status da ultima execucao.\n\t\t\t\t// No caso do status ser diferente de ok entao este ja vai para a tabela\n\t\t\t\tif (statusAlarme.equals(Alarme.ALARME_OK))\n\t\t\t\t\tstatusAlarme = getAlertaPorStatusExecucao(ultimoEvento);\n\t\t\t}\n\t\t}\n\t\treturn statusAlarme;\n\t}"} {"path":"downloaded/BccManifest.java","method_name":"getRecordType","content":"/**\n     * The class holding records for this type\n     */\n@Override\n    public Class<BccManifestRecord> getRecordType() {\n        return BccManifestRecord.class;\n    }"} {"path":"downloaded/BccManifest.java","method_name":"getSchema","content":"/**\n     * Create a <code>oagi.bcc_manifest</code> table reference\n     */\n@Override\n    public Schema getSchema() {\n        return aliased() ? null : Oagi.OAGI;\n    }"} {"path":"downloaded/BccManifest.java","method_name":"getIdentity","content":"/**\n     * Create a <code>oagi.bcc_manifest</code> table reference\n     */\n@Override\n    public Identity<BccManifestRecord, ULong> getIdentity() {\n        return (Identity<BccManifestRecord, ULong>) super.getIdentity();\n    }"} {"path":"downloaded/BccManifest.java","method_name":"getPrimaryKey","content":"/**\n     * Create a <code>oagi.bcc_manifest</code> table reference\n     */\n@Override\n    public UniqueKey<BccManifestRecord> getPrimaryKey() {\n        return Keys.KEY_BCC_MANIFEST_PRIMARY;\n    }"} {"path":"downloaded/BccManifest.java","method_name":"getReferences","content":"/**\n     * Create a <code>oagi.bcc_manifest</code> table reference\n     */\n@Override\n    public List<ForeignKey<BccManifestRecord, ?>> getReferences() {\n        return Arrays.asList(Keys.BCC_MANIFEST_RELEASE_ID_FK, Keys.BCC_MANIFEST_BCC_ID_FK, Keys.BCC_MANIFEST_SEQ_KEY_ID_FK, Keys.BCC_MANIFEST_FROM_ACC_MANIFEST_ID_FK, Keys.BCC_MANIFEST_TO_BCCP_MANIFEST_ID_FK, Keys.BCC_REPLACEMENT_BCC_MANIFEST_ID_FK, Keys.BCC_MANIFEST_PREV_BCC_MANIFEST_ID_FK, Keys.BCC_MANIFEST_NEXT_BCC_MANIFEST_ID_FK);\n    }"} {"path":"downloaded/BccManifest.java","method_name":"release","content":"/**\n     * Get the implicit join path to the <code>oagi.release</code> table.\n     */\npublic Release release() {\n        if (_release == null)\n            _release = new Release(this, Keys.BCC_MANIFEST_RELEASE_ID_FK);\n\n        return _release;\n    }"} {"path":"downloaded/BccManifest.java","method_name":"bcc","content":"/**\n     * Get the implicit join path to the <code>oagi.bcc</code> table.\n     */\npublic Bcc bcc() {\n        if (_bcc == null)\n            _bcc = new Bcc(this, Keys.BCC_MANIFEST_BCC_ID_FK);\n\n        return _bcc;\n    }"} {"path":"downloaded/BccManifest.java","method_name":"seqKey","content":"/**\n     * Get the implicit join path to the <code>oagi.seq_key</code> table.\n     */\npublic SeqKey seqKey() {\n        if (_seqKey == null)\n            _seqKey = new SeqKey(this, Keys.BCC_MANIFEST_SEQ_KEY_ID_FK);\n\n        return _seqKey;\n    }"} {"path":"downloaded/BccManifest.java","method_name":"accManifest","content":"/**\n     * Get the implicit join path to the <code>oagi.acc_manifest</code> table.\n     */\npublic AccManifest accManifest() {\n        if (_accManifest == null)\n            _accManifest = new AccManifest(this, Keys.BCC_MANIFEST_FROM_ACC_MANIFEST_ID_FK);\n\n        return _accManifest;\n    }"} {"path":"downloaded/BccManifest.java","method_name":"bccpManifest","content":"/**\n     * Get the implicit join path to the <code>oagi.bccp_manifest</code> table.\n     */\npublic BccpManifest bccpManifest() {\n        if (_bccpManifest == null)\n            _bccpManifest = new BccpManifest(this, Keys.BCC_MANIFEST_TO_BCCP_MANIFEST_ID_FK);\n\n        return _bccpManifest;\n    }"} {"path":"downloaded/BccManifest.java","method_name":"bccReplacementBccManifestIdFk","content":"/**\n     * Get the implicit join path to the <code>oagi.bcc_manifest</code> table,\n     * via the <code>bcc_replacement_bcc_manifest_id_fk</code> key.\n     */\npublic BccManifest bccReplacementBccManifestIdFk() {\n        if (_bccReplacementBccManifestIdFk == null)\n            _bccReplacementBccManifestIdFk = new BccManifest(this, Keys.BCC_REPLACEMENT_BCC_MANIFEST_ID_FK);\n\n        return _bccReplacementBccManifestIdFk;\n    }"} {"path":"downloaded/BccManifest.java","method_name":"bccManifestPrevBccManifestIdFk","content":"/**\n     * Get the implicit join path to the <code>oagi.bcc_manifest</code> table,\n     * via the <code>bcc_manifest_prev_bcc_manifest_id_fk</code> key.\n     */\npublic BccManifest bccManifestPrevBccManifestIdFk() {\n        if (_bccManifestPrevBccManifestIdFk == null)\n            _bccManifestPrevBccManifestIdFk = new BccManifest(this, Keys.BCC_MANIFEST_PREV_BCC_MANIFEST_ID_FK);\n\n        return _bccManifestPrevBccManifestIdFk;\n    }"} {"path":"downloaded/BccManifest.java","method_name":"bccManifestNextBccManifestIdFk","content":"/**\n     * Get the implicit join path to the <code>oagi.bcc_manifest</code> table,\n     * via the <code>bcc_manifest_next_bcc_manifest_id_fk</code> key.\n     */\npublic BccManifest bccManifestNextBccManifestIdFk() {\n        if (_bccManifestNextBccManifestIdFk == null)\n            _bccManifestNextBccManifestIdFk = new BccManifest(this, Keys.BCC_MANIFEST_NEXT_BCC_MANIFEST_ID_FK);\n\n        return _bccManifestNextBccManifestIdFk;\n    }"} {"path":"downloaded/BccManifest.java","method_name":"as","content":"/**\n     * Get the implicit join path to the <code>oagi.bcc_manifest</code> table,\n     * via the <code>bcc_manifest_next_bcc_manifest_id_fk</code> key.\n     */\n@Override\n    public BccManifest as(String alias) {\n        return new BccManifest(DSL.name(alias), this);\n    }"} {"path":"downloaded/BccManifest.java","method_name":"as","content":"/**\n     * Get the implicit join path to the <code>oagi.bcc_manifest</code> table,\n     * via the <code>bcc_manifest_next_bcc_manifest_id_fk</code> key.\n     */\n@Override\n    public BccManifest as(Name alias) {\n        return new BccManifest(alias, this);\n    }"} {"path":"downloaded/BccManifest.java","method_name":"as","content":"/**\n     * Get the implicit join path to the <code>oagi.bcc_manifest</code> table,\n     * via the <code>bcc_manifest_next_bcc_manifest_id_fk</code> key.\n     */\n@Override\n    public BccManifest as(Table<?> alias) {\n        return new BccManifest(alias.getQualifiedName(), this);\n    }"} {"path":"downloaded/BccManifest.java","method_name":"rename","content":"/**\n     * Rename this table\n     */\n@Override\n    public BccManifest rename(String name) {\n        return new BccManifest(DSL.name(name), null);\n    }"} {"path":"downloaded/BccManifest.java","method_name":"rename","content":"/**\n     * Rename this table\n     */\n@Override\n    public BccManifest rename(Name name) {\n        return new BccManifest(name, null);\n    }"} {"path":"downloaded/BccManifest.java","method_name":"rename","content":"/**\n     * Rename this table\n     */\n@Override\n    public BccManifest rename(Table<?> name) {\n        return new BccManifest(name.getQualifiedName(), null);\n    }"} {"path":"downloaded/BccManifest.java","method_name":"fieldsRow","content":"/**\n     * Rename this table\n     */\n@Override\n    public Row10<ULong, ULong, ULong, ULong, ULong, ULong, Byte, ULong, ULong, ULong> fieldsRow() {\n        return (Row10) super.fieldsRow();\n    }"} {"path":"downloaded/BccManifest.java","method_name":"mapping","content":"/**\n     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.\n     */\npublic <U> SelectField<U> mapping(Function10<? super ULong, ? super ULong, ? super ULong, ? super ULong, ? super ULong, ? super ULong, ? super Byte, ? super ULong, ? super ULong, ? super ULong, ? extends U> from) {\n        return convertFrom(Records.mapping(from));\n    }"} {"path":"downloaded/BccManifest.java","method_name":"mapping","content":"/**\n     * Convenience mapping calling {@link SelectField#convertFrom(Class,\n     * Function)}.\n     */\npublic <U> SelectField<U> mapping(Class<U> toType, Function10<? super ULong, ? super ULong, ? super ULong, ? super ULong, ? super ULong, ? super ULong, ? super Byte, ? super ULong, ? super ULong, ? super ULong, ? extends U> from) {\n        return convertFrom(toType, Records.mapping(from));\n    }"} {"path":"downloaded/KarmaCommand.java","method_name":"getMatchingCommands","content":"/**\n\t* Get all commands that match a given string.\n\t* @param arg the given string\n\t* @return a list of commands whose patterns match the given string\n\t*/\nprivate List<Command> getMatchingCommands(String arg) {\n        List<Command> result = new ArrayList<Command>();\n        \n        // Grab the commands that match the argument.\n        for (Entry<String,Command> entry : commands.entrySet()) {\n            if (arg.equalsIgnoreCase(entry.getKey())) {\n                result.add(entry.getValue());\n            }\n        }\n        \n        return result;\n    }"} {"path":"downloaded/KarmaCommand.java","method_name":"showUsage","content":"/**\n\t* Show the usage and description messages of a command to a player.\n\t* The usage will only be shown, if the player has permission for the command.\n\t* @param cmd a Command\n\t* @param sender a CommandSender\n\t*/\nprivate void showUsage(Command cmd, CommandSender sender, boolean prefix) {\n        CommandInfo info = cmd.getClass().getAnnotation(CommandInfo.class);\n        if(!PermHandler.hasPerm(sender, info.permission())) return;\n\n        sender.sendMessage((prefix ? \"Usage: \" : \"\") + info.usage() + \" \" + ChatColor.YELLOW + info.desc());\n    }"} {"path":"downloaded/KarmaCommand.java","method_name":"trimFirstArg","content":"/**\n\t* Remove the first argument of a string. This is because the very first\n\t* element of the arguments array will be the command itself.\n\t* @param args an array of length n\n\t* @return the same array minus the first element, and thus of length n-1\n\t*/\nprivate String[] trimFirstArg(String[] args) {\n        return Arrays.copyOfRange(args, 1, args.length);\n    }"} {"path":"downloaded/KarmaCommand.java","method_name":"register","content":"/**\n\t* Register a command.\n\t* The Command's CommandInfo annotation is queried to find its pattern\n\t* string, which is used to map the commands.\n\t* @param c a Command\n\t*/\npublic void register(Class<? extends Command> c) {\n        CommandInfo info = c.getAnnotation(CommandInfo.class);\n        if (info == null) return;\n        \n        try {\n            commands.put(info.pattern(), c.newInstance());\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n    }"} {"path":"downloaded/SpeedCharacteristic.java","method_name":"getComparisonOperator","content":"/**\n     * Gets the value of the comparisonOperator property.\n     * \n     * @return\n     *     possible object is\n     *     {@link ComparisonOperatorEnum }\n     *     \n     */\npublic ComparisonOperatorEnum getComparisonOperator() {\n        return comparisonOperator;\n    }"} {"path":"downloaded/SpeedCharacteristic.java","method_name":"getVehicleSpeed","content":"/**\n     * Gets the value of the vehicleSpeed property.\n     * \n     */\npublic float getVehicleSpeed() {\n        return vehicleSpeed;\n    }"} {"path":"downloaded/SpeedCharacteristic.java","method_name":"getSpeedCharacteristicExtension","content":"/**\n     * Gets the value of the speedCharacteristicExtension property.\n     * \n     * @return\n     *     possible object is\n     *     {@link ExtensionType }\n     *     \n     */\npublic ExtensionType getSpeedCharacteristicExtension() {\n        return speedCharacteristicExtension;\n    }"} {"path":"downloaded/AgentServiceTest.java","method_name":"getRecentlyUsedAgents","content":"/**\n\t *\n\t * Priority of agent selection.\n\t * 1. dedicated agent of recently used.\n\t * 2. dedicated agent.\n\t * 3. public agent of recently used.\n\t * 4. public agent.\n\t *\n\t * */\nprivate Set<AgentInfo> getRecentlyUsedAgents() {\n\t\tSet<AgentInfo> cachedAgents = newHashSet();\n\t\tcachedAgents.add(createAgentInfo(\"test-agent-1\", \"test-region\"));\n\t\tcachedAgents.add(createAgentInfo(\"test-agent-3\", \"test-region\"));\n\t\tcachedAgents.add(createAgentInfo(\"test-agent-5\", \"test-region\"));\n\t\tcachedAgents.add(createAgentInfo(\"test-agent-6\", \"test-region\", TEST_USER_ID));\n\t\treturn cachedAgents;\n\t}"} {"path":"downloaded/AgentServiceTest.java","method_name":"getFreeAgents","content":"/**\n\t *\n\t * Priority of agent selection.\n\t * 1. dedicated agent of recently used.\n\t * 2. dedicated agent.\n\t * 3. public agent of recently used.\n\t * 4. public agent.\n\t *\n\t * */\nprivate Set<AgentInfo> getFreeAgents() {\n\t\tSet<AgentInfo> allFreeAgents = newHashSet();\n\t\t// public agents\n\t\tallFreeAgents.add(createAgentInfo(\"test-agent-1\", \"test-region\"));\n\t\tallFreeAgents.add(createAgentInfo(\"test-agent-2\", \"test-region\"));\n\t\tallFreeAgents.add(createAgentInfo(\"test-agent-3\", \"test-region\"));\n\t\tallFreeAgents.add(createAgentInfo(\"test-agent-4\", \"test-region\"));\n\t\tallFreeAgents.add(createAgentInfo(\"test-agent-5\", \"test-region\"));\n\n\t\t// owned agents\n\t\tallFreeAgents.add(createAgentInfo(\"test-agent-6\", \"test-region\", TEST_USER_ID));\n\t\tallFreeAgents.add(createAgentInfo(\"test-agent-7\", \"test-region\", TEST_USER_ID));\n\t\tallFreeAgents.add(createAgentInfo(\"test-agent-8\", \"test-region\", \"another-user\"));\n\t\tallFreeAgents.add(createAgentInfo(\"test-agent-9\", \"test-region\", \"another-user\"));\n\t\tallFreeAgents.add(createAgentInfo(\"test-agent-10\", \"test-region\", \"another-user\"));\n\t\treturn allFreeAgents;\n\t}"} {"path":"downloaded/AgentServiceTest.java","method_name":"createAgentInfo","content":"/**\n\t *\n\t * Priority of agent selection.\n\t * 1. dedicated agent of recently used.\n\t * 2. dedicated agent.\n\t * 3. public agent of recently used.\n\t * 4. public agent.\n\t *\n\t * */\nprivate AgentInfo createAgentInfo(String name) {\n\t\tAgentInfo agentInfo = new AgentInfo();\n\t\tagentInfo.setIp(\"1.1.1.1\");\n\t\tagentInfo.setName(name);\n\t\treturn agentInfo;\n\t}"} {"path":"downloaded/AgentServiceTest.java","method_name":"createAgentInfo","content":"/**\n\t *\n\t * Priority of agent selection.\n\t * 1. dedicated agent of recently used.\n\t * 2. dedicated agent.\n\t * 3. public agent of recently used.\n\t * 4. public agent.\n\t *\n\t * */\nprivate AgentInfo createAgentInfo(String name, String region) {\n\t\tAgentInfo agentInfo = new AgentInfo();\n\t\tagentInfo.setIp(\"1.1.1.1\");\n\t\tagentInfo.setName(name);\n\t\tagentInfo.setRegion(region);\n\t\treturn agentInfo;\n\t}"} {"path":"downloaded/AgentServiceTest.java","method_name":"createAgentInfo","content":"/**\n\t *\n\t * Priority of agent selection.\n\t * 1. dedicated agent of recently used.\n\t * 2. dedicated agent.\n\t * 3. public agent of recently used.\n\t * 4. public agent.\n\t *\n\t * */\nprivate AgentInfo createAgentInfo(String name, String region, String owner) {\n\t\tAgentInfo agentInfo = createAgentInfo(name, region);\n\t\tAgentControllerIdentityImplementation identityImplementation = new AgentControllerIdentityImplementation(\"\", \"\");\n\t\tidentityImplementation.setOwner(owner);\n\t\tagentInfo.setAgentIdentity(identityImplementation);\n\t\treturn agentInfo;\n\t}"} {"path":"downloaded/Pi3PinTests.java","method_name":"containsPinout","content":"/***************************************************************************\n     * @param pins\n     * @param pinout\n     * @return\n     **************************************************************************/\nprivate static Pi3HeaderPin containsPinout( ArrayList<Pi3HeaderPin> pins, int pinout )\n    {\n        for( Pi3HeaderPin pin : pins )\n        {\n            if( pin.pinout == pinout )\n            {\n                return pin;\n            }\n        }\n\n        return null;\n    }"} {"path":"downloaded/ListingInfoService.java","method_name":"istingInfo> pageFin","content":"/**\n\t * 分页查找信息\n\t * @param map\n\t * @param pageNo\n\t * @param pageSize\n\t * \neturn\n\t */\n\tpublic PageData<ListingInfo> pageFindByCondition(Map<String,Object> map,int pageNo, int pageSize) {\n\t\treturn listingInfoDataSupportService.pageFindByCondition(map, pageNo, p"} {"path":"downloaded/ListingInfoService.java","method_name":"\n\t */\n\tpublic L","content":"/**\n\t * 分页查找信息\n\t * @param map\n\t * @param pageNo\n\t * @param pageSize\n\t * \n * @param map\n\t * @return\n\t */\n\tpublic List<ListingInfo> findByCondition(Map<String,Object> map) {\n\t\treturn listingInfoDataSupport"} {"path":"downloaded/ListingInfoService.java","method_name":"istingGuid\n\t * @","content":"/**\n\t * 分页查找信息\n\t * @param map\n\t * @param pageNo\n\t * @param pageSize\n\t * \n信息\n\t * @param listingGuid\n\t * @return\n\t */\n\tpublic ListingInfo getByListingGuid(String listingGuid) {\n\t\treturn listingInfoData"} {"path":"downloaded/ListingInfoService.java","method_name":"挂牌信息\n\t * ","content":"/**\n\t * 分页查找信息\n\t * @param map\n\t * @param pageNo\n\t * @param pageSize\n\t * \n\n\t * 根据Id查找挂牌信息\n\t * @param id\n\t * @return\n\t */\n\tpublic ListingInfo getLisingInfoById(Integer id) {\n"} {"path":"downloaded/ListingInfoService.java","method_name":"挂牌交易信息\n\t * ","content":"/**\n\t * 分页查找信息\n\t * @param map\n\t * @param pageNo\n\t * @param pageSize\n\t * \n*\n\t * 根据挂牌Id查找挂牌交易信息\n\t * @param listingInfoId\n\t * @return\n\t */\n\tpublic List<ListingTrade> getTradeByListingInfoId(Integer listingInf"} {"path":"downloaded/ListingInfoService.java","method_name":"ST);\n\t\t}\n\t\tlis","content":"/**\n\t * 分页查找信息\n\t * @param map\n\t * @param pageNo\n\t * @param pageSize\n\t * \nISTING_NOT_EXIST);\n\t\t}\n\t\tlistingInfoDataSupportService.deleteListingInfo(listingVo.getId(), listingVo.getVersionNo());\n\t}\n\t/***\n\t * 挂牌产品交易导入\n\t * @param fileInfo\n\t */\n\n\tpublic String listingRecords(List<ListingInfoPo> listing,String createOperatorName)throws Exception  {\n\n\t\t\n\t\t//导入挂牌产品信息\n\t\tString result =listingInfoDataSupportService.listingR"} {"path":"downloaded/FilterResourceFactory.java","method_name":"createResource","content":"/** (non-Javadoc)\n\t * @see org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl#createResource(org.eclipse.emf.common.util.URI)\n\t */\n@Override\n\tpublic Resource createResource(URI uri) {\n\t\treturn new FilterResource(uri);\n\t}"} {"path":"downloaded/RxServiceGenerator.java","method_name":"lx> Clx creat","content":"    /**生成api\n     * @param sClass\n     * @param <Clx>\n     * @return\n*/\n\n    public static <Clx> Clx createService(Class<Clx> sClass) {\n        httpClient.addInterceptor(new Interceptor() {\n            @Override\n            public Response intercept(Chain chain) throws IOException {\n                Request original = chain.request();\n                // Request customization: add request headers\n                Headers headers = original.headers();\n                Request.Builder requestBuilder = original.newBuilder();\n                if (!TextUtils.isEmpty(headers.get(\"token\"))) {\n                    requestBuilder.removeHeader(\"token\");\n                    Request request = requestBuilder.build();\n                    return chain.proceed(request);\n                }\n                return chain.proceed(original);\n            }\n        });\n        return createService(sClass, \"\""} {"path":"downloaded/RxServiceGenerator.java","method_name":"tatic <S> S c","content":"    /**生成api\n     * @param sClass\n     * @param <Clx>\n     * @return\n     */\n    public static <S> S createService(Class<S> sClass, final String token) {\n        //如果要支持 https:\n        /*httpclient.socketFactory(getSSLSocketFactory(context, R.raw.xxx));\n        httpclient.hostnameVerifier(getHostnameVerifier());*/\n\n        if (!httpClient.interceptors().contains(mHttpLoggingInterceptor)) {\n            httpClient.interceptors().clear();\n\n            /******************修改打印方式***********************/\n            mHttpLoggingInterceptor.setPrintLevel(HttpLoggingInterceptor.Level.BODY);\n            mHttpLoggingInterceptor.setColorLevel(Level.INFO);\n\n            httpClient.addInterceptor(mHttpLoggingInterceptor);\n        }\n        httpClient.addInterceptor(new Interceptor() {\n            @Override\n            public Response intercept(Chain chain) throws IOException {\n                Request original = chain.request();\n                Request.Builder requestBuilder = original.newBuilder();\n                if (!TextUtils.isEmpty(token)) {\n                    requestBuilder.header(\"token\", token);\n                }\n                Request request = requestBuilder.build();\n                return chain.proceed(request);\n            }\n        });\n\n        Retrofit retrofit = mBuilder.client(httpClient.build()).build();\n        ret"} {"path":"downloaded/ObjectFactory.java","method_name":"createGetEmployeeById","content":"/**\n     * Create an instance of {@link GetEmployeeById }\n     * \n     */\npublic GetEmployeeById createGetEmployeeById() {\n        return new GetEmployeeById();\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createGetEmployeeByIdResponse","content":"/**\n     * Create an instance of {@link GetEmployeeByIdResponse }\n     * \n     */\npublic GetEmployeeByIdResponse createGetEmployeeByIdResponse() {\n        return new GetEmployeeByIdResponse();\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createAddress","content":"/**\n     * Create an instance of {@link Address }\n     * \n     */\npublic Address createAddress() {\n        return new Address();\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createEntityRemovedException","content":"/**\n     * Create an instance of {@link EntityRemovedException }\n     * \n     */\npublic EntityRemovedException createEntityRemovedException() {\n        return new EntityRemovedException();\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createPerson","content":"/**\n     * Create an instance of {@link Person }\n     * \n     */\npublic Person createPerson() {\n        return new Person();\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createSave","content":"/**\n     * Create an instance of {@link Save }\n     * \n     */\npublic Save createSave() {\n        return new Save();\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createFindAllResponse","content":"/**\n     * Create an instance of {@link FindAllResponse }\n     * \n     */\npublic FindAllResponse createFindAllResponse() {\n        return new FindAllResponse();\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createEntityNotFoundException","content":"/**\n     * Create an instance of {@link EntityNotFoundException }\n     * \n     */\npublic EntityNotFoundException createEntityNotFoundException() {\n        return new EntityNotFoundException();\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createEntityConcurrentModificationException","content":"/**\n     * Create an instance of {@link EntityConcurrentModificationException }\n     * \n     */\npublic EntityConcurrentModificationException createEntityConcurrentModificationException() {\n        return new EntityConcurrentModificationException();\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createEmployee","content":"/**\n     * Create an instance of {@link Employee }\n     * \n     */\npublic Employee createEmployee() {\n        return new Employee();\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createFindAll","content":"/**\n     * Create an instance of {@link FindAll }\n     * \n     */\npublic FindAll createFindAll() {\n        return new FindAll();\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createSaveResponse","content":"/**\n     * Create an instance of {@link SaveResponse }\n     * \n     */\npublic SaveResponse createSaveResponse() {\n        return new SaveResponse();\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createProject","content":"/**\n     * Create an instance of {@link Project }\n     * \n     */\npublic Project createProject() {\n        return new Project();\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createEmailAddress","content":"/**\n     * Create an instance of {@link EmailAddress }\n     * \n     */\npublic EmailAddress createEmailAddress() {\n        return new EmailAddress();\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createGetEmployeeById","content":"/**\n     * Create an instance of {@link JAXBElement }{@code <}{@link GetEmployeeById }{@code >}}\n     * \n     */\n@XmlElementDecl(namespace = \"http://services.employee.it2go.com/\", name = \"getEmployeeById\")\n    public JAXBElement<GetEmployeeById> createGetEmployeeById(GetEmployeeById value) {\n        return new JAXBElement<GetEmployeeById>(_GetEmployeeById_QNAME, GetEmployeeById.class, null, value);\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createGetEmployeeByIdResponse","content":"/**\n     * Create an instance of {@link JAXBElement }{@code <}{@link GetEmployeeByIdResponse }{@code >}}\n     * \n     */\n@XmlElementDecl(namespace = \"http://services.employee.it2go.com/\", name = \"getEmployeeByIdResponse\")\n    public JAXBElement<GetEmployeeByIdResponse> createGetEmployeeByIdResponse(GetEmployeeByIdResponse value) {\n        return new JAXBElement<GetEmployeeByIdResponse>(_GetEmployeeByIdResponse_QNAME, GetEmployeeByIdResponse.class, null, value);\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createAddress","content":"/**\n     * Create an instance of {@link JAXBElement }{@code <}{@link Address }{@code >}}\n     * \n     */\n@XmlElementDecl(namespace = \"http://services.employee.it2go.com/\", name = \"address\")\n    public JAXBElement<Address> createAddress(Address value) {\n        return new JAXBElement<Address>(_Address_QNAME, Address.class, null, value);\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createEntityRemovedException","content":"/**\n     * Create an instance of {@link JAXBElement }{@code <}{@link EntityRemovedException }{@code >}}\n     * \n     */\n@XmlElementDecl(namespace = \"http://services.employee.it2go.com/\", name = \"EntityRemovedException\")\n    public JAXBElement<EntityRemovedException> createEntityRemovedException(EntityRemovedException value) {\n        return new JAXBElement<EntityRemovedException>(_EntityRemovedException_QNAME, EntityRemovedException.class, null, value);\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createPerson","content":"/**\n     * Create an instance of {@link JAXBElement }{@code <}{@link Person }{@code >}}\n     * \n     */\n@XmlElementDecl(namespace = \"http://services.employee.it2go.com/\", name = \"person\")\n    public JAXBElement<Person> createPerson(Person value) {\n        return new JAXBElement<Person>(_Person_QNAME, Person.class, null, value);\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createSave","content":"/**\n     * Create an instance of {@link JAXBElement }{@code <}{@link Save }{@code >}}\n     * \n     */\n@XmlElementDecl(namespace = \"http://services.employee.it2go.com/\", name = \"save\")\n    public JAXBElement<Save> createSave(Save value) {\n        return new JAXBElement<Save>(_Save_QNAME, Save.class, null, value);\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createFindAllResponse","content":"/**\n     * Create an instance of {@link JAXBElement }{@code <}{@link FindAllResponse }{@code >}}\n     * \n     */\n@XmlElementDecl(namespace = \"http://services.employee.it2go.com/\", name = \"findAllResponse\")\n    public JAXBElement<FindAllResponse> createFindAllResponse(FindAllResponse value) {\n        return new JAXBElement<FindAllResponse>(_FindAllResponse_QNAME, FindAllResponse.class, null, value);\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createEntityNotFoundException","content":"/**\n     * Create an instance of {@link JAXBElement }{@code <}{@link EntityNotFoundException }{@code >}}\n     * \n     */\n@XmlElementDecl(namespace = \"http://services.employee.it2go.com/\", name = \"EntityNotFoundException\")\n    public JAXBElement<EntityNotFoundException> createEntityNotFoundException(EntityNotFoundException value) {\n        return new JAXBElement<EntityNotFoundException>(_EntityNotFoundException_QNAME, EntityNotFoundException.class, null, value);\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createEntityConcurrentModificationException","content":"/**\n     * Create an instance of {@link JAXBElement }{@code <}{@link EntityConcurrentModificationException }{@code >}}\n     * \n     */\n@XmlElementDecl(namespace = \"http://services.employee.it2go.com/\", name = \"EntityConcurrentModificationException\")\n    public JAXBElement<EntityConcurrentModificationException> createEntityConcurrentModificationException(EntityConcurrentModificationException value) {\n        return new JAXBElement<EntityConcurrentModificationException>(_EntityConcurrentModificationException_QNAME, EntityConcurrentModificationException.class, null, value);\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createFindAll","content":"/**\n     * Create an instance of {@link JAXBElement }{@code <}{@link FindAll }{@code >}}\n     * \n     */\n@XmlElementDecl(namespace = \"http://services.employee.it2go.com/\", name = \"findAll\")\n    public JAXBElement<FindAll> createFindAll(FindAll value) {\n        return new JAXBElement<FindAll>(_FindAll_QNAME, FindAll.class, null, value);\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createEmployee","content":"/**\n     * Create an instance of {@link JAXBElement }{@code <}{@link Employee }{@code >}}\n     * \n     */\n@XmlElementDecl(namespace = \"http://services.employee.it2go.com/\", name = \"employee\")\n    public JAXBElement<Employee> createEmployee(Employee value) {\n        return new JAXBElement<Employee>(_Employee_QNAME, Employee.class, null, value);\n    }"} {"path":"downloaded/ObjectFactory.java","method_name":"createSaveResponse","content":"/**\n     * Create an instance of {@link JAXBElement }{@code <}{@link SaveResponse }{@code >}}\n     * \n     */\n@XmlElementDecl(namespace = \"http://services.employee.it2go.com/\", name = \"saveResponse\")\n    public JAXBElement<SaveResponse> createSaveResponse(SaveResponse value) {\n        return new JAXBElement<SaveResponse>(_SaveResponse_QNAME, SaveResponse.class, null, value);\n    }"} {"path":"downloaded/SpriteManager.java","method_name":"get","content":"/**\n     * Adds a\n     * @param sprite\n     * @param pos\n     * @throws IndexOutOfBoundsException\n     */\npublic static SpriteInfo get(String name) {\n        return sprites.get(name).next();\n    }"} {"path":"downloaded/KeyStoreDecryptionProvider.java","method_name":"build","content":"/** {@inheritDoc} */\n@Override\n    public final Decrypter build() {\n        val encryptionCredential = this.credentialProvider.getCredential();\n        final KeyInfoCredentialResolver resolver = new StaticKeyInfoCredentialResolver(encryptionCredential);\n        val decrypter = new Decrypter(null, resolver, encryptedKeyResolver);\n        decrypter.setRootInNewDocument(true);\n\n        return decrypter;\n    }"} {"path":"downloaded/BaseHelp.java","method_name":"toBase64","content":"/**\n     * @param\n     * @return\n     * @throws IOException\n     */\npublic static String toBase64(ItemStack item) {\n        try {\n            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n            DataOutputStream dataOutput = new DataOutputStream(outputStream);\n\n            NBTTagList nbtTagListItems = new NBTTagList();\n            NBTTagCompound nbtTagCompoundItem = new NBTTagCompound();\n\n            net.minecraft.server.v1_8_R3.ItemStack nmsItem = CraftItemStack.asNMSCopy(item);\n\n            nmsItem.save(nbtTagCompoundItem);\n\n            nbtTagListItems.add(nbtTagCompoundItem);\n\n            NBTCompressedStreamTools.a(nbtTagCompoundItem, (DataOutput) dataOutput);\n\n            return new BigInteger(1, outputStream.toByteArray()).toString(32);\n        } catch (IOException e){\n            return null;\n        }\n    }"} {"path":"downloaded/BaseHelp.java","method_name":"fromBase64","content":"/**\n     * Item from Base64\n     *\n     * @param data\n     * @return\n     * @throws IOException\n     */\npublic static ItemStack fromBase64(String data) {\n        try {\n            ByteArrayInputStream inputStream = new ByteArrayInputStream(new BigInteger(data, 32).toByteArray());\n\n            NBTTagCompound nbtTagCompoundRoot = NBTCompressedStreamTools.a(new DataInputStream(inputStream));\n\n            net.minecraft.server.v1_8_R3.ItemStack nmsItem = net.minecraft.server.v1_8_R3.ItemStack.createStack(nbtTagCompoundRoot);\n\n            return (ItemStack) CraftItemStack.asBukkitCopy(nmsItem);\n        } catch (IOException f){\n            return null;\n        }\n    }"} {"path":"downloaded/GlobalExceptionAdvice.java","method_name":" JSONObject exce","content":"/**\n     * @Author yangbiao\n     * @Description:全局异常处理\n     * @Date 2018/8/5/005 1\n     */\n    @ExceptionHandler\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    public JSONObject exceptionHandler(Exception e){\n        JSONObject jsonObject = new JSONObject();\n        jsonObject.put(\"status\", HttpStatus.BAD_REQUEST.value());\n        log.info(e.getMessage());\n//        jsonObject.put(\"messages\", \"网络异常\");\n        jsonObject.put(\"messages\", e.getMessage());\n        retu"} {"path":"downloaded/GlobalExceptionAdvice.java","method_name":"us.BAD_REQUEST)\n    pub","content":"/**\n     * @Author yangbiao\n     * @Description:全局异常处理\n     * @Date 2018/8/5/005 1\n @Date 2018/8/5/005 16:15\n     */\n    @ExceptionHandler\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    public JSONObject runtimeExceptionHandler(RuntimeException e){\n        JSONObject jsonObject = new JSONObject();\n        jsonObject.put(\"status\", HttpStatus.BAD_REQUEST.value());\n        log.info(e.getMessage());\n//        jsonObject.put(\"messages\", \"网络错误\");\n        jsonObject.put(\"messages\", e.g"} {"path":"downloaded/GlobalExceptionAdvice.java","method_name":"onHandler\n    @ResponseStatus(","content":"/**\n     * @Author yangbiao\n     * @Description:全局异常处理\n     * @Date 2018/8/5/005 1\n�抛出自定义的异常信息\n     * @Date 2018/8/5/005 16:17\n     */\n    @ExceptionHandler\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    public JSONObject parameterErrorExceptionHandler(ParameterErrorException e){\n        JSONObject jsonObject = new JSONObject();\n        jsonObject.put(\"status\", HttpStatus.BAD_REQUEST.value());\n        "} {"path":"downloaded/GlobalExceptionAdvice.java","method_name":"onHandler\n    @ResponseStatus(HttpStat","content":"/**\n     * @Author yangbiao\n     * @Description:全局异常处理\n     * @Date 2018/8/5/005 1\nject.put(\"messages\", e.getMessage());\n        return jsonObject;\n    }\n\n    @ExceptionHandler\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    public JSONObject methodArgumentNotValidExceptionHandler(MethodArgumentNotValidException e){\n        JSONObject jsonObject = new JSONObject();\n        jsonObject.put(\"status\", HttpStatus.BAD_REQUEST.value());\n        "} {"path":"downloaded/Fuuro.java","method_name":"getType","content":"/**\n\t * get the type\n\t *\n\t * @return type\n\t */\npublic int getType() {\n\t\treturn m_type;\n\t}"} {"path":"downloaded/Fuuro.java","method_name":"getRelation","content":"/**\n\t * get the relationship\n\t *\n\t * @return relationship\n\t */\npublic int getRelation() {\n\t\treturn m_relation;\n\t}"} {"path":"downloaded/Fuuro.java","method_name":"getHais","content":"/**\n\t * get the configuration pie.\n\t *\n\t * @return configuration tiles\n\t */\npublic Hai[] getHais() {\n\t\treturn m_hais;\n\t}"} {"path":"downloaded/Rank.java","method_name":"getName","content":"/**\n     * todoo via java.lang.enum methods!\n     */\n@Override\n    public String getName() {\n        return this.name();\n    }"} {"path":"downloaded/Rank.java","method_name":"resolveRankById","content":"/**\n     * todoo via java.lang.enum methods!\n     *\n     * @throws UnknownEntityException if such id does not exist\n     */\npublic static Rank resolveRankById(int id) {\n        return Arrays.stream(Rank.values())\n                .filter(rank -> rank.getId() == id)\n                .findFirst()\n                .orElseThrow(() -> new UnknownEntityException(\"Rank\", id));\n    }"} {"path":"downloaded/MergeSort.java","method_name":"复杂度 ---- O(n","content":"/**\n\t * 将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。<br/>\n\t * 最差时间复杂度 ---- O(nl\nn)br/> 最优时间复杂度 ---- O(nlogn)<br/>\n\t * 平均时间复杂度 ---- O(nlogn)<br/>\n\t * 空间复杂度 -------- O(n)<br/>\n\t * 稳定性 ------------ 稳定\n\t * \n\t * @param arr\n\t */\n\tpublic static void mergeSortRecursion(int arr[], int left, int right) {\n\t\tif (left == right) // 当"} {"path":"downloaded/JavaTermModifiersModel.java","method_name":"getIntValue","content":"/**\n       *@return internal int value\n       */\npublic int getIntValue()\n     { return modifiers_; }"} {"path":"downloaded/JavaTermModifiersModel.java","method_name":"getAnnotationsList","content":"/**\n       *@return internal int value\n       */\nList<JavaAnnotationInstanceModel> getAnnotationsList()\n     { return annotationsList_; }"} {"path":"downloaded/JavaTermModifiersModel.java","method_name":"getAnnotationsMap","content":"/**\n       *@return internal int value\n       */\nMap<String,JavaAnnotationInstanceModel> getAnnotationsMap()\n     { \n\n         Function<String,Integer> findAnnotationIndexByName=\n                   new Function<String,Integer>(){\n             public Integer function(String s) throws TermWareException {\n              try {   \n                 for(int i=0; i<annotationsList_.size(); ++i) {\n                     JavaAnnotationInstanceModel am=annotationsList_.get(i);\n                     String name=am.getAnnotationModel().getFullName();                    \n                     if (name.equals(s)) {\n                         return i;\n                     }                                             \n                 }\n                 return null;\n              }catch(EntityNotFoundException ex){\n                  throw new AssertException(ex.getMessage(),ex);\n              }\n             }\n         };            \n         \n         Function<Integer,String> findAnnotationNameByIndex=\n                 new Function<Integer,String>(){\n             public String function(Integer i) throws TermWareException {\n                 try {\n                   return annotationsList_.get(i).getAnnotationModel().getFullName();\n                 }catch(EntityNotFoundException ex){\n                     throw new AssertException(ex.getMessage(),ex);\n                 }\n             }\n         };\n         \n         if (annotationsCache_==null) {\n           annotationsCache_=new TreeMap<String,JavaAnnotationInstanceModel>();\n         }\n         \n         return new CachedMap<String,JavaAnnotationInstanceModel>( \n                 annotationsCache_,\n                 new ImmutableListAsMap<String,JavaAnnotationInstanceModel>(\n                   annotationsList_,findAnnotationIndexByName,findAnnotationNameByIndex\n                 )\n                 );\n     }"} {"path":"downloaded/JavaTermModifiersModel.java","method_name":"getModelTerm","content":"/**\n      * Modifiers(AnnotationsList, int)\n      */\npublic Term getModelTerm() throws TermWareException, EntityNotFoundException\n     {\n       Term anl = TermUtils.createNil();\n       List<JavaAnnotationInstanceModel> annotationsList = getAnnotationsList();\n       for(JavaAnnotationInstanceModel anim: annotationsList) {\n           Term ct = anim.getModelTerm();\n           anl=TermUtils.createTerm(\"cons\",ct,anl);           \n       }\n       anl=TermUtils.reverseListTerm(anl);\n       Term iv = TermUtils.createInt(getIntValue());\n       return TermUtils.createTerm(\"Modifiers\",iv,anl);       \n     }"} {"path":"downloaded/LongestSubsequent.java","method_name":"find","content":"/**\n   * The method of main algorithm which calculate the longest subsequent of numbers with difference\n   * 1.\n   *\n   * @param input - input String of numbers.\n   * @return int result of longest subsequent.\n   */\nprivate int find(String input) {\n    int maxSubsequent = 0;\n    int currentSubsequent = 1;\n\n    String[] inputArray = input.split(\" \");\n    List<Integer> numbers = new ArrayList<Integer>();\n\n    for (String s : inputArray) {\n      numbers.add(Integer.parseInt(s));\n    }\n\n    for (int i = 0; i < numbers.size() - 1; i++) {\n      if (Math.abs((numbers.get(i + 1) - numbers.get(i))) == DIFFERENCE) {\n        currentSubsequent++;\n      } else {\n        maxSubsequent = (currentSubsequent > maxSubsequent) ? currentSubsequent : maxSubsequent;\n        currentSubsequent = 1;\n      }\n    }\n\n    maxSubsequent = (currentSubsequent > maxSubsequent) ? currentSubsequent : maxSubsequent;\n\n    return maxSubsequent;\n  }"} {"path":"downloaded/ViewRedditActivity.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\n@TargetApi(isNameExpr.isFieldAccessExpr.isFieldAccessExpr)\n    protected void isMethod(Bundle isParameter) {\n        // isComment\n        isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr);\n        isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr);\n        // isComment\n        isMethod().isMethod(isNameExpr.isFieldAccessExpr);\n        super.isMethod(isNameExpr);\n        isNameExpr = ((Reddinator) isNameExpr.this.isMethod());\n        isNameExpr = isNameExpr.isMethod(isNameExpr.this);\n        isNameExpr = isMethod();\n        // isComment\n        isNameExpr = isMethod();\n        if (isNameExpr != null) {\n            isNameExpr.isMethod(true);\n        }\n        ImageView isVariable = (ImageView) isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr);\n        if (isNameExpr != null) {\n            isNameExpr.isMethod(isIntegerConstant, isIntegerConstant, isIntegerConstant, isIntegerConstant);\n        }\n        // isComment\n        if (isMethod().isMethod() != null && isMethod().isMethod().isMethod(isNameExpr.isFieldAccessExpr)) {\n            // isComment\n            Pattern isVariable = isNameExpr.isMethod(\"isStringConstant\");\n            Matcher isVariable = isNameExpr.isMethod(isMethod().isMethod());\n            if (isNameExpr.isMethod()) {\n                // isComment\n                isNameExpr = isNameExpr.isMethod(isIntegerConstant);\n                isNameExpr = \"isStringConstant\" + isNameExpr.isMethod(isIntegerConstant);\n            } else {\n                isNameExpr.isMethod(this, \"isStringConstant\", isNameExpr.isFieldAccessExpr).isMethod();\n                this.isMethod();\n                return;\n            }\n        } else {\n            // isComment\n            isNameExpr = isMethod().isMethod(isNameExpr.isFieldAccessExpr, -isIntegerConstant);\n            isNameExpr = isMethod().isMethod(isNameExpr.isFieldAccessExpr, -isIntegerConstant);\n            isNameExpr = isMethod().isMethod(isNameExpr.isFieldAccessExpr);\n            isNameExpr = isMethod().isMethod(isNameExpr.isFieldAccessExpr);\n            isNameExpr = isMethod().isMethod(isNameExpr.isFieldAccessExpr);\n            isNameExpr = isMethod().isMethod(isNameExpr.isFieldAccessExpr);\n            // isComment\n            if (isMethod().isMethod(\"isStringConstant\", true)) {\n                isNameExpr = \"isStringConstant\";\n            }\n        }\n        // isComment\n        isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr);\n        // isComment\n        final RedditViewPager isVariable = (RedditViewPager) isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr);\n        isNameExpr = new RedditPageAdapter(isMethod());\n        isNameExpr.isMethod(isNameExpr);\n        LinearLayout isVariable = (LinearLayout) isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr);\n        isNameExpr = new SimpleTabsWidget(isNameExpr.this, isNameExpr);\n        isNameExpr.isMethod(isNameExpr);\n        isNameExpr.isMethod(new ViewPager.OnPageChangeListener() {\n\n            @Override\n            public void isMethod(int isParameter, float isParameter, int isParameter) {\n            }\n\n            @Override\n            public void isMethod(int isParameter) {\n                Fragment isVariable = isNameExpr.isMethod(isNameExpr);\n                if (isNameExpr != null && isNameExpr != null && isNameExpr instanceof TabWebFragment) {\n                    ((TabWebFragment) isNameExpr).isMethod();\n                }\n            }\n\n            @Override\n            public void isMethod(int isParameter) {\n            }\n        });\n        if (isMethod().isMethod(\"isStringConstant\", true) || isNameExpr.isMethod(\"isStringConstant\", true)) {\n            isNameExpr.isMethod(isIntegerConstant);\n        } else {\n            isNameExpr.isMethod(isIntegerConstant);\n        }\n        // isComment\n        isNameExpr = (SlidingUpPanelLayout) isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr);\n        isNameExpr.isMethod(new View.OnClickListener() {\n\n            @Override\n            public void isMethod(View isParameter) {\n                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr);\n            }\n        });\n        isNameExpr = (TextView) isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr);\n        isNameExpr = (TextView) isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr);\n        isNameExpr = (IconTextView) isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr);\n        isNameExpr = (TextView) isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr);\n        isNameExpr = (IconTextView) isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr);\n        isNameExpr = (TextView) isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr);\n        isNameExpr = (TextView) isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr);\n        isNameExpr = (IconTextView) isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr);\n        isNameExpr.isMethod(new View.OnClickListener() {\n\n            @Override\n            public void isMethod(View isParameter) {\n                isNameExpr = !isNameExpr;\n                isNameExpr.isMethod(isNameExpr ? isNameExpr.isMethod(\"isStringConstant\") : isNameExpr.isMethod(\"isStringConstant\"));\n                isNameExpr.isMethod(!isNameExpr);\n            }\n        });\n        isNameExpr = (IconTextView) isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr);\n        isNameExpr.isMethod(new View.OnClickListener() {\n\n            @Override\n            public void isMethod(View isParameter) {\n                isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr);\n                isNameExpr = new LoadPostTask(isNameExpr, isNameExpr.this).isMethod(isNameExpr, \"isStringConstant\");\n            }\n        });\n        isNameExpr = (IconTextView) isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr);\n        // isComment\n        isMethod();\n        // isComment\n        // isComment\n        isNameExpr = new LoadPostTask(isNameExpr, this).isMethod(isNameExpr, \"isStringConstant\");\n        // isComment\n        RateThisApp.Config isVariable = new RateThisApp.Config();\n        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr);\n        isNameExpr.isMethod(isNameExpr);\n    }"} {"path":"downloaded/ViewRedditActivity.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\npublic ThemeManager.Theme isMethod() {\n        return isNameExpr.isFieldAccessExpr.isMethod(\"isStringConstant\");\n    }"} {"path":"downloaded/ViewRedditActivity.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\n@Override\n    public boolean isMethod(Menu isParameter) {\n        MenuInflater isVariable = isMethod();\n        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr);\n        // isComment\n        MenuItem isVariable = (isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr));\n        if (isNameExpr.isFieldAccessExpr.isMethod())\n            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());\n        isNameExpr.isMethod(new IconDrawable(this, isNameExpr.isFieldAccessExpr.isFieldAccessExpr).isMethod(isNameExpr).isMethod());\n        (isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr)).isMethod(new IconDrawable(this, isNameExpr.isFieldAccessExpr.isFieldAccessExpr).isMethod(isNameExpr).isMethod());\n        (isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr)).isMethod(new IconDrawable(this, isNameExpr.isFieldAccessExpr.isFieldAccessExpr).isMethod(isNameExpr).isMethod());\n        (isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr)).isMethod(new IconDrawable(this, isNameExpr.isFieldAccessExpr.isFieldAccessExpr).isMethod(isNameExpr).isMethod());\n        (isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr)).isMethod(new IconDrawable(this, isNameExpr.isFieldAccessExpr.isFieldAccessExpr).isMethod(isNameExpr).isMethod());\n        (isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr)).isMethod(new IconDrawable(this, isNameExpr.isFieldAccessExpr.isFieldAccessExpr).isMethod(isNameExpr).isMethod());\n        (isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr)).isMethod(new IconDrawable(this, isNameExpr.isFieldAccessExpr.isFieldAccessExpr).isMethod(isNameExpr).isMethod());\n        // isComment\n        isNameExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr);\n        isNameExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr);\n        isMethod();\n        // isComment\n        isNameExpr = (isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr));\n        isMethod();\n        return super.isMethod(isNameExpr);\n    }"} {"path":"downloaded/ViewRedditActivity.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\n@Override\n    public boolean isMethod(int isParameter, Menu isParameter) {\n        if (isNameExpr == isNameExpr.isFieldAccessExpr && isNameExpr != null) {\n            if (isNameExpr.isMethod().isMethod().isMethod(\"isStringConstant\")) {\n                try {\n                    Method isVariable = isNameExpr.isMethod().isMethod(\"isStringConstant\", isNameExpr.isFieldAccessExpr);\n                    isNameExpr.isMethod(true);\n                    isNameExpr.isMethod(isNameExpr, true);\n                } catch (NoSuchMethodException isParameter) {\n                    isNameExpr.isFieldAccessExpr.isMethod(\"isStringConstant\");\n                } catch (Exception isParameter) {\n                    throw new RuntimeException(isNameExpr);\n                }\n            }\n        }\n        return super.isMethod(isNameExpr, isNameExpr);\n    }"} {"path":"downloaded/ViewRedditActivity.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\n@Override\n    public boolean isMethod(MenuItem isParameter) {\n        switch(isNameExpr.isMethod()) {\n            case isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr:\n                if (isNameExpr.isMethod(\"isStringConstant\", true)) {\n                    isMethod();\n                } else {\n                    TabWebFragment isVariable = (TabWebFragment) isNameExpr.isMethod(isIntegerConstant);\n                    isNameExpr.isFieldAccessExpr.isMethod();\n                    isNameExpr.isFieldAccessExpr.isMethod(\"isStringConstant\", \"isStringConstant\", \"isStringConstant\");\n                    this.isMethod();\n                }\n                break;\n            case isNameExpr.isFieldAccessExpr.isFieldAccessExpr:\n                isMethod();\n                break;\n            case isNameExpr.isFieldAccessExpr.isFieldAccessExpr:\n                isMethod();\n                break;\n            case isNameExpr.isFieldAccessExpr.isFieldAccessExpr:\n                if (!isNameExpr.isFieldAccessExpr.isMethod()) {\n                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr.this, true);\n                    isNameExpr.isMethod(isNameExpr.this, \"isStringConstant\", isNameExpr.isFieldAccessExpr).isMethod();\n                } else {\n                    Intent isVariable = new Intent(isNameExpr.this, AccountActivity.class);\n                    isMethod(isNameExpr);\n                }\n                break;\n            case isNameExpr.isFieldAccessExpr.isFieldAccessExpr:\n                if (!isNameExpr.isFieldAccessExpr.isMethod()) {\n                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr.this, true);\n                    isNameExpr.isMethod(isNameExpr.this, \"isStringConstant\", isNameExpr.isFieldAccessExpr).isMethod();\n                } else {\n                    Intent isVariable = new Intent(isNameExpr.this, MessagesActivity.class);\n                    if (isNameExpr.isFieldAccessExpr.isMethod() > isIntegerConstant) {\n                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);\n                    }\n                    isMethod(isNameExpr);\n                }\n                break;\n            case isNameExpr.isFieldAccessExpr.isFieldAccessExpr:\n                isMethod();\n                break;\n            case isNameExpr.isFieldAccessExpr.isFieldAccessExpr:\n                isNameExpr.isMethod(this, isNameExpr, isNameExpr);\n                break;\n            case isNameExpr.isFieldAccessExpr.isFieldAccessExpr:\n                // isComment\n                isNameExpr.this.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr));\n                (new SavePostTask(isNameExpr.this, true, new Runnable() {\n\n                    @Override\n                    public void isMethod() {\n                        // isComment\n                        isNameExpr.this.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr));\n                    }\n                })).isMethod(\"isStringConstant\", isNameExpr);\n                break;\n            case isNameExpr.isFieldAccessExpr.isFieldAccessExpr:\n                Intent isVariable = new Intent(isNameExpr.this, SubmitActivity.class);\n                isMethod(isNameExpr);\n                break;\n            case isNameExpr.isFieldAccessExpr.isFieldAccessExpr:\n                Intent isVariable = new Intent(isNameExpr.this, PrefsActivity.class);\n                isNameExpr.isMethod(\"isStringConstant\", true);\n                isMethod(isNameExpr, isIntegerConstant);\n                break;\n            case isNameExpr.isFieldAccessExpr.isFieldAccessExpr:\n                isNameExpr.isMethod(this, true);\n                break;\n            default:\n                return super.isMethod(isNameExpr);\n        }\n        return true;\n    }"} {"path":"downloaded/ViewRedditActivity.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\npublic boolean isMethod() {\n        return isNameExpr;\n    }"} {"path":"downloaded/ViewRedditActivity.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\nprivate void isMethod() {\n        if (isMethod())\n            return;\n        VoteTask isVariable = new VoteTask(isNameExpr, isNameExpr.this, isNameExpr, isIntegerConstant, isNameExpr);\n        isNameExpr = true;\n        isNameExpr.this.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr));\n        isNameExpr.isMethod();\n    }"} {"path":"downloaded/ViewRedditActivity.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\nprivate void isMethod() {\n        if (isMethod())\n            return;\n        VoteTask isVariable = new VoteTask(isNameExpr, isNameExpr.this, isNameExpr, -isIntegerConstant, isNameExpr);\n        isNameExpr = true;\n        isNameExpr.this.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr));\n        isNameExpr.isMethod();\n    }"} {"path":"downloaded/ViewRedditActivity.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\nprivate boolean isMethod() {\n        try {\n            if (isNameExpr != null && isNameExpr.isMethod(\"isStringConstant\")) {\n                isNameExpr.isMethod(this, isNameExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr).isMethod();\n                return true;\n            }\n        } catch (JSONException isParameter) {\n            isNameExpr.isMethod();\n        }\n        return true;\n    }"} {"path":"downloaded/OkapiBM25.java","method_name":"getTFDocument","content":"/**\n     * Returns a score for a single term in the document.\n     *\n     * @param stats     Provides access to corpus-level statistics\n     * @param termFreq\n     * @param docLength\n     */\n@Override\n    protected double getTFDocument(BasicStats stats, float termFreq, float docLength) {\n        return ((k1 + 1) * termFreq / (k1 * (1 - b +\n                b * docLength / stats.getAvgFieldLength()) + termFreq));\n    }"} {"path":"downloaded/OkapiBM25.java","method_name":"getIDFDocument","content":"/**\n     * Returns a score for a single term in the document.\n     *\n     * @param stats     Provides access to corpus-level statistics\n     * @param termFreq\n     * @param docLength\n     */\n@Override\n    protected double getIDFDocument(BasicStats stats) {\n        return Math.log((stats.getNumberOfDocuments() - stats.getDocFreq() + 0.5)\n                / (stats.getDocFreq() + 0.5));\n    }"} {"path":"downloaded/OkapiBM25.java","method_name":"getTFQuery","content":"/**\n     * Returns a score for a single term in the document.\n     *\n     * @param stats     Provides access to corpus-level statistics\n     * @param termFreq\n     * @param docLength\n     */\n@Override\n    protected double getTFQuery(BasicStats stats) {\n        int queryFrequency = 1;\n        return (double) ((k2 + 1) * queryFrequency / (k2 + queryFrequency));\n    }"} {"path":"downloaded/OkapiBM25.java","method_name":"getK1","content":"/**\n     * Returns a score for a single term in the document.\n     *\n     * @param stats     Provides access to corpus-level statistics\n     * @param termFreq\n     * @param docLength\n     */\npublic double getK1() {\n        return k1;\n    }"} {"path":"downloaded/OkapiBM25.java","method_name":"getK2","content":"/**\n     * Returns a score for a single term in the document.\n     *\n     * @param stats     Provides access to corpus-level statistics\n     * @param termFreq\n     * @param docLength\n     */\npublic double getK2() {\n        return k2;\n    }"} {"path":"downloaded/OkapiBM25.java","method_name":"getB","content":"/**\n     * Returns a score for a single term in the document.\n     *\n     * @param stats     Provides access to corpus-level statistics\n     * @param termFreq\n     * @param docLength\n     */\npublic double getB() {\n        return b;\n    }"} {"path":"downloaded/OkapiBM25.java","method_name":"toString","content":"/**\n     * Returns a score for a single term in the document.\n     *\n     * @param stats     Provides access to corpus-level statistics\n     * @param termFreq\n     * @param docLength\n     */\n@Override\n    public String toString() {\n        return \"Okapi BM25\";\n    }"} {"path":"downloaded/PostProcessorsRegistry.java","method_name":"applyPostProcessing","content":"/**\n     * Applies all registered post-processors on a given Problem, in prioritized order.\n     *\n     * @param problem Original Problem produced by Exception Mapper\n     * @param context Additional info on cause (original exception caught by ExceptionMapper) and HTTP request\n     * @return Enhanced version of original Problem\n     */\npublic Problem applyPostProcessing(Problem problem, ProblemContext context) {\n        Problem finalProblem = problem;\n        for (ProblemPostProcessor processor : processors) {\n            finalProblem = processor.apply(finalProblem, context);\n        }\n        return finalProblem;\n    }"} {"path":"downloaded/CombineCallableBed.java","method_name":"getCallableHashMap","content":"/**\n\t * @param fileLocation\n\t * @param chromoSomeRead\n\t */\npublic HashMap<String, ArrayList<Integer>> getCallableHashMap() {\n\t\treturn callableHashMap;\n\t}"} {"path":"downloaded/DataUtils.java","method_name":"c static LinkedList<","content":"/***\n     * 生成模拟的活动数据，用于首页的�\n    *\n     * @return\n     */\n\n    public static LinkedList<ActivityItem> genMockActivityItems()\n    {\n        LinkedList<ActivityItem> items = new LinkedList<>();\n        ActivityItem item0 = new ActivityItem(\"最热人气TOP榜\", \"男款超轻跑鞋\", \"84\", \"169\", \"279\", \"ic_shoe_0\", true);\n        ActivityItem item1 = new ActivityItem(\"最热人气TOP榜\", \"女款超轻跑鞋\", \"99\", \"169\", \"299\", \"ic_shoe_1\", false);\n        ActivityItem item2 = new ActivityItem(\"热销爆款\", \"时尚复古跑鞋\", \"84\", \"169\", \"279\", \"ic_shoe_2\", true);\n        ActivityItem item3 = new ActivityItem(\"热销爆款\", \"男鞋秋冬复古跑步鞋\", \"78\", \"169\", \"189\", \"ic_shoe_3\", false);\n       "} {"path":"downloaded/DataUtils.java","method_name":"   return items;\n","content":"/***\n     * 生成模拟的活动数据，用于首页的�\n       items.add(item3);\n        return items;\n    }\n\n    /***\n     * 生成模拟的商品数据，用于展示和搜索结果\n     *\n     * @return\n     */\n    public static List<GoodsItem> genMockGoodsItems()\n    {\n        LinkedList<GoodsItem> items = new LinkedList<>();\n        GoodsItem item0 = new GoodsItem(\"跑步系列\", \"2015新款秋季网面复古慢跑鞋\", \"52\", \"179\", \"319\", \"ic_goods_shoe_0\", 0, true);\n        GoodsItem item1 = new GoodsItem(\"跑步系列\", \"2015新款秋季跑鞋时尚赛车鞋361阿甘跑步鞋\", \"67\", \"109\", \"269\", \"ic_goods_shoe_1\", 0, true);\n        GoodsItem item2 = new GoodsItem(\"跑步系列\", \"2015新款秋季网布跑步鞋361男轻便慢跑鞋\", \"88\", \"169\", \"329\", \"ic_goods_shoe_2\", 0, false);\n        GoodsItem item3 = new GoodsItem(\"跑步系列\", \"2015新款秋季跑鞋时尚赛车鞋361阿甘跑步鞋\", \"88\", \"109\", \"269\", \"ic_goods_shoe_3\", 0, false);\n        GoodsItem item4 = new GoodsItem(\"运动休闲\", \"2015年秋季新款连帽开襟运动休闲男子卫衣\", \"52\", \"109\", \"319\", \"ic_goods_clothes_0\", 1, true);\n        GoodsItem item5 = new GoodsItem(\"运动休闲\", \"2015年秋季新款连帽开襟运动休闲男子卫衣\", \"55\", \"109\", \"319\", \"ic_goods_clothes_1\", 1, true);\n        GoodsItem item6 = new GoodsItem(\"运动休闲\", \"2015年秋季新款连帽开襟运动休闲男子卫衣\", \"40\", \"109\", \"319\", \"ic_goods_clothes_2\", 1, false);\n        GoodsItem item7 = new GoodsItem(\"运动休闲\", \"2015年秋季新款连帽开襟运动休闲男子卫衣\", \"98\", \"109\", \"319\", \"ic_goods_clothes_3\", 1, false);\n        GoodsItem item8 = new GoodsItem(\"保暖系列\", \"361度女装EASY HEAT 轻薄暖运动羽绒服新款\", \"85\", \"169\", \"319\", \"ic_goods_clothes_4\", 2, true);\n        GoodsItem item9 = new GoodsItem(\"保暖系列\", \"361度女装EASY HEAT 轻薄暖运动羽绒服新款\", \"85\", \"169\", \"319\", \"ic_goods_clothes_5\", 2, true);\n        item0.typeTextColor = 0xFFF8A85B;\n        item1.typeTextColor = 0xFFF8A85B;\n        item2.typeTextColor = 0xFFF8A85B;\n        item3.typeTextColor = 0xFFF"} {"path":"downloaded/DataUtils.java","method_name":"F5ECC41;\n        item","content":"/***\n     * 生成模拟的活动数据，用于首页的�\n\n        item4.typeTextColor = 0xFF5ECC41;\n        item5.typeTextColor = 0xFF5ECC41;\n        item6.typeTextColor = 0xFF5ECC41;\n        item7.typeTextColor = 0xFF5ECC41;\n        item8.typeTextColor = 0XFFD96EBA;\n        item9.typeTextColor = 0XFFD96EBA;\n        items.add(item0);\n        items.add(item1);\n        items.add(item2);\n        items.add(item3);\n        items.add(item4);\n        items.add(item5);\n        items.add(item6);\n        items.add(item7);\n        items.add(item8);\n        items.add(item9);\n        return items;\n    }\n\n    public static List<CommunityItem> genMockCommunityItems()\n    {\n        LinkedList<CommunityItem> communityItems = new LinkedList<>();\n        communityItems.add(new CommunityItem());//标题\n        CommunityItem item0 = new CommunityItem(\"推荐\", R.mipmap.ic_community_recommended, \"361度最经济实惠，穿着跑步很舒服，鞋型非常非常帅气鞋子质量很好\", R.mipmap.ic_community_header, \"张三\", \"5分钟前\", \"100\", \"200\", \"300\", true, 0xFFFD844C);\n        CommunityItem item1 = new CommunityItem(\"推荐\", R.mipmap.ic_community_recommended, \"361度最经济实惠，穿着跑步很舒服，鞋型非常非常帅气鞋子质量很好\", R.mipmap.ic_community_header, \"张三\", \"今天14:20\", \"100\", \"200\", \"300\", false);\n        CommunityItem item2 = new CommunityItem(\"最新\", R.mipmap.ic_com"} {"path":"downloaded/SelectedGeofence.java","method_name":"observeSelectedGeofence","content":"/**\n     * @return Observable that returns the selected Geofence.\n     * This will include the dummy Geofence returned if there is\n     * currently no selected Geofence. This can then be used to know\n     * if a Geofence is selected or not.\n     */\npublic Observable<SelectedGeofenceState> observeSelectedGeofence() {\n        return geofenceStateObservable;\n    }"} {"path":"downloaded/SelectedGeofence.java","method_name":"observeValidSelectedGeofence","content":"/**\n     * @return Observable that will only emit a new item once a\n     * valid existing geofence has been selected.\n     */\npublic Observable<Geofence> observeValidSelectedGeofence() {\n        return observeSelectedGeofence()\n                .filter(SelectedGeofenceState::validGeofence)\n                .map(SelectedGeofenceState::geofence);\n    }"} {"path":"downloaded/SelectedGeofence.java","method_name":"delete","content":"/**\n     * @return Observable that will only emit a new item once a\n     * valid existing geofence has been selected.\n     */\npublic Single<Boolean> delete() {\n        if (!selectedGeofenceId.isGeofenceSelected()) {\n            return Single.just(false);\n        }\n\n        return geofenceManager.removeGeofence(selectedGeofenceId.selectedGeofenceId())\n                .doOnSuccess(successfullyDeletedGeofence -> {\n                    if (successfullyDeletedGeofence) {\n                        selectedGeofenceId.setNoSelection();\n                    }\n                });\n    }"} {"path":"downloaded/CurrentdirHelper.java","method_name":"static F","content":"/**\n\t * 返回 classes/专项开发\n\t * \neturn\n\t */\n\tpublic static File getZxdir(){\n\t\treturn new File(getappDir(),\"classe"} {"path":"downloaded/CurrentdirHelper.java","method_name":"\tpublic s","content":"/**\n\t * 返回 classes/专项开发\n\t * \n�项开发\");\n\t}\n\n\n\tpublic static File getLibdir(){\n\t\treturn new File(ge"} {"path":"downloaded/CurrentdirHelper.java","method_name":"\tpublic sta","content":"/**\n\t * 返回 classes/专项开发\n\t * \npDir(),\"lib\");\n\t}\n\n\tpublic static File getClassdir(){\n\t\treturn new File(getapp"} {"path":"downloaded/PushMessage.java","method_name":"getAccessToken","content":"/**\n\t   * Retrieve a valid access token that can be use to authorize requests to the FCM REST\n\t   * API.\n\t   *\n\t   * @return Access token.\n\t   * @throws IOException\n\t   */\nprivate static String getAccessToken() throws IOException {\n\t\t  \t\n\t\t  GoogleCredential googleCredential = GoogleCredential\n\t        .fromStream(new FileInputStream(path))\n\t        .createScoped(Arrays.asList(SCOPES));\n\t\t  \tgoogleCredential.refreshToken();\n\t\t  \treturn googleCredential.getAccessToken();\n\t}"} {"path":"downloaded/PushMessage.java","method_name":"sendFcmPush","content":"/**\n\t   * Retrieve a valid access token that can be use to authorize requests to the FCM REST\n\t   * API.\n\t   *\n\t   * @return Access token.\n\t   * @throws IOException\n\t   */\npublic static Map<String, Object> sendFcmPush(Map<String, Object> m) throws Exception {\n\t\t\n\t\tMap<String, Object> resultMap = new HashMap<String, Object>();\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"content-type\" , \"application/json; UTF-8\");\n        headers.add(\"Authorization\", \"Bearer \" + getAccessToken());\n        \n        JSONObject notification = new JSONObject();\n        notification.put(\"body\", m.get(\"body\").toString());\n        notification.put(\"title\", m.get(\"title\").toString());\n        \n        JSONObject message = new JSONObject();\n        message.put(\"token\", m.get(\"token\").toString());\n        message.put(\"notification\", notification);\n        \n        JSONObject jsonParams = new JSONObject();\n        jsonParams.put(\"message\", message);\n        \n        HttpEntity<JSONObject> httpEntity = new HttpEntity<JSONObject>(jsonParams, headers);\n        RestTemplate rt = new RestTemplate();    \n        \n\t\t try {    \n\t\t\t \t        \n\t            \n\t            ResponseEntity<String> res = rt.exchange(\"https://fcm.googleapis.com/v1/projects/push-test-f254f/messages:send\"\n\t                    , HttpMethod.POST\n\t                    , httpEntity\n\t                    , String.class);\n\t        \n\t\t\t\t\n\t\t\t\t  if (res.getStatusCode() != HttpStatus.OK) { \n\t\t\t\t\t  resultMap.put(\"result\", \"FAILURE\");\n\t\t\t\t  \n\t\t\t\t  } else { \n\t\t\t\t\t  resultMap.put(\"result\", \"SUCCESS\");\n\t\t\t\t  \n\t\t\t\t  }\n\t\t\t\t \n\t        } catch (Exception e) {\n\t\t\t\t  resultMap.put(\"result\", \"FAILURE\");\n\t        }\n\t   return resultMap;\n\t}"} {"path":"downloaded/PushMessage.java","method_name":"sendFcmDataPush","content":"/**\n\t   * Retrieve a valid access token that can be use to authorize requests to the FCM REST\n\t   * API.\n\t   *\n\t   * @return Access token.\n\t   * @throws IOException\n\t   */\npublic static Map<String, Object> sendFcmDataPush(Map<String, Object> m) throws Exception {\n\t\t\n\t\tMap<String, Object> resultMap = new HashMap<String, Object>();\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"content-type\" , \"application/json; UTF-8\");\n        headers.add(\"Authorization\", \"Bearer \" + getAccessToken());\n                \n        JSONObject message = new JSONObject();\n        message.put(\"token\", m.get(\"token\").toString());\n        message.put(\"data\", m.get(\"data\"));\n        \n        JSONObject jsonParams = new JSONObject();\n        jsonParams.put(\"message\", message);\n        \n        HttpEntity<JSONObject> httpEntity = new HttpEntity<JSONObject>(jsonParams, headers);\n        RestTemplate rt = new RestTemplate();    \n        \n\t\t try {    \n\t\t\t \t        \n\t            \n\t            ResponseEntity<String> res = rt.exchange(\"https://fcm.googleapis.com/v1/projects/push-test-f254f/messages:send\"\n\t                    , HttpMethod.POST\n\t                    , httpEntity\n\t                    , String.class);\n\t        \n\t\t\t\t\n\t\t\t\t  if (res.getStatusCode() != HttpStatus.OK) { \n\t\t\t\t\t  resultMap.put(\"result\", \"FAILURE\");\n\t\t\t\t  \n\t\t\t\t  } else { \n\t\t\t\t\t  resultMap.put(\"result\", \"SUCCESS\");\n\t\t\t\t  \n\t\t\t\t  }\n\t\t\t\t \n\t        } catch (Exception e) {\n\t\t\t\t  resultMap.put(\"result\", \"FAILURE\");\n\t        }\n\t   return resultMap;\n\t}"} {"path":"downloaded/ICEvent.java","method_name":"getTypeIndexID","content":"/** @generated  */\npublic              int getTypeIndexID() {return typeIndexID;}"} {"path":"downloaded/ICEvent.java","method_name":"getLabel","content":"/** getter for label - gets \n   * @generated */\npublic String getLabel() {\n    if (ICEvent_Type.featOkTst && ((ICEvent_Type)jcasType).casFeat_label == null)\n      jcasType.jcas.throwFeatMissing(\"label\", \"org.oaqa.model.ICEvent\");\n    return jcasType.ll_cas.ll_getStringValue(addr, ((ICEvent_Type)jcasType).casFeatCode_label);}"} {"path":"downloaded/OpExtendInfoBckup.java","method_name":"ncrementalEnum incremental;","content":"/**\n     * 应用一致性备份状态；0:非�\nremental\")\n\n    private IncrementalEnum incremental;\n\n    public OpExtendInfoBckup withAppConsistencyErrorCode(String appConsistencyErrorCode) {\n        this.appConsistencyError"} {"path":"downloaded/OpExtendInfoBckup.java","method_name":"见[错误码](ErrorCode.x","content":"/**\n     * 应用一致性备份状态；0:非�\n��码。请参见[错误码](ErrorCode.xml)。\n     * @return appConsistencyErrorCode\n    "} {"path":"downloaded/OpExtendInfoBckup.java","method_name":"      this.appConsistencyError","content":"/**\n     * 应用一致性备份状态；0:非�\nonsistencyErrorCode) {\n        this.appConsistencyErrorCode = appConsistencyErrorCode;\n    }\n\n    public OpExtendInfoBckup withAppConsistencyErrorMessage(String appConsistencyErrorMessage) "} {"path":"downloaded/OpExtendInfoBckup.java","method_name":"}\n\n    /**\n     * 应用一�","content":"/**\n     * 应用一致性备份状态；0:非�\nurn this;\n    }\n\n    /**\n     * 应用一致性备份错误信息\n     * @return appConsistencyE"} {"path":"downloaded/OpExtendInfoBckup.java","method_name":"rorMessage) {\n        th","content":"/**\n     * 应用一致性备份状态；0:非�\ne(String appConsistencyErrorMessage) {\n        this.appConsistencyErrorMessage = appConsistencyErrorMessage;\n    }\n\n    public OpExtendInfoBckup withAppConsistencyStatus(AppConsistenc"} {"path":"downloaded/OpExtendInfoBckup.java","method_name":"/**\n     * 应用一致","content":"/**\n     * 应用一致性备份状态；0:非�\n        return this;\n    }\n\n    /**\n     * 应用一致性备份状态；0:非应用一致性，1：�"} {"path":"downloaded/OpExtendInfoBckup.java","method_name":"id setAppCon","content":"/**\n     * 应用一致性备份状态；0:非�\ntus;\n    }\n\n    public void setAppConsistencyStatus(AppConsistencyStatusEnum appConsistencyStatus) {\n        this.app"} {"path":"downloaded/OpExtendInfoBckup.java","method_name":"kup withBac","content":"/**\n     * 应用一致性备份状态；0:非�\nOpExtendInfoBckup withBackupId(String backupId) {\n        th"} {"path":"downloaded/OpExtendInfoBckup.java","method_name":"ublic String g","content":"/**\n     * 应用一致性备份状态；0:非�\nrn backupId\n     */\n    public String getBackupId() {\n        return backupId;\n    }\n\n    public void setBackupId(String back"} {"path":"downloaded/OpExtendInfoBckup.java","method_name":"kup withBacku","content":"/**\n     * 应用一致性备份状态；0:非�\nOpExtendInfoBckup withBackupName(String backupName) {\n        th"} {"path":"downloaded/OpExtendInfoBckup.java","method_name":"c String getBac","content":"/**\n     * 应用一致性备份状态；0:非�\nkupName\n     */\n    public String getBackupName() {\n        return backupName;\n    }\n\n    public void setBackupName(String backupName) {\n "} {"path":"downloaded/OpExtendInfoBckup.java","method_name":"ntal(Increment","content":"/**\n     * 应用一致性备份状态；0:非�\nndInfoBckup withIncremental(IncrementalEnum incremental) {\n        this.inc"} {"path":"downloaded/OpExtendInfoBckup.java","method_name":"tIncre","content":"/**\n     * 应用一致性备份状态；0:非�\n    public IncrementalEnum getIncremental() {\n        return incremental;\n    }\n\n    public void setIncremental(IncrementalEnum incremental) {\n        this.incremental = incremental;\n    }\n\n    @Override\n    public boolean equals(java.lang.Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null || getClass() != obj.getClass()) {\n            return false;\n        }\n        OpExtendInfoBckup that = (OpExtendInfoBckup) obj;\n        return Objects.equals(this.appConsistencyErrorCode, that.appConsistencyErrorCode)\n            && Objects.equals(this.appConsistencyErrorMessage, that.appConsistencyErrorMessage)\n            && Objects.equals(this.appConsistencyStatus, that.appConsisten"} {"path":"downloaded/OpExtendInfoBckup.java","method_name":"s.equals","content":"/**\n     * 应用一致性备份状态；0:非�\nus)\n            && Objects.equals(this.backupId, that.backupId) && Objects.equals(this.backupName, that.backupName)\n            && Objects.equals(this.incremental, that.incremental);\n    }\n\n    @Override\n    public int hashCode() {\n        re"} {"path":"downloaded/OpExtendInfoBckup.java","method_name":"rorCode,","content":"/**\n     * 应用一致性备份状态；0:非�\nbjects.hash(appConsistencyErrorCode,\n            appConsistencyErrorMessage,\n            appConsistencyStatus,\n            backupId,\n            backupName,\n            incremental);\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"class OpExtendInfoBckup {\\n\");\n        sb.append(\"    appConsistencyErrorCode: \").append(toIndentedString(appConsistencyErrorCode)).append(\"\\n\");\n        sb.append(\"    appConsistencyErrorMessage: \").append(toIndentedString(appConsistencyErrorMessage)).append(\"\\n\");\n        sb.append(\"    appConsistencyStatus: \").append(toIndentedString(appConsistencyStatus)).append(\"\\n\");\n        sb.append(\"    backupId: \").append(toIndentedString(backupId)).append(\"\\n\");\n        sb.append(\"    backupName: \").append("} {"path":"downloaded/OpExtendInfoBckup.java","method_name":"ppend(\"}\");\n    ","content":"/**\n     * 应用一致性备份状态；0:非�\n);\n        sb.append(\"}\");\n        return sb.toString();\n    }\n\n    /**\n     * Convert the given object to string with each line indented by 4 spaces\n     * (except the first"} {"path":"downloaded/Output.java","method_name":"scan","content":"/** Output gates display their inputs on the output display once\n\t *  every simulated time unit and perform no useful computation.\n\t */\npublic static Gate scan( Scanner sc ) {\n\t\t/** This is the public initializer for output gates,\n\t\t *  it reads the gate description using the given scanner\n\t\t *  and returns the handle for the newly initialized gate.\n\t\t */\n\t\t// just once, fire up the initial event\n\t\tif (outputList.isEmpty()) {\n\t\t\tSimulator.schedule(\n\t\t\t\t1,\n\t\t\t\t(float time) -> displayHeaders( time )\n\t\t\t);\n\t\t}\n\n\t\t// now do the scan as for any other gate\n\t\tOutput g = new Output();\n\t\tg.scan( sc, inputs );\n\t\tif (g.name == null) g = null;\n\n\t\t// and finally, remember this in the output list\n\t\tif (g != null) outputList.add( g );\n\t\treturn g;\n\t}"} {"path":"downloaded/Output.java","method_name":"toString","content":"/** Output gates display their inputs on the output display once\n\t *  every simulated time unit and perform no useful computation.\n\t */\npublic String toString() {\n\t\t/** Convert an output gate back to its textual description.\n\t\t */\n\t\treturn \"gate output \" + name + ' ' + delay;\n\t}"} {"path":"downloaded/DispatcherListener.java","method_name":"lineParsed","content":"/**\n     * Receive a parsing event and invoke the associated listener, if any.\n     * \n     * @see org.sadun.text.ffp.FlatFileParser.Listener#lineParsed(org.sadun.text.ffp.LineFormat,\n     *      int, int, java.lang.String[])\n     */\npublic final void lineParsed(LineFormat format, int logicalLinecount,\n            int physicalLineCount, String[] values) throws AbortFFPException {\n        for (Iterator i = associatedLineFormats.iterator(); i.hasNext();) {\n            Association a = (Association) i.next();\n            if (format.equals(a.getLineFormat())) {\n                a.getListener().lineParsed(format, logicalLinecount,\n                        physicalLineCount, values);\n                return;\n            } \n        } \n        if (!allowLostEvents)\n            throw new NoAssociatedListenerException(format, logicalLinecount,\n                    physicalLineCount, values);\n\n    }"} {"path":"downloaded/DispatcherListener.java","method_name":"isAllowLostEvents","content":"/**\n     * If <tt>true</tt>, the dispatcher allows parsing events which are not\n     * associated to any listener to be ignored; otherwise, events which are not\n     * associated to any listener will raise a\n     * {@link NoAssociatedListenerException} .\n     * \n     * @return Return whether or not the dispatcher allows parsing events which\n     *         are not associated to any listener to be ignored.\n     */\npublic boolean isAllowLostEvents() {\n        return allowLostEvents;\n    }"} {"path":"downloaded/DispatcherListener.java","method_name":"getLineFormat","content":"/**\n         * @return Returns the associated LineFormat.\n         */\npublic LineFormat getLineFormat() {\n            return lineFormat;\n        }"} {"path":"downloaded/DispatcherListener.java","method_name":"getListener","content":"/**\n         * @return Returns the associated Listener.\n         */\npublic FlatFileParser.Listener getListener() {\n            return Listener;\n        }"} {"path":"downloaded/9_7084cf70e17c6984021196020e468b78c4ae1309_XmlWorkerUserstats_t.java","method_name":"getXML","content":"/**\n \t * Instantiates a new xml worker userstats.\n \t */\npublic String getXML(Map<String, List<String>> parameters) {\n \t\ttry {\n \t\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n \t\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n \t\t\tDocument doc = builder.newDocument();\n \t\t\tDOMSource source = new DOMSource(doc);\n \t\t\tStringWriter writer = new StringWriter();\n \t\t\tStreamResult result = new StreamResult(writer);\n \t\t\tTransformerFactory tf = TransformerFactory.newInstance();\n \t\t\tTransformer transformer = tf.newTransformer();\n \t\t\t\n \t\t\tElement root = doc.createElement(\"stats\");\n \t\t\tdoc.appendChild(root);\n \t\t\t\n \t\t\t/*\n \t\t\t * Hier wird das XML aufgebaut\n \t\t\t */\n \t\t\tif (!parameters.containsKey(\"player\")){\n \t\t\t\t// Generate a summarized XML\n \t\t\t\t\n \t\t\t\troot.appendChild(getAddedUpStatsElement(doc));\n \t\t\t\t\n \t\t\t}\n \t\t\telse {\n \t\t\t\t// Generate the XML for the given user(s)\n \t\t\t\tfor(String playerName : statsDS.fetchAllPlayers()){\n\t\t\t\t\tif (parameters.containsKey(\"player\") && parameters.get(\"player\").contains(playerName.toLowerCase())){\n \t\t\t\t\t\troot.appendChild(getPlayerElement(playerName, doc));\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t\t\n \t\t\t/*\n \t\t\t * Hier endet der XML-Aufbau\n \t\t\t */\n \t\t\t\n \t\t\ttransformer.transform(source, result);\n \t\t\treturn writer.toString();\n \t\t} \n \t\t\n \t\tcatch (Exception e){\n \t\t\tStats.log.log(Level.SEVERE, \"Something went terribly wrong!\");\n \t\t\tStats.log.log(Level.SEVERE, e.getMessage());\n \t\t}\n \t\t\n \t\treturn \"\";\n \t}"} {"path":"downloaded/9_7084cf70e17c6984021196020e468b78c4ae1309_XmlWorkerUserstats_t.java","method_name":"getPlayerElement","content":"/**\n \t * Build a XML subtree for the given player.\n \t *\n \t * @param playerName the player name\n \t * @param doc the doc\n \t * @return \t\t\t\tReturns a XML subtree for the given playerName.\n \t */\nprivate Element getPlayerElement(String playerName, Document doc){\n \t\tPlayerStat player_stats = statsDS.getPlayerStat(playerName);\n \t\t\n \t\tElement elem_player = doc.createElement(\"player\");\n \t\telem_player.setAttribute(\"name\", playerName);\n \t\t\n \t\tfor(String catName : player_stats.getCats()){\n \t\t\tCategory cat = player_stats.get(catName);\n \t\t\tElement elem_cat = doc.createElement(\"category\");\n \t\t\telem_cat.setAttribute(\"name\", catName);\n \t\t\t\t\n \t\t\tfor(String valName : cat.stats.keySet()){\n \t\t\t\tint value = cat.get(valName);\n \t\t\t\tElement elem_value = doc.createElement(\"stat\");\n \t\t\t\t\n \t\t\t\telem_value.setAttribute(\"name\", valName);\n \t\t\t\t\n \t\t\t\tif (Arrays.asList(resolveCats).contains(catName)){\n \t\t\t\t\telem_value.setAttribute(\"id\", String.valueOf(itemResolver.getItem(valName)));\n \t\t\t\t}\n \t\t\t\telem_value.setAttribute(\"value\", String.valueOf(value));\n \t\t\t\t\n \t\t\t\telem_cat.appendChild(elem_value);\n \t\t\t}\n \t\t\t\n \t\t\t\n \t\t\telem_player.appendChild(elem_cat);\n \t\t}\n \t\treturn elem_player;\n \t}"} {"path":"downloaded/9_7084cf70e17c6984021196020e468b78c4ae1309_XmlWorkerUserstats_t.java","method_name":"getAddedUpStatsElement","content":"/**\n \t * Build a XML subtree for the given player.\n \t *\n \t * @param playerName the player name\n \t * @param doc the doc\n \t * @return \t\t\t\tReturns a XML subtree for the given playerName.\n \t */\nprivate Element getAddedUpStatsElement(Document doc){\n \t\tHashMap<String, HashMap<String, Integer>> addedStats = statsDS.getAddedStats();\n \t\t\n \t\tElement elem_player = doc.createElement(\"player\");\n \t\telem_player.setAttribute(\"name\", \"*\");\n \t\t\n \t\tfor (String catName : addedStats.keySet()){\n \t\t\tElement elem_cat = doc.createElement(\"category\");\n \t\t\telem_cat.setAttribute(\"name\", catName);\n \t\t\t\t\n \t\t\tfor(String entryName : addedStats.get(catName).keySet()){\n \t\t\t\tElement elem_stat = doc.createElement(\"stat\");\n \t\t\t\telem_stat.setAttribute(\"name\", entryName);\n \t\t\t\t\t\n \t\t\t\tif(Arrays.asList(resolveCats).contains(catName)){\n \t\t\t\t\telem_stat.setAttribute(\"id\", String.valueOf(itemResolver.getItem(entryName)));\n \t\t\t\t}\n \t\t\t\telem_stat.setAttribute(\"value\", String.valueOf(addedStats.get(catName).get(entryName)));\n \t\t\t\t\n \t\t\t\telem_cat.appendChild(elem_stat);\n \t\t\t}\n \t\t\telem_player.appendChild(elem_cat);\n \t\t}\n \t\t\n \t\treturn elem_player;\n \t}"} {"path":"downloaded/ColorSlider.java","method_name":"nt getVa","content":"\t\n\t/**\n\t * @return\n\t\n/\n\tpublic int getValue() {\n\t\treturn value;"} {"path":"downloaded/ColorSlider.java","method_name":"at getVal","content":"\n\n\t/**\n\t * @param d\n\t\n\t\n\tpublic float getValueF() {\n\t\treturn valueF;"} {"path":"downloaded/ColorSlider.java","method_name":"nt getArrowHei","content":"\n\n\t/**\n\t * @param d\n\t\n\n\n\tprivate int getArrowHeight() {\n\t\treturn arrowWidth / 2;"} {"path":"downloaded/TestPickList.java","method_name":"testSelectItemClass","content":"/**\n     * Verify submit by JSF submit button\n     */\n@Test\n    @CoversAttributes(\"selectItemClass\")\n    @Templates(value = \"plain\")\n    @IssueTracking(\"https://issues.jboss.org/browse/RF-12777\")\n    public void testSelectItemClass() {\n        testHTMLAttribute(new FutureTarget<WebElement>() {\n            @Override\n            public WebElement getTarget() {\n                return pickList.advanced().getSourceList().getItem(0).getRootElement();\n            }\n        }, pickListAttributes, PickListAttributes.selectItemClass, \"metamer-ftest-class\", new Action() {\n            @Override\n            public void perform() {\n                pickList.advanced().getSourceList().getItem(0).select();\n            }\n        });\n        // RF-12777, check add and remove buttons are enabled when some item is selected\n        // the item in source list should be selected from previous step\n        // the add button should be enabled\n        assertTrue(pickList.advanced().getAddButtonElement().isEnabled());\n        // add item to the target list\n        pickList.advanced().getAddButtonElement().click();\n        // the added item remains selected, the remove button should be enabled\n        assertTrue(pickList.advanced().getRemoveButtonElement().isEnabled());\n    }"} {"path":"downloaded/TestPickList.java","method_name":"testSwitchByClick","content":"/**\n     * Verify switchByClick attribute\n     */\n@Test\n    @CoversAttributes(\"switchByClick\")\n    public void testSwitchByClick() {\n        pickListAttributes.set(PickListAttributes.switchByClick, Boolean.TRUE);\n        ListItem item = pickList.advanced().getSourceList().getItems().get(0);\n        String text = item.getText();\n        item.getRootElement().click();\n        Graphene.waitGui().until(new Predicate<WebDriver>() {\n            @Override\n            public boolean apply(WebDriver input) {\n                return pickList.advanced().getTargetList().getItems().size() == 1;\n            }\n        });\n        item = pickList.advanced().getTargetList().getItem(0);\n        assertEquals(item.getText(), text);\n        assertTrue(item.getRootElement().getAttribute(\"class\").contains(\"rf-pick-sel\"));\n    }"} {"path":"downloaded/TestPickList.java","method_name":"testSwitchByDblClick","content":"/**\n     * Verify switchByDblClick attribute\n     */\n@Test\n    @CoversAttributes(\"switchByDblClick\")\n    public void testSwitchByDblClick() {\n        pickListAttributes.set(PickListAttributes.switchByDblClick, Boolean.TRUE);\n        ListItem item = pickList.advanced().getSourceList().getItems().get(0);\n        String text = item.getText();\n        new Actions(driver).doubleClick(item.getRootElement()).perform();\n        Graphene.waitGui().until(new Predicate<WebDriver>() {\n            @Override\n            public boolean apply(WebDriver input) {\n                return pickList.advanced().getTargetList().getItems().size() == 1;\n            }\n        });\n        item = pickList.advanced().getTargetList().getItem(0);\n        assertEquals(item.getText(), text);\n    }"} {"path":"downloaded/Call.java","method_name":"getTime","content":"/**\n     *  Metodo permite obtener el tiempo de duracion de la llamada    \n     * @return el tiempo que dura la llamada\n    */\npublic long getTime(){\n       return this.time;\n   }"} {"path":"downloaded/MyGraph.java","method_name":"vertices","content":"/** \n     * Return the collection of vertices of this graph\n     * @return the vertices as a collection (which is anything iterable)\n     */\npublic Collection<Vertex> vertices() {      \n        //return myGraph.keySet(); OLD\n        //create a copy of all the vertices in the map to restrict any reference\n        //to the interals of this class\n        Collection<Vertex> copyOfVertices = new ArrayList<Vertex>();\n        copyOfVertices.addAll(myGraph.keySet());\n        return copyOfVertices;\n    }"} {"path":"downloaded/MyGraph.java","method_name":"edges","content":"/** \n     * Return the collection of edges of this graph\n     * @return the edges as a collection (which is anything iterable)\n     */\npublic Collection<Edge> edges() {\n        Collection<Collection<Edge>> copyOfEdges = new ArrayList<Collection<Edge>>();\n        //values = myGraph.values(); OLD\n        //create a copy of all the edges in the map to restrict any reference\n        //to interals of this class\n        copyOfEdges.addAll(myGraph.values());\n        Collection<Edge> allValues = new ArrayList<Edge>();\n        Iterator<Collection<Edge>> eachColl = copyOfEdges.iterator();\n        while(eachColl.hasNext()){\n            allValues.addAll(eachColl.next());\n        }\n\n        return allValues;\n    }"} {"path":"downloaded/MyGraph.java","method_name":"adjacentVertices","content":"/**\n     * Return a collection of vertices adjacent to a given vertex v.\n     *   i.e., the set of all vertices w where edges v -> w exist in the graph.\n     * Return an empty collection if there are no adjacent vertices.\n     * @param v one of the vertices in the graph\n     * @return an iterable collection of vertices adjacent to v in the graph\n     * @throws IllegalArgumentException if v does not exist.\n     */\npublic Collection<Vertex> adjacentVertices(Vertex v) {\n        Vertex parameterVertex = new Vertex(v.getLabel());\n        if(!myGraph.containsKey(parameterVertex)){\n            throw new IllegalArgumentException(\"Vertex is not valid\");\n        }\n\n        //create a copy of the passed in vertex to restrict any reference\n        //to interals of this class\n        Collection<Vertex> adjVertices = new ArrayList<Vertex>();\n\n        Iterator<Edge> edges = myGraph.get(parameterVertex).iterator();\n        while(edges.hasNext()) {\n            adjVertices.add(edges.next().getDestination());\n        }\n        return adjVertices;\n    }"} {"path":"downloaded/MyGraph.java","method_name":"edgeCost","content":"/**\n     * Test whether vertex b is adjacent to vertex a (i.e. a -> b) in a directed graph.\n     * Assumes that we do not have negative cost edges in the graph.\n     * @param a one vertex\n     * @param b another vertex\n     * @return cost of edge if there is a directed edge from a to b in the graph, \n     * return -1 otherwise.\n     * @throws IllegalArgumentException if a or b do not exist.\n     */\npublic int edgeCost(Vertex a, Vertex b) {\n        if (!myGraph.containsKey(b) || !myGraph.containsKey(a)) {\n            throw new IllegalArgumentException(\"Vertex is not valid\");\n        }\n        int cost = -1;\n        if (adjacentVertices(a).contains(b)) {\n            //create a copy of all the edges at the passed in Vertex a\n            //to restrict any reference to interals of this class\n            Collection<Edge> copyOfEdges = new ArrayList<Edge>();\n            copyOfEdges.addAll(myGraph.get(a));\n\n            Iterator<Edge> edges = copyOfEdges.iterator();\n            while(edges.hasNext()){\n                Edge currEdge = edges.next();\n                if(currEdge.getDestination().equals(b)) {\n                    cost =  currEdge.getWeight();\n                }\n            }\n        }\n        return cost;\n    }"} {"path":"downloaded/MyGraph.java","method_name":"shortestPath","content":"/**\n     * Returns the shortest path from a to b in the graph, or null if there is\n     * no such path.  Assumes all edge weights are nonnegative.\n     * Uses Dijkstra's algorithm.\n     * @param a the starting vertex\n     * @param b the destination vertex\n     * @return a Path where the vertices indicate the path from a to b in order\n     *   and contains a (first) and b (last) and the cost is the cost of \n     *   the path. Returns null if b is not reachable from a.\n     * @throws IllegalArgumentException if a or b does not exist.\n     */\npublic Path shortestPath(Vertex a, Vertex b) {\n        // If a or b aren't present in the set of vertices throw an exception\n        if (!myGraph.containsKey(b) || !myGraph.containsKey(a)) {\n            throw new IllegalArgumentException(\"One of the vertices isn't valid\");\n        }\n        /* Create a map of Vertices to VertexInfos. Fill it with VertexInfos for all\n           vertices that each have no previous vertex and and a cost of INFINITY */\n        Map<Vertex, VertexInfo> vertInfos = new HashMap<Vertex, VertexInfo>();\n        for (Vertex v : vertices()) {\n            vertInfos.put(v, new VertexInfo(v, null, INFINITY));\n        }\n        /* Create a PriorityQueue for VertexInfos */\n        PriorityQueue<VertexInfo> viQueue = new PriorityQueue<VertexInfo>();\n        /* Create a VertexInfo for the start Vertex 'a' with a cost of 0. This uses a copy of Vertex a&b for immutability */\n        Vertex copyA = new Vertex(a.getLabel());\n        Vertex copyB = new Vertex(b.getLabel());\n\n        VertexInfo vi_a = new VertexInfo(copyA, null, 0);\n        /* Add VerxtexInfo for a to PQ and map it to it's VertexInfo */\n        viQueue.add(vi_a);\n        vertInfos.put(a, vi_a);\n        while(!viQueue.isEmpty()) {\n            /* Remove the VertexInfo with lowest cost */\n            Vertex curr = viQueue.poll().getVertex();\n            /* Check all adjacent Vertices of curr Vertex */\n            for (Vertex v : adjacentVertices(curr)) {\n                /* Calculate cost to get to v through curr */\n                int cost = vertInfos.get(curr).getCost() + edgeCost(curr, v);\n                /* If cost through curr is lower than previous */\n                if (cost < vertInfos.get(v).getCost()) {\n                    /* Remove v's VertexInfo from PQ */\n                    viQueue.remove(vertInfos.get(v));\n                    /* Overwrite previous value of v in map\n                       Add updated VerexInfo to PQ */\n                    VertexInfo vi = new VertexInfo(v, curr, cost);\n                    vertInfos.put(v,vi);\n                    viQueue.add(vi);\n                }\n            }\n        }\n        /* Create ArrayList for path */\n        List<Vertex> path = new ArrayList<Vertex>();\n        \n        /* Add each vertex and it's previous vertex to path until a null vertex is reached */\n        for (Vertex vert = copyB; vert != null; vert = vertInfos.get(vert).getPrev()) {\n            path.add(vert);\n        }\n\n        /* Reverse order of path */ \n        Collections.reverse(path);\n        /* Create new Path object with corresponding parameters */\n        if(path.contains(copyA)){\n            Path pathToB = new Path(path, vertInfos.get(copyB).getCost());\n            return pathToB;\n        } else {\n            return null;\n        }\n    }"} {"path":"downloaded/ReportController.java","method_name":"getReportByProjectID","content":"/**\n\t * Get report list info by project brief id or parent id.\n\t * \n\t * @param projectID\n\t *            : Project Brief Parent ID\n\t * @param request\n\t * @param reponse\n\t * @return\n\t */\n@RequestMapping(value = \"/get.json\", method = RequestMethod.GET)\n\t@ResponseBody\n\tpublic ResultDto getReportByProjectID(Integer projectID,\n\t\t\tHttpServletRequest request, HttpServletResponse reponse) {\n\t\tlogger.info(\"Call report/get.json\");\n\t\ttry {\n\t\t\tList<Map<String, Object>> reportMap = this.reportService\n\t\t\t\t\t.getReportByProjectID(projectID);\n\n\t\t\treponse.setStatus(Constant.HTTP_OK);\n\t\t\treturn new ResultDto(Constant.ACK, Constant.SUCCEED, reportMap);\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\tlogger.info(\n\t\t\t\t\t\"Call report/get.json met error beacuse of database error\",\n\t\t\t\t\te);\n\t\t\treponse.setStatus(Constant.SERVER_ERROR);\n\t\t\treturn new ResultDto(Constant.NACK, \"get report error.\", null);\n\t\t}\n\t}"} {"path":"downloaded/ReportController.java","method_name":"saveReport","content":"/**\n\t * Save report(the status is request: 3).\n\t * \n\t * @param request\n\t * @param reponse\n\t * @param message\n\t *            , the report info. the value of reportid is null means this\n\t *            report is an newly added report, we need to add them to\n\t *            database. the value of operator is \"delete\" means user delete\n\t *            the report, we need to delete the report. otherwise we need to\n\t *            update the report.\n\t * @return\n\t */\n@RequestMapping(value = \"/save.json\", method = RequestMethod.POST)\n\t@ResponseBody\n\tpublic ResultDto saveReport(HttpServletRequest request,\n\t\t\tHttpServletResponse reponse, @RequestBody String message) {\n\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tResultDto returnDto = null;\n\t\ttry {\n\n\t\t\tList<ReportResult> reportList = mapper.readValue(message,\n\t\t\t\t\tnew TypeReference<List<ReportResult>>() {\n\t\t\t\t\t});\n\t\t\tfor (ReportResult temp : reportList) {\n\t\t\t\tsetFile(temp);\n\t\t\t\tif (temp.getReportid() == null) {\n\t\t\t\t\tthis.reportService.insertReport(temp);\n\t\t\t\t} else {\n\t\t\t\t\tif (\"delete\".equals(temp.getOperator())) {\n\t\t\t\t\t\tthis.reportService.deleteReport(temp.getReportid());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.reportService.updateReport(temp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tint projectBriefID = 0;\n\t\t\tif (reportList.size() > 0) {\n\t\t\t\tprojectBriefID = reportList.get(0).getProjectid();\n\t\t\t}\n\t\t\tthis.requestService.updateProjectBriefDate(projectBriefID);\n\t\t\tthis.requestService.updateProjectProposalDate(projectBriefID);\n\n\t\t\treponse.setStatus(Constant.HTTP_OK);\n\t\t\treturnDto = new ResultDto(Constant.ACK, Constant.SUCCEED, null);\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\treponse.setStatus(Constant.SERVER_ERROR);\n\t\t\treturnDto = new ResultDto(Constant.NACK, Constant.PARAMETER_ERROR,\n\t\t\t\t\tnull);\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\treponse.setStatus(Constant.SERVER_ERROR);\n\t\t\treturnDto = new ResultDto(Constant.NACK, Constant.COMMIT_ERROR,\n\t\t\t\t\tnull);\n\t\t}\n\t\treturn returnDto;\n\t}"} {"path":"downloaded/ReportController.java","method_name":"commitReport","content":"/**\n\t * Commit reports, set status = 4(Reporting)\n\t * \n\t * @param request\n\t * @param reponse\n\t * @param message\n\t *            , the report info. the value of reportid is null means this\n\t *            report is an newly added report, we need to add them to\n\t *            database. the value of operator is \"delete\" means user delete\n\t *            the report, we need to delete the report. otherwise we need to\n\t *            update the report.\n\t * \n\t *            Then we need add the report file info to table ReportFile.\n\t * @return\n\t */\n@RequestMapping(value = \"/commit.json\", method = RequestMethod.POST)\n\t@ResponseBody\n\t@Transactional(value = \"mysql\")\n\tpublic ResultDto commitReport(HttpServletRequest request,\n\t\t\tHttpServletResponse reponse, @RequestBody String message) {\n\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tResultDto returnDto = null;\n\t\tInteger projectID = null;\n\t\ttry {\n\t\t\tList<ReportResult> reportList = mapper.readValue(message,\n\t\t\t\t\tnew TypeReference<List<ReportResult>>() {\n\t\t\t\t\t});\n\t\t\tfor (ReportResult temp : reportList) {\n\t\t\t\tboolean isDelete = false;\n\t\t\t\tprojectID = temp.getProjectid();\n\t\t\t\tif (temp.getReportid() == null) {\n\t\t\t\t\tthis.reportService.insertReport(temp);\n\t\t\t\t} else { \n\t\t\t\t\tif (\"delete\".equals(temp.getOperator())) {\n\t\t\t\t\t\tthis.reportService.deleteReport(temp.getReportid());\n\t\t\t\t\t\tisDelete = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.reportService.updateReport(temp);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!isDelete) {\n\t\t\t\t\tMap<String, Object> paramObject = new HashMap<String, Object>();\n\t\t\t\t\tparamObject.put(\"reportid\", temp.getReportid());\n\t\t\t\t\tparamObject.put(\"tilesprotemplateid\",\n\t\t\t\t\t\t\ttemp.getTilesprotemplateid());\n\t\t\t\t\tparamObject.put(\"powerbitemplateid\",\n\t\t\t\t\t\t\ttemp.getPowerbitemplateid());\n\t\t\t\t\tparamObject.put(\"reportfileurl\", temp.getReportfileurl());\n\t\t\t\t\treportFileService.createReportFile(paramObject);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.reportService.updateProjectBriefStatus(projectID);\n\t\t\tthis.reportService.updateProjectProposalStatus(projectID);\n\t\t\treponse.setStatus(Constant.HTTP_OK);\n\t\t\treturnDto = new ResultDto(Constant.ACK, Constant.SUCCEED, null);\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\treponse.setStatus(Constant.SERVER_ERROR);\n\t\t\treturnDto = new ResultDto(Constant.NACK, Constant.PARAMETER_ERROR,\n\t\t\t\t\tnull);\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\treponse.setStatus(Constant.SERVER_ERROR);\n\t\t\treturnDto = new ResultDto(Constant.NACK, Constant.COMMIT_ERROR,\n\t\t\t\t\tnull);\n\t\t}\n\t\treturn returnDto;\n\t}"} {"path":"downloaded/ReportController.java","method_name":"rejectReport","content":"/**\n\t * Reject reports, set status = 3 AccountTeam doesn't agree the template,\n\t * they can reject the report.\n\t * \n\t * @param request\n\t * @param reponse\n\t * @param message\n\t * @return\n\t */\n@RequestMapping(value = \"/reject.json\", method = RequestMethod.POST)\n\t@ResponseBody\n\t@Transactional(value = \"mysql\")\n\tpublic ResultDto rejectReport(HttpServletRequest request,\n\t\t\tHttpServletResponse reponse, @RequestBody String message) {\n\t\tlogger.info(\"Call report/reject.json\");\n\t\tlogger.info(\"parameters: \" + message);\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tResultDto returnDto = null;\n\n\t\ttry {\n\t\t\tReportResult report = mapper.readValue(message, ReportResult.class);\n\t\t\tMap<String, Object> paramMap = new HashMap<String, Object>();\n\t\t\tparamMap.put(\"projectID\", report.getProjectid());\n\t\t\tparamMap.put(\"comment\", report.getComment());\n\t\t\tint returnCode = this.reportService.rejectReport(paramMap);\n\t\t\tif (returnCode == 0) {\n\t\t\t\treponse.setStatus(Constant.SERVER_ERROR);\n\t\t\t\treturnDto = new ResultDto(Constant.NACK, \"reject error\", null);\n\t\t\t} else {\n\t\t\t\treponse.setStatus(Constant.HTTP_OK);\n\t\t\t\treturnDto = new ResultDto(Constant.ACK, \"reject succeed\", null);\n\t\t\t}\n\t\t} catch (IOException | SQLException e) {\n\t\t\tlogger.info(\"Call report/reject.json met error\", e);\n\t\t\treponse.setStatus(Constant.SERVER_ERROR);\n\t\t\treturnDto = new ResultDto(Constant.NACK, \"reject error\", null);\n\t\t}\n\t\treturn returnDto;\n\t}"} {"path":"downloaded/ReportController.java","method_name":"saveReportUrl","content":"/**\n\t * Save report file's url to table ReportFile.\n\t * \n\t * @param request\n\t * @param reponse\n\t * @param message\n\t * @return\n\t */\n@RequestMapping(value = \"/savereportfile.json\", method = RequestMethod.POST)\n\t@ResponseBody\n\tpublic ResultDto saveReportUrl(HttpServletRequest request,\n\t\t\tHttpServletResponse reponse, @RequestBody String message) {\n\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tResultDto returnDto = null;\n\t\ttry {\n\t\t\tList<ReportFile> reportFileList = mapper.readValue(message,\n\t\t\t\t\tnew TypeReference<List<ReportFile>>() {\n\t\t\t\t\t});\n\t\t\tfor (ReportFile temp : reportFileList) {\n\t\t\t\tthis.reportFileService.updateReportFile(temp);\n\t\t\t}\n\n\t\t\tint projectBriefID = 0;\n\t\t\tif (reportFileList.size() > 0) {\n\t\t\t\tprojectBriefID = reportFileList.get(0).getProjectid();\n\t\t\t}\n\t\t\tthis.requestService.updateProjectBriefDate(projectBriefID);\n\t\t\tthis.requestService.updateProjectProposalDate(projectBriefID);\n\n\t\t\treponse.setStatus(Constant.HTTP_OK);\n\t\t\treturnDto = new ResultDto(Constant.ACK, Constant.SUCCEED, null);\n\t\t} catch (IOException | SQLException e) {\n\t\t\treponse.setStatus(Constant.SERVER_ERROR);\n\t\t\treturnDto = new ResultDto(Constant.NACK, \"complete error\", null);\n\t\t}\n\n\t\treturn returnDto;\n\t}"} {"path":"downloaded/ReportController.java","method_name":"completeReport","content":"/**\n\t * Complete a project, set status = 5\n\t * \n\t * @param request\n\t * @param reponse\n\t * @param message\n\t * @return\n\t */\n@RequestMapping(value = \"/complete.json\", method = RequestMethod.POST)\n\t@ResponseBody\n\t@Transactional(value = \"mysql\")\n\tpublic ResultDto completeReport(HttpServletRequest request,\n\t\t\tHttpServletResponse reponse, @RequestBody String message) {\n\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tResultDto returnDto = null;\n\t\ttry {\n\n\t\t\tList<ReportFile> reportFileList = mapper.readValue(message,\n\t\t\t\t\tnew TypeReference<List<ReportFile>>() {\n\t\t\t\t\t});\n\t\t\tfor (ReportFile temp : reportFileList) {\n\t\t\t\tthis.reportFileService.updateReportFile(temp);\n\t\t\t}\n\t\t\tint projectID = reportFileList.get(0).getProjectid();\n\t\t\tthis.reportService.completeReport(projectID);\n\n\t\t\treponse.setStatus(Constant.HTTP_OK);\n\t\t\treturnDto = new ResultDto(Constant.ACK, Constant.SUCCEED, null);\n\t\t} catch (IOException | SQLException e) {\n\t\t\treponse.setStatus(Constant.SERVER_ERROR);\n\t\t\treturnDto = new ResultDto(Constant.NACK, \"complete error\", null);\n\t\t}\n\t\treturn returnDto;\n\t}"} {"path":"downloaded/ReportController.java","method_name":"setFile","content":"/**\n\t * \n\t * setFile @param @param reportResult @param @return @return ReportResult @throws\n\t */\nprivate ReportResult setFile(ReportResult reportResult) {\n\t\ttry {\n\t\t\tMap<String, Object> tempMap = templateService.getById(reportResult\n\t\t\t\t\t.getPowerbitemplateid());\n\t\t\tString tempUrl = (String) tempMap.get(\"fileurl\");\n\t\t\tif (!tempUrl.isEmpty()) {\n\t\t\t\tFile tempFile = new File(FileConstant.uploadFilePathTemp,\n\t\t\t\t\t\ttempUrl);\n\t\t\t\tString url = createDirectoryNameByClientIDAndBriefID(reportResult\n\t\t\t\t\t\t.getProjectid());\n\t\t\t\tFile projectFile = new File(url);\n\n\t\t\t\tif (!projectFile.exists()) {\n\t\t\t\t\tboolean isSucceed = projectFile.mkdirs();\n\t\t\t\t\tif (!isSucceed) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprojectFile = new File(url, tempUrl);\n\t\t\t\tif (!projectFile.exists()) {\n\t\t\t\t\tboolean isSucceed = projectFile.createNewFile();\n\t\t\t\t\tif (!isSucceed) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tFileCopyUtils.copy(tempFile, projectFile);\n\t\t\t\treportResult.setReportfileurl(tempUrl);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\treturn null;\n\t\t}\n\t\treturn reportResult;\n\t}"} {"path":"downloaded/ReportController.java","method_name":"createDirectoryName","content":"/**\n\t * Generate the real path The path format is:\n\t * /wefileroot/<clientName>_<clientID>/<briefName>_<briefID>/\n\t * \n\t * @param briefID\n\t *            : project brief ID\n\t * @param clientID\n\t *            : client ID\n\t * @return\n\t * @throws SQLException\n\t */\n@SuppressWarnings(\"unused\")\n\tprivate String createDirectoryName(Integer briefID) throws SQLException {\n\t\t// get project brief name\n\t\tProjectBriefResult brief = this.requestService\n\t\t\t\t.getProjectBriefByBrirfID(briefID);\n\t\tif (brief.getProjectBriefName() == null) {\n\t\t\treturn null;\n\t\t}\n\t\tString briefName = brief.getProjectBriefName();\n\t\tMap<String, Object> clientMap = this.clientService\n\t\t\t\t.getClientNameByClientID(brief.getClientID());\n\t\tif (clientMap == null || clientMap.get(Constant.CLIENTNAME) == null) {\n\t\t\treturn null;\n\t\t}\n\t\tString clientName = clientMap.get(Constant.CLIENTNAME).toString();\n\t\t// create file name:\n\t\t// /wefileroot/<clientName>_<clientID>/<briefName>_<briefID>/Proposal_<UUID>.doc\n\t\tString fileName = FileConstant.uploadFilePath + clientName + \"_\"\n\t\t\t\t+ brief.getClientID() + File.separator + briefName + \"_\"\n\t\t\t\t+ briefID + File.separator;\n\t\treturn fileName;\n\t}"} {"path":"downloaded/ReportController.java","method_name":"createDirectoryNameByClientIDAndBriefID","content":"/**\n\t * Generate the real path The path format is:\n\t * /wefileroot/<clientName>_<clientID>/<briefName>_<briefID>/\n\t * \n\t * @param briefID\n\t *            : project brief ID\n\t * @param clientID\n\t *            : client ID\n\t * @return\n\t * @throws SQLException\n\t */\nprivate String createDirectoryNameByClientIDAndBriefID(Integer briefID)\n\t\t\tthrows SQLException {\n\t\tProjectBriefResult brief = this.requestService\n\t\t\t\t.getProjectBriefByBrirfID(briefID);\n\t\tif (brief.getProjectBriefName() == null) {\n\t\t\treturn null;\n\t\t}\n\t\t// create file name:\n\t\t// /wefileroot/<clientID>/<briefID>/Proposal_<UUID>.doc\n\t\treturn FileConstant.uploadFilePath + brief.getClientID()\n\t\t\t\t+ File.separator + briefID + File.separator;\n\t}"} {"path":"downloaded/ObservationOrigin.java","method_name":"getOrientation","content":"/**\n\t * think orientation +- anlgeSpread ie 243+-5\n\t */\npublic Angle getOrientation()\n\t{\n\t\treturn orientation;\n\t}"} {"path":"downloaded/ObservationOrigin.java","method_name":"getLocation","content":"/**\n\t * think orientation +- anlgeSpread ie 243+-5\n\t */\npublic XY getLocation()\n\t{\n\t\treturn origin;\n\t}"} {"path":"downloaded/SecurityLabel.java","method_name":"deepCopy","content":"/**\n   * Performs a deep copy on <i>other</i>.\n   */\npublic SecurityLabel deepCopy() {\n    return new SecurityLabel(this);\n  }"} {"path":"downloaded/SecurityLabel.java","method_name":"getClassification","content":"/**\n   * Performs a deep copy on <i>other</i>.\n   */\npublic ezbake.base.thrift.Classification getClassification() {\n    return this.classification;\n  }"} {"path":"downloaded/SecurityLabel.java","method_name":"setClassification","content":"/**\n   * Performs a deep copy on <i>other</i>.\n   */\npublic SecurityLabel setClassification(ezbake.base.thrift.Classification classification) {\n    this.classification = classification;\n    return this;\n  }"} {"path":"downloaded/SecurityLabel.java","method_name":"isSetClassification","content":"/** Returns true if field classification is set (has been assigned a value) and false otherwise */\npublic boolean isSetClassification() {\n    return this.classification != null;\n  }"} {"path":"downloaded/SecurityLabel.java","method_name":"getDiscoveryClassification","content":"/** Returns true if field classification is set (has been assigned a value) and false otherwise */\npublic ezbake.base.thrift.Classification getDiscoveryClassification() {\n    return this.discoveryClassification;\n  }"} {"path":"downloaded/SecurityLabel.java","method_name":"setDiscoveryClassification","content":"/** Returns true if field classification is set (has been assigned a value) and false otherwise */\npublic SecurityLabel setDiscoveryClassification(ezbake.base.thrift.Classification discoveryClassification) {\n    this.discoveryClassification = discoveryClassification;\n    return this;\n  }"} {"path":"downloaded/SecurityLabel.java","method_name":"isSetDiscoveryClassification","content":"/** Returns true if field discoveryClassification is set (has been assigned a value) and false otherwise */\npublic boolean isSetDiscoveryClassification() {\n    return this.discoveryClassification != null;\n  }"} {"path":"downloaded/SecurityLabel.java","method_name":"getFieldValue","content":"/** Returns true if field discoveryClassification is set (has been assigned a value) and false otherwise */\npublic Object getFieldValue(_Fields field) {\n    switch (field) {\n    case CLASSIFICATION:\n      return getClassification();\n\n    case DISCOVERY_CLASSIFICATION:\n      return getDiscoveryClassification();\n\n    }\n    throw new IllegalStateException();\n  }"} {"path":"downloaded/SecurityLabel.java","method_name":"isSet","content":"/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\npublic boolean isSet(_Fields field) {\n    if (field == null) {\n      throw new IllegalArgumentException();\n    }\n\n    switch (field) {\n    case CLASSIFICATION:\n      return isSetClassification();\n    case DISCOVERY_CLASSIFICATION:\n      return isSetDiscoveryClassification();\n    }\n    throw new IllegalStateException();\n  }"} {"path":"downloaded/SecurityLabel.java","method_name":"equals","content":"/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n@Override\n  public boolean equals(Object that) {\n    if (that == null)\n      return false;\n    if (that instanceof SecurityLabel)\n      return this.equals((SecurityLabel)that);\n    return false;\n  }"} {"path":"downloaded/SecurityLabel.java","method_name":"equals","content":"/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\npublic boolean equals(SecurityLabel that) {\n    if (that == null)\n      return false;\n\n    boolean this_present_classification = true && this.isSetClassification();\n    boolean that_present_classification = true && that.isSetClassification();\n    if (this_present_classification || that_present_classification) {\n      if (!(this_present_classification && that_present_classification))\n        return false;\n      if (!this.classification.equals(that.classification))\n        return false;\n    }\n\n    boolean this_present_discoveryClassification = true && this.isSetDiscoveryClassification();\n    boolean that_present_discoveryClassification = true && that.isSetDiscoveryClassification();\n    if (this_present_discoveryClassification || that_present_discoveryClassification) {\n      if (!(this_present_discoveryClassification && that_present_discoveryClassification))\n        return false;\n      if (!this.discoveryClassification.equals(that.discoveryClassification))\n        return false;\n    }\n\n    return true;\n  }"} {"path":"downloaded/SecurityLabel.java","method_name":"hashCode","content":"/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n@Override\n  public int hashCode() {\n    return 0;\n  }"} {"path":"downloaded/SecurityLabel.java","method_name":"compareTo","content":"/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n@Override\n  public int compareTo(SecurityLabel other) {\n    if (!getClass().equals(other.getClass())) {\n      return getClass().getName().compareTo(other.getClass().getName());\n    }\n\n    int lastComparison = 0;\n\n    lastComparison = Boolean.valueOf(isSetClassification()).compareTo(other.isSetClassification());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetClassification()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classification, other.classification);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    lastComparison = Boolean.valueOf(isSetDiscoveryClassification()).compareTo(other.isSetDiscoveryClassification());\n    if (lastComparison != 0) {\n      return lastComparison;\n    }\n    if (isSetDiscoveryClassification()) {\n      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discoveryClassification, other.discoveryClassification);\n      if (lastComparison != 0) {\n        return lastComparison;\n      }\n    }\n    return 0;\n  }"} {"path":"downloaded/SecurityLabel.java","method_name":"fieldForId","content":"/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\npublic _Fields fieldForId(int fieldId) {\n    return _Fields.findByThriftId(fieldId);\n  }"} {"path":"downloaded/SecurityLabel.java","method_name":"toString","content":"/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n@Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder(\"SecurityLabel(\");\n    boolean first = true;\n\n    sb.append(\"classification:\");\n    if (this.classification == null) {\n      sb.append(\"null\");\n    } else {\n      sb.append(this.classification);\n    }\n    first = false;\n    if (isSetDiscoveryClassification()) {\n      if (!first) sb.append(\", \");\n      sb.append(\"discoveryClassification:\");\n      if (this.discoveryClassification == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(this.discoveryClassification);\n      }\n      first = false;\n    }\n    sb.append(\")\");\n    return sb.toString();\n  }"} {"path":"downloaded/SecurityLabel.java","method_name":"findByThriftId","content":"/**\n     * Find the _Fields constant that matches fieldId, or null if its not found.\n     */\npublic static _Fields findByThriftId(int fieldId) {\n      switch(fieldId) {\n        case 1: // CLASSIFICATION\n          return CLASSIFICATION;\n        case 2: // DISCOVERY_CLASSIFICATION\n          return DISCOVERY_CLASSIFICATION;\n        default:\n          return null;\n      }\n    }"} {"path":"downloaded/SecurityLabel.java","method_name":"findByThriftIdOrThrow","content":"/**\n     * Find the _Fields constant that matches fieldId, throwing an exception\n     * if it is not found.\n     */\npublic static _Fields findByThriftIdOrThrow(int fieldId) {\n      _Fields fields = findByThriftId(fieldId);\n      if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n      return fields;\n    }"} {"path":"downloaded/SecurityLabel.java","method_name":"findByName","content":"/**\n     * Find the _Fields constant that matches name, or null if its not found.\n     */\npublic static _Fields findByName(String name) {\n      return byName.get(name);\n    }"} {"path":"downloaded/SecurityLabel.java","method_name":"getThriftFieldId","content":"/**\n     * Find the _Fields constant that matches name, or null if its not found.\n     */\npublic short getThriftFieldId() {\n      return _thriftId;\n    }"} {"path":"downloaded/SecurityLabel.java","method_name":"getFieldName","content":"/**\n     * Find the _Fields constant that matches name, or null if its not found.\n     */\npublic String getFieldName() {\n      return _fieldName;\n    }"} {"path":"downloaded/FastDBQueryUI_ReserveSqlDlg.java","method_name":"newInstance","content":"/**\n     * Launch the application.\n     */\npublic static FastDBQueryUI_ReserveSqlDlg newInstance(String tableName, List<List<Triple<String, Class, Object>>> sqlLst) {\n        try {\n            FastDBQueryUI_ReserveSqlDlg dialog = new FastDBQueryUI_ReserveSqlDlg(tableName, sqlLst);\n            dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n            dialog.setVisible(true);\n            dialog.processSql();\n            return dialog;\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }"} {"path":"downloaded/FastDBQueryUI_ReserveSqlDlg.java","method_name":"getColumn","content":"/**\n     * Launch the application.\n     */\nprivate String getColumn(String column) {\n        if (javaToDBChk.isSelected()) {\n            return StringUtilForDb.javaToDbField(column);\n        }\n        return column;\n    }"} {"path":"downloaded/FastDBQueryUI_ReserveSqlDlg.java","method_name":"vate String ge","content":"/**\n     * Launch the application.\n     */\n\n    }\n\n    private String getStringValue(Triple<String, Class, Object> arry) {\n        if (arry.getRight() == null) {\n            return \"null\";\n        }\n        DBDateUtil.DBDateFormat format = (DBDateUtil.DBDateFormat) dbTypeComboBox.getSelectedItem();\n        if (arry.getMiddle() != null) {\n            if (java.sql.Date.class == arry.getMiddle()) {\n                return format.varchar2Date(\"'\" + String.valueOf(arry.getRight()) + \"'\");\n            } else if (java.sql.Timestamp.class == arry.getMiddle()) {\n                return format.varchar2Timestamp(\"'\" + String.valueOf(arry.getRight()) + \"'\");\n            } else if (BigDecimal.class == arry.getMiddle()) {\n                return String.valueOf(arry.getRight());\n            }\n        }\n        return \"'\" + arry.getRight() "} {"path":"downloaded/Booking.java","method_name":"getId","content":"/**\n\t * @return the id\n\t */\npublic Integer getId() {\n\t\treturn id;\n\t}"} {"path":"downloaded/Booking.java","method_name":"getArrivalDate","content":"/**\n\t * @return the arrivalDate\n\t */\npublic Date getArrivalDate() {\n\t\treturn arrivalDate;\n\t}"} {"path":"downloaded/Booking.java","method_name":"getDepatureDate","content":"/**\n\t * @return the depatureDate\n\t */\npublic Date getDepatureDate() {\n\t\treturn depatureDate;\n\t}"} {"path":"downloaded/Booking.java","method_name":"getName","content":"/**\n\t * @return the name\n\t */\npublic String getName() {\n\t\treturn name;\n\t}"} {"path":"downloaded/Booking.java","method_name":"getAddress","content":"/**\n\t * @return the address\n\t */\npublic String getAddress() {\n\t\treturn address;\n\t}"} {"path":"downloaded/Booking.java","method_name":"getTelephone","content":"/**\n\t * @return the telephone\n\t */\npublic String getTelephone() {\n\t\treturn telephone;\n\t}"} {"path":"downloaded/Booking.java","method_name":"getBookingType","content":"/**\n\t * @return the bookingType\n\t */\npublic String getBookingType() {\n\t\treturn bookingType;\n\t}"} {"path":"downloaded/Booking.java","method_name":"getBillingInstructions","content":"/**\n\t * @return the billingInstructions\n\t */\npublic String getBillingInstructions() {\n\t\treturn billingInstructions;\n\t}"} {"path":"downloaded/Booking.java","method_name":"getDepositAmount","content":"/**\n\t * @return the depositAmount\n\t */\npublic Float getDepositAmount() {\n\t\treturn depositAmount;\n\t}"} {"path":"downloaded/Booking.java","method_name":"getBookingConfirmedBy","content":"/**\n\t * @return the bookingConfirmedBy\n\t */\npublic String getBookingConfirmedBy() {\n\t\treturn bookingConfirmedBy;\n\t}"} {"path":"downloaded/Booking.java","method_name":"getBookingTakenBy","content":"/**\n\t * @return the bookingTakenBy\n\t */\npublic String getBookingTakenBy() {\n\t\treturn bookingTakenBy;\n\t}"} {"path":"downloaded/Booking.java","method_name":"getNoOfGuest","content":"/**\n\t * @return the noOfGuest\n\t */\npublic Integer getNoOfGuest() {\n\t\treturn noOfGuest;\n\t}"} {"path":"downloaded/Booking.java","method_name":"getRoom","content":"/**\n\t * @return the room\n\t */\npublic Rooms getRoom() {\n\t\treturn room;\n\t}"} {"path":"downloaded/Booking.java","method_name":"getStatus","content":"/**\n\t * @return the status\n\t */\npublic String getStatus() {\n\t\treturn status;\n\t}"} {"path":"downloaded/Booking.java","method_name":"getCustomer","content":"/**\n\t * @return the customer\n\t */\npublic Customer getCustomer() {\n\t\treturn customer;\n\t}"} {"path":"downloaded/Booking.java","method_name":"hashCode","content":"/**\n\t * @param customer the customer to set\n\t */\n@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + ((address == null) ? 0 : address.hashCode());\n\t\tresult = prime * result + ((arrivalDate == null) ? 0 : arrivalDate.hashCode());\n\t\tresult = prime * result + ((billingInstructions == null) ? 0 : billingInstructions.hashCode());\n\t\tresult = prime * result + ((bookingConfirmedBy == null) ? 0 : bookingConfirmedBy.hashCode());\n\t\tresult = prime * result + ((bookingTakenBy == null) ? 0 : bookingTakenBy.hashCode());\n\t\tresult = prime * result + ((bookingType == null) ? 0 : bookingType.hashCode());\n\t\tresult = prime * result + ((depatureDate == null) ? 0 : depatureDate.hashCode());\n\t\tresult = prime * result + ((depositAmount == null) ? 0 : depositAmount.hashCode());\n\t\tresult = prime * result + ((id == null) ? 0 : id.hashCode());\n\t\tresult = prime * result + ((name == null) ? 0 : name.hashCode());\n\t\tresult = prime * result + ((noOfGuest == null) ? 0 : noOfGuest.hashCode());\n\t\tresult = prime * result + ((room == null) ? 0 : room.hashCode());\n\t\tresult = prime * result + ((status == null) ? 0 : status.hashCode());\n\t\tresult = prime * result + ((telephone == null) ? 0 : telephone.hashCode());\n\t\treturn result;\n\t}"} {"path":"downloaded/Booking.java","method_name":"equals","content":"/**\n\t * @param customer the customer to set\n\t */\n@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tBooking other = (Booking) obj;\n\t\tif (address == null) {\n\t\t\tif (other.address != null)\n\t\t\t\treturn false;\n\t\t} else if (!address.equals(other.address))\n\t\t\treturn false;\n\t\tif (arrivalDate == null) {\n\t\t\tif (other.arrivalDate != null)\n\t\t\t\treturn false;\n\t\t} else if (!arrivalDate.equals(other.arrivalDate))\n\t\t\treturn false;\n\t\tif (billingInstructions == null) {\n\t\t\tif (other.billingInstructions != null)\n\t\t\t\treturn false;\n\t\t} else if (!billingInstructions.equals(other.billingInstructions))\n\t\t\treturn false;\n\t\tif (bookingConfirmedBy == null) {\n\t\t\tif (other.bookingConfirmedBy != null)\n\t\t\t\treturn false;\n\t\t} else if (!bookingConfirmedBy.equals(other.bookingConfirmedBy))\n\t\t\treturn false;\n\t\tif (bookingTakenBy == null) {\n\t\t\tif (other.bookingTakenBy != null)\n\t\t\t\treturn false;\n\t\t} else if (!bookingTakenBy.equals(other.bookingTakenBy))\n\t\t\treturn false;\n\t\tif (bookingType == null) {\n\t\t\tif (other.bookingType != null)\n\t\t\t\treturn false;\n\t\t} else if (!bookingType.equals(other.bookingType))\n\t\t\treturn false;\n\t\tif (depatureDate == null) {\n\t\t\tif (other.depatureDate != null)\n\t\t\t\treturn false;\n\t\t} else if (!depatureDate.equals(other.depatureDate))\n\t\t\treturn false;\n\t\tif (depositAmount == null) {\n\t\t\tif (other.depositAmount != null)\n\t\t\t\treturn false;\n\t\t} else if (!depositAmount.equals(other.depositAmount))\n\t\t\treturn false;\n\t\tif (id == null) {\n\t\t\tif (other.id != null)\n\t\t\t\treturn false;\n\t\t} else if (!id.equals(other.id))\n\t\t\treturn false;\n\t\tif (name == null) {\n\t\t\tif (other.name != null)\n\t\t\t\treturn false;\n\t\t} else if (!name.equals(other.name))\n\t\t\treturn false;\n\t\tif (noOfGuest == null) {\n\t\t\tif (other.noOfGuest != null)\n\t\t\t\treturn false;\n\t\t} else if (!noOfGuest.equals(other.noOfGuest))\n\t\t\treturn false;\n\t\tif (room == null) {\n\t\t\tif (other.room != null)\n\t\t\t\treturn false;\n\t\t} else if (!room.equals(other.room))\n\t\t\treturn false;\n\t\tif (status == null) {\n\t\t\tif (other.status != null)\n\t\t\t\treturn false;\n\t\t} else if (!status.equals(other.status))\n\t\t\treturn false;\n\t\tif (telephone == null) {\n\t\t\tif (other.telephone != null)\n\t\t\t\treturn false;\n\t\t} else if (!telephone.equals(other.telephone))\n\t\t\treturn false;\n\t\treturn true;\n\t}"} {"path":"downloaded/Booking.java","method_name":"toString","content":"/**\n\t * @param customer the customer to set\n\t */\n@Override\n\tpublic String toString() {\n\t\treturn \"Booking [id=\" + id + \", arrivalDate=\" + arrivalDate + \", depatureDate=\" + depatureDate + \", name=\"\n\t\t\t\t+ name + \", address=\" + address + \", telephone=\" + telephone + \", bookingType=\" + bookingType\n\t\t\t\t+ \", billingInstructions=\" + billingInstructions + \", depositAmount=\" + depositAmount\n\t\t\t\t+ \", bookingConfirmedBy=\" + bookingConfirmedBy + \", bookingTakenBy=\" + bookingTakenBy + \", noOfGuest=\"\n\t\t\t\t+ noOfGuest + \", status=\" + status + \", room=\" + room + \"]\";\n\t}"} {"path":"downloaded/DefaultAuctionTranslator.java","method_name":"assembleAuction","content":"/**\n     * <p>\n     * Assembles the <code>Auction</code> from the <code>AuctionDTO</code>. The DTO is used as the custom transfer\n     * object inside this component to ensure serializability.\n     * </p>\n     *\n     * <p>\n     * The <code>Auction</code> implementation is <code>AuctionImpl</code>, and the <code>Bid</code> is\n     * <code>CustomBid</code>. The mapping is 1-1 for both, so it is easy to accomplish.\n     * </p>\n     *\n     * @param auctionDTO the <code>AuctionDTO</code> instance to assemble.\n     *\n     * @return auction the assembled <code>AuctionImpl</code> instance.\n     *\n     * @throws IllegalArgumentException If the parameter is null.\n     */\npublic Auction assembleAuction(AuctionDTO auctionDTO) {\n        AuctionPersistenceHelper.validateNotNull(auctionDTO, \"auctionDTO\");\n\n        BidDTO[] bidDTOs = auctionDTO.getBids();\n        Bid[] bids = new Bid[bidDTOs.length];\n\n        for (int i = 0; i < bidDTOs.length; i++) {\n            bids[i] = assembleBid(bidDTOs[i]);\n        }\n\n        return new AuctionImpl(auctionDTO.getId(), auctionDTO.getSummary(), auctionDTO.getDescription(),\n            auctionDTO.getItemCount(), auctionDTO.getMinimumBid(), auctionDTO.getStartDate(), auctionDTO.getEndDate(),\n            bids);\n    }"} {"path":"downloaded/DefaultAuctionTranslator.java","method_name":"assembleAuctionDTO","content":"/**\n     * <p>\n     * Assembles the <code>AuctionDTO</code> from the <code>Auction</code>. The DTO is used as the custom transfer\n     * object inside this component to ensure serializability.\n     * </p>\n     *\n     * <p>\n     * The <code>Auction</code> implementation is <code>AuctionImpl</code>, and the <code>Bid</code> is\n     * <code>CustomBid</code>. The mapping is 1-1 for both, so it is easy to accomplish.\n     * </p>\n     *\n     * @param auction the <code>Auction</code> instance to assemble.\n     *\n     * @return auctionDTO the assembled <code>AuctionDTO</code> instance.\n     *\n     * @throws IllegalArgumentException If the parameter is null or the Bids are not CustomBids.\n     */\npublic AuctionDTO assembleAuctionDTO(Auction auction) {\n        AuctionPersistenceHelper.validateNotNull(auction, \"auction\");\n\n        Bid[] bids = auction.getBids();\n        BidDTO[] bidDTOs = new BidDTO[bids.length];\n\n        for (int i = 0; i < bids.length; i++) {\n            bidDTOs[i] = assembleBidDTO(bids[i]);\n        }\n\n        AuctionDTO auctionDTO = new AuctionDTO();\n        auctionDTO.setId(auction.getId());\n        auctionDTO.setSummary(auction.getSummary());\n        auctionDTO.setDescription(auction.getDescription());\n        auctionDTO.setItemCount(auction.getItemCount());\n        auctionDTO.setMinimumBid(auction.getMinimumBid());\n        auctionDTO.setStartDate(auction.getStartDate());\n        auctionDTO.setEndDate(auction.getEndDate());\n        auctionDTO.setBids(bidDTOs);\n\n        return auctionDTO;\n    }"} {"path":"downloaded/DefaultAuctionTranslator.java","method_name":"assembleBid","content":"/**\n     * <p>\n     * Assembles the <code>Bid</code> from the <code>BidDTO</code>. The DTO is used as the custom transfer object\n     * inside this component to ensure serializability.\n     * </p>\n     *\n     * <p>\n     * The <code>Bid</code> is <code>CustomBid</code>. The mapping is 1-1, so it is easy to accomplish.\n     * </p>\n     *\n     * @param bidDTO the <code>BidDTO</code> instance to assemble.\n     *\n     * @return bid the assembled <code>Bid</code> instance.\n     *\n     * @throws IllegalArgumentException If the parameter is null.\n     */\npublic Bid assembleBid(BidDTO bidDTO) {\n        AuctionPersistenceHelper.validateNotNull(bidDTO, \"bidDTO\");\n\n        CustomBid bid = new CustomBid(bidDTO.getBidderId(), bidDTO.getImageId(), bidDTO.getMaxAmount(),\n                bidDTO.getTimestamp());\n\n        if (bidDTO.getEffectiveAmount() != null) {\n            bid.setEffectiveAmount(bidDTO.getEffectiveAmount().intValue());\n        }\n\n        if (bidDTO.getId() != null) {\n            bid.setId(bidDTO.getId().longValue());\n        }\n\n        return bid;\n    }"} {"path":"downloaded/DefaultAuctionTranslator.java","method_name":"assembleBidDTO","content":"/**\n     * <p>\n     * Assembles the <code>BidDTO</code> from the <code>Bid</code>. The DTO is used as the custom transfer object\n     * inside this component to ensure serializability.\n     * </p>\n     *\n     * <p>\n     * The <code>Bid</code> is <code>CustomBid</code>. The mapping is 1-1, so it is easy to accomplish.\n     * </p>\n     *\n     * @param bid the <code>Bid</code> instance to assemble.\n     *\n     * @return bidDTO the assembled <code>BidDTO</code> instance.\n     *\n     * @throws IllegalArgumentException If the parameter is null or not a <code>CustomBid</code>.\n     */\npublic BidDTO assembleBidDTO(Bid bid) {\n        AuctionPersistenceHelper.validateNotNull(bid, \"bid\");\n\n        if (!(bid instanceof CustomBid)) {\n            throw new IllegalArgumentException(\"Bid must be an instanceof of CustomBid.\");\n        }\n\n        CustomBid custonBid = (CustomBid) bid;\n        BidDTO bidDTO = new BidDTO();\n        bidDTO.setBidderId(bid.getBidderId());\n        bidDTO.setEffectiveAmount(bid.getEffectiveAmount());\n        bidDTO.setMaxAmount(bid.getMaxAmount());\n        bidDTO.setTimestamp(bid.getTimestamp());\n        bidDTO.setId(custonBid.getId());\n        bidDTO.setImageId(custonBid.getImageId());\n\n        return bidDTO;\n    }"} {"path":"downloaded/StatisticsCollector.java","method_name":"getCounters","content":"/**\n\t * \n\t * @param submission\n\t * \t\tThe submission id.\n\t * @return\n\t * \t\tReturns a node's map for a submission id with \n\t * \t\tall its counters and their values.\n\t */\npublic synchronized Map<String, Long> getCounters(int submission) {\n\t\tMap<Integer, Map<String, Long>> mines = counters.get(myId);\n\t\tif (mines != null) {\n\t\t\treturn mines.get(submission);\n\t\t}\n\t\treturn null;\n\t}"} {"path":"downloaded/StatisticsCollector.java","method_name":"removeCountersSubmission","content":"/**\n\t * Removes the map corresponding to the node \n\t * and the submission id.\n\t * \n\t * @param idSubmission\n\t * \t\tThe submission id.\n\t * @return\n\t * \t\tThe map for the node and the submission id \n\t * \t\tthat it is removed. \n\t */\npublic synchronized Map<String, Long> removeCountersSubmission(\n\t\t\tint idSubmission) {\n\t\tMap<Integer, Map<String, Long>> mines = counters.get(myId);\n\t\tif (mines != null)\n\t\t\treturn mines.remove(idSubmission);\n\t\telse\n\t\t\treturn null;\n\t}"} {"path":"downloaded/GraphExporter.java","method_name":"export","content":"/**\n     * Export the graph in DOT or GraphML format.\n     *\n     * @param <V> the Graph vertices type\n     * @param <E> the Graph edges type\n     * @param <G> the Graph type\n     * @param graph the input graph\n     * @return an instance of {@link NamedExportSelector}\n     */\npublic static <N, G extends Graph<N>> ExportSelector<N, ?> export( G graph )\n    {\n        graph = requireNonNull( graph, \"Null graph can not be exported\" );\n        //return new DefaultExportSelector<N, E>( graph );\n        return null;\n    }"} {"path":"downloaded/GraphExporter.java","method_name":"export","content":"/**\n     * Export the graph in DOT or GraphML format.\n     *\n     * @param <V> the Graph vertices type\n     * @param <E> the Graph edges type\n     * @param <G> the Graph type\n     * @param graph the input graph\n     * @return an instance of {@link NamedExportSelector}\n     */\npublic static <V, E, G extends ValueGraph<V, E>> ExportSelector<V, E> export( G graph )\n    {\n        graph = requireNonNull( graph, \"Null graph can not be exported\" );\n        return new DefaultExportSelector<V, E>( graph );\n    }"} {"path":"downloaded/InsertServet.java","method_name":"processRequest","content":"/**\n\t * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)\n\t */\nprotected void processRequest(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n\t\trequest.setCharacterEncoding(\"UTF-8\");\n        HttpSession session = request.getSession();\n        //取得使用者輸入的參數  \n        String id=request.getParameter(\"id\");\n        String name=request.getParameter(\"name\");\n        String password=request.getParameter(\"password2\");         \n        String gender=request.getParameter(\"gender\");\n        String email=request.getParameter(\"email\");    \n        String birthday=request.getParameter(\"birthday\"); \n        String phone=request.getParameter(\"phone\"); \n        String address=request.getParameter(\"address\");\n        String captcha=request.getParameter(\"captcha\");\n\n        //將使用者輸入的資料存在request層的attribute 省去註冊失敗時使用者重新填寫的時間\n        request.setAttribute(\"id\",id);\n    \trequest.setAttribute(\"name\",name);\n    \trequest.setAttribute(\"password\",password);\n    \trequest.setAttribute(\"gender\",gender);\n    \trequest.setAttribute(\"email\",email);\n    \trequest.setAttribute(\"birthday\",birthday);\n    \trequest.setAttribute(\"phone\",phone);\n    \trequest.setAttribute(\"address\",address);\n    \t\n        //驗證碼不一致時 跳回註冊畫面重新填寫\n        String sessionCaptcha = (String)session.getAttribute(\"CaptchaServlet\");\n        if(!captcha.equalsIgnoreCase(sessionCaptcha)) {\n        \trequest.setAttribute(\"registerStatus\", \"驗證碼不一致\");\n        \trequest.getRequestDispatcher(\"/register.jsp\").forward(request, response);\n        \treturn;\n        }\n        //驗證碼相同時 進行註冊\n        \tCustomer customer=new Customer(id,password,name);\n        \tcustomer.setGender(gender.charAt(0));\n        \tcustomer.setEmail(email);\n        \tcustomer.setBirthday(birthday);\n        \tcustomer.setPhone(phone);\n        \tcustomer.setAddress(address);\n        \tCustomerService service=new CustomerService();\n        \ttry {\n\t\t\t\tservice.register(customer);\n\t\t\t} catch (VGBException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t\trequest.setAttribute(\"registerStatus\", e.getMessage());\n\t\t\t\trequest.getRequestDispatcher(\"/register.jsp\").forward(request, response);\n\t\t\t\treturn;\n\t\t\t}\n"} {"path":"downloaded/XmlUtil.java","method_name":" createDocumen","content":" /**\n     * Creates a document.\n     *\n     * @param nsURI nullable namespace URI\n     * @param nsQualifier nullable namespace qualifier\n     * @param docElemName notnull name of the document element\n     * @return a new Document\n     * @throws IOException if the parser configuration fails\n     *\n public static Document createDocument(@Nullable String nsURI, @Nullable String nsQualifier, String docElemName) throws IOException {\n        try {\n            Document doc;\n            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\n            if (nsURI != null) {\n                builderFactory.setNamespaceAware(true);\n                DocumentBuilder builder = builderFactory.newDocumentBuilder();\n                DOMImplementation domImpl = builder.getDOMImplementation();\n                doc = domImpl.createDocument(nsURI, nsQualifier == null ? docElemName : nsQualifier + \":\" + docElemName, null);\n            } else {\n                DocumentBuilder builder = builderFactory.newDocumentBuilder();\n                doc = builder.newDocument();\n                Element elem = doc.createElement(docElemName);\n                doc.appendChild(elem);\n            }\n            return doc;\n        } catch (ParserConfigurationException ex) {\n            throw new IOException(ex);\n        }\n\n    "} {"path":"downloaded/XmlUtil.java","method_name":" rea","content":" /**\n     * Creates a document.\n     *\n     * @param nsURI nullable namespace URI\n     * @param nsQualifier nullable namespace qualifier\n     * @param docElemName notnull name of the document element\n     * @return a new Document\n     * @throws IOException if the parser configuration fails\n     *\n public static Document read(Reader in, boolean namespaceAware) throws IOException {\n        InputSource inputSource = new InputSource(in);\n        return XmlUtil.read(inputSource, namespaceAware);\n\n    "} {"path":"downloaded/XmlUtil.java","method_name":" rea","content":" /**\n     * Creates a document.\n     *\n     * @param nsURI nullable namespace URI\n     * @param nsQualifier nullable namespace qualifier\n     * @param docElemName notnull name of the document element\n     * @return a new Document\n     * @throws IOException if the parser configuration fails\n     *\n public static Document read(InputStream in, boolean namespaceAware) throws IOException {\n        InputSource inputSource = new InputSource(in);\n        return XmlUtil.read(inputSource, namespaceAware);\n\n    "} {"path":"downloaded/XmlUtil.java","method_name":" rea","content":" /**\n     * Creates a document.\n     *\n     * @param nsURI nullable namespace URI\n     * @param nsQualifier nullable namespace qualifier\n     * @param docElemName notnull name of the document element\n     * @return a new Document\n     * @throws IOException if the parser configuration fails\n     *\n public static Document read(Path in, boolean namespaceAware) throws IOException {\n        InputSource inputSource = new InputSource(in.toUri().toASCIIString());\n        return XmlUtil.read(inputSource, namespaceAware);\n    "} {"path":"downloaded/XmlUtil.java","method_name":" readWithLocation","content":" /**\n     * Creates a document.\n     *\n     * @param nsURI nullable namespace URI\n     * @param nsQualifier nullable namespace qualifier\n     * @param docElemName notnull name of the document element\n     * @return a new Document\n     * @throws IOException if the parser configuration fails\n     *\n @Nonnull\n    public static Document readWithLocations(Path in, boolean namespaceAware) throws IOException {\n        InputSource inputSource = new InputSource(in.toUri().toASCIIString());\n        return XmlUtil.readWithLocations(inputSource, namespaceAware);\n    "} {"path":"downloaded/XmlUtil.java","method_name":" rea","content":" /**\n     * Creates a document.\n     *\n     * @param nsURI nullable namespace URI\n     * @param nsQualifier nullable namespace qualifier\n     * @param docElemName notnull name of the document element\n     * @return a new Document\n     * @throws IOException if the parser configuration fails\n     *\n public static Document read(InputSource inputSource, boolean namespaceAware) throws IOException {\n        try {\n            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\n            if (namespaceAware) {\n                builderFactory.setNamespaceAware(true);\n            }\n            DocumentBuilder builder = builderFactory.newDocumentBuilder();\n            Document doc = builder.parse(inputSource);\n            return doc;\n        } catch (@Nonnull SAXException | ParserConfigurationException ex) {\n            throw new IOException(ex);\n        }\n    "} {"path":"downloaded/XmlUtil.java","method_name":" readWithLocation","content":" /**\n     * Reads the specified input into a document. Each Node contains a\n     * \"location\" attribute specifying the file, the line number and the column\n     * number of the node.\n     *\n     * References:\n     * <a href=\"https://stackoverflow.com/questions/2798376/is-there-a-way-to-parse-xml-via-sax-dom-with-line-numbers-available-per-node\">\n     * Stackoverflow</a>.\n     *\n     * @param inputSource the input source\n     * @param namespaceAware whether to be name space aware\n     * @return the document\n     * @throws java.io.IOException in case of failure\n     *\n @Nonnull\n    public static Document readWithLocations(InputSource inputSource, boolean namespaceAware) throws IOException {\n        try {\n            // Create transformer SAX source that adds current element position to\n            // the element as attributes.\n            XMLReader xmlReader = SAXParserFactory.newInstance().newSAXParser().getXMLReader();\n            LocationFilter locationFilter = new LocationFilter(xmlReader);\n            SAXSource saxSource = new SAXSource(locationFilter, inputSource);\n\n            // Perform an empty transformation from SAX source to DOM result.\n            TransformerFactory transformerFactory = TransformerFactory.newInstance();\n            Transformer transformer = transformerFactory.newTransformer();\n            DOMResult domResult = new DOMResult();\n            transformer.transform(saxSource, domResult);\n            Node root = domResult.getNode();\n            return (Document) root;\n        } catch (@Nonnull TransformerException | SAXException | ParserConfigurationException ex) {\n            throw new IOException(ex);\n        }\n    "} {"path":"downloaded/XmlUtil.java","method_name":" getLocato","content":" /**\n     * Reads the specified input into a document. Each Node contains a\n     * \"location\" attribute specifying the file, the line number and the column\n     * number of the node.\n     *\n     * References:\n     * <a href=\"https://stackoverflow.com/questions/2798376/is-there-a-way-to-parse-xml-via-sax-dom-with-line-numbers-available-per-node\">\n     * Stackoverflow</a>.\n     *\n     * @param inputSource the input source\n     * @param namespaceAware whether to be name space aware\n     * @return the document\n     * @throws java.io.IOException in case of failure\n     *\n public static Locator getLocator(Node node) {\n        final NamedNodeMap attributes = node.getAttributes();\n        Node attrNode = attributes == null ? null : attributes.getNamedItemNS(LOCATION_NAMESPACE, LOCATION_ATTRIBUTE);\n        if (attrNode != null) {\n            String[] parts = attrNode.getNodeValue().split(SEPARATOR);\n            if (parts.length == 4) {\n                return new MyLocator(Integer.parseInt(parts[0]), Integer.parseInt(parts[1]), parts[2], parts[3]);\n            }\n        }\n        return null;\n    "} {"path":"downloaded/XmlUtil.java","method_name":" preorderStrea","content":" /**\n     * Returns a stream which iterates over the subtree starting at the\n     * specified node in preorder sequence.\n     *\n     * @param node a node\n     * @return a stream\n     *\n public static Stream<Node> preorderStream(Node node) {\n        return StreamSupport.stream(new PreorderSpliterator<>(n -> {\n            final NodeList childNodes = n.getChildNodes();\n            return () -> new ChildIterator<>(childNodes.getLength(), childNodes::item);\n        }, node), false);\n    "} {"path":"downloaded/Interpreter.java","method_name":"initArray","content":"/**\n\t * Inits the array.\n\t * \n\t * @param gCodeArray\n\t *            the g code array\n\t * @return the array list\n\t * @throws IOException\n\t *             Signals that an I/O exception has occurred.\n\t */\npublic ArrayList<GCode> initArray(ArrayList<GCode> gCodeArray) throws IOException {\n\t\tScanner fileScanner = new Scanner(new FileReader(\"src/gcode.txt\"));\n\t\tString line;\n\t\twhile (fileScanner.hasNextLine()) {\n\t\t\tline = fileScanner.nextLine();\n\t\t\tswitch (line.substring(0, 2)) {\n\t\t\tcase \"G0\":\n\t\t\tcase \"G00\": {\n\t\t\t\tgetOutData(line);\n\t\t\t\tgCodeArray.add(gcode.new G00(line.substring(0, 3), xAxis, yAxis, zAxis));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"G1\":\n\t\t\tcase \"G01\":\n\t\t\t\tgetOutData(line);\n\t\t\t\tgCodeArray.add(gcode.new G01(line.substring(0, 3), xAxis, yAxis, zAxis));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn gCodeArray;\n\n\t}"} {"path":"downloaded/BranchVersionNumerationAdapter.java","method_name":"buildVersionName","content":"/**\n\t * Build version name\n\t */\nprivate String buildVersionName(String versionNumber) {\n\t\tString ver[] = versionNumber.split(\"\\\\.\");\n\t\tStringBuilder sb = new StringBuilder();\n\t\t\n\t\tif (ver.length > 1) {\n\t\t\tint verNum = Integer.parseInt(ver[ver.length - 1]);\n\t\t\t\n\t\t\tfor (int i=0; i<ver.length - 1; i++) {\n\t\t\t\tsb.append(ver[i]).append(\".\");\n\t\t\t}\n\t\t\t\n\t\t\treturn sb.toString() + ++verNum;\n\t\t} else {\n\t\t\tint verNum = Integer.parseInt(versionNumber);\n\t\t\treturn Integer.toString(++verNum);\n\t\t}\n\t}"} {"path":"downloaded/YearSiteNumAccessionValidator.java","method_name":"accessionNumberNotInTheSystem","content":"/**\n\t * @param accessionNumber\n\t * @param recordType\n\t * @return\n\t */\npublic boolean accessionNumberNotInTheSystem(String accessionNumber,\n\t\t\tString recordType) {\n\t\tSampleDAO SampleDAO = new SampleDAOImpl();\n\t\tSample sample = null;\n\t\tsample = SampleDAO.getSampleByAccessionNumber(accessionNumber);\n\t\treturn !(sample == null);\n\t}"} {"path":"downloaded/YearSiteNumAccessionValidator.java","method_name":"checkAccessionNumberValidity","content":"/**\n\t * @param accessionNumber\n\t * @param recordType\n\t * @return\n\t */\npublic ValidationResults checkAccessionNumberValidity(\n\t\t\tString accessionNumber, String recordType, String isRequired,\n\t\t\tString projectFormName) {\n\n\t\tValidationResults results = validFormat(accessionNumber, true);\n\t\t// TODO refactor accessionNumberIsUsed into two methods so the null\n\t\t// isn't needed. (Its only used for program accession number)\n\t\tif (results == ValidationResults.SUCCESS\n\t\t\t\t&& accessionNumberIsUsed(accessionNumber, null)) {\n\t\t\tresults = ValidationResults.USED_FAIL;\n\t\t}\n\n\t\treturn results;\n\t}"} {"path":"downloaded/YearSiteNumAccessionValidator.java","method_name":"validFormat","content":"/**\n\t * @param accessionNumber\n\t * @param recordType\n\t * @return\n\t */\npublic ValidationResults validFormat(String accessionNumber,\n\t\t\tboolean checkDate) {\n\t\tif (accessionNumber.length() != LENGTH) {\n\t\t\treturn ValidationResults.LENGTH_FAIL;\n\t\t}\n\n\t\tif (!accessionNumber.substring(SITE_START, SITE_END).equals(getSite())) {\n\t\t\treturn ValidationResults.SITE_FAIL;\n\t\t}\n\n\t\tif (checkDate) {\n\t\t\tint year = new GregorianCalendar().get(Calendar.YEAR);\n\t\t\ttry {\n\t\t\t\tif ((year - 2000) != Integer.parseInt(accessionNumber\n\t\t\t\t\t\t.substring(YEAR_START, YEAR_END))) {\n\t\t\t\t\treturn ValidationResults.YEAR_FAIL;\n\t\t\t\t}\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\treturn ValidationResults.YEAR_FAIL;\n\t\t\t}\n\t\t} else {\n\t\t\ttry { // quick and dirty to make sure they are digits\n\t\t\t\tInteger.parseInt(accessionNumber\n\t\t\t\t\t\t.substring(YEAR_START, YEAR_END));\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\treturn ValidationResults.YEAR_FAIL;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tInteger.parseInt(accessionNumber.substring(INCREMENT_START));\n\t\t} catch (NumberFormatException e) {\n\t\t\treturn ValidationResults.FORMAT_FAIL;\n\t\t}\n\n\t\treturn ValidationResults.SUCCESS;\n\t}"} {"path":"downloaded/YearSiteNumAccessionValidator.java","method_name":"getInvalidFormatMessage","content":"/**\n\t * @param accessionNumber\n\t * @param recordType\n\t * @return\n\t */\npublic String getInvalidFormatMessage(ValidationResults results) {\n\t\treturn StringUtil.getMessageForKey(\n\t\t\t\t\"sample.entry.invalid.accession.number.format.corrected\",\n\t\t\t\tgetFormatPattern(), getFormatExample());\n\t}"} {"path":"downloaded/YearSiteNumAccessionValidator.java","method_name":"getFormatPattern","content":"/**\n\t * @param accessionNumber\n\t * @param recordType\n\t * @return\n\t */\nprivate String getFormatPattern() {\n\t\tStringBuilder format = new StringBuilder();\n\t\tformat.append(StringUtil.getMessageForKey(\"date.two.digit.year\"));\n\t\tformat.append(\"SS\");\n\t\tfor (int i = 0; i < getChangeableLength(); i++) {\n\t\t\tformat.append(\"#\");\n\t\t}\n\t\treturn format.toString();\n\t}"} {"path":"downloaded/YearSiteNumAccessionValidator.java","method_name":"getFormatExample","content":"/**\n\t * @param accessionNumber\n\t * @param recordType\n\t * @return\n\t */\nprivate String getFormatExample() {\n\t\tStringBuilder format = new StringBuilder();\n\t\tformat.append(DateUtil.getTwoDigitYear());\n\t\tformat.append(getSite());\n\t\tfor (int i = 0; i < getChangeableLength() - 1; i++) {\n\t\t\tformat.append(\"0\");\n\t\t}\n\n\t\tformat.append(\"1\");\n\n\t\treturn format.toString();\n\t}"} {"path":"downloaded/YearSiteNumAccessionValidator.java","method_name":"getMaxAccessionLength","content":"/**\n\t * @param accessionNumber\n\t * @param recordType\n\t * @return\n\t */\npublic int getMaxAccessionLength() {\n\t\treturn getSiteEndIndex() + INCREMENT_STARTING_VALUE.length();\n\t}"} {"path":"downloaded/YearSiteNumAccessionValidator.java","method_name":"getIncrementStartIndex","content":"/**\n\t * @param accessionNumber\n\t * @param recordType\n\t * @return\n\t */\nprotected static int getIncrementStartIndex() {\n\t\treturn getSiteEndIndex();\n\t}"} {"path":"downloaded/YearSiteNumAccessionValidator.java","method_name":"getSiteStartIndex","content":"/**\n\t * @param accessionNumber\n\t * @param recordType\n\t * @return\n\t */\nprotected static int getSiteStartIndex() {\n\t\treturn getYearEndIndex();\n\t}"} {"path":"downloaded/YearSiteNumAccessionValidator.java","method_name":"getSiteEndIndex","content":"/**\n\t * @param accessionNumber\n\t * @param recordType\n\t * @return\n\t */\nprotected static int getSiteEndIndex() {\n\t\treturn getSiteStartIndex() + getSite().length();\n\t}"} {"path":"downloaded/YearSiteNumAccessionValidator.java","method_name":"getYearStartIndex","content":"/**\n\t * @param accessionNumber\n\t * @param recordType\n\t * @return\n\t */\nprotected static int getYearStartIndex() {\n\t\treturn 0;\n\t}"} {"path":"downloaded/YearSiteNumAccessionValidator.java","method_name":"getYearEndIndex","content":"/**\n\t * @param accessionNumber\n\t * @param recordType\n\t * @return\n\t */\nprotected static int getYearEndIndex() {\n\t\treturn getYearStartIndex() + 2;\n\t}"} {"path":"downloaded/YearSiteNumAccessionValidator.java","method_name":"getInvarientLength","content":"/**\n\t * @param accessionNumber\n\t * @param recordType\n\t * @return\n\t */\n@Override\n\tpublic int getInvarientLength() {\n\t\treturn getSiteEndIndex();\n\t}"} {"path":"downloaded/YearSiteNumAccessionValidator.java","method_name":"getChangeableLength","content":"/**\n\t * @param accessionNumber\n\t * @param recordType\n\t * @return\n\t */\npublic int getChangeableLength() {\n\t\treturn getMaxAccessionLength() - getInvarientLength();\n\t}"} {"path":"downloaded/YearSiteNumAccessionValidator.java","method_name":"getSite","content":"/**\n\t * @param accessionNumber\n\t * @param recordType\n\t * @return\n\t */\nprotected static String getSite() {\n\t\treturn ConfigurationProperties.getInstance().getPropertyValue(\n\t\t\t\tProperty.SiteCode);\n\t}"} {"path":"downloaded/YearSiteNumAccessionValidator.java","method_name":"getPrefix","content":"/**\n\t * @param accessionNumber\n\t * @param recordType\n\t * @return\n\t */\n@Override\n\tpublic String getPrefix() {\n\t\treturn null; // no single prefix\n\t}"} {"path":"downloaded/XmlRegionReadHandler.java","method_name":"processHandle","content":"/**\n\t * Process handle.\n\t * \n\t * @param pElement\n\t *            the element\n\t * @return the xml region {@inheritDoc}\n\t */\n@Override\n\tXmlRegion processHandle(Element pElement) throws XmlReaderException {\n\t\tXmlRegion xmlRegion = new XmlRegion(pElement.getValue());\t//sets the name\n\t\t//return new XmlSport();\n\t\treturn xmlRegion;\n\t}"} {"path":"downloaded/FormatString.java","method_name":"�字符串","content":"/**\n\t * 处理字符串为NULL\n\t * @param str\t待处理字符串内容\n * @return\t\t 处理后字符串内容\n\t */\n\tpublic static String formatNull(St"} {"path":"downloaded/FormatString.java","method_name":"处理字�","content":"/**\n\t * 处理字符串为NULL\n\t * @param str\t待处理字符串内容\n�\n\t * @param str  待处理字符串内容\n\t * @return\t        处理后字符串内容\n\t */\n\tpublic static String formatSpace(String str){\n\t\tif(str == null){\n\t\t\treturn \"null\";\n\t"} {"path":"downloaded/FormatString.java","method_name":"\t * 处�","content":"/**\n\t * 处理字符串为NULL\n\t * @param str\t待处理字符串内容\n.trim();\n\t\t}\n\t}\n\t/**\n\t * 处理XML元素中关键字\n\t * @param str XML元素内容\n\t * @return\t     处理后XML元素内容\n\t */\n\tpublic static String formatXml(String str){\n\t\tstr = str.replaceAll(\"<\", \"&lt;\");\n\t\tstr = str.replaceAll(\">\", \"&gt;\");\n\t"} {"path":"downloaded/FormatString.java","method_name":"ceAll(\"\\\"","content":"/**\n\t * 处理字符串为NULL\n\t * @param str\t待处理字符串内容\n\");\n\t\tstr = str.replaceAll(\"\\\"\", \"&quot;\");\n\t\treturn str;\n\t}\n\t/**\n\t * 处理SQL中特殊字符\n\t * @param str sql语句\n\t * @return\t     处�"} {"path":"downloaded/FormatString.java","method_name":"|chr(38)|","content":"/**\n\t * 处理字符串为NULL\n\t * @param str\t待处理字符串内容\neplaceAll(\"&\", \"'||chr(38)||'\");\n\t\tstr = str.replaceAll(\"'\", \"''\");\n\t\treturn str;\n\t}\n\t\n\t\n\t/**\n\t * 产生随机数\n\t */\n\tprivate static fina"} {"path":"downloaded/FormatString.java","method_name":"dom();\n\tp","content":"/**\n\t * 处理字符串为NULL\n\t * @param str\t待处理字符串内容\nndom random = new Random();\n\tpublic static int getRandom() {\n\t\tint theResult = 0;\n\t\twhile (theResult <= 0) {\n\t\t\ttheResult = random.nextInt();\n\t\t}\n\t\treturn theResult;\n\t}\n\t\n\tpublic static String getRandom(int len) {\n\t\tString str"} {"path":"downloaded/ProductoClase.java","method_name":"ing getNo","content":"  /**\n     * Variable privada: condición de habilitado de la clase de producto\n    \n    public String getNombre() {\n        return nombre;\n "} {"path":"downloaded/ProductoClase.java","method_name":"ida getUn","content":"  /**\n     * Variable privada: condición de habilitado de la clase de producto\n    \n    public ProductoUnidadMedida getUnidad() {\n        return unidad;\n "} {"path":"downloaded/ProductoClase.java","method_name":"ean isHabili","content":"  /**\n     * Variable privada: condición de habilitado de la clase de producto\n    \n    public boolean isHabilitado() {\n        return habilitado;\n "} {"path":"downloaded/ProductoClase.java","method_name":"ong g","content":"  /**\n     * Variable privada: condición de habilitado de la clase de producto\n    \n    public Long getId() {\n        return id;\n "} {"path":"downloaded/ProductoClase.java","method_name":"int hash","content":"  /**\n     * Variable privada: condición de habilitado de la clase de producto\n    \n    @Override\n    public int hashCode() {\n        int hash = 0;\n        hash += (id != null ? id.hashCode() : 0);\n        return hash;\n "} {"path":"downloaded/ProductoClase.java","method_name":"ean eq","content":"  /**\n     * Variable privada: condición de habilitado de la clase de producto\n    \n    @Override\n    public boolean equals(Object object) {\n        // TODO: Warning - this method won't work in the case the id fields are not set\n        if (!(object instanceof ProductoClase)) {\n            return false;\n        }\n        ProductoClase other = (ProductoClase) object;\n        if ((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id))) {\n            return false;\n        }\n        return true;\n "} {"path":"downloaded/ProductoClase.java","method_name":"ing toSt","content":"  /**\n     * Variable privada: condición de habilitado de la clase de producto\n    \n    @Override\n    public String toString() {\n        return \"ar.gob.ambiente.sacvefor.localcompleto.entities.ProductoClase[ id=\" + id + \" ]\";\n "} {"path":"downloaded/VectorHeapb.java","method_name":"left","content":"/**\n\t * @param i\n\t * @return\n\t */\nprotected static int left(int i)\n\t// pre: 0 <= i < size\n\t// post: returns index of left child of node at location i\n\t{\n\t\treturn 2 * i + 1;\n\t}"} {"path":"downloaded/VectorHeapb.java","method_name":"parent","content":"/**\n\t * @param i\n\t * @return\n\t */\nprotected static int parent(int i)\n\t// pre: 0 <= i < size\n\t// post: returns parent of node at location i\n\t{\n\t\treturn (i - 1) / 2;\n\t}"} {"path":"downloaded/VectorHeapb.java","method_name":"right","content":"/**\n\t * @param i\n\t * @return\n\t */\nprotected static int right(int i)\n\t// pre: 0 <= i < size\n\t// post: returns index of right child of node at location i\n\t{\n\t\treturn (2 * i + 1) + 1;\n\t}"} {"path":"downloaded/VectorHeapb.java","method_name":"getFirst","content":"/**\n\t * @param v\n\t */\n@Override\n\tpublic E getFirst() {\n\t\treturn data.elementAt(0);\n\t}"} {"path":"downloaded/VectorHeapb.java","method_name":"isEmpty","content":"/**\n\t * @param v\n\t */\n@Override\n\tpublic boolean isEmpty() {\n\t\treturn data.size() == 0;\n\t}"} {"path":"downloaded/VectorHeapb.java","method_name":"pushDownRoot","content":"/**\n\t * @param root\n\t */\nprotected void pushDownRoot(int root)\n\t// pre: 0 <= root < size\n\t// post: moves node at index root down\n\t// to appropriate position in subtree\n\t{\n\t\tint heapSize = data.size();\n\t\tE value = data.get(root);\n\t\twhile (root < heapSize) {\n\t\t\tint childpos = left(root);\n\t\t\tif (childpos < heapSize) {\n\t\t\t\tif ((right(root) < heapSize)\n\t\t\t\t\t\t&& ((data.get(childpos + 1)).compareTo(data\n\t\t\t\t\t\t\t\t.get(childpos)) < 0)) {\n\t\t\t\t\tchildpos++;\n\t\t\t\t}\n\t\t\t\t// Assert: childpos indexes smaller of two children\n\t\t\t\tif ((data.get(childpos)).compareTo(value) < 0) {\n\t\t\t\t\tdata.set(root, data.get(childpos));\n\t\t\t\t\troot = childpos; // keep moving down\n\t\t\t\t} else { // found right location\n\t\t\t\t\tdata.set(root, value);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else { // at a leaf! insert and halt\n\t\t\t\tdata.set(root, value);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}"} {"path":"downloaded/VectorHeapb.java","method_name":"remove","content":"/**\n\t * @param root\n\t */\npublic E remove()\n\t// pre: !isEmpty()\n\t// post: returns and removes minimum value from queue\n\t{\n\t\tE minVal = getFirst();\n\t\tdata.set(0, data.get(data.size() - 1));\n\t\tdata.setSize(data.size() - 1);\n\t\tif (data.size() > 1)\n\t\t\tpushDownRoot(0);\n\t\treturn minVal;\n\t}"} {"path":"downloaded/VectorHeapb.java","method_name":"size","content":"/**\n\t * @param root\n\t */\n@Override\n\tpublic int size() {\n\t\treturn data.size();\n\t}"} {"path":"downloaded/VectorHeapb.java","method_name":"toString","content":"/**\n\t * @param root\n\t */\n@Override\n\tpublic String toString() {\n\t\treturn \"\";\n\t}"} {"path":"downloaded/21_40a321bb43bf4cdc9775f9b3645eff984afe0d5e_iConomy_t.java","method_name":"getBank","content":"/**\n      * Grab the bank to modify and access bank accounts.\n      *\n      * @return Bank\n      */\npublic static Bank getBank() {\n         return Bank;\n     }"} {"path":"downloaded/21_40a321bb43bf4cdc9775f9b3645eff984afe0d5e_iConomy_t.java","method_name":"getDatabase","content":"/**\n      * Grabs Database controller.\n      *\n      * @return iDatabase\n      */\npublic static iDatabase getDatabase() {\n         return iDatabase;\n     }"} {"path":"downloaded/21_40a321bb43bf4cdc9775f9b3645eff984afe0d5e_iConomy_t.java","method_name":"getTransactions","content":"/**\n      * Grabs Transaction Log Controller.\n      *\n      * Used to log transactions between a player and anything. Such as the\n      * system or another player or just enviroment.\n      *\n      * @return T\n      */\npublic static Transactions getTransactions() {\n         return Transactions;\n     }"} {"path":"downloaded/21_40a321bb43bf4cdc9775f9b3645eff984afe0d5e_iConomy_t.java","method_name":"getPermissions","content":"/**\n      * Grabs Transaction Log Controller.\n      *\n      * Used to log transactions between a player and anything. Such as the\n      * system or another player or just enviroment.\n      *\n      * @return T\n      */\npublic static PermissionHandler getPermissions() {\n        return Permissions;\n    }"} {"path":"downloaded/21_40a321bb43bf4cdc9775f9b3645eff984afe0d5e_iConomy_t.java","method_name":"hasPermissions","content":"/**\n      * Grabs Transaction Log Controller.\n      *\n      * Used to log transactions between a player and anything. Such as the\n      * system or another player or just enviroment.\n      *\n      * @return T\n      */\npublic static boolean hasPermissions(Player p, String s) {\n         if (Permissions != null) {\n             return Permissions.has(p, s);\n         } else {\n             return p.isOp();\n         }\n     }"} {"path":"downloaded/21_40a321bb43bf4cdc9775f9b3645eff984afe0d5e_iConomy_t.java","method_name":"setPermissions","content":"/**\n      * Grabs Transaction Log Controller.\n      *\n      * Used to log transactions between a player and anything. Such as the\n      * system or another player or just enviroment.\n      *\n      * @return T\n      */\npublic static boolean setPermissions(PermissionHandler ph) {\n         if (Permissions == null) {\n             Permissions = ph;\n         } else {\n             return false;\n         }\n         return true;\n     }"} {"path":"downloaded/21_40a321bb43bf4cdc9775f9b3645eff984afe0d5e_iConomy_t.java","method_name":"getBukkitServer","content":"/**\n      * Grabs Transaction Log Controller.\n      *\n      * Used to log transactions between a player and anything. Such as the\n      * system or another player or just enviroment.\n      *\n      * @return T\n      */\npublic static Server getBukkitServer() {\n         return Server;\n     }"} {"path":"downloaded/Lesson.java","method_name":"getStudents","content":"/**\n     *\n     * @return array of students of Student type\n     */\npublic Student[] getStudents() {\n        return students;\n    }"} {"path":"downloaded/Lesson.java","method_name":"getAvg","content":"/**\n     *\n     * @return average of students grade in course\n     */\npublic float getAvg() {\n        calculateAvg();\n        return avg;\n    }"} {"path":"downloaded/Lesson.java","method_name":"getId","content":"/**\n     *\n     * @return ID of the course\n     */\npublic int getId() {\n        return id;\n    }"} {"path":"downloaded/Lesson.java","method_name":"getName","content":"/**\n     *\n     * @return name of the course\n     */\npublic String getName() {\n        return name;\n    }"} {"path":"downloaded/Lesson.java","method_name":"getSize","content":"/**\n     *\n     * @return  number of students which are in the course ,\n     * not the capacity\n     */\npublic int getSize() {\n        return size;\n    }"} {"path":"downloaded/SizeLimitRowMapper.java","method_name":"mapRow","content":"/**\n\t * Provide the maximum number of bytes allowed the query results.\n\t * @param maxSize\n\t */\n@Override\n\tpublic Map<String, Object> mapRow(ResultSet rs, int rowNum)\tthrows SQLException {\n\t\tMap<String, Object> rowMap = super.mapRow(rs, rowNum);\n\t\t// Determine the size of this row.\n\t\treturn checkSize(rowMap);\n\t}"} {"path":"downloaded/SizeLimitRowMapper.java","method_name":"checkSize","content":"/**\n\t * This is where we actually check the size\n\t * @param rowMap\n\t * @return\n\t */\nMap<String, Object> checkSize(Map<String, Object> rowMap) {\n\t\tbytesUsed += getRowSizeBytes(rowMap);\n\t\tif(bytesUsed > maxBytes){\n\t\t\tthrow new IllegalArgumentException(\"The results of this query exceeded the maximum number of allowable bytes: \"+maxBytes+\".  Please try the query again with a smaller page size or limit the columns returned in the select clause.\");\n\t\t}\n\t\treturn rowMap;\n\t}"} {"path":"downloaded/SizeLimitRowMapper.java","method_name":"getBytesUsed","content":"/**\n\t * How many bytes were used for this query?\n\t * @return\n\t */\npublic long getBytesUsed(){\n\t\treturn bytesUsed;\n\t}"} {"path":"downloaded/SizeLimitRowMapper.java","method_name":"getRowSizeBytes","content":"/**\n\t * Count the bytes used by this map.\n\t * @param rowMap\n\t * @return\n\t */\npublic static long getRowSizeBytes(Map<String, Object> rowMap){\n\t\tlong bytesUsed = 0;\n\t\tIterator it = rowMap.values().iterator();\n\t\twhile(it.hasNext()){\n\t\t\tObject value = it.next();\n\t\t\tif(value == null) continue;\n\t\t\tif(value instanceof String){\n\t\t\t\tString sValue = (String) value;\n\t\t\t\tbytesUsed += sValue.length()*BYTES_PER_CHAR;\n\t\t\t}else if(value instanceof Long){\n\t\t\t\tbytesUsed += BYTES_PER_LONG;\n\t\t\t}else if(value instanceof Integer){\n\t\t\t\tbytesUsed += BYTES_PER_INTEGER;\n\t\t\t}else if(value instanceof Double){\n\t\t\t\tbytesUsed += BYTES_PER_DOUBLE;\n\t\t\t}else if(value instanceof byte[]){\n\t\t\t\tbyte[] bytes = (byte[]) value;\n\t\t\t\tbytesUsed += bytes.length;\n\t\t\t}else{\n\t\t\t\tthrow new IllegalArgumentException(\"Unknown value type: \"+value.getClass().getName());\n\t\t\t}\n\t\t}\n\t\treturn bytesUsed;\n\t}"} {"path":"downloaded/JettyServer.java","method_name":"getWebHomeFromClass","content":"/**\n\t * @param args;\n\t * args[0]:port, default 8080\n\t * args[1]:logHome,default webHome/logs/\n\t * @throws Exception\n\t */\nprivate static String getWebHomeFromClass() throws Exception {\n\t\tFile file = new File(JettyServer.class.getClassLoader().getResource(\"\").toURI());\n\t\tfinal String path = file.getAbsolutePath();\n\t\tfinal int webi = path.lastIndexOf(\"WEB-INF\");\n\t\treturn path.substring(0, webi);\n\t}"} {"path":"downloaded/Signal.java","method_name":" strength;\n","content":"/**\n\t * 大于0 买入, 小于0卖�\nhis.strength = strength;\n\t}\n\n\tpublic double getStre"} {"path":"downloaded/NetworkConverter.java","method_name":"teSubsystem2YangNetworks","content":"/**\n     * Networks object conversion from TE Topology subsystem to YANG.\n     *\n     * @param teSubsystem TE Topology subsystem networks object\n     * @param operation operation type\n     * @param teTopologyService teTopology core service\n     * @return Networks YANG object\n     */\npublic static Networks teSubsystem2YangNetworks(\n            org.onosproject.tetopology.management.api.Networks teSubsystem,\n                                                    OperationType operation,\n                                                    TeTopologyService teTopologyService) {\n        checkNotNull(teSubsystem, E_NULL_TE_NETWORKS);\n        checkNotNull(teSubsystem.networks(), E_NULL_TE_NETWORK_LIST);\n        Networks.NetworksBuilder builder =\n                DefaultNetworks.builder()\n                        .yangNetworksOpType(toNetworksOperationType(operation));\n        List<Network> networks = Lists.newArrayList();\n        for (org.onosproject.tetopology.management.api.Network teNetwork : teSubsystem.networks()) {\n            networks.add(teSubsystem2YangNetwork(teNetwork, operation,\n                                                 teTopologyService));\n        }\n        builder.network(networks);\n        return builder.build();\n    }"} {"path":"downloaded/NetworkConverter.java","method_name":"teSubsystem2YangNetworkStates","content":"/**\n     * Network States object conversion from TE Topology subsystem to YANG.\n     *\n     * @param teSubsystem TE Topology subsystem networks object\n     * @param operation   operation type\n     * @return NetworkStates YANG object\n     */\npublic static NetworksState teSubsystem2YangNetworkStates(\n            org.onosproject.tetopology.management.api.Networks teSubsystem,\n            OperationType operation) {\n        checkNotNull(teSubsystem, \"teSubsystem object cannot be null\");\n        checkNotNull(teSubsystem.networks(), \"TeSubsystem Networks object cannot be null\");\n        NetworksState.NetworksStateBuilder builder =\n                DefaultNetworksState.builder()\n                        .yangNetworksStateOpType(toNetworksOperationType(operation));\n        List<org.onosproject.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.network.rev20151208\n                .ietfnetwork.networksstate.Network> networks = Lists.newArrayList();\n        for (org.onosproject.tetopology.management.api.Network teNetwork : teSubsystem.networks()) {\n            networks.add(teSubsystem2YangNetworkState(teNetwork, operation));\n        }\n        builder.network(networks);\n        return builder.build();\n    }"} {"path":"downloaded/NetworkConverter.java","method_name":"networkStateNetwork","content":"/**\n     * Network States object conversion from TE Topology subsystem to YANG.\n     *\n     * @param teSubsystem TE Topology subsystem networks object\n     * @param operation   operation type\n     * @return NetworkStates YANG object\n     */\nprivate static org.onosproject.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.network.rev20151208\n            .ietfnetwork.networksstate.Network networkStateNetwork(Network network,\n                                                                   NetworksState yangNetworkStates) {\n        checkNotNull(network, \"YANG Network object cannot be null\");\n        checkNotNull(yangNetworkStates, \"YANG NetworksState object cannot be null\");\n        if (yangNetworkStates.network() == null) {\n            return null;\n        }\n\n        for (org.onosproject.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.network.rev20151208\n                .ietfnetwork.networksstate.Network stateNetwork : yangNetworkStates.network()) {\n            if (stateNetwork.networkRef().equals(network.networkId())) {\n                return stateNetwork;\n            }\n        }\n        return null;\n    }"} {"path":"downloaded/NetworkConverter.java","method_name":"yang2TeSubsystemNetworks","content":"/**\n     * Networks object conversion from YANG to TE Topology subsystem.\n     *\n     * @param yangNetworks      Networks YANG object\n     * @param yangNetworkStates NetworkStates YANG object\n     * @param deviceId the device Id\n     * @return teSubsystem TE Topology subsystem networks object\n     */\npublic static org.onosproject.tetopology.management.api.Networks yang2TeSubsystemNetworks(\n            Networks yangNetworks, NetworksState yangNetworkStates, DeviceId deviceId) {\n        checkNotNull(yangNetworks, E_NULL_YANG_NETWORKS);\n        checkNotNull(yangNetworks.network(), E_NULL_YANG_NETWORK_LIST);\n        checkNotNull(yangNetworkStates, E_NULL_YANG_NETWORKSSTATE);\n\n        List<org.onosproject.tetopology.management.api.Network> networks = Lists.newArrayList();\n        for (Network network : yangNetworks.network()) {\n            org.onosproject.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.network.rev20151208\n                    .ietfnetwork.networksstate.Network stateNetwork =\n                    networkStateNetwork(network, yangNetworkStates);\n            org.onosproject.tetopology.management.api.Network teNetwork;\n            if (stateNetwork == null) {\n                log.info(\"networkId {} can't be found in yangNetworkStates\",\n                          network.networkId());\n                teNetwork = yang2TeSubsystemNetwork(network, yangNetworks, deviceId);\n            } else {\n                teNetwork = yang2TeSubsystemNetwork(network, stateNetwork, yangNetworks, deviceId);\n            }\n            networks.add(teNetwork);\n        }\n\n        org.onosproject.tetopology.management.api.DefaultNetworks defaultNetworks =\n                new org.onosproject.tetopology.management.api.DefaultNetworks(networks);\n        return defaultNetworks;\n    }"} {"path":"downloaded/NetworkConverter.java","method_name":"te2YangSupportingNetwork","content":"/**\n     * Networks object conversion from YANG to TE Topology subsystem.\n     *\n     * @param yangNetworks      Networks YANG object\n     * @param yangNetworkStates NetworkStates YANG object\n     * @param deviceId the device Id\n     * @return teSubsystem TE Topology subsystem networks object\n     */\nprivate static NetworkBuilder te2YangSupportingNetwork(NetworkBuilder builder,\n                                                           List<KeyId> teSpptNetworkIds) {\n        List<SupportingNetwork> snws = Lists.newArrayList();\n        SupportingNetworkBuilder spNetworkBuilder = DefaultSupportingNetwork.builder();\n        for (KeyId teSpNwKey : teSpptNetworkIds) {\n            snws.add(spNetworkBuilder\n                             .networkRef(NetworkId.fromString(teSpNwKey.toString()))\n                             .build());\n        }\n        return builder.supportingNetwork(snws);\n    }"} {"path":"downloaded/NetworkConverter.java","method_name":"te2YangNodes","content":"/**\n     * Networks object conversion from YANG to TE Topology subsystem.\n     *\n     * @param yangNetworks      Networks YANG object\n     * @param yangNetworkStates NetworkStates YANG object\n     * @param deviceId the device Id\n     * @return teSubsystem TE Topology subsystem networks object\n     */\nprivate static NetworkBuilder te2YangNodes(NetworkBuilder builder,\n                                               Map<KeyId, NetworkNode> teNodes,\n                                               TeTopologyService teTopologyService,\n                                               TeTopologyKey teTopologyKey) {\n        List<Node> nodeList = Lists.newArrayList();\n\n        for (org.onosproject.tetopology.management.api.node.NetworkNode node : teNodes.values()) {\n            nodeList.add(NodeConverter.teSubsystem2YangNode(node,\n                                                            teTopologyService,\n                                                            teTopologyKey));\n        }\n        return builder.node(nodeList);\n    }"} {"path":"downloaded/NetworkConverter.java","method_name":"te2YangLinks","content":"/**\n     * Networks object conversion from YANG to TE Topology subsystem.\n     *\n     * @param yangNetworks      Networks YANG object\n     * @param yangNetworkStates NetworkStates YANG object\n     * @param deviceId the device Id\n     * @return teSubsystem TE Topology subsystem networks object\n     */\nprivate static NetworkBuilder te2YangLinks(NetworkBuilder builder,\n                                               Map<KeyId, NetworkLink> teLinks,\n                                               TeTopologyService teTopologyService) {\n        List<Link> linkList = Lists.newArrayList();\n\n        for (org.onosproject.tetopology.management.api.link.NetworkLink link : teLinks.values()) {\n            linkList.add(LinkConverter.teSubsystem2YangLink(link, teTopologyService));\n        }\n        AugmentedNdNetworkBuilder ndAugment = DefaultAugmentedNdNetwork.builder();\n        ndAugment.link(linkList);\n        builder.addYangAugmentedInfo(ndAugment.build(), AugmentedNdNetwork.class);\n        return builder;\n    }"} {"path":"downloaded/NetworkConverter.java","method_name":"te2YangNetworkType","content":"/**\n     * Networks object conversion from YANG to TE Topology subsystem.\n     *\n     * @param yangNetworks      Networks YANG object\n     * @param yangNetworkStates NetworkStates YANG object\n     * @param deviceId the device Id\n     * @return teSubsystem TE Topology subsystem networks object\n     */\nprivate static NetworkBuilder te2YangNetworkType(NetworkBuilder builder,\n                                                     org.onosproject.tetopology.management.api.TeTopologyId\n                                                             teTopologyId) {\n        NetworkTypes.NetworkTypesBuilder nwType = DefaultNetworkTypes.builder();\n        if (teTopologyId != null) {\n            // Set \"te-topology\" network type.\n            TeTopology.TeTopologyBuilder teTopology = DefaultTeTopology.builder();\n            AugmentedNwNetworkTypes.AugmentedNwNetworkTypesBuilder teNwType =\n                    DefaultAugmentedNwNetworkTypes.builder();\n            teNwType.teTopology(teTopology.build());\n            nwType.addYangAugmentedInfo(teNwType.build(), AugmentedNwNetworkTypes.class);\n        }\n        return builder.networkTypes(nwType.build());\n    }"} {"path":"downloaded/NetworkConverter.java","method_name":"te2YangTopologyIds","content":"/**\n     * Networks object conversion from YANG to TE Topology subsystem.\n     *\n     * @param yangNetworks      Networks YANG object\n     * @param yangNetworkStates NetworkStates YANG object\n     * @param deviceId the device Id\n     * @return teSubsystem TE Topology subsystem networks object\n     */\nprivate static NetworkBuilder te2YangTopologyIds(NetworkBuilder builder,\n                                                     org.onosproject.tetopology.management.api\n                                                             .TeTopologyId teTopologyId,\n                                                     TeTopologyService teTopologyService,\n                                                     KeyId networkKeyId) {\n\n        //teBuilder. //OPTIMIZATIONCRITERION for Config/State\n        Te.TeBuilder teBuilder = DefaultTe.builder();\n        Config.ConfigBuilder configBuilder = DefaultConfig.builder();\n        org.onosproject.tetopology.management.api.Network nt = teTopologyService.network(networkKeyId);\n        TeTopologyKey teTopoKey = new TeTopologyKey(nt.teTopologyId().providerId(),\n                                                    nt.teTopologyId().clientId(),\n                                                    Long.valueOf(nt.teTopologyId().topologyId()));\n        switch (teTopologyService.teTopology(teTopoKey).optimization()) {\n        case LEAST_COST:\n            configBuilder = configBuilder.optimizationCriterion(Cost.class);\n            break;\n        case SHORTEST_DELAY:\n            configBuilder = configBuilder.optimizationCriterion(Delay.class);\n            break;\n        case NOT_OPTIMIZED:\n            configBuilder = configBuilder.optimizationCriterion(NotOptimized.class);\n            break;\n        default:\n            configBuilder = configBuilder.optimizationCriterion(TeOptimizationCriterion.class);\n            break;\n        }\n\n        teBuilder = teBuilder.config(configBuilder.build());\n\n        AugmentedNwNetwork.AugmentedNwNetworkBuilder nwAugment = DefaultAugmentedNwNetwork\n                .builder();\n        nwAugment.clientId(new TeGlobalId(teTopologyId.clientId()));\n        nwAugment.providerId(new TeGlobalId(teTopologyId.providerId()));\n        if (teTopologyId.topologyId() != null) {\n            nwAugment.teTopologyId(new TeTopologyId(teTopologyId.topologyId()));\n        }\n        nwAugment.te(teBuilder.build());\n        builder.addYangAugmentedInfo(nwAugment.build(),\n                                     AugmentedNwNetwork.class);\n        return builder;\n    }"} {"path":"downloaded/NetworkConverter.java","method_name":"teSubsystem2YangNetwork","content":"/**\n     * Network object conversion from TE Topology subsystem to YANG.\n     *\n     * @param teSubsystem TE Topology subsystem network object\n     * @param operation operation type\n     * @param teTopologyService teTopology core service\n     * @return Network YANG object\n     */\npublic static Network teSubsystem2YangNetwork(\n            org.onosproject.tetopology.management.api.Network teSubsystem,\n                                                  OperationType operation,\n                                                  TeTopologyService teTopologyService) {\n        checkNotNull(teSubsystem, E_NULL_TE_NETWORK);\n        checkNotNull(teSubsystem.networkId(), E_NULL_TE_NETWORKID);\n\n        // Generate a network builder with the specific networkId.\n        NetworkId networkId = NetworkId.fromString(teSubsystem.networkId().toString());\n        NetworkBuilder builder = DefaultNetwork.builder()\n                .yangNetworkOpType(\n                        toNetworksOperationType(operation))\n                .networkId(networkId);\n\n        // Supporting networks\n        if (teSubsystem.supportingNetworkIds() != null) {\n            builder = te2YangSupportingNetwork(builder, teSubsystem.supportingNetworkIds());\n        }\n\n        // Nodes\n        if (teSubsystem.nodes() != null) {\n            org.onosproject.tetopology.management.api.Network nt = teTopologyService.network(teSubsystem.networkId());\n            TeTopologyKey teTopoKey = new TeTopologyKey(nt.teTopologyId().providerId(),\n                                                        nt.teTopologyId().clientId(),\n                                                        Long.valueOf(nt.teTopologyId().topologyId()));\n            builder = te2YangNodes(builder, teSubsystem.nodes(),\n                                   teTopologyService,\n                                   teTopoKey);\n        }\n\n        // Network types\n        builder = te2YangNetworkType(builder, teSubsystem.teTopologyId());\n\n        // Add links - link is the augmentation\n        if (teSubsystem.links() != null) {\n            builder = te2YangLinks(builder, teSubsystem.links(), teTopologyService);\n        }\n\n        // TE Topology IDs\n        if (teSubsystem.teTopologyId() != null) {\n            builder = te2YangTopologyIds(builder, teSubsystem.teTopologyId(),\n                                         teTopologyService,\n                                         teSubsystem.networkId());\n        }\n\n        return builder.build();\n    }"} {"path":"downloaded/NetworkConverter.java","method_name":"teSubsystem2YangNetworkState","content":"/**\n     * Network State object conversion from TE Topology subsystem to YANG.\n     *\n     * @param teSubsystem TE Topology subsystem network object\n     * @param operation   operation type\n     * @return Network YANG object\n     */\npublic static org.onosproject.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.network\n            .rev20151208.ietfnetwork.networksstate.Network\n    teSubsystem2YangNetworkState(\n            org.onosproject.tetopology.management.api.Network teSubsystem,\n            OperationType operation) {\n        checkNotNull(teSubsystem, E_NULL_TE_NETWORK);\n        checkNotNull(teSubsystem.networkId(), E_NULL_TE_NETWORKID);\n\n        org.onosproject.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.network.rev20151208\n                .ietfnetwork.networksstate.Network.NetworkBuilder stateBuilder =\n                org.onosproject.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.network.rev20151208\n                        .ietfnetwork.networksstate.DefaultNetwork.builder();\n\n        if (teSubsystem.networkId() != null) {\n            stateBuilder.networkRef(NetworkId.fromString(teSubsystem.networkId().toString()));\n        }\n        stateBuilder.serverProvided(teSubsystem.isServerProvided());\n\n        // Operation type may be required.\n        return stateBuilder.build();\n    }"} {"path":"downloaded/NetworkConverter.java","method_name":"yang2TeDefaultNetwork","content":"/**\n     * Network conversion from YANG to TE Topology subsystem.\n     *\n     * @param yangNetwork Network YANG object\n     * @param yangNetworkState NetworkState YANG object\n     * @param yangNetworks Networks YANG object\n     * @return TE Topology subsystem defaultNetwork object\n     */\nprivate static org.onosproject.tetopology.management.api.DefaultNetwork yang2TeDefaultNetwork(\n                                                Network yangNetwork,\n                                                org.onosproject.yang.gen.v1.urn.ietf.params.xml.ns.\n                                                yang.ietf.network.rev20151208.ietfnetwork.networksstate.\n                                                Network yangNetworkState,\n                                                Networks yangNetworks, DeviceId deviceId) {\n        checkNotNull(yangNetwork, E_NULL_YANG_NETWORK);\n        checkNotNull(yangNetwork.networkId(), E_NULL_YANG_NETWORKID);\n        String networkId = yangNetwork.networkId().uri().string();\n\n        KeyId networkKeyId = KeyId.keyId(networkId);\n        List<KeyId> supportingNetworkIds = null;\n        Map<KeyId, NetworkNode> teNodes = null;\n        Map<KeyId, NetworkLink> teLinks = null;\n        org.onosproject.tetopology.management.api.TeTopologyId teTopologyId = null;\n        boolean serverProvided = false;\n\n        // Supporting networks\n        if (yangNetwork.supportingNetwork() != null) {\n            supportingNetworkIds = Lists.newArrayList();\n            for (SupportingNetwork supportNw : yangNetwork.supportingNetwork()) {\n                supportingNetworkIds.add(\n                        KeyId.keyId(supportNw.networkRef().uri().string()));\n            }\n        }\n\n        // Nodes\n        if (yangNetwork.node() != null) {\n            teNodes = Maps.newHashMap();\n            for (Node node : yangNetwork.node()) {\n                // Convert the Yang Node to a TE node.\n                teNodes.put(KeyId.keyId(node.nodeId().uri().string()),\n                            NodeConverter.yang2TeSubsystemNode(node, yangNetwork, yangNetworks));\n            }\n        }\n\n        // Links\n        if (yangNetwork.yangAugmentedInfo(AugmentedNdNetwork.class) != null) {\n            AugmentedNdNetwork augmentLink =\n                    (AugmentedNdNetwork) yangNetwork.yangAugmentedInfo(AugmentedNdNetwork.class);\n            teLinks = Maps.newHashMap();\n            for (Link link : augmentLink.link()) {\n                // Convert the Yang Link to a TE link.\n                teLinks.put(KeyId.keyId(link.linkId().uri().string()),\n                            LinkConverter.yang2TeSubsystemLink(link, yangNetwork, yangNetworks));\n            }\n        }\n\n        // TE Topology Ids\n        if (yangNetwork.yangAugmentedInfo(AugmentedNwNetwork.class) != null) {\n            AugmentedNwNetwork augmentTeIds =\n                    (AugmentedNwNetwork) yangNetwork.yangAugmentedInfo(AugmentedNwNetwork.class);\n            teTopologyId =\n                    new org.onosproject.tetopology.management.api.TeTopologyId(\n                            augmentTeIds.providerId().uint32(),\n                            augmentTeIds.clientId().uint32(),\n                            augmentTeIds.teTopologyId().string());\n        }\n\n        if (yangNetworkState != null) {\n            serverProvided = yangNetworkState.serverProvided();\n        }\n\n        org.onosproject.tetopology.management.api.DefaultNetwork network =\n                new org.onosproject.tetopology.management.api.DefaultNetwork(networkKeyId, supportingNetworkIds,\n                                                                             teNodes, teLinks, teTopologyId,\n                                                                             serverProvided,\n                                                                             deviceId,\n                                                                             NOT_OPTIMIZED);\n        return network;\n    }"} {"path":"downloaded/NetworkConverter.java","method_name":"yang2TeSubsystemNetwork","content":"/**\n     * Network object conversion from YANG to TE Topology subsystem.\n     *\n     * @param yangNetwork Network YANG object\n     * @param yangNetworks Networks YANG object\n     * @param deviceId The identifier of RESTCONF server device\n     * @return network TE Topology subsystem networks object\n     */\npublic static org.onosproject.tetopology.management.api.Network yang2TeSubsystemNetwork(Network yangNetwork,\n                                                                                            Networks yangNetworks,\n                                                                                            DeviceId deviceId) {\n        return yang2TeDefaultNetwork(yangNetwork, null, yangNetworks, deviceId);\n    }"} {"path":"downloaded/NetworkConverter.java","method_name":"yang2TeSubsystemNetwork","content":"/**\n     * Network and State object conversion from YANG to TE Topology subsystem.\n     *\n     * @param yangNetwork Network YANG object\n     * @param yangNetworkState NetworkState YANG object\n     * @param yangNetworks Networks YANG object\n     * @param deviceId The identifier of RESTCONF server device\n     * @return teSubsystem TE Topology subsystem networks object\n     */\npublic static org.onosproject.tetopology.management.api.Network yang2TeSubsystemNetwork(Network yangNetwork,\n            org.onosproject.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.network.rev20151208.ietfnetwork\n                    .networksstate.Network yangNetworkState, Networks yangNetworks, DeviceId deviceId) {\n        checkNotNull(yangNetworkState, E_NULL_YANG_NETWORKSSTATE_NETWORK);\n        checkNotNull(yangNetworkState.networkRef(), E_NULL_YANG_NETWORKSSTATE_NETWORKREF);\n\n        org.onosproject.tetopology.management.api.DefaultNetwork teNetwork =\n                yang2TeDefaultNetwork(yangNetwork, yangNetworkState, yangNetworks, deviceId);\n\n        String networkref = yangNetworkState.networkRef().toString();\n        checkState(teNetwork.networkId().toString().equals(networkref),\n                   E_DIFF_YANG_NETWORKID);\n\n        return teNetwork;\n    }"} {"path":"downloaded/NetworkConverter.java","method_name":"teTopoEvent2YangIetfTeTopoEvent","content":"/**\n     * Converts a TE Topology event from the data format used in core to its\n     * corresponding YANG Object (YO) format.\n     *\n     * @param event TE Topology event from the core\n     * @param teTopologyService TE Topology Service object\n     * @return YANG Object converted from event\n     */\npublic static IetfTeTopologyEvent teTopoEvent2YangIetfTeTopoEvent(TeTopologyEvent event,\n                                                                      TeTopologyService teTopologyService) {\n        IetfTeTopologyEvent yangEvent = null;\n        IetfTeTopologyEventSubject eventSubject = new IetfTeTopologyEventSubject();\n\n        IetfTeTopologyEvent.Type yangEventType = teTopoEventType2YangIetfTopoEventType(event.type());\n        if (yangEventType == IetfTeTopologyEvent.Type.TE_LINK_EVENT) {\n            NetworkLinkEventSubject eventData = (NetworkLinkEventSubject) event.subject();\n            TeTopologyEventTypeEnum linkEventType = teTopoEventType2YangTeTopoEventType(event.type());\n            TeLinkEvent yangLinkEvent = LinkConverter\n                    .teNetworkLink2yangTeLinkEvent(linkEventType, eventData, teTopologyService);\n            eventSubject.teLinkEvent(yangLinkEvent);\n            yangEvent = new IetfTeTopologyEvent(IetfTeTopologyEvent.Type.TE_LINK_EVENT, eventSubject);\n        } else if (yangEventType == IetfTeTopologyEvent.Type.TE_NODE_EVENT) {\n            NetworkNodeEventSubject eventData = (NetworkNodeEventSubject) event.subject();\n            TeTopologyEventTypeEnum nodeEventType = teTopoEventType2YangTeTopoEventType(event.type());\n            TeNodeEvent yangNodeEvent = NodeConverter.teNetworkNode2yangTeNodeEvent(nodeEventType, eventData);\n            eventSubject.teNodeEvent(yangNodeEvent);\n            yangEvent = new IetfTeTopologyEvent(IetfTeTopologyEvent.Type.TE_NODE_EVENT, eventSubject);\n        }\n\n        return yangEvent;\n    }"} {"path":"downloaded/NetworkConverter.java","method_name":"teTopoEventType2YangIetfTopoEventType","content":"/**\n     * Converts a TE Topology event from the data format used in core to its\n     * corresponding YANG Object (YO) format.\n     *\n     * @param event TE Topology event from the core\n     * @param teTopologyService TE Topology Service object\n     * @return YANG Object converted from event\n     */\nprivate static IetfTeTopologyEvent.Type teTopoEventType2YangIetfTopoEventType(TeTopologyEvent.Type type) {\n        IetfTeTopologyEvent.Type returnType = null;\n\n        switch (type) {\n            case LINK_ADDED:\n            case LINK_REMOVED:\n            case LINK_UPDATED:\n                returnType = IetfTeTopologyEvent.Type.TE_LINK_EVENT;\n                break;\n            case NODE_ADDED:\n            case NODE_REMOVED:\n            case NODE_UPDATED:\n                returnType = IetfTeTopologyEvent.Type.TE_NODE_EVENT;\n                break;\n            default:\n                log.warn(\"teTopoEventType2YangIetfTopoEventType: unknown type: {}\", type);\n        }\n\n        return returnType;\n    }"} {"path":"downloaded/NetworkConverter.java","method_name":"teTopoEventType2YangTeTopoEventType","content":"/**\n     * Converts a TE Topology event from the data format used in core to its\n     * corresponding YANG Object (YO) format.\n     *\n     * @param event TE Topology event from the core\n     * @param teTopologyService TE Topology Service object\n     * @return YANG Object converted from event\n     */\nprivate static TeTopologyEventTypeEnum teTopoEventType2YangTeTopoEventType(TeTopologyEvent.Type type) {\n        TeTopologyEventTypeEnum returnType = null;\n\n        switch (type) {\n            case LINK_ADDED:\n            case NODE_ADDED:\n                returnType = TeTopologyEventTypeEnum.ADD;\n                break;\n            case LINK_REMOVED:\n            case NODE_REMOVED:\n                returnType = TeTopologyEventTypeEnum.REMOVE;\n                break;\n            case LINK_UPDATED:\n            case NODE_UPDATED:\n                returnType = TeTopologyEventTypeEnum.UPDATE;\n                break;\n            default:\n                log.warn(\"teTopoEventType2YangteTopoEventType: unsupported type: {}\", type);\n            break;\n        }\n\n        return returnType;\n    }"} {"path":"downloaded/BaseClientInfo.java","method_name":"getNickname","content":"/**\n     * Creates a new base client info for the specified parser with the\n     * specified details.\n     *\n     * @param parser The parser that owns this client info object\n     * @param nick The nickname of the user this object represents\n     * @param user The username of the user this object represents\n     * @param host The hostname of the user this object represents\n     */\n@Override\n    public String getNickname() {\n        return nick;\n    }"} {"path":"downloaded/BaseClientInfo.java","method_name":"getUsername","content":"/**\n     * Creates a new base client info for the specified parser with the\n     * specified details.\n     *\n     * @param parser The parser that owns this client info object\n     * @param nick The nickname of the user this object represents\n     * @param user The username of the user this object represents\n     * @param host The hostname of the user this object represents\n     */\n@Override\n    public String getUsername() {\n        return user;\n    }"} {"path":"downloaded/BaseClientInfo.java","method_name":"getHostname","content":"/**\n     * Creates a new base client info for the specified parser with the\n     * specified details.\n     *\n     * @param parser The parser that owns this client info object\n     * @param nick The nickname of the user this object represents\n     * @param user The username of the user this object represents\n     * @param host The hostname of the user this object represents\n     */\n@Override\n    public String getHostname() {\n        return host;\n    }"} {"path":"downloaded/BaseClientInfo.java","method_name":"getRealname","content":"/**\n     * Creates a new base client info for the specified parser with the\n     * specified details.\n     *\n     * @param parser The parser that owns this client info object\n     * @param nick The nickname of the user this object represents\n     * @param user The username of the user this object represents\n     * @param host The hostname of the user this object represents\n     */\n@Override\n    public String getRealname() {\n        return realname;\n    }"} {"path":"downloaded/BaseClientInfo.java","method_name":"getAccountName","content":"/**\n     * Creates a new base client info for the specified parser with the\n     * specified details.\n     *\n     * @param parser The parser that owns this client info object\n     * @param nick The nickname of the user this object represents\n     * @param user The username of the user this object represents\n     * @param host The hostname of the user this object represents\n     */\n@Override\n    public String getAccountName() {\n        return account;\n    }"} {"path":"downloaded/BaseClientInfo.java","method_name":"getMap","content":"/**\n     * Sets the username of this user.\n     *\n     * @param user The new username\n     */\n@Override\n    @SuppressWarnings(\"ReturnOfCollectionOrArrayField\")\n    public Map<Object, Object> getMap() {\n        return map;\n    }"} {"path":"downloaded/BaseClientInfo.java","method_name":"getParser","content":"/**\n     * Sets the username of this user.\n     *\n     * @param user The new username\n     */\n@Override\n    public Parser getParser() {\n        return parser;\n    }"} {"path":"downloaded/BaseClientInfo.java","method_name":"toString","content":"/**\n     * Sets the username of this user.\n     *\n     * @param user The new username\n     */\n@Override\n    public String toString() {\n        return getNickname();\n    }"} {"path":"downloaded/BaseClientInfo.java","method_name":"getAwayReason","content":"/**\n     * Sets the username of this user.\n     *\n     * @param user The new username\n     */\n@Override\n    public String getAwayReason() {\n        return \"\";\n    }"} {"path":"downloaded/OrderListController.java","method_name":"getOrderList","content":"/**\n     * Creates a new instance of OrderListController\n     */\npublic List<Order> getOrderList() {\n        if (orderList == null) {\n            orderList = orderService.list();\n        }\n        return orderList;\n    }"} {"path":"downloaded/OrderListController.java","method_name":"getSelectedOrderList","content":"/**\n     * Creates a new instance of OrderListController\n     */\npublic List<Order> getSelectedOrderList() {\n        return selectedOrderList;\n    }"} {"path":"downloaded/OrderListController.java","method_name":"getSelectedOrder","content":"/**\n     * Creates a new instance of OrderListController\n     */\npublic Order getSelectedOrder() {\n        return selectedOrder;\n    }"} {"path":"downloaded/FavoriteResourceIT.java","method_name":"createEntity","content":"/**\n     * Create an entity for this test.\n     *\n     * This is a static method, as tests for other entities might also need it,\n     * if they test an entity which requires the current entity.\n     */\npublic static Favorite createEntity(EntityManager em) {\n        Favorite favorite = new Favorite();\n        return favorite;\n    }"} {"path":"downloaded/FavoriteResourceIT.java","method_name":"createUpdatedEntity","content":"/**\n     * Create an updated entity for this test.\n     *\n     * This is a static method, as tests for other entities might also need it,\n     * if they test an entity which requires the current entity.\n     */\npublic static Favorite createUpdatedEntity(EntityManager em) {\n        Favorite favorite = new Favorite();\n        return favorite;\n    }"} {"path":"downloaded/Scheduler.java","method_name":"main","content":"/**\n     * \n     * The starting point for Track Management - instantiating the Schedule instance that does the work and then outputting the results.\n     * <p>\n     * Command line properties that are read:\n     * <ul>\n     * <li>file - the name of the input file containing Session information.  This is required.</li>\n     * <li>encoding - the type of encoding of the input file.  This is optional.  The only format currently supported is <i>UTF8</i></li>\n     * </ul>\n     * </p>\n     * \n     * @param args unused - use -D options on command line\n     * \n     */\npublic static void main(String[] args) {\n\tSystem.out.println(\"Welcome to the Conference Track Manager!\");\n\tSystem.out.flush();\n\t\n\tString file = System.getProperty( \"file\");\n\tif (file == null) {\n\t    System.err.println(\"File listing Conference Tracks not specified.\");\n\t    return;\n\t}\n\n\t//Confirm support\n\tFileEncoding encoding;\n\ttry {\n\t    encoding = FileEncoding.getFileEncodingByName(System.getProperty( \"encoding\"));\n\t} catch (IllegalArgumentException e1) {\n\t    System.err.println(\"Unsupported File Encoding specified.\");\n\t    return;\n\t}\n\n\tSystem.out.println(\"\\nInput file is \" + file + \" with encoding \" + encoding.getName());\n\tSystem.out.println(\"Scheduling Strategy is \" + Config.DEFAULT_STRATEGY.getClass().getSimpleName() + \"\\n\");\n\t//assure we see welcome first\n\tSystem.out.flush();\n\t\n\tSchedule schedule = new Schedule();\n\tschedule.setStrategy(Config.DEFAULT_STRATEGY);\n\ttry {\n\t    schedule.setSessionsFromFile(file, encoding);\n\t    schedule.setBlocks(Config.BLOCKS);\n\t    schedule.makeSchedule();\n\t} catch (IllegalArgumentException e) {\n\t    System.err.println(e.getMessage());\n\t    return;\n\t} catch (IOException e) {\n\t    // TODO Auto-generated catch block\n\t    e.printStackTrace();\n\t    return;\n\t}\n\t\n\tTrack tracks[] = schedule.getTracks();\n\tfor (Track track : tracks) {\n\t    System.out.println(track.getLabel());\n\t    for (ScheduleBlock sb : track.getScheduleBlocks()) {\n\t\tfor (Session s : sb.getSessions())\n\t\t    System.out.println((new TimeOffset(s.getStartOffset())) + \" \" + s.getName() \n\t\t\t    + (s.isBlockLevelSession() ? \"\" : \" [\" + s.getMinutes() + \"min]\"));\n\t    }\n\t    System.out.println();\n\t}\n    }"} {"path":"downloaded/SortOption.java","method_name":"getExpressions","content":"/**\n     * Gets the sort model associated with this option, representing the attribute path and sorting direction.\n     * @return the sort model for this option\n     */\npublic List<SortExpression<ProductProjection>> getExpressions() {\n        return expressions;\n    }"} {"path":"downloaded/SortOption.java","method_name":"withExpressions","content":"/**\n     * Gets the sort model associated with this option, representing the attribute path and sorting direction.\n     * @return the sort model for this option\n     */\npublic SortOption withExpressions(final List<SortExpression<ProductProjection>> expressions) {\n        return new SortOption(value, label, expressions, isDefault);\n    }"} {"path":"downloaded/SortOption.java","method_name":"of","content":"/**\n     * Gets the sort model associated with this option, representing the attribute path and sorting direction.\n     * @return the sort model for this option\n     */\npublic static SortOption of(final String value, final String label, final List<SortExpression<ProductProjection>> sortExpressions,\n                                final boolean isDefault) {\n        return new SortOption(value, label, sortExpressions, isDefault);\n    }"} {"path":"downloaded/LocalSdkAvdPreparer.java","method_name":"setUp","content":"/**\n     * {@inheritDoc}\n     */\n@Override\n    public void setUp(ITestDevice device, IBuildInfo buildInfo) throws TargetSetupError,\n            DeviceNotAvailableException, BuildError {\n        if (mDisable || !mNewEmulator) {\n            // Note: If we want to launch the emulator, we need to pass the --new-emulator flag\n            // defined in DeviceSelectionOptions, which will create a stub emulator.\n            return;\n        }\n        mSdkBuildInfo.setSdkDir(mLocalSdkPath);\n        mSdkBuildInfo.setTestsDir(null);\n        if (mLocalSdkPath == null) {\n            throw new TargetSetupError(\"Please set the path of the sdk using --local-sdk-path.\",\n                    device.getDeviceDescriptor());\n        }\n        launchEmulatorForAvd(mSdkBuildInfo, device, createAvd(mSdkBuildInfo));\n    }"} {"path":"downloaded/Kernels2D.java","method_name":"createGaborKernel2D","content":"/**\n     * Creates an isotropic 2D Gabor kernel\n     * \n     * @param sigma\n     *            Gaussian std (final kernel diameter is 2 * (3*sigma) + 1)\n     * @param k_x\n     *            gabor radius along X\n     * @param k_y\n     *            gabor radius along Y\n     * @param isSymmetric\n     *            true if the values are symmetric (cosine), anti-symmetric (sine) otherwise\n     * @return\n     */\npublic Kernels2D createGaborKernel2D(double sigma, double k_x, double k_y, boolean isSymmetric)\n    {\n        int k = (int) Math.floor(sigma * 3.0);\n        \n        this.width = 2 * k + 1;\n        this.height = 2 * k + 1;\n        this.data = new double[width * height];\n        \n        if (isSymmetric)\n        {\n            for (int i = -k; i <= k; i++)\n                for (int j = -k; j <= k; j++)\n                    data[(i + k) + (j + k) * width] = (double) (Math.cos(k_x * i + k_y * j) * Math.exp(-0.5f * (i * i + j * j) / (sigma * sigma)));\n        }\n        else\n        {\n            for (int i = -k; i <= k; i++)\n                for (int j = -k; j <= k; j++)\n                    data[(i + k) + (j + k) * width] = (double) (Math.sin(k_x * i + k_y * j) * Math.exp(-0.5f * (i * i + j * j) / (sigma * sigma)));\n        }\n        \n        normalize(data);\n        \n        return this;\n    }"} {"path":"downloaded/Kernels2D.java","method_name":"createCustomKernel2D","content":"/**\n     * Sets the kernel values manually\n     * \n     * @param kernel\n     * @param isNormalized\n     *            true if the given values are already normalized to [0-1]\n     */\npublic Kernels2D createCustomKernel2D(double[][] kernel, boolean isNormalized)\n    {\n        this.width = kernel.length;\n        this.height = kernel[0].length;\n        this.data = new double[width * height];\n        int offset = 0;\n        for (double[] line : kernel)\n        {\n            System.arraycopy(line, 0, this.data, offset, line.length);\n            offset += line.length;\n        }\n        if (!isNormalized) normalize(this.data);\n        return this;\n    }"} {"path":"downloaded/Kernels2D.java","method_name":"createCustomKernel2D","content":"/**\n     * Sets the kernel values manually\n     * \n     * @param kernel\n     * @param isNormalized\n     *            true if the given values are already normalized to [0-1]\n     */\npublic Kernels2D createCustomKernel2D(double[] kernel, int width, int height, boolean isNormalized)\n    {\n        this.width = width;\n        this.height = height;\n        this.data = new double[width * height];\n        System.arraycopy(kernel, 0, this.data, 0, kernel.length);\n        if (!isNormalized) normalize(this.data);\n        return this;\n    }"} {"path":"downloaded/Kernels2D.java","method_name":"createCustomKernel2D","content":"/**\n     * Sets the kernel values using the given sequence\n     * \n     * @param kernel2D\n     *            the sequence to take values from\n     * @param t\n     *            the time point to take values from\n     * @param z\n     *            the slice to take values from\n     * @param c\n     *            the channel to take values from\n     * @param isNormalized\n     *            true if the given values are already normalized to [0-1]\n     */\npublic Kernels2D createCustomKernel2D(Sequence kernel2D, int t, int z, int c)\n    {\n        this.width = kernel2D.getSizeX();\n        this.height = kernel2D.getSizeY();\n        if (width % 2 == 0 || height % 2 == 0) throw new IllegalArgumentException(\"Kernel sequence must have odd dimensions\");\n        this.data = SequenceUtil.convertToType(kernel2D, DataType.DOUBLE, false).getDataXYAsDouble(t, z, c);\n        normalize(data);\n        return this;\n    }"} {"path":"downloaded/Kernels2D.java","method_name":"normalize","content":"/**\n     * Normalizes the given kernel such that the values sum up to 1\n     * \n     * @param data\n     *            the kernel data in Z-XY order\n     * @return\n     */\nprivate static double[] normalize(double[] data)\n    {\n        double sum = 0;\n        \n        for (double d : data)\n            sum += d;\n        \n        if (sum != 1 && sum != 0)\n        {\n            for (int i = 0; i < data.length; i++)\n                data[i] /= sum;\n        }\n        \n        return data;\n    }"} {"path":"downloaded/Kernels2D.java","method_name":"toSequence","content":"/**\n     * Normalizes the given kernel such that the values sum up to 1\n     * \n     * @param data\n     *            the kernel data in Z-XY order\n     * @return\n     */\n@Override\n    public Sequence toSequence()\n    {\n        IcyBufferedImage kernelImage = new IcyBufferedImage(width, height, 1, DataType.DOUBLE);\n        kernelImage.setDataXYAsDouble(0, data);\n        Sequence kernel = new Sequence(kernelImage);\n        kernel.setName(this.toString());\n        return kernel;\n    }"} {"path":"downloaded/Kernels2D.java","method_name":"getData","content":"/**\n     * Normalizes the given kernel such that the values sum up to 1\n     * \n     * @param data\n     *            the kernel data in Z-XY order\n     * @return\n     */\npublic double[] getData()\n    {\n        return data;\n    }"} {"path":"downloaded/FlowHelper.java","method_name":"�方","content":"  /**\n     \n\n    /**\n     * 执行 Action 流方法\n     * @param action Action\n     * @return Helper\n     */\n    @Override\n    public FlowHelper fl"} {"path":"downloaded/FlowHelper.java","method_name":"Handler 中�","content":"  /**\n     \n==\n\n    /**\n     * 在主线程 Handler 中执行任务\n     * @param runnable 可执行的任务\n     * @return Helper\n     */\n    @Over"} {"path":"downloaded/FlowHelper.java","method_name":"r 中执行�","content":"  /**\n     \n  /**\n     * 在主线程 Handler 中执行延迟任务\n     * @param runnable    可执行的任务\n     * @param delayMillis 延迟时间\n     * @return Helper\n     */\n    @Override\n    public Flo"} {"path":"downloaded/FlowHelper.java","method_name":"务\n     * @","content":"  /**\n     \n��程 Handler 中执行延迟任务\n     * @param runnable    可执行的任务\n     * @param delayMillis 延迟时间\n     * @param number      轮询次数\n     * @param interval    轮询时间\n     * @return Helper\n     */\n    @Override\n    public FlowHelper po"} {"path":"downloaded/FlowHelper.java","method_name":" Handler 中","content":"  /**\n     \n  }\n\n    /**\n     * 在主线程 Handler 中执行延迟任务\n     * @param runnable    可执行的任务\n     * @param delayMillis 延迟时间\n     * @param number      轮询次数\n     * @param interval    轮询时间\n     * @param listener    结束通知\n     * @return Helper\n     */\n    @Override\n    public FlowHe"} {"path":"downloaded/FlowHelper.java","method_name":"         Handl","content":"  /**\n     \nr,\n            int interval,\n            HandlerUtils.OnEndListener listener\n    ) {\n        HandlerUtils.postRunnable(runnable, delayMillis,"} {"path":"downloaded/GeoListAdapter.java","method_name":"onCreateViewHolder","content":"/**\n     * Company list for display of adapter\n     */\n@NonNull\n    @Override\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        View itemView = LayoutInflater.from(parent.getContext())\n                .inflate(R.layout.item_geo_company, parent, false);\n        return new ViewHolder(itemView);\n    }"} {"path":"downloaded/GeoListAdapter.java","method_name":"getItemCount","content":"/**\n     * Returns the total number of items in the data set held by the adapter.\n     *\n     * @return The total number of items in this adapter.\n     */\n@Override\n    public int getItemCount() {\n        return items.size();\n    }"} {"path":"downloaded/InstrHalt.java","method_name":"n execu","content":"\n\t/**\n\t * Instantiates a new halt instruction with the given arguments.\n\t *\n\t * @param arguments the arguments\n\t \n\n\tpublic boolean execute(Computer computer) {\n\t\treturn true;\n"} {"path":"downloaded/X5WebView.java","method_name":"  */\n        public bool","content":"/**\n         * 防止加载网页时调�\n�览器\n         */\n        public boolean shouldOverrideUrlLoading(WebView view, String url) {\n            boolean isShould;\n            if (NetworkUtil.isNetworkUrl(url)) {\n                view.loadUrl(url);\n                isShould = true;\n            } else {\n                if (onHtmlEventListener != null)\n                    onHtmlEventListener.onUriLoading(Uri.parse(url));\n                isShould = false;\n            }\n           "} {"path":"downloaded/CountingSort.java","method_name":"sort","content":"/**\n     * @param input integer array given as input\n     * @param k     defines maximum integer value in input; all integers must in range [0..k]\n     * @return input array is sorted in a stable (!!) manner\n     */\npublic static Integer[] sort(Integer[] input, Integer k) {\n\n        Integer[] output = new Integer[input.length];    // array that will take sorted result.\n\n        // count how often each value occurs\n        int[] count = new int[k + 1];\n        for (Integer j : input) {\n            count[j]++;\n        }\n\n        // count in \"count[j]\" how many elements are <= j\n        for (int j = 1; j <= k; j++) {\n            count[j] = count[j] + count[j - 1];\n        }\n\n        // iterate over input, put each element into correct position of result array\n        // using the computed cumulated frequencies in count\n        for (int j = input.length - 1; j >= 0; j--) {\n            int currentInt = input[j];\n            output[count[currentInt] - 1] = currentInt;\n            count[currentInt]--;\n        }\n\n        return output;\n    }"} {"path":"downloaded/SecretGenerator.java","method_name":"generate","content":"/**\n     * Generates a secret from another secret, a seed, and a label\n     *\n     * @param secret\n     * @param label\n     * @param seed\n     * @param targetLength The desired length of the generated secret.\n     * @return The generated secret\n     */\npublic static byte[] generate(byte[] secret, String label, byte[] seed, int targetLength) {\n        // Split the secret\n        int partLength = TeraMath.ceilToInt(secret.length / 2.0f);\n        byte[] part1 = Arrays.copyOfRange(secret, 0, partLength);\n        byte[] part2 = Arrays.copyOfRange(secret, secret.length - partLength, secret.length);\n\n        byte[] labelBytes = label.getBytes(Charset.forName(\"US-ASCII\"));\n\n        byte[] combinedLabelSeed = new byte[labelBytes.length + seed.length];\n        System.arraycopy(labelBytes, 0, combinedLabelSeed, 0, labelBytes.length);\n        System.arraycopy(seed, 0, combinedLabelSeed, labelBytes.length, seed.length);\n\n        // MD5 the first half of the secret\n        byte[] md5Result = phashMD5(part1, combinedLabelSeed, targetLength);\n\n        // SHA1 the second half of the secret\n        byte[] sha1Result = phashSHA1(part2, combinedLabelSeed, targetLength);\n\n        byte[] masterSecret = new byte[md5Result.length];\n        for (int i = 0; i < masterSecret.length; ++i) {\n            masterSecret[i] = (byte) (md5Result[i] ^ sha1Result[i]);\n        }\n\n        return masterSecret;\n    }"} {"path":"downloaded/SecretGenerator.java","method_name":"phashMD5","content":"/**\n     * Generates a secret from another secret, a seed, and a label\n     *\n     * @param secret\n     * @param label\n     * @param seed\n     * @param targetLength The desired length of the generated secret.\n     * @return The generated secret\n     */\npublic static byte[] phashMD5(byte[] secret, byte[] seed, int targetLength) {\n        return phash(secret, seed, MD5_HASH_ALGORITHM, targetLength);\n    }"} {"path":"downloaded/SecretGenerator.java","method_name":"phashSHA1","content":"/**\n     * Generates a secret from another secret, a seed, and a label\n     *\n     * @param secret\n     * @param label\n     * @param seed\n     * @param targetLength The desired length of the generated secret.\n     * @return The generated secret\n     */\npublic static byte[] phashSHA1(byte[] secret, byte[] seed, int targetLength) {\n        return phash(secret, seed, SHA1_HASH_ALGORITHM, targetLength);\n    }"} {"path":"downloaded/SecretGenerator.java","method_name":"phash","content":"/**\n     * Generates a secret from another secret, a seed, and a label\n     *\n     * @param secret\n     * @param label\n     * @param seed\n     * @param targetLength The desired length of the generated secret.\n     * @return The generated secret\n     */\nprivate static byte[] phash(byte[] secret, byte[] seed, String algorithm, int targetLength) {\n        SecretKeySpec signingKey = new SecretKeySpec(secret, algorithm);\n\n        try {\n            Mac mac = Mac.getInstance(algorithm);\n            mac.init(signingKey);\n\n            // Compute the hmac on input data bytes\n            byte[] prevHash = mac.doFinal(seed);\n            byte[] result = new byte[targetLength];\n            int lengthGenerated = 0;\n            while (lengthGenerated < targetLength) {\n                byte[] value = new byte[prevHash.length + secret.length];\n                System.arraycopy(prevHash, 0, value, 0, prevHash.length);\n                System.arraycopy(secret, 0, value, prevHash.length, secret.length);\n                prevHash = mac.doFinal(value);\n                System.arraycopy(prevHash, 0, result, lengthGenerated, Math.min(prevHash.length, targetLength - lengthGenerated));\n                lengthGenerated += prevHash.length;\n            }\n            return result;\n\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(algorithm + \" not supported, required for authentication\", e);\n        } catch (InvalidKeyException e) {\n            throw new RuntimeException(\"Error computing master secret\", e);\n        }\n\n    }"} {"path":"downloaded/FormationResourceIntTest.java","method_name":"createEntity","content":"/**\n     * Create an entity for this test.\n     *\n     * This is a static method, as tests for other entities might also need it,\n     * if they test an entity which requires the current entity.\n     */\npublic static Formation createEntity(EntityManager em) {\n        Formation formation = new Formation()\n            .iDFormation(DEFAULT_I_D_FORMATION)\n            .nomFormation(DEFAULT_NOM_FORMATION)\n            .information(DEFAULT_INFORMATION);\n        return formation;\n    }"} {"path":"downloaded/XYChartActivity.java","method_name":"\n//\t\t\t});\n\t\t\t//layo","content":"/**\n\t * 装点点的ImageVie\nORT).show();\n//\t\t\t\t\t}\n//\t\t\t\t}\n//\t\t\t});\n\t\t\t//layout.addView(mChartView, new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));\n\t    } else {\n\t    \t//mChartView.repaint();\n\t    }\n\t}\n\t\n    @Override\n    public "} {"path":"downloaded/XYChartActivity.java","method_name":"crollStateChanged(","content":"/**\n\t * 装点点的ImageVie\nOverride\n\tpublic void onPageScrollStateChanged(int arg0) {\n\n\t}\n\n\t@Override\n\tpublic void onPageScrolled(int arg0, float arg1, int arg2) {\n\n\t}\n\n\t@Override\n"} {"path":"downloaded/XYChartActivity.java","method_name":"ected(int arg0) {\n\t\ts","content":"/**\n\t * 装点点的ImageVie\n void onPageSelected(int arg0) {\n\t\tsetImageBackground(arg0 % mGraphicalViews.length);\n\t}\n\t\n\t@Override\n    public boolean dispatchTouchEvent(MotionEvent ev) {\n        boolean result = super.dispatchTouchEvent(ev) ;\n  \n        return result;\n    }\n \n    public boolean onInterceptTouchEvent(MotionEvent ev) {\n        // \n        final int action = MotionEventCompat.getActionMasked(ev);\n        // Always handle the case of the touch gesture being complete.\n        if (action == MotionEvent.ACTION_CANCEL || acti"} {"path":"downloaded/HtmlFormCredential.java","method_name":"getLoginUri","content":"/**\n     * @param context ProcessorURI context to use.\n     * @return login-uri.\n     * @throws AttributeNotFoundException\n     */\npublic String getLoginUri(final ProcessorURI context) {\n        return context.get(this, LOGIN_URI);\n    }"} {"path":"downloaded/HtmlFormCredential.java","method_name":"getHttpMethod","content":"/**\n     * @param context ProcessorURI context to use.\n     * @return login-uri.\n     * @throws AttributeNotFoundException\n     */\npublic String getHttpMethod(final ProcessorURI context) {\n        return context.get(this, FORM_METHOD);\n    }"} {"path":"downloaded/HtmlFormCredential.java","method_name":"getFormItems","content":"/**\n     * @param context ProcessorURI context to use.\n     * @return Form inputs as convenient map.  Returns null if no form items.\n     * @throws AttributeNotFoundException\n     */\npublic Map<String,String> getFormItems(final ProcessorURI context) {\n        return context.get(this, FORM_ITEMS);\n    }"} {"path":"downloaded/HtmlFormCredential.java","method_name":"isPrerequisite","content":"/**\n     * @param context ProcessorURI context to use.\n     * @return Form inputs as convenient map.  Returns null if no form items.\n     * @throws AttributeNotFoundException\n     */\npublic boolean isPrerequisite(final ProcessorURI curi) {\n        boolean result = false;\n        String curiStr = curi.getUURI().toString();\n        String loginUri = getPrerequisite(curi);\n        if (loginUri != null) {\n            try {\n                UURI uuri = UURIFactory.getInstance(curi.getUURI(), loginUri);\n                if (uuri != null && curiStr != null &&\n                    uuri.toString().equals(curiStr)) {\n                    result = true;\n                    if (!curi.isPrerequisite()) {\n                        curi.setPrerequisite(true);\n                        logger.fine(curi + \" is prereq.\");\n                    }\n                }\n            } catch (URIException e) {\n                logger.severe(\"Failed to uuri: \" + curi + \", \" +\n                    e.getMessage());\n            }\n        }\n        return result;\n    }"} {"path":"downloaded/HtmlFormCredential.java","method_name":"hasPrerequisite","content":"/**\n     * @param context ProcessorURI context to use.\n     * @return Form inputs as convenient map.  Returns null if no form items.\n     * @throws AttributeNotFoundException\n     */\npublic boolean hasPrerequisite(ProcessorURI curi) {\n        return getPrerequisite(curi) != null;\n    }"} {"path":"downloaded/HtmlFormCredential.java","method_name":"getPrerequisite","content":"/**\n     * @param context ProcessorURI context to use.\n     * @return Form inputs as convenient map.  Returns null if no form items.\n     * @throws AttributeNotFoundException\n     */\npublic String getPrerequisite(ProcessorURI curi) {\n        return getLoginUri(curi);\n    }"} {"path":"downloaded/HtmlFormCredential.java","method_name":"getKey","content":"/**\n     * @param context ProcessorURI context to use.\n     * @return Form inputs as convenient map.  Returns null if no form items.\n     * @throws AttributeNotFoundException\n     */\npublic String getKey(ProcessorURI curi) {\n        return getLoginUri(curi);\n    }"} {"path":"downloaded/HtmlFormCredential.java","method_name":"isEveryTime","content":"/**\n     * @param context ProcessorURI context to use.\n     * @return Form inputs as convenient map.  Returns null if no form items.\n     * @throws AttributeNotFoundException\n     */\npublic boolean isEveryTime() {\n        // This authentication is one time only.\n        return false;\n    }"} {"path":"downloaded/HtmlFormCredential.java","method_name":"populate","content":"/**\n     * @param context ProcessorURI context to use.\n     * @return Form inputs as convenient map.  Returns null if no form items.\n     * @throws AttributeNotFoundException\n     */\npublic boolean populate(ProcessorURI curi, HttpClient http, HttpMethod method,\n            String payload) {\n        // http is not used.\n        // payload is not used.\n        boolean result = false;\n        Map<String,String> formItems = getFormItems(curi);\n        if (formItems == null || formItems.size() <= 0) {\n            try {\n                logger.severe(\"No form items for \" + method.getURI());\n            }\n            catch (URIException e) {\n                logger.severe(\"No form items and exception getting uri: \" +\n                    e.getMessage());\n            }\n            return result;\n        }\n\n        NameValuePair[] data = new NameValuePair[formItems.size()];\n        int index = 0;\n        String key = null;\n        for (Iterator i = formItems.keySet().iterator(); i.hasNext();) {\n            key = (String)i.next();\n            data[index++] = new NameValuePair(key, (String)formItems.get(key));\n        }\n        if (method instanceof PostMethod) {\n            ((PostMethod)method).setRequestBody(data);\n            result = true;\n        } else if (method instanceof GetMethod) {\n            // Append these values to the query string.\n            // Get current query string, then add data, then get it again\n            // only this time its our data only... then append.\n            HttpMethodBase hmb = (HttpMethodBase)method;\n            String currentQuery = hmb.getQueryString();\n            hmb.setQueryString(data);\n            String newQuery = hmb.getQueryString();\n            hmb.setQueryString(\n                    ((StringUtils.isNotEmpty(currentQuery))\n                            ? currentQuery + \"&\"\n                            : \"\")\n                    + newQuery);\n            result = true;\n        } else {\n            logger.severe(\"Unknown method type: \" + method);\n        }\n        return result;\n    }"} {"path":"downloaded/HtmlFormCredential.java","method_name":"isPost","content":"/**\n     * @param context ProcessorURI context to use.\n     * @return Form inputs as convenient map.  Returns null if no form items.\n     * @throws AttributeNotFoundException\n     */\npublic boolean isPost(ProcessorURI curi) {\n        String method = getHttpMethod(curi);\n        return method != null && method.equalsIgnoreCase(\"POST\");\n    }"} {"path":"downloaded/ECFileCacheInputStream.java","method_name":"read","content":"/**\n   * Reads the next byte of data from the input stream\n   *\n   * @return     the next byte of data, or\n   *             <code>-1</code> if the end of the stream is reached\n   * @throws IOException\n   */\n@Override\n  public int read() throws IOException {\n    if (pos >= count) {\n      fill();\n      if (pos >= count) {\n        return -1;\n      }\n    }\n    checkIfClosed();\n    return buf[pos++] & 0xFF;\n  }"} {"path":"downloaded/ECFileCacheInputStream.java","method_name":"read","content":"/**\n   * Reads up to <code>len</code> bytes of data from the input stream into\n   * an array of bytes.  An attempt is made to read as many as\n   * <code>len</code> bytes, but a smaller number may be read.\n   * The number of bytes actually read is returned as an integer.\n   *\n   * @param b     the buffer into which the data is read.\n   * @param off   the start offset in array <code>b</code> at which the data is written.\n   * @param len   the maximum number of bytes to read.\n   * @return     the total number of bytes read into the buffer, or\n   *             <code>-1</code> if the end of the stream has been reached.\n   * @throws IOException\n   */\n@Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    checkIfClosed();\n    if ((off | len | (off + len) | (b.length - (off + len))) < 0) {\n      throw new IndexOutOfBoundsException();\n    } else if (len == 0) {\n      return 0;\n    }\n\n    int n = 0;\n    while (true) {\n      int nread = readRedisIfNeed(b, off + n, len - n);\n      if (nread <= 0) {\n        return (n == 0) ? nread : n;\n      }\n      n += nread;\n      if (n >= len) {\n        return n;\n      }\n      if (available() <= 0) {\n        return n;\n      }\n    }\n  }"} {"path":"downloaded/ECFileCacheInputStream.java","method_name":"readRedisIfNeed","content":"/**\n   * Reads up to <code>len</code> bytes of data from the input stream into\n   * an array of bytes.  An attempt is made to read as many as\n   * <code>len</code> bytes, but a smaller number may be read.\n   * The number of bytes actually read is returned as an integer.\n   *\n   * @param b     the buffer into which the data is read.\n   * @param off   the start offset in array <code>b</code> at which the data is written.\n   * @param len   the maximum number of bytes to read.\n   * @return     the total number of bytes read into the buffer, or\n   *             <code>-1</code> if the end of the stream has been reached.\n   * @throws IOException\n   */\nprivate int readRedisIfNeed(byte[] b, int off, int len) throws IOException {\n    checkIfClosed();\n    int avail = count - pos;\n    if (avail <= 0) {\n      fill();\n      avail = count - pos;\n      if (avail <= 0) {\n        return -1;\n      }\n    }\n    int cnt = (avail < len) ? avail : len;\n    System.arraycopy(buf, pos, b, off, cnt);\n    pos += cnt;\n    return cnt;\n  }"} {"path":"downloaded/ECFileCacheInputStream.java","method_name":"getChunk","content":"/**\n   * Reads up to <code>len</code> bytes of data from the input stream into\n   * an array of bytes.  An attempt is made to read as many as\n   * <code>len</code> bytes, but a smaller number may be read.\n   * The number of bytes actually read is returned as an integer.\n   *\n   * @param b     the buffer into which the data is read.\n   * @param off   the start offset in array <code>b</code> at which the data is written.\n   * @param len   the maximum number of bytes to read.\n   * @return     the total number of bytes read into the buffer, or\n   *             <code>-1</code> if the end of the stream has been reached.\n   * @throws IOException\n   */\nprivate byte[] getChunk() throws ECFileCacheException {\n\n    if(nextChunkPos >= fileSize){\n      return null;\n    }\n\n    byte[] buffer;\n    long chunkPos = nextChunkPos;\n    Integer size = chunkPosAndSize.get(chunkPos);\n    if (size == null) {\n      if (endChunkStream == null) {\n        return null;\n      }\n\n      try {\n        buffer = IOUtils.toByteArray(endChunkStream);\n      } catch (IOException e) {\n        String verbose = \"read end chunk stream data exception\";\n        LOGGER.error(verbose, e);\n        throw new ECFileCacheException(verbose, e);\n      }\n    } else {\n      buffer = getDataFromRedis(chunkPos, size);\n    }\n\n    nextChunkPos += buffer.length;\n    if (nextChunkPos > fileSize) {\n      buffer = Arrays.copyOf(buffer, fileSize - (int) chunkPos);\n\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(String.format(\"Trim padding. padded length [%d], available length [%d]\",\n            buffer.length, fileSize - (int) chunkPos));\n      }\n    }\n\n    return buffer;\n  }"} {"path":"downloaded/ECFileCacheInputStream.java","method_name":"getDataFromRedis","content":"/**\n   * Reads up to <code>len</code> bytes of data from the input stream into\n   * an array of bytes.  An attempt is made to read as many as\n   * <code>len</code> bytes, but a smaller number may be read.\n   * The number of bytes actually read is returned as an integer.\n   *\n   * @param b     the buffer into which the data is read.\n   * @param off   the start offset in array <code>b</code> at which the data is written.\n   * @param len   the maximum number of bytes to read.\n   * @return     the total number of bytes read into the buffer, or\n   *             <code>-1</code> if the end of the stream has been reached.\n   * @throws IOException\n   */\nprivate byte[] getDataFromRedis(long chunkPos, int size) throws ECFileCacheException {\n    Pair<byte[][], int[]> pair;\n    pair = redisAccess.getChunk(redisIds, key, chunkPos, size);\n\n    if (pair == null) {\n      return null;\n    }\n\n    byte[][] chunk = pair.getFirst();\n    int[] erasures = pair.getSecond();\n\n    if (erasures.length > ECodec.CODING_BLOCK_NUM) {\n      String verbose = String.format(\"can not decode chunk, erasures data num[%d] > CODING_BLOCK_NUM[%d]\",\n          erasures.length, ECodec.CODING_BLOCK_NUM);\n      LOGGER.error(verbose);\n      throw new ECFileCacheException(verbose);\n    }\n    return eCodec.decode(chunk, erasures);\n  }"} {"path":"downloaded/ECFileCacheInputStream.java","method_name":"available","content":"/**\n   * Returns the number of bytes that can be read from this input stream\n   *\n   * @return the number of bytes that can be read, or\n   *         <code>0</code> if the end of the stream has been reached.\n   * @throws IOException\n   */\n@Override\n  public int available() throws IOException {\n    return fileSize - nextChunkPos + (count - pos);\n  }"} {"path":"downloaded/CleverCoinTradeService.java","method_name":"getOpenOrders","content":"/**\n   * Constructor\n   *\n   * @param exchange\n   */\n@Override\n  public OpenOrders getOpenOrders() throws IOException, CleverCoinException {\n\n    CleverCoinOrder[] openOrders = getCleverCoinOpenOrders();\n\n    List<LimitOrder> limitOrders = new ArrayList<LimitOrder>();\n    for (CleverCoinOrder cleverCoinOrder : openOrders) {\n      OrderType orderType = cleverCoinOrder.getType() == 0 ? OrderType.BID : OrderType.ASK;\n      String id = Integer.toString(cleverCoinOrder.getId());\n      BigDecimal price = cleverCoinOrder.getPrice();\n      limitOrders.add(new LimitOrder(orderType, cleverCoinOrder.getAmount(), CurrencyPair.BTC_EUR, id, cleverCoinOrder.getTime(), price));\n    }\n    return new OpenOrders(limitOrders);\n  }"} {"path":"downloaded/CleverCoinTradeService.java","method_name":"placeLimitOrder","content":"/**\n   * Constructor\n   *\n   * @param exchange\n   */\n@Override\n  public String placeLimitOrder(LimitOrder limitOrder) throws IOException, CleverCoinException {\n\n    CleverCoinOpenOrder cleverCoinOrder;\n    String orderType = (limitOrder.getType() == BID ? \"bid\" : \"ask\");\n    cleverCoinOrder = createCleverCoinOrder(orderType, limitOrder.getTradableAmount(), limitOrder.getLimitPrice());\n    if (cleverCoinOrder.getErrorMessage() != null) {\n      throw new ExchangeException(cleverCoinOrder.getErrorMessage());\n    }\n    return cleverCoinOrder.getOrderId();\n  }"} {"path":"downloaded/CleverCoinTradeService.java","method_name":"cancelOrder","content":"/**\n   * Constructor\n   *\n   * @param exchange\n   */\n@Override\n  public boolean cancelOrder(String orderId) throws IOException, CleverCoinException {\n\n    return cancelCleverCoinOrder(Integer.parseInt(orderId)).getResult().equals(\"success\");\n  }"} {"path":"downloaded/CleverCoinTradeService.java","method_name":"getTradeHistory","content":"/**\n   * Required parameter types: {@link TradeHistoryParamPaging#getPageLength()}\n   */\n@Override\n  public UserTrades getTradeHistory(TradeHistoryParams params) throws IOException {\n    Integer count = ((TradeHistoryParamPaging) params).getPageLength();\n    return CleverCoinAdapters.adaptTradeHistory(getCleverCoinUserTransactions(count));\n  }"} {"path":"downloaded/CleverCoinTradeService.java","method_name":"createTradeHistoryParams","content":"/**\n   * Required parameter types: {@link TradeHistoryParamPaging#getPageLength()}\n   */\n@Override\n  public TradeHistoryParamPaging createTradeHistoryParams() {\n    return new DefaultTradeHistoryParamPaging(100);\n  }"} {"path":"downloaded/ProgressionContainer.java","method_name":"getPartNumber","content":"/**\n\t * @return the intPartNum\n\t */\npublic int getPartNumber() {\n\t\treturn intPartNum;\n\t}"} {"path":"downloaded/ProgressionContainer.java","method_name":"getPercent","content":"/**\n\t * @return the percent\n\t */\npublic int getPercent() {\n\t\treturn percent;\n\t}"} {"path":"downloaded/ProgressionContainer.java","method_name":"getLastPercent","content":"/**\n\t * @return the lastPercent\n\t */\npublic int getLastPercent() {\n\t\treturn lastPercent;\n\t}"} {"path":"downloaded/OImaging.java","method_name":"getInstance","content":"/**\n     * Return the OImaging singleton\n     * @return OImaging singleton\n     */\npublic static OImaging getInstance() {\n        return (OImaging) App.getInstance();\n    }"} {"path":"downloaded/OImaging.java","method_name":"createPreferencesView","content":"/**\n     * Create the Preferences view\n     * @return Preferences view\n     */\npublic static PreferencesView createPreferencesView() {\n        // Retrieve application preferences and attach them to their view\n        // (This instance must be instanciated after dependencies)\n        final LinkedHashMap<String, JPanel> panels = new LinkedHashMap<String, JPanel>(2);\n        panels.put(\"General settings\", new PreferencePanel());\n\n        final PreferencesView preferencesView = new PreferencesView(getFrame(), Preferences.getInstance(), panels);\n        preferencesView.init();\n\n        return preferencesView;\n    }"} {"path":"downloaded/OImaging.java","method_name":"canBeTerminatedNow","content":"/**\n     * Hook to handle operations before closing application.\n     *\n     * @return should return true if the application can exit, false otherwise to cancel exit.\n     */\n@Override\n    public boolean canBeTerminatedNow() {\n        logger.debug(\"OifitsExplorerGui.finish() handler called.\");\n\n        // Can't exit if a job is running\n        if (IRModelManager.getInstance().getIRModel().isRunning()) {\n            MessagePane.showMessage(\"A job is running... Please wait for its completion or cancel it before quitting.\");\n            return false;\n        }\n\n        // Ask the user if he wants to save modifications\n        //@TODO replace by code when save will be available.\n        MessagePane.ConfirmSaveChanges result = MessagePane.ConfirmSaveChanges.Ignore;\n        //MessagePane.ConfirmSaveChanges result = MessagePane.showConfirmSaveChangesBeforeClosing();\n\n        // Handle user choice\n        switch (result) {\n            // If the user clicked the \"Save\" button, save and exit\n            case Save:\n                /*\n                 if (this.saveAction != null) {\n                 return this.saveAction.save();\n                 }\n                 */\n                break;\n\n            // If the user clicked the \"Don't Save\" button, exit\n            case Ignore:\n                break;\n\n            // If the user clicked the \"Cancel\" button or pressed 'esc' key, don't exit\n            case Cancel:\n            default: // Any other case\n                return false;\n        }\n\n        return true;\n    }"} {"path":"downloaded/OImaging.java","method_name":"getMainPanel","content":"/**\n     * Return the main panel\n     *\n     * @return main panel\n     */\npublic MainPanel getMainPanel() {\n        return mainPanel;\n    }"} {"path":"downloaded/OImaging.java","method_name":"createProgressPanel","content":"/**\n     * Create a generic progress panel (typically shown in overlay)\n     *\n     * @param message message displayed as tooltip\n     * @param progressBar progress bar to use\n     * @param cancelListener optional cancel action listener\n     * @return new panel\n     */\npublic static JPanel createProgressPanel(final String message, final JProgressBar progressBar, final ActionListener cancelListener) {\n        final JPanel progressPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 4, 0));\n        progressPanel.setBorder(BorderFactory.createEtchedBorder());\n        progressPanel.setToolTipText(message);\n\n        final Dimension dim = new Dimension(80, 18);\n        progressBar.setMinimumSize(dim);\n        progressBar.setPreferredSize(dim);\n        progressBar.setMaximumSize(dim);\n\n        progressBar.setStringPainted(true);\n        progressPanel.add(progressBar);\n\n        if (cancelListener != null) {\n            final JButton cancelBtn = new JButton(\"cancel\");\n            cancelBtn.setMargin(new Insets(0, 2, 0, 2));\n            cancelBtn.addActionListener(cancelListener);\n            progressPanel.add(cancelBtn);\n        }\n\n        return progressPanel;\n    }"} {"path":"downloaded/AppSearchCompiler.java","method_name":"getSupportedSourceVersion","content":"/**\n     * This property causes us to write output to a different folder instead of the usual filer\n     * location. It should only be used for testing.\n     */\n@Override\n    @NonNull\n    public SourceVersion getSupportedSourceVersion() {\n        return SourceVersion.latestSupported();\n    }"} {"path":"downloaded/AppSearchCompiler.java","method_name":"process","content":"/**\n     * This property causes us to write output to a different folder instead of the usual filer\n     * location. It should only be used for testing.\n     */\n@Override\n    public boolean process(\n            @NonNull Set<? extends TypeElement> set,\n            @NonNull RoundEnvironment roundEnvironment) {\n        try {\n            tryProcess(set, roundEnvironment);\n        } catch (ProcessingException e) {\n            e.printDiagnostic(mMessager);\n        }\n        // True means we claimed the annotations. This is true regardless of whether they were\n        // used correctly.\n        return true;\n    }"} {"path":"downloaded/AppSearchCompiler.java","method_name":"tryProcess","content":"/**\n     * This property causes us to write output to a different folder instead of the usual filer\n     * location. It should only be used for testing.\n     */\nprivate void tryProcess(\n            @NonNull Set<? extends TypeElement> set,\n            @NonNull RoundEnvironment roundEnvironment) throws ProcessingException {\n        if (set.isEmpty()) return;\n\n        // Find the TypeElement corresponding to the @AppSearchDocument annotation. We can't use the\n        // annotation class directly because the appsearch project compiles only on Android, but\n        // this annotation processor runs on the host.\n        TypeElement appSearchDocument =\n                findAnnotation(set, IntrospectionHelper.APP_SEARCH_DOCUMENT_CLASS);\n\n        for (Element element : roundEnvironment.getElementsAnnotatedWith(appSearchDocument)) {\n            if (element.getKind() != ElementKind.CLASS) {\n                throw new ProcessingException(\n                        \"@AppSearchDocument annotation on something other than a class\", element);\n            }\n            processAppSearchDocument((TypeElement) element);\n        }\n    }"} {"path":"downloaded/AppSearchCompiler.java","method_name":"findAnnotation","content":"/**\n     * This property causes us to write output to a different folder instead of the usual filer\n     * location. It should only be used for testing.\n     */\nprivate TypeElement findAnnotation(Set<? extends TypeElement> set, String name) {\n        for (TypeElement typeElement : set) {\n            if (typeElement.getQualifiedName().contentEquals(name)) {\n                return typeElement;\n            }\n        }\n        return null;\n    }"} {"path":"downloaded/CongestionChargeCalculator.java","method_name":"getChargeList","content":"/**\n     * Calculates the overall charge to all vehicles in the eventLog over the whole day considering all their {@link ZoneBoundaryCrossing}\n     * activities logged in the list.\n     *\n     * @return a {@link HashMap} with the Vehicle as a key and {@link BigDecimal} containing the total money to charge the vehicle\n     * based on the day's activity\n     */\npublic Map<Vehicle, BigDecimal> getChargeList(){\n        Map<Vehicle, List<ZoneBoundaryCrossing>> crossingsPerVehicle = eventLog.getCrossingsPerVehicle();\n        Map<Vehicle, BigDecimal> chargePerVehicle = new HashMap<>();\n\n        for(Vehicle vehicle: crossingsPerVehicle.keySet()){\n\n            BigDecimal vehicleCharge = new BigDecimal(0);\n            List<ZoneBoundaryCrossing> crossingsByVehicle = crossingsPerVehicle.get(vehicle);\n\n            if (!eventLog.checkOrderingOf(crossingsByVehicle)) {\n                OperationsTeam.getInstance().triggerInvestigationInto(vehicle);\n            } else {\n                EntryEvent lastChargedEntry = (EntryEvent) crossingsByVehicle.get(0);\n                vehicleCharge = vehicleCharge.add(getChargeByTime(lastChargedEntry.timestamp()));\n\n                for(ZoneBoundaryCrossing crossing : crossingsByVehicle.subList(1, crossingsByVehicle.size())){\n                    if(crossing instanceof ExitEvent){\n                        int durationInArea = getMinutesBetween(lastChargedEntry.timestamp(), crossing.timestamp());\n                        if(durationInArea > FOUR_HOURS_IN_MINS){\n                            vehicleCharge = CHARGE_OVERTIME;\n                            break;\n                        }\n                    }\n\n                    if(crossing instanceof EntryEvent){\n                        if(canChargeAgain(lastChargedEntry.timestamp(), crossing.timestamp())) {\n                            vehicleCharge = vehicleCharge.add(getChargeByTime(crossing.timestamp()));\n                            lastChargedEntry = (EntryEvent) crossing;\n                        }\n                    }\n                }\n            }\n            chargePerVehicle.put(vehicle, vehicleCharge);\n        }\n\n        return chargePerVehicle;\n    }"} {"path":"downloaded/CongestionChargeCalculator.java","method_name":"getChargeForVehicle","content":"/**\n     * Gives the overall charge for a specified vehicle based on its activity in the eventLog.\n     *\n     * @param vehicle is the Vehicle whose charge is being determined\n     * @return a {@link BigDecimal} object with the charge or 0 value if the vehicle isn't in the eventLog\n     */\npublic BigDecimal getChargeForVehicle(Vehicle vehicle){\n        Map<Vehicle, BigDecimal> chargeList = getChargeList();\n        if(chargeList.keySet().contains(vehicle)) {\n            return chargeList.get(vehicle);\n        }\n        return new BigDecimal(0);\n    }"} {"path":"downloaded/FilterJobEventsByIDs.java","method_name":"test","content":"/**\n\t * Sets the ID of the job to be cancelled\n\t * @param jobId the ID of the job to be cancelled\n\t */\n@Override\n\tpublic boolean test(SimEvent ev) {\n\t\treturn (ev.type() == TASK_COMPLETE || \n\t\t\t\tev.type() == TASK_START) && \n\t\t\t\t\tjobsId.contains(((WorkUnit)ev.content()).getId());\n\t}"} {"path":"downloaded/MatkaKokoelma.java","method_name":"oolean poistaMatka","content":"\n\n    /**\n     * Lista Matka-oliota\n \n*/\n    public boolean poistaMatkaNimella(String nimi, String kansio) {\n        int pois = -1;\n        for (int i = 0; i < matkat.size(); i++) {\n            if (nimi.equals(matkat.get(i).getMatkanNimi())) {\n                pois = i;\n            }\n        }\n\n        if (pois != -1) {\n            matkat.remove(pois);\n            File poistettava = new File(kansio + \"/\" + nimi + \".txt\");\n            boolean ok = poistettava.delete();\n            return true;\n        }\n\n        return false"} {"path":"downloaded/MatkaKokoelma.java","method_name":"ic Matka getMat","content":"\n\n    /**\n     * Lista Matka-oliota\n \n  */\n    public Matka getMatkaNimella(String nimi) {\n        for (Matka m : matkat) {\n            if (m.getMatkanNimi().equals(nimi)) {\n                return m;\n            }\n        }\n        return nu"} {"path":"downloaded/MatkaKokoelma.java","method_name":"lic double getMat","content":"\n\n    /**\n     * Lista Matka-oliota\n \n    */\n    public double getMatkojenpituus() {\n        if (matkat.size() == 0) {\n            return 0.0;\n        }\n\n        laskeMatkojenPituus();\n        return matkojenpi"} {"path":"downloaded/MatkaKokoelma.java","method_name":"ist<Matka","content":"\n\n    /**\n     * Lista Matka-oliota\n \n    */\n    public ArrayList<Matka> getMatkat() {\n        return ma"} {"path":"downloaded/MatkaKokoelma.java","method_name":"   public double getMa","content":"\n\n    /**\n     * Lista Matka-oliota\n \npeus\n     */\n    public double getMatkojenKeskinopeus() {\n        return getMatkojenpituus() / (getMatkojenkes"} {"path":"downloaded/MatkaKokoelma.java","method_name":"    */\n    publi","content":"\n\n    /**\n     * Lista Matka-oliota\n \nkesto\n     *\n     */\n    public double getMatkojenkesto() {\n        if (matkat.size() == 0) {\n            return 0.0;\n        }\n        laskeMatkojenKesto();\n        re"} {"path":"downloaded/ReservaSocioWindow.java","method_name":"getLblTitulo","content":"/**\n\t * Create the frame.\n\t */\nprivate JLabel getLblTitulo() {\n\t\tif (lblTitulo == null) {\n\t\t\tlblTitulo = new JLabel(\"Realizando una reserva para el socio \" + socio.getNombre() + \" \" + socio.getApellido());\n\t\t}\n\t\treturn lblTitulo;\n\t}"} {"path":"downloaded/ReservaSocioWindow.java","method_name":"getSpActividades","content":"/**\n\t * Create the frame.\n\t */\nprivate JScrollPane getSpActividades() {\n\t\tif (spActividades == null) {\n\t\t\tspActividades = new JScrollPane();\n\t\t\tspActividades.setViewportView(getListActividades());\n\t\t}\n\t\treturn spActividades;\n\t}"} {"path":"downloaded/ReservaSocioWindow.java","method_name":"getListActividades","content":"/**\n\t * Create the frame.\n\t */\nprivate JList<ActividadPlanificada> getListActividades() {\n\t\tif (listActividades == null) {\n\t\t\tmodeloActividades = new DefaultListModel<ActividadPlanificada>();\n\t\t\tlistActividades = new JList<ActividadPlanificada>(modeloActividades);\n\t\t\tlistActividades.addListSelectionListener(new ListSelectionListener() {\n\t\t\t\tpublic void valueChanged(ListSelectionEvent arg0) {\n\t\t\t\t\tbtnReservar.setEnabled(true);\n\t\t\t\t}\n\t\t\t});\n\t\t\tlistActividades.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\t\t}\n\t\treturn listActividades;\n\t}"} {"path":"downloaded/ReservaSocioWindow.java","method_name":"ama getProg","content":"/**\n\t * Create the frame.\n\t */\n\t}\n\tprivate Programa getPrograma() {\n\t\treturn parent.getParent().getPrograma()"} {"path":"downloaded/ReservaSocioWindow.java","method_name":"nel getPnBot","content":"/**\n\t * Create the frame.\n\t */\n\t}\n\tprivate JPanel getPnBotones() {\n\t\tif (pnBotones == null) {\n\t\t\tpnBotones = new JPanel();\n\t\t\tpnBotones.setLayout(new BoxLayout(pnBotones, BoxLayout.X_AXIS));\n\t\t\tpnBotones.add(getPnRecuerda());\n\t\t\tpnBotones.add(getBtnVolver());\n\t\t\tpnBotones.add(getBtnReservar());\n\t\t}\n\t\treturn pnBotones"} {"path":"downloaded/ReservaSocioWindow.java","method_name":"ton getBtnRese","content":"/**\n\t * Create the frame.\n\t */\n\t}\n\tprivate JButton getBtnReservar() {\n\t\tif (btnReservar == null) {\n\t\t\tbtnReservar = new JButton(\"Reservar\");\n\t\t\tbtnReservar.setMnemonic('R');\n\t\t\tbtnReservar.setEnabled(false);\n\t\t\tbtnReservar.addActionListener(new ActionListener() {\n\t\t\t\tpublic void actionPerformed(ActionEvent arg0) {\n\t\t\t\t\tint yesNo = JOptionPane.showConfirmDialog(null, \"¿Seguro de que reservar para la actividad \"\n\t\t\t\t\t\t\t+ listActividades.getSelectedValue().getCodigoActividad() + \" ?\");\n\t\t\t\t\tif (yesNo == JOptionPane.YES_OPTION) {\n\t\t\t\t\t\tActividadPlanificada ap = listActividades.getSelectedValue();\n\t\t\t\t\t\tif (getPrograma().añadirReserva(socio, ap)) {\n\t\t\t\t\t\t\tJOptionPane.showMessageDialog(null, \"Se ha realizado la reserva correctamente\");\n\t\t\t\t\t\t\tcargarActividades();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tJOptionPane.showMessageDialog(ReservaSocioWindow.this, \"Ya habías reservado esta actividad anteriormente.\",\n\t\t\t\t\t\t\t\t\t\"Error en la reserva\", JOptionPane.WARNING_MESSAGE);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tbtnReservar.setForeground(Color.WHITE);\n\t\t\tbtnReservar.setBackground(new Color(0, 128, 0));\n\t\t}\n\t\treturn btnReser"} {"path":"downloaded/ReservaSocioWindow.java","method_name":"Button getBt","content":"/**\n\t * Create the frame.\n\t */\nr;\n\t}\n\tprivate JButton getBtnVolver() {\n\t\tif (btnVolver == null) {\n\t\t\tbtnVolver = new JButton(\"Volver\");\n\t\t\tbtnVolver.setMnemonic('V');\n\t\t\tbtnVolver.addActionListener(new ActionListener() {\n\t\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t\tReservaSocioWindow.this.dispose();\n\t\t\t\t}\n\t\t\t});\n\t\t\tbtnVolver.setForeground(Color.WHITE);\n\t\t\tbtnVolver.setBackground(new Color(30, 144, 255));\n\t\t\tbtnVolver.setActionCommand(\"Cancel\");\n\t\t}\n\t\treturn btnVol"} {"path":"downloaded/ReservaSocioWindow.java","method_name":"JPanel getPnR","content":"/**\n\t * Create the frame.\n\t */\nr;\n\t}\n\tprivate JPanel getPnRecuerda() {\n\t\tif (pnRecuerda == null) {\n\t\t\tpnRecuerda = new JPanel();\n\t\t\tpnRecuerda.setLayout(new GridLayout(0, 1, 0, 0));\n\t\t\tpnRecuerda.add(getLblRecuerda());\n\t\t}\n\t\treturn pnRecue"} {"path":"downloaded/ReservaSocioWindow.java","method_name":"JLabel getLblR","content":"/**\n\t * Create the frame.\n\t */\na;\n\t}\n\tprivate JLabel getLblRecuerda() {\n\t\tif (lblRecuerda == null) {\n\t\t\tlblRecuerda = new JLabel(\"<html><body>Recuerda que solo puedes realizar reservas desde un d\\u00EDa antes de la actividad hasta una hora antes de su comienzo</body></html>\");\n\t\t\tlblRecuerda.setHorizontalAlignment(SwingConstants.LEFT);\n\t\t}\n\t\treturn lblRecue"} {"path":"downloaded/PendingTargetRunConfigurationHandler.java","method_name":"resolveContext","content":"/**\n   * A placeholder {@link RunProfileState}. This is bypassed entirely by PendingTargetProgramRunner.\n   */\nprivate static void resolveContext(ExecutionEnvironment env) throws ExecutionException {\n    BlazeCommandRunConfiguration config = BlazeCommandRunConfigurationRunner.getConfiguration(env);\n    PendingRunConfigurationContext pendingContext = config.getPendingContext();\n    if (pendingContext == null) {\n      return;\n    }\n    pendingContext.resolve(\n        env,\n        config,\n        () -> {\n          try {\n            reRunConfiguration(env);\n          } catch (ExecutionException e) {\n            ExecutionUtil.handleExecutionError(env, e);\n          }\n        });\n  }"} {"path":"downloaded/RBACUtilityImpl.java","method_name":"eStaticClass","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tprotected EClass eStaticClass() {\n\t\treturn GemRBACPackage.Literals.RBAC_UTILITY;\n\t}"} {"path":"downloaded/RBACUtilityImpl.java","method_name":"getMaxPermission","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic int getMaxPermission() {\n\t\treturn maxPermission;\n\t}"} {"path":"downloaded/RBACUtilityImpl.java","method_name":"getMaxActiveRole","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic int getMaxActiveRole() {\n\t\treturn maxActiveRole;\n\t}"} {"path":"downloaded/RBACUtilityImpl.java","method_name":"getMaxRole","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic int getMaxRole() {\n\t\treturn maxRole;\n\t}"} {"path":"downloaded/RBACUtilityImpl.java","method_name":"getBusinessTaskList","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic EList<Operation> getBusinessTaskList() {\n\t\tif (businessTaskList == null) {\n\t\t\tbusinessTaskList = new EObjectResolvingEList<Operation>(Operation.class, this, GemRBACPackage.RBAC_UTILITY__BUSINESS_TASK_LIST);\n\t\t}\n\t\treturn businessTaskList;\n\t}"} {"path":"downloaded/RBACUtilityImpl.java","method_name":"getBoundedPermissions","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic EList<Permission> getBoundedPermissions() {\n\t\tif (boundedPermissions == null) {\n\t\t\tboundedPermissions = new EObjectResolvingEList<Permission>(Permission.class, this, GemRBACPackage.RBAC_UTILITY__BOUNDED_PERMISSIONS);\n\t\t}\n\t\treturn boundedPermissions;\n\t}"} {"path":"downloaded/RBACUtilityImpl.java","method_name":"getCurrentT","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic TimePoint getCurrentT() {\n\t\tif (currentT != null && currentT.eIsProxy()) {\n\t\t\tInternalEObject oldCurrentT = (InternalEObject)currentT;\n\t\t\tcurrentT = (TimePoint)eResolveProxy(oldCurrentT);\n\t\t\tif (currentT != oldCurrentT) {\n\t\t\t\tif (eNotificationRequired())\n\t\t\t\t\teNotify(new ENotificationImpl(this, Notification.RESOLVE, GemRBACPackage.RBAC_UTILITY__CURRENT_T, oldCurrentT, currentT));\n\t\t\t}\n\t\t}\n\t\treturn currentT;\n\t}"} {"path":"downloaded/RBACUtilityImpl.java","method_name":"basicGetCurrentT","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic TimePoint basicGetCurrentT() {\n\t\treturn currentT;\n\t}"} {"path":"downloaded/RBACUtilityImpl.java","method_name":"getCurrentDay","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic RelativeTimePoint getCurrentDay() {\n\t\tif (currentDay != null && currentDay.eIsProxy()) {\n\t\t\tInternalEObject oldCurrentDay = (InternalEObject)currentDay;\n\t\t\tcurrentDay = (RelativeTimePoint)eResolveProxy(oldCurrentDay);\n\t\t\tif (currentDay != oldCurrentDay) {\n\t\t\t\tif (eNotificationRequired())\n\t\t\t\t\teNotify(new ENotificationImpl(this, Notification.RESOLVE, GemRBACPackage.RBAC_UTILITY__CURRENT_DAY, oldCurrentDay, currentDay));\n\t\t\t}\n\t\t}\n\t\treturn currentDay;\n\t}"} {"path":"downloaded/RBACUtilityImpl.java","method_name":"basicGetCurrentDay","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic RelativeTimePoint basicGetCurrentDay() {\n\t\treturn currentDay;\n\t}"} {"path":"downloaded/RBACUtilityImpl.java","method_name":"getCurrentTime","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic TimePoint getCurrentTime() {\n\t\ttry {\n\t\t\treturn (TimePoint)GET_CURRENT_TIME__EINVOCATION_DELEGATE.dynamicInvoke(this, null);\n\t\t}\n\t\tcatch (InvocationTargetException ite) {\n\t\t\tthrow new WrappedException(ite);\n\t\t}\n\t}"} {"path":"downloaded/RBACUtilityImpl.java","method_name":"getDayOfWeek","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic RelativeTimePoint getDayOfWeek() {\n\t\ttry {\n\t\t\treturn (RelativeTimePoint)GET_DAY_OF_WEEK__EINVOCATION_DELEGATE.dynamicInvoke(this, null);\n\t\t}\n\t\tcatch (InvocationTargetException ite) {\n\t\t\tthrow new WrappedException(ite);\n\t\t}\n\t}"} {"path":"downloaded/RBACUtilityImpl.java","method_name":"eGet","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tpublic Object eGet(int featureID, boolean resolve, boolean coreType) {\n\t\tswitch (featureID) {\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__MAX_PERMISSION:\n\t\t\t\treturn getMaxPermission();\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__MAX_ACTIVE_ROLE:\n\t\t\t\treturn getMaxActiveRole();\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__MAX_ROLE:\n\t\t\t\treturn getMaxRole();\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__BUSINESS_TASK_LIST:\n\t\t\t\treturn getBusinessTaskList();\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__BOUNDED_PERMISSIONS:\n\t\t\t\treturn getBoundedPermissions();\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__CURRENT_T:\n\t\t\t\tif (resolve) return getCurrentT();\n\t\t\t\treturn basicGetCurrentT();\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__CURRENT_DAY:\n\t\t\t\tif (resolve) return getCurrentDay();\n\t\t\t\treturn basicGetCurrentDay();\n\t\t}\n\t\treturn super.eGet(featureID, resolve, coreType);\n\t}"} {"path":"downloaded/RBACUtilityImpl.java","method_name":"eSet","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@SuppressWarnings(\"unchecked\")\n\t@Override\n\tpublic void eSet(int featureID, Object newValue) {\n\t\tswitch (featureID) {\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__MAX_PERMISSION:\n\t\t\t\tsetMaxPermission((Integer)newValue);\n\t\t\t\treturn;\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__MAX_ACTIVE_ROLE:\n\t\t\t\tsetMaxActiveRole((Integer)newValue);\n\t\t\t\treturn;\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__MAX_ROLE:\n\t\t\t\tsetMaxRole((Integer)newValue);\n\t\t\t\treturn;\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__BUSINESS_TASK_LIST:\n\t\t\t\tgetBusinessTaskList().clear();\n\t\t\t\tgetBusinessTaskList().addAll((Collection<? extends Operation>)newValue);\n\t\t\t\treturn;\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__BOUNDED_PERMISSIONS:\n\t\t\t\tgetBoundedPermissions().clear();\n\t\t\t\tgetBoundedPermissions().addAll((Collection<? extends Permission>)newValue);\n\t\t\t\treturn;\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__CURRENT_T:\n\t\t\t\tsetCurrentT((TimePoint)newValue);\n\t\t\t\treturn;\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__CURRENT_DAY:\n\t\t\t\tsetCurrentDay((RelativeTimePoint)newValue);\n\t\t\t\treturn;\n\t\t}\n\t\tsuper.eSet(featureID, newValue);\n\t}"} {"path":"downloaded/RBACUtilityImpl.java","method_name":"eUnset","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tpublic void eUnset(int featureID) {\n\t\tswitch (featureID) {\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__MAX_PERMISSION:\n\t\t\t\tsetMaxPermission(MAX_PERMISSION_EDEFAULT);\n\t\t\t\treturn;\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__MAX_ACTIVE_ROLE:\n\t\t\t\tsetMaxActiveRole(MAX_ACTIVE_ROLE_EDEFAULT);\n\t\t\t\treturn;\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__MAX_ROLE:\n\t\t\t\tsetMaxRole(MAX_ROLE_EDEFAULT);\n\t\t\t\treturn;\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__BUSINESS_TASK_LIST:\n\t\t\t\tgetBusinessTaskList().clear();\n\t\t\t\treturn;\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__BOUNDED_PERMISSIONS:\n\t\t\t\tgetBoundedPermissions().clear();\n\t\t\t\treturn;\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__CURRENT_T:\n\t\t\t\tsetCurrentT((TimePoint)null);\n\t\t\t\treturn;\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__CURRENT_DAY:\n\t\t\t\tsetCurrentDay((RelativeTimePoint)null);\n\t\t\t\treturn;\n\t\t}\n\t\tsuper.eUnset(featureID);\n\t}"} {"path":"downloaded/RBACUtilityImpl.java","method_name":"eIsSet","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tpublic boolean eIsSet(int featureID) {\n\t\tswitch (featureID) {\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__MAX_PERMISSION:\n\t\t\t\treturn maxPermission != MAX_PERMISSION_EDEFAULT;\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__MAX_ACTIVE_ROLE:\n\t\t\t\treturn maxActiveRole != MAX_ACTIVE_ROLE_EDEFAULT;\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__MAX_ROLE:\n\t\t\t\treturn maxRole != MAX_ROLE_EDEFAULT;\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__BUSINESS_TASK_LIST:\n\t\t\t\treturn businessTaskList != null && !businessTaskList.isEmpty();\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__BOUNDED_PERMISSIONS:\n\t\t\t\treturn boundedPermissions != null && !boundedPermissions.isEmpty();\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__CURRENT_T:\n\t\t\t\treturn currentT != null;\n\t\t\tcase GemRBACPackage.RBAC_UTILITY__CURRENT_DAY:\n\t\t\t\treturn currentDay != null;\n\t\t}\n\t\treturn super.eIsSet(featureID);\n\t}"} {"path":"downloaded/RBACUtilityImpl.java","method_name":"eInvoke","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tpublic Object eInvoke(int operationID, EList<?> arguments) throws InvocationTargetException {\n\t\tswitch (operationID) {\n\t\t\tcase GemRBACPackage.RBAC_UTILITY___GET_BOUND_PERMISSION:\n\t\t\t\treturn getBoundPermission();\n\t\t\tcase GemRBACPackage.RBAC_UTILITY___GET_CURRENT_DATE:\n\t\t\t\treturn getCurrentDate();\n\t\t\tcase GemRBACPackage.RBAC_UTILITY___GET_CURRENT_TIME:\n\t\t\t\treturn getCurrentTime();\n\t\t\tcase GemRBACPackage.RBAC_UTILITY___GET_DAY_OF_WEEK:\n\t\t\t\treturn getDayOfWeek();\n\t\t\tcase GemRBACPackage.RBAC_UTILITY___GET_CUMULATIVE_ACTIVE_DURATION__ROLE_USER_TIMEUNITTYPE:\n\t\t\t\treturn getCumulativeActiveDuration((Role)arguments.get(0), (User)arguments.get(1), (TimeUnitType)arguments.get(2));\n\t\t\tcase GemRBACPackage.RBAC_UTILITY___GET_ACTIVE_DURATION__ROLE_TIMEUNITTYPE:\n\t\t\t\treturn getActiveDuration((Role)arguments.get(0), (TimeUnitType)arguments.get(1));\n\t\t}\n\t\treturn super.eInvoke(operationID, arguments);\n\t}"} {"path":"downloaded/RBACUtilityImpl.java","method_name":"toString","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tpublic String toString() {\n\t\tif (eIsProxy()) return super.toString();\n\n\t\tStringBuffer result = new StringBuffer(super.toString());\n\t\tresult.append(\" (maxPermission: \");\n\t\tresult.append(maxPermission);\n\t\tresult.append(\", maxActiveRole: \");\n\t\tresult.append(maxActiveRole);\n\t\tresult.append(\", maxRole: \");\n\t\tresult.append(maxRole);\n\t\tresult.append(')');\n\t\treturn result.toString();\n\t}"} {"path":"downloaded/SearchWrapper.java","method_name":"getSearchInfo","content":"/**\n\t * \n\t */\npublic String getSearchInfo() {\n\t\treturn searchInfo;\n\t}"} {"path":"downloaded/DataFlow.java","method_name":"methodDataflow","content":"/**\n     * Run the {@code transfer} dataflow analysis over the method or lambda which is the leaf of the\n     * {@code methodPath}.\n     *\n     * <p>For caching, we make the following assumptions:\n     * - if two paths to methods are {@code equal}, their control flow graph is the same.\n     * - if two transfer functions are {@code equal}, and are run over the same control flow graph,\n     *   the analysis result is the same.\n     * - for all contexts, the analysis result is the same.\n     */\nprivate <A extends AbstractValue<A>, S extends Store<S>, T extends TransferFunction<A, S>>\n    Result<A, S, T> methodDataflow(TreePath methodPath, Context context, T transfer) {\n        final ProcessingEnvironment env = JavacProcessingEnvironment.instance(context);\n        final ControlFlowGraph cfg = cfgCache.getUnchecked(CfgParams.create(methodPath, env));\n        final AnalysisParams aparams = AnalysisParams.create(transfer, cfg, env);\n        @SuppressWarnings(\"unchecked\")\n        final Analysis<A, S, T> analysis = (Analysis<A, S, T>) analysisCache.getUnchecked(aparams);\n\n        return new Result<A, S, T>() {\n            @Override\n            public Analysis<A, S, T> getAnalysis() {\n                return analysis;\n            }\n\n            @Override\n            public ControlFlowGraph getControlFlowGraph() {\n                return cfg;\n            }\n        };\n    }"} {"path":"downloaded/DataFlow.java","method_name":"expressionDataflow","content":"/**\n     *\n     * Run the {@code transfer} dataflow analysis to compute the abstract value of the expression\n     * which is the leaf of {@code exprPath}.\n     * @param exprPath expression\n     * @param context Javac context\n     * @param transfer transfer functions\n     * @param <A> values in abstraction\n     * @param <S> store type\n     * @param <T> transfer function type\n     * @return dataflow value for expression\n     */\n@Nullable\n    public <A extends AbstractValue<A>, S extends Store<S>,\n            T extends TransferFunction<A, S>> A\n    expressionDataflow(TreePath exprPath, Context context, T transfer) {\n        final Tree leaf = exprPath.getLeaf();\n        Preconditions.checkArgument(\n                leaf instanceof ExpressionTree,\n                \"Leaf of exprPath must be of type ExpressionTree, but was %s\",\n                leaf.getClass().getName());\n\n        final ExpressionTree expr = (ExpressionTree) leaf;\n        final TreePath enclosingMethodPath = NullabilityUtil.findEnclosingMethodOrLambda(exprPath);\n        if (enclosingMethodPath == null) {\n            // This can happen in field initialization.\n            // Currently not supported because it only happens in ~2% of cases.\n            return null;\n        }\n\n        final Tree method = enclosingMethodPath.getLeaf();\n        if (method instanceof MethodTree && ((MethodTree) method).getBody() == null) {\n            // expressions can occur in abstract methods, for example {@code Map.Entry} in:\n            //\n            //   abstract Set<Map.Entry<K, V>> entries();\n            return null;\n        }\n        // Calling getValue() on the AnalysisResult (as opposed to calling it on the Analysis itself)\n        // ensures we get the result for expr\n        // *before* any unboxing operations (like invoking intValue() on an Integer).  This is important,\n        // e.g., for actually checking that the unboxing operation is legal.\n        return methodDataflow(enclosingMethodPath, context, transfer).getAnalysis().getResult().getValue(expr);\n    }"} {"path":"downloaded/DataFlow.java","method_name":"finalResultForMethod","content":"/**\n     *\n     * @param methodPath path to method\n     * @param context Javac context\n     * @param transfer transfer functions\n     * @param <A> values in abstraction\n     * @param <S> store type\n     * @param <T> transfer function type\n     * @return dataflow result at exit of method\n     */\npublic <A extends AbstractValue<A>, S extends Store<S>,\n            T extends TransferFunction<A, S>> S\n    finalResultForMethod(TreePath methodPath, Context context, T transfer) {\n        final Tree leaf = methodPath.getLeaf();\n        Preconditions.checkArgument(\n                leaf instanceof MethodTree,\n                \"Leaf of exprPath must be of type ExpressionTree, but was %s\",\n                leaf.getClass().getName());\n\n        return methodDataflow(methodPath, context, transfer).getAnalysis().getRegularExitStore();\n    }"} {"path":"downloaded/GameSession.java","method_name":"getPlayerCount","content":"/**\n\t * @return The total number of clients on this game session\n\t */\npublic int getPlayerCount(){\n\t\treturn connectedClientSockets.size();\n\t}"} {"path":"downloaded/GameSession.java","method_name":"startGame","content":"/**\n\t * Contains the main game logic.\n\t * Once this method is called, no more clients can be added to the session\n\t * @param rounds - the number of times players are sent a challenge/word\n\t * @return the results of the game \n\t */\npublic Vector<String[]> startGame(int rounds){\n\t\tSystem.out.println(\"Game started!\");\n\t\t\n\t\t//signal all connected clients that game has started\n\t\tbroadCastMessage(\"@startGame\"); \n\t\t\n\t\t//initialize the game data results\n\t\tVector<String[]> resultsData = new Vector<String[]>();\n\t\t\n\t\t/*\n\t\t * the number of word challenges/rounds\n\t\t * TODO: this could be defined by the game host \n\t\t */\n\t\twhile(rounds > 0){\n\t\t\tString word = gameServer.getAword();\n\n\t\t\t//get a random word (results does not contain)\n\t\t\tword = gameServer.getAword(); //TODO reduce chances of repeated words per game\n\t\t\t\n\t\t\t//the first string in the round result is the received word from teh server\n\t\t\tString [] results = new String [clientListeners.size()+1];\n\t\t\tresults[0] = word; \n\t\t\t\n\t\t\tbroadCastMessage(word);\n\t\t\t\n\t\t\ttry {\n\t\t\t\tThread.sleep(timeOut);  //timer or wait for clients to reply their entries\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t\t/*Iterate through listeners collection and store answers in resultsMap*/\n\t\t\tfor(int i=0;i<clientListeners.size();i++){\n\t\t\t\tresults[i+1] = clientListeners.get(i).getAnswer(); //populate the collection of answers from all clients\n\t\t\t}\n\t\t\t\n\t\t\t//store result data\n\t\t\tresultsData.add(results);\n\t\t\t\n\t\t\trounds--;\n\t\t}\n\t\treturn resultsData;\n\t}"} {"path":"downloaded/GameSession.java","method_name":"doWork","content":"/**\n\t * This method will only be called when starting a game session \n\t * @param socket : the socket of the game's host \n\t */\npublic void doWork(Socket socket) {\n\t\t//add this session to the server's list of active sessions\n\t\tgameServer.addToMap(sessionID, this);\n\t\t\n\t\tjoinGame(socket);//add the host to the session\n\t\t\n\t\twhile(connectedClientSockets.size() < MIN_PLAYERS){\n\t\t\tsynchronized (joinGameLock) {\n\t\t\t\tif(connectedClientSockets.size()==0){\n\t\t\t\t\t/*\n\t\t\t\t\t * there must be at least one connected client (usually the host)\n\t\t\t\t\t * Cancel game session if it is empty  \n\t\t\t\t\t */\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t//wait for join game to signal that there are enough players in the session\n\t\t\t\t\ttry {\n\t\t\t\t\t\tjoinGameLock.wait();\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t//players are ready, now the start game;\n\t\tVector<String []>  gameResults = startGame(2); \n\t\tSystem.out.println(\"GAME OVER\\n\");\n\t\t\t\n\t\tfor(String [] result : gameResults){\n\t\t\tbufferManager.putFullBuffer(result); //store the results in the word DB\n//\t\t\tfor(int i=0;i<result.length;i++){\n//\t\t\t\tSystem.out.print(result[i] + \",\");\n//\t\t\t}\n//\t\t\tSystem.out.println(\"\\n\");\n\t\t}\n\t\t\n\t\tendSession();\n\t}"} {"path":"downloaded/GameSession.java","method_name":"getAnswer","content":"/**\n\t * returns a null string if no answer have been submitted by the client\n\t * or returns the most recent entry by the the client \n\t * @return\n\t */\npublic String getAnswer(){\n\t\tString result = new String(answer);\n\t\tanswer = \"\"; //reset answer after every read\n\t\treturn result;\n\t}"} {"path":"downloaded/GameSession.java","method_name":"listenForClientResponse","content":"/**\n\t * Listens for answers from clients \n\t * new answers will overwrite the answer variable. Only 1 answer per question\n\t * Returns false if client has been disconnected/closed \n\t */\npublic boolean listenForClientResponse(){\n\t\t\n\t\ttry {\n\t\t\t//wait for answer from client\n\t\t\tanswer = inFromClient.readLine(); //blocking read\n\t\t\tif(answer == null){\n\t\t\t\treturn false; //the client has been disconnected. Kill this thread \n\t\t\t}\n\t\t\treturn true;\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn false; \t\t\n\t}"} {"path":"downloaded/JsonKit.java","method_name":" static ","content":"/**\n     * json 字符串反序列化\n     * @param json\n     * @param clazz\n     * @param <T>\n     * @\nn\n     */\n    public static <T> T fromJson(String json, Class<? extends Record> clazz) {\n        // TODO 目前仅适用于 jfinal Record 对象的反序列换, 若需要支持更多类型尚需完善\n        try {\n            JSONObject jo = JSON.parseObject(json);\n            Record record = null;\n            try {\n                record = clazz.newInstance();\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n            Set<String> set = jo.keySet();\n            for(String key : set) {\n                Object type = jo.get(key);\n\n                if (type instanceof JSONArray) {\n                    record.set(key, arrayToJson(jo.getJSONArray(key)));\n                    continue;\n                }\n                if (type instanceof JSONObject) {\n                    record.set(key, objectToJson(jo.getJSONObject(key)));\n                    continue;\n                }\n                if (type instanceof String) {\n                    record.set(key, jo.getString(key));\n                    continue;\n                }\n                if (type instanceof Short) {\n                    record.set(key, jo.getShort(key));\n                    continue;\n                }\n                if (type instanceof Integer) {\n                    record.set(key, jo.getInteger(key));\n                    continue;\n                }\n                if (type instanceof Long) {\n                    record.set(key, jo.getLong(key));\n                    continue;\n                }\n                if (type instanceof Float) {\n                    record.set(key, jo.getFloat(key));\n                    continue;\n                }\n                if (type instanceof Double) {\n                    record.set(key, jo.getDouble(key));\n                    continue;\n                }\n                if (type instanceof BigDecimal) {\n                    record.set(key, jo.getBigDecimal(key));\n                    continue;\n                }\n                if (type instanceof Date) {\n                    record.set(key, jo.getDate(key));\n                    continue;\n                }\n                if (type instanceof Timestamp) {\n                    record.set(key, jo.getTimestamp(key));\n                    continue;\n                }\n                if (type instanceof Boolean) {\n                    record.set(key, jo.getBoolean(key));\n                    continue;\n                }\n                if (type instanceof Byte) {\n                    record.set(key, jo.getByte(key));\n                    continue;\n                }\n                if (type instanceof java.sql.Date) {\n                    record.set(key, jo.getSqlDate(key));\n                    break;\n                }\n                record.set(key, jo.get(key));\n            }\n            return (T)record;\n        } catch (JSONException e) {\n            log.error(\"JSON 数据格式错误, 转换失败\", e);\n        } catch (Excepti"} {"path":"downloaded/InterestRate.java","method_name":"todaysRate","content":"/**\n\t * @return The current (daily) interest rate\n\t */\npublic double todaysRate() {\n\t\trandomDelay(1.0, 2.0);\n\n\t\tLocalDate today = LocalDate.now();\n\n\t\tint seed = today.getDayOfMonth() + today.getMonthValue() + today.getYear();\n\n\t\treturn new Random(1000 * seed).nextDouble() * 6.0 + 3.0;\n\t}"} {"path":"downloaded/InterestRate.java","method_name":"i","content":"/**\n\t * @return The Singleton instance\n\t */\npublic static InterestRate i() {\n\t\tif (instance == null)\n\t\t\tinstance = new InterestRate();\n\n\t\treturn instance;\n\t}"} {"path":"downloaded/JavaSubmissionExtractor.java","method_name":"isSourceFile","content":"/**\n\t * Add a regex pattern specifying source file(s) to exclude.\n\t * \n\t * @param pattern\n\t *            exclusion regex pattern\n\t */\n@Override\n\tprotected boolean isSourceFile(String fileName) {\n\t\treturn fileName.endsWith(\".java\");\n\t}"} {"path":"downloaded/JavaSubmissionExtractor.java","method_name":"pruneSourceFileList","content":"/**\n\t * Add a regex pattern specifying source file(s) to exclude.\n\t * \n\t * @param pattern\n\t *            exclusion regex pattern\n\t */\n@Override\n\tprotected void pruneSourceFileList(List<String> sourceFileList) {\n\t\t// Apply exclusion patterns, if any\n\t\tif (excludedSourceFileList.size() > 0) {\n\t\t\touter: for (Iterator<String> i = sourceFileList.iterator(); i\n\t\t\t\t\t.hasNext();) {\n\t\t\t\tString sourceFile = i.next();\n\t\t\t\tfor (Iterator<Pattern> j = excludedSourceFileList.iterator(); j\n\t\t\t\t\t\t.hasNext();) {\n\t\t\t\t\tPattern regex = j.next();\n\t\t\t\t\tMatcher m = regex.matcher(sourceFile);\n\t\t\t\t\tif (m.matches()) {\n\t\t\t\t\t\ti.remove();\n\t\t\t\t\t\tcontinue outer;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (classpathFile == null)\n\t\t\treturn;\n\n\t\t// The submission contained a .classpath file.\n\t\t// Try to read it so we can find out the sourcepath\n\t\t// and remove all entries that aren't on the sourcepath\n\t\t// from the source files list.\n\n\t\ttry {\n\t\t\tList<String> sourcePath = new LinkedList<String>();\n\t\t\tInputStream in = null;\n\n\t\t\ttry {\n\t\t\t\tin = new BufferedInputStream(new FileInputStream(new File(\n\t\t\t\t\t\tgetDirectory(), classpathFile)));\n\n\t\t\t\tSAXReader reader = new SAXReader();\n\t\t\t\tDocument document = reader.read(in);\n\n\t\t\t\tfor (Iterator<?> i = document.selectNodes(SRC_ENTRY_XPATH)\n\t\t\t\t\t\t.iterator(); i.hasNext();) {\n\t\t\t\t\tNode node = (Node) i.next();\n\t\t\t\t\tString srcPathEntry = node.valueOf(\"@path\");\n\t\t\t\t\tif (!srcPathEntry.equals(\"\") && !srcPathEntry.endsWith(\"/\"))\n\t\t\t\t\t\tsrcPathEntry += \"/\";\n\t\t\t\t\tsourcePath.add(srcPathEntry);\n\t\t\t\t}\n\n\t\t\t\tif (!allSourcePathsExist(sourcePath))\n\t\t\t\t\treturn;\n\n\t\t\t\t// Remove all files that don't begin with a valid source path\n\t\t\t\t// element from the source file list\n\t\t\t\tfor (Iterator<String> i = sourceFileList.iterator(); i\n\t\t\t\t\t\t.hasNext();) {\n\t\t\t\t\tString sourceFile = i.next();\n\t\t\t\t\tif (!isOnSourcePath(sourceFile, sourcePath)) {\n\t\t\t\t\t\t// Source file wasn't on the source path\n\t\t\t\t\t\ti.remove();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (in != null)\n\t\t\t\t\t\tin.close();\n\t\t\t\t} catch (IOException ignore) {\n\t\t\t\t\t// Ignore\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tgetLog().warn(\n\t\t\t\t\t\"Could not read .classpath file in submission zipfile\", e);\n\t\t} catch (DocumentException e) {\n\t\t\tgetLog().warn(\n\t\t\t\t\t\"Could not read .classpath file in submission zipfile\", e);\n\t\t}\n\n\t}"} {"path":"downloaded/JavaSubmissionExtractor.java","method_name":"allSourcePathsExist","content":"/**\n\t * Ensures that all of the source paths exist. Strives to handle web-based\n\t * submissions better, specifically when students submit their source\n\t * outside of a \"src\" directory but include an Eclipse .classpath file that\n\t * references the non-existent source file.\n\t * \n\t * @param sourcePath\n\t *            list of the source paths\n\t * @return true if all of source paths in the given list exist; false if at\n\t *         least one of the source paths does not exist\n\t */\nprivate boolean allSourcePathsExist(List<String> sourcePath) {\n\t\tfor (Iterator<String> ii = sourcePath.iterator(); ii.hasNext();) {\n\t\t\tString dirName = ii.next();\n\t\t\tFile dir = new File(getDirectory().getAbsolutePath() + \"/\"\n\t\t\t\t\t+ dirName);\n\t\t\tif (!dir.exists())\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}"} {"path":"downloaded/ServiceConfiguration.java","method_name":"getMessagesPath","content":"/**\n\t * \n\t */\npublic String getMessagesPath() {\n\t\treturn messagesPath;\n\t}"} {"path":"downloaded/JavaSubmissionExtractor.java","method_name":"isOnSourcePath","content":"/**\n\t * Determine whether given source file is on the source path.\n\t * \n\t * @param sourceFile\n\t *            the source file\n\t * @param sourcePath\n\t *            the source path\n\t * @return true if source file is on the source path, false otherwise\n\t */\nprivate boolean isOnSourcePath(String sourceFile, List<String> sourcePath) {\n\t\tfor (Iterator<String> j = sourcePath.iterator(); j.hasNext();) {\n\t\t\tString srcPathEntry = j.next();\n\t\t\tif (sourceFile.startsWith(srcPathEntry))\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}"} {"path":"downloaded/ServiceConfiguration.java","method_name":"assertMessage","content":"/**\n\t * \n\t */\npublic boolean assertMessage(String response){\n\t\tif(checkResponse)\n\t\t\treturn responseMessage.equals(response);\n\t\treturn false;\n\t}"} {"path":"downloaded/ServiceConfiguration.java","method_name":"getServiceName","content":"/**\n\t * \n\t */\npublic String getServiceName() {\n\t\treturn ServiceName;\n\t}"} {"path":"downloaded/ServiceConfiguration.java","method_name":"getRequestMessage","content":"/**\n\t * \n\t */\npublic String getRequestMessage() {\n\t\ttry {\n\t\t\treturn readFileAsString(getMessagesPath()+ServiceConfiguration.SEPARATOR+requestMessage);\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn \"\";\n\t}"} {"path":"downloaded/ServiceConfiguration.java","method_name":"getResponseMessage","content":"/**\n\t * \n\t */\npublic String getResponseMessage() {\n\t\ttry {\n\t\t\treturn readFileAsString(getMessagesPath()+ServiceConfiguration.SEPARATOR+responseMessage);\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn \"\";\n\t}"} {"path":"downloaded/ServiceConfiguration.java","method_name":"isCheckResponse","content":"/**\n\t * \n\t */\npublic boolean isCheckResponse() {\n\t\treturn checkResponse;\n\t}"} {"path":"downloaded/ServiceConfiguration.java","method_name":"readFileAsString","content":"/**\n\t * \n\t */\nprivate String readFileAsString(String string) throws IOException {\n\t\tLineNumberReader in = new LineNumberReader(new FileReader(string));\n        StringBuffer bf=new StringBuffer();\n\t\tString inputLine;\n\t\twhile ((inputLine = in.readLine()) != null) \n\t\tbf.append(inputLine);\n\t\treturn bf.toString();\n\t}"} {"path":"downloaded/JavaSubmissionExtractor.java","method_name":"transformFileName","content":"/**\n\t * Determine whether given source file is on the source path.\n\t * \n\t * @param sourceFile\n\t *            the source file\n\t * @param sourcePath\n\t *            the source path\n\t * @return true if source file is on the source path, false otherwise\n\t */\n@Override\n\tprotected String transformFileName(String entryName) {\n\t\tString filename = super.transformFileName(entryName);\n\t\t// If a source file isn't in a src directory, put it into a src\n\t\t// directory!\n\t\tif (filename.endsWith(\".java\") && !filename.startsWith(\"src\"))\n\t\t\tfilename = \"src/\" + filename;\n\t\treturn filename;\n\t}"} {"path":"downloaded/JavaSubmissionExtractor.java","method_name":"shouldExtract","content":"/**\n\t * Determine whether given source file is on the source path.\n\t * \n\t * @param sourceFile\n\t *            the source file\n\t * @param sourcePath\n\t *            the source path\n\t * @return true if source file is on the source path, false otherwise\n\t */\n@Override\n\tprotected boolean shouldExtract(String entryName) {\n\t\tif (entryName.contains(\".clover\"))\n\t\t\treturn false;\n\t\treturn super.shouldExtract(entryName);\n\t}"} {"path":"downloaded/ExpPrepareService.java","method_name":" List<ExpSt","content":"/**\n     * chenxy\n     * 根据expCode 查询相关�\n的信息\n     */\n    @Path(\"exp-spec\")\n    @GET\n    public List<ExpStockRecord> findExpSpec(@QueryParam(\"expCode\") String expCode, @QueryParam(\"hospitalId\") String hospitalId) {\n        String sql = \" SELECT distinct b.EXP_NAME,\\n\" +\n                \"        b.EXP_FORM,\\n\" +\n                \"        c.EXP_CODE,\\n\" +\n                \"        c.EXP_SPEC,\\n\" +\n                \"        c.units,\\n\" +\n                \"        c.min_spec,\\n\" +\n                \"        c.min_UNITS,\\n\" +\n                \"        c.FIRM_ID,\\n\" +\n                \"        c.TRADE_PRICE,\\n\" +\n                \"        c.TRADE_PRICE purchase_Price,\\n\" +\n                \"        c.retail_price,\\n\" +\n                \"        c.material_code,\\n\" +\n                \"        c.Register_no,\\n\" +\n                \"        c.Permit_no,\\n\" +\n                \"        c.amount_per_package\\n\" +\n                \"          \\n\" +\n                \"    FROM\\n\" +\n                \"        exp_dict b,\\n\" +\n                \"        exp_price_list c\\n\" +\n                \"       \\n\" +\n                \"    WHERE\\n\" +\n                \"        b.EXP_CODE = c.EXP_CODE     \\n\" +\n                \"        AND b.exp_spec = c.min_spec     \\n\" +\n                \"        AND c.start_date <= sysdate     \\n\" +\n                \"       \\n\" +\n                \"        AND (\\n\" +\n                \"            c.stop_date IS NULL \\n\" +\n                \"            OR c.stop_date > sysdate\\n\" +\n                \"        )     \\n\" +\n                \"        AND b.EXP_CODE = '\" + expCode + \"'     \\n\" +\n                \"   \\n\" +\n                \"        and c.hospital_id = '\" + hospitalId + \"'   \";\n        return expPrepareMasterFacade.createNativeQuery(sql, new ArrayList<Object>(), ExpSto"} {"path":"downloaded/ExpPrepareService.java","method_name":"-firm-name\")\n ","content":"/**\n     * chenxy\n     * 根据expCode 查询相关�\naram supplerId\n     * @return\n     */\n    @GET\n    @Path(\"find-by-firm-name\")\n    public List<ExpNameCaVo> findByFirmName(@QueryParam(\"q\") String q, @QueryParam(\"supplierId\") String supplerId) {\n        return expNameDictFacade."} {"path":"downloaded/ExpPrepareService.java","method_name":"ones) {\n","content":"/**\n     * chenxy\n     * 根据expCode 查询相关�\nNameBySupplier(q, supplerId);\n    }\n\n\n    @POST\n    @Path(\"make-data\")\n//    public List<ExpPrepareDetail> makeData(@QueryParam(\"supplierId\") String supplierId, @QueryParam(\"expCodes\") String expCodes, @QueryParam(\"operator\") String operator, @QueryParam(\"amounts\") String amounts, @QueryParam(\"prices\") String priceStr,@QueryParam(\"packageSpecs\") String packageSpecs,@QueryParam(\"subStorage\") String subStorageId,@QueryParam(\"operators\") String operators,@QueryParam(\"phones\") String phones) {\n    public List<ExpPrepareDetail> makeData(List<PrepareVo> prepareVo) {\n//        List<ExpPrepareDetail> list = new ArrayList<ExpPrepareDetail>();\n//        String expCodes=prepareVo.getExpCodes();\n//        String phones=prepareVo.getPhones();\n//        String operators=prepareVo.getOperators();\n//        String amounts=prepareVo.getAmounts();\n//        String priceStr=prepareVo.getPrices();\n//        String packageSpecs=prepareVo.getPackageSpecs();\n//        if (expCodes != null && !\"\".equals(expCodes)) {\n//            String[] phoneArr=phones.split(\",\");\n//            String[] operArr=operators.split(\",\");\n//            String[] amountArr = amounts.split(\",\");\n//            String[] expCodeArr = expCodes.split(\",\");\n//            String[] priceArr = priceStr.split(\",\");\n//            String[] packageSpecArr=packageSpecs.split(\",\");\n//            list=expPrepareMasterFacade.makeData(expCodeArr,prepareVo,amountArr,packageSpecArr,priceArr,phoneArr,operArr);\n//         }\n        return expPrep"} {"path":"downloaded/ExpPrepareService.java","method_name":"   @GET\n    @","content":"/**\n     * chenxy\n     * 根据expCode 查询相关�\n   /**\n     * 根据条形码获取高值耗材信息\n     * */\n    @GET\n    @Path(\"find-by-bar-code\")\n    public Map<String,Object> findByBarCode(@QueryParam("} {"path":"downloaded/ExpPrepareService.java","method_name":"@return\n  ","content":"/**\n     * chenxy\n     * 根据expCode 查询相关�\nCode\n      * @param operator\n     * @param patientId\n     * @return\n     */\n    @GET\n    @Path(\"prepare-fee\")\n    public Map<String,Object> prepareFee(@QueryParam(\"barCode\") String barCode,@QueryParam(\"operator\") String operator, @QueryParam(\"patientId\") String patientId,@QueryParam(\"hospitalId\") String hospitalId,@QueryParam(\"userDeptCode\") String userDeptCode) {\n        Map<String,Object> map=findByCode(barCode);\n        if((Boolean)map.get(\"success\")){\n            Map<String,Object> returnVal=new HashMap<String,Object>();\n            /**\n             * 入库操作   exp_import_master exp_import_detail\n             * 出库操作   exp_export_master exp_export_detail\n             * 库存表      exp_stock\n             * 子库房      exp_sub_storage_dict\n             * 回写数据    exp_prepare_detail\n             */\n            if (StringUtil.isNotBlank(barCode) && StringUtil.isNotBlank(operator)&& StringUtil.isNotBlank(patientId)) {\n                String masterId=this.expPrepareDetailFacade.findByExpBarCode(barCode);\n                ExpPrepareMaster expPrepareMaster=this.expPrepareMasterFacade.findById(masterId);\n                ExpSubStorageDict expSubStorageDict = this.expSubStorageDictFacade.findById(expPrepareMaster.getSubStorageId());\n                if(expSubStorageDict==null){\n                    returnVal.put(\"info\",\"barCode参数错误!\");\n                    return returnVal;\n                }\n                String documentNo = \"\";//入库单据号\n                String importNoPrefix = expSubStorageDict.getImportNoPrefix();//前缀\n                if (importNoPrefix.length() <= 4) {\n                    documentNo = importNoPrefix + \"000000\".substring((expSubStorageDict.getImportNoAva() + \"\").length()) + expSubStorageDict.getImportNoAva();\n                } else if (importNoPrefix.length() == 5) {\n                    documentNo = expSubStorageDict.getImportNoPrefix() + \"00000\".substring((expSubStorageDict.getImportNoAva() + \"\").length()) + expSubStorageDict.getImportNoAva();\n                } else if (importNoPrefix.length() == 6) {\n                    documentNo = expSubStorageDict.getImportNoPrefix() + \"0000\".substring((expSubStorageDict.getImportNoAva() + \"\").length()) + expSubStorageDict.getImportNoAva();\n                }\n                /**\n                 * 跟新 exp_sub_storage_dict.import_no_ava\n                 */\n\n                String documentNo2 = \"\";//出库单据号\n                String suffer2 = expSubStorageDict.getExportNoPrefix();//前缀\n                if (suffer2.length() <= 4) {\n                    documentNo2 = expSubStorageDict.getExportNoPrefix() + \"000000\".substring((expSubStorageDict.getExportNoAva() + \"\").length()) + expSubStorageDict.getExportNoAva();\n                } else if (suffer2.length() == 5) {\n                    documentNo2 = expSubStorageDict.getExportNoPrefix() + \"00000\".substring((expSubStorageDict.getExportNoAva() + \"\").length()) + expSubStorageDict.getExportNoAva();\n                } else if (suffer2.length() == 6) {\n                    documentNo2 = expSubStorageDict.getExportNoPrefix() + \"0000\".substring((expSubStorageDict.getExportNoAva() + \"\").length()) + expSubStorageDict.getExportNoAva();\n                }\n                 try {\n                    ExpPrepareVo expPrepareVo=this.expPrepareMasterFacade.prepareFee(expPrepareMaster,documentNo,documentNo2,operator,patientId,hospitalId,barCode,userDeptCode);\n                    returnVal.put(\"info\",expPrepareVo);\n                    if(expPrepareVo!=null){\n                        returnVal.put(\"success\",true);\n                    }else{\n                        returnVal.put(\"success\",false);\n                    }\n                } catch (Exception e) {\n                    returnVal.put(\"info\",\"参数错误！\");\n                    returnVal.put(\"success\",false);\n                    return returnVal;\n                }\n            }else{\n                returnVal.put"} {"path":"downloaded/ExpPrepareService.java","method_name":"nVal;\n        }","content":"/**\n     * chenxy\n     * 根据expCode 查询相关�\nrnVal.put(\"success\",false);\n            }\n            return returnVal;\n        }else{\n            return map;\n        }\n     }\n\n    /**\n     * 回滚操作\n     * @return\n     */\n    @GET\n    @Path(\"roll-back-prepare\")\n    public Map<String,Object> rollBackPrepare(@QueryParam(\"barCode\") String barCode){\n        Map<String,Object> retVal= null;\n        try {\n            retVal = this.expPrepareMasterFacade.rollBack(barCode);\n        } catch (Exception e) {\n            e.printStackTrace();\n            if(retVal==nu"} {"path":"downloaded/ExpPrepareService.java","method_name":"    }\n  ","content":"/**\n     * chenxy\n     * 根据expCode 查询相关�\nse);\n            retVal.put(\"info\",\"barCode 错误！\");\n        }\n        return retVal;\n    }\n\n\n    /**\n     *weishen\n     * @param dept\n     * @param supplerId\n     * @return\n     */\n    @GET\n    @Path(\"find-d"} {"path":"downloaded/ExpPrepareService.java","method_name":"ept,@QueryPar","content":"/**\n     * chenxy\n     * 根据expCode 查询相关�\n)\n    public  List<ExpPrepareVo> findList(@QueryParam(\"dept\") String dept,@QueryParam(\"supplierId\") String supplerId){\n        return expPrepareDetailFacade.list(dept,supplerId);\n    }\n\n    @GET\n    @Path(\"find-input-code-detail\")\n    p"} {"path":"downloaded/ExpPrepareService.java","method_name":"l(q);\n ","content":"/**\n     * chenxy\n     * 根据expCode 查询相关�\n expNameCaVos = expPrepareDetailFacade.listExpPrepareDetail(q);\n        return expNameCaVos;\n    }\n\n    /**\n     * chenxy\n     * @param id  exp_prepare_detail  主键\n     * @return\n     */\n    @"} {"path":"downloaded/ExpPrepareService.java","method_name":"blic Map<S","content":"/**\n     * chenxy\n     * 根据expCode 查询相关�\n   @Path(\"del-data\")\n    public Map<String,Object> delData(@QueryParam(\"id\") String id){\n         Map<String,Object> map=this.expPrepareDetailFacade.delData(id);\n         return map;\n    }\n\n    private Map<String,Object> findByCode(String barCode){\n        Map<String,Object> map=new HashMap<String,Object>();\n        List <ExpPrepareVo> list= expPrepareDetailFacade.findByBarCode(barCode);\n        if(list!=null&&list.size()>0){\n            if(list.get(0).getUseFlag().equals(\"未使用\")){\n                map.put(\"info\",list.get(0));\n                map.put(\"success\",true);\n            }else{\n                map.put(\"info\",\"物品已使用，此条码无效\");\n                map.put(\"success\",false);\n            }\n        }else{\n            if(barCode!=null&&!\"\".equals(barCode)){\n                map.put(\"info\",\"找�"} {"path":"downloaded/PointEvaluator.java","method_name":"lic Poin","content":"\n    \n    /**\n     * {@inheritDo\n   */\n    @Override\n    public Point evaluate(float fraction, Point startValue, Point endValue)\n    {\n        if(!isCircleAnimation)\n        {\n            float curX = startValue.getX() + fraction * (endValue.getX() - startValue.getX());\n            float curY = startValue.getY() + fraction * (endValue.getY() - startValue.getY());        \n            return new Point(curX, curY);\n        }\n        else\n        {\n            float centerX = centerPoint.getX();\n            float centerY = centerPoint.getY();\n            float x = (float) (centerX - (centerX - radius) * Math.cos(Math.PI * 2 * fraction));\n            float y = (float) (centerY - (centerX - radius) * Math.sin(Math.PI * 2 * fraction));\n            return new Point(x, y);\n        }\n    "} {"path":"downloaded/BaseCdcrDistributedZkTest.java","method_name":"assertNumDocs","content":"/**\n   * Assert the number of documents in a given collection\n   */\nprotected void assertNumDocs(int expectedNumDocs, String collection)\n  throws SolrServerException, IOException, InterruptedException {\n    CloudSolrClient client = createCloudClient(collection);\n    try {\n      int cnt = 30; // timeout after 15 seconds\n      AssertionError lastAssertionError = null;\n      while (cnt > 0) {\n        try {\n          assertEquals(expectedNumDocs, client.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n          return;\n        }\n        catch (AssertionError e) {\n          lastAssertionError = e;\n          cnt--;\n          Thread.sleep(500);\n        }\n      }\n      throw new AssertionError(\"Timeout while trying to assert number of documents @ \" + collection, lastAssertionError);\n    } finally {\n      client.close();\n    }\n  }"} {"path":"downloaded/BaseCdcrDistributedZkTest.java","method_name":"invokeCdcrAction","content":"/**\n   * Invokes a CDCR action on a given node.\n   */\nprotected NamedList invokeCdcrAction(CloudJettyRunner jetty, CdcrParams.CdcrAction action) throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.ACTION, action.toString());\n\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(CDCR_PATH);\n\n    return jetty.client.request(request);\n  }"} {"path":"downloaded/BaseCdcrDistributedZkTest.java","method_name":"createCollection","content":"/**\n   * Create a new collection through the Collection API. It enforces the use of one max shard per node.\n   * It will define the nodes to spread the new collection across by using the mapping {@link #collectionToNodeNames},\n   * to ensure that a node will not host more than one core (which will create problem when trying to restart servers).\n   */\nprivate CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                   String collectionName, int numShards, int replicationFactor,\n                                                   int maxShardsPerNode, SolrClient client, String createNodeSetStr)\n      throws SolrServerException, IOException {\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            NUM_SLICES, numShards,\n            REPLICATION_FACTOR, replicationFactor,\n            CREATE_NODE_SET, createNodeSetStr,\n            MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, \"conf1\");\n  }"} {"path":"downloaded/BaseCdcrDistributedZkTest.java","method_name":"createCollection","content":"/**\n   * Create a new collection through the Collection API. It enforces the use of one max shard per node.\n   * It will define the nodes to spread the new collection across by using the mapping {@link #collectionToNodeNames},\n   * to ensure that a node will not host more than one core (which will create problem when trying to restart servers).\n   */\nprivate CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName,\n                                                   Map<String, Object> collectionProps, SolrClient client,\n                                                   String confSetName)\n      throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if (entry.getValue() != null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(OverseerCollectionMessageHandler.NUM_SLICES);\n    if (numShards == null) {\n      String shardNames = (String) collectionProps.get(OverseerCollectionMessageHandler.SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames, ',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if (replicationFactor == null) {\n      replicationFactor = (Integer) OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    res.setResponse(client.request(request));\n    return res;\n  }"} {"path":"downloaded/BaseCdcrDistributedZkTest.java","method_name":"deleteCollection","content":"/**\n   * Delete a collection through the Collection API.\n   */\nprotected CollectionAdminResponse deleteCollection(String collectionName) throws Exception {\n    SolrClient client = createCloudClient(null);\n    CollectionAdminResponse res;\n\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.DELETE.toString());\n      params.set(\"name\", collectionName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      res = new CollectionAdminResponse();\n      res.setResponse(client.request(request));\n    } catch (Exception e) {\n      log.warn(\"Error while deleting the collection \" + collectionName, e);\n      return new CollectionAdminResponse();\n    } finally {\n      client.close();\n    }\n\n    return res;\n  }"} {"path":"downloaded/BaseCdcrDistributedZkTest.java","method_name":"startServers","content":"/**\n   * Creates and starts a given number of servers.\n   */\nprotected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jetty.start();\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }"} {"path":"downloaded/BaseCdcrDistributedZkTest.java","method_name":"createNewSolrServer","content":"/**\n   * Wrapper around a {@link org.apache.solr.client.solrj.embedded.JettySolrRunner} to map the jetty\n   * instance to various information of the cloud cluster, such as the collection and shard\n   * that is served by the jetty instance, the node name, core node name, url, etc.\n   */\nprotected static SolrClient createNewSolrServer(String baseUrl) {\n    try {\n      // setup the server...\n      HttpSolrClient s = getHttpSolrClient(baseUrl, DEFAULT_CONNECTION_TIMEOUT);\n      return s;\n    } catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }"} {"path":"downloaded/BaseCdcrDistributedZkTest.java","method_name":"waitForReplicationToComplete","content":"/**\n   * Wrapper around a {@link org.apache.solr.client.solrj.embedded.JettySolrRunner} to map the jetty\n   * instance to various information of the cloud cluster, such as the collection and shard\n   * that is served by the jetty instance, the node name, core node name, url, etc.\n   */\nprotected void waitForReplicationToComplete(String collectionName, String shardId) throws Exception {\n    int cnt = 15;\n    while (cnt > 0) {\n      log.info(\"Checking queue size @ {}:{}\", collectionName, shardId);\n      long size = this.getQueueSize(collectionName, shardId);\n      if (size == 0) { // if we received -1, it means that the log reader is not yet initialised, we should wait\n        return;\n      }\n      log.info(\"Waiting for replication to complete. Queue size: {} @ {}:{}\", size, collectionName, shardId);\n      cnt--;\n      Thread.sleep(1000); // wait a bit for the replication to complete\n    }\n    throw new RuntimeException(\"Timeout waiting for CDCR replication to complete @\" + collectionName + \":\"  + shardId);\n  }"} {"path":"downloaded/BaseCdcrDistributedZkTest.java","method_name":"getQueueSize","content":"/**\n   * Wrapper around a {@link org.apache.solr.client.solrj.embedded.JettySolrRunner} to map the jetty\n   * instance to various information of the cloud cluster, such as the collection and shard\n   * that is served by the jetty instance, the node name, core node name, url, etc.\n   */\nprotected long getQueueSize(String collectionName, String shardId) throws Exception {\n    NamedList rsp = this.invokeCdcrAction(shardToLeaderJetty.get(collectionName).get(shardId), CdcrParams.CdcrAction.QUEUES);\n    NamedList host = (NamedList) ((NamedList) rsp.get(CdcrParams.QUEUES)).getVal(0);\n    NamedList status = (NamedList) host.get(TARGET_COLLECTION);\n    return (Long) status.get(CdcrParams.QUEUE_SIZE);\n  }"} {"path":"downloaded/BaseCdcrDistributedZkTest.java","method_name":"collectInfo","content":"/**\n   * Wrapper around a {@link org.apache.solr.client.solrj.embedded.JettySolrRunner} to map the jetty\n   * instance to various information of the cloud cluster, such as the collection and shard\n   * that is served by the jetty instance, the node name, core node name, url, etc.\n   */\nprotected CollectionInfo collectInfo(String collection) throws Exception {\n    CollectionInfo info = new CollectionInfo(collection);\n    for (String shard : shardToJetty.get(collection).keySet()) {\n      List<CloudJettyRunner> jettyRunners = shardToJetty.get(collection).get(shard);\n      for (CloudJettyRunner jettyRunner : jettyRunners) {\n        for (SolrCore core : jettyRunner.jetty.getCoreContainer().getCores()) {\n          info.addCore(core, shard, shardToLeaderJetty.get(collection).containsValue(jettyRunner));\n        }\n      }\n    }\n\n    return info;\n  }"} {"path":"downloaded/BaseCdcrDistributedZkTest.java","method_name":"getShardToCoresMap","content":"/**\n     * @return Returns a map shard -> list of cores\n     */\nMap<String, List<CoreInfo>> getShardToCoresMap() {\n      Map<String, List<CoreInfo>> map = new HashMap<>();\n      for (CoreInfo info : coreInfos) {\n        List<CoreInfo> list = map.get(info.shard);\n        if (list == null) {\n          list = new ArrayList<>();\n          map.put(info.shard, list);\n        }\n        list.add(info);\n      }\n      return map;\n    }"} {"path":"downloaded/BaseCdcrDistributedZkTest.java","method_name":"getLeader","content":"/**\n     * @return Returns a map shard -> list of cores\n     */\nCoreInfo getLeader(String shard) {\n      List<CoreInfo> coreInfos = getShardToCoresMap().get(shard);\n      for (CoreInfo info : coreInfos) {\n        if (info.isLeader) {\n          return info;\n        }\n      }\n      assertTrue(String.format(Locale.ENGLISH, \"There is no leader for collection %s shard %s\", collection, shard), false);\n      return null;\n    }"} {"path":"downloaded/BaseCdcrDistributedZkTest.java","method_name":"getReplicas","content":"/**\n     * @return Returns a map shard -> list of cores\n     */\nList<CoreInfo> getReplicas(String shard) {\n      List<CoreInfo> coreInfos = getShardToCoresMap().get(shard);\n      coreInfos.remove(getLeader(shard));\n      return coreInfos;\n    }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"getOptions","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\n@java.lang.Deprecated\n  public java.util.List<io.kubernetes.client.openapi.models.V1PodDNSConfigOption> getOptions() {\n    return options != null ? build(options) : null;\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"buildOptions","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic java.util.List<io.kubernetes.client.openapi.models.V1PodDNSConfigOption> buildOptions() {\n    return options != null ? build(options) : null;\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"buildOption","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic io.kubernetes.client.openapi.models.V1PodDNSConfigOption buildOption(java.lang.Integer index) {\n    return this.options.get(index).build();\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"buildFirstOption","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic io.kubernetes.client.openapi.models.V1PodDNSConfigOption buildFirstOption() {\n    return this.options.get(0).build();\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"buildLastOption","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic io.kubernetes.client.openapi.models.V1PodDNSConfigOption buildLastOption() {\n    return this.options.get(options.size() - 1).build();\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"buildMatchingOption","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic io.kubernetes.client.openapi.models.V1PodDNSConfigOption buildMatchingOption(java.util.function.Predicate<io.kubernetes.client.openapi.models.V1PodDNSConfigOptionBuilder> predicate) {\n    for (io.kubernetes.client.openapi.models.V1PodDNSConfigOptionBuilder item: options) { if(predicate.test(item)){ return item.build();} } return null;\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"hasMatchingOption","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic java.lang.Boolean hasMatchingOption(java.util.function.Predicate<io.kubernetes.client.openapi.models.V1PodDNSConfigOptionBuilder> predicate) {\n    for (io.kubernetes.client.openapi.models.V1PodDNSConfigOptionBuilder item: options) { if(predicate.test(item)){ return true;} } return false;\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"withOptions","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic A withOptions(java.util.List<io.kubernetes.client.openapi.models.V1PodDNSConfigOption> options) {\n    if (this.options != null) { _visitables.get(\"options\").removeAll(this.options);}\n    if (options != null) {this.options = new java.util.ArrayList(); for (io.kubernetes.client.openapi.models.V1PodDNSConfigOption item : options){this.addToOptions(item);}} else { this.options = null;} return (A) this;\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"withOptions","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic A withOptions(io.kubernetes.client.openapi.models.V1PodDNSConfigOption... options) {\n    if (this.options != null) {this.options.clear();}\n    if (options != null) {for (io.kubernetes.client.openapi.models.V1PodDNSConfigOption item :options){ this.addToOptions(item);}} return (A) this;\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"hasOptions","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic java.lang.Boolean hasOptions() {\n    return options != null && !options.isEmpty();\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"addNewOption","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic io.kubernetes.client.openapi.models.V1PodDNSConfigFluent.OptionsNested<A> addNewOption() {\n    return new io.kubernetes.client.openapi.models.V1PodDNSConfigFluentImpl.OptionsNestedImpl();\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"addNewOptionLike","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic io.kubernetes.client.openapi.models.V1PodDNSConfigFluent.OptionsNested<A> addNewOptionLike(io.kubernetes.client.openapi.models.V1PodDNSConfigOption item) {\n    return new io.kubernetes.client.openapi.models.V1PodDNSConfigFluentImpl.OptionsNestedImpl(-1, item);\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"setNewOptionLike","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic io.kubernetes.client.openapi.models.V1PodDNSConfigFluent.OptionsNested<A> setNewOptionLike(java.lang.Integer index,io.kubernetes.client.openapi.models.V1PodDNSConfigOption item) {\n    return new io.kubernetes.client.openapi.models.V1PodDNSConfigFluentImpl.OptionsNestedImpl(index, item);\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"editOption","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic io.kubernetes.client.openapi.models.V1PodDNSConfigFluent.OptionsNested<A> editOption(java.lang.Integer index) {\n    if (options.size() <= index) throw new RuntimeException(\"Can't edit options. Index exceeds size.\");\n    return setNewOptionLike(index, buildOption(index));\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"editFirstOption","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic io.kubernetes.client.openapi.models.V1PodDNSConfigFluent.OptionsNested<A> editFirstOption() {\n    if (options.size() == 0) throw new RuntimeException(\"Can't edit first options. The list is empty.\");\n    return setNewOptionLike(0, buildOption(0));\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"editLastOption","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic io.kubernetes.client.openapi.models.V1PodDNSConfigFluent.OptionsNested<A> editLastOption() {\n    int index = options.size() - 1;\n    if (index < 0) throw new RuntimeException(\"Can't edit last options. The list is empty.\");\n    return setNewOptionLike(index, buildOption(index));\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"editMatchingOption","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic io.kubernetes.client.openapi.models.V1PodDNSConfigFluent.OptionsNested<A> editMatchingOption(java.util.function.Predicate<io.kubernetes.client.openapi.models.V1PodDNSConfigOptionBuilder> predicate) {\n    int index = -1;\n    for (int i=0;i<options.size();i++) { \n    if (predicate.test(options.get(i))) {index = i; break;}\n    } \n    if (index < 0) throw new RuntimeException(\"Can't edit matching options. No match found.\");\n    return setNewOptionLike(index, buildOption(index));\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"addToSearches","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic A addToSearches(java.lang.Integer index,java.lang.String item) {\n    if (this.searches == null) {this.searches = new java.util.ArrayList<java.lang.String>();}\n    this.searches.add(index, item);\n    return (A)this;\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"setToSearches","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic A setToSearches(java.lang.Integer index,java.lang.String item) {\n    if (this.searches == null) {this.searches = new java.util.ArrayList<java.lang.String>();}\n    this.searches.set(index, item); return (A)this;\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"addToSearches","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic A addToSearches(java.lang.String... items) {\n    if (this.searches == null) {this.searches = new java.util.ArrayList<java.lang.String>();}\n    for (java.lang.String item : items) {this.searches.add(item);} return (A)this;\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"addAllToSearches","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic A addAllToSearches(java.util.Collection<java.lang.String> items) {\n    if (this.searches == null) {this.searches = new java.util.ArrayList<java.lang.String>();}\n    for (java.lang.String item : items) {this.searches.add(item);} return (A)this;\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"removeFromSearches","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic A removeFromSearches(java.lang.String... items) {\n    for (java.lang.String item : items) {if (this.searches!= null){ this.searches.remove(item);}} return (A)this;\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"removeAllFromSearches","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic A removeAllFromSearches(java.util.Collection<java.lang.String> items) {\n    for (java.lang.String item : items) {if (this.searches!= null){ this.searches.remove(item);}} return (A)this;\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"getSearches","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic java.util.List<java.lang.String> getSearches() {\n    return this.searches;\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"getSearch","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic java.lang.String getSearch(java.lang.Integer index) {\n    return this.searches.get(index);\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"getFirstSearch","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic java.lang.String getFirstSearch() {\n    return this.searches.get(0);\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"getLastSearch","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic java.lang.String getLastSearch() {\n    return this.searches.get(searches.size() - 1);\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"getMatchingSearch","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic java.lang.String getMatchingSearch(java.util.function.Predicate<java.lang.String> predicate) {\n    for (java.lang.String item: searches) { if(predicate.test(item)){ return item;} } return null;\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"hasMatchingSearch","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic java.lang.Boolean hasMatchingSearch(java.util.function.Predicate<java.lang.String> predicate) {\n    for (java.lang.String item: searches) { if(predicate.test(item)){ return true;} } return false;\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"withSearches","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic A withSearches(java.util.List<java.lang.String> searches) {\n    if (searches != null) {this.searches = new java.util.ArrayList(); for (java.lang.String item : searches){this.addToSearches(item);}} else { this.searches = null;} return (A) this;\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"withSearches","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic A withSearches(java.lang.String... searches) {\n    if (this.searches != null) {this.searches.clear();}\n    if (searches != null) {for (java.lang.String item :searches){ this.addToSearches(item);}} return (A) this;\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"hasSearches","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic java.lang.Boolean hasSearches() {\n    return searches != null && !searches.isEmpty();\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"addNewSearch","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic A addNewSearch(java.lang.String arg0) {\n    return (A)addToSearches(new String(arg0));\n  }"} {"path":"downloaded/MyViewPager.java","method_name":"croll = isCa","content":"/**\n     * 解决切换需要�\nScroll) {\n        this.isCanScroll = isCanScroll;\n    }\n\n\n    @Override\n    public boolean onTouchEvent(MotionEvent arg0) {\n        /* return false;//super.onTouchEvent(arg0); */\n        if (isCanScroll)\n            return false;\n "} {"path":"downloaded/MyViewPager.java","method_name":"r.onTouchEvent(arg0);","content":"/**\n     * 解决切换需要�\n else\n            return super.onTouchEvent(arg0);\n    }\n\n    @Override\n    public boolean onInterceptTouchEvent(MotionEvent arg0) {\n        if (isCanScroll)\n            return false;\n        el"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"equals","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic boolean equals(java.lang.Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    V1PodDNSConfigFluentImpl that = (V1PodDNSConfigFluentImpl) o;\n    if (nameservers != null ? !nameservers.equals(that.nameservers) :that.nameservers != null) return false;\n    if (options != null ? !options.equals(that.options) :that.options != null) return false;\n    if (searches != null ? !searches.equals(that.searches) :that.searches != null) return false;\n    return true;\n  }"} {"path":"downloaded/V1PodDNSConfigFluentImpl.java","method_name":"hashCode","content":"/**\n   * This method has been deprecated, please use method buildOptions instead.\n   * @return The buildable object.\n   */\npublic int hashCode() {\n    return java.util.Objects.hash(nameservers,  options,  searches,  super.hashCode());\n  }"} {"path":"downloaded/SampleDataUtil.java","method_name":"getConditionSet","content":"/**\n     * Returns a food set containing the list of strings given.\n     */\npublic static Set<Condition> getConditionSet(String... strings) {\n        return Arrays.stream(strings)\n            .map(Condition::new)\n            .collect(Collectors.toSet());\n    }"} {"path":"downloaded/FieldAccessor.java","method_name":"fieldFromBean","content":"/**\n     * Retrieves the value of a {@link Field} from a {@link AnchorBean}.\n     *\n     * @param bean the bean\n     * @param field the field to retrieve a value from\n     * @return the value, it it exists, or {@code Optional.empty()} if it doesn't exist <b>and</b>\n     *     the bean is marked as optional.\n     * @throws IllegalAccessException if reflection tries to access a property it has no permissions\n     *     for.\n     * @throws BeanMisconfiguredException if no value exists for the field (and it's not marked as\n     *     optional).\n     */\npublic static Optional<Object> fieldFromBean(AnchorBean<?> bean, Field field)\n            throws IllegalAccessException, BeanMisconfiguredException {\n        // If it's non-optional, then we insist it's non-null\n        Object value = field.get(bean);\n        if (value == null) {\n            if (isFieldAnnotatedAsOptional(field)) {\n                return Optional.empty();\n            } else {\n                throwMissingPropertyException(field.getName(), bean.getBeanName());\n            }\n        }\n        return Optional.of(value);\n    }"} {"path":"downloaded/FieldAccessor.java","method_name":"isFieldAnnotatedAsOptional","content":"/**\n     * Is a particular {@link Field} on a {@link AnchorBean} marked as optional?\n     *\n     * @param field the field\n     * @return true iff it is marked as optional.\n     */\npublic static boolean isFieldAnnotatedAsOptional(Field field) {\n        return field.isAnnotationPresent(OptionalBean.class);\n    }"} {"path":"downloaded/PubSubPublisher.java","method_name":" validateAndConfigureSetting","content":" /**\n   * Validates the publish rate and event size arguments and configures other settings required to\n   * publish messages based on these arguments.\n   *\n   * @param publishRate Rate at which messages should be published to the Pub/Sub Topic\n   * @param eventSize   Size of the message to publish to the Pub/Sub Topic\n   * @return An {@link InputStream} of the message to be published\n   *\n private static InputStream validateAndConfigureSettings(String publishRate, String eventSize) {\n    InputStream inputStream;\n    \n    // determine number of threads based on the publish rate. A single thread can publish messages\n    // at a rate of 1000 messages/sec\n    switch (publishRate) {\n      case \"1000\":\n        numThreads = 1;\n        break;\n      case \"2000\":\n        numThreads = 2;\n        break;\n      case \"5000\":\n        numThreads = 5;\n        break;\n      default:\n        LOG.error(\"Publish rate must be one of 1000, 2000 or 5000\");\n        throw new IllegalArgumentException(\"Publish rate must be one of 1000, 2000 or 5000\");\n    }\n    \n    // read file and set byte threshold based on event size\n    switch (eventSize) {\n      case \"1\":\n        inputStream = PubSubPublisher.class.getClassLoader().getResourceAsStream(\"1kb.json\");\n        byteThreshold = 1_000_000;\n        manualDelay = 980;\n        break;\n      case \"10\":\n        inputStream = PubSubPublisher.class.getClassLoader().getResourceAsStream(\"10kb.json\");\n        byteThreshold = 10_000_000;\n        manualDelay = 980;\n        break;\n      case \"100\":\n        inputStream = PubSubPublisher.class.getClassLoader().getResourceAsStream(\"100kb.json\");\n        byteThreshold = 100_000;\n        manualDelay = 1960;\n        break;\n      default:\n        LOG.error(\"Event size must be one of 1, 10 or 100\");\n        throw new IllegalArgumentException(\"Event size must be one of 1, 10 or 100\");\n    }\n    \n    return inputStream;\n  "} {"path":"downloaded/InstanceUploaderUtilsTest.java","method_name":"getTestUploadResult","content":"/**\n     * 1000 instances is a big number that would product a very long sql query that would cause\n     * SQLiteException: Expression tree is too large if we didn't split it into parts.\n     */\nprivate Map<String, String> getTestUploadResult() {\n        Map<String, String> result = new HashMap<>();\n        for (int i = 1; i <= NUMBER_OF_INSTANCES_TO_SEND; i++) {\n            result.put(String.valueOf(i), \"full submission upload was successful!\");\n        }\n        return result;\n    }"} {"path":"downloaded/InstanceUploaderUtilsTest.java","method_name":"getExpectedResultMsg","content":"/**\n     * 1000 instances is a big number that would product a very long sql query that would cause\n     * SQLiteException: Expression tree is too large if we didn't split it into parts.\n     */\nprivate String getExpectedResultMsg() {\n        StringBuilder expectedResultMsg = new StringBuilder();\n        for (int i = 1; i <= NUMBER_OF_INSTANCES_TO_SEND; i++) {\n            expectedResultMsg.append(\"InstanceTest - Success\\n\\n\");\n        }\n        return expectedResultMsg.toString().trim();\n    }"} {"path":"downloaded/MergeSortedQueue.java","method_name":"merge","content":"/**\n     * Merge two sorted queues.\n     * @param q1 the first queue.\n     * @param q2 the second queue.\n     * @return  the merged queue.\n     */\npublic static LinkedQueue<Object> merge(LinkedQueue<Object> q1, LinkedQueue<Object> q2) {\n        if (q1.size() == 0) {\n            return q2;\n        } else if (q2.size() == 0) {\n            return q1;\n        }\n\n        LinkedQueue<Object> mergeQueue = new LinkedQueue<>();\n        int i = 0;\n        int j = 0;\n        int size1 = q1.size();\n        int size2 = q2.size();\n\n        while (i < size1 && j < size2) {\n            int flag = q1.peek().toString().compareTo(q2.peek().toString());\n            if (flag < 0) {\n                mergeQueue.enqueue(q1.dequeue());\n                i++;\n            } else {\n                mergeQueue.enqueue(q2.dequeue());\n                j++;\n            }\n        }\n\n        while (i < size1) {\n            mergeQueue.enqueue(q1.dequeue());\n            i++;\n        }\n        while (j < size2) {\n            mergeQueue.enqueue(q2.dequeue());\n            j++;\n        }\n\n        return mergeQueue;\n    }"} {"path":"downloaded/Religion.java","method_name":"updateReligion","content":"/**\n     * Updates the place of given player and returns\n     * the amount of power obtained by end of progress.\n     * @param count  the number of advance in religion track\n     * @param player_id the id of player whose round\n     * @return powerAward the amount of power player gained\n     *\n     */\npublic int[] updateReligion(int count, int player_id, int key){\n        int[] returnInfo = {0,0,0};\n        //powerGain, case, kaç ilerledi\n        int powerAward = 0;\n        int currentPos = playerPositions[player_id];\n        int endPos = currentPos + count;\n        int awardSearchLength = powerAwardPositions.length;\n        if(currentPos >= MAX_LENGTH){\n            returnInfo[1] = 4;\n        }\n        else if (endPos >= MAX_LENGTH-1){\n            if(keyPlaced){\n                //System.out.println(\"Since someone used key, you can't reach end\"); // Can be replaced with an GUI message\n                awardSearchLength -= 1;\n                endPos = MAX_LENGTH-2;\n                returnInfo[1] = 1;\n            }if (key == 0){\n                //System.out.println(\"Since there is no key end pos is stuck on 9\"); // Can be replaced with an GUI message\n                awardSearchLength -= 1;\n                endPos = MAX_LENGTH-2;\n                returnInfo[1] = 2;\n            }else{\n                keyPlaced = true;\n                endPos = MAX_LENGTH-1;\n                returnInfo[1] = 3;\n            }\n        }\n        for (int i = 0; i< awardSearchLength; i++ ){\n            if (currentPos < i && endPos >= i){\n                powerAward += powerAwardPositions[i];\n            }\n        }\n        playerPositions[player_id] = endPos;\n        returnInfo[0] = powerAward;\n        returnInfo[2] = endPos - currentPos;\n        return returnInfo;\n    "} {"path":"downloaded/Religion.java","method_name":" isOccupie","content":"/**\n     * Updates the place of given player and returns\n     * the amount of power obtained by end of progress.\n     * @param count  the number of advance in religion track\n     * @param player_id the id of player whose round\n     * @return powerAward the amount of power player gained\n     *\n     */\n public boolean isOccupied(int index) {\n\n        switch (index) {\n            case 0:\n                return (orderOfCult_3 != -1);\n            case 1:\n                return (orderOfCult_2_1 != -1);\n            case 2:\n                return (orderOfCult_2_2 != -1);\n            case 3:\n                return (orderOfCult_2_3 != -1);\n        }\n        return false;\n    "} {"path":"downloaded/Religion.java","method_name":" placePries","content":"/**\n     * Updates the place of given player and returns\n     * the amount of power obtained by end of progress.\n     * @param count  the number of advance in religion track\n     * @param player_id the id of player whose round\n     * @return powerAward the amount of power player gained\n     *\n     */\n public int[] placePriest(int player_id,int key) {\n        return updateReligion(1, player_id, key);\n    "} {"path":"downloaded/Religion.java","method_name":" addOrderOfReligio","content":"/**\n     * Updates the place of given player and returns\n     * the amount of power obtained by end of progress.\n     * @param count  the number of advance in religion track\n     * @param player_id the id of player whose round\n     * @return powerAward the amount of power player gained\n     *\n     */\n public  int[] addOrderOfReligion(int player_id, int key){\n        int[] returnInfo = {-1,-1,-1};\n\n        if(orderOfCult_3 == -1) {\n            returnInfo = this.updateReligion(3, player_id, key);\n            if (returnInfo[1] == 0)\n                orderOfCult_3 = player_id;\n        }else if (orderOfCult_2_1 == -1){\n            returnInfo = this.updateReligion(2, player_id, key);\n            if (returnInfo[1] == 0)\n                orderOfCult_2_1 = player_id;\n        }else if (orderOfCult_2_2 == -1){\n            returnInfo = this.updateReligion(2, player_id, key);\n            if (returnInfo[1] == 0)\n                orderOfCult_2_2 = player_id;\n        }else if (orderOfCult_2_3 == -1){\n            returnInfo = this.updateReligion(2, player_id, key);\n            if (returnInfo[1] == 0)\n                orderOfCult_2_3 = player_id;\n        }else\n            System.out.println(\"ORDER IS FULL\");\n        return returnInfo; // Error value which indicates there is no empty place\n    "} {"path":"downloaded/Religion.java","method_name":" getPlayerPosition","content":"/**\n     * Updates the place of given player and returns\n     * the amount of power obtained by end of progress.\n     * @param count  the number of advance in religion track\n     * @param player_id the id of player whose round\n     * @return powerAward the amount of power player gained\n     *\n     */\n public int[] getPlayerPositions()\n    {\n       return playerPositions;\n    "} {"path":"downloaded/Religion.java","method_name":" getRoundBasedPositio","content":"/**\n     * Updates the place of given player and returns\n     * the amount of power obtained by end of progress.\n     * @param count  the number of advance in religion track\n     * @param player_id the id of player whose round\n     * @return powerAward the amount of power player gained\n     *\n     */\n public int[] getRoundBasedPosition() {\n        return roundBasedPosition;\n    "} {"path":"downloaded/PlatformWin32GLCanvas.java","method_name":"createDummyWindow","content":"/**\n     * Encode the pixel format attributes stored in the given {@link GLData} into the given {@link IntBuffer} for wglChoosePixelFormatARB to consume.\n     */\nprivate static long createDummyWindow(MemoryStack stack) {\n        WNDCLASSEX in = WNDCLASSEX.callocStack(stack)\n            .cbSize(WNDCLASSEX.SIZEOF)\n            .hInstance(HINSTANCE)\n            .lpszClassName(stack.UTF16(\"AWTAPPWNDCLASS\"));\n\n        memPutAddress(\n            in.address() + WNDCLASSEX.LPFNWNDPROC,\n            User32.Functions.DefWindowProc\n        );\n\n        short classAtom = RegisterClassEx(in);\n        if (classAtom == 0) {\n            throw new IllegalStateException(\"Failed to register WGL window class\");\n        }\n\n        return nCreateWindowEx(WS_EX_APPWINDOW, classAtom & 0xFFFF, NULL, 0, CW_USEDEFAULT, CW_USEDEFAULT, 800, 600, NULL, NULL,HINSTANCE, NULL);\n    }"} {"path":"downloaded/PlatformWin32GLCanvas.java","method_name":"create","content":"/**\n     * Encode the pixel format attributes stored in the given {@link GLData} into the given {@link IntBuffer} for wglChoosePixelFormatARB to consume.\n     */\n@Override\n    public long create(Canvas canvas, GLData attribs, GLData effective) throws AWTException {\n        this.ds = JAWT_GetDrawingSurface(canvas, awt.GetDrawingSurface());\n        JAWTDrawingSurface ds = JAWT_GetDrawingSurface(canvas, awt.GetDrawingSurface());\n        try {\n            int lock = JAWT_DrawingSurface_Lock(ds, ds.Lock());\n            if ((lock & JAWT_LOCK_ERROR) != 0)\n                throw new AWTException(\"JAWT_DrawingSurface_Lock() failed\");\n            try {\n                JAWTDrawingSurfaceInfo dsi = JAWT_DrawingSurface_GetDrawingSurfaceInfo(ds, ds.GetDrawingSurfaceInfo());\n                try {\n                    JAWTWin32DrawingSurfaceInfo dsiWin = JAWTWin32DrawingSurfaceInfo.create(dsi.platformInfo());\n                    this.hwnd = dsiWin.hwnd();\n                    try (MemoryStack stack = stackPush()) {\n                        long hwndDummy = createDummyWindow(stack);\n                        try {\n                            return create(stack, hwnd, hwndDummy, attribs, effective);\n                        } finally {\n                            DestroyWindow(hwndDummy);\n                        }\n                    }\n                } finally {\n                    JAWT_DrawingSurface_FreeDrawingSurfaceInfo(dsi, ds.FreeDrawingSurfaceInfo());\n                }\n            } finally {\n                JAWT_DrawingSurface_Unlock(ds, ds.Unlock());\n            }\n        } finally {\n            JAWT_FreeDrawingSurface(ds, awt.FreeDrawingSurface());\n        }\n    }"} {"path":"downloaded/PlatformWin32GLCanvas.java","method_name":"create","content":"/**\n     * Encode the pixel format attributes stored in the given {@link GLData} into the given {@link IntBuffer} for wglChoosePixelFormatARB to consume.\n     */\nprivate static long create(MemoryStack stack, long windowHandle, long dummyWindowHandle, GLData attribs, GLData effective) throws AWTException {\n        long bufferAddr = stack.nmalloc(4, (4*2) << 2);\n\n        // Validate context attributes\n        validateAttributes(attribs);\n\n        // Find this exact pixel format, though for now without multisampling. This comes later!\n        int flags = PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL;\n        if (attribs.doubleBuffer)\n            flags |= PFD_DOUBLEBUFFER;\n        if (attribs.stereo)\n            flags |= PFD_STEREO;\n        PIXELFORMATDESCRIPTOR pfd = PIXELFORMATDESCRIPTOR.callocStack(stack)\n            .nSize((short) PIXELFORMATDESCRIPTOR.SIZEOF)\n            .nVersion((short) 1) // this should always be 1\n            .dwLayerMask(PFD_MAIN_PLANE)\n            .iPixelType(PFD_TYPE_RGBA)\n            .dwFlags(flags)\n            .cRedBits((byte) attribs.redSize)\n            .cGreenBits((byte) attribs.greenSize)\n            .cBlueBits((byte) attribs.blueSize)\n            .cAlphaBits((byte) attribs.alphaSize)\n            .cDepthBits((byte) attribs.depthSize)\n            .cStencilBits((byte) attribs.stencilSize)\n            .cAccumRedBits((byte) attribs.accumRedSize)\n            .cAccumGreenBits((byte) attribs.accumGreenSize)\n            .cAccumBlueBits((byte) attribs.accumBlueSize)\n            .cAccumAlphaBits((byte) attribs.accumAlphaSize)\n            .cAccumBits((byte) (attribs.accumRedSize + attribs.accumGreenSize + attribs.accumBlueSize + attribs.accumAlphaSize));\n        long hDCdummy = GetDC(dummyWindowHandle);\n        int pixelFormat = ChoosePixelFormat(hDCdummy, pfd);\n        if (pixelFormat == 0 || !SetPixelFormat(hDCdummy, pixelFormat, pfd)) {\n            // Pixel format unsupported\n            ReleaseDC(dummyWindowHandle, hDCdummy);\n            throw new AWTException(\"Unsupported pixel format\");\n        }\n\n        /*\n         * Next, create a dummy context using Opengl32.lib's wglCreateContext. This should ALWAYS work, but won't give us a \"new\"/\"core\" context if we requested\n         * that and also does not support multisampling. But we use this \"dummy\" context then to request the required WGL function pointers to create a new\n         * OpenGL >= 3.0 context and with optional multisampling.\n         */\n        long dummyContext = wglCreateContext(hDCdummy);\n        if (dummyContext == 0L) {\n            ReleaseDC(dummyWindowHandle, hDCdummy);\n            throw new AWTException(\"Failed to create OpenGL context\");\n        }\n\n        // Save current context to restore it later\n        final long currentContext = wglGetCurrentContext();\n        final long currentDc = wglGetCurrentDC();\n\n        // Make the new dummy context current\n        boolean success = wglMakeCurrent(hDCdummy, dummyContext);\n        if (!success) {\n            ReleaseDC(dummyWindowHandle, hDCdummy);\n            wglDeleteContext(dummyContext);\n            throw new AWTException(\"Failed to make OpenGL context current\");\n        }\n\n        // Query supported WGL extensions\n        String wglExtensions = null;\n        long wglGetExtensionsStringARBAddr = wglGetProcAddress(\"wglGetExtensionsStringARB\");\n        if (wglGetExtensionsStringARBAddr != 0L) {\n            long str = callPP(hDCdummy, wglGetExtensionsStringARBAddr);\n            if (str != 0L) {\n                wglExtensions = memASCII(str);\n            } else {\n                wglExtensions = \"\";\n            }\n        } else {\n            // Try the EXT extension\n            long wglGetExtensionsStringEXTAddr = wglGetProcAddress(\"wglGetExtensionsStringEXT\");\n            if (wglGetExtensionsStringEXTAddr != 0L) {\n                long str = callP(wglGetExtensionsStringEXTAddr);\n                if (str != 0L) {\n                    wglExtensions = memASCII(str);\n                } else {\n                    wglExtensions = \"\";\n                }\n            } else {\n                wglExtensions = \"\";\n            }\n        }\n        String[] splitted = wglExtensions.split(\" \");\n        Set<String> wglExtensionsList = new HashSet<>(splitted.length);\n        Collections.addAll(wglExtensionsList, splitted);\n        success = ReleaseDC(dummyWindowHandle, hDCdummy);\n        if (!success) {\n            wglDeleteContext(dummyContext);\n            wglMakeCurrent(currentDc, currentContext);\n            throw new AWTException(\"Could not release dummy DC\");\n        }\n\n        // For some constellations of context attributes, we can stop right here.\n        if (!atLeast30(attribs.majorVersion, attribs.minorVersion) && attribs.samples == 0 && !attribs.sRGB && !attribs.pixelFormatFloat\n                && attribs.contextReleaseBehavior == null && !attribs.robustness && attribs.api != API.GLES) {\n            /* Finally, create the real context on the real window */\n            long hDC = GetDC(windowHandle);\n            SetPixelFormat(hDC, pixelFormat, pfd);\n            success = wglDeleteContext(dummyContext);\n            if (!success) {\n                ReleaseDC(windowHandle, hDC);\n                wglMakeCurrent(currentDc, currentContext);\n                throw new AWTException(\"Could not delete dummy GL context\");\n            }\n            long context = wglCreateContext(hDC);\n\n            if (attribs.swapInterval != null) {\n                boolean has_WGL_EXT_swap_control = wglExtensionsList.contains(\"WGL_EXT_swap_control\");\n                if (!has_WGL_EXT_swap_control) {\n                    ReleaseDC(windowHandle, hDC);\n                    wglMakeCurrent(currentDc, currentContext);\n                    wglDeleteContext(context);\n                    throw new AWTException(\"Swap interval requested but WGL_EXT_swap_control is unavailable\");\n                }\n                if (attribs.swapInterval < 0) {\n                    // Only allowed if WGL_EXT_swap_control_tear is available\n                    boolean has_WGL_EXT_swap_control_tear = wglExtensionsList.contains(\"WGL_EXT_swap_control_tear\");\n                    if (!has_WGL_EXT_swap_control_tear) {\n                        ReleaseDC(windowHandle, hDC);\n                        wglMakeCurrent(currentDc, currentContext);\n                        wglDeleteContext(context);\n                        throw new AWTException(\"Negative swap interval requested but WGL_EXT_swap_control_tear is unavailable\");\n                    }\n                }\n                // Make context current to set the swap interval\n                success = wglMakeCurrent(hDC, context);\n                if (!success) {\n                    ReleaseDC(windowHandle, hDC);\n                    wglMakeCurrent(currentDc, currentContext);\n                    wglDeleteContext(context);\n                    throw new AWTException(\"Could not make GL context current\");\n                }\n                long wglSwapIntervalEXTAddr = wglGetProcAddress(\"wglSwapIntervalEXT\");\n                if (wglSwapIntervalEXTAddr != 0L) {\n                    callI(attribs.swapInterval, wglSwapIntervalEXTAddr);\n                }\n            }\n\n            if (attribs.swapGroupNV > 0 || attribs.swapBarrierNV > 0) {\n                // Only allowed if WGL_NV_swap_group is available\n                boolean has_WGL_NV_swap_group = wglExtensionsList.contains(\"WGL_NV_swap_group\");\n                if (!has_WGL_NV_swap_group) {\n                    ReleaseDC(windowHandle, hDC);\n                    wglMakeCurrent(currentDc, currentContext);\n                    wglDeleteContext(context);\n                    throw new AWTException(\"Swap group or barrier requested but WGL_NV_swap_group is unavailable\");\n                }\n                // Make context current to join swap group and/or barrier\n                success = wglMakeCurrent(hDC, context);\n                try {\n                    wglNvSwapGroupAndBarrier(attribs, bufferAddr, hDC);\n                } catch (AWTException e) {\n                    ReleaseDC(windowHandle, hDC);\n                    wglMakeCurrent(currentDc, currentContext);\n                    wglDeleteContext(context);\n                    throw e;\n                }\n            }\n\n            /* Check if we want to share context */\n            if (attribs.shareContext != null) {\n                success = wglShareLists(attribs.shareContext.context, context);\n                if (!success) {\n                    ReleaseDC(windowHandle, hDC);\n                    wglMakeCurrent(currentDc, currentContext);\n                    wglDeleteContext(context);\n                    throw new AWTException(\"Failed while configuring context sharing\");\n                }\n            }\n\n            // Describe pixel format\n            int pixFmtIndex = DescribePixelFormat(hDC, pixelFormat, pfd);\n            if (pixFmtIndex == 0) {\n                ReleaseDC(windowHandle, hDC);\n                wglMakeCurrent(currentDc, currentContext);\n                wglDeleteContext(context);\n                throw new AWTException(\"Failed to describe pixel format\");\n            }\n            success = ReleaseDC(windowHandle, hDC);\n            if (!success) {\n                wglMakeCurrent(currentDc, currentContext);\n                wglDeleteContext(context);\n                throw new AWTException(\"Could not release DC\");\n            }\n            effective.redSize = pfd.cRedBits();\n            effective.greenSize = pfd.cGreenBits();\n            effective.blueSize = pfd.cBlueBits();\n            effective.alphaSize = pfd.cAlphaBits();\n            effective.depthSize = pfd.cDepthBits();\n            effective.stencilSize = pfd.cStencilBits();\n            int pixelFormatFlags = pfd.dwFlags();\n            effective.doubleBuffer = (pixelFormatFlags & PFD_DOUBLEBUFFER) != 0;\n            effective.stereo = (pixelFormatFlags & PFD_STEREO) != 0;\n            effective.accumRedSize = pfd.cAccumRedBits();\n            effective.accumGreenSize = pfd.cAccumGreenBits();\n            effective.accumBlueSize = pfd.cAccumBlueBits();\n            effective.accumAlphaSize = pfd.cAccumAlphaBits();\n\n            // Restore old context\n            wglMakeCurrent(currentDc, currentContext);\n            return context;\n        }\n\n        // Check for WGL_ARB_create_context support\n        if (!wglExtensionsList.contains(\"WGL_ARB_create_context\")) {\n            wglDeleteContext(dummyContext);\n            wglMakeCurrent(currentDc, currentContext);\n            throw new AWTException(\"Extended context attributes requested but WGL_ARB_create_context is unavailable\");\n        }\n\n        // Obtain wglCreateContextAttribsARB function pointer\n        long wglCreateContextAttribsARBAddr = wglGetProcAddress(\"wglCreateContextAttribsARB\");\n        if (wglCreateContextAttribsARBAddr == 0L) {\n            wglDeleteContext(dummyContext);\n            wglMakeCurrent(currentDc, currentContext);\n            throw new AWTException(\"WGL_ARB_create_context available but wglCreateContextAttribsARB is NULL\");\n        }\n\n        IntBuffer attribList = BufferUtils.createIntBuffer(64);\n        long attribListAddr = memAddress(attribList);\n        long hDC = GetDC(windowHandle);\n\n        // Obtain wglChoosePixelFormatARB if multisampling or sRGB or floating point pixel format is requested\n        if (attribs.samples > 0 || attribs.sRGB || attribs.pixelFormatFloat) {\n            long wglChoosePixelFormatAddr = wglGetProcAddress(\"wglChoosePixelFormatARB\");\n            if (wglChoosePixelFormatAddr == 0L) {\n                // Try EXT function (the WGL constants are the same in both extensions)\n                wglChoosePixelFormatAddr = wglGetProcAddress(\"wglChoosePixelFormatEXT\");\n                if (wglChoosePixelFormatAddr == 0L) {\n                    ReleaseDC(windowHandle, hDC);\n                    wglDeleteContext(dummyContext);\n                    wglMakeCurrent(currentDc, currentContext);\n                    throw new AWTException(\"No support for wglChoosePixelFormatARB/EXT. Cannot query supported pixel formats.\");\n                }\n            }\n            if (attribs.samples > 0) {\n                // Check for ARB or EXT extension (their WGL constants have the same value)\n                boolean has_WGL_ARB_multisample = wglExtensionsList.contains(\"WGL_ARB_multisample\");\n                boolean has_WGL_EXT_multisample = wglExtensionsList.contains(\"WGL_EXT_multisample\");\n                if (!has_WGL_ARB_multisample && !has_WGL_EXT_multisample) {\n                    ReleaseDC(windowHandle, hDC);\n                    wglDeleteContext(dummyContext);\n                    wglMakeCurrent(currentDc, currentContext);\n                    throw new AWTException(\"Multisampling requested but neither WGL_ARB_multisample nor WGL_EXT_multisample available\");\n                }\n                if (attribs.colorSamplesNV > 0) {\n                    boolean has_WGL_NV_multisample_coverage = wglExtensionsList.contains(\"WGL_NV_multisample_coverage\");\n                    if (!has_WGL_NV_multisample_coverage) {\n                        ReleaseDC(windowHandle, hDC);\n                        wglDeleteContext(dummyContext);\n                        wglMakeCurrent(currentDc, currentContext);\n                        throw new AWTException(\"Color samples requested but WGL_NV_multisample_coverage is unavailable\");\n                    }\n                }\n            }\n            if (attribs.sRGB) {\n                // Check for WGL_EXT_framebuffer_sRGB\n                boolean has_WGL_EXT_framebuffer_sRGB = wglExtensionsList.contains(\"WGL_EXT_framebuffer_sRGB\");\n                if (!has_WGL_EXT_framebuffer_sRGB) {\n                    ReleaseDC(windowHandle, hDC);\n                    wglDeleteContext(dummyContext);\n                    wglMakeCurrent(currentDc, currentContext);\n                    throw new AWTException(\"sRGB color space requested but WGL_EXT_framebuffer_sRGB is unavailable\");\n                }\n            }\n            if (attribs.pixelFormatFloat) {\n                // Check for WGL_ARB_pixel_format_float\n                boolean has_WGL_ARB_pixel_format_float = wglExtensionsList.contains(\"WGL_ARB_pixel_format_float\");\n                if (!has_WGL_ARB_pixel_format_float) {\n                    ReleaseDC(windowHandle, hDC);\n                    wglDeleteContext(dummyContext);\n                    wglMakeCurrent(currentDc, currentContext);\n                    throw new AWTException(\"Floating-point format requested but WGL_ARB_pixel_format_float is unavailable\");\n                }\n            }\n            // Query matching pixel formats\n            encodePixelFormatAttribs(attribList, attribs);\n            success = callPPPPPI(hDC, attribListAddr, 0L, 1, bufferAddr + 4, bufferAddr, wglChoosePixelFormatAddr) == 1;\n            int numFormats = memGetInt(bufferAddr);\n            if (!success || numFormats == 0) {\n                ReleaseDC(windowHandle, hDC);\n                wglDeleteContext(dummyContext);\n                wglMakeCurrent(currentDc, currentContext);\n                throw new AWTException(\"No supported pixel format found.\");\n            }\n            pixelFormat = memGetInt(bufferAddr + 4);\n            // Describe pixel format for the PIXELFORMATDESCRIPTOR to match the chosen format\n            int pixFmtIndex = DescribePixelFormat(hDC, pixelFormat, pfd);\n            if (pixFmtIndex == 0) {\n                ReleaseDC(windowHandle, hDC);\n                wglDeleteContext(dummyContext);\n                wglMakeCurrent(currentDc, currentContext);\n                throw new AWTException(\"Failed to validate supported pixel format.\");\n            }\n            // Obtain extended pixel format attributes\n            long wglGetPixelFormatAttribivAddr = wglGetProcAddress(\"wglGetPixelFormatAttribivARB\");\n            if (wglGetPixelFormatAttribivAddr == 0L) {\n                // Try EXT function (function signature is the same)\n                wglGetPixelFormatAttribivAddr = wglGetProcAddress(\"wglGetPixelFormatAttribivEXT\");\n                if (wglGetPixelFormatAttribivAddr == 0L) {\n                    ReleaseDC(windowHandle, hDC);\n                    wglDeleteContext(dummyContext);\n                    wglMakeCurrent(currentDc, currentContext);\n                    throw new AWTException(\"No support for wglGetPixelFormatAttribivARB/EXT. Cannot get effective pixel format attributes.\");\n                }\n            }\n            attribList.rewind();\n            attribList\n                .put(WGL_DOUBLE_BUFFER_ARB)\n                .put(WGL_STEREO_ARB)\n                .put(WGL_PIXEL_TYPE_ARB)\n                .put(WGL_RED_BITS_ARB)\n                .put(WGL_GREEN_BITS_ARB)\n                .put(WGL_BLUE_BITS_ARB)\n                .put(WGL_ALPHA_BITS_ARB)\n                .put(WGL_ACCUM_RED_BITS_ARB)\n                .put(WGL_ACCUM_GREEN_BITS_ARB)\n                .put(WGL_ACCUM_BLUE_BITS_ARB)\n                .put(WGL_ACCUM_ALPHA_BITS_ARB)\n                .put(WGL_DEPTH_BITS_ARB)\n                .put(WGL_STENCIL_BITS_ARB);\n            IntBuffer attribValues = BufferUtils.createIntBuffer(attribList.position());\n            long attribValuesAddr = memAddress(attribValues);\n            success = callPPPI(hDC, pixelFormat, PFD_MAIN_PLANE, attribList.position(), attribListAddr,\n                    attribValuesAddr, wglGetPixelFormatAttribivAddr) == 1;\n            if (!success) {\n                ReleaseDC(windowHandle, hDC);\n                wglDeleteContext(dummyContext);\n                wglMakeCurrent(currentDc, currentContext);\n                throw new AWTException(\"Failed to get pixel format attributes.\");\n            }\n            effective.doubleBuffer = attribValues.get(0) == 1;\n            effective.stereo = attribValues.get(1) == 1;\n            int pixelType = attribValues.get(2);\n            effective.pixelFormatFloat = pixelType == WGL_TYPE_RGBA_FLOAT_ARB;\n            effective.redSize = attribValues.get(3);\n            effective.greenSize = attribValues.get(4);\n            effective.blueSize = attribValues.get(5);\n            effective.alphaSize = attribValues.get(6);\n            effective.accumRedSize = attribValues.get(7);\n            effective.accumGreenSize = attribValues.get(8);\n            effective.accumBlueSize = attribValues.get(9);\n            effective.accumAlphaSize = attribValues.get(10);\n            effective.depthSize = attribValues.get(11);\n            effective.stencilSize = attribValues.get(12);\n        }\n\n        // Compose the attributes list\n        attribList.rewind();\n        if (attribs.api == API.GL && atLeast30(attribs.majorVersion, attribs.minorVersion) || attribs.api == API.GLES && attribs.majorVersion > 0) {\n            attribList.put(WGL_CONTEXT_MAJOR_VERSION_ARB).put(attribs.majorVersion);\n            attribList.put(WGL_CONTEXT_MINOR_VERSION_ARB).put(attribs.minorVersion);\n        }\n        int profile = 0;\n        if (attribs.api == API.GL) {\n            if (attribs.profile == Profile.COMPATIBILITY) {\n                profile = WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB;\n            } else if (attribs.profile == Profile.CORE) {\n                profile = WGL_CONTEXT_CORE_PROFILE_BIT_ARB;\n            }\n        } else if (attribs.api == API.GLES) {\n            boolean has_WGL_EXT_create_context_es2_profile = wglExtensionsList.contains(\"WGL_EXT_create_context_es2_profile\");\n            if (!has_WGL_EXT_create_context_es2_profile) {\n                ReleaseDC(windowHandle, hDC);\n                wglDeleteContext(dummyContext);\n                wglMakeCurrent(currentDc, currentContext);\n                throw new AWTException(\"OpenGL ES API requested but WGL_EXT_create_context_es2_profile is unavailable\");\n            }\n            profile = WGL_CONTEXT_ES2_PROFILE_BIT_EXT;\n        }\n        if (profile > 0) {\n            boolean has_WGL_ARB_create_context_profile = wglExtensionsList.contains(\"WGL_ARB_create_context_profile\");\n            if (!has_WGL_ARB_create_context_profile) {\n                ReleaseDC(windowHandle, hDC);\n                wglDeleteContext(dummyContext);\n                wglMakeCurrent(currentDc, currentContext);\n                throw new AWTException(\"OpenGL profile requested but WGL_ARB_create_context_profile is unavailable\");\n            }\n            attribList.put(WGL_CONTEXT_PROFILE_MASK_ARB).put(profile);\n        }\n        int contextFlags = 0;\n        if (attribs.debug) {\n            contextFlags |= WGL_CONTEXT_DEBUG_BIT_ARB;\n        }\n        if (attribs.forwardCompatible) {\n            contextFlags |= WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB;\n        }\n        if (attribs.robustness) {\n            // Check for WGL_ARB_create_context_robustness\n            boolean has_WGL_ARB_create_context_robustness = wglExtensions.contains(\"WGL_ARB_create_context_robustness\");\n            if (!has_WGL_ARB_create_context_robustness) {\n                ReleaseDC(windowHandle, hDC);\n                wglDeleteContext(dummyContext);\n                wglMakeCurrent(currentDc, currentContext);\n                throw new AWTException(\"Context with robust buffer access requested but WGL_ARB_create_context_robustness is unavailable\");\n            }\n            contextFlags |= WGL_CONTEXT_ROBUST_ACCESS_BIT_ARB;\n            if (attribs.loseContextOnReset) {\n                attribList.put(WGL_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB).put(\n                        WGL_LOSE_CONTEXT_ON_RESET_ARB);\n                // Note: WGL_NO_RESET_NOTIFICATION_ARB is default behaviour and need not be specified.\n            }\n            if (attribs.contextResetIsolation) {\n                // Check for WGL_ARB_robustness_application_isolation or WGL_ARB_robustness_share_group_isolation\n                boolean has_WGL_ARB_robustness_application_isolation = wglExtensions.contains(\"WGL_ARB_robustness_application_isolation\");\n                boolean has_WGL_ARB_robustness_share_group_isolation = wglExtensions.contains(\"WGL_ARB_robustness_share_group_isolation\");\n                if (!has_WGL_ARB_robustness_application_isolation && !has_WGL_ARB_robustness_share_group_isolation) {\n                    ReleaseDC(windowHandle, hDC);\n                    wglDeleteContext(dummyContext);\n                    wglMakeCurrent(currentDc, currentContext);\n                    throw new AWTException(\n                            \"Robustness isolation requested but neither WGL_ARB_robustness_application_isolation nor WGL_ARB_robustness_share_group_isolation available\");\n                }\n                contextFlags |= WGL_CONTEXT_RESET_ISOLATION_BIT_ARB;\n            }\n        }\n        if (contextFlags > 0)\n            attribList.put(WGL_CONTEXT_FLAGS_ARB).put(contextFlags);\n        if (attribs.contextReleaseBehavior != null) {\n            boolean has_WGL_ARB_context_flush_control = wglExtensionsList.contains(\"WGL_ARB_context_flush_control\");\n            if (!has_WGL_ARB_context_flush_control) {\n                ReleaseDC(windowHandle, hDC);\n                wglDeleteContext(dummyContext);\n                wglMakeCurrent(currentDc, currentContext);\n                throw new AWTException(\"Context release behavior requested but WGL_ARB_context_flush_control is unavailable\");\n            }\n            if (attribs.contextReleaseBehavior == ReleaseBehavior.NONE)\n                attribList.put(WGL_CONTEXT_RELEASE_BEHAVIOR_ARB).put(WGL_CONTEXT_RELEASE_BEHAVIOR_NONE_ARB);\n            else if (attribs.contextReleaseBehavior == ReleaseBehavior.FLUSH)\n                attribList.put(WGL_CONTEXT_RELEASE_BEHAVIOR_ARB).put(WGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_ARB);\n        }\n        attribList.put(0).put(0);\n        // Set pixelformat\n        success = SetPixelFormat(hDC, pixelFormat, pfd);\n        if (!success) {\n            ReleaseDC(windowHandle, hDC);\n            wglDeleteContext(dummyContext);\n            wglMakeCurrent(currentDc, currentContext);\n            throw new AWTException(\"Failed to set pixel format.\");\n        }\n        // And create new context with it\n        long newCtx = callPPPP(hDC, attribs.shareContext != null ? attribs.shareContext.context : 0L, attribListAddr, wglCreateContextAttribsARBAddr);\n        wglDeleteContext(dummyContext);\n        if (newCtx == 0L) {\n            ReleaseDC(windowHandle, hDC);\n            wglMakeCurrent(currentDc, currentContext);\n            throw new AWTException(\"Failed to create OpenGL context.\");\n        }\n        // Make context current for next operations\n        wglMakeCurrent(hDC, newCtx);\n        if (attribs.swapInterval != null) {\n            boolean has_WGL_EXT_swap_control = wglExtensionsList.contains(\"WGL_EXT_swap_control\");\n            if (!has_WGL_EXT_swap_control) {\n                ReleaseDC(windowHandle, hDC);\n                wglMakeCurrent(currentDc, currentContext);\n                wglDeleteContext(newCtx);\n                throw new AWTException(\"Swap interval requested but WGL_EXT_swap_control is unavailable\");\n            }\n            if (attribs.swapInterval < 0) {\n                // Only allowed if WGL_EXT_swap_control_tear is available\n                boolean has_WGL_EXT_swap_control_tear = wglExtensionsList.contains(\"WGL_EXT_swap_control_tear\");\n                if (!has_WGL_EXT_swap_control_tear) {\n                    ReleaseDC(windowHandle, hDC);\n                    wglMakeCurrent(currentDc, currentContext);\n                    wglDeleteContext(newCtx);\n                    throw new AWTException(\"Negative swap interval requested but WGL_EXT_swap_control_tear is unavailable\");\n                }\n            }\n            long wglSwapIntervalEXTAddr = wglGetProcAddress(\"wglSwapIntervalEXT\");\n            if (wglSwapIntervalEXTAddr != 0L) {\n                callI(attribs.swapInterval, wglSwapIntervalEXTAddr);\n            }\n        }\n        if (attribs.swapGroupNV > 0 || attribs.swapBarrierNV > 0) {\n            // Only allowed if WGL_NV_swap_group is available\n            boolean has_WGL_NV_swap_group = wglExtensionsList.contains(\"WGL_NV_swap_group\");\n            if (!has_WGL_NV_swap_group) {\n                ReleaseDC(windowHandle, hDC);\n                wglMakeCurrent(currentDc, currentContext);\n                wglDeleteContext(newCtx);\n                throw new AWTException(\"Swap group or barrier requested but WGL_NV_swap_group is unavailable\");\n            }\n            try {\n                wglNvSwapGroupAndBarrier(attribs, bufferAddr, hDC);\n            } catch (AWTException e) {\n                ReleaseDC(windowHandle, hDC);\n                wglMakeCurrent(currentDc, currentContext);\n                wglDeleteContext(newCtx);\n                throw e;\n            }\n        }\n        ReleaseDC(windowHandle, hDC);\n        long getInteger = GL.getFunctionProvider().getFunctionAddress(\"glGetIntegerv\");\n        long getString = GL.getFunctionProvider().getFunctionAddress(\"glGetString\");\n        effective.api = attribs.api;\n        if (atLeast30(attribs.majorVersion, attribs.minorVersion)) {\n            callPV(GL_MAJOR_VERSION, bufferAddr, getInteger);\n            effective.majorVersion = memGetInt(bufferAddr);\n            callPV(GL_MINOR_VERSION, bufferAddr, getInteger);\n            effective.minorVersion = memGetInt(bufferAddr);\n            callPV(GL_CONTEXT_FLAGS, bufferAddr, getInteger);\n            int effectiveContextFlags = memGetInt(bufferAddr);\n            effective.debug = (effectiveContextFlags & GL_CONTEXT_FLAG_DEBUG_BIT) != 0;\n            effective.forwardCompatible = (effectiveContextFlags & GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT) != 0;\n            effective.robustness = (effectiveContextFlags & GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB) != 0;\n        } else if (attribs.api == API.GL) {\n            APIVersion version = apiParseVersion(memUTF8(Checks.check(callP(GL_VERSION, getString))));\n            effective.majorVersion = version.major;\n            effective.minorVersion = version.minor;\n        } else if (attribs.api == API.GLES) {\n            APIVersion version = apiParseVersion(memUTF8(Checks.check(callP(GL_VERSION, getString))));\n            effective.majorVersion = version.major;\n            effective.minorVersion = version.minor;\n        }\n        if (attribs.api == API.GL && atLeast32(effective.majorVersion, effective.minorVersion)) {\n            callPV(GL_CONTEXT_PROFILE_MASK, bufferAddr, getInteger);\n            int effectiveProfileMask = memGetInt(bufferAddr);\n            boolean core = (effectiveProfileMask & GL_CONTEXT_CORE_PROFILE_BIT) != 0;\n            boolean comp = (effectiveProfileMask & GL_CONTEXT_COMPATIBILITY_PROFILE_BIT) != 0;\n            if (comp) {\n                effective.profile = Profile.COMPATIBILITY;\n            } else if (core) {\n                effective.profile = Profile.CORE;\n            } else {\n                effective.profile = null;\n            }\n        }\n        if (attribs.samples >= 1) {\n            callPV(GL_SAMPLES_ARB, bufferAddr, getInteger);\n            effective.samples = memGetInt(bufferAddr);\n            callPV(GL_SAMPLE_BUFFERS_ARB, bufferAddr, getInteger);\n            effective.sampleBuffers = memGetInt(bufferAddr);\n            boolean has_WGL_NV_multisample_coverage = wglExtensionsList.contains(\"WGL_NV_multisample_coverage\");\n            if (has_WGL_NV_multisample_coverage) {\n                callPV(GL_COLOR_SAMPLES_NV, bufferAddr, getInteger);\n                effective.colorSamplesNV = memGetInt(bufferAddr);\n            }\n        }\n        // Restore old context\n        wglMakeCurrent(currentDc, currentContext);\n        return newCtx;\n    }"} {"path":"downloaded/PlatformWin32GLCanvas.java","method_name":"isCurrent","content":"/**\n     * Encode the pixel format attributes stored in the given {@link GLData} into the given {@link IntBuffer} for wglChoosePixelFormatARB to consume.\n     */\n@Override\n    public boolean isCurrent(long context) {\n        long ret = wglGetCurrentContext();\n        return ret == context;\n    }"} {"path":"downloaded/PlatformWin32GLCanvas.java","method_name":"makeCurrent","content":"/**\n     * Encode the pixel format attributes stored in the given {@link GLData} into the given {@link IntBuffer} for wglChoosePixelFormatARB to consume.\n     */\n@Override\n    public boolean makeCurrent(long context) {\n        if (context == 0L)\n            return wglMakeCurrent(0L, 0L);\n        long hdc = GetDC(hwnd);\n        if (hdc == 0L)\n        \treturn false;\n        boolean ret = wglMakeCurrent(hdc, context);\n        ReleaseDC(hwnd, hdc);\n        return ret;\n    }"} {"path":"downloaded/PlatformWin32GLCanvas.java","method_name":"deleteContext","content":"/**\n     * Encode the pixel format attributes stored in the given {@link GLData} into the given {@link IntBuffer} for wglChoosePixelFormatARB to consume.\n     */\n@Override\n    public boolean deleteContext(long context) {\n        return wglDeleteContext(context);\n    }"} {"path":"downloaded/PlatformWin32GLCanvas.java","method_name":"swapBuffers","content":"/**\n     * Encode the pixel format attributes stored in the given {@link GLData} into the given {@link IntBuffer} for wglChoosePixelFormatARB to consume.\n     */\n@Override\n    public boolean swapBuffers() {\n        long hdc = GetDC(hwnd);\n        if (hdc == 0L)\n        \treturn false;\n        boolean ret = SwapBuffers(hdc);\n        ReleaseDC(hwnd, hdc);\n        return ret;\n    }"} {"path":"downloaded/PlatformWin32GLCanvas.java","method_name":"delayBeforeSwapNV","content":"/**\n     * Encode the pixel format attributes stored in the given {@link GLData} into the given {@link IntBuffer} for wglChoosePixelFormatARB to consume.\n     */\n@Override\n    public boolean delayBeforeSwapNV(float seconds) {\n        if (!wglDelayBeforeSwapNVAddr_set) {\n            wglDelayBeforeSwapNVAddr = wglGetProcAddress(\"wglDelayBeforeSwapNV\");\n            wglDelayBeforeSwapNVAddr_set = true;\n        }\n        if (wglDelayBeforeSwapNVAddr == 0L) {\n            throw new UnsupportedOperationException(\"wglDelayBeforeSwapNV is unavailable\");\n        }\n        long hDC = GetDC(hwnd);\n        int ret = callPI(hDC, seconds, wglDelayBeforeSwapNVAddr);\n        ReleaseDC(hwnd, hDC);\n        return ret == 1;\n    }"} {"path":"downloaded/Registrationhttpservlet.java","method_name":"validate","content":"/**\n\t * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)\n\t */\nprivate boolean validate(String username, String password) {\n\t\t// TODO Auto-generated method stub\n\t\tif(username.equals(\"Venkat\") && password.equals(\"kumar\")) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}"} {"path":"downloaded/StockServerImpl.java","method_name":"getQuote","content":"/**\n\t * \n\t */\n@Override\n\tpublic String getQuote(String symbol) throws RemoteException {\n\t\tif(nasdagSymbols.indexOf(symbol.toUpperCase()) != -1) {\n\t\t\t// Generate a random price for valid symbols\n\t\t\tprice = (new Double(Math.random()*100)).toString();\n\t\t}\n\t\treturn price;\n\t}"} {"path":"downloaded/StockServerImpl.java","method_name":"getNasdagSymbols","content":"/**\n\t * \n\t */\n@Override\n\tpublic List<String> getNasdagSymbols() throws RemoteException {\n\t\treturn nasdagSymbols;\n\t}"} {"path":"downloaded/ExampleConfig.java","method_name":"getInstance","content":"/**\n\t * Marks file location for the file reader used later\n\t */\npublic static ExampleConfig getInstance(){\n\t\tif(instance == null){\n\t\t\tinstance = new ExampleConfig();\n\t\t\t\n\t\t}\n\t\treturn instance;\n\t}"} {"path":"downloaded/ExampleConfig.java","method_name":"getProperties","content":"/**\n\t * Marks file location for the file reader used later\n\t */\n@Override\n\tpublic Map<String, String> getProperties() {\n\t\treturn properties;\n\t}"} {"path":"downloaded/ExampleConfig.java","method_name":"getProperty","content":"/**\n\t * Marks file location for the file reader used later\n\t */\n@Override\n\tpublic String getProperty(String key) {\n\t\treturn properties.get(key);\n\t}"} {"path":"downloaded/FlowBean.java","method_name":"ut.readL","content":"/**\n     * 序列化\n     *\n     * @param dataOutput 框架提供给的数据出口\n     * @\n);\n        sumFlow = dataInput.readLong();\n    }\n\n    @Override\n    public String toString() {\n        return \"[\" +\n                \"upFolw=\" + upFolw +\n                \", downFlow=\" + downFlow +\n             "} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getPty","content":"/**\n   * Gets the value of the pty property.\n   *\n   * <p>This accessor method returns a reference to the live list, not a snapshot. Therefore any\n   * modification you make to the returned list will be present inside the JAXB object. This is why\n   * there is not a <CODE>set</CODE> method for the pty property.\n   *\n   * <p>For example, to add a new item, do as follows:\n   *\n   * <pre>\n   *    getPty().add(newItem);\n   * </pre>\n   *\n   * <p>Objects of the following type(s) are allowed in the list {@link PartiesBlockT }\n   */\npublic List<PartiesBlockT> getPty() {\n    if (pty == null) {\n      pty = new ArrayList<PartiesBlockT>();\n    }\n    return this.pty;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getSideCrossLeg","content":"/**\n   * Gets the value of the sideCrossLeg property.\n   *\n   * <p>This accessor method returns a reference to the live list, not a snapshot. Therefore any\n   * modification you make to the returned list will be present inside the JAXB object. This is why\n   * there is not a <CODE>set</CODE> method for the sideCrossLeg property.\n   *\n   * <p>For example, to add a new item, do as follows:\n   *\n   * <pre>\n   *    getSideCrossLeg().add(newItem);\n   * </pre>\n   *\n   * <p>Objects of the following type(s) are allowed in the list {@link SideCrossLegGrpBlockT }\n   */\npublic List<SideCrossLegGrpBlockT> getSideCrossLeg() {\n    if (sideCrossLeg == null) {\n      sideCrossLeg = new ArrayList<SideCrossLegGrpBlockT>();\n    }\n    return this.sideCrossLeg;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getPreAll","content":"/**\n   * Gets the value of the preAll property.\n   *\n   * <p>This accessor method returns a reference to the live list, not a snapshot. Therefore any\n   * modification you make to the returned list will be present inside the JAXB object. This is why\n   * there is not a <CODE>set</CODE> method for the preAll property.\n   *\n   * <p>For example, to add a new item, do as follows:\n   *\n   * <pre>\n   *    getPreAll().add(newItem);\n   * </pre>\n   *\n   * <p>Objects of the following type(s) are allowed in the list {@link PreAllocGrpBlockT }\n   */\npublic List<PreAllocGrpBlockT> getPreAll() {\n    if (preAll == null) {\n      preAll = new ArrayList<PreAllocGrpBlockT>();\n    }\n    return this.preAll;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getOrdQty","content":"/**\n   * Gets the value of the ordQty property.\n   *\n   * @return possible object is {@link OrderQtyDataBlockT }\n   */\npublic OrderQtyDataBlockT getOrdQty() {\n    return ordQty;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getComm","content":"/**\n   * Gets the value of the comm property.\n   *\n   * @return possible object is {@link CommissionDataBlockT }\n   */\npublic CommissionDataBlockT getComm() {\n    return comm;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getCommData","content":"/**\n   * Gets the value of the commData property.\n   *\n   * <p>This accessor method returns a reference to the live list, not a snapshot. Therefore any\n   * modification you make to the returned list will be present inside the JAXB object. This is why\n   * there is not a <CODE>set</CODE> method for the commData property.\n   *\n   * <p>For example, to add a new item, do as follows:\n   *\n   * <pre>\n   *    getCommData().add(newItem);\n   * </pre>\n   *\n   * <p>Objects of the following type(s) are allowed in the list {@link CommissionDataGrpBlockT }\n   */\npublic List<CommissionDataGrpBlockT> getCommData() {\n    if (commData == null) {\n      commData = new ArrayList<CommissionDataGrpBlockT>();\n    }\n    return this.commData;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getSide","content":"/**\n   * Gets the value of the side property.\n   *\n   * @return possible object is {@link String }\n   */\npublic String getSide() {\n    return side;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getSMEInd","content":"/**\n   * Gets the value of the smeInd property.\n   *\n   * @return possible object is {@link String }\n   */\npublic String getSMEInd() {\n    return smeInd;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getOrigClOrdID","content":"/**\n   * Gets the value of the origClOrdID property.\n   *\n   * @return possible object is {@link String }\n   */\npublic String getOrigClOrdID() {\n    return origClOrdID;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getClOrdID","content":"/**\n   * Gets the value of the clOrdID property.\n   *\n   * @return possible object is {@link String }\n   */\npublic String getClOrdID() {\n    return clOrdID;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getClOrdID2","content":"/**\n   * Gets the value of the clOrdID2 property.\n   *\n   * @return possible object is {@link String }\n   */\npublic String getClOrdID2() {\n    return clOrdID2;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getClOrdLinkID","content":"/**\n   * Gets the value of the clOrdLinkID property.\n   *\n   * @return possible object is {@link String }\n   */\npublic String getClOrdLinkID() {\n    return clOrdLinkID;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getShrtSaleExmptnRsn","content":"/**\n   * Gets the value of the shrtSaleExmptnRsn property.\n   *\n   * @return possible object is {@link BigInteger }\n   */\npublic BigInteger getShrtSaleExmptnRsn() {\n    return shrtSaleExmptnRsn;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getOrignDt","content":"/**\n   * Gets the value of the orignDt property.\n   *\n   * @return possible object is {@link XMLGregorianCalendar }\n   */\npublic XMLGregorianCalendar getOrignDt() {\n    return orignDt;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getTrdDt","content":"/**\n   * Gets the value of the trdDt property.\n   *\n   * @return possible object is {@link XMLGregorianCalendar }\n   */\npublic XMLGregorianCalendar getTrdDt() {\n    return trdDt;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getAcct","content":"/**\n   * Gets the value of the acct property.\n   *\n   * @return possible object is {@link String }\n   */\npublic String getAcct() {\n    return acct;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getAcctIDSrc","content":"/**\n   * Gets the value of the acctIDSrc property.\n   *\n   * @return possible object is {@link String }\n   */\npublic String getAcctIDSrc() {\n    return acctIDSrc;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getAcctTyp","content":"/**\n   * Gets the value of the acctTyp property.\n   *\n   * @return possible object is {@link BigInteger }\n   */\npublic BigInteger getAcctTyp() {\n    return acctTyp;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getDayBkngInst","content":"/**\n   * Gets the value of the dayBkngInst property.\n   *\n   * @return possible object is {@link String }\n   */\npublic String getDayBkngInst() {\n    return dayBkngInst;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getBkngUnit","content":"/**\n   * Gets the value of the bkngUnit property.\n   *\n   * @return possible object is {@link String }\n   */\npublic String getBkngUnit() {\n    return bkngUnit;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getPreallocMeth","content":"/**\n   * Gets the value of the preallocMeth property.\n   *\n   * @return possible object is {@link String }\n   */\npublic String getPreallocMeth() {\n    return preallocMeth;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getAllocID","content":"/**\n   * Gets the value of the allocID property.\n   *\n   * @return possible object is {@link String }\n   */\npublic String getAllocID() {\n    return allocID;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getQtyTyp","content":"/**\n   * Gets the value of the qtyTyp property.\n   *\n   * @return possible object is {@link BigInteger }\n   */\npublic BigInteger getQtyTyp() {\n    return qtyTyp;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getCpcty","content":"/**\n   * Gets the value of the cpcty property.\n   *\n   * @return possible object is {@link OrderCapacityEnumT }\n   */\npublic OrderCapacityEnumT getCpcty() {\n    return cpcty;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getRstctions","content":"/**\n   * Gets the value of the rstctions property.\n   *\n   * @return possible object is {@link String }\n   */\npublic String getRstctions() {\n    return rstctions;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getPrTrdAnon","content":"/**\n   * Gets the value of the prTrdAnon property.\n   *\n   * @return possible object is {@link String }\n   */\npublic String getPrTrdAnon() {\n    return prTrdAnon;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getCustCpcty","content":"/**\n   * Gets the value of the custCpcty property.\n   *\n   * @return possible object is {@link BigInteger }\n   */\npublic BigInteger getCustCpcty() {\n    return custCpcty;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getForexReq","content":"/**\n   * Gets the value of the forexReq property.\n   *\n   * @return possible object is {@link ForexReqEnumT }\n   */\npublic ForexReqEnumT getForexReq() {\n    return forexReq;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getSettlCcy","content":"/**\n   * Gets the value of the settlCcy property.\n   *\n   * @return possible object is {@link String }\n   */\npublic String getSettlCcy() {\n    return settlCcy;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getBkngTyp","content":"/**\n   * Gets the value of the bkngTyp property.\n   *\n   * @return possible object is {@link BigInteger }\n   */\npublic BigInteger getBkngTyp() {\n    return bkngTyp;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getTxt","content":"/**\n   * Gets the value of the txt property.\n   *\n   * @return possible object is {@link String }\n   */\npublic String getTxt() {\n    return txt;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getEncTxtLen","content":"/**\n   * Gets the value of the encTxtLen property.\n   *\n   * @return possible object is {@link BigInteger }\n   */\npublic BigInteger getEncTxtLen() {\n    return encTxtLen;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getEncTxt","content":"/**\n   * Gets the value of the encTxt property.\n   *\n   * @return possible object is byte[]\n   */\npublic byte[] getEncTxt() {\n    return encTxt;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getClrAcctTyp","content":"/**\n   * Gets the value of the clrAcctTyp property.\n   *\n   * @return possible object is {@link BigInteger }\n   */\npublic BigInteger getClrAcctTyp() {\n    return clrAcctTyp;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getPosEfct","content":"/**\n   * Gets the value of the posEfct property.\n   *\n   * @return possible object is {@link PositionEffectEnumT }\n   */\npublic PositionEffectEnumT getPosEfct() {\n    return posEfct;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getCovered","content":"/**\n   * Gets the value of the covered property.\n   *\n   * @return possible object is {@link BigInteger }\n   */\npublic BigInteger getCovered() {\n    return covered;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getCshMgn","content":"/**\n   * Gets the value of the cshMgn property.\n   *\n   * @return possible object is {@link String }\n   */\npublic String getCshMgn() {\n    return cshMgn;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getClrFeeInd","content":"/**\n   * Gets the value of the clrFeeInd property.\n   *\n   * @return possible object is {@link String }\n   */\npublic String getClrFeeInd() {\n    return clrFeeInd;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getSolFlag","content":"/**\n   * Gets the value of the solFlag property.\n   *\n   * @return possible object is {@link SolicitedFlagEnumT }\n   */\npublic SolicitedFlagEnumT getSolFlag() {\n    return solFlag;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getSideComplianceID","content":"/**\n   * Gets the value of the sideComplianceID property.\n   *\n   * @return possible object is {@link String }\n   */\npublic String getSideComplianceID() {\n    return sideComplianceID;\n  }"} {"path":"downloaded/SideCrossOrdModGrpBlockT.java","method_name":"getSideTmFrc","content":"/**\n   * Gets the value of the sideTmFrc property.\n   *\n   * @return possible object is {@link XMLGregorianCalendar }\n   */\npublic XMLGregorianCalendar getSideTmFrc() {\n    return sideTmFrc;\n  }"} {"path":"downloaded/TwoFactorRequiredException.java","method_name":"getMessage","content":"/**\n\t * \n\t */\npublic String getMessage() {\n\t\treturn this.message;\n\t}"} {"path":"downloaded/Edge3D.java","method_name":"getStart","content":"/**\n\t * Instantiates a new edge3d.\n\t *\n\t * @param start the start\n\t * @param end the end\n\t */\n@Override\n\tpublic I3DVertex getStart() {\n\t\treturn this.start;\n\t}"} {"path":"downloaded/Edge3D.java","method_name":"getEnd","content":"/**\n\t * Instantiates a new edge3d.\n\t *\n\t * @param start the start\n\t * @param end the end\n\t */\n@Override\n\tpublic I3DVertex getEnd() {\n\t\treturn this.end;\n\t}"} {"path":"downloaded/10_46a09331f1a86a98cda3ef08a192502779c94110_Layout_s.java","method_name":"getDimensionValue","content":"/**\n \t * end current area if it is the last area of content, add bottom box\n \t * property\n \t * \n \t */\nprotected int getDimensionValue( CSSValue value )\n \t{\n \t\treturn getDimensionValue( value, 0 );\n \t}"} {"path":"downloaded/10_46a09331f1a86a98cda3ef08a192502779c94110_Layout_s.java","method_name":"resolveConflict","content":"/**\n \t * end current area if it is the last area of content, add bottom box\n \t * property\n \t * \n \t */\nprivate void resolveConflict( int[] values, int maxTotal, int total,\n \t\t\tint start )\n \t{\n \t\tint length = values.length - start;\n \t\tif ( length == 0 )\n \t\t{\n \t\t\treturn;\n \t\t}\n \t\tassert ( length > 0 );\n \t\tif ( total > maxTotal )\n \t\t{\n \t\t\tint othersTotal = total - values[start];\n \t\t\tif ( values[start] > 0 )\n \t\t\t{\n \t\t\t\tvalues[start] = 0;\n \t\t\t}\n \t\t\tresolveConflict( values, maxTotal, othersTotal, start + 1 );\n \t\t}\n \t}"} {"path":"downloaded/10_46a09331f1a86a98cda3ef08a192502779c94110_Layout_s.java","method_name":"getDimensionValue","content":"/**\n \t * end current area if it is the last area of content, add bottom box\n \t * property\n \t * \n \t */\nprotected int getDimensionValue( String d )\n \t{\n \n \t\tif ( d == null )\n \t\t{\n \t\t\treturn 0;\n \t\t}\n \t\ttry\n \t\t{\n \t\t\tif ( d.endsWith( \"in\" ) || d.endsWith( \"in\" ) ) //$NON-NLS-1$ //$NON-NLS-2$\n \t\t\t{\n \t\t\t\treturn (int) ( ( Float.valueOf( d\n \t\t\t\t\t\t.substring( 0, d.length( ) - 2 ) ).floatValue( ) ) * 72000.0f );\n \t\t\t}\n \t\t\telse if ( d.endsWith( \"cm\" ) || d.endsWith( \"CM\" ) ) //$NON-NLS-1$//$NON-NLS-2$\n \t\t\t{\n \t\t\t\treturn (int) ( ( Float.valueOf( d\n \t\t\t\t\t\t.substring( 0, d.length( ) - 2 ) ).floatValue( ) ) * 72000.0f / 2.54f );\n \t\t\t}\n \t\t\telse if ( d.endsWith( \"mm\" ) || d.endsWith( \"MM\" ) ) //$NON-NLS-1$ //$NON-NLS-2$\n \t\t\t{\n \t\t\t\treturn (int) ( ( Float.valueOf( d\n \t\t\t\t\t\t.substring( 0, d.length( ) - 2 ) ).floatValue( ) ) * 7200.0f / 2.54f );\n \t\t\t}\n \t\t\telse if ( d.endsWith( \"px\" ) || d.endsWith( \"PX\" ) ) //$NON-NLS-1$//$NON-NLS-2$\n \t\t\t{\n \t\t\t\treturn (int) ( ( Float.valueOf( d\n \t\t\t\t\t\t.substring( 0, d.length( ) - 2 ) ).floatValue( ) ) / 96.0f * 72000.0f );// set\n \t\t\t\t// as\n \t\t\t\t// 96dpi\n \t\t\t}\n \t\t\telse\n \t\t\t{\n \t\t\t\treturn (int) ( ( Float.valueOf( d ).floatValue( ) ) );\n \t\t\t}\n \t\t}\n \t\tcatch ( NumberFormatException ex )\n \t\t{\n \t\t\tlogger.log( Level.WARNING, ex.getLocalizedMessage( ) );\n \t\t\treturn 0;\n \t\t}\n \t}"} {"path":"downloaded/10_46a09331f1a86a98cda3ef08a192502779c94110_Layout_s.java","method_name":"getDimensionValue","content":"/**\n \t * end current area if it is the last area of content, add bottom box\n \t * property\n \t * \n \t */\nprotected int getDimensionValue( DimensionType d )\n \t{\n \t\treturn getDimensionValue( d, 0 );\n \t}"} {"path":"downloaded/10_46a09331f1a86a98cda3ef08a192502779c94110_Layout_s.java","method_name":"getDimensionValue","content":"/**\n \t * end current area if it is the last area of content, add bottom box\n \t * property\n \t * \n \t */\nprotected int getDimensionValue( DimensionType d, int referenceLength )\n \t{\n \t\tif ( d == null )\n \t\t{\n \t\t\treturn 0;\n \t\t}\n \t\ttry\n \t\t{\n \t\t\tString units = d.getUnits( );\n \t\t\tif ( units.equals( EngineIRConstants.UNITS_PT )\n \t\t\t\t\t|| units.equals( EngineIRConstants.UNITS_CM )\n \t\t\t\t\t|| units.equals( EngineIRConstants.UNITS_MM )\n \t\t\t\t\t|| units.equals( EngineIRConstants.UNITS_PC )\n \t\t\t\t\t|| units.equals( EngineIRConstants.UNITS_IN ) )\n \t\t\t{\n \t\t\t\tdouble point = d.convertTo( EngineIRConstants.UNITS_PT ) * 1000;\n \t\t\t\treturn (int) point;\n \t\t\t}\n \t\t\telse if ( units.equals( EngineIRConstants.UNITS_PX ) )\n \t\t\t{\n \t\t\t\tdouble point = d.getMeasure( ) / 72.0d * 72000d;\n \t\t\t\treturn (int) point;\n \t\t\t}\n \t\t\telse if ( units.equals( EngineIRConstants.UNITS_PERCENTAGE ) )\n \t\t\t{\n \t\t\t\tdouble point = referenceLength * d.getMeasure( ) / 100.0;\n \t\t\t\treturn (int) point;\n \t\t\t}\n \t\t\telse if ( units.equals( EngineIRConstants.UNITS_EM )\n \t\t\t\t\t|| units.equals( EngineIRConstants.UNITS_EX ) )\n \t\t\t{\n\t\t\t\tdouble point = referenceLength * d.getMeasure( );\n \t\t\t\treturn (int) point;\n \t\t\t}\n \t\t}\n \t\tcatch ( Exception e )\n \t\t{\n \t\t\tlogger.log( Level.WARNING, e.getLocalizedMessage( ) );\n \t\t\treturn 0;\n \t\t}\n \t\treturn 0;\n \t}"} {"path":"downloaded/10_46a09331f1a86a98cda3ef08a192502779c94110_Layout_s.java","method_name":"getDimensionValue","content":"/**\n \t * end current area if it is the last area of content, add bottom box\n \t * property\n \t * \n \t */\nprotected int getDimensionValue( CSSValue value, int referenceLength )\n \t{\n \t\tif ( value != null && ( value instanceof FloatValue ) )\n \t\t{\n \t\t\tFloatValue fv = (FloatValue) value;\n \t\t\tfloat v = fv.getFloatValue( );\n \t\t\tswitch ( fv.getPrimitiveType( ) )\n \t\t\t{\n \t\t\t\tcase CSSPrimitiveValue.CSS_CM :\n \t\t\t\t\treturn (int) ( v * 72000 / 2.54 );\n \n \t\t\t\tcase CSSPrimitiveValue.CSS_IN :\n \t\t\t\t\treturn (int) ( v * 72000 );\n \n \t\t\t\tcase CSSPrimitiveValue.CSS_MM :\n \t\t\t\t\treturn (int) ( v * 7200 / 2.54 );\n \n \t\t\t\tcase CSSPrimitiveValue.CSS_PT :\n \t\t\t\t\treturn (int) ( v * 1000 );\n \t\t\t\tcase CSSPrimitiveValue.CSS_NUMBER :\n \t\t\t\t\treturn (int) v;\n \t\t\t\tcase CSSPrimitiveValue.CSS_PERCENTAGE :\n \n \t\t\t\t\treturn (int) ( referenceLength * v / 100.0 );\n \t\t\t}\n \t\t}\n \t\treturn 0;\n \t}"} {"path":"downloaded/10_46a09331f1a86a98cda3ef08a192502779c94110_Layout_s.java","method_name":"getTableLayoutManager","content":"/**\n \t * end current area if it is the last area of content, add bottom box\n \t * property\n \t * \n \t */\nprotected TableLayout getTableLayoutManager( )\n \t{\n \t\tContainerLayout lm = parent;\n \t\twhile ( lm != null && !( lm instanceof TableLayout ) )\n \t\t{\n \t\t\tlm = lm.getParent( );\n \t\t}\n \t\tif ( lm == null )\n \t\t{\n \t\t\tassert ( false );\n \t\t}\n \t\treturn (TableLayout) lm;\n \t}"} {"path":"downloaded/10_46a09331f1a86a98cda3ef08a192502779c94110_Layout_s.java","method_name":"getParent","content":"/**\n \t * end current area if it is the last area of content, add bottom box\n \t * property\n \t * \n \t */\npublic ContainerLayout getParent( )\n \t{\n \t\treturn parent;\n \t}"} {"path":"downloaded/OrderInvoiceData.java","method_name":"getInvoiceNumber","content":"/**\n     * Gets the value of the invoiceNumber property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\npublic String getInvoiceNumber() {\n        return invoiceNumber;\n    }"} {"path":"downloaded/OrderInvoiceData.java","method_name":"getInvoiceDate","content":"/**\n     * Gets the value of the invoiceDate property.\n     * \n     * @return\n     *     possible object is\n     *     {@link XMLGregorianCalendar }\n     *     \n     */\npublic XMLGregorianCalendar getInvoiceDate() {\n        return invoiceDate;\n    }"} {"path":"downloaded/OrderInvoiceData.java","method_name":"getContractNumber","content":"/**\n     * Gets the value of the contractNumber property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\npublic String getContractNumber() {\n        return contractNumber;\n    }"} {"path":"downloaded/OrderInvoiceData.java","method_name":"getInvoiceAmount","content":"/**\n     * Gets the value of the invoiceAmount property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\npublic String getInvoiceAmount() {\n        return invoiceAmount;\n    }"} {"path":"downloaded/OrderInvoiceData.java","method_name":"getInvoiceQuantity","content":"/**\n     * Gets the value of the invoiceQuantity property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Integer }\n     *     \n     */\npublic Integer getInvoiceQuantity() {\n        return invoiceQuantity;\n    }"} {"path":"downloaded/OrderInvoiceData.java","method_name":"getVendorFax","content":"/**\n     * Gets the value of the vendorFax property.\n     * \n     * <p>\n     * This accessor method returns a reference to the live list,\n     * not a snapshot. Therefore any modification you make to the\n     * returned list will be present inside the JAXB object.\n     * This is why there is not a <CODE>set</CODE> method for the vendorFax property.\n     * \n     * <p>\n     * For example, to add a new item, do as follows:\n     * <pre>\n     *    getVendorFax().add(newItem);\n     * </pre>\n     * \n     * \n     * <p>\n     * Objects of the following type(s) are allowed in the list\n     * {@link String }\n     * \n     * \n     */\npublic List<String> getVendorFax() {\n        if (vendorFax == null) {\n            vendorFax = new ArrayList<String>();\n        }\n        return this.vendorFax;\n    }"} {"path":"downloaded/Conectar.java","method_name":"getConnection","content":"/**\n     * Devuelve una conexion a la base de datos, para poder hacer consultas, ...\n     * @return Un objeto Connection para conectar con la base de datos ya definida en la clase.\n     * @throws javax.naming.NamingException\n     * @throws java.sql.SQLException\n     */\npublic static Connection getConnection() throws NamingException, SQLException {\n\n\n        \n        //System.out.println(\"Conector\");\n        try {\n            //System.out.println(\"Se procede a conectar\");\n            Class.forName(driver).newInstance();\n            Connection connection = DriverManager.getConnection(protocol1, usuario, password);\n            //System.out.println(\"Se ha conectado\");\n            return connection;\n        } catch (InstantiationException ex) {\n            System.out.println(\"error 1\");\n        } catch (IllegalAccessException ex) {\n            System.out.println(\"error 2\");\n        } catch (ClassNotFoundException cnfe) {\n            System.out.println(\"Excepcion Driver\");\n            System.out.println(\"Error excepcion: \"+cnfe.getMessage());\n            cnfe.printStackTrace();\n            throw new SQLException(\"Driver <\" + driver + \"> not found in the classpath.\");\n        }\n        return null;\n\n    }"} {"path":"downloaded/ClassNameCountingEventsConsumer.java","method_name":"getCounters","content":"/**\n     * @return Current counters value\n     */\npublic Map<String, Long> getCounters() {\n        TreeMap<String, Long> response = new TreeMap<>();\n        for (Map.Entry<String, AtomicLong> pair : counters.entrySet()) {\n            response.put(pair.getKey(), pair.getValue().longValue());\n        }\n        return response;\n    }"} {"path":"downloaded/HunspellTestMain.java","method_name":"getDicBaseFileName","content":"/**\n\t * \n\t * baseFileName the base name of the dictionary, passing /dict/da_DK means\n\t * that the files /dict/da_DK.dic and /dict/da_DK.aff get loaded\n\t * \n\t * @param aParentDir\n\t * @return\n\t */\nprivate String getDicBaseFileName(String aParentDir) {\n\t\treturn aParentDir + '/' + CPlatform.getUserLanguage();\n\t}"} {"path":"downloaded/HunspellTestMain.java","method_name":"getDicDir","content":"/**\n\t * The state of Open Source spell checking on Mac OS X\n\t * \n\t * Starting with OS X 10.6 (Snow Leopard) Apple has implemented a near\n\t * identical service to OpenXSpell under the name OpenSpell. Due to the\n\t * confusion resulting from such similar naming, OpenXSpell will now be\n\t * referred to as just Xspell.\n\t * \n\t * If you want to do so just drag a Hunspell dictionary .dic & .aff file\n\t * pair for your language to ~/Library/Spelling or /Library/Spelling. The\n\t * latter location will make it available to all system users.\n\t * \n\t * @return\n\t */\nprivate String getDicDir() {\n\t\tString wDir = null;\n\n\t\tif (System.getProperties().containsKey(\"root\")) {\n\t\t\twDir = System.getProperty(\"root\");\n\t\t}\n\n\t\tif ((wDir == null || wDir.isEmpty()) && CPlatform.isMacOs())\n\t\t\twDir = new File(CPlatform.getUserHome(), \"Library/Spelling\")\n\t\t\t\t\t.getAbsolutePath();\n\n\t\tif (wDir == null || wDir.isEmpty())\n\t\t\twDir = \"/home/ff/projects/hunspell\";\n\t\treturn wDir;\n\t}"} {"path":"downloaded/SqlStatsDao.java","method_name":"getAllRatings","content":"/**\n     * Returns an array of all the reviews in our system\n     * \n     * @return int[] of stars\n     */\npublic int[] getAllRatings() {\n        return new int[] { 1, 3, 5, 3, 4, 2, 4, 3, 2, 1, 2, 5, 1, 1, 2, 5 };\n    }"} {"path":"downloaded/SqlStatsDao.java","method_name":"getAllPrices","content":"/**\n     * Returns an array of all the reviews in our system\n     * \n     * @return int[] of stars\n     */\npublic double[] getAllPrices() {\n        return new double[] { 99.99, 149.00, 49.00, 89.99, 199.99, 205.00, 299.99, 249.99, 175.00, 309.99, 83.00 };\n    }"} {"path":"downloaded/ExampleHdfsDataflowSubmitterTest.java","method_name":"readDirsRecursive","content":"/**\n   * Use our HDFSSource to read our data through all partitions\n   * @param fs HDFS File system\n   * @param hdfsPath Path our data is saved to\n   * @return count of records in HDFS\n   * @throws Exception\n   */\nprivate int readDirsRecursive(FileSystem fs, String hdfsPath) throws Exception{\n    int count = 0;\n    \n    //Configure our HDFS storage object\n    HDFSStorageConfig storageConfig = new HDFSStorageConfig(\"output\", hdfsPath);\n    HDFSStorage storage = new HDFSStorage(registry, fs, storageConfig);\n    \n    //Get our source object from the storage object\n    HDFSSource source = storage.getSource();\n    //Get all source streams\n    SourcePartitionStream[] sourceStream = source.getLatestSourcePartition().getPartitionStreams();\n    //Read from each individual source stream\n    for(int i = 0; i < sourceStream.length; i++) {\n      SourcePartitionStreamReader reader = sourceStream[i].getReader(\"reader-for-stream-\" + i);\n      Message message = null;\n      //Count the number of messages\n      while((message = reader.next(3000)) != null) {\n        count++;\n      }\n      reader.close();\n    }\n    \n    return count;\n  }"} {"path":"downloaded/MybatisPlusConfig.java","method_name":"ean\n    public Mybatis","content":"\n\n    /**\n     * 添加动态表名和乐观锁拦截器\n     *\n     *\nurn Mybatis Plus拦截器\n     */\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor() {\n        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();\n        interceptor.addInnerInterceptor(new OptimisticLockerInnerInterceptor());\n        DynamicTableNameInnerInterceptor dynamicTableNameInnerInterceptor = new DynamicTableNameInnerInterceptor();\n        // 动态修改表名\n        dynamicTableNameInnerInterceptor.setTableNameHandler((sql, tableName) ->\n                JobTableHelper.TABLE_NAME.equals(tableName) ? JobTableHelper.getRealTableName() : tableName);\n        interceptor.addInnerInterceptor(dynamicTableNameIn"} {"path":"downloaded/SearchDao.java","method_name":"getActivitiesById","content":"/**\n\t * \n\t * @param id\n\t * @return\n\t */\npublic Activities getActivitiesById(long id) {\n\t\t String hql = \"from Activities where id = :uuid\";\n\t\t return entityManager.createQuery(hql, Activities.class)\n\t\t\t\t .setParameter(\"uuid\", id)\n\t\t\t\t .getSingleResult();\n\t}"} {"path":"downloaded/SearchDao.java","method_name":"getRegistrations","content":"/**\n\t * \n\t * @param activities_id\n\t * @return\n\t */\npublic List<Registration> getRegistrations(long activities_id) {\n\t\tString hql = \"from Registration where activities_id = :activities_id\";\n\t\treturn entityManager.createQuery(hql, Registration.class).setParameter(\"activities_id\", activities_id)\n\t\t\t\t.getResultList();\n\t}"} {"path":"downloaded/SearchDao.java","method_name":"getRegistrationById","content":"/**\n\t * \n\t * @param uuid\n\t * @param activities_id\n\t * @return\n\t */\npublic Registration getRegistrationById(long uuid, long activities_id) {\n\t\t String hql = \"from Registration where id = :uuid and activities_id = :activities_id\";\n\t\t return entityManager.createQuery(hql, Registration.class)\n\t\t\t\t .setParameter(\"uuid\", uuid)\n\t\t\t\t .setParameter(\"activities_id\", activities_id)\n\t\t\t\t .getSingleResult();\n\t}"} {"path":"downloaded/SearchDao.java","method_name":"searchActivities","content":"/**\n\t * \n\t * @param request\n\t * @return\n\t */\npublic List<Activities> searchActivities(String searchTerm, int index) {\n\t\tString hql;\n\t\tif (searchTerm == null || searchTerm.isEmpty()) {\n\t\t\thql = \"from Activities\";\n\t\t} else {\n\t\t\thql = \"From Activities where title like '%\" + searchTerm + \"%'\";\n\t\t}\n\t\treturn entityManager.createQuery(hql, Activities.class)\n\t\t\t\t.setFirstResult(index)\n\t\t\t\t.setMaxResults(pageSize)\n\t\t\t\t.getResultList();\n\t}"} {"path":"downloaded/SearchDao.java","method_name":"getSearchActivitiesCount","content":"/**\n\t * \n\t * @param searchTerm\n\t * @return\n\t */\npublic int getSearchActivitiesCount(String searchTerm) {\n\t\ttry {\n\t\t\tString hql;\n\t\t\tif (searchTerm == null || searchTerm.isEmpty()) {\n\t\t\t\thql = \"select count(*) from Activities\";\n\t\t\t} else {\n\t\t\t\thql = \"select count(*) From Activities where title like '%\" + searchTerm + \"%'\";\n\t\t\t}\n\t\t\treturn entityManager.createQuery(hql, Long.class)\n\t\t\t\t\t.getSingleResult().intValue();\n\t\t} catch (NoResultException e) {\n\t\t\treturn 0;\n\t\t}\n\t}"} {"path":"downloaded/DoctorInvite.java","method_name":"getINVITEDOCID","content":"/**\n\t * @return the iNVITEDOCID\n\t */\n@Id\n\t@GeneratedValue\n\t@Column(name = \"INVITEDOCID\")\n\tpublic Long getINVITEDOCID() {\n\t\treturn INVITEDOCID;\n\t}"} {"path":"downloaded/DoctorInvite.java","method_name":"getDoctorName","content":"/**\n\t * @return the doctorName\n\t */\n@Column(name = \"DOC_NAME\")\n\tpublic String getDoctorName() {\n\t\treturn doctorName;\n\t}"} {"path":"downloaded/DoctorInvite.java","method_name":"getDoctorNumber","content":"/**\n\t * @return the doctorNumber\n\t */\n@Column(name = \"DOC_NUMBER\")\n\tpublic String getDoctorNumber() {\n\t\treturn doctorNumber;\n\t}"} {"path":"downloaded/DoctorInvite.java","method_name":"getIsCalled","content":"/**\n\t * @return the isCalled\n\t */\n@Column(name = \"IS_CALLED\")\n\tpublic char getIsCalled() {\n\t\treturn isCalled;\n\t}"} {"path":"downloaded/DoctorInvite.java","method_name":"getCallResponse","content":"/**\n\t * @return the callResponse\n\t */\n@Column(name = \"CALL_RESPONSE\")\n\tpublic String getCallResponse() {\n\t\treturn callResponse;\n\t}"} {"path":"downloaded/ArticlesController.java","method_name":"getAll","content":"/**\n     * Creates a new instance of itemController\n     *\n     * @return\n     */\npublic List<Articles> getAll() {\n\n        return articlesFacade.findAll();\n    }"} {"path":"downloaded/ArticlesController.java","method_name":"count","content":"/**\n     * Creates a new instance of itemController\n     *\n     * @return\n     */\npublic int count() {\n\n        return articlesFacade.count();\n    }"} {"path":"downloaded/ArticlesController.java","method_name":"delete","content":"/**\n     * Creates a new instance of itemController\n     *\n     * @return\n     */\npublic String delete(Articles x) {\n\n        articlesFacade.remove(x);\n\n        return null;\n\n    }"} {"path":"downloaded/ArticlesController.java","method_name":"add","content":"/**\n     * Creates a new instance of itemController\n     *\n     * @return\n     */\npublic String add() {\n\n        Articles y = new Articles();\n        y.setIdArticle(Integer.SIZE);\n        y.setDescription(articleBean.getDescription());\n        y.setInventory(articleBean.getInventory());\n        y.setPrice(articleBean.getPrice());\n       // y.setOwner(articleBean.getOwner());\n        \n//        y.setCategory(articleBean.getCategory());\n//        y.setSubCategory(articleBean.getSubcategory());\n\n\n        articlesFacade.create(y);\n\n        return \"index\";\n    }"} {"path":"downloaded/ArticlesController.java","method_name":"edit","content":"/**\n     * Creates a new instance of itemController\n     *\n     * @return\n     */\npublic String edit(Articles i) {\n        articleBean.setIdArticle(i.getIdArticle());\n        articleBean.setDescription(i.getDescription());\n        articleBean.setInventory(i.getInventory());\n        articleBean.setPrice(i.getPrice());\n\n        return \"update\";\n    }"} {"path":"downloaded/ArticlesController.java","method_name":"save","content":"/**\n     * Creates a new instance of itemController\n     *\n     * @return\n     */\npublic String save() {\n\n        Articles i = new Articles(articleBean.getIdArticle());\n\n        i.setDescription(articleBean.getDescription());\n        i.setInventory(articleBean.getIdArticle());\n        i.setPrice(articleBean.getPrice());\n\n        articlesFacade.edit(i);\n\n        return \"index\";\n\n    }"} {"path":"downloaded/ShowArticoliPerCategoriaServlet.java","method_name":"doGet","content":"/**\n\t * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse\n\t *      response)\n\t */\nprotected void doGet(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tHttpSession session = request.getSession();\n\n\t\tif (session.getAttribute(\"utenteAttribute\") == null) {\n\t\t\tresponse.sendRedirect(request.getContextPath());\n\t\t\treturn;\n\t\t}\n\n\t\tString parametroId = request.getParameter(\"idParametro\");\n\t\tArticoloService service = MyServiceFactory.getArticoloServiceInstance();\n\t\tCategoriaService catService = MyServiceFactory.getCategoriaServiceInstance();\n\t\tList<Articolo> result = new ArrayList<>();\n\t\tCategoria input = new Categoria();\n\t\ttry {\n\t\t\tif (parametroId != null && !parametroId.isEmpty()) {\n\t\t\t\tinput = catService.findById(Long.parseLong(parametroId));\n\t\t\t\tresult = service.articoliDaCategoria(input);\n\t\t\t\tinput.setListaArticoli(result);\n\t\t\t\trequest.setAttribute(\"categoria\", input);\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\trequest.getRequestDispatcher(\"showArticoliByCategoria.jsp\").forward(request, response);\n\t}"} {"path":"downloaded/BpCPlanTopicAction.java","method_name":"til.serialize(ob","content":"/**\n\t * \n\t * 构造方法\n\t\n\twrite(JSONUtil.serialize(obj));\n\t}\n\n\tpublic void saveBpCPlanTopic() throws Exception {\n\t\ttry {\n\n\t\t\tString str = request.getParameter(\"isUpdate\");\n\t\t\tString deleteIds = request.getParameter(\"isDelete\");\n\t\t\tObject obj = JSONUtil.deserialize(str);\n\n\t\t\tList<BpCPlanTopic> addList = new ArrayList<BpCPlanTopic>();\n\t\t\tList<BpCPlanTopic> updateList = new ArrayList<BpCPlanTopic>();\n\n\t\t\tList<Map> list = (List<Map>) obj;\n\t\t\tfor (Map data : list) {\n\n\t\t\t\tString topicCode = null;\n\t\t\t\tString topicName = null;\n\t\t\t\tString topicMemo = null;\n\t\t\t\tString displayNo = null;\n\n\t\t\t\tif (data.get(\"topicCode\") != null) {\n\t\t\t\t\ttopicCode = data.get(\"topicCode\").toString();\n\t\t\t\t}\n\n\t\t\t\tif (data.get(\"topicName\") != null) {\n\t\t\t\t\ttopicName = data.get(\"topicName\").toString();\n\t\t\t\t}\n\t\t\t\tif (data.get(\"topicMemo\") != null) {\n\t\t\t\t\ttopicMemo = data.get(\"topicMemo\").toString();\n\t\t\t\t}\n\n\t\t\t\tif (data.get(\"displayNo\") != null) {\n\t\t\t\t\tdisplayNo = data.get(\"displayNo\").toString();\n\t\t\t\t}\n\n\t\t\t\tBpCPlanTopic model = new BpCPlanTopic();\n\n\t\t\t\t// 增加\n\t\t\t\tif (topicCode == null) {\n\t\t\t\t\tif (remote.checkTopicName(topicName) > 0) {\n\t\t\t\t\t\twrite(\"{success: false,msg:'主题名称已被占用!'}\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmodel.setTopicCode(topicCode);\n\t\t\t\t\t\tmodel.setTopicName(topicName);\n\t\t\t\t\t\tmodel.setTopicMemo(topicMemo);\n\t\t\t\t\t\tif (displayNo != null && !displayNo.equals(\"\"))\n\t\t\t\t\t\t\tmodel.setDisplayNo(Long.parseLong(displayNo));\n\n\t\t\t\t\t\tmodel.setEnterpriseCode(employee.getEnterpriseCode());\n\n\t\t\t\t\t\taddList.add(model);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmodel = remote.findById(topicCode);\n\t\t\t\t\tif ((topicName.equals(model.getTopicName()) && remote\n\t\t\t\t\t\t\t.checkTopicName(topicName) > 1)\n\t\t\t\t\t\t\t|| (!topicName.equals(model.getTopicName()) && remote\n\t\t\t\t\t\t\t\t\t.checkTopicName(topicName) > 0)) {\n\t\t\t\t\t\twrite(\"{success: false,msg:'主题名称已被占用!'}\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmodel.setTopicCode(topicCode);\n\t\t\t\t\t\tmodel.setTopicName(topicName);\n\t\t\t\t\t\tmodel.setTopicMemo(topicMemo);\n\t\t\t\t\t\tif (displayNo != null && !displayNo.equals(\"\"))\n\t\t\t\t\t\t\tmodel.setDisplayNo(Long.parseLong(displayNo));\n\n\t\t\t\t\t\tupdateList.add(model);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif (addList.size() > 0)\n\t\t\t\tremote.save(addList);\n\n\t\t\tif (updateList.size() > 0)\n\n\t\t\t\tremote.update(updateList);\n\n\t\t\tif (deleteIds != null && !deleteIds.trim().equals(\"\"))\n\n\t\t\t\tremote.delete(deleteIds);\n\n\t\t\twrite(\"{success: true,msg:'保存成功!'}\");\n\n\t\t} catch"} {"path":"downloaded/BpCPlanTopicAction.java","method_name":"***get/s","content":"/**\n\t * \n\t * 构造方法\n\t\n**************get/set变量方法*********"} {"path":"downloaded/BpCPlanTopicAction.java","method_name":"\t */\n\tpu","content":"/**\n\t * \n\t * 构造方法\n\t\nart to set\n\t */\n\tpublic void setStart(int "} {"path":"downloaded/CompactionService.java","method_name":"getCompactionPlan","content":"/**\n   * Get compaction plan for the provided compactable tablet and possibly submit for compaction.\n   * Plans get added to the planning queue before calling the planningExecutor to get the plan. If\n   * no files are selected, return. Otherwise, submit the compaction job.\n   */\nprivate CompactionPlan getCompactionPlan(CompactionKind kind, Compactable.Files files,\n      Compactable compactable) {\n    PlanningParameters params = new CpPlanParams(kind, compactable, files);\n\n    log.trace(\"Planning compactions {} {} {} {}\", planner.getClass().getName(),\n        compactable.getExtent(), kind, files);\n\n    CompactionPlan plan;\n    try {\n      plan = planner.makePlan(params);\n    } catch (RuntimeException e) {\n      log.debug(\"Planner failed {} {} {} {}\", planner.getClass().getName(), compactable.getExtent(),\n          kind, files, e);\n      throw e;\n    }\n\n    return convertPlan(plan, kind, files.allFiles, files.candidates);\n  }"} {"path":"downloaded/CompactionService.java","method_name":"submitCompactionJob","content":"/**\n   * Get compaction plan for the provided compactable tablet and possibly submit for compaction.\n   * Plans get added to the planning queue before calling the planningExecutor to get the plan. If\n   * no files are selected, return. Otherwise, submit the compaction job.\n   */\nprivate void submitCompactionJob(CompactionPlan plan, Compactable.Files files,\n      Compactable compactable, Consumer<Compactable> completionCallback) {\n    // log error if tablet is metadata and compaction is external\n    var execIds = plan.getJobs().stream().map(cj -> (CompactionExecutorIdImpl) cj.getExecutor());\n    if (compactable.getExtent().isMeta()\n        && execIds.anyMatch(CompactionExecutorIdImpl::isExternalId)) {\n      log.error(\n          \"Compacting metadata tablets on external compactors is not supported, please change \"\n              + \"config for compaction service ({}) and/or table ASAP.  {} is not compacting, \"\n              + \"ignoring plan {}\",\n          myId, compactable.getExtent(), plan);\n      return;\n    }\n\n    Set<CompactionJob> jobs = new HashSet<>(plan.getJobs());\n\n    Collection<SubmittedJob> submitted =\n        submittedJobs.getOrDefault(compactable.getExtent(), List.of());\n    if (!submitted.isEmpty()) {\n      submitted.removeIf(sj -> {\n        // to avoid race conditions, only read status once and use local var for the two compares\n        var status = sj.getStatus();\n        return status != Status.QUEUED && status != Status.RUNNING;\n      });\n    }\n\n    if (reconcile(jobs, submitted)) {\n      for (CompactionJob job : jobs) {\n        CompactionExecutor executor = executors.get(job.getExecutor());\n        var submittedJob = executor.submit(myId, job, compactable, completionCallback);\n        // its important that the collection created in computeIfAbsent supports concurrency\n        submittedJobs.computeIfAbsent(compactable.getExtent(), k -> new ConcurrentLinkedQueue<>())\n            .add(submittedJob);\n      }\n\n      if (!jobs.isEmpty()) {\n        log.trace(\"Submitted compaction plan {} id:{} files:{} plan:{}\", compactable.getExtent(),\n            myId, files, plan);\n      }\n    } else {\n      log.trace(\"Did not submit compaction plan {} id:{} files:{} plan:{}\", compactable.getExtent(),\n          myId, files, plan);\n    }\n  }"} {"path":"downloaded/CompactionService.java","method_name":"convertPlan","content":"/**\n   * Get compaction plan for the provided compactable tablet and possibly submit for compaction.\n   * Plans get added to the planning queue before calling the planningExecutor to get the plan. If\n   * no files are selected, return. Otherwise, submit the compaction job.\n   */\nprivate CompactionPlan convertPlan(CompactionPlan plan, CompactionKind kind,\n      Set<CompactableFile> allFiles, Set<CompactableFile> candidates) {\n\n    if (plan.getClass().equals(CompactionPlanImpl.class)) {\n      return plan;\n    }\n\n    var builder = new CompactionPlanImpl.BuilderImpl(kind, allFiles, candidates);\n\n    for (var job : plan.getJobs()) {\n      Preconditions.checkArgument(job.getKind() == kind, \"Unexpected compaction kind %s != %s\",\n          job.getKind(), kind);\n      builder.addJob(job.getPriority(), job.getExecutor(), job.getFiles());\n    }\n\n    return builder.build();\n  }"} {"path":"downloaded/CompactionService.java","method_name":"isCompactionQueued","content":"/**\n   * Get compaction plan for the provided compactable tablet and possibly submit for compaction.\n   * Plans get added to the planning queue before calling the planningExecutor to get the plan. If\n   * no files are selected, return. Otherwise, submit the compaction job.\n   */\npublic boolean isCompactionQueued(KeyExtent extent) {\n    return submittedJobs.getOrDefault(extent, List.of()).stream()\n        .anyMatch(job -> job.getStatus() == Status.QUEUED);\n  }"} {"path":"downloaded/CompactionService.java","method_name":"configurationChanged","content":"/**\n   * Get compaction plan for the provided compactable tablet and possibly submit for compaction.\n   * Plans get added to the planning queue before calling the planningExecutor to get the plan. If\n   * no files are selected, return. Otherwise, submit the compaction job.\n   */\npublic void configurationChanged(String plannerClassName, Long maxRate,\n      Map<String,String> plannerOptions) {\n    Preconditions.checkArgument(maxRate >= 0);\n\n    var old = this.rateLimit.getAndSet(maxRate);\n    if (old != maxRate) {\n      log.debug(\"Updated compaction service id:{} rate limit:{}\", myId, maxRate);\n    }\n\n    if (this.plannerClassName.equals(plannerClassName) && this.plannerOpts.equals(plannerOptions)) {\n      return;\n    }\n\n    var initParams =\n        new CompactionPlannerInitParams(myId, plannerOptions, new ServiceEnvironmentImpl(context));\n    var tmpPlanner = createPlanner(plannerClassName);\n    tmpPlanner.init(initParams);\n\n    Map<CompactionExecutorId,CompactionExecutor> tmpExecutors = new HashMap<>();\n\n    initParams.getRequestedExecutors().forEach((ceid, numThreads) -> {\n      InternalCompactionExecutor executor = (InternalCompactionExecutor) executors.get(ceid);\n      if (executor == null) {\n        executor =\n            new InternalCompactionExecutor(ceid, numThreads, ceMetrics, readLimiter, writeLimiter);\n      } else {\n        executor.setThreads(numThreads);\n      }\n      tmpExecutors.put(ceid, executor);\n    });\n\n    initParams.getRequestedExternalExecutors().forEach(ceid -> {\n      ExternalCompactionExecutor executor = (ExternalCompactionExecutor) executors.get(ceid);\n      if (executor == null) {\n        executor = externExecutorSupplier.apply(ceid);\n      }\n      tmpExecutors.put(ceid, executor);\n    });\n\n    Sets.difference(executors.keySet(), tmpExecutors.keySet()).forEach(ceid -> {\n      executors.get(ceid).stop();\n    });\n\n    this.plannerClassName = plannerClassName;\n    this.plannerOpts = plannerOptions;\n    this.executors = Map.copyOf(tmpExecutors);\n    this.planner = tmpPlanner;\n\n    log.debug(\"Updated compaction service id:{} planner:{} options:{}\", myId, plannerClassName,\n        plannerOptions);\n\n  }"} {"path":"downloaded/CompactionService.java","method_name":"getCompactionsRunning","content":"/**\n   * Get compaction plan for the provided compactable tablet and possibly submit for compaction.\n   * Plans get added to the planning queue before calling the planningExecutor to get the plan. If\n   * no files are selected, return. Otherwise, submit the compaction job.\n   */\nint getCompactionsRunning(CType ctype) {\n    return executors.values().stream().mapToInt(ce -> ce.getCompactionsRunning(ctype)).sum();\n  }"} {"path":"downloaded/CompactionService.java","method_name":"getCompactionsQueued","content":"/**\n   * Get compaction plan for the provided compactable tablet and possibly submit for compaction.\n   * Plans get added to the planning queue before calling the planningExecutor to get the plan. If\n   * no files are selected, return. Otherwise, submit the compaction job.\n   */\nint getCompactionsQueued(CType ctype) {\n    return executors.values().stream().mapToInt(ce -> ce.getCompactionsQueued(ctype)).sum();\n  }"} {"path":"downloaded/TestGW.java","method_name":"eq\n     *","content":"/**\n     * 发送短信 TODO\n     * \n     * @param protocol void\n     * @throws\n * @return CFeeReq\n     * @throws\n     */\n    private CFeeReq getFeeReq(GwConfig config) {\n\n        CFeeReq feeReq = new CFeeReq(config.getUserName(), null);\n        feeReq.setInfo(\"201008"} {"path":"downloaded/TestGW.java","method_name":"rn CSendR","content":"/**\n     * 发送短信 TODO\n     * \n     * @param protocol void\n     * @throws\nnfig\n     * @return CSendReq\n     * @throws\n     */\n    private CSendReq getSubmit(GwConfig config) {\n        // String spNumber=config.gets;\n        // SgipSubmit submit = new SgipSubmit(1008L, config.getSpCode(),\n        // chargeNumber, userNumber,\n        // corpId, config.getServiceid(), (byte) config.getFeeType(),\n        // config.getFeeValue(),\n        // config.getGivenValue(), (byte) config.getAgentFlag(), (byte) 2,\n        // (byte) 0, \"\", \"\",\n        // (byte) 1, (byte) 0, (byte) 0, (byte) 15, (byte) 0,\n        // content.getBytes());\n        String test = \"测试\";\n        String mySing = \"surge三\";\n        byte mySinByte[] = mySing.getBytes();\n        byte message[] = test.getBytes();\n        String tUser = config.getUserName();\n        String tFrom = \"15013420678\";\n        String tTo = \"15013420678\";\n        CSendReq sendReq = new CSendReq(tUser, tFrom, tTo, 1);\n        sendReq.bFeeUser = 2;\n        sendReq.sFeePhone = \"15013420678\";\n        sendReq.sService = \"SURGESMS\";\n        sendReq.sFeeType = \"02\";\n        sendReq.iFee = 5;\n        sendReq.bFormat = 1;\n        sendReq.iLength = message.length;\n        sendReq.bMessage = message;\n        sendReq.bSign = mySinByte;\n        s"} {"path":"downloaded/PriorityQueueBase.java","method_name":"less","content":"/**\n     * Return whether element unionCounts is less than element j\n     * @param i index of first node to compare\n     * @param j index of second node to compare\n     * @return true if <code>pq[unionCounts]</code> less than <code>pq[j]</code>\n     */\nprotected boolean less(int i, int j)\n    {\n        return pq[i].compareTo(pq[j]) < 0;\n    }"} {"path":"downloaded/AccessControlServiceTest.java","method_name":"testPostOverrideAccess","content":"/**\n     * User has a normal access to a category but also has extended permissions to one of the discussions in that category.\n     * Test that he can access post inside his discussion and also other posts in category properly.\n     */\n@Test\n    public void testPostOverrideAccess() {\n        // create user's discussion\n        Discussion usersDiscussion = new Discussion(-11L, \"Users own discussion\");\n        usersDiscussion.setTopic(topic);\n        Post p = new Post(\"Post in user's discussion\");\n        p.setDiscussion(usersDiscussion);\n\n        // set permissions\n        // can create and view posts in category\n        PermissionData categoryPostPerms = new PermissionData(true, false, false, true);\n        // has complete control over posts in his discussion\n        PermissionData discussionPostPerms = new PermissionData(true, true, true, true);\n        pms.configurePostPermissions(testUser, usersDiscussion, discussionPostPerms);\n        pms.configurePostPermissions(testUser, category, categoryPostPerms);\n\n        // override mock so that correct permissions are returned\n        when(permissionDao.findForUser(any(IDiscussionUser.class), anyLong(), anyLong(), anyLong())).then(invocationOnMock -> {\n            Long discusionId = (Long) invocationOnMock.getArguments()[1];\n            if(discusionId != null && discusionId == -11L) {\n                return testPermissions;\n            } else {\n                return testPermissions.subList(1,2);\n            }\n        });\n\n        // test access control in category\n        assertTrue(accessControlService.canViewPosts(discussion), \"Test user should be able to view posts in discussion!\");\n        assertTrue(accessControlService.canAddPost(discussion), \"Test user should be able to add posts in discussion!\");\n        assertFalse(accessControlService.canEditPost(post), \"Test user should not be able to edit posts in discussion!\");\n        assertFalse(accessControlService.canRemovePost(post), \"Test user should not be able to delete posts from discussion!\");\n\n        // test access in user's discussion\n        assertTrue(accessControlService.canViewPosts(usersDiscussion), \"Test user should be able to view posts in his discussion!\");\n        assertTrue(accessControlService.canAddPost(usersDiscussion), \"Test user should be able to add posts in his discussion!\");\n        assertTrue(accessControlService.canEditPost(p), \"Test user should be able to edit post in his discussion!\");\n        assertTrue(accessControlService.canRemovePost(p), \"Test user should be able to remove post from his discussion!\");\n    }"} {"path":"downloaded/AccessControlServiceTest.java","method_name":"testPostOverrideAccess2","content":"/**\n     * User has an extended access to a category but also has limied permissions to one of the discussions in that category.\n     * Test that he can access post inside his discussion and also other posts in category properly.\n     */\n@Test\n    public void testPostOverrideAccess2() {\n        // create discussion which will be limited for user\n        Discussion limitedDiscussion = new Discussion(-11L, \"Limited discussion\");\n        limitedDiscussion.setTopic(topic);\n        Post p = new Post(\"Post in limited discussion\");\n        p.setDiscussion(limitedDiscussion);\n\n        // set permissions\n        // has full access to every post in category except the ones in the limited discussion\n        // note that limitedDiscussion permission is added as the second one so that sorting in PermissionService.checkPermissions is tested also\n        PermissionData categoryPostPerms = new PermissionData(true, true, true, true);\n        PermissionData discussionPostPerms = new PermissionData(true, false, false, true);\n        pms.configurePostPermissions(testUser, limitedDiscussion, discussionPostPerms);\n        pms.configurePostPermissions(testUser, category, categoryPostPerms);\n\n        // override mock so that correct permissions are returned\n        when(permissionDao.findForUser(any(IDiscussionUser.class), anyLong(), anyLong(), anyLong())).then(invocationOnMock -> {\n            Long discusionId = (Long) invocationOnMock.getArguments()[1];\n            if(discusionId != null && discusionId == -11L) {\n                return testPermissions;\n            } else {\n                return testPermissions.subList(1,2);\n            }\n        });\n\n        // test access control in category\n        assertTrue(accessControlService.canViewPosts(discussion), \"Test user should be able to view posts in discussion!\");\n        assertTrue(accessControlService.canAddPost(discussion), \"Test user should be able to add posts in discussion!\");\n        assertTrue(accessControlService.canEditPost(post), \"Test user should be able to edit posts in discussion!\");\n        assertTrue(accessControlService.canRemovePost(post), \"Test user should be able to delete posts from discussion!\");\n\n        // test access in user's discussion\n        assertTrue(accessControlService.canViewPosts(limitedDiscussion), \"Test user should be able to view posts in limited discussion!\");\n        assertTrue(accessControlService.canAddPost(limitedDiscussion), \"Test user should be able to add posts in limited discussion!\");\n        assertFalse(accessControlService.canEditPost(p), \"Test user should not be able to edit post in limited discussion!\");\n        assertFalse(accessControlService.canRemovePost(p), \"Test user should not be able to remove post from limited discussion!\");\n    }"} {"path":"downloaded/SimpleFeedReader.java","method_name":"getFeed","content":"/**\n     * Parse feed\n     * @param feedURLObject the feed url\n     * @return the feed without entries summary\n     * @see #getFeed(URL, Date, boolean)\n     */\npublic Feed getFeed(URL feedURLObject) {\n        return getFeed(feedURLObject, null, false);\n    }"} {"path":"downloaded/SimpleFeedReader.java","method_name":"getFeed","content":"/**\n     * Parse feed and return only those entries with a publication date before the specified date\n     * @param feedURLObject the feed url\n     * @param lastUpdatedDate last updated date\n     * @return the feed without entries summary\n     * @see #getFeed(URL, Date, boolean)\n     */\npublic Feed getFeed(URL feedURLObject, Date lastUpdatedDate) {\n        return getFeed(feedURLObject, lastUpdatedDate, false);\n    }"} {"path":"downloaded/SimpleFeedReader.java","method_name":"getFeed","content":"/**\n     * Parse feed with the entries summary if the boolean parameter is true \n     * @param feedURLObject the feed url\n     * @param summary indicate if read summary from entries\n     * @return the feed\n     * @see #getFeed(URL, Date, boolean)\n     */\npublic Feed getFeed(URL feedURLObject, boolean summary) {\n        return getFeed(feedURLObject, null, summary);\n    }"} {"path":"downloaded/SimpleFeedReader.java","method_name":"getFeed","content":"/**\n     * Parse feed\n     * @param feedURL the feed url\n     * @return the feed without entries summary\n     * @throws java.net.MalformedURLException with an url not valid\n     * @see #getFeed(String, Date, boolean)\n     */\npublic Feed getFeed(String feedURL) throws MalformedURLException {\n        return getFeed(feedURL, null, false);\n    }"} {"path":"downloaded/SimpleFeedReader.java","method_name":"getFeed","content":"/**\n     * Parse feed and return only those entries with a publication date before the specified date\n     * @param feedURL the feed url\n     * @param lastUpdatedDate last updated date\n     * @return the feed without entries summary\n     * @throws java.net.MalformedURLException with an url not valid\n     * @see #getFeed(String, Date, boolean)\n     */\npublic Feed getFeed(String feedURL, Date lastUpdatedDate) throws MalformedURLException {\n        return getFeed(feedURL, lastUpdatedDate, false);\n    }"} {"path":"downloaded/SimpleFeedReader.java","method_name":"getFeed","content":"/**\n     * Parse feed with the entries summary if the boolean parameter is true \n     * @param feedURL the feed url\n     * @param summary indicate if read summary from entries\n     * @return the feed\n     * @throws java.net.MalformedURLException with an url not valid\n     * @see #getFeed(String, Date, boolean)\n     */\npublic Feed getFeed(String feedURL, boolean summary) throws MalformedURLException {\n        return getFeed(feedURL, null, summary);\n    }"} {"path":"downloaded/SimpleFeedReader.java","method_name":"getFeed","content":"/**\n     * Parse feed with the entries summary if the boolean parameter is true. \n     * Return only those entries with a publication date before the specified date  \n     * @param feedURL the feed url\n     * @param lastUpdatedDate last updated date\n     * @param summary indicate if read summary from entries\n     * @return the feed\n     * @throws java.net.MalformedURLException with an url not valid\n     * @see #getFeed(URL, Date, boolean)\n     */\npublic Feed getFeed(String feedURL, Date lastUpdatedDate, boolean summary) throws MalformedURLException {\n        return getFeed(new URL(feedURL), lastUpdatedDate, summary);\n    }"} {"path":"downloaded/SimpleFeedReader.java","method_name":"getFeed","content":"/**\n     * Parse feed with the entries summary if the boolean parameter is true.\n     * Return only those entries with a publication date before the specified date\n     * @param feedURLObject the feed url\n     * @param lastUpdatedDate last updated date\n     * @param summary indicate if read summary from entries\n     * @return the feed\n     */\npublic Feed getFeed(URL feedURLObject, Date lastUpdatedDate, boolean summary) {\n        inputStream = null;\n        FeedHandler feedHandler = new FeedHandler(lastUpdatedDate, summary);\n        if (xmlReader != null && feedURLObject != null) {\n            try {\n                String encoding = detectEncoding(feedURLObject);\n                if (inputStream == null) {\n                    if (\"file\".equals(feedURLObject.getProtocol())) {\n                        inputStream = feedURLObject.openStream();\n                    } else {\n                        inputStream = client.loadInputStream(feedURLObject);\n                    }\n                }\n                InputSource inputSource = new InputSource(inputStream);\n                if (encoding != null) {\n                    inputSource.setEncoding(encoding);\n                }\n\n                xmlReader.setContentHandler(feedHandler);\n                xmlReader.parse(inputSource);\n\n            } catch (EndSAXException e) {\n                // No problem\n            } catch (IOException e) {\n                System.err.println(e.getMessage());\n            } catch (SAXException e) {\n                System.err.println(e.getMessage());\n            } finally {\n                if (inputStream != null) {\n                    try {\n                        inputStream.close();\n                    } catch (IOException e) {\n                        System.err.println(e.getMessage());\n                    }\n                }\n            }\n        }\n        return feedHandler.getFeed();\n    }"} {"path":"downloaded/SimpleFeedReader.java","method_name":"getFirstLine","content":"/**\n     * Parse feed with the entries summary if the boolean parameter is true.\n     * Return only those entries with a publication date before the specified date\n     * @param feedURLObject the feed url\n     * @param lastUpdatedDate last updated date\n     * @param summary indicate if read summary from entries\n     * @return the feed\n     */\nprivate String getFirstLine(InputStream is) {\n        if (is != null) {\n            String line = null;\n            try {\n                BufferedReader reader = new BufferedReader(new InputStreamReader(is), 1024);\n                line = reader.readLine();\n            } catch (IOException e) {\n                // \n            }\n            return line;\n        } else {        \n            return \"\";\n        }\n    }"} {"path":"downloaded/SimpleFeedReader.java","method_name":"detectEncoding","content":"/**\n     * Parse feed with the entries summary if the boolean parameter is true.\n     * Return only those entries with a publication date before the specified date\n     * @param feedURLObject the feed url\n     * @param lastUpdatedDate last updated date\n     * @param summary indicate if read summary from entries\n     * @return the feed\n     */\nprivate String detectEncoding(URL urlObj) {\n        String encoding = null;\n        try {\n            URLConnection connection = urlObj.openConnection();\n            encoding = connection.getContentEncoding();\n            if (encoding == null || encoding.equalsIgnoreCase(\"none\")) {\n                inputStream = connection.getInputStream();\n                boolean markSupported = inputStream.markSupported();\n                if (markSupported) {\n                    inputStream.mark(2048);\n                }\n                String line = getFirstLine(inputStream).toLowerCase();\n                Pattern pattern = Pattern.compile(\"encoding=[\\\"']([\\\\w\\\\-_]+)[\\\"']\");\n                Matcher matcher = pattern.matcher(line);\n                if (matcher.find()) {\n                    encoding = matcher.group(1);\n                }\n                if (markSupported) {\n                    inputStream.reset();\n                } else {\n                    inputStream.close();\n                    inputStream = null;\n                }\n            }\n        } catch (MalformedURLException e) {\n            //\n        } catch (IOException e) {\n            // \n        }\n        return encoding;\n    }"} {"path":"downloaded/WdyQuestionOption.java","method_name":"getQsId","content":"/**\n     * @return qs_id\n     */\npublic String getQsId() {\n        return qsId;\n    }"} {"path":"downloaded/WdyQuestionOption.java","method_name":"getOptionKey","content":"/**\n     * @return option_key\n     */\npublic String getOptionKey() {\n        return optionKey;\n    }"} {"path":"downloaded/WdyQuestionOption.java","method_name":"getOptionVal","content":"/**\n     * @return option_val\n     */\npublic String getOptionVal() {\n        return optionVal;\n    }"} {"path":"downloaded/WdyQuestionOption.java","method_name":"getOptionSort","content":"/**\n     * @return option_sort\n     */\npublic Integer getOptionSort() {\n        return optionSort;\n    }"} {"path":"downloaded/WdyQuestionOption.java","method_name":"getCreateTime","content":"/**\n     * @return create_time\n     */\npublic Date getCreateTime() {\n        return createTime;\n    }"} {"path":"downloaded/WdyQuestionOption.java","method_name":"getUpdateTime","content":"/**\n     * @return update_time\n     */\npublic Date getUpdateTime() {\n        return updateTime;\n    }"} {"path":"downloaded/WdyQuestionOption.java","method_name":"getDelFlag","content":"/**\n     * @return del_flag\n     */\npublic Integer getDelFlag() {\n        return delFlag;\n    }"} {"path":"downloaded/WoodlotInput.java","method_name":"checkNumber","content":"/**\n     * @return whether a number is not null, and positive\n     */\nprivate boolean checkNumber()\n    {\n        boolean isEmpty = numStandsEdit.getText().toString().isEmpty();\n        boolean isPositive = false;\n        if(!isEmpty) {\n            isPositive = Integer.parseInt(numStandsEdit.getText().toString()) >= 1;\n        }\n        return !isEmpty && isPositive;\n    }"} {"path":"downloaded/InterproceduralCallGraphVertex.java","method_name":"getXmethod","content":"/**\n     * @return Returns the xmethod.\n     */\npublic XMethod getXmethod() {\n        return xmethod;\n    }"} {"path":"downloaded/AbstractBaseRestController.java","method_name":"handleRestRequestException","content":"/**\n   * Is called whenever an {@link RequestException} in a controller method is thrown.\n   * \n   * @param exception\n   *          the exception that arose\n   * @param request\n   *          the request that caused the exception\n   * @return an {@link RestRequestErrorDto} for the respective error\n   */\n@ExceptionHandler(RequestException.class)\n  @ResponseStatus(HttpStatus.BAD_REQUEST)\n  @ResponseBody\n  public final RestRequestErrorDto handleRestRequestException(final RequestException exception, final HttpServletRequest request) {\n    return new RestRequestErrorDto(exception.getType(), exception.getMessage());\n  }"} {"path":"downloaded/AbstractBaseRestController.java","method_name":"handleException","content":"/**\n   * Is called whenever an {@link Exception} in a controller method is thrown.\n   * \n   * @param exception\n   *          the exception that arose\n   * @param request\n   *          the request that caused the exception\n   * @return an error message\n   */\n@ExceptionHandler(Exception.class)\n  @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)\n  @ResponseBody\n  public final RestRequestErrorDto handleException(final Exception exception, final HttpServletRequest request) {\n    LogManager.getLogger(getClass()).error(String.format(EXCEPTION_MESSAGE, request.getRequestURI()), exception);\n    return new RestRequestErrorDto(ErrorType.GENERAL, exception.getMessage());\n  }"} {"path":"downloaded/MainActivityPresenterImpl.java","method_name":"ataError(mErrC","content":"/**\n     * 由于接口请求次数限制，加上影讯�\n                         mActivity.onDataError(mErrCode, msg);\n                        }\n                    }\n\n                    @Override\n     "} {"path":"downloaded/MLNTextBuilder.java","method_name":"toString","content":"/** Return the string. */\npublic String toString() { return mlnText.toString(); }"} {"path":"downloaded/MLNTextBuilder.java","method_name":"predicate","content":"/**\n     * Register a predicate.\n     * @param closed True if this is a closed-world predicate.\n     * @param name The name of the predicate.\n     * @param argTypes The types of the arguments of the predicate\n     * @return this\n     */\nprivate PredicateBuilder predicate(boolean closed, String name, String... argTypes) {\n      mlnText.predicates.add( new MLNText.Predicate(name, argTypes[0], argTypes[1]) );\n      return this;\n    }"} {"path":"downloaded/MLNTextBuilder.java","method_name":"closedPredicate","content":"/**\n     * Register a closed-world predicate.\n     * That is, the only true instantiations of the predicate are those defined in the evidence.\n     * @param name The name of the predicate.\n     * @param argTypes The types of the arguments of the predicate\n     * @return this\n     */\npublic PredicateBuilder closedPredicate(String name, String... argTypes) { return predicate(true, name, argTypes); }"} {"path":"downloaded/MLNTextBuilder.java","method_name":"openPredicate","content":"/**\n     * Register a open-world predicate.\n     * @param name The name of the predicate.\n     * @param argTypes The types of the arguments of the predicate\n     * @return this\n     */\npublic PredicateBuilder openPredicate(String name, String... argTypes) { return predicate(false, name, argTypes); }"} {"path":"downloaded/MLNTextBuilder.java","method_name":"endPredicates","content":"/**\n     * Register a open-world predicate.\n     * @param name The name of the predicate.\n     * @param argTypes The types of the arguments of the predicate\n     * @return this\n     */\npublic MLNTextBuilder endPredicates() {\n      return MLNTextBuilder.this;\n    }"} {"path":"downloaded/MLNTextBuilder.java","method_name":"or","content":"/**\n     * The internal implementation of adding an \"or\" term (single predicate) into the clause.\n     * @param negate If true, this predicate is negated.\n     * @param predicate The predicate name to add.\n     * @param variables The predicate variables (or constants) to include.\n     * @return this\n     */\nprivate SingleRuleBuilder or(boolean negate, String predicate, String... variables) {\n      literals.add( new MLNText.Literal(!negate, predicate, variables[0], variables[1]));\n      return this;\n    }"} {"path":"downloaded/MLNTextBuilder.java","method_name":"equals","content":"/**\n     * Enforce two terms to be '='\n     * @param variable1 The predicate variables (or constants) to include.\n     * @param variable2 The predicate variables (or constants) to include.\n     * @return this\n     */\npublic SingleRuleBuilder equals(String variable1, String variable2 ) {\n      return or(true, \"=\", variable1, variable2);\n    }"} {"path":"downloaded/MLNTextBuilder.java","method_name":"notEquals","content":"/**\n     * Enforce two terms to be '='\n     * @param variable1 The predicate variables (or constants) to include.\n     * @param variable2 The predicate variables (or constants) to include.\n     * @return this\n     */\npublic SingleRuleBuilder notEquals(String variable1, String variable2 ) {\n      return or(false, \"=\", variable1, variable2);\n    }"} {"path":"downloaded/MLNTextBuilder.java","method_name":"or","content":"/**\n     * Add another predicate to this or clause, not negated. For example, add Foo(x) to yield (Bar(x) v Foo(x)).\n     * @param predicate The predicate name to add.\n     * @param variables The predicate variables (or constants) to include.\n     * @return this\n     */\npublic SingleRuleBuilder or(String predicate, String... variables) { return or(false, predicate, variables); }"} {"path":"downloaded/MLNTextBuilder.java","method_name":"orNot","content":"/**\n     * Add a negated predicate to this or clause, not negated. For example, add !Foo(x) to yield (Bar(x) v !Foo(x)).\n     * @param predicate The predicate name to add.\n     * @param variables The predicate variables (or constants) to include.\n     * @return this\n     */\npublic SingleRuleBuilder orNot(String predicate, String... variables) { return or(true, predicate, variables); }"} {"path":"downloaded/MLNTextBuilder.java","method_name":"endRule","content":"/**\n     * Finish constructing this rule, and add it to the list of rules in the network.\n     * @param weight The weight to add this rule with.\n     * @return this\n     */\npublic RuleBuilder endRule(double weight) {\n      if( literals.size() > 0 ) {\n        mlnText.rules.add(new MLNText.Rule(weight, literals));\n      }\n      return new RuleBuilder();\n    }"} {"path":"downloaded/MLNTextBuilder.java","method_name":"endRule","content":"/** @see edu.stanford.nlp.kbp.slotfilling.evaluate.inference.MLNTextBuilder.SingleRuleBuilder#endRule()   */\npublic RuleBuilder endRule() {\n      return endRule(Double.POSITIVE_INFINITY);\n    }"} {"path":"downloaded/MLNTextBuilder.java","method_name":"newRule","content":"/**\n     * Start constructing a new Rule to add to the Markov Logic Network.\n     * You can close this rule by calling endRule()\n     * @return this\n     */\npublic SingleRuleBuilder newRule() {\n      return new SingleRuleBuilder();\n    }"} {"path":"downloaded/MLNTextBuilder.java","method_name":"newRule","content":"/**\n     *\n     * Start constructing a new named Rule to add to the Markov Logic Network.\n     * You can close this rule by calling endRule()\n     * @param name The user-specified name for the rule. This should be unique\n     * @return this\n     */\npublic SingleRuleBuilder newRule(String name) {\n      return new SingleRuleBuilder(name);\n    }"} {"path":"downloaded/MLNTextBuilder.java","method_name":"endRules","content":"/**\n     *\n     * Start constructing a new named Rule to add to the Markov Logic Network.\n     * You can close this rule by calling endRule()\n     * @param name The user-specified name for the rule. This should be unique\n     * @return this\n     */\npublic MLNTextBuilder endRules() {\n      return MLNTextBuilder.this;\n    }"} {"path":"downloaded/DetailQueryInterfaceNodeDialog.java","method_name":"open","content":"/**\n    * Open the dialog\n    * \n    * @return the result\n    */\npublic int open() {\n      try {\n         nodeProperties = (DetailQueryInterfaceProperties) node.getProperties().clone();\n      }\n      catch (CloneNotSupportedException e) {\n         e.printStackTrace();\n      }\n      List<CodeSet> cs = diagram.getCodeSetList();\n      if (cs == null) cs = new ArrayList<CodeSet>();\n      codeSetNames = new String[cs.size() + 1];\n      codeSetValues = new String[cs.size() + 1];\n      codeSetNames[0] = \"\";\n      codeSetValues[0] = \"\";\n      for (int i = 0; i < cs.size(); i++) {\n         codeSetNames[i + 1] = cs.get(i).getCnName();\n         codeSetValues[i + 1] = cs.get(i).getName();\n      }\n\n      createContents();\n      shell.setLocation(getParentLocation());\n      shell.open();\n      shell.layout();\n      Display display = getParent().getDisplay();\n      while (!shell.isDisposed()) {\n         if (!display.readAndDispatch()) display.sleep();\n      }\n      return result;\n   }"} {"path":"downloaded/DetailQueryInterfaceNodeDialog.java","method_name":"    fd_btnDown","content":"/**\n    * Create contents of the dialog\n    */\normData();\n      fd_btnDown.top = new FormAttachment(tblShowConfig, 1);\n      fd_btnDown.width = 20;\n      fd_btnDown.height = 20;\n      fd_btnDown.left = new FormAttachment(btnUp, 1);\n      btnDown.setLayoutData(fd_btnDown);\n      btnDown.setText(\"button\");\n\n      //\n      init();\n   }\n\n   private void loadFieldsInfo(DataTable dt) {\n      List<DataField> list = new ArrayList<DataField>();\n      String sql = \"select id,name,cn_name as cname,data_type as dataType,is_primary as isPk from t_resource_column where table_id=\" + dt.getId();\n      Integer itmp;\n      String stmp;\n      Connection conn = null;\n      Statement stat = null;\n      ResultSet rs = null;\n\n      try {\n         conn = DbConnectionManager.getConnection();\n         if (conn != null) {\n            stat = conn.createStatement();\n            rs = stat.executeQuery(sql);\n\n            if (rs == null) return;\n            while (rs.next()) {\n               DataField df = new DataField();\n\n               itmp = rs.getInt(\"id\");\n               if (rs.wasNull()) df.setId(\"\");\n               else df.setId(itmp.toString());\n\n               stmp = rs.getString(\"cname\");\n               if (rs.wasNull()) df.setCnName(\"\");\n               else df.setCnName(stmp);\n\n               stmp = rs.getString(\"dataType\");\n               if (rs.wasNull()) df.setDataType(\"\");\n               else df.setDataType(stmp);\n\n               stmp = rs.getString(\"name\");\n               if (rs.wasNull()) {\n                  df.setName(\"\");\n                  df.setAliasName(\"\");\n               }\n               else {\n                  df.setName(stmp);\n                  df.setAliasName(stmp);\n                  String stmp1 = rs.getString(\"isPk\");\n                  if (!rs.wasNull() && stmp1.equals(\"1\")) dt.setPkName(stmp);\n               }\n               df.setOutput(Consts.YES);\n               df.setSortDirect(\"\");\n               df.setSortNo(\"\");\n               df.setAggregate(\"\");\n               list.add(df);\n            }\n            conn.commit();\n         }\n      }\n "} {"path":"downloaded/DetailQueryInterfaceNodeDialog.java","method_name":"tFields(dataField","content":"/**\n    * Create contents of the dialog\n    */\nProperties.setFields(dataFieldList);\n      nodeProperties.setFilters(filterList);\n      nodeProperties.setFieldConfigs(configList);\n      \n     // DiagramParameterUtil.FilterConvertDiagramParameter(diagram, filterList, dataFieldList);\n      \n      node.setProperties(nodeProperties);\n   }\n\n   protected Shell shell;\n\n   public Point getParentLocation() {\n      Shell shell = g"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"getWeights1D","content":"/**\n   * Sets weights that determine how much each sample in f and g \n   * influences the esimtimate of the inverse wavelets. The weighting\n   * system created is a 2D gaussian.\n   * @param peak the maximum height of the gaussian curve.\n   * @param low the value the gaussian falls off towards.\n   * @param itmin the first sample to have a weight of boxVal.\n   * @param itmax the last sample to have a weight of boxVal.\n   * @param ixmin the first space sample to have a weight of boxVal.\n   * @param ixmax the last space sample to have a weight of boxVal.\n   * @param ntf the length of the weighting vector (should be the length of f).\n   * @param nx the number of space samples in the weighting vector (should be nx)\n   */\npublic float[] getWeights1D() {\n    return _w1D;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"getWeights2D","content":"/**\n   * Sets weights that determine how much each sample in f and g \n   * influences the esimtimate of the inverse wavelets. The weighting\n   * system created is a 2D gaussian.\n   * @param peak the maximum height of the gaussian curve.\n   * @param low the value the gaussian falls off towards.\n   * @param itmin the first sample to have a weight of boxVal.\n   * @param itmax the last sample to have a weight of boxVal.\n   * @param ixmin the first space sample to have a weight of boxVal.\n   * @param ixmax the last space sample to have a weight of boxVal.\n   * @param ntf the length of the weighting vector (should be the length of f).\n   * @param nx the number of space samples in the weighting vector (should be nx)\n   */\npublic float[][] getWeights2D() {\n    return _w2D;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"getInverseA","content":"/**\n   * Calculates one inverse wavelet (a) by warping one sequence to another.\n   * The sequences are related by warping such that f[t] ~ g[u[t]] if both sequences had \n   * the same wavelet. \n   * This method solves for the eigenvector corresponding to the smallest eigenvalue\n   * of matrix Z. \n   * Z = D'D\n   * D = (F-SG) \n   * The eigenvector is the wavelet in f and g.\n   */\npublic float[] getInverseA(\n    int na, int ka, float[] u, float[] f, float[] g)\n  {\n    Check.argument(-na<ka,\"-na<ka\");\n    Check.argument(ka<=0,\"ka<=0\");\n\n    //Set default weights (equal weight to all samples)\n    if (_weights==false) {\n      int nf = f.length;\n      _w1D = fillfloat(1.0f,nf);\n    }\n    \n    DMatrix z = computeZ(na,ka,u,f,g);\n    _z = z;\n    \n    float[] a = new float[na];\n    DMatrixEvd evd = new DMatrixEvd(z);\n    //System.out.println(\"z\");\n    //System.out.println(z.toString());\n    //System.out.println(evd.getD().toString());\n    //System.out.println(evd.getV().toString());\n    double[][][] eigvalvect = sort(evd.getD().get(), evd.getV().get());\n    _eigval = eigvalvect[0];\n    _eigvect = eigvalvect[1];\n    //dump(_eigval);\n    //dump(_eigvect);\n\n    for (int i=0; i<na; ++i) {\n      a[i] = (float) _eigvect[i][0];\n    }\n    _a = a;\n    //System.out.println(\"z\");\n    //System.out.println(z.toString());\n    //System.out.println(\"V\");\n    //System.out.println(evd.getV().toString());//Smallest eigenvalue position (0,0) in D\n    //System.out.println(evd.getV().get(0,1));//Smallest eigenvalue position (0,0) in D\n    //System.out.println(\"D\");\n    //System.out.println(evd.getD().toString());//Smallest eigenvalue position (0,0) in D\n    //System.out.println(evd.getD().get(0,0));\n\n    return a;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"getInverseA","content":"/**\n   * Calculates one inverse wavelets a by warping one sequence to another.\n   * The sequences are related by warping such that f[t] ~ g[u[t]] if both sequences had \n   * the same wavelet. \n   * This method solves for the eigenvector corresponding to the smallest eigenvalue\n   * of matrix Z. \n   * Z = D'D\n   * D = (F-SG) \n   * The eigenvector is the wavelet in f and g.\n   */\npublic float[] getInverseA(\n    int na, int ka, float[][] u, float[][] f, float[][] g)\n  {\n    Check.argument(-na<ka,\"-na<ka\");\n    Check.argument(ka<=0,\"ka<=0\");\n\n    //Set default weights (equal weight to all samples)\n    if (_weights==false) {\n      int nf = f.length;\n      _w1D = fillfloat(1.0f,nf);\n    }\n\n    Stopwatch sw = new Stopwatch(); \n    sw.start();\n    DMatrix z = computeZ(na,ka,u,f,g);\n    sw.stop();\n    System.out.println(\"time = \"+sw.time());\n    _z = z;\n    \n    float[] a = new float[na];\n    DMatrixEvd evd = new DMatrixEvd(z);\n    double[][][] eigvalvect = sort(evd.getD().get(), evd.getV().get());\n    _eigval = eigvalvect[0];\n    _eigvect = eigvalvect[1];\n    //System.out.println(\"z\");\n    //System.out.println(z.toString());//Smallest eigenvalue position (0,0) in D\n    //System.out.println(\"V\");\n    //System.out.println(evd.getV().toString());//Smallest eigenvalue position (0,0) in D\n    //System.out.println(evd.getV().get(0,1));//Smallest eigenvalue position (0,0) in D\n    //System.out.println(\"D\");\n    //System.out.println(evd.getD().toString());//Smallest eigenvalue position (0,0) in D\n    //System.out.println(evd.getD().get(0,0));\n    //_eigval = evd.getD().get();//eigvalvect[0];\n    //_eigvect = evd.getV().get();//eigvalvect[1];\n    //dump(_eigval);\n\n    for (int i=0; i<na; ++i) {\n      a[i] = (float) _eigvect[i][0];\n    }\n    _a = a;\n\n    return a;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"computeZ","content":"/**\n   * Calculates one inverse wavelets a by warping one sequence to another.\n   * The sequences are related by warping such that f[t] ~ g[u[t]] if both sequences had \n   * the same wavelet. \n   * This method solves for the eigenvector corresponding to the smallest eigenvalue\n   * of matrix Z. \n   * Z = D'D\n   * D = (F-SG) \n   * The eigenvector is the wavelet in f and g.\n   */\npublic DMatrix computeZ(int na, int ka, float[] u, float[] f, float[] g) {\n    DMatrix z = new DMatrix(na,na);\n    //Z = (F-SG)'(F-SG) = F'F+G'S'SG+F'SG+G'S'F\n    double ffij = 0.0;\n    double gssgij = 0.0;\n    double fsgij = 0.0;\n    double zij = 0.0;\n    double zji = 0.0;\n    Warper warp = new Warper();\n    for (int ia=0,lagi=ka; ia<na; ++ia,++lagi) {\n      System.out.println(\"ia = \"+ia);\n      float[] dfi = delay(lagi,f);\n      float[] dgi = delay(lagi,g);\n      float[] sldgi = warp.applyS(u,dgi);\n      for (int ja=0,lagj=ka; ja<na; ++ja,++lagj) {\n        float[] dfj = delay(lagj,f);\n        float[] dgj = delay(lagj,g);\n        float[] sldgj = warp.applyS(u,dgj);\n        ffij = dot(dfi,dfj);\n        gssgij = dot(sldgi,sldgj);\n        fsgij = -dot(dfi,sldgj);\n        zij = ffij + gssgij + fsgij + z.get(ia,ja);\n        z.set(ia,ja,zij);\n        zji = fsgij + z.get(ja,ia);\n        z.set(ja,ia,zji);\n      }\n    }\n\n    //Stabilize Z to be symmetric positive definite\n    for (int ia=0; ia<na; ++ia)\n      z.set(ia,ia,z.get(ia,ia)*_sfac);\n    return z;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"computeZ","content":"/**\n   * Calculates one inverse wavelets a by warping one sequence to another.\n   * The sequences are related by warping such that f[t] ~ g[u[t]] if both sequences had \n   * the same wavelet. \n   * This method solves for the eigenvector corresponding to the smallest eigenvalue\n   * of matrix Z. \n   * Z = D'D\n   * D = (F-SG) \n   * The eigenvector is the wavelet in f and g.\n   */\npublic DMatrix computeZ(final int na, final int ka, \n    final float[][] u, final float[][] f, final float[][] g) {\n    //Z = (F-SG)'(F-SG) = F'F+G'S'SG+F'SG+G'S'F\n    Parallel.setParallel(true);\n    final DMatrix z = new DMatrix(na,na);\n    //final double[][] z = new double[na][na];\n    //F'F+G'S'SG+F'SG+G'S'F\n    final Warper warp = new Warper();\n    final float r = (float)((int)(warp.squeezing(1.0f,u)+1.0f));//Round up to the nearest integer.\n    BandPassFilter bpf = constructBPF(r);\n    int nu2 = u.length;\n    final int nu1 = u[0].length;\n    int ng2 = g.length;\n    int ng1 = g[0].length;\n    final float[][] uu = warp.upSampleLinear(nu1,1.0f,0.0f,u,r);\n    Stopwatch sw = new Stopwatch();\n    sw.start( );\n    /*Parallel.loop(na,new Parallel.LoopInt() {\n      public void compute(int ia) {\n        int lagi = ka+ia;\n    //for (int ia=0,lagi=ka; ia<na; ++ia,++lagi) {\n        System.out.println(\"ia = \"+ia);\n        float[][] dfi = delay(lagi,f);\n        float[][] dgi = delay(lagi,g);\n        float[][] sdgi = warp.applyS(r,nu1,uu,dgi);\n        for (int ja=0,lagj=ka; ja<(ia+1); ++ja,++lagj) {\n          float[][] dfj = delay(lagj,f);\n          float[][] dgj = delay(lagj,g);\n          float[][] sdgj = warp.applyS(r,nu1,uu,dgj);\n          double ffij = dot(dfi,dfj);\n          double gssgij = dot(sdgi,sdgj);\n          double fsgij = -dot(dfi,sdgj);\n          double gsfij = -dot(sdgi,dfj);\n          double zij = ffij + gssgij + gsfij + fsgij;//z.get(ia,ja);\n          //z[ia][ja] = zij;//+z[ia][ja];\n          z.set(ia,ja,zij);\n        }\n      }\n    });\n    //}\n    //Z is symmetric\n    for (int ia=0,lagi=ka; ia<na; ++ia,++lagi) {\n      for (int ja=0,lagj=ka; ja<ia+1; ++ja,++lagj) {\n        //z[ja][ia] = z[ia][ja];\n        z.set(ja,ia,z.get(ia,ja));\n      }\n    }\n    sw.stop();\n    //System.out.println(z.toString());\n    System.out.println(\"time to construct z is \"+sw.time());\n    System.out.println(\"Z is symmetric? \"+z.isSymmetric());\n    */\n    //F'F\n    for (int ia=0,lagi=ka; ia<na; ++ia,++lagi) {\n      System.out.println(\"ia = \"+ia);\n      float[][] dfi = delay(lagi,f);\n      for (int ja=0,lagj=ka; ja<na; ++ja,++lagj) {\n        float[][] dfj = delay(lagj,f);\n        double zij = dot(dfi,dfj) + z.get(ia,ja);\n        z.set(ia,ja,zij);\n      }\n    }\n    //G'S'SG\n    for (int ia=0,lagi=ka; ia<na; ++ia,++lagi) {\n      System.out.println(\"ia = \"+ia);\n      float[][] dgi = delay(lagi,g);\n      float[][] sldgi = warp.applyS(u,dgi);\n      for (int ja=0,lagj=ka; ja<na; ++ja,++lagj) {\n        float[][] dgj = delay(lagj,g);\n        float[][] sldgj = warp.applyS(u,dgj);\n        double zij = dot(sldgi,sldgj) + z.get(ia,ja);\n        z.set(ia,ja,zij);\n      }\n    }\n    //-F'SG+-G'S'F\n    for (int ia=0,lagi=ka; ia<na; ++ia,++lagi) {\n      System.out.println(\"ia = \"+ia);\n      float[][] dfi = delay(lagi,f);\n      float[][] dgi = delay(lagi,g);\n      float[][] sldgi = warp.applyS(u,dgi);\n      for (int ja=0,lagj=ka; ja<na; ++ja,++lagj) {\n        float[][] dfj = delay(lagj,f);\n        float[][] dgj = delay(lagj,g);\n        float[][] sldgj = warp.applyS(u,dgj);\n        double fsldgij = -dot(dfi,sldgj);\n        double zij = fsldgij + z.get(ia,ja);\n        z.set(ia,ja,zij);\n        double zji = fsldgij + z.get(ja,ia);\n        z.set(ja,ia,zji);\n      }\n    }\n\n    //Stabilize Z to be symmetric positive definite\n    for (int ia=0; ia<na; ++ia)\n      //z[ia][ia] = _sfac*z[ia][ia];\n      z.set(ia,ia,z.get(ia,ia)*_sfac);\n    //DMatrix mz = new DMatrix(z);\n    return z;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"getWaveletH","content":"/**\n   * Estimates the wavelet h from the inverse wavelet a.\n   * @param na number of samples in the inverse wavelet a.\n   * @param ka the sample index for a[0].\n   * @param a array of coefficients for the inverse wavelet a.\n   * @param nh number of samples in the wavelet h.\n   * @param kh the sample index for h[0].\n   */\npublic float[] getWaveletH(int na, int ka, float[] a, int nh, int kh) {\n    float[] one = {1.0f};\n    float[] ca1 = new float[nh];\n    float[] caa = new float[nh];\n    xcor(na,ka,a,1,0,one,nh,kh,ca1);\n    xcor(na,ka,a,na,ka,a,nh, 0,caa);\n    caa[0] *= _sfac;\n    SymmetricToeplitzFMatrix stm = new SymmetricToeplitzFMatrix(caa);\n    return stm.solve(ca1);\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"applyA","content":"/**\n   * Applies the specified inverse wavelet A.\n   * @param na number of samples in the inverse wavelet a.\n   * @param ka the sample index for a[0].\n   * @param a array of coefficients for the inverse wavelet a.\n   * @param f array with input sequence f(t).\n   * @return array with filtered output sequence.\n   */\npublic float[] applyA(int na, int ka, float[] a, float[] f) {\n    return convolve(na,ka,a,f);\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"applyA","content":"/**\n   * Applies the specified inverse wavelet A.\n   * @param na number of samples in the inverse wavelet a.\n   * @param ka the sample index for a[0].\n   * @param a array of coefficients for the inverse wavelet a.\n   * @param f array with input sequence f(t).\n   * @return array with filtered output sequence.\n   */\npublic float[][] applyA(int na, int ka, float[] a, float[][] f) {\n    return convolve(na,ka,a,f);\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"applyH","content":"/**\n   * Applies the specified wavelet H.\n   * @param nh number of samples in the wavelet h.\n   * @param kh the sample index for h[0].\n   * @param h array of coefficients for the wavelet h.\n   * @param f array with input sequence f(t).\n   * @return array with filtered output sequence.\n   */\npublic float[] applyH(int nh, int kh, float[] h, float[] f) {\n    return convolve(nh,kh,h,f);\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"applyH","content":"/**\n   * Applies the specified wavelet H.\n   * @param nh number of samples in the wavelet h.\n   * @param kh the sample index for h[0].\n   * @param h array of coefficients for the wavelet h.\n   * @param f array with input sequence f(t).\n   * @return array with filtered output sequence.\n   */\npublic float[][] applyH(int nh, int kh, float[] h, float[][] f) {\n    return convolve(nh,kh,h,f);\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"rms","content":"/**\n   * Returns the rms value of the image/trace.\n   */\npublic float rms(float[] x) {\n    return (float)sqrt(dot(x,x)/x.length);\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"rms","content":"/**\n   * Returns the rms value of the image/trace.\n   */\npublic float rms(float[][] x) {\n    return (float)sqrt(dot(x,x)/x.length/x[0].length);\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"rms","content":"/**\n   * Returns the rms value of the image specified between \n   * the two time indices.\n   */\npublic float rms(int itmin, int itmax, float[][] x) {\n    int nt = itmax-itmin+1;\n    return (float)sqrt(dot(itmin,itmax,x,x)/x.length/nt);\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"rmsPS","content":"/**\n   * Returns the rms value of the PS image specified between \n   * the two time indices 228 and 700.\n   */\npublic float rmsPS(float[][] x) {\n    int nt = 700-228+1;\n    return (float)sqrt(dotPS(x,x)/x.length/nt);\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"getZ","content":"/**\n   * Returns the rms value of the PS image specified between \n   * the two time indices 228 and 700.\n   */\npublic float[][] getZ() {\n    return convertDToF(_z.get());\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"printZ","content":"/**\n   * Returns the rms value of the PS image specified between \n   * the two time indices 228 and 700.\n   */\npublic String printZ() {\n    return _z.toString();\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"getEigVector","content":"/**\n   * Returns the rms value of the PS image specified between \n   * the two time indices 228 and 700.\n   */\npublic double[] getEigVector(int i) {\n    int nx = _eigvect[i].length;\n\n    double[] eigvect = new double[nx];\n    for(int ix=0; ix<nx; ++ix) {\n      eigvect[ix] =  _eigvect[ix][i];\n    }\n    return eigvect;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"getEigVal","content":"/**\n   * Returns the rms value of the PS image specified between \n   * the two time indices 228 and 700.\n   */\npublic double getEigVal(int i) {\n    return _eigval[i][i];\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"ulp1","content":"/**\n   * Returns the rms value of the PS image specified between \n   * the two time indices 228 and 700.\n   */\npublic static double ulp1() {\n    System.out.println(Math.ulp(1.0));\n    return Math.ulp(1.0);\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"getWDMeasure","content":"/**\n   *  A value above 1.0 indicates a well-determined wavelet.\n   */\npublic double getWDMeasure() {\n    int na = _eigval.length;\n    double lambda0 = _eigval[0][0];\n    double lambda1 = _eigval[1][1];\n    double lambdan = _eigval[na-1][na-1];\n    double l0n = lambda0/lambdan;\n    double l1n = lambda1/lambdan;\n    double eps1 = Math.ulp(1.0);\n    System.out.println(\"lambda0/lambdan = \"+l0n);\n    System.out.println(\"lambda1/lambdan = \"+l1n);\n    return (l1n-l0n)/eps1;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"getEigVals","content":"/**\n   *  A value above 1.0 indicates a well-determined wavelet.\n   */\npublic float[] getEigVals() {\n    int na = _eigval.length;\n    float[] eigvals = new float[na];\n    for (int i=0; i<na; ++i)\n      eigvals[i] = (float) _eigval[i][i];\n    return eigvals;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"getSumSqDiff","content":"/**\n   * Returns the sum of the squared differences between Fa and SGa\n   * for specific na and kag values (inverse wavelet sampling parameters).\n   * @param na the number of inverse wavelet coefficients in a.\n   */\npublic float getSumSqDiff(int na) {\n    double[] ad = convertFToD(_a);\n    DMatrix a = new DMatrix(na,1,ad);\n    DMatrix at = a.transpose();\n    return (float) (at.times(_z)).times(a).get(0,0) ;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"getSumSqDiffNoWaveletEst","content":"/**\n   * Returns the sum of the squared differences between Fa and SGa\n   * if a is an impulse centered at -ka. \n   * @param na the number of inverse wavelet coefficients in a.\n   * @param ka the sample index of a[0].\n   */\npublic float getSumSqDiffNoWaveletEst(int ka) {\n    return (float) (_z.get(-ka,-ka));\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"dot","content":"/**\n   * Returns the sum of the squared differences between Fa and SGa\n   * if a is an impulse centered at -ka. \n   * @param na the number of inverse wavelet coefficients in a.\n   * @param ka the sample index of a[0].\n   */\nprivate double dot(float[] x, float[] y) {\n    int nt = x.length;\n    int itlo = (_itmin>0)?_itmin:0;\n    int ithi = (_itmax>0)?_itmax:nt-1;\n    float[] w = fillfloat(1.0f,nt);\n    if (_weights) {\n      w = _w1D;\n    }\n    double sum = 0.0;\n    for (int it=itlo; it<=ithi; ++it) \n      sum += x[it]*y[it]*w[it];\n    return sum;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"dot","content":"/**\n   * Returns the sum of the squared differences between Fa and SGa\n   * if a is an impulse centered at -ka. \n   * @param na the number of inverse wavelet coefficients in a.\n   * @param ka the sample index of a[0].\n   */\nprivate double dot(float[] x, float[] y, float[] w) {\n    int nt = x.length;\n    int itlo = (_itmin>0)?_itmin:0;\n    int ithi = (_itmax>0)?_itmax:nt-1;\n    double sum = 0.0;\n    for (int it=itlo; it<=ithi; ++it) \n      sum += x[it]*y[it]*w[it];\n    return sum;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"dot","content":"/**\n   * Returns the sum of the squared differences between Fa and SGa\n   * if a is an impulse centered at -ka. \n   * @param na the number of inverse wavelet coefficients in a.\n   * @param ka the sample index of a[0].\n   */\nprivate double dot(float[][] x, float[][] y) {\n    int nx = x.length;\n    int nt = x[0].length;\n    float[][] w = fillfloat(1.0f,nt,nx);\n    if (_weights) {\n      w = _w2D;\n    }\n    double sum = 0.0;\n    for (int ix=0; ix<nx; ++ix) \n      sum += dot(x[ix],y[ix],w[ix]);\n    return sum;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"dot","content":"/**\n   * Returns the sum of the squared differences between Fa and SGa\n   * if a is an impulse centered at -ka. \n   * @param na the number of inverse wavelet coefficients in a.\n   * @param ka the sample index of a[0].\n   */\nprivate double dot(int itmin, int itmax, float[] x, float[] y) {\n    int nt = x.length;\n    int itlo = itmin;\n    int ithi = itmax; \n    double sum = 0.0;\n    for (int it=itlo; it<=ithi; ++it) \n      sum += x[it]*y[it];\n    return sum;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"dot","content":"/**\n   * Returns the sum of the squared differences between Fa and SGa\n   * if a is an impulse centered at -ka. \n   * @param na the number of inverse wavelet coefficients in a.\n   * @param ka the sample index of a[0].\n   */\nprivate double dot(int itmin, int itmax, float[][] x, float[][] y) {\n    int n = x.length;\n    double sum = 0.0;\n    for (int i=0; i<n; ++i) \n      sum += dot(itmin,itmax,x[i],y[i]);\n    return sum;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"dotPS","content":"/**\n   * Returns the sum of the squared differences between Fa and SGa\n   * if a is an impulse centered at -ka. \n   * @param na the number of inverse wavelet coefficients in a.\n   * @param ka the sample index of a[0].\n   */\nprivate double dotPS(float[] x, float[] y) {\n    int nt = x.length;\n    int itlo = 228;//(_itmin>0)?_itmin:0;\n    int ithi = 700;//(_itmax>0)?_itmax:nt-1;\n    double sum = 0.0;\n    for (int it=itlo; it<=ithi; ++it) \n      sum += x[it]*y[it];\n    return sum;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"dotPS","content":"/**\n   * Returns the sum of the squared differences between Fa and SGa\n   * if a is an impulse centered at -ka. \n   * @param na the number of inverse wavelet coefficients in a.\n   * @param ka the sample index of a[0].\n   */\nprivate double dotPS(float[][] x, float[][] y) {\n    int n = x.length;\n    double sum = 0.0;\n    for (int i=0; i<n; ++i) \n      sum += dotPS(x[i],y[i]);\n    return sum;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"constructBPF","content":"/**\n   * Given an amount of squeezing (r>1) or stretching (r<1), constructs\n   * the appropriate band-pass filter.\n   */\nprivate BandPassFilter constructBPF(float r) {\n    float width = 0.20f/r;\n    BandPassFilter bpf = new BandPassFilter(0.0,0.5/r,width,0.01);\n    return bpf;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"delay","content":"/**\n   * Returns y(t) = x(t-lag).\n   */\nprivate static float[] delay(int lag, float[] x) {\n    int nt = x.length;\n    int itlo = max(0,lag);   // 0 <= it-lag\n    int ithi = min(nt,nt+lag); // it-lag < nt\n    float[] y = new float[nt];\n    for (int it=0; it<itlo; ++it)\n      y[it] = 0.0f;\n    for (int it=itlo; it<ithi; ++it)\n      y[it] = x[it-lag];\n    for (int it=ithi; it<nt; ++it)\n      y[it] = 0.0f;\n    return y;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"delay","content":"/**\n   * Returns y(t) = x(t-lag).\n   */\nprivate static float[][] delay(int lag, float[][] x) {\n    int n = x.length;\n    float[][] y = new float[n][];\n    for (int i=0; i<n; ++i)\n      y[i] = delay(lag,x[i]);\n    return y;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"convolve","content":"/**\n   * Returns y(t) = h(t)*x(t), where * denotes convolution.\n   */\nprivate static float[] convolve(int nh, int kh, float[] h, float[] x) {\n    int nt = x.length;\n    float[] y = new float[nt];\n    convolve(nh,kh,h,x,y);\n    return y;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"convolve","content":"/**\n   * Returns y(t) = h(t)*x(t), where * denotes convolution.\n   */\nprivate static float[][] convolve(int nh, int kh, float[] h, float[][] x) {\n    int n = x.length;\n    int nt = x[0].length;\n    float[][] y = new float[n][nt];\n    for (int i=0; i<n; ++i)\n      convolve(nh,kh,h,x[i],y[i]);\n    return y;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"convertFToD","content":"/**\n   * Returns y(t) = h(t)*x(t), where * denotes convolution.\n   */\nprivate double[] convertFToD(float[] f) {\n    int nf = f.length;\n    double[] d = new double[nf];\n    for (int i=0; i<nf; ++i)\n      d[i] = f[i];\n    return d;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"convertDToF","content":"/**\n   * Returns y(t) = h(t)*x(t), where * denotes convolution.\n   */\nprivate float[][] convertDToF(double[][] d) {\n    int nd2 = d.length;\n    int nd1 = d[0].length;\n    float[][] f = new float[nd2][nd1];\n    for (int i2=0; i2<nd2; ++i2)\n      for (int i1=0; i1<nd1; ++i1)\n        f[i2][i1] = (float) d[i2][i1];\n    return f;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"computeAmplitudeSpectrum","content":"/**\n   * Returns y(t) = h(t)*x(t), where * denotes convolution.\n   */\nprivate float[] computeAmplitudeSpectrum(Sampling st, Sampling sf, int nfft, float[] f) {\n    int nt = st.getCount();\n    double dt = st.getDelta();\n    double ft = st.getFirst();\n    int nf = sf.getCount();\n    double df = sf.getDelta();\n    double ff = sf.getFirst();\n\n    //Real-to-complex fast Fourier transform.\n    FftReal  fft = new FftReal(nfft);\n    float[] cf = zerofloat(2*nf);\n    copy(nt,f,cf);\n    fft.realToComplex(-1,cf,cf);\n\n    //Adjust phase for possibly non-zero time of first sample.\n    float[] wft = rampfloat(0.0f,(float)(-2.0f*FLT_PI*df*ft),nf);\n    cf = cmul(cf,cmplx(cos(wft),sin(wft)));\n\n    float[] af = cabs(cf);\n    //Amplitude spectrum normalized\n    //float amax = max(max(af),FLT_EPSILON);\n    //af = mul(1.0f/amax,af);\n    return af;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"sort","content":"/**\n   * Rearranges the 2D eigenvalue array and the corresponding 2D eigenvector array,\n   * so that the diagonal of the eigenvalue array is in ascending order.\n   */\nprivate double[][][] sort(double[][] eigval, double[][] eigvect) {\n    int n = eigval.length;\n    double[][][] eigvalvect;\n    double[] diag = new double[n];\n    diag = getDiagonal(eigval);\n    if (!isSorted(diag)) {\n      //System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n      //System.out.println(\"Eigenvalues are not sorted\");\n      double[] diagsort = new double[n];\n      double[][] eigvalsort = new double[n][n];\n      double[][] eigvectsort = new double[n][n];\n      int[] indices = rampint(0,1,n);\n      quickIndexSort(diag,indices);\n      for (int i=0; i<n; ++i) {\n        diagsort[i] = diag[indices[i]];\n      }\n      eigvalsort = DMatrix.diagonal(diagsort).get();\n\n      for (int i=0; i<n; ++i) {\n        for (int j=0; j<n; ++j) {\n          eigvectsort[i][j] = eigvect[i][indices[j]];\n        }\n      }\n      eigvalvect = new double[][][]{eigvalsort,eigvectsort};\n      //System.out.println(\"Eigenvalues are now sorted\");\n    }\n    else {\n      //System.out.println(\"Eigenvalues are sorted\");\n      eigvalvect = new double[][][]{eigval,eigvect};\n    }\n    return eigvalvect;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"getDiagonal","content":"/**\n   * Rearranges the 2D eigenvalue array and the corresponding 2D eigenvector array,\n   * so that the diagonal of the eigenvalue array is in ascending order.\n   */\nprivate double[] getDiagonal(double[][] eigval) {\n    int n = eigval.length;\n    double[] diag = new double[n];\n    for (int i=0; i<n; ++i) {\n      diag[i] = eigval[i][i];\n    }\n    return diag;\n  }"} {"path":"downloaded/WaveletWarpingAEig.java","method_name":"isSorted","content":"/**\n   * Rearranges the 2D eigenvalue array and the corresponding 2D eigenvector array,\n   * so that the diagonal of the eigenvalue array is in ascending order.\n   */\nprivate boolean isSorted(double[] x) {\n    int nx = x.length;\n    for (int i=1; i<nx; ++i) {\n      if (x[i]<x[i-1])\n        return false;\n    }\n    return true;\n  }"} {"path":"downloaded/BlueprintExceptionHandler.java","method_name":"handleValidationExceptions","content":"/**\n   * Validation exception handler.\n   *\n   * @param exception the validation exception\n   * @return the map containing validation errors\n   */\n@ResponseStatus(HttpStatus.BAD_REQUEST)\n  @ExceptionHandler(MethodArgumentNotValidException.class)\n  public Map<String, String> handleValidationExceptions(\n    MethodArgumentNotValidException exception\n  ) {\n    Map<String, String> errors = new HashMap<>();\n    exception.getBindingResult().getAllErrors().forEach(error -> {\n      String fieldName = ((FieldError) error).getField();\n      String errorMessage = error.getDefaultMessage();\n      errors.put(fieldName, errorMessage);\n    });\n    return errors;\n  }"} {"path":"downloaded/BlueprintExceptionHandler.java","method_name":"handleBlueprintExceptions","content":"/**\n   * Validation exception handler.\n   *\n   * @param exception the validation exception\n   * @return the map containing validation errors\n   */\n@ExceptionHandler(BlueprintException.class)\n  public ResponseEntity<Void> handleBlueprintExceptions(\n    BlueprintException exception\n  ) {\n    return ResponseEntity.status(exception.getStatus()).build();\n  }"} {"path":"downloaded/BOEmpresa.java","method_name":"buscarEmpresa","content":"/**\n\t * metodo que busca una empresa\n\t * @param idEmpresa objeto por el cual se va a buscar la empresa \n\t * @return la busqueda de la empresa \n\t * @throws Exception\n\t */\npublic Empresa buscarEmpresa (int idEmpresa) throws Exception{\n\t\treturn daoEmpresa.buscarEmpresa(idEmpresa);\n\t}"} {"path":"downloaded/appointments.java","method_name":"initialize","content":"/**\n\t * Initialize the contents of the frame.\n\t */\nprivate void initialize() {\n\t\tframe = new JFrame();\n\t\tframe.getContentPane().setBackground(Color.BLACK);\n\t\tframe.getContentPane().setLayout(null);\n\t\tframe.setExtendedState(JFrame.MAXIMIZED_BOTH);\n\t\t\n\t\tJLabel lblDesignCopyrights = new JLabel(\"design copyrights \\u00A9 chinmaya\");\n\t\tlblDesignCopyrights.setFont(new Font(\"Times New Roman\", Font.PLAIN, 14));\n\t\tlblDesignCopyrights.setForeground(new Color(255, 255, 224));\n\t\tlblDesignCopyrights.setBounds(1711, 1018, 183, 23);\n\t\tframe.getContentPane().add(lblDesignCopyrights);\n\t\t\n\t\tJPanel background = new JPanel();\n\t\tbackground.setLayout(null);\n\t\tbackground.setBackground(Color.DARK_GRAY);\n\t\tbackground.setBounds(14, 200, 1880, 809);\n\t\tframe.getContentPane().add(background);\n\t\t\n\t\t\n\t\tJLabel lblTypesOfMachine = new JLabel(\"MACHINE NAME\");\n\t\tlblTypesOfMachine.setHorizontalAlignment(SwingConstants.LEFT);\n\t\tlblTypesOfMachine.setVerticalAlignment(SwingConstants.TOP);\n\t\tlblTypesOfMachine.setForeground(Color.WHITE);\n\t\tlblTypesOfMachine.setFont(new Font(\"Times New Roman\", Font.PLAIN, 19));\n\t\tlblTypesOfMachine.setBounds(69, 378, 178, 30);\n\t\tbackground.add(lblTypesOfMachine);\n\t\t\n\t\t\n\t\tJLabel lblAppointment = new JLabel(\"LIST TO DO\");\n\t\tlblAppointment.setForeground(Color.WHITE);\n\t\tlblAppointment.setFont(new Font(\"Times New Roman\", Font.PLAIN, 30));\n\t\tlblAppointment.setBounds(69, 117, 319, 48);\n\t\tbackground.add(lblAppointment);\n\t\t\n\t\tJLabel lblQuantity = new JLabel(\"QUANTITY\");\n\t\tlblQuantity.setHorizontalAlignment(SwingConstants.LEFT);\n\t\tlblQuantity.setVerticalAlignment(SwingConstants.TOP);\n\t\tlblQuantity.setForeground(Color.WHITE);\n\t\tlblQuantity.setFont(new Font(\"Times New Roman\", Font.PLAIN, 19));\n\t\tlblQuantity.setBounds(69, 428, 178, 30);\n\t\tbackground.add(lblQuantity);\n\t\t\n\t\tPanel panel = new Panel();\n\t\tpanel.setLayout(null);\n\t\tpanel.setBackground(Color.BLACK);\n\t\tpanel.setBounds(0, 30, 1880, 67);\n\t\tbackground.add(panel);\n\t\t\n\t\tJButton cusbtn = new JButton(\"CUSTOMER\");\n\t\tcusbtn.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) \n\t\t\t{\n\t\t\t\t customer cr = new customer();\n\t\t         cr.csStart();\n\t\t         frame.dispose();\n\t\t\t}\n\t\t});\n\t\tcusbtn.setForeground(Color.WHITE);\n\t\tcusbtn.setFont(new Font(\"Times New Roman\", Font.PLAIN, 15));\n\t\tcusbtn.setBackground(Color.BLACK);\n\t\tcusbtn.setBounds(1257, 11, 613, 44);\n\t\tpanel.add(cusbtn);\n\t\t\n\t\tJButton bilbtn = new JButton(\"INVOICE\");\n\t\tbilbtn.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\tadminInvoice inv= new adminInvoice();\n\t\t\t\tinv. adminInvoiceStart();\n\t\t\t\tframe.dispose();\n\n\t\t\t}\n\t\t});\n\t\tbilbtn.setForeground(Color.WHITE);\n\t\tbilbtn.setFont(new Font(\"Times New Roman\", Font.PLAIN, 15));\n\t\tbilbtn.setBackground(Color.BLACK);\n\t\tbilbtn.setBounds(633, 11, 613, 44);\n\t\tpanel.add(bilbtn);\n\t\t\n\t\tJButton prdbtn = new JButton(\"PRODUCTS\");\n\t\tprdbtn.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) \n\t\t\t{\n\t\t\t\tadminproducts prd = new adminproducts();\n\t\t\t\tprd.adminPrd();\n\t\t\t\tframe.dispose();\n\t\t\t\t\n\t\t\t}\n\t\t});\n\t\tprdbtn.setForeground(Color.WHITE);\n\t\tprdbtn.setFont(new Font(\"Times New Roman\", Font.PLAIN, 15));\n\t\tprdbtn.setBackground(Color.BLACK);\n\t\tprdbtn.setBounds(10, 11, 613, 44);\n\t\tpanel.add(prdbtn);\n\t\t\n\t\tJLabel lblCustomerName = new JLabel(\"CUSTOMER NAME\");\n\t\tlblCustomerName.setVerticalAlignment(SwingConstants.TOP);\n\t\tlblCustomerName.setHorizontalAlignment(SwingConstants.LEFT);\n\t\tlblCustomerName.setForeground(Color.WHITE);\n\t\tlblCustomerName.setFont(new Font(\"Times New Roman\", Font.PLAIN, 19));\n\t\tlblCustomerName.setBounds(69, 278, 178, 30);\n\t\tbackground.add(lblCustomerName);\n\t\t\n\t\tJLabel lblMachineType = new JLabel(\"MACHINE TYPE\");\n\t\tlblMachineType.setVerticalAlignment(SwingConstants.TOP);\n\t\tlblMachineType.setHorizontalAlignment(SwingConstants.LEFT);\n\t\tlblMachineType.setForeground(Color.WHITE);\n\t\tlblMachineType.setFont(new Font(\"Times New Roman\", Font.PLAIN, 19));\n\t\tlblMachineType.setBounds(69, 328, 178, 30);\n\t\tbackground.add(lblMachineType);\n\t\t\n\t\t\n\t\tJButton btnStore = new JButton(\"STORE\");\n\t\tbtnStore.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) \n\t\t\t{\n\t\t\t\tString dateEntry=date.getText();\n\t\t\t\tString cusname= customerName.getText();\t\n\t\t\t\tString machType=machineType.getText();\n\t\t\t\tString machName=machineName.getText();\n\t\t\t\tString quan=quantity.getText();\n\t\t\t\tString dl= deadline.getText();\n\t\t\t\tConnection con;\n\t\t\t\tPreparedStatement insert;\n\t\t\t\t\n\t\t\t\tif(dateEntry.isEmpty()||cusname.isEmpty()||machName.isEmpty()||machType.isEmpty()||quan.isEmpty()||dl.isEmpty()) \n\t\t\t\t{\n\t\t\t\t\tJOptionPane.showMessageDialog(null,\"no field must be left empty\",\"registration error\", JOptionPane.ERROR_MESSAGE);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\t\n\t\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tJOptionPane.showMessageDialog(null, \" Appointment added!!\");\n\t\t\t\t}\n\t\t\t\ttry \n\t\t\t\t{\n\t\t\t\t\tClass.forName(\"com.mysql.jdbc.Driver\");\n\t\t\t\t\tcon = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/machine_works\", \"root\", \"\");\n\t\t\t\t\tinsert = con.prepareStatement(\"insert into appointment (date,cusname,machType,machName,quan,deadline) values (?,?,?,?,?,?)\");\n\t\t            insert.setString(1, dateEntry);\n\t\t            insert.setString(2, cusname);\n\t\t            insert.setString(3, machType);\n\t\t            insert.setString(4, machName);\n\t\t            insert.setString(5, quan);\n\t\t            insert.setString(6, dl);\n\t\t            insert.executeUpdate();\n\t\t\t\t}\n\t\t\t\tcatch(Exception E)\n\t\t\t\t{\n\t\t\t\t\tE.printStackTrace();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t});\n\t\tbtnStore.setForeground(Color.WHITE);\n\t\tbtnStore.setFont(new Font(\"Times New Roman\", Font.PLAIN, 15));\n\t\tbtnStore.setBackground(Color.BLACK);\n\t\tbtnStore.setBounds(580, 578, 116, 44);\n\t\tbackground.add(btnStore);\n\t\t\n\t\tJScrollPane scrollPane = new JScrollPane();\n\t\tscrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);\n\t\tscrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);\n\t\tscrollPane.setBounds(1000, 230, 613, 267);\n\t\tbackground.add(scrollPane);\n\t\t\n\t\tinvoice = new JTable();\n\t\tscrollPane.setViewportView(invoice);\n\t\t\n\t\tJLabel lblInvoice = new JLabel(\"VIEW TO-DO LIST\");\n\t\tlblInvoice.setForeground(Color.WHITE);\n\t\tlblInvoice.setFont(new Font(\"Times New Roman\", Font.PLAIN, 30));\n\t\tlblInvoice.setBounds(1010, 117, 387, 48);\n\t\tbackground.add(lblInvoice);\n\t\t\n\t\tquantity = new JTextField();\n\t\tquantity.setFont(new Font(\"Times New Roman\", Font.PLAIN, 15));\n\t\tquantity.setColumns(10);\n\t\tquantity.setBounds(279, 428, 289, 30);\n\t\tbackground.add(quantity);\n\t\t\n\t\tmachineName = new JTextField();\n\t\tmachineName.setFont(new Font(\"Times New Roman\", Font.PLAIN, 15));\n\t\tmachineName.setColumns(10);\n\t\tmachineName.setBounds(279, 328, 289, 30);\n\t\tbackground.add(machineName);\n\t\t\n\t\tmachineType = new JTextField();\n\t\tmachineType.setFont(new Font(\"Times New Roman\", Font.PLAIN, 15));\n\t\tmachineType.setColumns(10);\n\t\tmachineType.setBounds(279, 378, 289, 30);\n\t\tbackground.add(machineType);\n\t\t\n\t\tcustomerName = new JTextField();\n\t\tcustomerName.setFont(new Font(\"Times New Roman\", Font.PLAIN, 15));\n\t\tcustomerName.setColumns(10);\n\t\tcustomerName.setBounds(279, 278, 289, 30);\n\t\tbackground.add(customerName);\n\t\t\n\t\tJLabel deadlineLbl = new JLabel(\"DEADLINE\");\n\t\tdeadlineLbl.setVerticalAlignment(SwingConstants.TOP);\n\t\tdeadlineLbl.setHorizontalAlignment(SwingConstants.LEFT);\n\t\tdeadlineLbl.setForeground(Color.WHITE);\n\t\tdeadlineLbl.setFont(new Font(\"Times New Roman\", Font.PLAIN, 19));\n\t\tdeadlineLbl.setBounds(69, 481, 178, 30);\n\t\tbackground.add(deadlineLbl);\n\t\t\n\t\tJLabel lblDate = new JLabel(\"DATE\");\n\t\tlblDate.setVerticalAlignment(SwingConstants.TOP);\n\t\tlblDate.setHorizontalAlignment(SwingConstants.LEFT);\n\t\tlblDate.setForeground(Color.WHITE);\n\t\tlblDate.setFont(new Font(\"Times New Roman\", Font.PLAIN, 19));\n\t\tlblDate.setBounds(69, 228, 178, 30);\n\t\tbackground.add(lblDate);\n\t\t\n\t\tdate = new JTextField();\n\t\tdate.setFont(new Font(\"Times New Roman\", Font.PLAIN, 15));\n\t\tdate.setColumns(10);\n\t\tdate.setBounds(279, 228, 289, 30);\n\t\tbackground.add(date);\n\t\t\n\t\tJButton btnView = new JButton(\"VIEW\");\n\t\tbtnView.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) \n\t\t\t{\n\t\t\t\ttry \n\t\t\t\t{\n\t\t\t\t\tConnection con = null;\n\t\t\t\t\tClass.forName(\"com.mysql.jdbc.Driver\");\n\t\t\t\t\tcon = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/machine_works\", \"root\", \"\");\n\t\t            String query=\"select * from appointment \";\n\t\t\t\t\tPreparedStatement pst = con.prepareStatement(query);\n\t\t\t\t\tResultSet rs = pst.executeQuery();\n\t\t\t\t\t\n\t\t\t\t\tinvoice.setModel(DbUtils.resultSetToTableModel(rs));\n\t\t\t\t\n\t\t\t\t}\n\t\t\t\tcatch(Exception E)\n\t\t\t\t{\n\t\t\t\t\tE.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tbtnView.setForeground(Color.WHITE);\n\t\tbtnView.setFont(new Font(\"Times New Roman\", Font.PLAIN, 15));\n\t\tbtnView.setBackground(Color.BLACK);\n\t\tbtnView.setBounds(1584, 578, 116, 44);\n\t\tbackground.add(btnView);\n\t\t\n\t\tdeadline = new JTextField();\n\t\tdeadline.setFont(new Font(\"Times New Roman\", Font.PLAIN, 15));\n\t\tdeadline.setColumns(10);\n\t\tdeadline.setBounds(279, 481, 289, 30);\n\t\tbackground.add(deadline);\n\t\t\n\t\tJPanel header = new JPanel();\n\t\theader.setLayout(null);\n\t\theader.setBackground(Color.DARK_GRAY);\n\t\theader.setBounds(14, 23, 1880, 163);\n\t\tframe.getContentPane().add(header);\n\t\t\n\t\tJPanel mwtitle = new JPanel();\n\t\tmwtitle.setLayout(null);\n\t\tmwtitle.setForeground(Color.WHITE);\n\t\tmwtitle.setBackground(Color.BLACK);\n\t\tmwtitle.setBounds(209, 7, 649, 151);\n\t\theader.add(mwtitle);\n\t\t\n\t\tJLabel label = new JLabel(\"MACHINE WORKS\");\n\t\tlabel.setForeground(Color.WHITE);\n\t\tlabel.setFont(new Font(\"Times New Roman\", Font.PLAIN, 69));\n\t\tlabel.setBounds(20, 11, 605, 72);\n\t\tmwtitle.add(label);\n\t\t\n\t\tJLabel lblWhereAllThe = new JLabel(\"Where all the WORK is done by MACHINE\");\n\t\tlblWhereAllThe.setForeground(Color.ORANGE);\n\t\tlblWhereAllThe.setFont(new Font(\"Times New Roman\", Font.PLAIN, 30));\n\t\tlblWhereAllThe.setBounds(38, 94, 581, 48);\n\t\tmwtitle.add(lblWhereAllThe);\n\t\t\n\t\tJLabel logolbl = new JLabel(\"\");\n\t\tlogolbl.setIcon(new ImageIcon(\"C:\\\\Users\\\\CHINMAYA SH\\\\Pictures\\\\download.png\"));\n\t\tlogolbl.setBounds(58, 7, 151, 151);\n\t\theader.add(logolbl);\n\t\t\n\t\tJButton lgbtn = new JButton(\"LOGOUT\");\n\t\tlgbtn.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) \n\t\t\t{\n\t\t\t\tJOptionPane.showMessageDialog(null, \"Logged out Successfull !!\");\n\t\t\t\tindex ind = new index();\n\t\t\t\tind.indexStart();\n\t\t\t\tframe.dispose();\n\t\t\t}\n\t\t});\n\t\tlgbtn.setForeground(Color.WHITE);\n\t\tlgbtn.setFont(new Font(\"Times New Roman\", Font.PLAIN, 15));\n\t\tlgbtn.setBackground(Color.BLACK);\n\t\tlgbtn.setBounds(1674, 60, 116, 44);\n\t\theader.add(lgbtn);\n\t\t\n\t\tJButton button_1 = new JButton(\"SIGN UP\");\n\t\tbutton_1.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) \n\t\t\t{\n\t\t\t\tsignup sg = new signup();\n\t\t\t\tsg.signupStart();\n\t\t\t\tframe.dispose();\n\t\t\t}\n\t\t});\n\t\tbutton_1.setForeground(Color.WHITE);\n\t\tbutton_1.setFont(new Font(\"Times New Roman\", Font.PLAIN, 15));\n\t\tbutton_1.setBackground(Color.BLACK);\n\t\tbutton_1.setBounds(1488, 60, 116, 44);\n\t\theader.add(button_1);\n\t\t\n\t\tJButton btnAppointment = new JButton(\"TO-DO\");\n\t\tbtnAppointment.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) \n\t\t\t{\n\t\t\t\tappointments ap = new appointments();\n\t\t\t\tap.appointmentList();\n\t\t\t\tframe.dispose();\n\t\t\t}\n\t\t});\n\t\tbtnAppointment.setForeground(Color.WHITE);\n\t\tbtnAppointment.setFont(new Font(\"Times New Roman\", Font.PLAIN, 15));\n\t\tbtnAppointment.setBackground(Color.BLACK);\n\t\tbtnAppointment.setBounds(1309, 60, 125, 44);\n\t\theader.add(btnAppointment);\n\t\tframe.setBackground(Color.BLACK);\n\t\tframe.setBounds(100, 100, 1920\t, 1080);\n\t\tframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t\t\n\n\t}"} {"path":"downloaded/FTPPathUtils.java","method_name":"ring prefix","content":"/**\n\t * Windows 系统路径分\nh(String ftpPath,String prefix){\n\t\treturn ftpPath.substring(prefix.length());\n\t}\n\t\n\tpublic static File getLocalDir(ServletContext servletContext,String localDir){\n\t\t//文件本地存储目录\n\t\tFile directory = null;\n\t\t//从配置文件找到指定的外部存储路径配置\n\t\tString directoryPath = FTPPathUtils.getResolvePath(localDir);\n\t\t//基于指定路径的file 对象\n\t\tdirectory = new File(directoryPath);\n\t\tif( !directory.exists() || !directory.isDirectory()){\n\t\t\t//未找到指定的"} {"path":"downloaded/FTPPathUtils.java","method_name":"地程序�","content":"/**\n\t * Windows 系统路径分\n部目录，使用本地程序根目录\n\t\t\tdirectoryPath = servletContext.getRealPath(localDir);\n\t\t\t//得到存储目录\n\t\t\tdirectory = FTPPathUtils.getExistDir(directoryPath);\n\t\t}\n\t\treturn directory;\n\t}\n\n\tpublic static String getRootDir(String rootDir) throws IOException{\n\t\tif(StringUtils.isEmpty(rootDir)){\n\t\t\treturn \"\" + BACKSLASHES;\n\t\t}\n\t\t// 将路径中的斜杠统一\n\t\tchar[] chars = rootDir.toCharArray();\n\t\tStringBuf"} {"path":"downloaded/FTPPathUtils.java","method_name":"ffer();","content":"/**\n\t * Windows 系统路径分\n sbStr = new StringBuffer();\n\t\tfor (int i = 0; i < chars.length; i++) {\n\t\t\tif (SLASHES == chars[i]) {\n\t\t\t\tsbStr.append(BACKSLASHES);\n\t\t\t} else {\n\t\t\t\tsbStr.append(chars[i]);\n\t\t\t}\n\t\t}\n\t\t//返回根目录\n\t\treturn sbStr.toString();\n\t}\n\n\tpublic static String getPath(String ftpPath) throws IOException{\n\t\t// 将路径中的斜杠统一\n\t\tchar[] chars = ftpPath.toCharArray();\n\t\tStringBuffer sbStr = new StringBuffer();\n\t\tfor (int i "} {"path":"downloaded/FTPPathUtils.java","method_name":"+) {\n\t\t\tif (SL","content":"/**\n\t * Windows 系统路径分\n i < chars.length; i++) {\n\t\t\tif (SLASHES == chars[i]) {\n\t\t\t\tsbStr.append(BACKSLASHES);\n\t\t\t} else {\n\t\t\t\tsbStr.append(chars[i]);\n\t\t\t}\n\t\t}\n\t\tftpPath = sbStr.toString();\n\t\treturn ftpPath.startsWith(\"\" + BACKSLASHES) ? ftpPath.substring(1) : ftpPath;\n\t}\n\t\n\tpublic static String getResolvePath(String path) {\n\t\tpath = path.r"} {"path":"downloaded/FTPPathUtils.java","method_name":"arator).rep","content":"/**\n\t * Windows 系统路径分\nce(\"\\\\\\\\\", File.separator).replace(\"\\\\\",File.separator).replace(\"//\", File.separator).replace(\"/\",\tFile.separator);\n\t\tif (path.endsWith(File.separator)) {\n\t\t\tpath = path.substring(0, (path.length() - File.separator.length()));\n\t\t}\n\t\treturn path;\n\t}\n\t\n\tpublic static "} {"path":"downloaded/ResManager.java","method_name":"makeReservation","content":"/**\n     * This method will create a Reservation\n     * First it will check the internal arrayList to see if the Reservation has been made or not yet\n     * Then we check to see if the time slot that has been requested is valid or not\n     * Then we check to see if a Reservable is open in our arrayList\n     * If it passes all our test, then we need to find the table that fits best to our reservation\n     * Once that is done, we create the reservation.\n     * \n     * @param Reservation trailRes\n     * @return trailRes || null\n     */\npublic Reservation makeReservation(Reservation trailRes){\n        //Using a for each loop to chekc to see if a reservation can be made or not\n        if(trailRes.getName().equals(\"\")) {\n            System.out.println(\"Not a valid name\");\n            return null;\n        }\n        \n        \n        for(Reservation r: listR){\n            if(trailRes.getReservationTime() == r.getReservationTime()){\n                System.out.println(\"Could not make the Reservation\");\n                System.out.println(\"Reservation has already been made by someone else\");\n                return null;\n            }\n        }\n\n        //if the time slot is greater than 10 or less than 0, the reservation cannot be made\n        if(trailRes.getReservationTime() > 10 || trailRes.getReservationTime() < 0){\n            System.out.println(\"Time slot not available\");\n            return null;\n        }\n\n        //check to see if the reservable list is empty or not\n        if(listI.isEmpty())\n        {\n            System.out.println(\"No reservation available\");\n            return null;\n        }\n\n        //find the item and fitnessValue that will most fit our reservation\n        Reservable item = listI.get(0);\n        int fitnessValue = item.findFitnessValue(trailRes);\n\n        //loop through the table list and find the best fit for our reservation\n        for(int i = 0; i < listI.size() ; i++){\n            if(listI.get(i).findFitnessValue(trailRes) > fitnessValue){\n                item = listI.get(i);\n                fitnessValue = item.findFitnessValue(trailRes);\n            }\n        }\n        //if we have found a table that works, then we can make our reservation\n        if(fitnessValue > 0){\n            //add reservation to our internal list\n            //point our reservable to the appropriate reservation\n            //set the reservable \n            //print out the message here not using the iterator\n            listR.add(trailRes);\n            item.addRes(trailRes);\n            trailRes.setMyReservable(item);\n            System.out.println(\"Reservation made for \"  + trailRes.getName() + \" at time \" + trailRes.getReservationTime() + \", \" + item.getId());\n            return trailRes;\n        }\n        System.out.println(\"No reservation available, number of people in party may be too large\");\n        return null;       \n    }"} {"path":"downloaded/ResManager.java","method_name":"unreserve","content":"/**\n     * This method will remove a reservation that has been made\n     * Once the reservation has been removed, it will return the boolean status of our reservation\n     * \n     * @param Reservation res\n     * @return true || false\n     */\npublic boolean unreserve(Reservation res){\n        //remove from internal lists\n        listR.remove(res);\n        //set that to null\n        res = null;\n\n        //return true if res is null\n        if(res == null){\n            return true;\n        }\n        return false;\n    }"} {"path":"downloaded/ResManager.java","method_name":"reservationsByName","content":"/**\n     * This method will reutrn an iterator of active reservations for a name.\n     * First it will use a for each loop to find if the reservation by name and add that to a temporary arrayList.\n     * Then the iterator of that temp arrayList will be returned.\n     * Using the inner class IterName to accomplish this\n     * \n     * @param String name\n     * @return IterName iter\n     */\npublic Iterator<R> reservationsByName(String name){\n        // Return an iterator of active reservations for a name.\n        //loop through the arrayList\n        for(Reservation r: listR){\n            //if we find the name that equals our given name, add that reservation to our temp list\n            if(r.getName().equals(name)){\n                newList.add(r);\n            }\n        }\n        //return iterator for temp list\n        IterName iter = new IterName();\n        return iter;\n    }"} {"path":"downloaded/ResManager.java","method_name":"getReservables","content":"/**\n     * Return an iterator for all reservable items\n     * Using the inner class IterI to accomplish this\n     * \n     * @param NONE\n     * @return IterI iter\n     */\npublic Iterator<I> getReservables(){\n        IterI iter = new IterI();\n        return iter;\n    }"} {"path":"downloaded/ResManager.java","method_name":"getAllReservations","content":"/**\n     * Return an iterator for all active reservations \n     * Using the inner class IterI to accomplish this\n     * \n     * @param NONE\n     * @return IterR iter\n     */\npublic Iterator <R> getAllReservations(){\n        IterR iter = new IterR();\n        return iter;\n    }"} {"path":"downloaded/ResManager.java","method_name":"hasNext","content":"/**\n         * Check to see if the list has a next item \n         * If the index is less than the size of the list, then we are good.\n         * If the next item is not null, then we are good.\n         * \n         * @param NONE\n         * @return true || false\n         */\npublic boolean hasNext(){\n            if(index < size && listR.get(index) != null){\n                return true;\n            }\n            return false;\n        }"} {"path":"downloaded/ResManager.java","method_name":"next","content":"/**\n         * This method will return whatever is next in the list\n         * \n         * @param NONE\n         * @return listR.get(index++);\n         */\npublic R next(){\n            return (R) listR.get(index++);\n        }"} {"path":"downloaded/ResManager.java","method_name":"hasNext","content":"/**\n         * Check to see if the list has a next item \n         * If the index is less than the size of the list, then we are good.\n         * If the next item is not null, then we are good.\n         * \n         * @param NONE\n         * @return true || false\n         */\npublic boolean hasNext(){\n            if(index < size && listI.get(index) != null){\n                return true;\n            }\n            return false;\n        }"} {"path":"downloaded/ResManager.java","method_name":"next","content":"/**\n         * This method will return whatever is next in the list\n         * \n         * @param NONE\n         * @return listR.get(index++);\n         */\npublic I next(){\n            return (I) listI.get(index++);\n        }"} {"path":"downloaded/ResManager.java","method_name":"hasNext","content":"/**\n         * Check to see if the list has a next item \n         * If the index is less than the size of the list, then we are good.\n         * If the next item is not null, then we are good.\n         * \n         * @param NONE\n         * @return true || false\n         */\npublic boolean hasNext(){\n            if(index < size && newList.get(index) != null){\n                return true;\n            }\n            return false;\n        }"} {"path":"downloaded/ResManager.java","method_name":"next","content":"/**\n         * This method will return whatever is next in the list\n         * \n         * @param NONE\n         * @return listR.get(index++);\n         */\npublic R next(){\n            return (R) newList.get(index++);\n        }"} {"path":"downloaded/Lock.java","method_name":"getLockName","content":"/**\n     * \n     * @param count\n     * @param lockedWorkflow\n     * \n     * @param lockName\n     * @param demands\n     */\n@JsonProperty(\"lockName\")\n    public String getLockName() {\n        return lockName;\n    }"} {"path":"downloaded/Lock.java","method_name":"getCount","content":"/**\n     * non negative integer\n     * <p>\n     * \n     * \n     */\n@JsonProperty(\"count\")\n    public Integer getCount() {\n        return count;\n    }"} {"path":"downloaded/Lock.java","method_name":"getLockedWorkflow","content":"/**\n     * instructions\n     * <p>\n     * \n     * (Required)\n     * \n     */\n@JsonProperty(\"lockedWorkflow\")\n    public Instructions getLockedWorkflow() {\n        return lockedWorkflow;\n    }"} {"path":"downloaded/Lock.java","method_name":"getDemands","content":"/**\n     * \n     * (Required)\n     * \n     */\n@JsonProperty(\"demands\")\n    public List<LockDemand> getDemands() {\n        return demands;\n    }"} {"path":"downloaded/Lock.java","method_name":"toString","content":"/**\n     * \n     * (Required)\n     * \n     */\n@Override\n    public String toString() {\n        return new ToStringBuilder(this).appendSuper(super.toString()).append(\"lockName\", lockName).append(\"count\", count).append(\"lockedWorkflow\", lockedWorkflow).append(\"demands\", demands).toString();\n    }"} {"path":"downloaded/Lock.java","method_name":"hashCode","content":"/**\n     * \n     * (Required)\n     * \n     */\n@Override\n    public int hashCode() {\n        return new HashCodeBuilder().appendSuper(super.hashCode()).append(count).append(lockedWorkflow).append(lockName).append(demands).toHashCode();\n    }"} {"path":"downloaded/Lock.java","method_name":"equals","content":"/**\n     * \n     * (Required)\n     * \n     */\n@Override\n    public boolean equals(Object other) {\n        if (other == this) {\n            return true;\n        }\n        if ((other instanceof Lock) == false) {\n            return false;\n        }\n        Lock rhs = ((Lock) other);\n        return new EqualsBuilder().appendSuper(super.equals(other)).append(count, rhs.count).append(lockedWorkflow, rhs.lockedWorkflow).append(lockName, rhs.lockName).append(demands, rhs.demands).isEquals();\n    }"} {"path":"downloaded/Product.java","method_name":"getId","content":"/**\n     * Returns id for a product\n     */\npublic int getId() {\n        return id;\n    }"} {"path":"downloaded/Product.java","method_name":"getName","content":"/**\n     * Returns name for a product\n     */\npublic String getName() {\n        return name;\n    }"} {"path":"downloaded/Product.java","method_name":"getPrice","content":"/**\n     * Returns price for a product\n     */\npublic double getPrice() {\n        return price;\n    }"} {"path":"downloaded/Product.java","method_name":"getStock","content":"/**\n     * Returns stock for a product\n     */\npublic int getStock() {\n        return stock;\n    }"} {"path":"downloaded/Product.java","method_name":"getMin","content":"/**\n     * Returns min value for a product\n     */\npublic int getMin() {\n        return min;\n    }"} {"path":"downloaded/Product.java","method_name":"getMax","content":"/**\n     * Returns max value for a product\n     */\npublic int getMax() {\n        return max;\n    }"} {"path":"downloaded/Product.java","method_name":"deleteAssociatedPart","content":"/**\n     * Deletes associated part for a product\n     */\npublic boolean deleteAssociatedPart(Part selectedAssociatedPart) {\n        return associatedParts.remove(selectedAssociatedPart);\n    }"} {"path":"downloaded/Product.java","method_name":"getAllAssociatedParts","content":"/**\n     * Returns all associated parts for a product\n     */\npublic ObservableList<Part> getAllAssociatedParts() {\n        return associatedParts;\n    }"} {"path":"downloaded/AddressControllor.java","method_name":"\n    public List<Ad","content":"/**\n     * 获取当前用户的收货地址集\n    * @return\n     */\n    @RequestMapping(\"findListByLoginUser\")\n    public List<Address> findListByLoginUser(){\n        String userName = SecurityContextHolder.getContext().getAuthentication().getName();\n        List<Address> addressList = addressService.findAddressListByLoginUser(userName);\n       "} {"path":"downloaded/AddressControllor.java","method_name":"equestM","content":"/**\n     * 获取当前用户的收货地址集\n     * @param id\n     * @return\n     */\n    @RequestMapping(\"findOne\")\n    public Address findOne(Long id){\n    "} {"path":"downloaded/AddressControllor.java","method_name":"址\n     *","content":"/**\n     * 获取当前用户的收货地址集\n }\n\n\n\n    /**\n     * 当前用户增加一个地址\n     */\n    @RequestMapping(\"addAddress\")\n    public Result addAddress(@RequestBody Address address){\n\n        System.out.println(address);\n        String userName = SecurityContextHolder.getContext().getAuthentication().getName();\n        address.setUserId(userName);\n        try {\n            addressService.addAddress(address);\n            return new Result(true,\"增加地址成功\");\n        } catch (Exception e) {\n            e.printS"} {"path":"downloaded/AddressControllor.java","method_name":"\n\n    /**\n","content":"/**\n     * 获取当前用户的收货地址集\nlt(false,\"增加地址失败\");\n        }\n\n    }\n\n    /**\n     * 当前用户删除一个地址\n     */\n    @RequestMapping(\"delAddress\")\n    public Result delAddress(Long id){\n//        System.out.println(id);\n        try {\n            addressService.delAddress(id);\n            return new Result(true,\"删除成功\");\n        } "} {"path":"downloaded/AddressControllor.java","method_name":",\"删除失�","content":"/**\n     * 获取当前用户的收货地址集\nntStackTrace();\n            return new Result(false,\"删除失败\");\n        }\n\n    }\n\n\n    /**\n     * 当前用户修改地址\n     */\n    @RequestMapping(\"updateAddress\")\n    public Result updateAddress(@RequestBody Address address){\n//        System.out.println(address);\n        try {\n            addressService.updateAddress(address);\n            return new Result"} {"path":"downloaded/AddressControllor.java","method_name":"         ret","content":"/**\n     * 获取当前用户的收货地址集\nxception e) {\n            e.printStackTrace();\n            return new Result(true,\"修改失败\");\n        }\n\n    }\n\n\n    /**\n     * 当前用户修改默认地址\n     */\n    @RequestMapping(\"morenAddress\")\n    public Result morenAddress(Long id){\n//        System.out.println(id);\n        try {\n            addressService.morenAddress(id);\n  "} {"path":"downloaded/AddressControllor.java","method_name":"ntStackTrace","content":"/**\n     * 获取当前用户的收货地址集\n�成功\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            return new Result(false,\"修改默认地址失败\");\n        }\n\n    }\n\n    /**\n     * 查询所有省份\n   "} {"path":"downloaded/AddressControllor.java","method_name":"tId) {\n ","content":"/**\n     * 获取当前用户的收货地址集\n\n    public List<Provinces> findProvince(String parentId) {\n        List<Provinces> Cat1list = addressService.findProvince(parentId);\n        return Cat1list;\n    }\n\n    /**\n    "} {"path":"downloaded/AddressControllor.java","method_name":"s> findC","content":"/**\n     * 获取当前用户的收货地址集\n  @RequestMapping(\"/findCity\")\n    public List<Cities> findCity(String parentId) {\n        List<Cities> Cat2list = addressService.findCity(parentId);\n        return Cat2list;\n "} {"path":"downloaded/DeliveryPlanChildVO.java","method_name":"�信�","content":"   /**\n     * 送达车�\n**\n     * 车辆信息列表\n     */\n    private "} {"path":"downloaded/DeliveryPlanChildVO.java","method_name":"publi","content":"   /**\n     * 送达车�\nd\n     */\n    public void setId(Integer id) {\n  "} {"path":"downloaded/DeliveryPlanChildVO.java","method_name":"ic void s","content":"   /**\n     * 送达车�\n*/\n    public void setNo(String no) {\n        this.no"} {"path":"downloaded/DeliveryPlanChildVO.java","method_name":"{\n        this.s","content":"   /**\n     * 送达车�\ns(int status) {\n        this.status = status;\n    }\n\n    /**\n     * Ge"} {"path":"downloaded/DeliveryPlanChildVO.java","method_name":"      this.","content":"   /**\n     * 送达车�\nngStatus) {\n        this.routingStatus = routingStatus;\n    "} {"path":"downloaded/DeliveryPlanChildVO.java","method_name":"      this.custo","content":" /**\n     * Getter method for property <tt>customer</tt>.\n     * @return property value of customer\n     */\n    public String getCustomer() {\n     \ncustomer) {\n        this.customer = customer;\n    }\n\n    /**\n     * Ge"} {"path":"downloaded/DeliveryPlanChildVO.java","method_name":"gneeName = consigne","content":" /**\n     * Getter method for property <tt>customer</tt>.\n     * @return property value of customer\n     */\n    public String getCustomer() {\n     \n    this.consigneeName = consigneeName;\n    }\n\n    /**\n     * Getter method "} {"path":"downloaded/DeliveryPlanChildVO.java","method_name":"Address = consigne","content":" /**\n     * Getter method for property <tt>customer</tt>.\n     * @return property value of customer\n     */\n    public String getCustomer() {\n     \nthis.consigneeAddress = consigneeAddress;\n    }\n\n    /**\n     * Getter met"} {"path":"downloaded/DeliveryPlanChildVO.java","method_name":"consigneeM","content":" /**\n     * Getter method for property <tt>customer</tt>.\n     * @return property value of customer\n     */\n    public String getCustomer() {\n     \nMobile) {\n        this.consigneeMobile = consigneeMobile;\n    }\n\n  "} {"path":"downloaded/DeliveryPlanChildVO.java","method_name":"> carList","content":" /**\n     * Getter method for property <tt>customer</tt>.\n     * @return property value of customer\n     */\n    public String getCustomer() {\n     \n(List<VehicleVO> carList) {\n        this.carList = carLis"} {"path":"downloaded/DeliveryPlanChildVO.java","method_name":"     this.carNum =","content":" /**\n     * Getter method for property <tt>customer</tt>.\n     * @return property value of customer\n     */\n    public String getCustomer() {\n     \nr carNum) {\n        this.carNum = carNum;\n    }\n\n    /**\n     * Getter meth"} {"path":"downloaded/GIRIPackWInPolbasServiceImpl.java","method_name":"getGiriPackWInPolbasDAO","content":"/**\n\t * @return the giriPackWInPolbasDAO\n\t */\npublic GIRIPackWInPolbasDAO getGiriPackWInPolbasDAO() {\n\t\treturn giriPackWInPolbasDAO;\n\t}"} {"path":"downloaded/GIRIPackWInPolbasServiceImpl.java","method_name":"getGiriPackWInPolbas","content":"/**\n\t * @param giriPackWInPolbasDAO the giriPackWInPolbasDAO to set\n\t */\n@Override\n\tpublic GIRIPackWInPolbas getGiriPackWInPolbas(Integer packParId)\n\t\t\tthrows SQLException {\n\t\treturn getGiriPackWInPolbasDAO().getGiriPackWInPolbas(packParId); \n\t}"} {"path":"downloaded/3_df5dc04b5d58386c924070d566247dc4b60dd29f_AbstractComposerValueBox_t.java","method_name":"getSelectedField","content":"/**\n    * @return the selected field (may be a sequence box) or null if no field is selected\n    */\npublic IComposerValueField getSelectedField() {\n     return m_selectedField;\n   }"} {"path":"downloaded/3_df5dc04b5d58386c924070d566247dc4b60dd29f_AbstractComposerValueBox_t.java","method_name":"setSelectionContext","content":"/**\n    * @return the selected field (may be a sequence box) or null if no field is selected\n    */\npublic void setSelectionContext(IDataModelAttribute attribute, IDataModelAttributeOp op, Object[] values) {\n     if (op == null) {\n       return;\n     }\n     if (values == null && getSelectedField() != null) {\n       values = getSelectedField().getValues();\n     }\n     m_attribute = attribute;\n     //\n     int dataType = op.getType();\n     if (dataType == IDataModelAttribute.TYPE_INHERITED) {\n       dataType = attribute.getType();\n     }\n     Map<Integer, IComposerValueField> typeToFieldMap = m_opTypeToFieldMap.get(op.getOperator());\n     if (typeToFieldMap == null) {\n       //default\n       typeToFieldMap = m_opTypeToFieldMap.get(0);\n     }\n     IComposerValueField valueField = typeToFieldMap.get(dataType);\n     //clear old\n     if (m_selectedField != null) {\n       m_selectedField.removeValueChangeListenerFromTarget(m_valueChangedListener);\n       m_selectedField.clearSelectionContext();\n     }\n     //set new\n     m_selectedField = valueField;\n     if (m_selectedField != null) {\n       m_selectedField.addValueChangeListenerToTarget(m_valueChangedListener);\n       m_selectedField.setSelectionContext(m_attribute, dataType, op, values);\n     }\n     for (IFormField f : getFields()) {\n       if (f == m_selectedField) {\n         f.setVisible(true);\n       }\n       else {\n         f.setVisible(false);\n       }\n     }\n   }"} {"path":"downloaded/Copy.java","method_name":"getId","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column PUBLIC.COPY.ID\n     *\n     * @return the value of PUBLIC.COPY.ID\n     *\n     * @mbg.generated Fri Mar 05 01:21:41 EET 2021\n     */\npublic Integer getId() {\n        return id;\n    }"} {"path":"downloaded/Copy.java","method_name":"getBookId","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column PUBLIC.COPY.BOOK_ID\n     *\n     * @return the value of PUBLIC.COPY.BOOK_ID\n     *\n     * @mbg.generated Fri Mar 05 01:21:41 EET 2021\n     */\npublic Integer getBookId() {\n        return bookId;\n    }"} {"path":"downloaded/Copy.java","method_name":"getLibraryId","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column PUBLIC.COPY.LIBRARY_ID\n     *\n     * @return the value of PUBLIC.COPY.LIBRARY_ID\n     *\n     * @mbg.generated Fri Mar 05 01:21:41 EET 2021\n     */\npublic Integer getLibraryId() {\n        return libraryId;\n    }"} {"path":"downloaded/Copy.java","method_name":"getUserId","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column PUBLIC.COPY.USER_ID\n     *\n     * @return the value of PUBLIC.COPY.USER_ID\n     *\n     * @mbg.generated Fri Mar 05 01:21:41 EET 2021\n     */\npublic Integer getUserId() {\n        return userId;\n    }"} {"path":"downloaded/MyBannerUtil.java","method_name":"rData> void s","content":"/**\n     *\n     * @param banner\n     * @param content\n     * @param mContext\n     * @param widthDP 宽 单位dp\n     * @param heightDP 高 单位dp\n     * @param\n     */\n    public static  <T extends MyBannerData> void setBannerData(Banner banner, final List<T> content, final Context mContext,int widthDP,int heightDP) {\n        if (content == null || content.size() <= 0) {\n            banner.setVisibility(View.GONE);\n            return;\n        }\n        RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) banner.getLayoutParams();\n        layoutParams.height = (int) ((heightDP * 0.1) * ScreenUtils.getScreenWidth(mContext) / (widthDP * 0.1));\n        ArrayList<String> imageList = new ArrayList<String>();\n        int size = content.size();\n        for (int i = 0; i < size; i++) {\n            String image = content.get(i).getImgUrl();\n            imageList.add(com.yilian.mylibrary.WebImageUtil.getInstance().getWebImageUrlNOSuffix(image));\n        }\n        banner.setImages(imageList)\n                .setBannerStyle(BannerConfig.CIRCLE_INDICATOR)\n                .setImageLoader(new BannerViewGlideUtil())\n                .setIndicatorGravity(BannerConfig.CENTER)\n                .setOnBannerListener(new OnBannerListener() {\n                    @Override\n                    public void OnBannerClick(int position) {\n                        T t = content.get(position);\n                        JumpToOtherPage.getInstance(mContext).jumpToOtherPage(t.getType(), t.getContent());\n                    }\n                }).st"} {"path":"downloaded/MenuServiceImpl.java","method_name":"rivate List<","content":"/**\n     * 查询的菜单数据转\n�Tree数据\n     */\n    private List<Tree<Menu>> listTreeMenu(List<Menu> menus) {\n        List<Tree<Menu>> trees = new ArrayList<>();\n\n        for (Menu menu : menus) {\n            Tree<Menu> tree = new Tree<Menu>();\n            tree.setId(menu.getId());\n            tree.setText(menu.getMenuName());\n            tree.setParentId(menu.getParentId());\n            tree.setPath(menu.getPath());\n            tree.setIcon(menu.getIcon());\n            tree.setComponent(menu.getComponent());\n            tree.setFolder(menu.getFolder());\n            Map<String, Object> map = new HashMap<>();\n            map.put(\"requireAuth\", menu.isRequireAuth());\n            tree.setMeta(map);\n            tree.setType(menu.getType() == 1 ? \"菜单\" : \"按钮\");\n            tree.setPerms(menu.getPerms());\n            tree.setEnabled(menu.isEnabled());\n            trees.add(tree);\n      "} {"path":"downloaded/PersonRestController.java","method_name":"> getPerson","content":" /**\n     * Liefert alle Personen zurück\n     * @return alle Personen\n     * @throws JsonProcessingException\n     \n  @RequestMapping(value = \"/person/all\", method = RequestMethod.GET)\n    public ResponseEntity<?> getPersonen() throws JsonProcessingException {\n        List<Person> list = personRepository.findAll();\n        Set<PersonView> collection = list.stream().map(PersonView::from).collect(Collectors.toSet());\n        String result = JsonUtil.writeValueAsString(collection);\n        return new ResponseEntity<>(result, HttpUtils.headers(), HttpStatus.OK);\n   "} {"path":"downloaded/Priority.java","method_name":"isEmptySouth","content":"/**\n\t * Method to determine if the queue is empty.\n\t * @return true if no elements in the queue\n\t */\nprivate boolean isEmptySouth()\n\t{\n\t\treturn (southElem == 0);\n\t}"} {"path":"downloaded/Priority.java","method_name":"isEmptyWest","content":"/**\n\t * Method to determine if the queue is empty.\n\t * @return true if no elements in the queue\n\t */\nprivate boolean isEmptyWest()\n\t{\n\t\treturn (westElem == 0);\n\t}"} {"path":"downloaded/Priority.java","method_name":"isEmptyMidwest","content":"/**\n\t * Method to determine if the queue is empty.\n\t * @return true if no elements in the queue\n\t */\nprivate boolean isEmptyMidwest()\n\t{\n\t\treturn (midwestElem == 0);\n\t}"} {"path":"downloaded/Priority.java","method_name":"isFullSouth","content":"/**\n\t * Method to determine if the queue is full.\n\t * @return true if the number of elements = maximum size of array\n\t */\nprivate boolean isFullSouth()\n\t{\n\t\treturn (southElem == maxSize);\n\t}"} {"path":"downloaded/Priority.java","method_name":"isFullWest","content":"/**\n\t * Method to determine if the queue is full.\n\t * @return true if the number of elements = maximum size of array\n\t */\nprivate boolean isFullWest()\n\t{\n\t\treturn (westElem == maxSize);\n\t}"} {"path":"downloaded/Priority.java","method_name":"isFullMidwest","content":"/**\n\t * Method to determine if the queue is full.\n\t * @return true if the number of elements = maximum size of array\n\t */\nprivate boolean isFullMidwest()\n\t{\n\t\treturn (midwestElem == maxSize);\n\t}"} {"path":"downloaded/Priority.java","method_name":"removeSouth","content":"/**\n\t * Pushes each state object from priority queue back onto the state stack.  Keeps track of the priority queue \n\t * using the Front counter.\n\t * @return state object from priority queue array\n\t */\nprivate State removeSouth() \n\t{\n\t\tProject2.stateStack.push(southQueue[southFront++]);\n\t\treturn southQueue[southElem];\n\t}"} {"path":"downloaded/Priority.java","method_name":"removeWest","content":"/**\n\t * Pushes each state object from priority queue back onto the state stack.  Keeps track of the priority queue \n\t * using the Front counter.\n\t * @return state object from priority queue array\n\t */\nprivate State removeWest() \n\t{\n\t\tProject2.stateStack.push(westQueue[westFront++]);\n\t\treturn westQueue[westElem];\n\t}"} {"path":"downloaded/Priority.java","method_name":"removeMidwest","content":"/**\n\t * Pushes each state object from priority queue back onto the state stack.  Keeps track of the priority queue \n\t * using the Front counter.\n\t * @return state object from priority queue array\n\t */\nprivate State removeMidwest() \n\t{\n\t\tProject2.stateStack.push(midwestQueue[midwestFront++]);\n\t\treturn midwestQueue[midwestElem];\n\t}"} {"path":"downloaded/SpringContextUtil.java","method_name":"getApplicationContext","content":"/**\n     * Obtain an application context for Gemma.\n     *\n     * @param activeProfiles list of active profiles, for testing use {@link SpringProfiles#TEST}\n     * @param additionalConfigurationLocations a list of additional configuration location to load beans from\n     * @return a fully initialized {@link ApplicationContext}\n     * @throws org.springframework.beans.BeansException if the creation of the context fails\n     */\npublic static ApplicationContext getApplicationContext( String[] activeProfiles, String... additionalConfigurationLocations ) throws BeansException {\n        List<String> paths = new ArrayList<>();\n\n        paths.add( \"classpath*:ubic/gemma/applicationContext-*.xml\" );\n\n        paths.addAll( Arrays.asList( additionalConfigurationLocations ) );\n\n        StopWatch timer = StopWatch.createStarted();\n        try {\n            ConfigurableApplicationContext context = new ClassPathXmlApplicationContext( paths.toArray( new String[0] ), false );\n            for ( String activeProfile : activeProfiles ) {\n                context.getEnvironment().addActiveProfile( activeProfile );\n            }\n            prepareContext( context );\n            context.refresh();\n            return context;\n        } finally {\n            SpringContextUtil.log.info( \"Got Gemma context in \" + timer.getTime( TimeUnit.MILLISECONDS ) + \" ms.\" );\n        }\n    }"} {"path":"downloaded/SpringContextUtil.java","method_name":"getApplicationContext","content":"/**\n     * @deprecated this method does not support producing Gemma Web contexts, please migrate existing code to use\n     * {@link #getApplicationContext(String[], String...)} instead.\n     *\n     * @param isWebApp If true, a {@link UnsupportedOperationException} will be raised since retrieving the Web\n     *                 application context is not supported from here. Use WebApplicationContextUtils.getWebApplicationContext()\n     *                 instead. This is only kept for backward-compatibility with external scripts.\n     * @see #getApplicationContext(String[], String...)\n     */\n@Deprecated\n    public static ApplicationContext getApplicationContext( boolean testing, boolean isWebApp, String[] additionalConfigurationLocations ) throws BeansException {\n        if ( isWebApp ) {\n            throw new UnsupportedOperationException( \"The Web app context cannot be retrieved from here, use WebApplicationContextUtils.getWebApplicationContext() instead.\" );\n        }\n        return getApplicationContext( testing ? new String[] { \"testing\" } : new String[0], additionalConfigurationLocations );\n    }"} {"path":"downloaded/SpringContextUtil.java","method_name":"getApplicationVersion","content":"/**\n     * Return the current Gemma version.\n     */\npublic static String getApplicationVersion() {\n        String appVersion = Settings.getAppVersion();\n        return appVersion != null ? appVersion : \"?\";\n    }"} {"path":"downloaded/KmlTrackWriter.java","method_name":"getExtension","content":"/**\n   * ID of the KML feature to play a tour.\n   */\n@Override\n  public String getExtension() {\n    return TrackFileFormat.KML.getExtension();\n  }"} {"path":"downloaded/RepositoryFindRequest.java","method_name":"g state;\n\n  ","content":"    /**\n     * 知识库�\nrivate String state;\n\n    /**\n     * 开始时间\n     */\n  "} {"path":"downloaded/RepositoryFindRequest.java","method_name":"tStartDate","content":"    /**\n     * 知识库�\nblic Date getStartDate() {\n        return startDate;\n   "} {"path":"downloaded/RepositoryFindRequest.java","method_name":"ic Date ","content":"    /**\n     * 知识库�\n   }\n\n    public Date getEndDate() {\n        return en"} {"path":"downloaded/RepositoryFindRequest.java","method_name":"public Stri","content":"    /**\n     * 知识库�\ndDate;\n    }\n\n    public String getState() {\n        return stat"} {"path":"downloaded/RepositoryFindRequest.java","method_name":"rds() {\n  ","content":"    /**\n     * 知识库�\nist<Long> getKeywords() {\n        return keywords;\n    }\n\n    "} {"path":"downloaded/RepositoryFindRequest.java","method_name":"> getTa","content":"    /**\n     * 知识库�\nblic List<Long> getTageIds() {\n        return tageId"} {"path":"downloaded/RepositoryFindRequest.java","method_name":"   }\n\n","content":"    /**\n     * 知识库�\ns = tageIds;\n    }\n\n    public String getType() {\n"} {"path":"downloaded/RepositoryFindRequest.java","method_name":"ype;\n    }","content":"    /**\n     * 知识库�\n this.type = type;\n    }\n\n    public String getTag() {\n   "} {"path":"downloaded/RepositoryFindRequest.java","method_name":"tring getKe","content":"    /**\n     * 知识库�\n\n\n    public String getKeyword() {\n        return keyword;\n "} {"path":"downloaded/RepositoryFindRequest.java","method_name":"getQuestio","content":"    /**\n     * 知识库�\npublic String getQuestion() {\n        return question;\n   "} {"path":"downloaded/RepositoryFindRequest.java","method_name":"ring getCon","content":"    /**\n     * 知识库�\n\n\n    public String getContent() {\n        return content;\n  "} {"path":"downloaded/RepositoryFindRequest.java","method_name":" getIsActiv","content":"    /**\n     * 知识库�\nblic Boolean getIsActive() {\n        return isActive;\n    "} {"path":"downloaded/RepositoryFindRequest.java","method_name":"ong getSourceId","content":"    /**\n     * 知识库�\n    public Long getSourceId() {\n        return sourceId;\n    }\n\n  "} {"path":"downloaded/NonGuiController.java","method_name":"makeController","content":"/**\n   * Factory method for the creation of NonGuiControllers.\n   *\n   * @param model the music to play\n   * @param view  the view to draw\n   * @return a new instance of a NonGuiController\n   */\nstatic Controller makeController(MusicEditorModel model, ViewModel vm, NonGuiViewAdapter view) {\n    return new NonGuiController(model, vm, view);\n  }"} {"path":"downloaded/LLGrammar.java","method_name":"��为本�","content":"/***\n     * 架构 全局变量 首先每个非终结符对应的First集Follow集必须初始化和分配空间 初始的set的size大小为0 终结符的first集为本身\n     * lookedhead表示当前正在匹配的字母 first函数用来求first集 follow函数。�\n�始ε的first集为本身\n        First.put(null, null);\n\n        // 初始化所有字母�"} {"path":"downloaded/LLGrammar.java","method_name":"for (Str","content":"/***\n     * 架构 全局变量 首先每个非终结符对应的First集Follow集必须初始化和分配空间 初始的set的size大小为0 终结符的first集为本身\n     * lookedhead表示当前正在匹配的字母 first函数用来求first集 follow函数。�\nllable为false\n        for (String t :\n                VN) {\n            Nullable.put(t, false);\n        }\n        for (String t :\n                VT) {\n            Nullable.put(t, false);\n        }\n    }\n\n    /**\n     * 描述: 判断参数中的str是否在终结符集合中.\n     *\n     * @param str 要判断的文法字符\n     * @return boolean\n     * @throws\n     * @author DingKe\n     * @since 2018/12/27 0027 11:50\n     */\n    public boolean isTerminal(String str) {\n        return true ? VT.contains(str) : false;\n    }\n\n    public HashSet<String> getFirst(String left) {\n  "} {"path":"downloaded/LLGrammar.java","method_name":" 遍历右","content":"/***\n     * 架构 全局变量 首先每个非终结符对应的First集Follow集必须初始化和分配空间 初始的set的size大小为0 终结符的first集为本身\n     * lookedhead表示当前正在匹配的字母 first函数用来求first集 follow函数。�\n (String t : // 遍历右边表达式的首个字母\n                    set) {\n                boolean FLAG = false;\n                while (FLAG) {\n                    HashSet<String> t_set = expSet.get(t);\n                    for (String tt : t_set) {\n                        if (isTerminal(tt)) { // 找到终结符了 先不返回 置标记为true 继续遍历寻找终结符\n                "} {"path":"downloaded/LLGrammar.java","method_name":"t(vn, true);\n             ","content":"/***\n     * 架构 全局变量 首先每个非终结符对应的First集Follow集必须初始化和分配空间 初始的set的size大小为0 终结符的first集为本身\n     * lookedhead表示当前正在匹配的字母 first函数用来求first集 follow函数。�\n            Nullable.put(vn, true);\n                        if (bool == false) {\n                            FLAG = true;\n                        }\n                        continue;\n                    }\n                    boolean res = false;\n                    res = isNullable(exp.toCharArray()); // 判断exp是否可以推空"} {"path":"downloaded/LLGrammar.java","method_name":"alse) {\n                ","content":"/***\n     * 架构 全局变量 首先每个非终结符对应的First集Follow集必须初始化和分配空间 初始的set的size大小为0 终结符的first集为本身\n     * lookedhead表示当前正在匹配的字母 first函数用来求first集 follow函数。�\n  if (bool == false) {\n                            FLAG = true;\n                        }\n                    }\n                }\n\n            }\n            if (!FLAG) { // 如果大小未变 则退出while循环\n                break;\n            }\n        }\n    }\n\n    /**\n     * 描述: 移除set中的ε.\n     *\n     * @param set 要进行移除ε处理的first集合\n     * @return java.util.HashSet<java.lang.String>\n     * @throws\n     * @author DingKe\n     * @since 2"} {"path":"downloaded/LLGrammar.java","method_name":"t<>();\n   ","content":"/***\n     * 架构 全局变量 首先每个非终结符对应的First集Follow集必须初始化和分配空间 初始的set的size大小为0 终结符的first集为本身\n     * lookedhead表示当前正在匹配的字母 first函数用来求first集 follow函数。�\nshSet<>();\n        if (set.contains(null)) {\n            res = (HashSet<String>) set.clone();\n            // System.out.println(res);\n            res.remove(null);\n            return res;\n        }\n        return set;\n    }\n\n    /**\n     * 描述: 将右部第一个字符的first集并入到所求的first集中.\n     *\n     * @param left �"} {"path":"downloaded/LLGrammar.java","method_name":" left, String rig","content":"/***\n     * 架构 全局变量 首先每个非终结符对应的First集Follow集必须初始化和分配空间 初始的set的size大小为0 终结符的first集为本身\n     * lookedhead表示当前正在匹配的字母 first函数用来求first集 follow函数。�\nstLetter(String left, String right, HashSet<String> set) {\n        boolean flag = false;\n        String firstLetter = String.valueOf(right.charAt(0)); // 取出右部第一个字符\n        // 将firstLetter的first集加入\n        int size = set.size();\n        set.addAll(removeNullCharFromFirstSet(this.First.get(firstLetter)));\n        if (set.size() > size) { // 有新元素加入\n            flag = true;\n        }\n        this.First.put(left, set);\n        return flag;\n    }\n    /**\n     描述: 返回给定集合的总的元素数量.\n     *@param set\n     *@return int\n     *@throws\n     *@创建人  DingKe\n     *@创建时间  10:58 2019/1/13\n     */\n    int getSetSize(HashMap<String, HashSet<String>> set) {\n        int size = 0;\n        for (String s : set.keySet()) {\n            HashSet<String> strings = set.get(s);\n            if (strings == null) {\n                size += 1;"} {"path":"downloaded/PddRefundListIncrementGetResponse.java","method_name":"ncrementGetResponse getRefund","content":"/**\n     * 售后增量订单\nResponse;\n\n    \n    public RefundIncrementGetResponse getRefundIncrementGetResponse() {\n        return refundIncreme"} {"path":"downloaded/OfertaDisciplinaController.java","method_name":"> listarTod","content":"  /**\n     * Limpa os filtros e carrega todas as disponibilidades escolhidas\n     \n  private List<OfertaDisciplina> listarTodas() {\n        return ofertaDisciplinaFacade.findAll();\n   "} {"path":"downloaded/OfertaDisciplinaController.java","method_name":"> listarTodasQu","content":"  /**\n     * Limpa os filtros e carrega todas as disponibilidades escolhidas\n     \n  private List<OfertaDisciplina> listarTodasQuad(int quad){\n        return ofertaDisciplinaFacade.findAllQuad(quad);\n   "} {"path":"downloaded/OfertaDisciplinaController.java","method_name":"na bus","content":"  /**\n     * Limpa os filtros e carrega todas as disponibilidades escolhidas\n     \n   public OfertaDisciplina buscar(Long id) {\n        return ofertaDisciplinaFacade.find(id);\n  "} {"path":"downloaded/OfertaDisciplinaController.java","method_name":"tem[] getItemsAvaiableSel","content":"  /**\n     * Limpa os filtros e carrega todas as disponibilidades escolhidas\n     \n\n\n    public SelectItem[] getItemsAvaiableSelectOne() {\n        return JsfUtil.getSelectItems(ofertaDisciplinaFacade.findAll(), true);"} {"path":"downloaded/OfertaDisciplinaController.java","method_name":"c int qdtDocentesDisponibi","content":"  /**\n     * Limpa os filtros e carrega todas as disponibilidades escolhidas\n     \ne\n    public int qdtDocentesDisponibilidade(OfertaDisciplina of){\n        \n        of = ofertaDisciplinaFacade.inicializarColecaoDisponibilidades(of);\n        \n        //Set<Disponibilidade> disponibilidades = of.getDisponibilidades();\n        Set<Disp> disponibilidades = of.getDispo();\n        \n        return disponibilidades.size();        "} {"path":"downloaded/OfertaDisciplinaController.java","method_name":"Model getDocentesPorDisc","content":"  /**\n     * Limpa os filtros e carrega todas as disponibilidades escolhidas\n     \na\n    public DisponibilidadeDataModel getDocentesPorDisciplina() {\n        if(docentesPorDisciplina == null){\n            docentesPorDisciplina = new DisponibilidadeDataModel();\n        }\n        return docentesPorDisciplina;"} {"path":"downloaded/OfertaDisciplinaController.java","method_name":" OfertaD","content":"  /**\n     * Limpa os filtros e carrega todas as disponibilidades escolhidas\n     \n    } \n    }\n\n    private OfertaDisciplina getTurma(Long key) {\n        return "} {"path":"downloaded/BasePage.java","method_name":"getTemplate","content":"/** {@inheritDoc} */\n@Override\n\tpublic Template getTemplate() {\n\t\treturn template;\n\t}"} {"path":"downloaded/BasePage.java","method_name":"getTitle","content":"/** {@inheritDoc} */\n@Override\n\tpublic String getTitle() {\n\t\treturn title.replace(Page.TOTAL_PAGES_PLACEHOLDER, \"\" + getTotalPages()).replace(Page.CURRENT_PAGE_PLACEHOLDER, \"\" + getPageNumber());\n\t}"} {"path":"downloaded/BasePage.java","method_name":"getPageNumber","content":"/** {@inheritDoc} */\n@Override\n\tpublic int getPageNumber() {\n\t\treturn (previousPage != null) ? previousPage.getPageNumber() + 1 : 1;\n\t}"} {"path":"downloaded/BasePage.java","method_name":"getTotalPages","content":"/** {@inheritDoc} */\n@Override\n\tpublic int getTotalPages() {\n\t\treturn (nextPage != null) ? nextPage.getTotalPages() : getPageNumber();\n\t}"} {"path":"downloaded/BasePage.java","method_name":"getPreviousPage","content":"/** {@inheritDoc} */\n@Override\n\tpublic Optional<Page> getPreviousPage() {\n\t\treturn Optional.ofNullable(previousPage);\n\t}"} {"path":"downloaded/BasePage.java","method_name":"getNextPage","content":"/** {@inheritDoc} */\n@Override\n\tpublic Optional<Page> getNextPage() {\n\t\treturn Optional.ofNullable(nextPage);\n\t}"} {"path":"downloaded/BasePage.java","method_name":"getPage","content":"/** {@inheritDoc} */\n@Override\n\tpublic Optional<Page> getPage(int pageNumber) {\n\t\t// Return empty option if page number is a bad value.\n\t\tif (pageNumber <= 0 || pageNumber > getTotalPages()) {\n\t\t\treturn Optional.empty();\n\t\t}\n\t\t// Calculate the difference between this page's current number to see if we're going back or forward.\n\t\tint pageDifference = pageNumber - getPageNumber();\n\n\t\tif (pageDifference < 0) {\n\t\t\t// Go back until we find the right page or return empty optional if it's not found.\n\t\t\tPage page = this;\n\t\t\tfor (int i = 0; i < Math.abs(pageDifference); i++) {\n\t\t\t\tif (!page.getPreviousPage().isPresent()) {\n\t\t\t\t\treturn Optional.empty();\n\t\t\t\t} else {\n\t\t\t\t\tpage = page.getPreviousPage().get();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Optional.ofNullable(page);\n\t\t} else if (pageDifference > 0) {\n\t\t\t// Go forward until we find the right page or return empty optional if it's not found.\n\t\t\tPage page = this;\n\t\t\tfor (int i = 0; i < Math.abs(pageDifference); i++) {\n\t\t\t\tif (!page.getNextPage().isPresent()) {\n\t\t\t\t\treturn Optional.empty();\n\t\t\t\t} else {\n\t\t\t\t\tpage = page.getNextPage().get();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Optional.ofNullable(page);\n\t\t} else {\n\t\t\t// Return this page if it's the page number being looked for.\n\t\t\treturn Optional.of(this);\n\t\t}\n\n\t}"} {"path":"downloaded/BasePage.java","method_name":"toBuilder","content":"/** {@inheritDoc} */\n@Override\n\tpublic Page.Builder toBuilder() {\n\t\treturn new Builder(this);\n\t}"} {"path":"downloaded/BasePage.java","method_name":"clone","content":"/** {@inheritDoc} */\n@Override\n\tpublic Page clone() {\n\t\treturn new BasePage(template.clone(), title, previousPage, nextPage, openBehavior, closeBehavior);\n\t}"} {"path":"downloaded/BasePage.java","method_name":"title","content":"/** {@inheritDoc} */\n@Override\n\t\tpublic Page.Builder title(@Nullable String title) {\n\t\t\tthis.title = title;\n\t\t\treturn this;\n\t\t}"} {"path":"downloaded/BasePage.java","method_name":"template","content":"/** {@inheritDoc} */\n@Override\n\t\tpublic Page.Builder template(@Nullable Template template) {\n\t\t\tthis.template = template;\n\t\t\treturn this;\n\t\t}"} {"path":"downloaded/BasePage.java","method_name":"dynamicContentArea","content":"/** {@inheritDoc} */\n@Override\n\t\tpublic Page.Builder dynamicContentArea(int row, int col, int length, int width) {\n\t\t\tdynamicContentAreaRow = row;\n\t\t\tdynamicContentAreaCol = col;\n\t\t\tdynamicContentAreaLength = length;\n\t\t\tdynamicContentAreaWidth = width;\n\t\t\treturn this;\n\t\t}"} {"path":"downloaded/BasePage.java","method_name":"dynamicContents","content":"/** {@inheritDoc} */\n@Override\n\t\tpublic Page.Builder dynamicContents(@Nullable List<Button> contents) {\n\t\t\tdynamicContents = contents;\n\t\t\treturn this;\n\t\t}"} {"path":"downloaded/BasePage.java","method_name":"previousPage","content":"/** {@inheritDoc} */\n@Override\n\t\tpublic Page.Builder previousPage(@Nullable Page page) {\n\t\t\tthis.previousPage = page;\n\t\t\treturn this;\n\t\t}"} {"path":"downloaded/BasePage.java","method_name":"nextPage","content":"/** {@inheritDoc} */\n@Override\n\t\tpublic Page.Builder nextPage(@Nullable Page page) {\n\t\t\tthis.nextPage = page;\n\t\t\treturn this;\n\t\t}"} {"path":"downloaded/BasePage.java","method_name":"onOpen","content":"/** {@inheritDoc} */\n@Override\n\t\tpublic Page.Builder onOpen(@Nullable Consumer<PageAction> behavior) {\n\t\t\topenBehavior = behavior;\n\t\t\treturn this;\n\t\t}"} {"path":"downloaded/BasePage.java","method_name":"onOpen","content":"/** {@inheritDoc} */\n@Override\n\t\tpublic Page.Builder onOpen(@Nullable Runnable behavior) {\n\t\t\topenBehavior = (behavior != null) ? (action) -> behavior.run() : null;\n\t\t\treturn this;\n\t\t}"} {"path":"downloaded/BasePage.java","method_name":"onClose","content":"/** {@inheritDoc} */\n@Override\n\t\tpublic Page.Builder onClose(@Nullable Consumer<PageAction> behavior) {\n\t\t\tcloseBehavior = behavior;\n\t\t\treturn this;\n\t\t}"} {"path":"downloaded/BasePage.java","method_name":"onClose","content":"/** {@inheritDoc} */\n@Override\n\t\tpublic Page.Builder onClose(@Nullable Runnable behavior) {\n\t\t\tcloseBehavior = (behavior != null) ? (action) -> behavior.run() : null;\n\t\t\treturn this;\n\t\t}"} {"path":"downloaded/BasePage.java","method_name":"reset","content":"/** {@inheritDoc} */\n@Override\n\t\tpublic Page.Builder reset() {\n\t\t\ttemplate = null;\n\t\t\ttitle = null;\n\t\t\tpreviousPage = null;\n\t\t\tnextPage = null;\n\t\t\topenBehavior = null;\n\t\t\tcloseBehavior = null;\n\t\t\tdynamicContentAreaRow = -1;\n\t\t\tdynamicContentAreaCol = -1;\n\t\t\tdynamicContentAreaLength = -1;\n\t\t\tdynamicContentAreaWidth = -1;\n\t\t\tdynamicContents = null;\n\t\t\treturn this;\n\t\t}"} {"path":"downloaded/FormularioModificarAceptarFormImpl.java","method_name":"getExtension","content":"/**\n     * \n     */\npublic java.lang.String getExtension()\n    {\n        return this.extension;\n    }"} {"path":"downloaded/BasePage.java","method_name":"build","content":"/** {@inheritDoc} */\n@Override\n\t\tpublic Page build() {\n\t\t\t// Throw exception if there's no template set.\n\t\t\tif (template == null) {\n\t\t\t\tthrow new IllegalStateException(\"template is required for building page\");\n\t\t\t}\n\n\t\t\t// If dynamic contents are defined, start process of generating as many pages as required to fit them.\n\t\t\tif (dynamicContents != null && !dynamicContents.isEmpty()) {\n\t\t\t\t// Throw exception if the length or width are bad values\n\t\t\t\tif (dynamicContentAreaLength <= 0 || dynamicContentAreaWidth <= 0) {\n\t\t\t\t\tthrow new IllegalStateException(\"trying to set dynamic contents when dynamic content area\" + \" has length or width below or equal to 0\");\n\t\t\t\t}\n\n\t\t\t\t// Check the dynamic area is in bounds.\n\t\t\t\tboolean startRowOutOfBounds = dynamicContentAreaRow < 0 || dynamicContentAreaRow >= template.getRows();\n\t\t\t\tboolean startColOutOfBounds = dynamicContentAreaCol < 0 || dynamicContentAreaRow >= 9;\n\n\t\t\t\tint endRow = dynamicContentAreaRow + dynamicContentAreaLength;\n\t\t\t\tint endCol = dynamicContentAreaCol + dynamicContentAreaWidth;\n\t\t\t\tboolean endRowOutOfBounds = endRow < 0 || endRow > template.getRows();\n\t\t\t\tboolean endColOutOfBounds = endCol < 0 || endCol > 9;\n\t\t\t\tif (startRowOutOfBounds || startColOutOfBounds || endRowOutOfBounds || endColOutOfBounds) {\n\t\t\t\t\tthrow new IllegalStateException(\"trying to set dynamic contents when dynamic content area is out of template bounds\");\n\t\t\t\t}\n\n\t\t\t\t// Calculate how many pages are required to fit the dynamic content.\n\t\t\t\tint contentSlots = dynamicContentAreaLength * dynamicContentAreaWidth;\n\t\t\t\tint totalPages = (int) Math.ceil((double) dynamicContents.size() / contentSlots);\n\n\t\t\t\t// Creates each page and return the first page generated.\n\t\t\t\tList<Page> pages = new ArrayList<>();\n\t\t\t\tint contentIndex = 0;\n\t\t\t\tfor (int pageNum = 0; pageNum < totalPages; pageNum++) {\n\t\t\t\t\tTemplate.Builder builder = template.toBuilder();\n\t\t\t\t\t// Clear dynamic area of all buttons\n\t\t\t\t\tbuilder.rectangle(dynamicContentAreaRow, dynamicContentAreaCol, dynamicContentAreaLength, dynamicContentAreaWidth, null);\n\t\t\t\t\t// Place dynamic contents in each slot\n\t\t\t\t\tfor (int row = dynamicContentAreaRow; row < endRow; row++) {\n\t\t\t\t\t\tfor (int col = dynamicContentAreaCol; col < endCol; col++) {\n\t\t\t\t\t\t\tif (contentIndex < dynamicContents.size()) {\n\t\t\t\t\t\t\t\tbuilder.set(row, col, dynamicContents.get(contentIndex));\n\t\t\t\t\t\t\t\tcontentIndex++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tTemplate filledTemplate = builder.build();\n\t\t\t\t\tPage page = new BasePage(filledTemplate, title, previousPage, nextPage, openBehavior, closeBehavior);\n\t\t\t\t\t// Links each page together.\n\t\t\t\t\tif (!pages.isEmpty()) {\n\t\t\t\t\t\tPage previousPage = pages.get(pages.size() - 1);\n\t\t\t\t\t\tpage.setPreviousPage(previousPage);\n\t\t\t\t\t\tpreviousPage.setNextPage(page);\n\t\t\t\t\t}\n\t\t\t\t\tpages.add(page);\n\t\t\t\t}\n\t\t\t\treturn pages.get(0);\n\t\t\t}\n\t\t\treturn new BasePage(template.clone(), title, previousPage, nextPage, openBehavior, closeBehavior);\n\t\t}"} {"path":"downloaded/FormularioModificarAceptarFormImpl.java","method_name":"getExtensionBackingList","content":"/**\n     * \n     */\npublic java.lang.Object[] getExtensionBackingList()\n    {\n        java.lang.Object[] values = this.extensionValueList;\n        java.lang.Object[] labels = this.extensionLabelList;\n\n        if (values == null || values.length == 0)\n        {\n            return values;\n        }\n\n        if (labels == null || labels.length == 0)\n        {\n            labels = values;\n        }\n\n        final int length = java.lang.Math.min(labels.length, values.length);\n        java.lang.Object[] backingList = new java.lang.Object[length];\n\n        for (int i=0; i<length; i++)\n        {\n            backingList[i] = new LabelValue(labels[i], values[i]);\n        }\n\n        return backingList;\n    }"} {"path":"downloaded/FormularioModificarAceptarFormImpl.java","method_name":"getExtensionValueList","content":"/**\n     * \n     */\npublic java.lang.Object[] getExtensionValueList()\n    {\n        return this.extensionValueList;\n    }"} {"path":"downloaded/FormularioModificarAceptarFormImpl.java","method_name":"getExtensionLabelList","content":"/**\n     * \n     */\npublic java.lang.Object[] getExtensionLabelList()\n    {\n        return this.extensionLabelList;\n    }"} {"path":"downloaded/FormularioModificarAceptarFormImpl.java","method_name":"getArchivoVO","content":"/**\n     * \n     */\npublic es.pode.empaquetador.negocio.servicio.ArchivoVO getArchivoVO()\n    {\n        return this.archivoVO;\n    }"} {"path":"downloaded/FormularioModificarAceptarFormImpl.java","method_name":"getArchivoVOBackingList","content":"/**\n     * \n     */\npublic java.lang.Object[] getArchivoVOBackingList()\n    {\n        java.lang.Object[] values = this.archivoVOValueList;\n        java.lang.Object[] labels = this.archivoVOLabelList;\n\n        if (values == null || values.length == 0)\n        {\n            return values;\n        }\n\n        if (labels == null || labels.length == 0)\n        {\n            labels = values;\n        }\n\n        final int length = java.lang.Math.min(labels.length, values.length);\n        java.lang.Object[] backingList = new java.lang.Object[length];\n\n        for (int i=0; i<length; i++)\n        {\n            backingList[i] = new LabelValue(labels[i], values[i]);\n        }\n\n        return backingList;\n    }"} {"path":"downloaded/FormularioModificarAceptarFormImpl.java","method_name":"getArchivoVOValueList","content":"/**\n     * \n     */\npublic java.lang.Object[] getArchivoVOValueList()\n    {\n        return this.archivoVOValueList;\n    }"} {"path":"downloaded/FormularioModificarAceptarFormImpl.java","method_name":"getArchivoVOLabelList","content":"/**\n     * \n     */\npublic java.lang.Object[] getArchivoVOLabelList()\n    {\n        return this.archivoVOLabelList;\n    }"} {"path":"downloaded/FormularioModificarAceptarFormImpl.java","method_name":"getNuevoNombre","content":"/**\n     * \n     */\npublic java.lang.String getNuevoNombre()\n    {\n        return this.nuevoNombre;\n    }"} {"path":"downloaded/FormularioModificarAceptarFormImpl.java","method_name":"getNuevoNombreBackingList","content":"/**\n     * \n     */\npublic java.lang.Object[] getNuevoNombreBackingList()\n    {\n        java.lang.Object[] values = this.nuevoNombreValueList;\n        java.lang.Object[] labels = this.nuevoNombreLabelList;\n\n        if (values == null || values.length == 0)\n        {\n            return values;\n        }\n\n        if (labels == null || labels.length == 0)\n        {\n            labels = values;\n        }\n\n        final int length = java.lang.Math.min(labels.length, values.length);\n        java.lang.Object[] backingList = new java.lang.Object[length];\n\n        for (int i=0; i<length; i++)\n        {\n            backingList[i] = new LabelValue(labels[i], values[i]);\n        }\n\n        return backingList;\n    }"} {"path":"downloaded/FormularioModificarAceptarFormImpl.java","method_name":"getNuevoNombreValueList","content":"/**\n     * \n     */\npublic java.lang.Object[] getNuevoNombreValueList()\n    {\n        return this.nuevoNombreValueList;\n    }"} {"path":"downloaded/FormularioModificarAceptarFormImpl.java","method_name":"getNuevoNombreLabelList","content":"/**\n     * \n     */\npublic java.lang.Object[] getNuevoNombreLabelList()\n    {\n        return this.nuevoNombreLabelList;\n    }"} {"path":"downloaded/FormularioModificarAceptarFormImpl.java","method_name":"getAction","content":"/**\n     * \n     */\npublic java.lang.String getAction()\n    {\n        return this.action;\n    }"} {"path":"downloaded/FormularioModificarAceptarFormImpl.java","method_name":"getActionBackingList","content":"/**\n     * \n     */\npublic java.lang.Object[] getActionBackingList()\n    {\n        java.lang.Object[] values = this.actionValueList;\n        java.lang.Object[] labels = this.actionLabelList;\n\n        if (values == null || values.length == 0)\n        {\n            return values;\n        }\n\n        if (labels == null || labels.length == 0)\n        {\n            labels = values;\n        }\n\n        final int length = java.lang.Math.min(labels.length, values.length);\n        java.lang.Object[] backingList = new java.lang.Object[length];\n\n        for (int i=0; i<length; i++)\n        {\n            backingList[i] = new LabelValue(labels[i], values[i]);\n        }\n\n        return backingList;\n    }"} {"path":"downloaded/FormularioModificarAceptarFormImpl.java","method_name":"getActionValueList","content":"/**\n     * \n     */\npublic java.lang.Object[] getActionValueList()\n    {\n        return this.actionValueList;\n    }"} {"path":"downloaded/FormularioModificarAceptarFormImpl.java","method_name":"getActionLabelList","content":"/**\n     * \n     */\npublic java.lang.Object[] getActionLabelList()\n    {\n        return this.actionLabelList;\n    }"} {"path":"downloaded/FormularioModificarAceptarFormImpl.java","method_name":"toString","content":"/**\n     * @see org.apache.struts.validator.ValidatorForm#reset(org.apache.struts.action.ActionMapping,javax.servlet.http.HttpServletRequest)\n     */\npublic java.lang.String toString()\n    {\n        org.apache.commons.lang.builder.ToStringBuilder builder =\n            new org.apache.commons.lang.builder.ToStringBuilder(this);\n        builder.append(\"extension\", this.extension);\n        builder.append(\"archivoVO\", this.archivoVO);\n        builder.append(\"nuevoNombre\", this.nuevoNombre);\n        builder.append(\"action\", this.action);\n        return builder.toString();\n    }"} {"path":"downloaded/FormularioModificarAceptarFormImpl.java","method_name":"validate","content":"/**\n     * Override to provide population of current form with request parameters when validation fails.\n     *\n     * @see org.apache.struts.action.ActionForm#validate(org.apache.struts.action.ActionMapping, javax.servlet.http.HttpServletRequest)\n     */\npublic org.apache.struts.action.ActionErrors validate(org.apache.struts.action.ActionMapping mapping, javax.servlet.http.HttpServletRequest request)\n    {\n        final org.apache.struts.action.ActionErrors errors = super.validate(mapping, request);\n        if (errors != null && !errors.isEmpty())\n        {\n            // we populate the current form with only the request parameters\n            Object currentForm = request.getSession().getAttribute(\"form\");\n            // if we can't get the 'form' from the session, try from the request\n            if (currentForm == null)\n            {\n                currentForm = request.getAttribute(\"form\");\n            }\n            if (currentForm != null)\n            {\n                final java.util.Map parameters = new java.util.HashMap();\n                for (final java.util.Enumeration names = request.getParameterNames(); names.hasMoreElements();)\n                {\n                    final String name = String.valueOf(names.nextElement());\n                    parameters.put(name, request.getParameter(name));\n                }\n                try\n                {\n                    org.apache.commons.beanutils.BeanUtils.populate(currentForm, parameters);\n                }\n                catch (java.lang.Exception populateException)\n                {\n                    // ignore if we have an exception here (we just don't populate).\n                }\n            }\n        }\n        return errors;\n    }"} {"path":"downloaded/AutoLogin.java","method_name":"getAddresses","content":"/**\n   * The member previously known only as 'enabled', which is to say; enabled login via ip address.\n   */\npublic List<String> getAddresses() {\n    return addresses;\n  }"} {"path":"downloaded/AutoLogin.java","method_name":"isEnabledViaIp","content":"/**\n   * The member previously known only as 'enabled', which is to say; enabled login via ip address.\n   */\npublic boolean isEnabledViaIp() {\n    return enabledViaIp;\n  }"} {"path":"downloaded/AutoLogin.java","method_name":"isLoginViaSSL","content":"/**\n   * The member previously known only as 'enabled', which is to say; enabled login via ip address.\n   */\npublic boolean isLoginViaSSL() {\n    return loginViaSSL;\n  }"} {"path":"downloaded/AutoLogin.java","method_name":"getUserid","content":"/**\n   * The member previously known only as 'enabled', which is to say; enabled login via ip address.\n   */\npublic String getUserid() {\n    return userid;\n  }"} {"path":"downloaded/AutoLogin.java","method_name":"getUsername","content":"/**\n   * The member previously known only as 'enabled', which is to say; enabled login via ip address.\n   */\npublic String getUsername() {\n    return username;\n  }"} {"path":"downloaded/AutoLogin.java","method_name":"isEditDetailsDisallowed","content":"/**\n   * The member previously known only as 'enabled', which is to say; enabled login via ip address.\n   */\npublic boolean isEditDetailsDisallowed() {\n    return editDetailsDisallowed;\n  }"} {"path":"downloaded/AutoLogin.java","method_name":"isNotAutomatic","content":"/**\n   * The member previously known only as 'enabled', which is to say; enabled login via ip address.\n   */\npublic boolean isNotAutomatic() {\n    return notAutomatic;\n  }"} {"path":"downloaded/AutoLogin.java","method_name":"getHostMatcher","content":"/**\n   * The member previously known only as 'enabled', which is to say; enabled login via ip address.\n   */\npublic HostMatcher getHostMatcher() {\n    if (hostMatcher == null) {\n      hostMatcher = new HostMatcher(addresses);\n    }\n    return hostMatcher;\n  }"} {"path":"downloaded/AutoLogin.java","method_name":"isTransientDrmAcceptances","content":"/**\n   * The member previously known only as 'enabled', which is to say; enabled login via ip address.\n   */\npublic boolean isTransientDrmAcceptances() {\n    return transientDrmAcceptances;\n  }"} {"path":"downloaded/AutoLogin.java","method_name":"isEnableIpReferAcl","content":"/**\n   * The member previously known only as 'enabled', which is to say; enabled login via ip address.\n   */\npublic boolean isEnableIpReferAcl() {\n    return enableIpReferAcl;\n  }"} {"path":"downloaded/AwaitDelayStep.java","method_name":"init","content":"/**\n       * @param param Delay point created in <code>scheduleDelay.key</code>.\n       * @return Self.\n       */\n@Override\n      public Builder init(String param) {\n         return key(param);\n      }"} {"path":"downloaded/AwaitDelayStep.java","method_name":"key","content":"/**\n       * Delay point created in <code>scheduleDelay.key</code>.\n       *\n       * @param key Key.\n       * @return Self.\n       */\npublic Builder key(String key) {\n         this.key = key;\n         return this;\n      }"} {"path":"downloaded/AwaitDelayStep.java","method_name":"build","content":"/**\n       * Delay point created in <code>scheduleDelay.key</code>.\n       *\n       * @param key Key.\n       * @return Self.\n       */\n@Override\n      public List<Step> build() {\n         return Collections.singletonList(new AwaitDelayStep(SessionFactory.readAccess(key)));\n      }"} {"path":"downloaded/HttpTest.java","method_name":"bodyAsJava","content":"/**\n     * Return the response body as the appropriate Java object.\n     * \n     * @param response\n     * @return the response body\n     */\nprotected static <T> T bodyAsJava(Response response, TypeToken<T> type) {\n        Type type0 = type.getType();\n        return new Gson().fromJson(bodyAsJson(response), type0);\n    }"} {"path":"downloaded/HttpTest.java","method_name":"bodyAsJson","content":"/**\n     * Return a JsonElement representation of the response body.\n     * \n     * @param response\n     * @param the json response\n     */\nprotected static JsonElement bodyAsJson(Response response) {\n        try {\n            String body = response.body().string();\n            JsonElement json = new JsonParser().parse(body);\n            Variables.register(\"json_body_\" + response.hashCode(), body);\n            return json;\n        }\n        catch (IOException e) {\n            throw CheckedExceptions.wrapAsRuntimeException(e);\n        }\n    }"} {"path":"downloaded/HttpTest.java","method_name":"cleanUrlArgs","content":"/**\n     * Do anything that is necessary to clean up the URL args. For example, make\n     * sure any records (represented as an int or long) does not get rendered\n     * using comma separators.\n     * \n     * @param args\n     * @return the clean args\n     */\nprivate static Object[] cleanUrlArgs(Object... args) {\n        for (int i = 0; i < args.length; i++) {\n            Object arg = args[i];\n            if(arg.getClass() == long.class || arg.getClass() == int.class) {\n                args[i] = Long.toString((long) arg);\n            }\n            else if(arg.getClass() == Long.class\n                    || arg.getClass() == Integer.class) {\n                args[i] = arg.toString();\n            }\n        }\n        return args;\n    }"} {"path":"downloaded/HttpTest.java","method_name":"filterArgs","content":"/**\n     * Go through the {@code args} and filter out any that shouldn't be\n     * considered URL args. It is possible that some of the filtered args will\n     * be passed as arguments to the {@code builder}.\n     * \n     * @param builder\n     * @param args\n     * @return the filtered args\n     */\nprivate static Object[] filterArgs(Request.Builder builder,\n            Object... args) {\n        List<Object> argsList = Lists.newArrayList(args);\n        Iterator<Object> it = argsList.iterator();\n        while (it.hasNext()) {\n            Object arg = it.next();\n            if(arg instanceof Headers) {\n                builder.headers((Headers) arg);\n                it.remove();\n            }\n        }\n        args = argsList.size() != args.length ? argsList.toArray() : args;\n        return args;\n    }"} {"path":"downloaded/HttpTest.java","method_name":"clearClientCookies","content":"/**\n     * Remove all the client side cookies.\n     * \n     * @return {@code true} if the cookies are removed\n     */\nprotected boolean clearClientCookies() {\n        return ((CookieManager) http.getCookieHandler()).getCookieStore()\n                .removeAll();\n    }"} {"path":"downloaded/HttpTest.java","method_name":"delete","content":"/**\n     * Perform a DELETE request\n     * \n     * @param route\n     * @param args - include a {@link Headers} object to set the request headers\n     * @return the response\n     */\nprotected Response delete(String route, Object... args) {\n        try {\n            Request.Builder builder = new Request.Builder();\n            args = filterArgs(builder, args);\n            args = cleanUrlArgs(args);\n            route = MessageFormat.format(route, args);\n            Request request = builder.url(base + route).delete().build();\n            Response response = http.newCall(request).execute();\n            long ts = response.hashCode();\n            Variables.register(\"request_\" + ts, request);\n            Variables.register(\"response_\" + ts, response);\n            return response;\n        }\n        catch (IOException e) {\n            throw CheckedExceptions.wrapAsRuntimeException(e);\n        }\n    }"} {"path":"downloaded/HttpTest.java","method_name":"get","content":"/**\n     * Perform a GET request\n     * \n     * @param route\n     * @param args - include a {@link Headers} object to set the request headers\n     * @return the response\n     */\nprotected Response get(String route, Object... args) {\n        try {\n            Request.Builder builder = new Request.Builder();\n            args = filterArgs(builder, args);\n            args = cleanUrlArgs(args);\n            route = MessageFormat.format(route, args);\n            Request request = builder.url(base + route).get().build();\n            Response response = http.newCall(request).execute();\n            long ts = response.hashCode();\n            Variables.register(\"request_\" + ts, request);\n            Variables.register(\"response_\" + ts, response);\n            return response;\n        }\n        catch (IOException e) {\n            throw CheckedExceptions.wrapAsRuntimeException(e);\n        }\n    }"} {"path":"downloaded/HttpTest.java","method_name":"login","content":"/**\n     * Perform a login request to the default environment.\n     * \n     * @return the response\n     */\nprotected Response login() {\n        return login(\"\");\n    }"} {"path":"downloaded/HttpTest.java","method_name":"login","content":"/**\n     * Perform a login request.\n     * \n     * @param environment\n     * @return the response\n     */\nprotected Response login(String environment) {\n        environment = Strings.isNullOrEmpty(environment) ? \"\"\n                : \"/\" + environment;\n        JsonObject creds = new JsonObject();\n        creds.addProperty(\"username\", \"admin\");\n        creds.addProperty(\"password\", \"admin\");\n        Response resp = post(environment + \"/login\", creds.toString());\n        return resp;\n    }"} {"path":"downloaded/HttpTest.java","method_name":"post","content":"/**\n     * Perform a POST request.\n     * \n     * @param route\n     * @param data\n     * @param args - include a {@link Headers} object to set the request headers\n     * @return the response\n     */\nprotected Response post(String route, String data, Object... args) {\n        try {\n            RequestBody body = RequestBody.create(JSON, data);\n            Request.Builder builder = new Request.Builder();\n            args = filterArgs(builder, args);\n            args = cleanUrlArgs(args);\n            route = MessageFormat.format(route, args);\n            Request request = builder.url(base + route).post(body).build();\n            Response response = http.newCall(request).execute();\n            long ts = response.hashCode();\n            Variables.register(\"request_\" + ts, request);\n            Variables.register(\"response_\" + ts, response);\n            return response;\n        }\n        catch (IOException e) {\n            throw CheckedExceptions.wrapAsRuntimeException(e);\n        }\n    }"} {"path":"downloaded/HttpTest.java","method_name":"put","content":"/**\n     * Perform a PUT request.\n     * \n     * @param route\n     * @param data\n     * @param args - include a {@link Headers} object to set the request headers\n     * @return the response\n     */\nprotected Response put(String route, String data, Object... args) {\n        try {\n            RequestBody body = RequestBody.create(JSON, data);\n            Request.Builder builder = new Request.Builder();\n            args = filterArgs(builder, args);\n            args = cleanUrlArgs(args);\n            route = MessageFormat.format(route, args);\n            Request request = builder.url(base + route).put(body).build();\n            Response response = http.newCall(request).execute();\n            long ts = response.hashCode();\n            Variables.register(\"request_\" + ts, request);\n            Variables.register(\"response_\" + ts, response);\n            return response;\n        }\n        catch (IOException e) {\n            throw CheckedExceptions.wrapAsRuntimeException(e);\n        }\n    }"} {"path":"downloaded/FindMissingNumber.java","method_name":"findOneMissingNumber","content":"/**\n     * in case find one missing number, number is start from 1\n     */\nstatic int findOneMissingNumber(int a[]) {\n        int number = 0;\n        int size = a.length;\n        for (int i = 0; i < size; i++)\n            number ^= ((i + 1) ^ a[i]);\n        number ^= (size + 1);\n        return number;\n    }"} {"path":"downloaded/AbstractTransitionalCssProperty.java","method_name":"getCallback","content":"/**\n\t * Gets the current callback.\n\t * @return the callback used to forward new values\n\t */\npublic TransitionalCssPropertyCallback<T> getCallback(){\n\t\treturn callback;\n\t}"} {"path":"downloaded/AbstractTransitionalCssProperty.java","method_name":"getSource","content":"/**\n\t * Gets the current source value.\n\t * @return the last value from {@link #setSource(CssPropertyContainer)}\n\t */\npublic T getSource(){\n\t\treturn source;\n\t}"} {"path":"downloaded/AbstractTransitionalCssProperty.java","method_name":"getTarget","content":"/**\n\t * Gets the current target value.\n\t * @return the last value from {@link #setTarget(CssPropertyContainer)}\n\t */\npublic T getTarget(){\n\t\treturn target;\n\t}"} {"path":"downloaded/AbstractTransitionalCssProperty.java","method_name":"getTransition","content":"/**\n\t * Gets the current progress of the transition.\n\t * @return a value between <code>0</code> and <code>1</code>\n\t */\npublic double getTransition(){\n\t\treturn transition;\n\t}"} {"path":"downloaded/Bikepov.java","method_name":"getWheel","content":"/**\n         * This builds a wheel (if required) made of segments.\n         * @return \n         */\nprotected Map<Integer, List<Shape>> getWheel() {\n            if (mapWheel == null) {\n                mapWheel = new HashMap<>(CIRCLE_COUNT);\n\n                // The current radius\n                float radius = getRadius();\n                // The radius of each individual circle...\n                float circleRadius = radius / CIRCLE_COUNT;\n                // The range of each segment\n                float extent = 360f / SEGMENT_COUNT;\n                for (int circle = 0; circle < CIRCLE_COUNT; circle++) {\n                    float startAngle = 0;\n                    List<Shape> segments = new ArrayList<>(SEGMENT_COUNT);\n                    mapWheel.put(circle, segments);\n\n                    // Calculate the \"translation\" to place each segement in the\n                    // center of the screen\n                    float innerRadius = circleRadius * circle;\n                    float x = (getWidth() - innerRadius) / 2;\n                    float y = (getHeight() - innerRadius) / 2;\n                    for (int seg = 0; seg < SEGMENT_COUNT; seg++) {\n                        // Generate a Segment shape\n                        Segment segment = new Segment(circleRadius * circle +AXIS_SPACE , circleRadius, startAngle, extent);\n                        startAngle += extent;\n\n                        // We translate the segment to the screen space\n                        // This will make it faster to paint and check for mouse clicks\n                        PathIterator pi = segment.getPathIterator(AffineTransform.getTranslateInstance(x - AXIS_SPACE/2, y - AXIS_SPACE/2));\n                        Path2D path = new Path2D.Float();\n                        path.append(pi, true);\n                        segments.add(path);\n                    }\n                }\n            }\n\n            return mapWheel;\n        }"} {"path":"downloaded/Bikepov.java","method_name":"getPreferredSize","content":"/**\n         * This builds a wheel (if required) made of segments.\n         * @return \n         */\n@Override\n        public Dimension getPreferredSize() {\n            return new Dimension(800, 800);\n        }"} {"path":"downloaded/SystemInformationModelImpl.java","method_name":"eStaticClass","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tprotected EClass eStaticClass()\n\t{\n\t\treturn SimPackage.Literals.SYSTEM_INFORMATION_MODEL;\n\t}"} {"path":"downloaded/SystemInformationModelImpl.java","method_name":"getKind","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic SystemInformationModelKind getKind()\n\t{\n\t\treturn kind;\n\t}"} {"path":"downloaded/SystemInformationModelImpl.java","method_name":"isGenerate","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic boolean isGenerate()\n\t{\n\t\treturn generate;\n\t}"} {"path":"downloaded/SystemInformationModelImpl.java","method_name":"eGet","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tpublic Object eGet(int featureID, boolean resolve, boolean coreType)\n\t{\n\t\tswitch (featureID)\n\t\t{\n\t\t\tcase SimPackage.SYSTEM_INFORMATION_MODEL__KIND:\n\t\t\t\treturn getKind();\n\t\t\tcase SimPackage.SYSTEM_INFORMATION_MODEL__GENERATE:\n\t\t\t\treturn isGenerate();\n\t\t}\n\t\treturn super.eGet(featureID, resolve, coreType);\n\t}"} {"path":"downloaded/SystemInformationModelImpl.java","method_name":"eSet","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tpublic void eSet(int featureID, Object newValue)\n\t{\n\t\tswitch (featureID)\n\t\t{\n\t\t\tcase SimPackage.SYSTEM_INFORMATION_MODEL__KIND:\n\t\t\t\tsetKind((SystemInformationModelKind)newValue);\n\t\t\t\treturn;\n\t\t\tcase SimPackage.SYSTEM_INFORMATION_MODEL__GENERATE:\n\t\t\t\tsetGenerate((Boolean)newValue);\n\t\t\t\treturn;\n\t\t}\n\t\tsuper.eSet(featureID, newValue);\n\t}"} {"path":"downloaded/SystemInformationModelImpl.java","method_name":"eUnset","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tpublic void eUnset(int featureID)\n\t{\n\t\tswitch (featureID)\n\t\t{\n\t\t\tcase SimPackage.SYSTEM_INFORMATION_MODEL__KIND:\n\t\t\t\tsetKind(KIND_EDEFAULT);\n\t\t\t\treturn;\n\t\t\tcase SimPackage.SYSTEM_INFORMATION_MODEL__GENERATE:\n\t\t\t\tsetGenerate(GENERATE_EDEFAULT);\n\t\t\t\treturn;\n\t\t}\n\t\tsuper.eUnset(featureID);\n\t}"} {"path":"downloaded/SystemInformationModelImpl.java","method_name":"eIsSet","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tpublic boolean eIsSet(int featureID)\n\t{\n\t\tswitch (featureID)\n\t\t{\n\t\t\tcase SimPackage.SYSTEM_INFORMATION_MODEL__KIND:\n\t\t\t\treturn kind != KIND_EDEFAULT;\n\t\t\tcase SimPackage.SYSTEM_INFORMATION_MODEL__GENERATE:\n\t\t\t\treturn generate != GENERATE_EDEFAULT;\n\t\t}\n\t\treturn super.eIsSet(featureID);\n\t}"} {"path":"downloaded/SystemInformationModelImpl.java","method_name":"toString","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tpublic String toString()\n\t{\n\t\tif (eIsProxy()) return super.toString();\n\n\t\tStringBuffer result = new StringBuffer(super.toString());\n\t\tresult.append(\" (kind: \");\n\t\tresult.append(kind);\n\t\tresult.append(\", generate: \");\n\t\tresult.append(generate);\n\t\tresult.append(')');\n\t\treturn result.toString();\n\t}"} {"path":"downloaded/TikaProcessor.java","method_name":"processInputStream","content":"/**\n     * \n     * \n     * \n     * @param stream\n     * @return TikaDoc\n     * @throws FileNotFoundException \n     */\npublic TikaDoc processInputStream(InputStream stream) throws FileNotFoundException {\n        \n        TikaDoc tikaDoc = new TikaDoc();\n        \n        BodyContentHandler handler;\n        InputStream input = stream;\n        BufferedInputStream bis = null;\n        \n            try {\n                \n                Metadata metadata = new Metadata();\n                ParseContext pcontext = new ParseContext();\n                \n                bis = new BufferedInputStream(stream);\n                handler = new BodyContentHandler(-1); // Unlimited\n\n                Parser parser = new AutoDetectParser();\n                parser.parse(bis, handler, metadata, pcontext);\n                \n                logger.debug(\"Contents of file: \" + handler.toString());\n\n                //metadataNames = metadata.names();\n                tikaDoc.setMetaData(metadata);\n                tikaDoc.setFileContent(handler.toString());\n        \n            } catch (IOException ex) {\n                logger.error(\"IOException in \" + TikaProcessor.class.getName(), ex);\n            } catch (SAXException ex) {\n                logger.error(\"SAXException in \" + TikaProcessor.class.getName(), ex);\n            } catch (TikaException ex) {\n                logger.error(\"TikaException in \" + TikaProcessor.class.getName(), ex);\n            } finally {\n                try {\n                    bis.close();\n                } catch (IOException ex) {\n                    logger.error(\"IOException in \" + TikaProcessor.class.getName(), ex);\n                }\n            }\n\n        \n        return tikaDoc;\n    }"} {"path":"downloaded/Zoo.java","method_name":"countReptiles","content":"/**\n     * We can still expose certain properties of our ArrayLists to anyone using our code, but instead we do it by adding\n     * methods which can be called from elsewhere and which return a specific piece of information. This enforces both\n     * encapsulation (other developers can only access what we allow them to) and also single responsibility (each method\n     * returns a single piece of information)\n     */\npublic int countReptiles(){\n        return this.reptileHouse.size();\n    }"} {"path":"downloaded/Zoo.java","method_name":"isReptileInReptileHouse","content":"/**\n     * We can still expose certain properties of our ArrayLists to anyone using our code, but instead we do it by adding\n     * methods which can be called from elsewhere and which return a specific piece of information. This enforces both\n     * encapsulation (other developers can only access what we allow them to) and also single responsibility (each method\n     * returns a single piece of information)\n     */\npublic boolean isReptileInReptileHouse(Reptile reptile){\n        return reptileHouse.contains(reptile);\n    }"} {"path":"downloaded/Freezer.java","method_name":"onPacketReceiving","content":"/**\n\t * Stores state information about a player who is frozen.\n\t */\n@Override\n\tpublic void onPacketReceiving(PacketEvent event) {\n\t\tif (!isFrozen(event.getPlayer())) {\n\t\t\t// Only process frozen players\n\t\t\treturn;\n\t\t}\n\n\t\tif (event.getPacketType() == PacketType.Play.Client.POSITION) {\n\t\t\t// Convert to a \"Player\" packet, which has no real data.\n\t\t\tevent.setCancelled(true);\n\n\t\t\tPacketContainer oldPacket = event.getPacket();\n\t\t\tPacketContainer newPacket = protocolManager.createPacket(PacketType.Play.Client.FLYING);\n\n\t\t\tnewPacket.getBooleans().write(0, oldPacket.getBooleans().read(0));  // On ground\n\n\t\t\ttry {\n\t\t\t\t// Can't set the event's packet directly due to https://github.com/dmulloy2/ProtocolLib/issues/201\n\t\t\t\tprotocolManager.recieveClientPacket(event.getPlayer(), newPacket);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new RuntimeException(\"Failed to rebroadcast player packet\", e);\n\t\t\t}\n\n\t\t\tresendPosition(event.getPlayer());\n\t\t} else if (event.getPacketType() == PacketType.Play.Client.POSITION_LOOK) {\n\t\t\t// We want to cancel out the position portion but not the\n\t\t\t// look portion, so we resend the packet as a look packet\n\t\t\tevent.setCancelled(true);\n\n\t\t\tPacketContainer oldPacket = event.getPacket();\n\t\t\tPacketContainer newPacket = protocolManager.createPacket(PacketType.Play.Client.LOOK);\n\n\t\t\t// Copy over fields to the new packet\n\t\t\tnewPacket.getFloat().write(0, oldPacket.getFloat().read(0));  // Yaw\n\t\t\tnewPacket.getFloat().write(1, oldPacket.getFloat().read(1));  // Pitch\n\t\t\tnewPacket.getBooleans().write(0, oldPacket.getBooleans().read(0));  // On ground\n\n\t\t\ttry {\n\t\t\t\tprotocolManager.recieveClientPacket(event.getPlayer(), newPacket);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new RuntimeException(\"Failed to rebroadcast look packet\", e);\n\t\t\t}\n\n\t\t\tresendPosition(event.getPlayer());\n\t\t}\n\t}"} {"path":"downloaded/Freezer.java","method_name":"onPacketSending","content":"/**\n\t * Stores state information about a player who is frozen.\n\t */\n@Override\n\tpublic void onPacketSending(PacketEvent event) {\n\t\tif (!isFrozen(event.getPlayer())) {\n\t\t\t// Only process frozen players\n\t\t\treturn;\n\t\t}\n\n\t\tif (event.getPacketType() == PacketType.Play.Server.ABILITIES) {\n\t\t\tif (!event.getPacket().getBooleans().read(1)) {\n\t\t\t\t// Not currently flying...\n\t\t\t\tevent.setCancelled(true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tevent.getPacket().getBooleans().write(1, true);  // Is flying\n\t\t\tevent.getPacket().getBooleans().write(2, false);  // Can fly - when false, players can't toggle flight, even if they are already flying\n\t\t\t// Fly speed - changing this keeps players from rising or falling with shift / space, and also keeps them from moving.\n\t\t\tevent.getPacket().getFloat().write(0, 0f);\n\t\t\t// We don't change walk speed since that only affects FOV, and the player is flying anyways.\n\t\t}\n\t}"} {"path":"downloaded/Freezer.java","method_name":"isFrozen","content":"/**\n\t * Checks if the given player is frozen.\n\t */\npublic boolean isFrozen(Player player) {\n\t\treturn frozenPlayers.containsKey(player.getUniqueId());\n\t}"} {"path":"downloaded/Freezer.java","method_name":"getFlagsModifier","content":"/**\n\t * Gets the structure flags structure modifier for the given player position packet.\n\t */\nprivate StructureModifier<Set<PlayerTeleportFlag>> getFlagsModifier(PacketContainer packet) {\n\t\treturn packet.getModifier().withType(Set.class,\n\t\t\t\tBukkitConverters.getSetConverter(FLAGS_CLASS, EnumWrappers\n\t\t\t\t\t\t.getGenericConverter(PlayerTeleportFlag.class)));\n\t}"} {"path":"downloaded/MonthNoteDao.java","method_name":"ronized ","content":"/**\n     * 插入一条新月帐单\n     *\n     * @param m\note\n     */\n    public static synchronized boolean newMNote(MonthNote monthNote) {\n        boolean isExit;\n        SQLiteDatabase db = MyApplication.dbHelper.getWritableDatabase();\n        db.execSQL(\"insert into month_note(last_balance,pay,salary,income,balance,actual_balance,duration,remark,time) values(?,?,?,?,?,?,?,?,?)\",\n                new Object[]{monthNote.getLast_balance(), monthNote.getPay(), monthNote.getSalary(), monthNote.getIncome(),\n                        monthNote.getBalance(), monthNote.getActual_balance(),\n                        monthNote.getDuration(), monthNote.getRemark(), monthNote.getTime()});\n        Cursor cursor = db.rawQuery(\"select * from month_note where actual_balance = ? and duration = ?\",\n                new String[]{monthNote.getActual_balance(), monthNote.getDuration()});\n        isExit = cursor.moveToFirst();\n        cursor.close();\n        db.close();\n        retu"} {"path":"downloaded/MonthNoteDao.java","method_name":"static synchr","content":"/**\n     * 插入一条新月帐单\n     *\n     * @param m\n�\n     *\n     * @return\n     */\n    public static synchronized List<MonthNote> getMonthNotes() {\n        List<MonthNote> monthNotes = new ArrayList<MonthNote>();\n        SQLiteDatabase db = MyApplication.dbHelper.getReadableDatabase();\n        Cursor cursor = db.rawQuery(\"select * from month_note\", null);\n        while (cursor.moveToNext()) {\n            //String last_balance, String pay, String salary, String income, String balance,\n            //String actual_balance, String duration, String remark, String time\n            MonthNote monthNote = new MonthNote(cursor.getString(cursor.getColumnIndex(\"last_balance\")),\n                    cursor.getString(cursor.getColumnIndex(\"pay\")),\n                    cursor.getString(cursor.getColumnIndex(\"salary\")),\n                    cursor.getString(cursor.getColumnIndex(\"income\")),\n                    cursor.getString(cursor.getColumnIndex(\"balance\")),\n                    cursor.getString(cursor.getColumnIndex(\"actual_balance\")),\n                    cursor.getString(cursor.getColumnIndex(\"duration\")),\n                    cursor.getString(cursor.getColumnIndex(\"remark\")),\n                    cursor.getString(cursor.getColumnIndex(\"time\")));\n            monthNotes.add(monthNote);\n        }\n        cursor.close();\n        db.close"} {"path":"downloaded/MonthNoteDao.java","method_name":"otes\n    ","content":"/**\n     * 插入一条新月帐单\n     *\n     * @param m\n�帐单\n     *\n     * @param monthNotes\n     */\n    public static synchronized boolean newMNotes(List<MonthNote> monthNotes) {\n        boolean isExit = true;\n        SQLiteDatabase db = MyApplication.dbHelper.getWritableDatabase();\n        db.execSQL(\"delete from month_note\"); //先清除本地数据,再一次添加新数据\n        for (int i = 0; i < monthNotes.size(); i++) {\n            if (isExit) {\n                MonthNote monthNote = monthNotes.get(i);\n                db.execSQL(\"insert into month_note(last_balance,pay,salary,income,balance,actual_balance,duration,remark,time) values(?,?,?,?,?,?,?,?,?)\",\n                        new Object[]{monthNote.getLast_balance(), monthNote.getPay(), monthNote.getSalary(), monthNote.getIncome(),\n                                monthNote.getBalance(), monthNote.getActual_balance(),\n                                monthNote.getDuration(), monthNote.getRemark(), monthNote.getTime()});\n                Cursor cursor = db.rawQuery(\"select * from month_note where actual_balance = ? and duration = ?\",\n                        new String[]{monthNote.getActual_balance(), monthNote.getDuration()});\n                isExit = cursor.moveToFirst();\n                cursor.close();\n         "} {"path":"downloaded/UCLARadioService.java","method_name":"onBind","content":"/** I don't know what this does because I didn't read the documentation very thoroughly **/\n@Override\n\tpublic IBinder onBind(Intent intent) {\n\t\t// TODO Auto-generated method stub\n\t\treturn null;\n\t}"} {"path":"downloaded/WalkingDistance.java","method_name":"genKeys","content":"/**\n     * Initializes the WalkingDistance object with application mode.\n     *\n     * @param appMode the given applicationMode for GUI or CONSOLE\n     */\nprivate int[] genKeys() {\n        HashSet<Integer> set = new HashSet<Integer>();\n        HashSet<int[]> next = new HashSet<int[]>();\n        rowKeys = new HashMap<Integer, Integer>();\n        int[] rowKeys2combo = new int[keySize];\n\n        // 1st set starts with 0004, 0040, 0400, 4000\n        int counter = 0;\n        int key;\n        for (int i = 0; i < rowSize; i++) {\n            int[] temp = new int[rowSize];\n            temp[i] = rowSize;\n            key = rowCombo2Key(temp);\n            rowKeys2combo[counter] = key;\n            rowKeys.put(key, counter++);\n            set.add(key);\n            next.add(temp);\n        }\n\n        while (next.size() > 0) {\n            HashSet<int[]> expand = next;\n            next = new HashSet<int[]>();\n            for (int[] combo : expand) {\n                for (int i = 0; i < rowSize; i++) {\n                    if (combo[i] > 0) {\n                        for (int j = 0; j < rowSize; j++) {\n                            if (i != j) {\n                                int[] shift = new int[rowSize];\n                                System.arraycopy(combo, 0, shift, 0, rowSize);\n                                shift[i] = combo[i] - 1;\n                                shift[j] = combo[j] + 1;\n                                key = rowCombo2Key(shift);\n                                if (!set.contains(key)) {\n                                    rowKeys2combo[counter] = key;\n                                    rowKeys.put(key, counter++);\n                                    set.add(key);\n                                    next.add(shift);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        final int splitIdx = counter;\n\n        // 2nd set starts with 0003, 0030, 0300, 3000\n        for (int i = 0; i < rowSize; i++) {\n            int[] temp = new int[rowSize];\n            temp[i] = rowSize - 1;\n            key = rowCombo2Key(temp);\n            rowKeys2combo[counter] = key;\n            rowKeys.put(key, counter++);\n            set.add(key);\n            next.add(temp);\n        }\n\n        while (next.size() > 0) {\n            HashSet<int[]> expand = next;\n            next = new HashSet<int[]>();\n            for (int[] combo : expand) {\n                for (int i = 0; i < rowSize; i++) {\n                    if (combo[i] > 0) {\n                        for (int j = 0; j < rowSize; j++) {\n                            if (i != j) {\n                                int[] shift = new int[rowSize];\n                                System.arraycopy(combo, 0, shift, 0, rowSize);\n                                shift[i] = combo[i] - 1;\n                                shift[j] = combo[j] + 1;\n                                key = rowCombo2Key(shift);\n                                if (!set.contains(key)) {\n                                    rowKeys2combo[counter] = key;\n                                    rowKeys.put(key, counter++);\n                                    set.add(key);\n                                    next.add(shift);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return genKeyLink(splitIdx, rowKeys2combo);\n    }"} {"path":"downloaded/WalkingDistance.java","method_name":"genKeyLink","content":"/**\n     * Initializes the WalkingDistance object with application mode.\n     *\n     * @param appMode the given applicationMode for GUI or CONSOLE\n     */\nprivate int[] genKeyLink(int splitIdx, int[] rowKeys2combo) {\n        int[] rowKeyLink = new int[keySize * rowSize];\n        final int keyBitsSize = 3;\n\n        // shift out from column, from 4 tiles to 3 tiles\n        for (int i = 0; i < splitIdx; i++) {\n            int combo = rowKeys2combo[i];\n            for (int j = 0; j < rowSize; j++) {\n                int shiftBits = (rowSize - j - 1) * keyBitsSize;\n                int self = ((combo >> shiftBits) & 0x0007);\n                if (self > 0) {\n                    self = (self - 1) << shiftBits;\n                    int nextKey = (combo & priorKey[j]) | (combo & afterKey[j]) | self;\n                    rowKeyLink[i * rowSize + j] = rowKeys.get(nextKey);\n                } else {\n                    // invalid link, empty column\n                    rowKeyLink[i * rowSize + j] = -1;\n                }\n            }\n        }\n\n        // shift in to column, from 3 tiles 4 tiles\n        for (int i = splitIdx; i < keySize; i++) {\n            for (int j = 0; j < rowSize; j++) {\n                int combo = rowKeys2combo[i];\n                int shiftBits = (rowSize - j - 1) * keyBitsSize;\n                int nextKey = (combo & priorKey[j]) | (combo & afterKey[j])\n                        | ((((combo >> shiftBits) & 0x0007) + 1) << shiftBits);\n                rowKeyLink[i * rowSize + j] = rowKeys.get(nextKey);\n            }\n        }\n        return rowKeyLink;\n    }"} {"path":"downloaded/WalkingDistance.java","method_name":"getRowKeys","content":"/**\n     * Returns HashMap of compress row Key to key index.\n     *\n     * @return HashMap of compress row Key to key index\n     */\npublic final HashMap<Integer, Integer> getRowKeys() {\n        return rowKeys;\n    }"} {"path":"downloaded/WalkingDistance.java","method_name":"getPtnKeys","content":"/**\n     * Returns HashMap of compress a set of row key to pattern index.\n     *\n     * @return HashMap of compress a set of row key to pattern index\n     */\npublic final HashMap<Integer, Integer> getPtnKeys() {\n        return ptnKeys;\n    }"} {"path":"downloaded/WalkingDistance.java","method_name":"getPattern","content":"/**\n     * Returns byte array of walking distance pattern.\n     *\n     * @return byte array of walking distance pattern\n     */\npublic final byte[] getPattern() {\n        return pattern;\n    }"} {"path":"downloaded/WalkingDistance.java","method_name":"getPtnLink","content":"/**\n     * Returns integer array of pattern move link set.\n     *\n     * @return integer array of pattern move link set\n     */\npublic final int[] getPtnLink() {\n        return ptnLink;\n    }"} {"path":"downloaded/WalkingDistance.java","method_name":"rowCombo2Key","content":"/**\n     * Returns integer array of pattern move link set.\n     *\n     * @return integer array of pattern move link set\n     */\nprivate int rowCombo2Key(int[] combo) {\n        int key = 0;\n        for (int i : combo) {\n            key = (key << 3) | i;\n        }\n        return key;\n    }"} {"path":"downloaded/WalkingDistance.java","method_name":"getRowKey","content":"/**\n     * Returns integer array of pattern move link set.\n     *\n     * @return integer array of pattern move link set\n     */\nprivate int getRowKey(int combo, int row) {\n        int key = (combo >> ((rowSize - row - 1) * 6)) & 0x003F;\n        return key;\n    }"} {"path":"downloaded/GetAllianceThreadJsonSerializer.java","method_name":"getName","content":"/**\n\t * Getter for the name field.\n\t * @return the value of the name field.\n\t */\npublic String getName() {\n\t\treturn name;\n\t}"} {"path":"downloaded/NonBlockingInterpreter.java","method_name":"start","content":"/**\n\t * Starts the interpreter, if not starting yet.\n\t * \n\t * @param fileCatalog\n\t */\npublic void start(FileCatalog fileCatalog) {\n\t\tthis.fileCatalog = fileCatalog;\n\t\tif (receivingCommands)\n\t\t\treturn;\n\t\tjwtToken = null;\n\t\treceivingCommands = true;\n\t\tnew Thread(this).start();\n\t}"} {"path":"downloaded/NonBlockingInterpreter.java","method_name":"readNextLine","content":"/**\n\t * Loop for receiving commands\n\t */\nprivate String readNextLine() {\n\t\tsafePrint(PROMPT);\n\t\treturn console.nextLine();\n\t}"} {"path":"downloaded/UserScore.java","method_name":"getPK","content":"/**\n     * \n     * \n     */\n@Override\n    public String getPK() {\n        return  \":\" + userId ;\n    }"} {"path":"downloaded/UserScore.java","method_name":"getUserId","content":"/**\n     * \n     * \n     */\npublic Integer getUserId(){\n        return this.userId;\n    }"} {"path":"downloaded/UserScore.java","method_name":"getTotal","content":"/**\n     * \n     * \n     */\npublic Integer getTotal(){\n        return this.total;\n    }"} {"path":"downloaded/UserScore.java","method_name":"getUpdateAt","content":"/**\n     * \n     * \n     */\npublic Date getUpdateAt(){\n        return this.updateAt;\n    }"} {"path":"downloaded/UserScore.java","method_name":"getCreateAt","content":"/**\n     * \n     * \n     */\npublic Date getCreateAt(){\n        return this.createAt;\n    }"} {"path":"downloaded/_082RemoveDuplicatesFromSortedList2.java","method_name":"相等，则工�","content":"/**\n     * 由于头节点可能也包含在重复的元素之内，所以需要判断头节点，因此需设立虚拟头节点\n     * 设立一个判断的工作节点，如果该工作节点\n�一位与它值相等，则工作节点指向它的下一位，直到遍历到与它不等的元素，退出循环\n     * 这是工作节点work是重复节点的最后一位，这时需要让curr的下一个指针指向work.next位置，即完全去掉重复的元素\n     */\n    public ListNode deleteDuplicates(ListNode head) {\n        ListNode dummyHead = new ListNode(0);\n        dummyHead.next = head;\n        ListNode curr = dummyHead;\n        while( curr.next != null ){\n            ListNode work = curr.next;\n            boolean isDel = false;\n            while( work.next != null && work.val == work.next.val){\n                work = work.next;\n                isDel = tr"} {"path":"downloaded/COREImpactModelImpl.java","method_name":"eStaticClass","content":"/**\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @generated\n     */\n@Override\n    protected EClass eStaticClass() {\n        return CorePackage.Literals.CORE_IMPACT_MODEL;\n    }"} {"path":"downloaded/InstagramMedia.java","method_name":"getType","content":"/**\n     * @return The type\n     */\npublic String getType() {\n        return type;\n    }"} {"path":"downloaded/InstagramMedia.java","method_name":"getTags","content":"/**\n     * @return The tags\n     */\npublic List<String> getTags() {\n        return tags;\n    }"} {"path":"downloaded/InstagramMedia.java","method_name":"getCaption","content":"/**\n     * @return The caption\n     */\npublic Caption getCaption() {\n        return caption;\n    }"} {"path":"downloaded/InstagramMedia.java","method_name":"getLikes","content":"/**\n     * @return The likes\n     */\npublic Likes getLikes() {\n        return likes;\n    }"} {"path":"downloaded/InstagramMedia.java","method_name":"getLink","content":"/**\n     * @return The link\n     */\npublic String getLink() {\n        return link;\n    }"} {"path":"downloaded/InstagramMedia.java","method_name":"getUser","content":"/**\n     * @return The user\n     */\npublic User getUser() {\n        return user;\n    }"} {"path":"downloaded/InstagramMedia.java","method_name":"getImages","content":"/**\n     * @return The images\n     */\npublic Images getImages() {\n        return images;\n    }"} {"path":"downloaded/InstagramMedia.java","method_name":"getLocation","content":"/**\n     * @return The location\n     */\npublic Object getLocation() {\n        return location;\n    }"} {"path":"downloaded/ReponseDataTools.java","method_name":"nseData getClientRep","content":"/**\n\t * 分页修正\n\t * @param rsData\n\t * @param pl\n\t * @ret\nn\n\t */\n\tpublic static ReponseData getClientReponseData(ReponseData rsData,Page<? extends Object> pl)\n\t{\n\t\t rsData.resetPageInfo();//清除上一次分页相关的信息\n\t\tif (pl.getTotalElements() == 0) {\n\t\t\trsData.setCurr_page(pl.getNumber());\n\t\t\tint curr_rows=pl.getNumber()*pl.getSize();\n\t\t\tif(curr_rows>pl.getTotalElements()){\n\t\t\t\tcurr_rows=new Long(pl.getTotalElements()).intValue();\n\t\t\t\trsData.setCurr_rows(curr_rows);\n\t\t\t}else{\n\t\t\t\trsData.setCurr_rows(curr_rows);\n\t\t\t}\n\t\t} else {\n\t\t\trsData.setCurr_page(pl.getNumber() + 1);\n\t\t\tint curr_rows=(pl.getNumber()+1)*pl.getSize();\n\t\t\tif(curr_rows>pl.getTotalElements()){\n\t\t\t\tcurr_rows=new Long(pl.getTotalElements()).intValue();\n\t\t\t\trsData.setCurr_rows(curr_rows);\n\t\t\t}else{\n\t\t\t\trsData.setCurr_rows(curr_rows);\n\t\t\t}\n\t\t}\n\t\trsData.setTotal_rows(pl.getTotalElements());\n\t\trsData.setPage_rows(pl.getTotalPages());\n\t\trsData.setResult(pl.getCo"} {"path":"downloaded/CarteBleue.java","method_name":"r get","content":"\t/**\n\t * Constructeur CarteBleue\n\t * \n\t * @param numCarte\n\t *            Le numéro de la carte Bleue.\n\t * @param type\n\t *            Le type de la carte bleue\n\t * @param dateExpiration\n\t *            La date d'expiration de la carte bancaire.\n\t \n\n\tpublic Integer getId() {\n\t\treturn id;\n"} {"path":"downloaded/CarteBleue.java","method_name":"g getNumCar","content":"\t/**\n\t * Constructeur CarteBleue\n\t * \n\t * @param numCarte\n\t *            Le numéro de la carte Bleue.\n\t * @param type\n\t *            Le type de la carte bleue\n\t * @param dateExpiration\n\t *            La date d'expiration de la carte bancaire.\n\t \n\n\tpublic Long getNumCarte() {\n\t\treturn numCarte;\n"} {"path":"downloaded/CarteBleue.java","method_name":"g getTy","content":"\t/**\n\t * Constructeur CarteBleue\n\t * \n\t * @param numCarte\n\t *            Le numéro de la carte Bleue.\n\t * @param type\n\t *            Le type de la carte bleue\n\t * @param dateExpiration\n\t *            La date d'expiration de la carte bancaire.\n\t \n\n\tpublic String getType() {\n\t\treturn TypeCarte.valueOf(type).name();\n"} {"path":"downloaded/CarteBleue.java","method_name":"e getDateExpirati","content":"\t/**\n\t * Constructeur CarteBleue\n\t * \n\t * @param numCarte\n\t *            Le numéro de la carte Bleue.\n\t * @param type\n\t *            Le type de la carte bleue\n\t * @param dateExpiration\n\t *            La date d'expiration de la carte bancaire.\n\t \n\n\tpublic LocalDate getDateExpiration() {\n\t\treturn dateExpiration;\n"} {"path":"downloaded/BridgeCanvas.java","method_name":"getNewGraphics","content":"/**\n     * Creates a new {@link Graphics2D} based on the {@link Paint} parameters.\n     * <p/>The object must be disposed ({@link Graphics2D#dispose()}) after being used.\n     */\nprivate Graphics2D getNewGraphics(Paint paint, Graphics2D g) {\n        // make new one\n        g = (Graphics2D)g.create();\n        g.setColor(new Color(paint.getColor()));\n        int alpha = paint.getAlpha();\n        float falpha = alpha / 255.f;\n        \n        Xfermode xfermode = paint.getXfermode();\n        if (xfermode instanceof PorterDuffXfermode) {\n            PorterDuff.Mode mode = ((PorterDuffXfermode)xfermode).getMode();\n            \n            setModeInGraphics(mode, g, falpha);\n        } else {\n            if (mLogger != null && xfermode != null) {\n                mLogger.warning(String.format(\n                        \"Xfermode '%1$s' is not supported in the Layout Editor.\",\n                        xfermode.getClass().getCanonicalName()));\n            }\n            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, falpha));\n        }\n        \n        Shader shader = paint.getShader();\n        if (shader instanceof LinearGradient) {\n            g.setPaint(((LinearGradient)shader).getPaint());\n        } else {\n            if (mLogger != null && shader != null) {\n                mLogger.warning(String.format(\n                        \"Shader '%1$s' is not supported in the Layout Editor.\",\n                        shader.getClass().getCanonicalName()));\n            }\n        }\n        \n        return g;\n    }"} {"path":"downloaded/BridgeCanvas.java","method_name":"save","content":"/**\n     * Creates a new {@link Graphics2D} based on the {@link Paint} parameters.\n     * <p/>The object must be disposed ({@link Graphics2D#dispose()}) after being used.\n     */\n@Override\n    public int save() {\n        Graphics2D g = (Graphics2D)getGraphics2d().create();\n        mGraphicsStack.push(g);\n        \n        return mGraphicsStack.size() - 1;\n    }"} {"path":"downloaded/BridgeCanvas.java","method_name":"save","content":"/**\n     * Creates a new {@link Graphics2D} based on the {@link Paint} parameters.\n     * <p/>The object must be disposed ({@link Graphics2D#dispose()}) after being used.\n     */\n@Override\n    public int save(int saveFlags) {\n        // For now we ignore saveFlags\n        return save();\n    }"} {"path":"downloaded/BridgeCanvas.java","method_name":"getSaveCount","content":"/**\n     * Creates a new {@link Graphics2D} based on the {@link Paint} parameters.\n     * <p/>The object must be disposed ({@link Graphics2D#dispose()}) after being used.\n     */\n@Override\n    public int getSaveCount() {\n        return mGraphicsStack.size() - 1;\n    }"} {"path":"downloaded/BridgeCanvas.java","method_name":"clipRect","content":"/**\n     * Creates a new {@link Graphics2D} based on the {@link Paint} parameters.\n     * <p/>The object must be disposed ({@link Graphics2D#dispose()}) after being used.\n     */\n@Override\n    public boolean clipRect(float left, float top, float right, float bottom, Op op) {\n        return clipRect(left, top, right, bottom);\n    }"} {"path":"downloaded/BridgeCanvas.java","method_name":"clipRect","content":"/**\n     * Creates a new {@link Graphics2D} based on the {@link Paint} parameters.\n     * <p/>The object must be disposed ({@link Graphics2D#dispose()}) after being used.\n     */\n@Override\n    public boolean clipRect(float left, float top, float right, float bottom) {\n        getGraphics2d().clipRect((int)left, (int)top, (int)(right-left), (int)(bottom-top));\n        return true;\n    }"} {"path":"downloaded/BridgeCanvas.java","method_name":"clipRect","content":"/**\n     * Creates a new {@link Graphics2D} based on the {@link Paint} parameters.\n     * <p/>The object must be disposed ({@link Graphics2D#dispose()}) after being used.\n     */\n@Override\n    public boolean clipRect(int left, int top, int right, int bottom) {\n        getGraphics2d().clipRect(left, top, right-left, bottom-top);\n        return true;\n    }"} {"path":"downloaded/BridgeCanvas.java","method_name":"clipRect","content":"/**\n     * Creates a new {@link Graphics2D} based on the {@link Paint} parameters.\n     * <p/>The object must be disposed ({@link Graphics2D#dispose()}) after being used.\n     */\n@Override\n    public boolean clipRect(Rect rect, Op op) {\n        return clipRect(rect.left, rect.top, rect.right, rect.bottom);\n    }"} {"path":"downloaded/BridgeCanvas.java","method_name":"clipRect","content":"/**\n     * Creates a new {@link Graphics2D} based on the {@link Paint} parameters.\n     * <p/>The object must be disposed ({@link Graphics2D#dispose()}) after being used.\n     */\n@Override\n    public boolean clipRect(Rect rect) {\n        return clipRect(rect.left, rect.top, rect.right, rect.bottom);\n    }"} {"path":"downloaded/BridgeCanvas.java","method_name":"clipRect","content":"/**\n     * Creates a new {@link Graphics2D} based on the {@link Paint} parameters.\n     * <p/>The object must be disposed ({@link Graphics2D#dispose()}) after being used.\n     */\n@Override\n    public boolean clipRect(RectF rect, Op op) {\n        return clipRect(rect.left, rect.top, rect.right, rect.bottom);\n    }"} {"path":"downloaded/BridgeCanvas.java","method_name":"clipRect","content":"/**\n     * Creates a new {@link Graphics2D} based on the {@link Paint} parameters.\n     * <p/>The object must be disposed ({@link Graphics2D#dispose()}) after being used.\n     */\n@Override\n    public boolean clipRect(RectF rect) {\n        return clipRect(rect.left, rect.top, rect.right, rect.bottom);\n    }"} {"path":"downloaded/BridgeCanvas.java","method_name":"quickReject","content":"/**\n     * Creates a new {@link Graphics2D} based on the {@link Paint} parameters.\n     * <p/>The object must be disposed ({@link Graphics2D#dispose()}) after being used.\n     */\n@Override\n    public boolean quickReject(RectF rect, EdgeType type) {\n        return false;\n    }"} {"path":"downloaded/BridgeCanvas.java","method_name":"quickReject","content":"/**\n     * Creates a new {@link Graphics2D} based on the {@link Paint} parameters.\n     * <p/>The object must be disposed ({@link Graphics2D#dispose()}) after being used.\n     */\n@Override\n    public boolean quickReject(Path path, EdgeType type) {\n        return false;\n    }"} {"path":"downloaded/BridgeCanvas.java","method_name":"quickReject","content":"/**\n     * Creates a new {@link Graphics2D} based on the {@link Paint} parameters.\n     * <p/>The object must be disposed ({@link Graphics2D#dispose()}) after being used.\n     */\n@Override\n    public boolean quickReject(float left, float top, float right, float bottom,\n                               EdgeType type) {\n        return false;\n    }"} {"path":"downloaded/BridgeCanvas.java","method_name":"getClipBounds","content":"/**\n     * Retrieve the clip bounds, returning true if they are non-empty.\n     *\n     * @param bounds Return the clip bounds here. If it is null, ignore it but\n     *               still return true if the current clip is non-empty.\n     * @return true if the current clip is non-empty.\n     */\n@Override\n    public boolean getClipBounds(Rect bounds) {\n        Rectangle rect = getGraphics2d().getClipBounds();\n        if (rect != null) {\n            bounds.left = rect.x;\n            bounds.top = rect.y;\n            bounds.right = rect.x + rect.width;\n            bounds.bottom = rect.y + rect.height;\n            return true;\n        }\n        return false;\n    }"} {"path":"downloaded/BridgeCanvas.java","method_name":"getWidth","content":"/**\n     * Retrieve the clip bounds, returning true if they are non-empty.\n     *\n     * @param bounds Return the clip bounds here. If it is null, ignore it but\n     *               still return true if the current clip is non-empty.\n     * @return true if the current clip is non-empty.\n     */\n@Override\n    public int getWidth() {\n        return mBufferedImage.getWidth();\n    }"} {"path":"downloaded/BridgeCanvas.java","method_name":"getHeight","content":"/**\n     * Retrieve the clip bounds, returning true if they are non-empty.\n     *\n     * @param bounds Return the clip bounds here. If it is null, ignore it but\n     *               still return true if the current clip is non-empty.\n     * @return true if the current clip is non-empty.\n     */\n@Override\n    public int getHeight() {\n        return mBufferedImage.getHeight();\n    }"} {"path":"downloaded/BridgeCanvas.java","method_name":"clipPath","content":"/**\n     * Retrieve the clip bounds, returning true if they are non-empty.\n     *\n     * @param bounds Return the clip bounds here. If it is null, ignore it but\n     *               still return true if the current clip is non-empty.\n     * @return true if the current clip is non-empty.\n     */\n@Override\n    public boolean clipPath(Path path, Op op) {\n        // TODO Auto-generated method stub\n        return super.clipPath(path, op);\n    }"} {"path":"downloaded/BridgeCanvas.java","method_name":"clipPath","content":"/**\n     * Retrieve the clip bounds, returning true if they are non-empty.\n     *\n     * @param bounds Return the clip bounds here. If it is null, ignore it but\n     *               still return true if the current clip is non-empty.\n     * @return true if the current clip is non-empty.\n     */\n@Override\n    public boolean clipPath(Path path) {\n        // TODO Auto-generated method stub\n        return super.clipPath(path);\n    }"} {"path":"downloaded/BridgeCanvas.java","method_name":"clipRegion","content":"/**\n     * Retrieve the clip bounds, returning true if they are non-empty.\n     *\n     * @param bounds Return the clip bounds here. If it is null, ignore it but\n     *               still return true if the current clip is non-empty.\n     * @return true if the current clip is non-empty.\n     */\n@Override\n    public boolean clipRegion(Region region, Op op) {\n        // TODO Auto-generated method stub\n        return super.clipRegion(region, op);\n    }"} {"path":"downloaded/BridgeCanvas.java","method_name":"clipRegion","content":"/**\n     * Retrieve the clip bounds, returning true if they are non-empty.\n     *\n     * @param bounds Return the clip bounds here. If it is null, ignore it but\n     *               still return true if the current clip is non-empty.\n     * @return true if the current clip is non-empty.\n     */\n@Override\n    public boolean clipRegion(Region region) {\n        // TODO Auto-generated method stub\n        return super.clipRegion(region);\n    }"} {"path":"downloaded/BlockSaltSlab.java","method_name":"getCollisionBoundingBoxFromPool","content":"/**\n\t * Returns a bounding box from the pool of bounding boxes (this means this\n\t * box can change after the pool has been cleared to be reused)\n\t */\npublic AxisAlignedBB getCollisionBoundingBoxFromPool(World par1World, int par2, int par3, int par4) {\n\t\tint var5 = par1World.getBlockMetadata(par2, par3, par4) & 7;\n\t\treturn var5 >= 3 ? AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double) par2 + this.minX, (double) par3 + this.minY, (double) par4 + this.minZ, (double) par2 + this.maxX, (double) ((float) par3 + 0.5F), (double) par4 + this.maxZ) : null;\n\t}"} {"path":"downloaded/BlockSaltSlab.java","method_name":"isOpaqueCube","content":"/**\n\t * Is this block (a) opaque and (b) a full 1m cube? This determines whether\n\t * or not to render the shared face of two adjacent blocks and also whether\n\t * the player can attach torches, redstone wire, etc to this block.\n\t */\npublic boolean isOpaqueCube() {\n\t\treturn false;\n\t}"} {"path":"downloaded/BlockSaltSlab.java","method_name":"renderAsNormalBlock","content":"/**\n\t * If this block doesn't render as an ordinary block it will return False\n\t * (examples: signs, buttons, stairs, etc)\n\t */\npublic boolean renderAsNormalBlock() {\n\t\treturn false;\n\t}"} {"path":"downloaded/BlockSaltSlab.java","method_name":"canPlaceBlockAt","content":"/**\n\t * Checks to see if its valid to put this block at the specified\n\t * coordinates. Args: world, x, y, z\n\t */\npublic boolean canPlaceBlockAt(World par1World, int par2, int par3, int par4) {\n\t\tint var5 = par1World.getBlockId(par2, par3 - 1, par4);\n\t\t\n\t\tif (var5 == 0) {\n\t\t\treturn false;\n\t\t}\n\t\tBlock block = Block.blocksList[var5];\n\t\treturn Block.sand.blockID == var5 || block.isOpaqueCube() == true;\n\t}"} {"path":"downloaded/BlockSaltSlab.java","method_name":"canBlockStay","content":"/**\n\t * Checks if this snow block can stay at this location.\n\t */\npublic boolean canBlockStay(World par1World, int par2, int par3, int par4) {\n\t\treturn this.canPlaceBlockAt(par1World, par2, par3, par4);\n\n\t}"} {"path":"downloaded/BlockSaltSlab.java","method_name":"canPlaceBlockOnSide","content":"/**\n\t * checks to see if you can place this block can be placed on that side of a\n\t * block: BlockLever overrides\n\t */\npublic boolean canPlaceBlockOnSide(World par1World, int par2, int par3, int par4, int par5) {\n\t\treturn canPlaceBlockAt(par1World, par2, par3, par4);\n\t}"} {"path":"downloaded/BlockSaltSlab.java","method_name":"idDropped","content":"/**\n\t * Returns the ID of the items to drop on destruction.\n\t */\npublic int idDropped(int meta, Random par2Random, int par3) {\n\t\treturn CuisineMod.salt.shiftedIndex;\n\t}"} {"path":"downloaded/BlockSaltSlab.java","method_name":"quantityDropped","content":"/**\n\t * Returns the quantity of items to drop on block destruction.\n\t */\npublic int quantityDropped(int meta, int fortune, Random par1Random) {\n\t\tRandom rnd = new Random();\n\t\tfortune = fortune+1;\n\t\tint i = rnd.nextInt(3) + 1;\n\t\tint fortrand = par1Random.nextInt(fortune);\n\t\tfortrand = fortrand * (rnd.nextInt(3)+1);\n\t\ti = i + fortrand;\n\t\tSystem.out.println(\"fortune: \" + (fortune - 1));\n\t\tSystem.out.println(i);\n\n\t\treturn i;\n\t}"} {"path":"downloaded/BlockSaltSlab.java","method_name":"shouldSideBeRendered","content":"/**\n\t * Returns the quantity of items to drop on block destruction.\n\t */\n@SideOnly(Side.CLIENT)\n\t/**\n\t * Returns true if the given side of this block type should be rendered, if the adjacent block is at the given\n\t * coordinates.  Args: blockAccess, x, y, z, side\n\t */\n\tpublic boolean shouldSideBeRendered(IBlockAccess par1IBlockAccess, int par2, int par3, int par4, int par5) {\n\t\treturn par5 == 1 ? true : super.shouldSideBeRendered(par1IBlockAccess, par2, par3, par4, par5);\n\t}"} {"path":"downloaded/SwipeyActivity.java","method_name":"getActivity","content":"/** Called when the activity is first created. */\npublic static SwipeyActivity getActivity() {\n\t\treturn sActivity;\n\t}"} {"path":"downloaded/Airplane.java","method_name":"copy","content":"/**\n     * Performs a deep clone of the airplane\n     * @return copy of the airplane\n     */\npublic Airplane copy() {\n        Airplane copy = new Airplane(this.getCenter(), this.getImage());\n        return copy;\n    }"} {"path":"downloaded/Airplane.java","method_name":"generateDropTime","content":"/**\n     * Generates a drop time from 1-2s\n     * @return\n     */\npublic double generateDropTime() {\n        return LOWERLIMTIME + (Math.random() * ((UPPERLIMTIME - LOWERLIMTIME) + 1));\n\n    }"} {"path":"downloaded/Airplane.java","method_name":"dropExplosives","content":"/**\n     * Drops explosives if timing is appropriate\n     */\npublic void dropExplosives() {\n        // Updates the time elapsed for each of the explosives\n        for (int i=0; i<this.explosives.size(); i++) {\n            Explosive dormantExplosive = this.explosives.get(i);\n            dormantExplosive.increaseTime();\n        }\n        // If the Airplane has reached the end, doesn't detect any enemies\n        // Isn't deleted straight away as it needs to wait for explosives to detonate\n        if (super.outOfBounds()) {return;}\n        this.timeElapsedDrop += ShadowDefend.getTimescale()/FPS;\n        //Adds a new explosive\n        if (this.timeElapsedDrop >= this.dropTime) {\n            this.timeElapsedDrop = 0;\n            Explosive newExplosive = new Explosive(super.getCenter());\n            // Centers the explosive at the airplane's current position\n            newExplosive.centerRectAt(super.getCenter());\n            this.explosives.add(newExplosive);\n            // Generates a new drop time in range\n            this.dropTime = generateDropTime();\n            this.numDropped++;\n        }\n\n    }"} {"path":"downloaded/Translate.java","method_name":"getLanguagesCountryCode","content":"/**\n     * Retrieves country code of languages\n     *\n     * @return String of country code (xx-xx) or null\n     */\npublic String getLanguagesCountryCode() {\n        return mLanguagesCountryCode;\n    }"} {"path":"downloaded/Translate.java","method_name":"getTranslatation","content":"/**\n     * Retrieves translated text\n     *\n     * @return String or null\n     */\npublic List<RealmString> getTranslatation() {\n        return mTranslatation;\n    }"} {"path":"downloaded/Translate.java","method_name":"isFavorite","content":"/**\n     * Retrieves flag is translation in Favorite list\n     *\n     * @return boolean isFavorite flag\n     */\npublic boolean isFavorite() {\n        return isFavorite;\n    }"} {"path":"downloaded/Translate.java","method_name":"getOriginalText","content":"/**\n     * Sets boolean favorite flag\n     *\n     * @param favorite boolean flag is translation in favorite list\n     */\npublic String getOriginalText() {\n        return this.mOriginalText;\n    }"} {"path":"downloaded/FindCommand.java","method_name":"execute","content":"/**\n     * searches for a list of tasks that matches the query string.\n     * finally, returns a command result containing the list of tasks matching the query string\n     * @param taskList the list of tasks\n     * @param storage the storage system responsible for saving and loading data\n     * @return a command result containing the list of tasks matching the query string\n     * @throws ShiroEmptyDescriptionException if the query string given by the user is empty\n     */\n@Override\n    public CommandResult execute(TaskList taskList, Storage storage) throws ShiroEmptyDescriptionException {\n        if (fullCommand.length() < 6) {\n            throw new ShiroEmptyDescriptionException(\"oh dear :-( the description of 'find' cannot be empty\");\n        }\n        ArrayList<Task> matchingTasks = taskList.getMatchingTasks(fullCommand.substring(5));\n        return new CommandResult(Message.matchingTasksMessage(matchingTasks));\n    }"} {"path":"downloaded/WebElementAssert.java","method_name":"containsText","content":"/**\n   * Asserts that the {@link org.openqa.selenium.WebElement}'s text content contains a certain\n   * substring.\n   *\n   * @param expectedText the text context that should be present in {@link WebElement#getText()}\n   * @return the current instance\n   * @throws AssertionError if substring is not contained\n   */\n@SuppressWarnings(\"UnusedReturnValue\")\n  public WebElementAssert containsText(String expectedText) {\n    Assertions.assertThat(actual.getText())\n        .describedAs(\"WebElement's text node content did not contain the expected text.\")\n        .contains(expectedText);\n    return this;\n  }"} {"path":"downloaded/WebElementAssert.java","method_name":"containsTextMatching","content":"/**\n   * Asserts that the {@link org.openqa.selenium.WebElement}'s text matches a regular expression.\n   *\n   * @param regExPattern the {@link java.util.regex.Pattern regular expression pattern} {@link\n   * WebElement#getText()} must match\n   * @return the current instance\n   * @throws AssertionError if text doesn't match\n   */\n@SuppressWarnings(\"UnusedReturnValue\")\n  public WebElementAssert containsTextMatching(String regExPattern) {\n    Assertions.assertThat(actual.getText())\n        .describedAs(\"WebElement's text node content did not match RegEx.\")\n        .matches(regExPattern);\n    return this;\n  }"} {"path":"downloaded/GenericResource.java","method_name":"getQuote","content":"/**\n     * Creates a new instance of GenericResource\n     */\n@GET\n    @Path(\"{id}\")\n    @Produces(\"application/json\")\n    public String getQuote(@PathParam(\"id\") int id) throws QuoteNotFoundException, ServerError\n    {\n        if (quotes.containsKey(id))\n        {\n            JsonObject quote = new JsonObject();\n            quote.addProperty(\"quote\", quotes.get(id));\n            String jsonResponse = new Gson().toJson(quote);\n            return jsonResponse;\n        } \n//        else if (id == 5)\n//        {\n//            throw new ServerError(\"Internal server Error, we are very sorry for the inconvenience\");\n//        } \n        else\n        {\n            throw new QuoteNotFoundException(\"Quote with requested id not found\");\n        }\n    }"} {"path":"downloaded/GenericResource.java","method_name":"getQuotes","content":"/**\n     * Creates a new instance of GenericResource\n     */\n@GET\n    @Produces(\"application/json\")\n    public String getQuotes()\n    {\n        Random generator = new Random();\n        Object[] values = quotes.values().toArray();\n        Object randomValues = (String) values[generator.nextInt(values.length)];\n        JsonObject quote = new JsonObject();\n        String jsonResponse = new Gson().toJson(randomValues);\n        return jsonResponse;\n    }"} {"path":"downloaded/GenericResource.java","method_name":"createQuote","content":"/**\n     * Creates a new instance of GenericResource\n     */\n@POST\n    @Consumes(\"application/json\")\n    @Produces(\"application/json\")\n    public String createQuote(String quote)\n    {\n        int quoteID;\n\n        quoteID = nextId++;\n        JsonObject newQuote = new JsonParser().parse(quote).getAsJsonObject();\n        quote = newQuote.get(\"quote\").getAsString();\n        quotes.put(quoteID, quote);\n\n        JsonObject response = new JsonObject();\n        response.addProperty(\"id\", quoteID);\n        response.addProperty(\"quote\", quotes.get(quoteID));\n        String jsonResponse = new Gson().toJson(response);\n        return jsonResponse;\n\n    }"} {"path":"downloaded/GenericResource.java","method_name":"updateQuote","content":"/**\n     * Creates a new instance of GenericResource\n     */\n@PUT\n    @Path(\"{id}\")\n    @Produces(\"application/json\")\n    @Consumes(\"application/json\")\n    public String updateQuote(@PathParam(\"id\") int id, String quote)\n    {\n\n        if (quotes.containsKey(id))\n        {\n\n            JsonObject newQuote = new JsonParser().parse(quote).getAsJsonObject();\n            quote = newQuote.get(\"quote\").getAsString();\n            quotes.put(id, quote);\n        }\n\n        JsonObject response = new JsonObject();\n        response.addProperty(\"id\", id);\n        response.addProperty(\"quote\", quotes.get(id));\n        String jsonResponse = new Gson().toJson(response);\n        return jsonResponse;\n    }"} {"path":"downloaded/13_d59e9dc93b31617848479857810e4064bfa7dfaf_MoveCheck_s.java","method_name":"n che","content":"/**\n \t * check\n \t * \n \t * Prüft zunächt ob die Zugrichtung korrekt war.\n \t * \n \t * @param board\n \t * @param currentMove\n \t * @return\n \t \n \tpublic static boolean check(\n \t\t\tde.fhhannover.inform.hnefatafl.vorgaben.Move currentMove,\n \t\t\tBoard board, Boolean isDefTurn) {\n \t\tlong time1 = System.nanoTime();\n \t\t\n \t\tif(!checkCellsNotNull(currentMove))\n \t\t\treturn false;\n \t\tif (!checkIsMoving(currentMove, board))\n \t\t\treturn false;\n \t\tif (!checkInBoard(currentMove, board))\n \t\t\treturn false;\n \t\tif (!checkCorrectPlayer(currentMove, board, isDefTurn))\n \t\t\treturn false;\n \t\tif (!checkMoveDirection(currentMove, board))\n \t\t\treturn false;\n\t\tif (!checkForFortress(currentMove, board))\n \t\t\treturn false;\n \t\tif (!checkBoardContent(currentMove, board))\n \t\t\treturn false;\n \t\tif (!checkFreeWay(currentMove, board))\n \t\t\treturn false;\n \n \t\tif (gamelog)\n \t\t\tGameLog.logDebugEvent(\"__________Zug erlaubt__________\");\n \t\tif (gamelog)\n \t\t\tSystem.out.println(\"check brauchte: \"\n \t\t\t\t\t+ String.valueOf((System.nanoTime() - time1) / 1000000)\n \t\t\t\t\t+ \" ms\");\n \t\treturn true;\n "} {"path":"downloaded/13_d59e9dc93b31617848479857810e4064bfa7dfaf_MoveCheck_s.java","method_name":"n che","content":"/**\n \t * check\n \t * \n \t * Prüft zunächt ob die Zugrichtung korrekt war.\n \t * \n \t * @param board\n \t * @param currentMove\n \t * @return\n \t \n \tpublic static boolean check(\n \t\t\tde.fhhannover.inform.hnefatafl.vorgaben.Move currentMove,\n \t\t\tBoard board, Boolean isDefTurn, boolean gameLog) {\n \t\tgamelog = gameLog;\n \t\treturn check(currentMove, board, isDefTurn);\n "} {"path":"downloaded/13_d59e9dc93b31617848479857810e4064bfa7dfaf_MoveCheck_s.java","method_name":"n checkCellsNotNu","content":" \t/**\n \t * Prueft, ob eine der im Move enthaltenen Cells null ist\n \t * @param currentMove Zu pruefender Zug\n \t * @return true/false\n \t \n \tprivate static boolean checkCellsNotNull(\n \t\t\tde.fhhannover.inform.hnefatafl.vorgaben.Move currentMove){\n \t\t\t\tif (currentMove.getFromCell() == null ||\n \t\t\t\t\tcurrentMove.getToCell() == null){\n \t\t\t\t\t\treturn false;\n \t\t\t\t}\n \t\t\t\treturn true;\t\t\n "} {"path":"downloaded/13_d59e9dc93b31617848479857810e4064bfa7dfaf_MoveCheck_s.java","method_name":"ean checkIsMo","content":" \t/**\n \t * checkIsMoving\n \t * \n \t * Pr�ft ob ein Stein wirklich bewegt wurde\n \t * \n \t * @param currentMove\n \t *            : Der Aktuelle Zug\n \t * @param board\n \t *            : Das aktuelle Board\n \t * @return : true/false\n \n/\n \tprivate static boolean checkIsMoving(Move currentMove, Board board) {\n \t\tif ((currentMove.getFromCell().getCol() == currentMove.getToCell()\n \t\t\t\t.getCol())\n \t\t\t\t&& currentMove.getFromCell().getRow() == currentMove\n \t\t\t\t\t\t.getToCell().getRow()) {\n \t\t\tif (gamelog)\n \t\t\t\tGameLog.logDebugEvent(\"Stein wird nicht bewegt\");\n \t\t\treturn false;\n \t\t}\n \t\treturn true;"} {"path":"downloaded/13_d59e9dc93b31617848479857810e4064bfa7dfaf_MoveCheck_s.java","method_name":"ean checkCorrectPl","content":" \n \t/**\n \t * checkCorrectPlayer\n \t * \n \t * @param currentMove\n \t *            : Aktueller Zug\n \t * @param board\n \t *            : Aktuelles Board\n \t * @param isDefTurn\n \t *            : Ist es ein Defender Zug?\n \t * @return : true/false\n \n/\n \tprivate static boolean checkCorrectPlayer(\n \t\t\tde.fhhannover.inform.hnefatafl.vorgaben.Move currentMove,\n \t\t\tBoard board, Boolean isDefTurn) {\n \t\tif (isDefTurn\n \t\t\t\t&& (board.getCellBC(currentMove.getFromCell())== BoardContent.DEFENDER || \n \t\t\t\t\t\tboard.getCellBC(currentMove.getFromCell()) == BoardContent.KING)) {\n \t\t\treturn true;\n \t\t}\n \t\tif (!isDefTurn\n \t\t\t\t&& board.getCellBC(currentMove.getFromCell()) == BoardContent.ATTACKER) {\n \t\t\treturn true;\n \t\t}\n \t\tif (gamelog)\n \t\t\tGameLog.logDebugEvent(\"Spielstein vom Gegner gezogen\");\n \t\treturn false;"} {"path":"downloaded/13_d59e9dc93b31617848479857810e4064bfa7dfaf_MoveCheck_s.java","method_name":"olean checkF","content":" \n \t/**\n \t * checkFreeWay\n \t * \n \t * Prüft ob nicht über andere Personen gegangen wird oder Felder die Inavlid\n \t * sind\n \t * \n \t * @param board\n \t * @param currentMove\n \t * @return : true/false\n */\n \tprivate static boolean checkFreeWay(\n \t\t\tde.fhhannover.inform.hnefatafl.vorgaben.Move currentMove,\n \t\t\tBoard board) {\n \t\tboolean isKing = false;\n \t\tif (board.getCellBC(currentMove.getFromCell()) == BoardContent.KING) {\n \t\t\tisKing = true;\n \t\t}\n \n \t\t/* Bewegungsrichtung ermitteln */\n \t\tif (currentMove.getFromCell().getCol() != currentMove.getToCell()\n \t\t\t\t.getCol()) {\n \n \t\t\t// bewegungsvektor bestimmen\n \t\t\tif (currentMove.getFromCell().getCol() > currentMove.getToCell()\n \t\t\t\t\t.getCol()) {\n \n \t\t\t\t/* von rechts nach links */\n \t\t\t\tfor (int i = currentMove.getFromCell().getCol() - 1; i >= currentMove\n \t\t\t\t\t\t.getToCell().getCol(); i--) {\n \t\t\t\t\tif (!isKing\n \t\t\t\t\t\t\t&& board.get()[i][currentMove.getToCell().getRow()] != BoardContent.EMPTY) {\n \t\t\t\t\t\tif (gamelog)\n \t\t\t\t\t\t\tGameLog.logDebugEvent(\"Weg blockiert\");\n \t\t\t\t\t\treturn false;\n \t\t\t\t\t}\n \t\t\t\t\tif (isKing\n \t\t\t\t\t\t\t&& !(board.get()[i][currentMove.getToCell()\n \t\t\t\t\t\t\t\t\t.getRow()] == BoardContent.EMPTY || board\n \t\t\t\t\t\t\t\t\t.get()[i][currentMove.getToCell().getRow()] == BoardContent.INVALID)) {\n \t\t\t\t\t\tif (gamelog)\n \t\t\t\t\t\t\tGameLog.logDebugEvent(\"Weg blockiert\");\n \t\t\t\t\t\treturn false;\n \t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\treturn true;\n \n \t\t\t} else {\n \n \t\t\t\t/* von links nach rechts */\n \t\t\t\tfor (int i = currentMove.getFromCell().getCol() + 1; i <= currentMove\n \t\t\t\t\t\t.getToCell().getCol(); i++) {\n \t\t\t\t\tif (!isKing\n \t\t\t\t\t\t\t&& board.get()[i][currentMove.getToCell().getRow()] != BoardContent.EMPTY) {\n \t\t\t\t\t\tif (gamelog)\n \t\t\t\t\t\t\tGameLog.logDebugEvent(\"Weg blockiert\");\n \t\t\t\t\t\treturn false;\n \t\t\t\t\t}\n \t\t\t\t\tif (isKing\n \t\t\t\t\t\t\t&& !(board.get()[i][currentMove.getToCell()\n \t\t\t\t\t\t\t\t\t.getRow()] == BoardContent.EMPTY || board\n \t\t\t\t\t\t\t\t\t.get()[i][currentMove.getToCell().getRow()] == BoardContent.INVALID)) {\n \t\t\t\t\t\tif (gamelog)\n \t\t\t\t\t\t\tGameLog.logDebugEvent(\"Weg blockiert\");\n \t\t\t\t\t\treturn false;\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\treturn true;\n \t\t\t}\n \n \t\t} else {\n \n \t\t\tif (currentMove.getFromCell().getRow() > currentMove.getToCell()\n \t\t\t\t\t.getRow()) {\n \n \t\t\t\t/* von unten nach oben */\n \t\t\t\tfor (int i = currentMove.getFromCell().getRow() - 1; i >= currentMove\n \t\t\t\t\t\t.getToCell().getRow(); i--) {\n \t\t\t\t\tif (!isKing\n \t\t\t\t\t\t\t&& board.get()[currentMove.getToCell().getCol()][i] != BoardContent.EMPTY) {\n \t\t\t\t\t\tif (gamelog)\n \t\t\t\t\t\t\tGameLog.logDebugEvent(\"Weg blockiert\");\n \t\t\t\t\t\treturn false;\n \t\t\t\t\t}\n \t\t\t\t\tif (isKing\n \t\t\t\t\t\t\t&& !(board.get()[currentMove.getToCell().getCol()][i] == BoardContent.EMPTY || board\n \t\t\t\t\t\t\t\t\t.get()[currentMove.getToCell().getCol()][i] == BoardContent.INVALID)) {\n \t\t\t\t\t\tif (gamelog)\n \t\t\t\t\t\t\tGameLog.logDebugEvent(\"Weg blockiert\");\n \t\t\t\t\t\treturn false;\n \t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\treturn true;\n \n \t\t\t} else {\n \n \t\t\t\t/* von oben nach unten */\n \t\t\t\tfor (int i = currentMove.getFromCell().getRow() + 1; i <= currentMove\n \t\t\t\t\t\t.getToCell().getRow(); i++) {\n \t\t\t\t\tif (!isKing\n \t\t\t\t\t\t\t&& board.get()[currentMove.getToCell().getCol()][i] != BoardContent.EMPTY) {\n \t\t\t\t\t\tif (gamelog)\n \t\t\t\t\t\t\tGameLog.logDebugEvent(\"Weg blockiert\");\n \t\t\t\t\t\treturn false;\n \t\t\t\t\t}\n \t\t\t\t\tif (isKing\n \t\t\t\t\t\t\t&& !(board.get()[currentMove.getToCell().getCol()][i] == BoardContent.EMPTY || board\n \t\t\t\t\t\t\t\t\t.get()[currentMove.getToCell().getCol()][i] == BoardContent.INVALID)) {\n \t\t\t\t\t\tif (gamelog)\n \t\t\t\t\t\t\tGameLog.logDebugEvent(\"Weg blockiert\");\n \t\t\t\t\t\treturn false;\n \t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\treturn true;\n \t\t\t}\n \t"} {"path":"downloaded/13_d59e9dc93b31617848479857810e4064bfa7dfaf_MoveCheck_s.java","method_name":"tic boolean check","content":" \n \t/**\n \t * checkFreeWay\n \t * \n \t * Prüft ob nicht über andere Personen gegangen wird oder Felder die Inavlid\n \t * sind\n \t * \n \t * @param board\n \t * @param currentMove\n \t * @return : true/false\nlse\n \t */\n \tprivate static boolean checkBoardContent(\n \t\t\tde.fhhannover.inform.hnefatafl.vorgaben.Move currentMove,\n \t\t\tBoard board) {\n \n \t\t/* Pruefe ob das Zielfeld frei ist. */\n \t\tif ((board.getCellBC(currentMove.getToCell()) != BoardContent.EMPTY)\n \t\t\t\t&& (board.getCellBC(currentMove.getToCell()) != BoardContent.INVALID)) {\n \t\t\tif (gamelog)\n \t\t\t\tGameLog.logDebugEvent(\"BoardContent des Zieles nicht Leer\");\n \t\t\treturn false;\n \t\t}\n \n \t\t/* Pruefe ob das Quellfeld nicht frei ist */\n \t\tif (board.getCellBC(currentMove.getFromCell()) == BoardContent.EMPTY) {\n \t\t\tif (gamelog)\n \t\t\t\tGameLog.logDebugEvent(\"Boardcontent der Quelle nicht leer\");\n \t\t\treturn false;\n \t\t}\n \n \t\tretu"} {"path":"downloaded/13_d59e9dc93b31617848479857810e4064bfa7dfaf_MoveCheck_s.java","method_name":"tic boolean ","content":" \n \t/**\n \t * checkFreeWay\n \t * \n \t * Prüft ob nicht über andere Personen gegangen wird oder Felder die Inavlid\n \t * sind\n \t * \n \t * @param board\n \t * @param currentMove\n \t * @return : true/false\nlse\n \t */\n \tprivate static boolean checkInBoard(\n \t\t\tde.fhhannover.inform.hnefatafl.vorgaben.Move currentMove,\n \t\t\tBoard board) {\n \t\tif (currentMove.getFromCell().getCol() > boardSize\n \t\t\t\t|| currentMove.getFromCell().getCol() < 0 ||\n \n \t\t\t\tcurrentMove.getToCell().getCol() > boardSize\n \t\t\t\t|| currentMove.getToCell().getCol() < 0 ||\n \n \t\t\t\tcurrentMove.getFromCell().getRow() > boardSize\n \t\t\t\t|| currentMove.getFromCell().getRow() < 0 ||\n \n \t\t\t\tcurrentMove.getToCell().getRow() > boardSize\n \t\t\t\t|| currentMove.getToCell().getRow() < 0) {\n \t\t\tif (gamelog)\n \t\t\t\tGameLog.logDebugEvent(\"Move außerhalb vom Board\");\n \t\t\treturn false;\n \t\t}\n \n \t\telse\n \t\t\tret"} {"path":"downloaded/13_d59e9dc93b31617848479857810e4064bfa7dfaf_MoveCheck_s.java","method_name":"static boolean c","content":" \n \t/**\n \t * checkFreeWay\n \t * \n \t * Prüft ob nicht über andere Personen gegangen wird oder Felder die Inavlid\n \t * sind\n \t * \n \t * @param board\n \t * @param currentMove\n \t * @return : true/false\ne/false\n \t */\n\tprivate static boolean checkForFortress(\n \t\t\tde.fhhannover.inform.hnefatafl.vorgaben.Move currentMove,\n \t\t\tBoard board) {\n \n \t\t/* K�nig darf von daher erst pr�fen ob Content King */\n \t\tif (board.getCellBC(currentMove.getFromCell()) != BoardContent.KING) {\n \n \t\t\t/* Test von Quelle und Ziel Move / Test anhand des Boardcontents */\n \n \t\t\tif (board.get()[currentMove.getToCell().getCol()][currentMove\n \t\t\t\t\t.getToCell().getRow()] != BoardContent.INVALID\n \t\t\t\t\t&& board.get()[currentMove.getFromCell().getCol()][currentMove\n \t\t\t\t\t\t\t.getFromCell().getRow()] != BoardContent.INVALID) {\n \t\t\t\treturn true;\n \t\t\t} else {\n \t\t\t\tif (gamelog)\n \t\t\t\t\tGameLog.logDebugEvent(\"Normale Spielfigur in Festung gezogen\");\n \t\t\t\treturn false;\n \t\t\t}\n \n \t\t} else\n \t\t"} {"path":"downloaded/13_d59e9dc93b31617848479857810e4064bfa7dfaf_MoveCheck_s.java","method_name":"ate static boolean","content":" \n \t/**\n \t * checkFreeWay\n \t * \n \t * Prüft ob nicht über andere Personen gegangen wird oder Felder die Inavlid\n \t * sind\n \t * \n \t * @param board\n \t * @param currentMove\n \t * @return : true/false\ntrue/flase\n \t */\n \tprivate static boolean checkMoveDirection(\n \t\t\tde.fhhannover.inform.hnefatafl.vorgaben.Move currentMove,\n \t\t\tBoard board) {\n \t\t/* Teste ob Zugrichtung korrekt */\n \t\tif (currentMove.getFromCell().getCol() != currentMove.getToCell()\n \t\t\t\t.getCol()\n \t\t\t\t&& currentMove.getFromCell().getRow() != currentMove\n \t\t\t\t\t\t.getToCell().getRow()) {\n \t\t\tif (gamelog)\n \t\t\t\tGameLog.logDebugEvent(\"Falsche Bewegungsrichtung\");\n \t\t\treturn false;\n \t\t}\n \n \t\telse\n "} {"path":"downloaded/Portlets.java","method_name":"enumeratePortlet","content":"/**\n     * Method enumeratePortlet\n     * \n     * \n     * \n     * @return Enumeration\n     */\npublic java.util.Enumeration enumeratePortlet()\n    {\n        return _portletList.elements();\n    }"} {"path":"downloaded/Portlets.java","method_name":"getPortlet","content":"/**\n     * Method getPortlet\n     * \n     * \n     * \n     * @param index\n     * @return Portlet\n     */\npublic org.light.portal.portlet.config.Portlet getPortlet(int index)\n        throws java.lang.IndexOutOfBoundsException\n    {\n        //-- check bounds for index\n        if ((index < 0) || (index >= _portletList.size())) {\n            throw new IndexOutOfBoundsException(\"getPortlet: Index value '\"+index+\"' not in range [0..\"+(_portletList.size() - 1) + \"]\");\n        }\n        \n        return (org.light.portal.portlet.config.Portlet) _portletList.elementAt(index);\n    }"} {"path":"downloaded/Portlets.java","method_name":"getPortlet","content":"/**\n     * Method getPortlet\n     * \n     * \n     * \n     * @return Portlet\n     */\npublic org.light.portal.portlet.config.Portlet[] getPortlet()\n    {\n        int size = _portletList.size();\n        org.light.portal.portlet.config.Portlet[] mArray = new org.light.portal.portlet.config.Portlet[size];\n        for (int index = 0; index < size; index++) {\n            mArray[index] = (org.light.portal.portlet.config.Portlet) _portletList.elementAt(index);\n        }\n        return mArray;\n    }"} {"path":"downloaded/Portlets.java","method_name":"getPortletCount","content":"/**\n     * Method getPortletCount\n     * \n     * \n     * \n     * @return int\n     */\npublic int getPortletCount()\n    {\n        return _portletList.size();\n    }"} {"path":"downloaded/Portlets.java","method_name":"isValid","content":"/**\n     * Method isValid\n     * \n     * \n     * \n     * @return boolean\n     */\npublic boolean isValid()\n    {\n        try {\n            validate();\n        }\n        catch (org.exolab.castor.xml.ValidationException vex) {\n            return false;\n        }\n        return true;\n    }"} {"path":"downloaded/Portlets.java","method_name":"removePortlet","content":"/**\n     * Method removePortlet\n     * \n     * \n     * \n     * @param index\n     * @return Portlet\n     */\npublic org.light.portal.portlet.config.Portlet removePortlet(int index)\n    {\n        java.lang.Object obj = _portletList.elementAt(index);\n        _portletList.removeElementAt(index);\n        return (org.light.portal.portlet.config.Portlet) obj;\n    }"} {"path":"downloaded/Portlets.java","method_name":"unmarshal","content":"/**\n     * Method unmarshal\n     * \n     * \n     * \n     * @param reader\n     * @return Portlets\n     */\npublic static org.light.portal.portlet.config.Portlets unmarshal(java.io.Reader reader)\n        throws org.exolab.castor.xml.MarshalException, org.exolab.castor.xml.ValidationException\n    {\n        return (org.light.portal.portlet.config.Portlets) Unmarshaller.unmarshal(org.light.portal.portlet.config.Portlets.class, reader);\n    }"} {"path":"downloaded/JDBCTest.java","method_name":"\t\te.printStack","content":"/**\n\t * 通过 JDBC 向指定的数据表中插入一条记录\n\t * 传入的sql可以是INSER\nxception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t}\n\t\n\t@Test\n\tpublic void testConnection() throws Exception{\n\t\tSystem.out.print(getConnection2());\n\t}\n\t\n\tpublic Connection getConnection2() throws Exception{\n\t\t//1.准备连接数据库的 4 个字符串。\n\t\t\n\t\t//1). 创建 Properties 对象\n\t\t\tProperties properties = new Properties();\n\t\t//2). 获取 jdbc.properties 对应的输入流\n\t\t\tInputStream in = \n\t\t\t\t\tthis.getClass().getClassLoader().getResourceAsStream(\"jdbc.properties\");\n\t\t\n\t\t//3). 加载 2) 对应的输入流\n\t\t\tproperties.load(in);\n\t\t//4). 具体决定 user,password 等 4 个字符串\n\t\t\tString driverClass = properties.getProperty(\"driver\");\n\t\t\tString jdbcUrl = properties.getProperty(\"jdbcUrl\");\n\t\t\tString user = properties.getProperty(\"user\");\n\t\t\tStri"} {"path":"downloaded/JDBCTest.java","method_name":"ql://192.168.","content":"/**\n\t * 通过 JDBC 向指定的数据表中插入一条记录\n\t * 传入的sql可以是INSER\nng url = \"jdbc:mysql://192.168.3.188:3306/ajax\";\n\t\tProperties info = new Properties();\n\t\tinfo.put(\"user\", \"root\");\n\t\tinfo.put(\"password\", \"32147\");\n\t\tConnection connection = driver.connect(url, info);\n\t\t\n\t\tSystem.out.print(connection);\n\t\t\n\t\t}\n\t/**\n\t * 编写一个通用的方法，在不修改源程序的情况下，可以获得任何数据库的连接\n\t * 解决方案：把数据库驱动 Driver 实现类的全类名、url、user、password放入一个\n\t * 配置文件中，通过修改配置文件的方式实现和具体数据库解耦\n\t * @throws ClassNotFoundException \n\t * @throws IllegalAccessException \n\t * @throws InstantiationException \n\t * @throws SQLException \n\t */\n\tpublic Connection getConnection() throws Exception{\n\t\tString driverClass = null;\n\t\tString jdbcUrl = null;\n\t\tString user "} {"path":"downloaded/InvisibleWall.java","method_name":"getCollisionForceDirection","content":"/**\n\t * Creates a new invisibleWall to the given position with the given form.\n\t * \n\t * @param verticalForce Will the wall apply vertical force and to which \n\t * direction (0 = no vertical force, 1 = forces down, -1 = forces up)\n\t * @param horizontalForce Will the wall apply horizontal force and to which \n\t * direction (0 = no horizontal force, 1 = forces right, -1 = forces left). \n\t * HorizontalForce will be forced to 0 if there's already vertical force \n\t * applied.\n\t * @param position the wall's position on either y- or x-axis depending on \n\t * the applied force's axis (y if vertical, x if horizontal)\n\t * @param area The area where the object will reside at\n\t */\n@Override\n\tpublic double getCollisionForceDirection(Double collisionpoint)\n\t{\n\t\tif (this.xForceModifier == 0)\n\t\t{\n\t\t\tif (this.yForceModifier > 0)\n\t\t\t\treturn 270;\n\t\t\telse\n\t\t\t\treturn 90;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (this.xForceModifier > 0)\n\t\t\t\treturn 0;\n\t\t\telse\n\t\t\t\treturn 180;\n\t\t}\n\t}"} {"path":"downloaded/InvisibleWall.java","method_name":"pointCollides","content":"/**\n\t * Creates a new invisibleWall to the given position with the given form.\n\t * \n\t * @param verticalForce Will the wall apply vertical force and to which \n\t * direction (0 = no vertical force, 1 = forces down, -1 = forces up)\n\t * @param horizontalForce Will the wall apply horizontal force and to which \n\t * direction (0 = no horizontal force, 1 = forces right, -1 = forces left). \n\t * HorizontalForce will be forced to 0 if there's already vertical force \n\t * applied.\n\t * @param position the wall's position on either y- or x-axis depending on \n\t * the applied force's axis (y if vertical, x if horizontal)\n\t * @param area The area where the object will reside at\n\t */\n@Override\n\tpublic boolean pointCollides(Point2D absolutepoint)\n\t{\n\t\tif (this.xForceModifier == 0)\n\t\t{\n\t\t\tif (this.yForceModifier > 0)\n\t\t\t\treturn (absolutepoint.getY() < this.position);\n\t\t\telse\n\t\t\t\treturn (absolutepoint.getY() > this.position);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (this.xForceModifier > 0)\n\t\t\t\treturn (absolutepoint.getX() < this.position);\n\t\t\telse\n\t\t\t\treturn (absolutepoint.getX() > this.position);\n\t\t}\n\t}"} {"path":"downloaded/InvisibleWall.java","method_name":"isSolid","content":"/**\n\t * Creates a new invisibleWall to the given position with the given form.\n\t * \n\t * @param verticalForce Will the wall apply vertical force and to which \n\t * direction (0 = no vertical force, 1 = forces down, -1 = forces up)\n\t * @param horizontalForce Will the wall apply horizontal force and to which \n\t * direction (0 = no horizontal force, 1 = forces right, -1 = forces left). \n\t * HorizontalForce will be forced to 0 if there's already vertical force \n\t * applied.\n\t * @param position the wall's position on either y- or x-axis depending on \n\t * the applied force's axis (y if vertical, x if horizontal)\n\t * @param area The area where the object will reside at\n\t */\n@Override\n\tpublic boolean isSolid()\n\t{\n\t\treturn this.solid;\n\t}"} {"path":"downloaded/InvisibleWall.java","method_name":"getSupportedListenerClasses","content":"/**\n\t * Creates a new invisibleWall to the given position with the given form.\n\t * \n\t * @param verticalForce Will the wall apply vertical force and to which \n\t * direction (0 = no vertical force, 1 = forces down, -1 = forces up)\n\t * @param horizontalForce Will the wall apply horizontal force and to which \n\t * direction (0 = no horizontal force, 1 = forces right, -1 = forces left). \n\t * HorizontalForce will be forced to 0 if there's already vertical force \n\t * applied.\n\t * @param position the wall's position on either y- or x-axis depending on \n\t * the applied force's axis (y if vertical, x if horizontal)\n\t * @param area The area where the object will reside at\n\t */\n@Override\n\tpublic Class<?>[] getSupportedListenerClasses()\n\t{\n\t\treturn null;\n\t}"} {"path":"downloaded/SimpleClientRequestHandler.java","method_name":"plainPasswordAuth","content":"/**\n\t * we only check if the servername is passed\n\t * \n\t * @param authMap\n\t * @return\n\t */\nprotected String plainPasswordAuth(Map<String, Object> authMap) {\n    \tString fullIdentifier = CommonUtil.castAsString(authMap.get(StreamPacketDef.AUTH_IDENTIFIER));\n\t\tString clientHost = CommonUtil.castAsString(authMap.get(StreamPacketDef.AUTH_TOKEN));\n\t\t\n\t\tif(CommonUtil.isEmpty(fullIdentifier) || CommonUtil.isEmpty(clientHost)) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\treturn fullIdentifier;\n\t}"} {"path":"downloaded/SimpleClientRequestHandler.java","method_name":"process","content":"/**\n\t * we only check if the servername is passed\n\t * \n\t * @param authMap\n\t * @return\n\t */\nprivate void process(byte[] source) {\n        if (source == null) {\n            return;\n        }\n\n        StreamPacket packet = new StreamPacket(source);\n        packet.setConnectionId(connectionId);\n       \n        try {\n        \t processPacket(packet);\n        } catch (Exception e) {\n            log.error(\"error while deserialize packet: \" + e.getMessage(), e);\n        }\n    }"} {"path":"downloaded/ViewTimesManagerDetailActivity.java","method_name":"lendar dateToC","content":"\n    /**\n     * Método que retorna un Calendar con la fechaa que le envían\n     * @param date  Date que contiene una fecha\n     * @return cal retorna fecha\n\n*/\n    public Calendar dateToCalendar(Date date) {\n        Calendar cal = Calendar.getInstance();\n        cal.setTime(date);\n        return cal"} {"path":"downloaded/ViewTimesManagerDetailActivity.java","method_name":"ic boolean onCreate","content":"\n    /**\n     * Método que retorna un Calendar con la fechaa que le envían\n     * @param date  Date que contiene una fecha\n     * @return cal retorna fecha\n\n    */\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.menu_view_times_manager, menu);\n\n        MenuItem searchItem = menu.findItem(R.id.search);\n\n        MenuItemCompat menuItem = new MenuItemCompat();\n\n\n        SearchView searchView = (SearchView) menuItem.getActionView(searchItem);\n\n        // LISTENER PARA EL EDIT TEXT\n        if (searchView != null) {\n\n            searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\n                @Override\n                public boolean onQueryTextSubmit(String query) {\n                    if(expandableListDetailAdapter != null)\n                        expandableListDetailAdapter.filterSearchDetail(query);\n                    return false;\n                }\n\n                @Override\n                public boolean onQueryTextChange(String newText) {\n                    if(expandableListDetailAdapter != null)\n                        expandableListDetailAdapter.filterSearchDetail(newText);\n                    return false;\n                }\n            });\n        }\n\n        // LISTENER PARA LA APERTURA Y CIERRE DEL WIDGET\n        MenuItemCompat.setOnActionExpandListener(searchItem, new MenuItemCompat.OnActionExpandListener() {\n            @Override\n            public boolean onMenuItemActionExpand(MenuItem item) {\n                return false;\n            }\n\n            @Override\n            public boolean onMenuItemActionCollapse(MenuItem item) {\n                return false;\n            }\n        });\n\n        return super.onCreateOptionsMenu(m"} {"path":"downloaded/DatabaseConfig.java","method_name":"addToMap","content":"/**\n     * Properly inserts the key value pair represented by the line into the map\n     * @param line String representing a string value pair\n     * @param map the map to insert the string into\n\n     */\nprivate void addToMap(String line, HashMap<String, String> map) {\n        if (!line.contains(\" \")) {\n            return;\n        }\n        String[] parts = line.split(\" \");\n        map.put(parts[0].toLowerCase(), parts[1]);\n    }"} {"path":"downloaded/DatabaseConfig.java","method_name":"getDriver","content":"/**\n     * Makes sure that all the values were set after the config file was read\n     * @throws InvalidConnectionDataException if a field was not set\n     */\npublic String getDriver() {\n        return driver;\n    }"} {"path":"downloaded/DatabaseConfig.java","method_name":"getAddress","content":"/**\n     * Makes sure that all the values were set after the config file was read\n     * @throws InvalidConnectionDataException if a field was not set\n     */\npublic String getAddress() {\n        return address;\n    }"} {"path":"downloaded/DatabaseConfig.java","method_name":"getUsername","content":"/**\n     * Makes sure that all the values were set after the config file was read\n     * @throws InvalidConnectionDataException if a field was not set\n     */\npublic String getUsername() {\n        return username;\n    }"} {"path":"downloaded/DatabaseConfig.java","method_name":"getPassword","content":"/**\n     * Makes sure that all the values were set after the config file was read\n     * @throws InvalidConnectionDataException if a field was not set\n     */\npublic String getPassword() {\n        return password;\n    }"} {"path":"downloaded/DatabaseConfig.java","method_name":"getName","content":"/**\n     * Makes sure that all the values were set after the config file was read\n     * @throws InvalidConnectionDataException if a field was not set\n     */\npublic String getName() {\n        return dbName;\n    }"} {"path":"downloaded/DatabaseConfig.java","method_name":"getTimeOut","content":"/**\n     * Makes sure that all the values were set after the config file was read\n     * @throws InvalidConnectionDataException if a field was not set\n     */\npublic Integer getTimeOut() {\n        return timeOut != null ? Integer.parseInt(timeOut) : null;\n    }"} {"path":"downloaded/DecoderStream.java","method_name":"*/\n    pub","content":"/**\n     * 原生输入�\n * 获取标志\n     */\n    public StreamPreByte getPreByte() {\n "} {"path":"downloaded/DecoderStream.java","method_name":"�的标","content":"/**\n     * 原生输入�\n 获取给定的标志的编码解码规则\n     */\n    public byte "} {"path":"downloaded/DecoderStream.java","method_name":"reBy","content":"/**\n     * 原生输入�\ne() {\n        return getPreByte().getRule();\n    }\n\n    @Override\n    public int read() throw"} {"path":"downloaded/DecoderStream.java","method_name":"inpu","content":"/**\n     * 原生输入�\nception {\n        return inputStream.read();\n    }\n\n    @Override\n    public int read(@Nonnull byte[] b, int off, int len) throws IOE"} {"path":"downloaded/DecoderStream.java","method_name":".read(b, ","content":"/**\n     * 原生输入�\non {\n        return super.read(b, off, len);\n    }\n\n    @Override\n    public int available() throws IOE"} {"path":"downloaded/Platform.java","method_name":"pointerUIntType","content":"/** returns the unsgned integer type able to hold the pointer */\npublic TypeSpec pointerUIntType ( Types.PointerSpec ptr )\n{\n  int ptrSize = pointerSize( ptr.of );\n  if (ptrSize <= TypeSpec.UCHAR.width)\n    return TypeSpec.UCHAR;\n  else if (ptrSize <= TypeSpec.UINT.width)\n    return TypeSpec.UINT;\n  else if (ptrSize <= TypeSpec.ULONG.width)\n    return TypeSpec.ULONG;\n  else\n    return TypeSpec.ULLONG;\n}"} {"path":"downloaded/Platform.java","method_name":"alignment","content":"/** returns the unsgned integer type able to hold the pointer */\npublic int alignment ( int size )\n{\n  return Math.min(size, m_env.opts.maxAlign);\n}"} {"path":"downloaded/Platform.java","method_name":"memoryBitOffset","content":"/**\n * Convert a bit-offset in a bit-field storage unit to a number matching the\n * storage layout so that incrementing bit offsets are stored in incrementing\n * memory addresses.\n * @param baseType\n * @param offset\n * @return\n */\npublic int memoryBitOffset ( TypeSpec baseType, int bitOffset, int bitWidth )\n{\n  if (LITTLE_ENDIAN)\n    return bitOffset;\n  else // big endian\n    return baseType.width - bitOffset - bitWidth;\n}"} {"path":"downloaded/Platform.java","method_name":"minInt","content":"/**\n * Convert a bit-offset in a bit-field storage unit to a number matching the\n * storage layout so that incrementing bit offsets are stored in incrementing\n * memory addresses.\n * @param baseType\n * @param offset\n * @return\n */\npublic static Constant.IntC minInt ( TypeSpec ts )\n{\n  assert ts.integer;\n  return s_minInt[ts.ordinal() - TypeSpec.INT_FIRST.ordinal()];\n}"} {"path":"downloaded/Platform.java","method_name":"maxInt","content":"/**\n * Convert a bit-offset in a bit-field storage unit to a number matching the\n * storage layout so that incrementing bit offsets are stored in incrementing\n * memory addresses.\n * @param baseType\n * @param offset\n * @return\n */\npublic static Constant.IntC maxInt ( TypeSpec ts )\n{\n  assert ts.integer;\n  return s_maxInt[ts.ordinal() - TypeSpec.INT_FIRST.ordinal()];\n}"} {"path":"downloaded/Platform.java","method_name":"determineEnumBaseSpec","content":"/**\n * Determine the enum base type based on platform specifics. For example, on an 8-bit CPU we might want\n * to use a byte to store an enum whose values fit in a byte. In the standard case for 32-bit CPUs we\n * just return the passed value.\n *\n * @param baseSpec\n * @param minValue\n * @param maxValue\n * @return\n */\npublic TypeSpec determineEnumBaseSpec ( TypeSpec baseSpec, Constant.IntC minValue, Constant.IntC maxValue )\n{\n  assert baseSpec == minValue.spec && baseSpec == maxValue.spec;\n\n  if (false)\n    return baseSpec;\n  else\n  {\n    if (baseSpec.signed)\n    {\n      if (!minValue.fitsInLong() || !maxValue.fitsInLong())\n        return baseSpec;\n      long mi = minValue.asLong();\n      long ma = maxValue.asLong();\n\n      for ( int i = TypeSpec.SCHAR.ordinal(); i <= TypeSpec.SLLONG.ordinal(); i += 2 )\n      {\n        final TypeSpec ts = TypeSpec.values()[i];\n        if (mi >= ts.minValue && ma <= ts.maxValue)\n          return ts;\n      }\n    }\n    else\n    {\n      if (!minValue.fitsInULong() || !maxValue.fitsInULong())\n        return baseSpec;\n      long ma = maxValue.asULong();\n\n      for ( int i = TypeSpec.UCHAR.ordinal(); i <= TypeSpec.ULLONG.ordinal(); i += 2 )\n      {\n        final TypeSpec ts = TypeSpec.values()[i];\n        if (!Constant.unsignedLessThan( ts.maxValue, ma ))\n          return ts;\n      }\n    }\n\n    return baseSpec;\n  }\n}"} {"path":"downloaded/MyFragment.java","method_name":"downloadUrl","content":"/** A method to download json data from url */\nprivate String downloadUrl(String strUrl) throws IOException{\n        String data = \"\";\n        InputStream iStream = null;\n        HttpURLConnection urlConnection = null;\n        try{\n            URL url = new URL(strUrl);\n\n            // Creating an http connection to communicate with url\n            urlConnection = (HttpURLConnection) url.openConnection();\n\n            // Connecting to url\n            urlConnection.connect();\n\n            // Reading data from url\n            iStream = urlConnection.getInputStream();\n\n            BufferedReader br = new BufferedReader(new InputStreamReader(iStream));\n\n            StringBuffer sb = new StringBuffer();\n\n            String line = \"\";\n            while( ( line = br.readLine()) != null){\n                sb.append(line);\n            }\n\n            data = sb.toString();\n\n            br.close();\n\n        }catch(Exception e){\n            Log.d(\"Exception:downloading\", e.toString());\n        }finally{\n            iStream.close();\n            urlConnection.disconnect();\n        }\n        return data;\n    }"} {"path":"downloaded/MyFragment.java","method_name":"onCreateView","content":"/** A class to parse the Google Places in JSON format */\n@Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View v = inflater.inflate(R.layout.myfragment_layout, container,false);\n        SupportMapFragment fm = (SupportMapFragment) this.getChildFragmentManager().findFragmentById(\n                R.id.map);\n\n        //SupportMapFragment fm = (SupportMapFragment) getActivity().getSupportFragmentManager().findFragmentById(\n        //        R.id.map);\n\n\n        // Getting Map for the SupportMapFragment\n        map = fm.getMap();\n        String ori=ShowDet.origin;\n        String d=ShowDet.dest;\n\n\n        final LatLng origi=new LatLng(Double.parseDouble(ori.split(\",\")[0]),Double.parseDouble(ori.split(\",\")[1]));\n        final LatLng desti=new LatLng(Double.parseDouble(d.split(\",\")[0]),Double.parseDouble(d.split(\",\")[1]));\n        map.addMarker(new MarkerOptions()\n                .position(origi)\n                .title(\"From here!\"));\n        map.addMarker(new MarkerOptions()\n                .position(desti)\n                .title(\"To Here!\"));\n        /*LatLngBounds bounds = new LatLngBounds.Builder()\n                .include(origi)\n                .include(desti)\n                .build();\n        map.moveCamera(CameraUpdateFactory.newLatLngBounds(bounds, 50));*/\n        final View mapView = this.getChildFragmentManager().findFragmentById(R.id.map).getView();\n        if (mapView.getViewTreeObserver().isAlive()) {\n            mapView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n                // We check which build version we are using.\n                @Override\n                public void onGlobalLayout() {\n                    LatLngBounds bounds = new LatLngBounds.Builder()\n                            .include(origi)\n                            .include(desti)\n                            .build();\n\n\n                    map.moveCamera(CameraUpdateFactory.newLatLngBounds(bounds, 50));\n                }});\n        }\n        String url = getDirectionsUrl(origi, desti);\n\n        DownloadTask downloadTask = new DownloadTask();\n\n        // Start downloading json data from Google Directions API\n        downloadTask.execute(url);\n       //extView tv = (TextView) v.findViewById(R.id.tv);\n        // dp=new DataParsing();\n        //MainActivity ma=new MainActivity();\n        //String data=parse(mCurrentPage);\n\n        //tv.setText(\"Hello There!\");\n        return v;\n    }"} {"path":"downloaded/FilePanel.java","method_name":"getOutputFilePath","content":"/**\n     * Returns the output file path to generate text files to. \n     */\npublic File getOutputFilePath() {\n        return outputFile;\n    }"} {"path":"downloaded/FilePanel.java","method_name":"getOutputFileName","content":"/** \n     * Returns the output file name.\n     * @return the output file name. \n     */\npublic String getOutputFileName() {\n        return outputFileName.getText();\n    }"} {"path":"downloaded/FilePanel.java","method_name":"getFileName","content":"/**\n     * Converts the directory of a file to it's shortform path. \n     * @param f the file to convert. \n     * @return the converted file path to display.\n     */\npublic String getFileName(File f) {\n        String[] list = f.toString().split(Pattern.quote(\"\\\\\"));\n        return \"...\\\\\" + list[list.length - 1];\n    }"} {"path":"downloaded/PackageUtils.java","method_name":"getClasses","content":"/**\n\t * Scans all classes accessible from the context class loader which belong\n\t * to the given package and subpackages.\n\t * \n\t * @param packageName\n\t *            The base package\n\t * @return The classes\n\t * @throws Exception \n\t */\npublic static List<Class<?>> getClasses( String packageName, String regexFilter ) throws Exception {\n\t\tPattern regex = null;\n\t\tif( regexFilter != null ) {\n\t\t\tregex = Pattern.compile( regexFilter );\n\t\t}\n\n\t\tClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n\t\tassert classLoader != null;\n\t\tString path = packageName.replace( '.', '/' );\n\t\tEnumeration<URL> resources = classLoader.getResources( path );\n\n\t\tList<String> dirs = new ArrayList<String>();\n\t\twhile( resources.hasMoreElements() ) {\n\t\t\tURL resource = resources.nextElement();\n\t\t\tdirs.add( resource.getFile() );\n\t\t}\n\n\t\tTreeSet<String> classes = new TreeSet<String>();\n\t\tfor( String directory : dirs ) {\n\t\t\tclasses.addAll( findClasses( directory, packageName, regex ) );\n\t\t}\n\n\t\tArrayList<Class<?>> classList = new ArrayList<Class<?>>();\n\t\tfor( String clazz : classes ) {\n\t\t\tclassList.add( Class.forName( clazz ) );\n\t\t}\n\n\t\treturn classList;\n\t}"} {"path":"downloaded/PackageUtils.java","method_name":"findClasses","content":"/**\n\t * Recursive method used to find all classes in a given directory and\n\t * subdirs.\n\t * \n\t * @param directory\n\t *            The base directory\n\t * @param packageName\n\t *            The package name for classes found inside the base directory\n\t * @return The classes\n\t * @throws ClassNotFoundException\n\t * @throws MalformedURLException\n\t */\npublic static TreeSet<String> findClasses( String path, String packageName, Pattern regex ) throws Exception {\n\t\tTreeSet<String> classes = new TreeSet<String>();\n\t\tif( path.startsWith( \"file:\" ) && path.contains( \"!\" ) ) {\n\t\t\tString[] split = path.split( \"!\" );\n\t\t\tURL jar = new URL( split[0] );\n\t\t\tZipInputStream zip = new ZipInputStream( jar.openStream() );\n\t\t\tZipEntry entry;\n\t\t\twhile( ( entry = zip.getNextEntry() ) != null ) {\n\t\t\t\tif( entry.getName().endsWith( \".class\" ) ) {\n\t\t\t\t\tString className = entry.getName().replaceAll( \"[$].*\", \"\" ).replaceAll( \"[.]class\", \"\" ).replace( '/', '.' );\n\t\t\t\t\tif( className.startsWith( packageName ) && ( regex == null || regex.matcher( className ).matches() ) ) {\n\t\t\t\t\t\tclasses.add( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tFile dir = new File( path );\n\t\tif( !dir.exists() ) {\n\t\t\treturn classes;\n\t\t}\n\t\tFile[] files = dir.listFiles();\n\t\tfor( File file : files ) {\n\t\t\tif( file.isDirectory() ) {\n\t\t\t\tassert !file.getName().contains( \".\" );\n\t\t\t\tclasses.addAll( findClasses( file.getAbsolutePath(), packageName + \".\" + file.getName(), regex ) );\n\t\t\t} else if( file.getName().endsWith( \".class\" ) ) {\n\t\t\t\tString className = packageName + '.' + file.getName().substring( 0, file.getName().length() - 6 );\n\t\t\t\tif( regex == null || regex.matcher( className ).matches() ) classes.add( className );\n\t\t\t}\n\t\t}\n\t\treturn classes;\n\t}"} {"path":"downloaded/BloquesChunkDatos.java","method_name":"getNomBloque","content":"/**\n     * Devuelve el Nombre o Tipo de Bloque\n     * @return\n     */\npublic String getNomBloque() {\n        return nomBloque;\n    }"} {"path":"downloaded/BloquesChunkDatos.java","method_name":"getCaras","content":"/**\n     *\n     * @return\n     */\npublic int[] getCaras() {\n        return caras;\n    }"} {"path":"downloaded/BloquesChunkDatos.java","method_name":"getCara","content":"/**\n     *\n     * @param cara\n     * @return\n     */\npublic int getCara(int cara) {\n        return caras[cara];\n    }"} {"path":"downloaded/BloquesChunkDatos.java","method_name":"getMostrar","content":"/**\n     *\n     * @return\n     */\npublic Boolean getMostrar() {\n        return mostrar;\n    }"} {"path":"downloaded/BloquesChunkDatos.java","method_name":"getIrrompible","content":"/**\n     *\n     * @return\n     */\npublic Boolean getIrrompible() {\n        return irrompible;\n    }"} {"path":"downloaded/StudentUsernameResource.java","method_name":"getStudentByUsername","content":"/**\n\t * GETs the student details for a given user name and organization\n\t * identifier\n\t * \n\t * @param orgId\n\t *            the organization identifier\n\t * @param username\n\t *            the user name\n\t * @return response (success/failure)\n\t * @throws ApplicationException\n\t */\n@GET\n\t@Path(LegacyApiConstants.IDENTIFIER_PATH + LegacyApiConstants.STUDENTS_PATH\n\t\t\t+ LegacyApiConstants.USERNAMES_PATH)\n\t@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n\tpublic Response getStudentByUsername(\n\t\t\t@PathParam(LegacyApiConstants.IDENTIFIER) final String orgId,\n\t\t\t@PathParam(LegacyApiConstants.STUDENT_USERNAME) final String username)\n\t\t\tthrows ApplicationException {\n\t\tLOGGER.debug(\"Getting user for the organization: {} and username: {}\",\n\t\t\t\torgId, username);\n\t\tResponse response = null;\n\t\tfinal String[] identifiers = orgId.split(LegacyApiConstants.COLON);\n\t\tif (identifiers.length == LegacyApiConstants.IDENTIFIER_LENGTH\n\t\t\t\t&& !LegacyApiUtils.hasNull(identifiers)) {\n\t\t\tfinal Organization organization = orgService\n\t\t\t\t\t.getOrganizationByIdentifier(identifiers);\n\t\t\tif (organization != null) {\n\t\t\t\tfinal UserAccount student = userService.getStudentByOrgIdAndUsername(\n\t\t\t\t\t\torganization.getId(), username);\n\t\t\t\tif (student != null) {\n\t\t\t\t\t// TODO: Remove the hardcoded application code\n\t\t\t\t\tresponse = Response.ok(\n\t\t\t\t\t\t\tStudentHelper.getStudentResultVO(student, \"EBB\"))\n\t\t\t\t\t\t\t.build();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (response == null) {\n\t\t\tLOGGER.debug(\n\t\t\t\t\t\"Could not find a student with username: {} and school identifier: {}\",\n\t\t\t\t\tusername, orgId);\n\t\t\tthrow new ApplicationException(Status.NOT_FOUND,\n\t\t\t\t\tESlzApiErrorReason.AUTH_USER_NOT_FOUND,\n\t\t\t\t\t\"Could not find a student with username '\" + username\n\t\t\t\t\t\t\t+ \"' and school identifier '\" + orgId + \"'\");\n\t\t}\n\t\treturn response;\n\t}"} {"path":"downloaded/Comparator.java","method_name":"min","content":"/**\n\t * Returns the index of the minimum element of a given array\n\t * @param darray \tDouble Array\n\t * @return\t\t\tInteger index \n\t */\nprivate static double min(Double[] darray){\n\t\tdouble min = darray[0];\n\t\tfor ( double dd : darray){\n\t\t\tmin = Math.min(min,dd);\n\t\t}\n\t\treturn min;\n\t}"} {"path":"downloaded/Comparator.java","method_name":"max","content":"/**\n\t * Returns the index of the mazimum element of a given array\n\t * @param darray\tDouble Array\n\t * @return\t\t\tInteger Index\n\t */\nprivate static double max(Double[] darray){\n\t\tdouble max = darray[0];\n\t\tfor ( double dd : darray){\n\t\t\tmax = Math.max(max,dd);\n\t\t}\n\t\treturn max;\n\t}"} {"path":"downloaded/ReplicationObject.java","method_name":"replicationId","content":"/**\n     * Get the replicationId property: Id.\n     *\n     * @return the replicationId value.\n     */\npublic String replicationId() {\n        return this.replicationId;\n    }"} {"path":"downloaded/ReplicationObject.java","method_name":"withReplicationId","content":"/**\n     * Set the replicationId property: Id.\n     *\n     * @param replicationId the replicationId value to set.\n     * @return the ReplicationObject object itself.\n     */\npublic ReplicationObject withReplicationId(String replicationId) {\n        this.replicationId = replicationId;\n        return this;\n    }"} {"path":"downloaded/ReplicationObject.java","method_name":"endpointType","content":"/**\n     * Get the endpointType property: Indicates whether the local volume is the source or destination for the Volume\n     * Replication.\n     *\n     * @return the endpointType value.\n     */\npublic EndpointType endpointType() {\n        return this.endpointType;\n    }"} {"path":"downloaded/ReplicationObject.java","method_name":"withEndpointType","content":"/**\n     * Set the endpointType property: Indicates whether the local volume is the source or destination for the Volume\n     * Replication.\n     *\n     * @param endpointType the endpointType value to set.\n     * @return the ReplicationObject object itself.\n     */\npublic ReplicationObject withEndpointType(EndpointType endpointType) {\n        this.endpointType = endpointType;\n        return this;\n    }"} {"path":"downloaded/ReplicationObject.java","method_name":"replicationSchedule","content":"/**\n     * Get the replicationSchedule property: Schedule.\n     *\n     * @return the replicationSchedule value.\n     */\npublic ReplicationSchedule replicationSchedule() {\n        return this.replicationSchedule;\n    }"} {"path":"downloaded/ReplicationObject.java","method_name":"withReplicationSchedule","content":"/**\n     * Set the replicationSchedule property: Schedule.\n     *\n     * @param replicationSchedule the replicationSchedule value to set.\n     * @return the ReplicationObject object itself.\n     */\npublic ReplicationObject withReplicationSchedule(ReplicationSchedule replicationSchedule) {\n        this.replicationSchedule = replicationSchedule;\n        return this;\n    }"} {"path":"downloaded/ReplicationObject.java","method_name":"remoteVolumeResourceId","content":"/**\n     * Get the remoteVolumeResourceId property: The resource ID of the remote volume.\n     *\n     * @return the remoteVolumeResourceId value.\n     */\npublic String remoteVolumeResourceId() {\n        return this.remoteVolumeResourceId;\n    }"} {"path":"downloaded/ReplicationObject.java","method_name":"withRemoteVolumeResourceId","content":"/**\n     * Set the remoteVolumeResourceId property: The resource ID of the remote volume.\n     *\n     * @param remoteVolumeResourceId the remoteVolumeResourceId value to set.\n     * @return the ReplicationObject object itself.\n     */\npublic ReplicationObject withRemoteVolumeResourceId(String remoteVolumeResourceId) {\n        this.remoteVolumeResourceId = remoteVolumeResourceId;\n        return this;\n    }"} {"path":"downloaded/ReplicationObject.java","method_name":"remoteVolumeRegion","content":"/**\n     * Get the remoteVolumeRegion property: The remote region for the other end of the Volume Replication.\n     *\n     * @return the remoteVolumeRegion value.\n     */\npublic String remoteVolumeRegion() {\n        return this.remoteVolumeRegion;\n    }"} {"path":"downloaded/ReplicationObject.java","method_name":"withRemoteVolumeRegion","content":"/**\n     * Set the remoteVolumeRegion property: The remote region for the other end of the Volume Replication.\n     *\n     * @param remoteVolumeRegion the remoteVolumeRegion value to set.\n     * @return the ReplicationObject object itself.\n     */\npublic ReplicationObject withRemoteVolumeRegion(String remoteVolumeRegion) {\n        this.remoteVolumeRegion = remoteVolumeRegion;\n        return this;\n    }"} {"path":"downloaded/SPARQLBooleanXMLParser.java","method_name":"getBooleanQueryResultFormat","content":"/**\n\t * Creates a new parser for the SPARQL Query Results XML Format.\n\t */\n@Override\n\tpublic BooleanQueryResultFormat getBooleanQueryResultFormat() {\n\t\treturn BooleanQueryResultFormat.SPARQL;\n\t}"} {"path":"downloaded/SPARQLBooleanXMLParser.java","method_name":"getQueryResultFormat","content":"/**\n\t * Creates a new parser for the SPARQL Query Results XML Format.\n\t */\n@Override\n\tpublic QueryResultFormat getQueryResultFormat() {\n\t\treturn getBooleanQueryResultFormat();\n\t}"} {"path":"downloaded/SPARQLBooleanXMLParser.java","method_name":"parse","content":"/**\n\t * Creates a new parser for the SPARQL Query Results XML Format.\n\t */\n@Override\n\t@Deprecated\n\tpublic boolean parse(InputStream in) throws IOException, QueryResultParseException {\n\t\ttry {\n\t\t\treturn parseQueryResultInternal(in, true, false);\n\t\t} catch (QueryResultHandlerException e) {\n\t\t\tthrow new QueryResultParseException(e);\n\n\t\t}\n\t}"} {"path":"downloaded/ClienteBO.java","method_name":"t< ClienteVO >","content":"/**\n\t * Atributo responsável pela comunicação segura com a Camada DAO.\n\t\ntodo Excluir\n\n\tpublic ArrayList< ClienteVO > consultarTodos() throws ConsultarException {\n\t\ttry {\n\n\t\t\tArrayList< ClienteVO > clientes;\n\n\t\t\tclientes = dao.consultarTodos();\n\n\t\t\t//Verificando a existencia de dados\n\t\t\tif ( clientes == null || clientes.size() < 0 ) {\n\t\t\t\tthrow new ConsultarException( \"Nenhum registro encontrado\" );\n\t\t\t}\n\n\t\t\treturn clientes;\n\n\t\t} catch ( ConsultarException e ) {\n\t\t\tthrow new ConsultarException( \"Erro ao consultar to"} {"path":"downloaded/ClienteBO.java","method_name":"t< ClienteVO > ","content":"/**\n\t * Atributo responsável pela comunicação segura com a Camada DAO.\n\t\nnsultarTodos\n\n\tpublic ArrayList< ClienteVO > consultarPorCpf( String cpf ) throws ConsultarException {\n\t\ttry {\n\n\t\t\tArrayList< ClienteVO > clientes;\n\n\t\t\tclientes = dao.consultarPorCpf( cpf );\n\n\t\t\t//Verificando a existencia de dados\n\t\t\tif ( clientes == null || clientes.size() < 0 ) {\n\t\t\t\tthrow new ConsultarException( \"Nenhum registro encontrado\" );\n\t\t\t}\n\n\t\t\treturn clientes;\n\n\t\t} catch ( ConsultarException e ) {\n\t\t\tthrow new ConsultarException( \"Erro ao consultar por n"} {"path":"downloaded/ShowCameraFragment.java","method_name":"createRect","content":"/**\n     * Create rect from the preview frame.\n     * All the IdAreaField methods are percentage so it is not a problem.\n     * First construct the id card on the preview frame.\n     * Then we construct this IdAreaField and return the result\n     * as Rect to be used for the Tesseract.\n     */\nprivate Rect createRect(final Camera.Size size, final IdAreaField idAreaField) {\n        final int offsetWidth = (int) (size.width * 0.2);\n        final int idCardWidth = (int) (size.width * 0.6);\n        final int idCardHeight = (int) (idCardWidth / 1.58);\n        final int topIdCardHeight = idCardWidth / 2 - idCardHeight / 2;\n        final int bottomIdCardHeight = idCardWidth / 2 + idCardHeight / 2;\n        final Rect parentRect = new Rect(offsetWidth, topIdCardHeight, size.width - offsetWidth, bottomIdCardHeight);\n        final int left = parentRect.left + idAreaField.getPercentageFromParentLeft() * parentRect.width() / 100;\n        final int top = parentRect.top + idAreaField.getPercentageFromParentTop() * parentRect.height() / 100;\n        final int right = left + idAreaField.getPercentageWidth() * parentRect.width() / 100;\n        final int bottom = top + idAreaField.getPercentageHeight() * parentRect.height() / 100;\n        return new Rect(left, top, right, bottom);\n    }"} {"path":"downloaded/Effects.java","method_name":"getDistort","content":"/**\n     * Draws an image but distorted\n     * @param image A URL to an image\n     * @param level The level of distorted\n     * @return A buffer-byte contains the image data.\n     */\npublic static byte[] getDistort(String image, @Nullable Integer level) {\n        if (level == null) level = 1;\n        return RequestHandler.getBytes(BASE_URL + \"distort?image=\" + image + \"&level=\" + level, token);\n    }"} {"path":"downloaded/Effects.java","method_name":"getFire","content":"/**\n     * Draws a fiery border over an image\n     * @param image A URL to an image\n     * @return A buffer-byte contains the image data.\n     */\npublic static byte[] getFire(String image) {\n        return RequestHandler.getBytes(BASE_URL + \"fire?image=\" + image, token);\n    }"} {"path":"downloaded/Effects.java","method_name":"getSepia","content":"/**\n     * Draws a image with sepia effect\n     * @param image A URL to an image\n     * @return A buffer-byte contains the image data.\n     */\npublic static byte[] getSepia(String image) {\n        return RequestHandler.getBytes(BASE_URL + \"sepia?image=\" + image, token);\n    }"} {"path":"downloaded/Trie.java","method_name":"search","content":"/**\n     * Returns if the word is in the trie.\n     */\npublic boolean search(String word) {\n        return tree.search(word);\n    }"} {"path":"downloaded/Trie.java","method_name":"startsWith","content":"/**\n     * Returns if there is any word in the trie that starts with the given prefix.\n     */\npublic boolean startsWith(String prefix) {\n        return tree.startWith(prefix);\n    }"} {"path":"downloaded/PphAtcIndexResourceIT.java","method_name":"createEntity","content":"/**\n     * Create an entity for this test.\n     *\n     * This is a static method, as tests for other entities might also need it,\n     * if they test an entity which requires the current entity.\n     */\npublic static PphAtcIndex createEntity(EntityManager em) {\n        PphAtcIndex pphAtcIndex = new PphAtcIndex()\n            .atcCode(DEFAULT_ATC_CODE)\n            .nameHu(DEFAULT_NAME_HU)\n            .nameEn(DEFAULT_NAME_EN)\n            .activeSubstance(DEFAULT_ACTIVE_SUBSTANCE)\n            .activePuphaData(DEFAULT_ACTIVE_PUPHA_DATA);\n        return pphAtcIndex;\n    }"} {"path":"downloaded/PphAtcIndexResourceIT.java","method_name":"createUpdatedEntity","content":"/**\n     * Create an updated entity for this test.\n     *\n     * This is a static method, as tests for other entities might also need it,\n     * if they test an entity which requires the current entity.\n     */\npublic static PphAtcIndex createUpdatedEntity(EntityManager em) {\n        PphAtcIndex pphAtcIndex = new PphAtcIndex()\n            .atcCode(UPDATED_ATC_CODE)\n            .nameHu(UPDATED_NAME_HU)\n            .nameEn(UPDATED_NAME_EN)\n            .activeSubstance(UPDATED_ACTIVE_SUBSTANCE)\n            .activePuphaData(UPDATED_ACTIVE_PUPHA_DATA);\n        return pphAtcIndex;\n    }"} {"path":"downloaded/WusGridProcessor.java","method_name":" addRootElemen","content":" /********** XML *********\n static Element addRootElement(Document doc, String name, int id, double weight) {\n    Element root = doc.createElement(GRID_SOURCE_SET.toString());\n    addAttribute(NAME, name, root);\n    addAttribute(ID, id, root);\n    addAttribute(WEIGHT, weight, root);\n    Util.addDisclaimer(root);\n    doc.appendChild(root);\n    return root;\n  "} {"path":"downloaded/WusGridProcessor.java","method_name":" createDocumen","content":" /********** XML *********\n static Document createDocument() throws ParserConfigurationException {\n    DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n    Document doc = docBuilder.newDocument();\n    doc.setXmlStandalone(true);\n    return doc;\n  "} {"path":"downloaded/WusGridProcessor.java","method_name":" calcWeigh","content":" /********** XML *********\n private static double calcWeight(String name) {\n    double smoothingWt = name.contains(\"fixed\") ? 0.6 : 0.4;\n    double mfdWt = 0.0;\n    if (name.contains(\"gr\")) {\n      mfdWt = 0.9 * (name.contains(\"ext\") ? 0.333 : 0.5);\n    } else if (name.contains(\"ch\")) {\n      mfdWt = 0.9 * (name.contains(\"ext\") ? 0.667 : 0.5);\n    } else {\n      mfdWt = 0.1;\n    }\n    double tectWt = name.contains(\"cmp\") ? 0.5 : 1.0;\n    double wt = smoothingWt * mfdWt * tectWt;\n    return Maths.round(wt, 6);\n  "} {"path":"downloaded/StandardAttributes.java","method_name":"getInstance","content":"/**\n     * Call this method if you want an instance of this class. Do not\n     * create it yourself.\n     */\npublic static StandardAttributes getInstance() {\n        if(standardAttributes == null)\n            standardAttributes = new StandardAttributes();\n        return standardAttributes;\n    }"} {"path":"downloaded/StandardAttributes.java","method_name":"getStandardClasses","content":"/**\n     * Gets the registered standard classes.\n     */\npublic Map getStandardClasses() {\n        return standardClasses;\n    }"} {"path":"downloaded/StandardAttributes.java","method_name":"isStandard","content":"/**\n     * Is this class a standard class or what.\n     */\npublic boolean isStandard(Class targetClass) {\n        return getStandardClasses().get(targetClass) != null;\n    }"} {"path":"downloaded/ForumMimeTypeTransferCache.java","method_name":"getForumMimeTypeTransfer","content":"/** Creates a new instance of ForumMimeTypeTransferCache */\npublic ForumMimeTypeTransfer getForumMimeTypeTransfer(ForumMimeType forumMimeType) {\n        ForumMimeTypeTransfer forumMimeTypeTransfer = get(forumMimeType);\n        \n        if(forumMimeTypeTransfer == null) {\n            ForumTransfer forum = forumControl.getForumTransfer(userVisit, forumMimeType.getForum());\n            MimeTypeTransfer mimeType = coreControl.getMimeTypeTransfer(userVisit, forumMimeType.getMimeType());\n            Boolean isDefault = forumMimeType.getIsDefault();\n            Integer sortOrder = forumMimeType.getSortOrder();\n            \n            forumMimeTypeTransfer = new ForumMimeTypeTransfer(forum, mimeType, isDefault, sortOrder);\n            put(forumMimeType, forumMimeTypeTransfer);\n        }\n        \n        return forumMimeTypeTransfer;\n    }"} {"path":"downloaded/GetNumber.java","method_name":"newInstance","content":"/**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @param param1 Parameter 1.\n     * @param param2 Parameter 2.\n     * @return A new instance of fragment GetNumber.\n     */\npublic static GetNumber newInstance(String param1, String param2) {\n        GetNumber fragment = new GetNumber();\n        Bundle args = new Bundle();\n        args.putString(ARG_PARAM1, param1);\n        args.putString(ARG_PARAM2, param2);\n        fragment.setArguments(args);\n        return fragment;\n    }"} {"path":"downloaded/GetNumber.java","method_name":"onCreateView","content":"/**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @param param1 Parameter 1.\n     * @param param2 Parameter 2.\n     * @return A new instance of fragment GetNumber.\n     */\n@Override\n    public View onCreateView(LayoutInflater inflater, final ViewGroup container,\n                             Bundle savedInstanceState) {\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_get_number, container, false);\n        View view = binding.getRoot();\n\n\n        binding.btnGenerateOTP.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                checkNumber();\n                if (checkNumber()) {\n                    String phoneNumber = binding.countryCodePicker.getSelectedCountryCodeWithPlus() + number;\n\n                    sendOTP(phoneNumber);\n                }\n            }\n        });\n        return view;\n    }"} {"path":"downloaded/GetNumber.java","method_name":"checkNumber","content":"/**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @param param1 Parameter 1.\n     * @param param2 Parameter 2.\n     * @return A new instance of fragment GetNumber.\n     */\nprivate boolean checkNumber() {\n        number = binding.edtNumber.getText().toString().trim();\n        if (TextUtils.isEmpty(number)) {\n            binding.edtNumber.setError(\"Enter number\");\n            return false;\n        } else if (number.length() < 10) {\n            binding.edtNumber.setError(\"Enter valid number\");\n            return false;\n        } else {\n            binding.edtNumber.setError(null);\n\n            return true;\n        }\n    }"} {"path":"downloaded/EditProfileActivity.java","method_name":"checkPermissionsArray","content":"/**\n     * Check an array of permissions\n     *\n     * @param permissions\n     * @return\n     */\npublic boolean checkPermissionsArray(String[] permissions) {\n        Log.d(TAG, \"checkPermissionsArray: checking permissions array.\");\n\n        for (int i = 0; i < permissions.length; i++) {\n            String check = permissions[i];\n            if (!checkPermissions(check)) {\n                return false;\n            }\n        }\n        return true;\n    }"} {"path":"downloaded/EditProfileActivity.java","method_name":"checkPermissions","content":"/**\n     * Check a single permission is it has been verified\n     *\n     * @param permission\n     * @return\n     */\npublic boolean checkPermissions(String permission) {\n        Log.d(TAG, \"checkPermissions: checking permission: \" + permission);\n\n        int permissionRequest = ActivityCompat.checkSelfPermission(EditProfileActivity.this, permission);\n\n        if (permissionRequest != PackageManager.PERMISSION_GRANTED) {\n            Log.d(TAG, \"checkPermissions: \\n Permission was not granted for: \" + permission);\n            Toast.makeText(this, \"Permissions not granted to access camera,\\n\" +\n                    \"please give permissions to GetAplot\", Toast.LENGTH_SHORT).show();\n            return false;\n        } else {\n            Log.d(TAG, \"checkPermissions: \\n Permission was granted for: \" + permission);\n            return true;\n        }\n    }"} {"path":"downloaded/WebhookConnector.java","method_name":"postKnowledgeTrees","content":"/**\n\t * Is Used for Treant\n\t */\nprivate boolean postKnowledgeTrees(List<KnowledgeElement> rootElements) {\n\t\tfor (KnowledgeElement rootElement : rootElements) {\n\t\t\tif (!postKnowledgeTree(rootElement)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}"} {"path":"downloaded/WebhookConnector.java","method_name":"getWebhookRootElements","content":"/**\n\t * Is Used for Treant\n\t */\nprivate List<KnowledgeElement> getWebhookRootElements(KnowledgeElement element) {\n\t\tList<KnowledgeElement> webhookRootElements = new ArrayList<KnowledgeElement>();\n\t\tKnowledgeGraph graph = KnowledgeGraph.getInstance(projectKey);\n\t\tList<KnowledgeElement> linkedElements = Graphs.neighborListOf(graph, element);\n\t\tlinkedElements.add(element);\n\t\tfor (KnowledgeElement linkedElement : linkedElements) {\n\t\t\tif (elementIds.contains(linkedElement.getId())) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telementIds.add(linkedElement.getId());\n\t\t\tString type = linkedElement.getTypeAsString();\n\t\t\tfor (String rootType : rootTypes) {\n\t\t\t\tif (rootType.equalsIgnoreCase(type)) {\n\t\t\t\t\twebhookRootElements.add(linkedElement);\n\t\t\t\t}\n\t\t\t}\n\t\t\twebhookRootElements.addAll(getWebhookRootElements(linkedElement));\n\t\t}\n\t\treturn webhookRootElements;\n\t}"} {"path":"downloaded/WebhookConnector.java","method_name":"postKnowledgeTree","content":"/**\n\t * Is Used for Treant (singel element)\n\t */\nprivate boolean postKnowledgeTree(KnowledgeElement rootElement) {\n\t\tWebhookContentProviderForTreant provider = new WebhookContentProviderForTreant(projectKey, rootElement, secret,\n\t\t\t\ttype);\n\t\tPostMethod postMethod = provider.createPostMethod();\n\t\treturn executePostMethod(postMethod);\n\t}"} {"path":"downloaded/WebhookConnector.java","method_name":"executePostMethod","content":"/**\n\t * Is Used for Treant (singel element)\n\t */\nprivate boolean executePostMethod(PostMethod postMethod) {\n\t\ttry {\n\t\t\tHttpClient httpClient = new HttpClient();\n\t\t\tpostMethod.setURI(new HttpsURL(url));\n\t\t\tint httpResponse = httpClient.executeMethod(postMethod);\n\t\t\tif (httpResponse >= 200 && httpResponse < 300) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tLOGGER.debug(\"Could not send webhook data. The HTTP response code is: \" + httpResponse);\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Could not send webhook data because of \" + e.getMessage());\n\t\t}\n\t\treturn false;\n\t}"} {"path":"downloaded/WebhookConnector.java","method_name":"postKnowledgeElement","content":"/**\n\t * Is Used for Slack\n\t */\nprivate boolean postKnowledgeElement(KnowledgeElement changedElement, String event) {\n\t\tWebhookContentProviderForSlack provider = new WebhookContentProviderForSlack(projectKey, changedElement, type);\n\t\tPostMethod postMethod = provider.createPostMethod(event);\n\t\treturn executePostMethod(postMethod);\n\t}"} {"path":"downloaded/WebhookConnector.java","method_name":"checkIfDataIsValid","content":"/**\n\t * Is Used for Slack\n\t */\nprivate boolean checkIfDataIsValid(KnowledgeElement changedElement) {\n\t\tif (url == null || url.isBlank()) {\n\t\t\tLOGGER.error(\"Could not trigger webhook data because the url is missing.\");\n\t\t\treturn false;\n\t\t}\n\t\tif ((secret == null || secret.isBlank()) && type != WebhookType.SLACK) {\n\t\t\tLOGGER.error(\"Could not trigger webhook data because the secret is missing.\");\n\t\t\treturn false;\n\t\t}\n\t\tif (projectKey == null || projectKey.isBlank()) {\n\t\t\tLOGGER.error(\"Could not trigger webhook data because the project key is missing.\");\n\t\t\treturn false;\n\t\t}\n\t\tif (changedElement == null) {\n\t\t\tLOGGER.error(\"Could not trigger webhook data because the changed element is null.\");\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}"} {"path":"downloaded/WebhookConnector.java","method_name":"getUrl","content":"/**\n\t * @return url of the receiver as a string, e.g.\n\t *         \"https://hooks.slack.com/services/...\".\n\t */\npublic String getUrl() {\n\t\treturn this.url;\n\t}"} {"path":"downloaded/TestSimpleEmbeddedGrid.java","method_name":"getClientConfig","content":"/**\n   * Load a client configuration.\n   * @return a fully resolved client configuration.\n   * @throws Exception if any error occurs.\n   */\nprivate static TypedProperties getClientConfig() throws Exception {\n    final Map<String, Object> bindings = new HashMap<>();\n    bindings.put(\"$nbDrivers\", nbDrivers);\n    bindings.put(\"$nbNodes\", nbNodes);\n    return ConfigurationHelper.createConfigFromTemplate(BaseSetup.DEFAULT_CONFIG.clientConfig, bindings);\n  }"} {"path":"downloaded/TestMetricsPage.java","method_name":"validateTestMetricsPage","content":"/******************************************************\n\t * \tPAGE OBJECT METHODS\n\t *****************************************************/\npublic boolean validateTestMetricsPage(){\n\t\ttry{\n\t\t\tCommonUtil.implicitWait(Constants.IMPLICIT_WAIT_LOW);\n\t\t\tList<String> chartNames=CommonUtil.getValues(\"//h3[@class='dashboard-item-title']\");\n\t\t\tint charts= chartNames.size();\n\t\t\tboolean chartHeader= false;\n\t\t\tAssert.assertTrue((CommonUtil.isElementDisplayed(xpathForDashboardOptions)),\"launching TestMetrics page failed...\");\n\t\t\tlogger.info(\"Total Number of Charts dispalyed: \"+charts+\"\" );\n\t\t\tfor(int i=0;i<=charts-1;i++){\n\t\t\t\tString chartDisplayed=chartNames.get(i);\n\t\t\t\tlogger.info((i+1)+\" chart: \"+chartDisplayed+\"\" );\n\t\t\t\tchartHeader=CommonUtil.isObjectDisplayed(\"//h3[text()='\"+chartDisplayed+\"']\");\n\t\t\t\tString gadgetTitle=CommonUtil.changeToWebElement(\"//h3[text()='\"+chartDisplayed+\"']\").getText();\n\t\t\t\tString id=getFrameId(gadgetTitle);\n\t\t\t\tDriver.driver.switchTo().frame(id);\n\t\t\t\ttry{\n\t\t\t\t\txpathOfsaveGadgetButton.isDisplayed();\n\t\t\t\t\txpathOfsaveGadgetButton.click();\n\t\t\t\t}catch(Exception e){\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tDriver.driver.switchTo().defaultContent();\n\t\t}\n\t\t\tif(chartHeader==true){\n\t\t\t\tlogger.info(\"TestMetrics page Comfirmed...\");\n\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t\t}\n\t\treturn true;\n\t}"} {"path":"downloaded/TestMetricsPage.java","method_name":"validateTestGadget","content":"/******************************************************\n\t * \tPAGE OBJECT METHODS\n\t *****************************************************/\npublic boolean validateTestGadget(){\n\t\ttry{\n\t\t\tString jiraAdmin=Config.getValue(\"JIRA_ADMIN_USERNAME\");\n\t\t\tString userLoggedIn=CommonUtil.getAttributeValueUsingWebElements(xpathForGettingUserLoggedIn, \"data-username\");\n\t\t\tAssert.assertTrue(xpathOfToolOption.isDisplayed(),\"TestMetrics Page Validation Failed...\");\n\t\t\tList<String> chartNames=CommonUtil.getValues(\"//h3[@class='dashboard-item-title']\");\n\t\t\tint charts= chartNames.size();\n\t\t\tfor(int i=0;i<=charts-1;i++){\n\t\t\t\tString chartDisplayed=chartNames.get(i);\n\t\t\t\tAssert.assertTrue(CommonUtil.isObjectDisplayed(\"//h3[text()='\"+chartDisplayed+\"']\"),\"Chart \"+chartDisplayed+\" is not added...\");\n\t\t\t\tif(jiraAdmin.equals(userLoggedIn)){\n\t\t\t\t\tAssert.assertTrue((xpathToAddGadget.isDisplayed()) && (xpathOfEditLayout.isDisplayed()),\"Adding Gadget option for Admin Not avaliable\");\n\t\t\t\t}\n\t\t\t\tString gadgetTitle=CommonUtil.changeToWebElement(\"//h3[text()='\"+chartDisplayed+\"']\").getText();\n\t\t\t\tString id=getFrameId(gadgetTitle);\n\t\t\t\tDriver.driver.switchTo().frame(id);\n\t\t\t\tlogger.info(\"Project Selected in \"+chartDisplayed+\" is:  \"+xpathToGetProject.getText()+\"\");\n\t\t\t\tlogger.info(\"Version selected in \"+chartDisplayed+\" is: \"+xpathToGetVerion.getText()+\"\");\n\t\t\t\tlogger.info(chartDisplayed+\" is grouped by: \"+xpathToGetGroupedby.getText()+\"\");\n\t\t\t\tDriver.driver.switchTo().defaultContent();\n\t\t}\n\t\t\t\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t\t}\n\t\treturn true;\n\t}"} {"path":"downloaded/TestMetricsPage.java","method_name":"validateTestGadget","content":"/******************************************************\n\t * \tPAGE OBJECT METHODS\n\t *****************************************************/\npublic boolean validateTestGadget(String gadget){\n\t\ttry{\n\t\t\tString jiraAdmin=Config.getValue(\"JIRA_ADMIN_USERNAME\");\n\t\t\tString userLoggedIn=CommonUtil.getAttributeValueUsingWebElements(xpathForGettingUserLoggedIn, \"data-username\");\n\t\t\tAssert.assertTrue(xpathOfToolOption.isDisplayed(),\"TestMetrics Page Validation Failed...\");\n\t\t\tAssert.assertTrue(CommonUtil.isObjectDisplayed(\"//h3[contains(text(),'\"+gadget+\"')]\"),\"Chart \"+gadget+\" is not added...\");\n\t\t\tif(jiraAdmin.equals(userLoggedIn)){\n\t\t\t\tAssert.assertTrue((xpathToAddGadget.isDisplayed()) && (xpathOfEditLayout.isDisplayed()),\"Adding Gadget option for Admin Not avaliable\");\n\t\t\t}\n\t\t\tString gadgetTitle=CommonUtil.changeToWebElement(\"//h3[contains(text(),'\"+gadget+\"')]\").getText();\n\t\t\tString id=getFrameId(gadgetTitle);\n\t\t\tDriver.driver.switchTo().frame(id);\n\t\t\tlogger.info(\"Project Selected in \"+gadget+\" is:  \"+xpathToGetProject.getText()+\"\");\n\t\t\tlogger.info(\"Version selected in \"+gadget+\" is: \"+xpathToGetVerion.getText()+\"\");\n\t\t\tlogger.info(gadget+\" is grouped by: \"+xpathToGetGroupedby.getText()+\"\");\n\t\t\t\n\t\t\tList<String>totalItem=CommonUtil.getValues(\"//div[@class='xAxis x1Axis']/div\");\n\t\t\tint total=totalItem.size();\n\t\t\t\n\t\t\tif(gadget.contains(\"Test Execution Burndown\")){\n\t\t\t\tlogger.info(\"the days showing in execution gadget are:\");\n\t\t\t\tfor(int i=0;i<total;i++){\n\t\t\t\t\tlogger.info(totalItem.get(i));\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\telse if(xpathToGetGroupedby.getText().contains(\"Cycle\")){\n\t\t\t\tlogger.info(\"Cycles in \"+xpathToGetVerion.getText()+ \": \");\n\t\t\t\t\tfor(int i=0;i<total;i++){\n\t\t\t\t\t\t\tlogger.info(totalItem.get(i));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\telse if(xpathToGetGroupedby.getText().contains(\"Component\")){\n\t\t\t\tlogger.info(\"Components in \"+xpathToGetVerion.getText()+ \": \");\n\t\t\t\tfor(int i=0;i<total;i++){\n\t\t\t\t\t\tlogger.info(totalItem.get(i));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\telse if(xpathToGetGroupedby.getText().contains(\"User\")){\n\t\t\t\tlogger.info(\"Users in \"+xpathToGetVerion.getText()+ \": \");\n\t\t\t\tfor(int i=0;i<total;i++){\n\t\t\t\t\t\tlogger.info(totalItem.get(i));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(gadgetTitle.equalsIgnoreCase(\"execution details\")){\n\t\t\t\tSystem.out.println(\"inside execution details gadget\");\n\t\t\t\t\n\t\t\t}\n\t\n\t\t\tDriver.driver.switchTo().defaultContent();\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t\t}\n\t\treturn true;\n\t}"} {"path":"downloaded/TestMetricsPage.java","method_name":"navigateToGadgetDirectoryAndAddGadget","content":"/******************************************************\n\t * \tPAGE OBJECT METHODS\n\t *****************************************************/\npublic boolean navigateToGadgetDirectoryAndAddGadget(String gadget){\n\t\ttry{\n\t\t\tif(CommonUtil.isObjectDisplayed(\"//h3[contains(text(),'\"+gadget+\"')]\")==true){\n\t\t\t\tlogger.info(\"Gadget: \"+gadget+\" already added to the Dashboard\");\n\t\t\t\t\n\t\t\t}\n\t\t\telse{\n\t\t\t\tCommonUtil.javaWait(Constants.JAVA_WAIT_LOW);\n\t\t\t\txpathToAddGadget.click();\n\t\t\t\tCommonUtil.javaWait(Constants.JAVA_WAIT_HIGH);\n\t\t\t\tCommonUtil.javaWait(Constants.JAVA_WAIT_HIGH);\n\t\t\t\treturn GadgetDirectoryPage.getInstance().addGadget(gadget);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t\t}\n\t\treturn true;\n\t}"} {"path":"downloaded/TestMetricsPage.java","method_name":"editGadget","content":"/******************************************************\n\t * \tPAGE OBJECT METHODS\n\t *****************************************************/\npublic boolean editGadget(Map<String, String> values){\n\t\tboolean visible=false;\n\t\ttry{\n\t\t\tAssert.assertTrue(xpathOfToolOption.isDisplayed(),\"TestMetrics Page Validation Failed...\");\n\t\t\tAssert.assertTrue(CommonUtil.isObjectDisplayed(\"//h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]\"),\"Chart \"+values.get(\"GADGET\")+\" is not added...\");\n\t\t\tCommonUtil.actionClass().moveToElement(CommonUtil.changeToWebElement(\"//h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]\")).build().perform();\n\t\t\tCommonUtil.actionClass().moveToElement(CommonUtil.changeToWebElement(\"//div[div[h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]]]/div[2]//ul//li/a/span[text()='Gadget menu']\")).build().perform();\n\t\t\tvisible=CommonUtil.changeToWebElement(\"//div[div[h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]]]/div[2]//ul//li/a/span[text()='Gadget menu']\").isDisplayed();\n\t\t\tif(visible==false){\n\t\t\t\tJavascriptExecutor js = (JavascriptExecutor) Driver.driver;\n\t\t\t\tjs.executeScript(\"javascript:window.scrollBy(450,400)\");\n\t\t\t\tCommonUtil.actionClass().moveToElement(CommonUtil.changeToWebElement(\"//h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]\")).build().perform();\n\t\t\t\tCommonUtil.actionClass().moveToElement(CommonUtil.changeToWebElement(\"//div[div[h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]]]/div[2]//ul//li/a/span[text()='Gadget menu']\")).build().perform();\n\t\t\t\tCommonUtil.javaWait(Constants.JAVA_WAIT_LOW);\n\t\t\t\t\n\t\t\t}\n\t\t\tCommonUtil.actionClass().moveToElement(CommonUtil.changeToWebElement(\"//h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]\")).build().perform();\n\t\t\tCommonUtil.actionClass().moveToElement(CommonUtil.changeToWebElement(\"//div[div[h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]]]/div[2]//ul//li/a/span[text()='Gadget menu']\")).build().perform();\n\t\t\tvisible=CommonUtil.changeToWebElement(\"//div[div[h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]]]/div[2]//ul//li/a/span[text()='Gadget menu']\").isDisplayed();\n\t\t\tif(visible==false){\n\t\t\t\tJavascriptExecutor js = (JavascriptExecutor) Driver.driver;\n\t\t\t\tjs.executeScript(\"javascript:window.scrollBy(300,300)\");\n\t\t\t\tCommonUtil.actionClass().moveToElement(CommonUtil.changeToWebElement(\"//h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]\")).build().perform();\n\t\t\t\tCommonUtil.actionClass().moveToElement(CommonUtil.changeToWebElement(\"//div[div[h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]]]/div[2]//ul//li/a/span[text()='Gadget menu']\")).build().perform();\n\t\t\t\tCommonUtil.javaWait(Constants.JAVA_WAIT_LOW);\n\t\t\t\t\n\t\t\t}\n\t\t\tCommonUtil.actionClass().moveToElement(CommonUtil.changeToWebElement(\"//h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]\")).build().perform();\n\t\t\tCommonUtil.actionClass().moveToElement(CommonUtil.changeToWebElement(\"//div[div[h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]]]/div[2]//ul//li/a/span[text()='Gadget menu']\")).build().perform();\n\t\t\tvisible=CommonUtil.changeToWebElement(\"//div[div[h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]]]/div[2]//ul//li/a/span[text()='Gadget menu']\").isDisplayed();\n\t\t\tif(visible==false){\n\t\t\t\tJavascriptExecutor js = (JavascriptExecutor) Driver.driver;\n\t\t\t\tjs.executeScript(\"javascript:window.scrollBy(-300,-300)\");\n\t\t\t\tCommonUtil.actionClass().moveToElement(CommonUtil.changeToWebElement(\"//h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]\")).build().perform();\n\t\t\t\tCommonUtil.actionClass().moveToElement(CommonUtil.changeToWebElement(\"//div[div[h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]]]/div[2]//ul//li/a/span[text()='Gadget menu']\")).build().perform();\n\t\t\t\tCommonUtil.javaWait(Constants.JAVA_WAIT_LOW);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tCommonUtil.actionClass().moveToElement(CommonUtil.changeToWebElement(\"//h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]\")).build().perform();\n\t\t\tCommonUtil.actionClass().moveToElement(CommonUtil.changeToWebElement(\"//div[div[h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]]]/div[2]//ul//li/a/span[text()='Gadget menu']\")).build().perform();\n\t\t\tvisible=CommonUtil.changeToWebElement(\"//div[div[h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]]]/div[2]//ul//li/a/span[text()='Gadget menu']\").isDisplayed();\n\t\t\tif(visible==false){\n\t\t\t\tJavascriptExecutor js = (JavascriptExecutor) Driver.driver;\n\t\t\t\tjs.executeScript(\"javascript:window.scrollBy(-450,-400)\");\n\t\t\t\tCommonUtil.actionClass().moveToElement(CommonUtil.changeToWebElement(\"//h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]\")).build().perform();\n\t\t\t\tCommonUtil.actionClass().moveToElement(CommonUtil.changeToWebElement(\"//div[div[h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]]]/div[2]//ul//li/a/span[text()='Gadget menu']\")).build().perform();\n\t\t\t\tCommonUtil.javaWait(Constants.JAVA_WAIT_LOW);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tCommonUtil.changeToWebElement(\"//div[div[h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]]]/div[2]//ul//li/a/span[text()='Gadget menu']\").click();\n\t\t\tCommonUtil.changeToWebElement(\"//div[div[h3[contains(text(),'\"+values.get(\"GADGET\")+\"')]]]/div[2]//ul//li/a[text()='Edit']\").click();\n\t\t\tString id=getFrameId(values.get(\"GADGET\"));\n\t\t\tDriver.driver.switchTo().frame(id);\n\t\t\t\n\t\t\tWebElement projectElement=CommonUtil.changeToWebElement(\"//*[@id='projectId']\");\n\t\t\tSelect selectProject=new Select(projectElement);\n\t\t\tselectProject.selectByVisibleText(values.get(\"PROJECT\"));\n\t\t\t\n\t\t\tWebElement versionElement=CommonUtil.changeToWebElement(\"//*[@id='version']\");\n\t\t\tSelect selectVersion=new Select(versionElement);\n\t\t\tselectVersion.selectByVisibleText(values.get(\"VERSION\"));\n\t\t\tif(values.get(\"GADGET\").contains(\"Test Execution Burndown\")){\n\t\t\t\tWebElement cycleElement=CommonUtil.changeToWebElement(\"//*[@id='cycleId']\");\n\t\t\t\tSelect selectCycle=new Select(cycleElement);\n\t\t\t\tselectCycle.selectByVisibleText(values.get(\"GROUPBY\"));\n\t\t\t\t\n\t\t\t}\n\t\t\telse{\n\t\t\t\tWebElement groupbyElement=CommonUtil.changeToWebElement(\"//*[@id='groupFld']\");\n\t\t\t\tSelect selectGroupby=new Select(groupbyElement);\n\t\t\t\tselectGroupby.selectByVisibleText(values.get(\"GROUPBY\"));\n\t\t\t}\n\t\t\t\n\t\t\tif(values.get(\"GADGET\").contains(\"Execution Details\")){\n\t\t\t\tSystem.out.println(\"inside test execution details...\");\n\t\t\t}\n\t\t\txpathOfsaveGadgetButton.click();\n\t\t\tDriver.driver.switchTo().defaultContent();\t\n\t\t\t\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t\t}\n\t\treturn true;\n\t}"} {"path":"downloaded/TestMetricsPage.java","method_name":"saveGadgetAdded","content":"/******************************************************\n\t * \tPAGE OBJECT METHODS\n\t *****************************************************/\npublic boolean saveGadgetAdded(String gadget){\n\t\ttry{\n\t\t\tif(gadget.equals(\"Test Execution Burndown\")){\n\t\t\t\tgadget=\"Unexecuted Schedules\";\n\t\t\t}\n\t\t\telse if(gadget.equals(\"Test Execution Details\")){\n\t\t\t\tgadget=\"Execution Details\";\n\t\t\t}\n\t\t\tString id=getFrameId(gadget);\n\t\t\tDriver.driver.switchTo().frame(id);\n\t\t\tCommonUtil.javaWait(Constants.JAVA_WAIT_LOW);\n\t\t\txpathToSaveGadget.click();\n\t\t\tDriver.driver.switchTo().defaultContent();\n\t\t\tAssert.assertTrue(CommonUtil.isObjectDisplayed(\"//h3[contains(text(),'\"+gadget+\"')]\"),\"Gadget Addition Failed...\");\n\t\t\tif(gadget.equals(\"Unexecuted Schedules\")){\n\t\t\t\tgadget=\"Test Execution Burndown\";\n\t\t\t}\n\t\t\telse if(gadget.equals(\"Execution Details\")){\n\t\t\t\tgadget=\"Test Execution Details\";\n\t\t\t}\n\t\t\tlogger.info(\"Gadget \"+gadget+\" Added successfully...\");\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t\t}\n\t\treturn true;\n\t}"} {"path":"downloaded/TestMetricsPage.java","method_name":"getFrameId","content":"/******************************************************\n\t * \tUTIL METHODS\n\t *****************************************************/\nprivate String getFrameId(String title){\n\t\tString id=CommonUtil.getAttributeValue(\"//div[div[h3[contains(text(),'\"+title+\"')]]]//iframe\", \"id\");\n\t\treturn id;\n\t}"} {"path":"downloaded/MyHashMap.java","method_name":"size","content":"/**\n\t * Returns the number of items put into the map (and not subsequently\n\t * removed).\n\t */\npublic int size() {\n\t\treturn size;\n\t}"} {"path":"downloaded/MyHashMap.java","method_name":"capacity","content":"/**\n\t * Returns the capacity of the underlying array of the map.\n\t */\npublic int capacity() {\n\t\treturn this.capacity;\n\t}"} {"path":"downloaded/MyHashMap.java","method_name":"containsKey","content":"/**\n\t * Returns whether the map contains the given key. Runs in O(1) time on\n\t * average, relative to the size of the map.\n\t */\npublic boolean containsKey(K key) {\n\t\tif (get(key) == null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}"} {"path":"downloaded/MyHashMap.java","method_name":"containsValue","content":"/**\n\t * Returns whether there is some key in the map that contains this value.\n\t * How fast can you make this run?\n\t */\npublic boolean containsValue(V value) {\n\t\tfor (LinkedList<KVPair> i : hashMapArray) {\n\t\t\tif (i!= null) {\n\t\t\t\tfor (int k = 0; k<i.size(); k++) {\n\t\t\t\t\tif (i.get(k).getValue() == value) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}"} {"path":"downloaded/MyHashMap.java","method_name":"put","content":"/**\n\t * Puts the key in the map with the given value. If the key is already in\n\t * the map, replaces the value. Should run in O(1) time on average with\n\t * respect to the size of the map.\n\t * \n\t * Returns the previous value associated with the key, or null if there was\n\t * no such value.\n\t * \n\t * Note: If this method causes size / capacity to be greater than the load\n\t * factor, then this method should also expand the map.\n\t */\npublic V put(K key, V value) {\n\t\tint place = hash(key.hashCode());\n\t\tif (get(key) != null) {\n\t\t\tLinkedList<KVPair> temp = hashMapArray[place];\n\t\t\tfor (KVPair i : temp) {\n\t\t\t\tif (i.getKey().equals(key)) {\n\t\t\t\t\tV oldKey = i.getValue();\n\t\t\t\t\ti.setValue(value);\n\t\t\t\t\treturn oldKey;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif ((capacity * loadFactor) <= (size)) {\n\t\t\t\texpand(capacity + 10);\n\t\t\t\treturn put(key, value);\n\t\t\t}  else if (hashMapArray[place] == null) {\n\t\t\t\thashMapArray[place] = new LinkedList<KVPair>();\n\t\t\t}\n\t\t\thashMapArray[place].add(new KVPair(key, value));\n\t\t\tsize++;\n\t\t}\n\t\treturn null;\n\t}"} {"path":"downloaded/MyHashMap.java","method_name":"remove","content":"/**\n\t * Removes the key from the map. Should run in O(1) time on average with\n\t * respect to the size of the map.\n\t * \n\t * Returns the value associated with the key, or null if there was no key.\n\t */\npublic V remove(K key) {\n\t\t// TODO Complete this!\n\t\tint place = hash(key.hashCode());\n\t\tif (hashMapArray[place] != null) {\n\t\t\tLinkedList<KVPair> temp = hashMapArray[place];\n\t\t\tfor (KVPair i : temp) {\n\t\t\t\tif (i.getKey().equals(key)) {\n\t\t\t\t\tV oldKey = i.getValue();\n\t\t\t\t\ttemp.remove(i);\n\t\t\t\t\tsize--;\n\t\t\t\t\treturn oldKey;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}"} {"path":"downloaded/MyHashMap.java","method_name":"get","content":"/**\n\t * Returns the value associated with the key in the map, or null if there is\n\t * no such value. Should run in O(1) time on average with respect to the\n\t * size of the map.\n\t */\npublic V get(K key) {\n\t\tint place = hash(key.hashCode());\n\t\tif (hashMapArray[place] != null) {\n\t\t\tLinkedList<KVPair> temp = hashMapArray[place];\n\t\t\tfor (KVPair i : temp) {\n\t\t\t\tif (i.getKey().equals(key)) {\n\t\t\t\t\treturn i.getValue();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}"} {"path":"downloaded/MyHashMap.java","method_name":"hash","content":"/**\n\t * Returns the value associated with the key in the map, or null if there is\n\t * no such value. Should run in O(1) time on average with respect to the\n\t * size of the map.\n\t */\npublic int hash(int hashCode) {\n\t\tif (hashCode < 0) {\n\t\t\treturn hash(-hashCode);\n\t\t} else if ((hashCode % 10) >= hashMapArray.length) {\n\t\t\treturn hash((hashCode % 10) / 2);\n\t\t} else {\n\t\t\treturn hashCode % 10;\n\t\t}\n\t}"} {"path":"downloaded/MyHashMap.java","method_name":"iterator","content":"/**\n\t * Returns an iterator over the keys of this map.\n\t */\npublic Iterator<K> iterator() {\n\t\treturn new HashMapIterator();\n\t}"} {"path":"downloaded/ViewHolder.java","method_name":"wHo","content":"/**\n\t * 入口方\n�\n\t */\n\tpublic static ViewHolder get(Context context,View convertview,ViewGroup parent,int layoutID,int position){\n\t\tif(convertview==null){\n\t\t\treturn new ViewHolder(context, parent, layoutID, position);\n\t\t}else{\n\t\t\tViewHolder holder= (ViewHolder) convertview.getTag();\n\t\t\tholder.mposition=position;//更新一下\n\t\t\tretur"} {"path":"downloaded/ViewHolder.java","method_name":"\t */\n\tp","content":"/**\n\t * 入口方\n 通过viewid获取控件\n\t */\n\tpublic <T extends View> T getView(int viewId){\n\t\tView view=mViews.get(viewId);\n\t\tif(view==null){\n\t\t\tview=mConvertView.findViewById(viewId);\n\t\t\tmViews.put(viewId,"} {"path":"downloaded/ViewHolder.java","method_name":"tView\n\t * @ret","content":"/**\n\t * 入口方\n返回convertView\n\t * @return\n\t */\n\tpublic View getConv"} {"path":"downloaded/RegionSet.java","method_name":"onPreAdd","content":"/**\n     * Constructor.\n     *\n     * @param sorted      The initial sorting state. True if sorting is expected.\n     * @param collection  The collection to add.\n     */\n@Override\n    protected boolean onPreAdd(E e) {\n        if (e.getPriority() > 0)\n            switchTreeSet();\n        return true;\n    }"} {"path":"downloaded/RegionSet.java","method_name":"set","content":"/**\n     * Constructor.\n     *\n     * @param sorted      The initial sorting state. True if sorting is expected.\n     * @param collection  The collection to add.\n     */\n@Override\n    protected Set<E> set() {\n        if (_set != null)\n            return _set;\n        return _treeSet;\n    }"} {"path":"downloaded/RegionSet.java","method_name":"switchTreeSet","content":"/**\n     * Switch to using a {@link java.util.TreeSet} for sorting.\n     */\nprotected void switchTreeSet() {\n\n        if (_treeSet != null)\n            return;\n\n        _treeSet = new TreeSet<>(getComparator());\n\n        if (_set != null) {\n            _treeSet.addAll(_set);\n        }\n\n        _set = null;\n    }"} {"path":"downloaded/RegionSet.java","method_name":"getComparator","content":"/**\n     * Get a new {@link java.util.TreeSet} comparator.\n     */\nprotected Comparator<E> getComparator() {\n        return new Comparator<E>() {\n            @Override\n            public int compare(E region1, E region2) {\n\n                // sort regions with highest priority (highest value) first\n                return Integer.compare(region2.getPriority(), region1.getPriority());\n            }\n        };\n    }"} {"path":"downloaded/BinTreeLeafIterator.java","method_name":"hasNext","content":"/**\n\t * Returns true if the tree has an additional leaf, \n\t * otherwise false.\n\t * <p>YOU SHOULD MODIFY THE BODY OF THIS FUNCTION.\n\t */\npublic boolean hasNext() {\n\t\treturn actual!=null;\t\t\n\t}"} {"path":"downloaded/BinTreeLeafIterator.java","method_name":"next","content":"/**\n\t * Returns the next leaf element, or throws the exception\n\t * NoSuchElementException if no such leaf element exists.\n\t * <p>YOU SHOULD MODIFY THE BODY OF THIS FUNCTION.\n\t */\npublic E next() throws NoSuchElementException{\n\t\tPosition<E> aux=actual;\n\t\tif (aux == null) \n\t\t\tthrow new NoSuchElementException();\t\t\n\t\tthis.avanzar();\n\t\treturn aux.element();\n\t}"} {"path":"downloaded/BinTreeLeafIterator.java","method_name":"firstLeaf","content":"/**\n\t * Returns the next leaf element, or throws the exception\n\t * NoSuchElementException if no such leaf element exists.\n\t * <p>YOU SHOULD MODIFY THE BODY OF THIS FUNCTION.\n\t */\nprivate Position<E> firstLeaf(){\n\t\tPosition<E> aux=null;\n\t\tif(tree.isEmpty())\n\t\t\treturn aux;\n\t\telse\n\t\t\taux=tree.root();\n\t\twhile(this.tree.hasLeft(aux)){\n\t\t\taux=tree.left(aux);\n\t\t}\n\t\treturn aux;\n\t}"} {"path":"downloaded/BinTreeLeafIterator.java","method_name":"nextLeaf","content":"/**\n\t * Returns the next leaf element, or throws the exception\n\t * NoSuchElementException if no such leaf element exists.\n\t * <p>YOU SHOULD MODIFY THE BODY OF THIS FUNCTION.\n\t */\nprivate Position<E> nextLeaf(Position<E> p){\n\t\tPosition<E> aux=p;\n\t\twhile(this.tree.hasLeft(aux)){\n\t\t\taux=tree.left(aux);\n\t\t}\n\t\tif(this.tree.isInternal(aux))\n\t\t\twhile(this.tree.hasRight(aux)){\n\t\t\t\taux=tree.right(aux);\n\t\t\t}\n\t\treturn aux;\n\t}"} {"path":"downloaded/BlueMessage.java","method_name":"getMessageProperties","content":"/**\n\t * Returns the current Properties associated with this Message\n\t * \n\t * @return - Hashmap of the current Message properties.\n\t */\npublic Map getMessageProperties()\n\t{\n\t\treturn this.properties;\n\t}"} {"path":"downloaded/BlueMessage.java","method_name":"getMessageType","content":"/**\n\t * Returns the Type of message that this represents. Valid message Types can be found\n\t * in org.blue.registry.Requests.\n\t * \n\t * @return String - The current Message Type.\n\t */\npublic String getMessageType()\n\t{\n\t\treturn this.messageType;\n\t}"} {"path":"downloaded/ParameterDefinition.java","method_name":"getName","content":"/**\n     * Get the name property: Name of the parameter declared in the pipeline topology.\n     *\n     * @return the name value.\n     */\npublic String getName() {\n        return this.name;\n    }"} {"path":"downloaded/ParameterDefinition.java","method_name":"getValue","content":"/**\n     * Get the value property: Parameter value to be applied on this specific live pipeline.\n     *\n     * @return the value value.\n     */\npublic String getValue() {\n        return this.value;\n    }"} {"path":"downloaded/ParameterDefinition.java","method_name":"setValue","content":"/**\n     * Set the value property: Parameter value to be applied on this specific live pipeline.\n     *\n     * @param value the value value to set.\n     * @return the ParameterDefinition object itself.\n     */\npublic ParameterDefinition setValue(String value) {\n        this.value = value;\n        return this;\n    }"} {"path":"downloaded/AppFrame.java","method_name":"n raceSelect","content":"\n\t/**\n\t * Create the frame.\n\t \n\n\tpublic boolean raceSelected(){\n\t\tif(btnDwarf.isEnabled() && btnElf.isEnabled() && btnHuman.isEnabled())\n\t\t\treturn false;\n\t\telse\n\t\t\treturn true;\n"} {"path":"downloaded/AppFrame.java","method_name":"n classSelect","content":"\n\t/**\n\t * Create the frame.\n\t \n\n\tpublic boolean classSelected(){\n\t\tif(btnMage.isEnabled() && btnWarrior.isEnabled() && btnRanger.isEnabled())\n\t\t\treturn false;\n\t\telse\n\t\t\treturn true;\n"} {"path":"downloaded/AppFrame.java","method_name":"n nameValidati","content":"\n\t/**\n\t * Create the frame.\n\t \n\n\tpublic boolean nameValidation(String name) {\n\t    char[] chars = name.toCharArray();\n\t    int tempNum = 0;\n\t    for (char c : chars) {\n\t        tempNum += 1;\n\t    \tif(!Character.isLetter(c)) {\n\t            return false;\n\t        }\n\t    }\n\t    if (tempNum == 0)\n\t    \treturn false;\n\n\t    return true;\n"} {"path":"downloaded/DisplayDestCardsDialogFragment.java","method_name":"onCreateDialog","content":"/**\n     * Set the list of destination cards for the adapter to use\n     * @param list\n     */\n@Override\n    public Dialog onCreateDialog(Bundle savedInstanceState) {\n        AlertDialog.Builder builder = new AlertDialog.Builder(gameBoardActivity);\n        View v = gameBoardActivity.getLayoutInflater().inflate(R.layout.scroll_view, null);\n\n        adapter = new DisplayCardsAdapter(gameBoardActivity.getBaseContext(),\n                R.layout.display_destination_cards, destinationCards);\n\n        allCardsView = (ListView) v.findViewById(R.id.genericScrollViewContainer);\n        allCardsView.setAdapter(adapter);\n\n        builder.setTitle(R.string.dest_cards).\n                setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialogInterface, int i) {\n                        dialogInterface.cancel(); // Close the dialog\n                    }\n                }).\n                setCancelable(false).\n                setIcon(R.drawable.dest_cards_icon).\n                setView(v);\n\n        return builder.create();\n    }"} {"path":"downloaded/DisplayDestCardsDialogFragment.java","method_name":"getView","content":"/**\n         * ViewHolder class for holding the data needed in each list view\n         */\npublic View getView(int position, View convertView, ViewGroup parent) {\n\n            final ViewHolder holder;\n            DestinationCard card = getItem(position);\n\n            if (card != null) {\n//                String src = \"From:   \" + card.getDestination().getSource().getCityName();\n//                String dst = \"To:     \" + card.getDestination().getDest().getCityName();\n//                String pts = \"Points: \" + card.getPointValue();\n\n                LayoutInflater mInflater = (LayoutInflater) mContext\n                        .getSystemService(Activity.LAYOUT_INFLATER_SERVICE);\n\n                if (convertView == null) {\n                    convertView = mInflater.inflate(R.layout.display_destination_cards, null);\n\n                    holder = new ViewHolder();\n                    holder.source = (TextView) convertView.findViewById(R.id.destCard_source);\n                    holder.dest = (TextView) convertView.findViewById(R.id.destCard_dest);\n                    holder.points = (TextView) convertView.findViewById(R.id.destCard_points);\n                    holder.checkBox = (CheckBox) convertView.findViewById(R.id.completed_dest_checkbox);\n                    holder.returnBox = (CheckBox) convertView.findViewById(R.id.return_checkbox);\n\n//                    if (ClientModel.SINGLETON.getCurrentUser().haveCompletedRoute(card))\n//                        holder.checkBox.setChecked(true);\n//                    else\n                        holder.checkBox.setChecked(false);\n\n                    convertView.setTag(holder);\n                } else\n                    holder = (ViewHolder) convertView.getTag();\n\n                holder.source.setText(\"FROM: DEST 1\");//src);\n                holder.dest.setText(\"TO: DEST 2\");//dst);\n                holder.points.setText(\"30\");//pts);\n//                if (ClientModel.SINGLETON.getCurrentUser().haveCompletedRoute(card))\n//                    holder.checkBox.setChecked(true);\n//                else\n                    holder.checkBox.setChecked(false);\n                if(holder.returnBox.isChecked())\n                    ClientModel.SINGLETON.getCurrentUser().removeDestinationCard(card);\n                holder.returnBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n\n                                                                        @Override\n                                                                        public void onCheckedChanged(CompoundButton buttonView,boolean isChecked) {\n                                                                               holder.returnBox.setChecked(true);\n                                                                        }\n                                                            }\n                );\n            }\n\n            return convertView;\n        }"} {"path":"downloaded/Opht.java","method_name":"getId_opht","content":"/**\n     * @return the id_opht\n     */\npublic Short getId_opht() {\n        return id_opht;\n    }"} {"path":"downloaded/Opht.java","method_name":"getLarmoiment","content":"/**\n     * @return the larmoiment\n     */\npublic String getLarmoiment() {\n        return larmoiment;\n    }"} {"path":"downloaded/Opht.java","method_name":"getDouleurO","content":"/**\n     * @return the douleurO\n     */\npublic String getDouleurO() {\n        return douleurO;\n    }"} {"path":"downloaded/Opht.java","method_name":"getTaches","content":"/**\n     * @return the taches\n     */\npublic String getTaches() {\n        return taches;\n    }"} {"path":"downloaded/Opht.java","method_name":"getOeilRouge","content":"/**\n     * @return the oeilRouge\n     */\npublic String getOeilRouge() {\n        return oeilRouge;\n    }"} {"path":"downloaded/Opht.java","method_name":"getFatigue","content":"/**\n     * @return the fatigue\n     */\npublic String getFatigue() {\n        return fatigue;\n    }"} {"path":"downloaded/Opht.java","method_name":"getAutreO","content":"/**\n     * @return the autreO\n     */\npublic String getAutreO() {\n        return autreO;\n    }"} {"path":"downloaded/Opht.java","method_name":"getIdVisite","content":"/**\n     * @return the idVisite\n     */\npublic Short getIdVisite() {\n        return idVisite;\n    }"} {"path":"downloaded/ExamConfigLocalServiceWrapper.java","method_name":"addExamConfig","content":"/**\n    * Adds the exam config to the database. Also notifies the appropriate model listeners.\n    *\n    * @param examConfig the exam config\n    * @return the exam config that was added\n    * @throws SystemException if a system exception occurred\n    */\npublic hu.advancedweb.model.ExamConfig addExamConfig(\n        hu.advancedweb.model.ExamConfig examConfig)\n        throws com.liferay.portal.kernel.exception.SystemException {\n        return _examConfigLocalService.addExamConfig(examConfig);\n    }"} {"path":"downloaded/ExamConfigLocalServiceWrapper.java","method_name":"createExamConfig","content":"/**\n    * Creates a new exam config with the primary key. Does not add the exam config to the database.\n    *\n    * @param id the primary key for the new exam config\n    * @return the new exam config\n    */\npublic hu.advancedweb.model.ExamConfig createExamConfig(long id) {\n        return _examConfigLocalService.createExamConfig(id);\n    }"} {"path":"downloaded/ExamConfigLocalServiceWrapper.java","method_name":"dynamicQuery","content":"/**\n    * Performs a dynamic query on the database and returns the matching rows.\n    *\n    * @param dynamicQuery the dynamic query\n    * @return the matching rows\n    * @throws SystemException if a system exception occurred\n    */\n@SuppressWarnings(\"rawtypes\")\n    public java.util.List dynamicQuery(\n        com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery)\n        throws com.liferay.portal.kernel.exception.SystemException {\n        return _examConfigLocalService.dynamicQuery(dynamicQuery);\n    }"} {"path":"downloaded/ExamConfigLocalServiceWrapper.java","method_name":"dynamicQuery","content":"/**\n    * Performs a dynamic query on the database and returns a range of the matching rows.\n    *\n    * <p>\n    * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.\n    * </p>\n    *\n    * @param dynamicQuery the dynamic query\n    * @param start the lower bound of the range of model instances\n    * @param end the upper bound of the range of model instances (not inclusive)\n    * @return the range of matching rows\n    * @throws SystemException if a system exception occurred\n    */\n@SuppressWarnings(\"rawtypes\")\n    public java.util.List dynamicQuery(\n        com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery, int start,\n        int end) throws com.liferay.portal.kernel.exception.SystemException {\n        return _examConfigLocalService.dynamicQuery(dynamicQuery, start, end);\n    }"} {"path":"downloaded/ExamConfigLocalServiceWrapper.java","method_name":"dynamicQuery","content":"/**\n    * Performs a dynamic query on the database and returns an ordered range of the matching rows.\n    *\n    * <p>\n    * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.\n    * </p>\n    *\n    * @param dynamicQuery the dynamic query\n    * @param start the lower bound of the range of model instances\n    * @param end the upper bound of the range of model instances (not inclusive)\n    * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)\n    * @return the ordered range of matching rows\n    * @throws SystemException if a system exception occurred\n    */\n@SuppressWarnings(\"rawtypes\")\n    public java.util.List dynamicQuery(\n        com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery, int start,\n        int end,\n        com.liferay.portal.kernel.util.OrderByComparator orderByComparator)\n        throws com.liferay.portal.kernel.exception.SystemException {\n        return _examConfigLocalService.dynamicQuery(dynamicQuery, start, end,\n            orderByComparator);\n    }"} {"path":"downloaded/ExamConfigLocalServiceWrapper.java","method_name":"dynamicQueryCount","content":"/**\n    * Returns the number of rows that match the dynamic query.\n    *\n    * @param dynamicQuery the dynamic query\n    * @return the number of rows that match the dynamic query\n    * @throws SystemException if a system exception occurred\n    */\npublic long dynamicQueryCount(\n        com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery)\n        throws com.liferay.portal.kernel.exception.SystemException {\n        return _examConfigLocalService.dynamicQueryCount(dynamicQuery);\n    }"} {"path":"downloaded/ExamConfigLocalServiceWrapper.java","method_name":"fetchExamConfig","content":"/**\n    * Returns the number of rows that match the dynamic query.\n    *\n    * @param dynamicQuery the dynamic query\n    * @return the number of rows that match the dynamic query\n    * @throws SystemException if a system exception occurred\n    */\npublic hu.advancedweb.model.ExamConfig fetchExamConfig(long id)\n        throws com.liferay.portal.kernel.exception.SystemException {\n        return _examConfigLocalService.fetchExamConfig(id);\n    }"} {"path":"downloaded/ExamConfigLocalServiceWrapper.java","method_name":"getExamConfig","content":"/**\n    * Returns the exam config with the primary key.\n    *\n    * @param id the primary key of the exam config\n    * @return the exam config\n    * @throws PortalException if a exam config with the primary key could not be found\n    * @throws SystemException if a system exception occurred\n    */\npublic hu.advancedweb.model.ExamConfig getExamConfig(long id)\n        throws com.liferay.portal.kernel.exception.PortalException,\n            com.liferay.portal.kernel.exception.SystemException {\n        return _examConfigLocalService.getExamConfig(id);\n    }"} {"path":"downloaded/ExamConfigLocalServiceWrapper.java","method_name":"getPersistedModel","content":"/**\n    * Returns the exam config with the primary key.\n    *\n    * @param id the primary key of the exam config\n    * @return the exam config\n    * @throws PortalException if a exam config with the primary key could not be found\n    * @throws SystemException if a system exception occurred\n    */\npublic com.liferay.portal.model.PersistedModel getPersistedModel(\n        java.io.Serializable primaryKeyObj)\n        throws com.liferay.portal.kernel.exception.PortalException,\n            com.liferay.portal.kernel.exception.SystemException {\n        return _examConfigLocalService.getPersistedModel(primaryKeyObj);\n    }"} {"path":"downloaded/ExamConfigLocalServiceWrapper.java","method_name":"getExamConfigs","content":"/**\n    * Returns a range of all the exam configs.\n    *\n    * <p>\n    * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.\n    * </p>\n    *\n    * @param start the lower bound of the range of exam configs\n    * @param end the upper bound of the range of exam configs (not inclusive)\n    * @return the range of exam configs\n    * @throws SystemException if a system exception occurred\n    */\npublic java.util.List<hu.advancedweb.model.ExamConfig> getExamConfigs(\n        int start, int end)\n        throws com.liferay.portal.kernel.exception.SystemException {\n        return _examConfigLocalService.getExamConfigs(start, end);\n    }"} {"path":"downloaded/ExamConfigLocalServiceWrapper.java","method_name":"getExamConfigsCount","content":"/**\n    * Returns the number of exam configs.\n    *\n    * @return the number of exam configs\n    * @throws SystemException if a system exception occurred\n    */\npublic int getExamConfigsCount()\n        throws com.liferay.portal.kernel.exception.SystemException {\n        return _examConfigLocalService.getExamConfigsCount();\n    }"} {"path":"downloaded/ExamConfigLocalServiceWrapper.java","method_name":"updateExamConfig","content":"/**\n    * Updates the exam config in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.\n    *\n    * @param examConfig the exam config\n    * @return the exam config that was updated\n    * @throws SystemException if a system exception occurred\n    */\npublic hu.advancedweb.model.ExamConfig updateExamConfig(\n        hu.advancedweb.model.ExamConfig examConfig)\n        throws com.liferay.portal.kernel.exception.SystemException {\n        return _examConfigLocalService.updateExamConfig(examConfig);\n    }"} {"path":"downloaded/ExamConfigLocalServiceWrapper.java","method_name":"updateExamConfig","content":"/**\n    * Updates the exam config in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.\n    *\n    * @param examConfig the exam config\n    * @param merge whether to merge the exam config with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.\n    * @return the exam config that was updated\n    * @throws SystemException if a system exception occurred\n    */\npublic hu.advancedweb.model.ExamConfig updateExamConfig(\n        hu.advancedweb.model.ExamConfig examConfig, boolean merge)\n        throws com.liferay.portal.kernel.exception.SystemException {\n        return _examConfigLocalService.updateExamConfig(examConfig, merge);\n    }"} {"path":"downloaded/ExamConfigLocalServiceWrapper.java","method_name":"getBeanIdentifier","content":"/**\n    * Returns the Spring bean ID for this bean.\n    *\n    * @return the Spring bean ID for this bean\n    */\npublic java.lang.String getBeanIdentifier() {\n        return _examConfigLocalService.getBeanIdentifier();\n    }"} {"path":"downloaded/ExamConfigLocalServiceWrapper.java","method_name":"createExamConfig","content":"/**\n    * Sets the Spring bean ID for this bean.\n    *\n    * @param beanIdentifier the Spring bean ID for this bean\n    */\npublic hu.advancedweb.model.ExamConfig createExamConfig(long companyId,\n        long groupId, java.lang.String questions, java.lang.String evaluator)\n        throws com.liferay.portal.kernel.exception.SystemException {\n        return _examConfigLocalService.createExamConfig(companyId, groupId,\n            questions, evaluator);\n    }"} {"path":"downloaded/ExamConfigLocalServiceWrapper.java","method_name":"createExamConfig","content":"/**\n    * Sets the Spring bean ID for this bean.\n    *\n    * @param beanIdentifier the Spring bean ID for this bean\n    */\npublic hu.advancedweb.model.ExamConfig createExamConfig(long companyId,\n        long groupId, hu.advancedweb.lms.evaluation.ExamTest test,\n        com.google.common.base.Optional<java.lang.String> evaluator,\n        com.google.common.base.Optional<hu.advancedweb.lms.evaluation.DefaultExamEvaluatorLogic> evaluatorLogic)\n        throws com.liferay.portal.kernel.exception.SystemException {\n        return _examConfigLocalService.createExamConfig(companyId, groupId,\n            test, evaluator, evaluatorLogic);\n    }"} {"path":"downloaded/ExamConfigLocalServiceWrapper.java","method_name":"rereadDefaultEvaluatorLogic","content":"/**\n    * Sets the Spring bean ID for this bean.\n    *\n    * @param beanIdentifier the Spring bean ID for this bean\n    */\npublic hu.advancedweb.lms.evaluation.DefaultExamEvaluatorLogic rereadDefaultEvaluatorLogic(\n        java.lang.String evaluatorJavascript) {\n        return _examConfigLocalService.rereadDefaultEvaluatorLogic(evaluatorJavascript);\n    }"} {"path":"downloaded/ExamConfigLocalServiceWrapper.java","method_name":"updateExamConfig","content":"/**\n    * Updates the config\n    */\npublic hu.advancedweb.model.ExamConfig updateExamConfig(long id,\n        hu.advancedweb.lms.evaluation.ExamTest test,\n        com.google.common.base.Optional<java.lang.String> evaluator,\n        com.google.common.base.Optional<hu.advancedweb.lms.evaluation.DefaultExamEvaluatorLogic> evaluatorLogic)\n        throws com.liferay.portal.kernel.exception.PortalException,\n            com.liferay.portal.kernel.exception.SystemException {\n        return _examConfigLocalService.updateExamConfig(id, test, evaluator,\n            evaluatorLogic);\n    }"} {"path":"downloaded/ExamConfigLocalServiceWrapper.java","method_name":"getWrappedExamConfigLocalService","content":"/**\n     * @deprecated Renamed to {@link #getWrappedService}\n     */\npublic ExamConfigLocalService getWrappedExamConfigLocalService() {\n        return _examConfigLocalService;\n    }"} {"path":"downloaded/ExamConfigLocalServiceWrapper.java","method_name":"getWrappedService","content":"/**\n     * @deprecated Renamed to {@link #setWrappedService}\n     */\npublic ExamConfigLocalService getWrappedService() {\n        return _examConfigLocalService;\n    }"} {"path":"downloaded/AuthorizeRequestImpl.java","method_name":"getIdTag","content":"/**\n     * Gets the \"idTag\" element\n     */\npublic java.lang.String getIdTag()\n    {\n        synchronized (monitor())\n        {\n            check_orphaned();\n            org.apache.xmlbeans.SimpleValue target = null;\n            target = (org.apache.xmlbeans.SimpleValue)get_store().find_element_user(IDTAG$0, 0);\n            if (target == null)\n            {\n                return null;\n            }\n            return target.getStringValue();\n        }\n    }"} {"path":"downloaded/AuthorizeRequestImpl.java","method_name":"xgetIdTag","content":"/**\n     * Gets (as xml) the \"idTag\" element\n     */\npublic ocpp.IdToken xgetIdTag()\n    {\n        synchronized (monitor())\n        {\n            check_orphaned();\n            ocpp.IdToken target = null;\n            target = (ocpp.IdToken)get_store().find_element_user(IDTAG$0, 0);\n            return target;\n        }\n    }"} {"path":"downloaded/ParseJsonAsyncTask.java","method_name":"doInBackground","content":"/**\n     * Build a {@link it.kminer.models.ClusterSet} instance.\n     * @param strings json data retrieved from server\n     * @return the {@link it.kminer.models.ClusterSet} instance.\n     */\n@Override\n    protected ClusterSet doInBackground(String... strings) {\n        return new ClusterSet(strings[0]);\n    }"} {"path":"downloaded/BaseRuleAdapter.java","method_name":"createValidationException","content":"/**\n     * Processes the incoming event synchronously.\n     */\npublic SpongeException createValidationException(String text) {\n        return new SpongeException(\"Invalid rule \" + getMeta().getName() + \". \" + text);\n    }"} {"path":"downloaded/BaseRuleAdapter.java","method_name":"getRuntime","content":"/**\n     * Clears event tree and event alias map.\n     */\npublic RuleAdapterRuntime getRuntime() {\n        if (runtime == null) {\n            runtime = getMeta().isOrdered() ? new OrderedRuleAdapterRuntime(this) : new UnorderedRuleAdapterRuntime(this);\n        }\n\n        return runtime;\n    }"} {"path":"downloaded/BaseRuleAdapter.java","method_name":"acceptAsFirst","content":"/**\n     * Clears event tree and event alias map.\n     */\n@Override\n    public boolean acceptAsFirst(Event event) {\n        return getRuntime().acceptAsFirst(event);\n    }"} {"path":"downloaded/BaseRuleAdapter.java","method_name":"runRule","content":"/**\n     * Clears event tree and event alias map.\n     */\n@Override\n    protected boolean runRule() {\n        return getRuntime().runRule();\n    }"} {"path":"downloaded/BaseRuleAdapter.java","method_name":"isCandidateForFirstEvent","content":"/**\n     * Clears event tree and event alias map.\n     */\n@Override\n    public boolean isCandidateForFirstEvent(Event event) {\n        return getRuntime().isCandidateForFirstEvent(event);\n    }"} {"path":"downloaded/BaseRuleAdapter.java","method_name":"getFirstEvent","content":"/**\n     * Clears event tree and event alias map.\n     */\n@Override\n    public Event getFirstEvent() {\n        return getRuntime().getFirstEvent();\n    }"} {"path":"downloaded/BaseRuleAdapter.java","method_name":"getEvent","content":"/**\n     * Clears event tree and event alias map.\n     */\npublic Event getEvent(String eventAlias) {\n        return getRuntime().getEvent(eventAlias);\n    }"} {"path":"downloaded/BaseRuleAdapter.java","method_name":"getEventAliasMap","content":"/**\n     * Clears event tree and event alias map.\n     */\npublic final Map<String, Event> getEventAliasMap() {\n        return getRuntime().getEventAliasMap();\n    }"} {"path":"downloaded/BaseRuleAdapter.java","method_name":"getEventSequence","content":"/**\n     * Clears event tree and event alias map.\n     */\npublic final List<Event> getEventSequence() {\n        return getRuntime().getEventSequence();\n    }"} {"path":"downloaded/BaseRuleAdapter.java","method_name":"getEventTree","content":"/**\n     * Returns the event tree.\n     *\n     * @return the event tree.\n     */\npublic final Tree<NodeValue> getEventTree() {\n        return getRuntime().getEventTree();\n    }"} {"path":"downloaded/BasicBusinessUtil.java","method_name":"return\n\t */\n","content":"/**\n\t * 过滤标识串\n\t * 位数不足时后面补0，位数见BaseConstant.COUNT_KEY_LENGTH\n\t\n @param termKey\n\t * @return\n\t */\n\tpublic static String spellTermKey(String termKey) {\n\t\ttermKey = StringUtils.isBlank(termKey)?\"\":termKey;\n\t\twhile (termKey.length() < BaseConstant.TERM_KEY_LENGTH) {\n\t\t\ttermKe"} {"path":"downloaded/TwilioWorkflowServlet.java","method_name":"toTwiMLResponse","content":"/**\n     * Determine based on Cookies if this request is new or is already in process.\n     */\nTwiMLResponse toTwiMLResponse(PyObject pyObject) {\n        return (TwiMLResponse) pyObject.__tojava__(TwiMLResponse.class);\n    }"} {"path":"downloaded/TwilioWorkflowServlet.java","method_name":"loadWorkflow","content":"/**\n     * Determine based on Cookies if this request is new or is already in process.\n     */\nInvocable loadWorkflow(final String workflowName) throws ExecutionException, IOException {\n        return this.workflowScriptCache.get(workflowName, new Callable<Invocable>() {\n            @Override\n            public Invocable call() throws Exception {\n                ScriptEngine engine = newScriptEngine();\n                String script = loadWorkflowScript(workflowName);\n                engine.eval(script);\n                return (Invocable) engine;\n            }\n        });\n    }"} {"path":"downloaded/TwilioWorkflowServlet.java","method_name":"loadWorkflowScript","content":"/**\n     * Determine based on Cookies if this request is new or is already in process.\n     */\nString loadWorkflowScript(String workflowName) throws IOException {\n        Closer closer = Closer.create();\n        try {\n            ServletContext ctx = getServletContext();\n            String scriptName = \"/WEB-INF/\" + workflowName + \".py\";\n            InputStream ins = ctx.getResourceAsStream(scriptName);\n            Reader rdr = closer.register(new InputStreamReader(ins, \"UTF-8\"));\n            return CharStreams.toString(rdr);\n        } catch (IOException ioe) {\n            throw closer.rethrow(ioe);\n        } finally {\n            closer.close();\n        }\n    }"} {"path":"downloaded/TwilioWorkflowServlet.java","method_name":"getWorkflowName","content":"/**\n     * Determine based on Cookies if this request is new or is already in process.\n     */\nString getWorkflowName(HttpServletRequest req) {\n        String uri = req.getRequestURI();\n        int index = uri.lastIndexOf('/') + 1;\n        return uri.substring(index);\n    }"} {"path":"downloaded/TwilioWorkflowServlet.java","method_name":"getWorkflowSessionId","content":"/**\n     * Determine based on Cookies if this request is new or is already in process.\n     */\nString getWorkflowSessionId(HttpServletRequest req) {\n        try {\n            return Iterables.find(getCookies(req), new Predicate<Cookie>() {\n                @Override\n                public boolean apply(Cookie cookie) {\n                    return \"uuid\".equals(cookie.getName());\n                }\n            }).getValue();\n        } catch (NoSuchElementException ex) {\n            return UUID.randomUUID().toString();\n        }\n    }"} {"path":"downloaded/TwilioWorkflowServlet.java","method_name":"getCookies","content":"/**\n     * Determine based on Cookies if this request is new or is already in process.\n     */\nList<Cookie> getCookies(HttpServletRequest req) {\n        Cookie[] cookies = req.getCookies();\n        return cookies == null ? Collections.<Cookie>emptyList() : Arrays.asList(cookies);\n    }"} {"path":"downloaded/TwilioWorkflowServlet.java","method_name":"newScriptEngine","content":"/**\n     * Determine based on Cookies if this request is new or is already in process.\n     */\nScriptEngine newScriptEngine() {\n        ScriptEngine engine = scriptEngineManager.getEngineByName(\"python\");\n        Preconditions.checkNotNull(\"Unable to create python script engine.\");\n        return engine;\n    }"} {"path":"downloaded/TwilioWorkflowServlet.java","method_name":"buildRequestTuple","content":"/**\n     * Determine based on Cookies if this request is new or is already in process.\n     */\nPyDictionary buildRequestTuple(HttpServletRequest req) {\n        PyDictionary ret = new PyDictionary();\n        ret.putAll(req.getParameterMap());\n        return ret;\n    }"} {"path":"downloaded/TimeUtils.java","method_name":"isMethod","content":"/**\n     * isComment\n     */\npublic static CharSequence isMethod(final Date isParameter) {\n        long isVariable = isNameExpr.isMethod();\n        if (isNameExpr.isMethod(isNameExpr - isNameExpr.isMethod()) > isNameExpr.isFieldAccessExpr.isMethod(isIntegerConstant)) {\n            return isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr, isNameExpr, isNameExpr | isNameExpr | isNameExpr);\n        } else {\n            return \"isStringConstant\";\n        }\n    }"} {"path":"downloaded/DomainObject.java","method_name":"getSystemId","content":"/**\n   * Enables setter chaining.\n   * \n   * <p>Enables the ability so chain setters:\n   * <pre>new Thing().setThis(x).setThat(y).setAnother(z);</pre>\n   * \n   * @return a reference to the domain object.\n   */\npublic String getSystemId() { return getAsString( SYSID ); }"} {"path":"downloaded/DomainObject.java","method_name":"setSystemId","content":"/**\n   * Enables setter chaining.\n   * \n   * <p>Enables the ability so chain setters:\n   * <pre>new Thing().setThis(x).setThat(y).setAnother(z);</pre>\n   * \n   * @return a reference to the domain object.\n   */\npublic T setSystemId( String value ) { set( SYSID, value ); return getThis(); }"} {"path":"downloaded/DomainObject.java","method_name":"getCreatedBy","content":"/**\n   * Enables setter chaining.\n   * \n   * <p>Enables the ability so chain setters:\n   * <pre>new Thing().setThis(x).setThat(y).setAnother(z);</pre>\n   * \n   * @return a reference to the domain object.\n   */\npublic String getCreatedBy() { return getAsString( CREATED_BY ); }"} {"path":"downloaded/DomainObject.java","method_name":"setCreatedBy","content":"/**\n   * Enables setter chaining.\n   * \n   * <p>Enables the ability so chain setters:\n   * <pre>new Thing().setThis(x).setThat(y).setAnother(z);</pre>\n   * \n   * @return a reference to the domain object.\n   */\npublic T setCreatedBy( String value ) { set( CREATED_BY, value ); return getThis(); }"} {"path":"downloaded/DomainObject.java","method_name":"getCreated","content":"/**\n   * Enables setter chaining.\n   * \n   * <p>Enables the ability so chain setters:\n   * <pre>new Thing().setThis(x).setThat(y).setAnother(z);</pre>\n   * \n   * @return a reference to the domain object.\n   */\npublic String getCreated() { return getAsString( CREATED ); }"} {"path":"downloaded/DomainObject.java","method_name":"setCreated","content":"/**\n   * Enables setter chaining.\n   * \n   * <p>Enables the ability so chain setters:\n   * <pre>new Thing().setThis(x).setThat(y).setAnother(z);</pre>\n   * \n   * @return a reference to the domain object.\n   */\npublic T setCreated( String value ) { set( CREATED, value ); return getThis(); }"} {"path":"downloaded/DomainObject.java","method_name":"getModifiedBy","content":"/**\n   * Enables setter chaining.\n   * \n   * <p>Enables the ability so chain setters:\n   * <pre>new Thing().setThis(x).setThat(y).setAnother(z);</pre>\n   * \n   * @return a reference to the domain object.\n   */\npublic String getModifiedBy() { return getAsString( MODIFIED_BY ); }"} {"path":"downloaded/DomainObject.java","method_name":"setModifiedBy","content":"/**\n   * Enables setter chaining.\n   * \n   * <p>Enables the ability so chain setters:\n   * <pre>new Thing().setThis(x).setThat(y).setAnother(z);</pre>\n   * \n   * @return a reference to the domain object.\n   */\npublic T setModifiedBy( String value ) { set( MODIFIED_BY, value ); return getThis(); }"} {"path":"downloaded/DomainObject.java","method_name":"getModified","content":"/**\n   * Enables setter chaining.\n   * \n   * <p>Enables the ability so chain setters:\n   * <pre>new Thing().setThis(x).setThat(y).setAnother(z);</pre>\n   * \n   * @return a reference to the domain object.\n   */\npublic String getModified() { return getAsString( MODIFIED ); }"} {"path":"downloaded/DomainObject.java","method_name":"setModified","content":"/**\n   * Enables setter chaining.\n   * \n   * <p>Enables the ability so chain setters:\n   * <pre>new Thing().setThis(x).setThat(y).setAnother(z);</pre>\n   * \n   * @return a reference to the domain object.\n   */\npublic T setModified( String value ) { set( MODIFIED, value ); return getThis(); }"} {"path":"downloaded/LMIS_UserGroupViewDO.java","method_name":"getUserName","content":"/**\n\t * @return the userName\n\t */\npublic String getUserName() {\n\t\treturn userName;\n\t}"} {"path":"downloaded/LMIS_UserGroupViewDO.java","method_name":"getGroupName","content":"/**\n\t * @param userName the userName to set\n\t */\npublic String getGroupName() {\n\t\treturn groupName;\n\t}"} {"path":"downloaded/TwitterService.java","method_name":"validatePostTweet","content":"/**\n     * Helper function to ckeck if the text is in vaild length\n     * check if lat/lon is within range\n     * @param tweet\n     */\nprivate void validatePostTweet(Tweet tweet) {\n        //check if the length exceeds 140 characters\n        if (tweet.getText().length() > 140) {\n            throw new IllegalArgumentException(\"Tweet is too long\");\n        }\n\n        //check if lon/lst is within range\n        Double lon = tweet.getCooridinates().getCoordinates().get(0);\n        Double lat = tweet.getCooridinates().getCoordinates().get(1);\n        if (lon > 180 || lon < -180 || lat > 90 || lat <-90) {\n            throw new IllegalArgumentException(\"Coordinates out of range\");\n        }\n\n        return;\n    }"} {"path":"downloaded/TwitterService.java","method_name":"validateId","content":"/**\n     * check if the tweet id is all digit\n     * @param id\n     */\nprivate void validateId(String id) {\n        if (!id.matches(\"[0-9]+\")) {\n            throw new IllegalArgumentException(\"Invaild Tweet Id\");\n        }\n        return;\n    }"} {"path":"downloaded/MenuManagement.java","method_name":"oid processarRequis","content":"\n\t/**\n\t * Processa uma requisição vinda da jsp.\n\t * \n\t * @param request\n\t * @param response\n\t * @throws ServletException\n\t * @throws IOException\n\n*/\n\tprivate void processarRequisicao(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t\n\t\tUser user = (User) request.getSession().getAttribute(\"user\");\n\t\t\n\t\tif(user == null) {\n\t\t\tString errorLogin = \"Entry your e-mail and password.\";\n\t\t\trequest.setAttribute(\"errorLogin\", errorLogin);\n\t\t\tgotoIndex(request, response);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tString option = request.getParameter(\"option\");\n\t\toption = option == null ? \"\" : option;\n\t\t\n\t\tswitch (option) {\n\t\tcase \"add_file\":\n\t\t\tgotoManagementAddNewFile(request, response);\n\t\t\tbreak;\n\t\tcase \"add_user\":\n\t\t\tgotoManagementAddNewUser(request, response);\n\t\t\tbreak;\n\t\tcase \"view_scheduled_task\":\n\t\t\tArrayList<Task> tasks = RunTasks.getInstance().getScheduledTask();\n\t\t\trequest.setAttribute(\"tasks\", tasks);\n\t\t\tgotoManagementViewScheduledTask(request, response);\n\t\t\tbreak;\n\t\tcase \"status\":\n\t\t\tArrayList<String> logManagement = util.Log.getInstance().getLogManagement();\n\t\t\tArrayList<String> logSystem = util.Log.getInstance().getLogSystem();\n\t\t\t\n\t\t\trequest.setAttribute(\"systemBoot\", util.Log.getInstance().getSystemBoot());\n\t\t\trequest.setAttribute(\"index\", util.Log.getInstance().getIndex());\n\t\t\trequest.setAttribute(\"dictionary\", util.Log.getInstance().getDictionary());\n\t\t\trequest.setAttribute(\"database\", util.Log.getInstance().getDatabase());\n\t\t\trequest.setAttribute(\"keyWordSearch\", util.Log.getInstance().getKeyWordEngine());\n\t\t\trequest.setAttribute(\"semanticSearch\", util.Log.getInstance().getSemanticEngine());\n\t\t\t\n\t\t\trequest.setAttribute(\"accessList\", util.Log.getInstance().getAccessList());\n\t\t\t\n\t\t\trequest.setAttribute(\"logManagement\", logManagement);\n\t\t\trequest.setAttribute(\"logSystem\", logSystem);\n\t\t\tgotoManagementStatus(request, response);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tgotoManagement(request, response);\n\t\t\tbreak;\n\t\t"} {"path":"downloaded/EventosUtils.java","method_name":">> conv","content":"/**\n     * Convierte una colección de ventos en un Map cuya clave es la fecha de un día, y que contiene\n     * una colección de eventos\n     * @param eventos List<EventoVO>\n     * @return HashMap<Calendar,List<EventoVO>>\n    \n   public static HashMap<Calendar,List<EventoVO>> convert(List<EventoVO> eventos) {\n        HashMap<Calendar,List<EventoVO>> map = new HashMap<Calendar,List<EventoVO>>();\n\n        try {\n\n            for(int i=0;eventos!=null && i<eventos.size();i++) {\n                Calendar fecha = DateOperations.getCalendar(eventos.get(i).getFechaDesde());\n                if(map.containsKey(fecha)) {\n                   map.get(fecha).add(eventos.get(i));\n                } else {\n                    List<EventoVO> aux = new ArrayList<EventoVO>();\n                    aux.add(eventos.get(i));\n                    map.put(fecha,aux);\n                }\n\n            }//for\n\n        } catch(Exception e) {\n            LogCat.error(\"Error al convertir la colección de eventos en un map: \" + e.getMessage());\n        }\n        return map;\n "} {"path":"downloaded/StopDrawingBackgroundEvent.java","method_name":"getX","content":"/**\n     * Constructor\n     * @param time The time delay after which the last touch occurs\n     * @param y The y-coordinate of the last touch\n     * @param x The x-coordinate of the last touch\n     */\npublic float getX() {\n        return x;\n    }"} {"path":"downloaded/StopDrawingBackgroundEvent.java","method_name":"getY","content":"/**\n     * Constructor\n     * @param time The time delay after which the last touch occurs\n     * @param y The y-coordinate of the last touch\n     * @param x The x-coordinate of the last touch\n     */\npublic float getY() {\n        return y;\n    }"} {"path":"downloaded/StopDrawingBackgroundEvent.java","method_name":"getTime","content":"/**\n     * Constructor\n     * @param time The time delay after which the last touch occurs\n     * @param y The y-coordinate of the last touch\n     * @param x The x-coordinate of the last touch\n     */\npublic Long getTime() {\n        return time;\n    }"} {"path":"downloaded/ITextData.java","method_name":"GetID","content":"/**\n\t * This method allows one to get the ID value directly from the interface.\n\t * \n\t * The only difference between this code and any other data type's getID() code is the value of the \n\t * Class object being passed to the DataPacketIDFactory's makeID() method.    This has to be \n\t * specified here because this is the only place where the proper Class object is unequivocally known.\n\t * \n\t *\t@return The ID value associated with this data type.\n\t */\npublic static IDataPacketID GetID() {\n\t\treturn DataPacketIDFactory.Singleton.makeID(ITextData.class);   // DataPacketIDFactory.Singleton is an instance of an IDataPacketIDFactory\n\t}"} {"path":"downloaded/ITextData.java","method_name":"getID","content":"/**\n\t * This method MUST be defined at this INTERFACE level so that any concrete implementation \n\t * will automatically have the ability to generate its proper host ID value.\n\t * Since an instance method can call a static method but not the other way around, simply delegate to \n\t * the static method from here. \n\t * \n\t * NEVER override this method, as it defines an invariant for the data type.   Unfortunately, Java does not allow \n\t * one to define an invariant instance method at the interface level, i.e. this method cannot be made final.\n\t */\n@Override\n\tpublic default IDataPacketID getID() {\n\t\treturn ITextData.GetID();\n\t}"} {"path":"downloaded/ITextData.java","method_name":"make","content":"/**\n\t * make method that takes in a string and return a ITextData\n\t * @param text input text to make\n\t * @return ITextData\n\t */\nstatic ITextData make(final String text) {\n\t\treturn new ITextData() {\n\n\t\t\t/**\n\t\t\t * Version number for serialization.\n\t\t\t */\n\t\t\tprivate static final long serialVersionUID = 2116930322237925265L;\n\n\t\t\t@Override\n\t\t\tpublic String toString() {\n\t\t\t\treturn text;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String getText() {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\treturn text;\n\t\t\t}\t\t\t\n\t\t};\n\t}"} {"path":"downloaded/ITextData.java","method_name":"toString","content":"/**\n\t\t\t * Version number for serialization.\n\t\t\t */\n@Override\n\t\t\tpublic String toString() {\n\t\t\t\treturn text;\n\t\t\t}"} {"path":"downloaded/ITextData.java","method_name":"getText","content":"/**\n\t\t\t * Version number for serialization.\n\t\t\t */\n@Override\n\t\t\tpublic String getText() {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\treturn text;\n\t\t\t}"} {"path":"downloaded/Panda.java","method_name":"constructGridResource","content":"/**\n     * Constructs the grid_resource entry for the job. The grid resource is a tuple consisting of\n     * three fields.\n     *\n     * <p>A SSH grid resource specification is of the form:\n     *\n     * <p>grid_resource = batch <batch-system> remote_username@batch-headnode-hostname\n     *\n     * <p>The <batch-system> is the name of the batch system that we are submitting to. Normal\n     * values are pbs, lsf, and condor. It is picked up from the scheduler attribute for the grid\n     * gateway entry in the site catalog entry for the site\n     *\n     * @param job the job\n     * @return the grid_resource entry\n     * @throws CondorStyleException in case of any error occuring code generation.\n     */\nprotected String constructGridResource(Job job) throws CondorStyleException {\n        StringBuilder gridResource = new StringBuilder();\n\n        SiteCatalogEntry s = mSiteStore.lookup(job.getSiteHandle());\n        GridGateway g = s.selectGridGateway(job.getGridGatewayJobType());\n        String contact = (g == null) ? null : g.getContact();\n\n        // first field is the type of grid gateway\n        gridResource.append(g.getType()).append(\" \");\n\n        if (contact == null) {\n            StringBuilder error = new StringBuilder();\n            error.append(\"Grid Gateway not specified for site in site catalog  \")\n                    .append(job.getSiteHandle());\n            throw new CondorStyleException(error.toString());\n        }\n\n        // the job should have a scheduler specified\n        GridGateway.SCHEDULER_TYPE scheduler = g.getScheduler();\n        if (scheduler.equals(GridGateway.SCHEDULER_TYPE.fork)\n                || scheduler.equals(GridGateway.SCHEDULER_TYPE.unknown)) {\n            StringBuilder error = new StringBuilder();\n            error.append(\"Please specify a valid scheduler with the grid gateway for site \")\n                    .append(job.getSiteHandle())\n                    .append(\" and job type \")\n                    .append(job.getGridGatewayJobType());\n            throw new RuntimeException(error.toString());\n        }\n\n        // instead of batch system we hardcode it to panda\n        // currently panda gahp does not require to specify\n        // the scheduler on the compute site\n        gridResource.append(STYLE_NAME.toLowerCase()).append(\" \");\n        gridResource.append(g.getContact()).append(\" \");\n\n        return gridResource.toString();\n    }"} {"path":"downloaded/WordCounter.java","method_name":"getWordCount","content":"/** Create a WordCounter from a passed string */\nint getWordCount() {\n            return entrySet.size();\n            }"} {"path":"downloaded/WordCounter.java","method_name":"getNextPair","content":"/** Create a WordCounter from a passed string */\nIterator<Map.Entry<String, Integer>> getNextPair(){\n            return entrySet.iterator();\n        }"} {"path":"downloaded/WordCounter.java","method_name":"getNextMap","content":"/** Create a WordCounter from a passed string */\nMap<String, Integer> getNextMap(){\n            Iterator iterator = entrySet.iterator();\n            if (iterator.hasNext()){\n                return (Map<String, Integer>) iterator;\n            }\n            else return null;\n        }"} {"path":"downloaded/BookAuthorDao.java","method_name":"d };\n  ","content":"/**\n     * 新增\n     * \n     * @param author\n     * @throws Exception\n   \nras = { authorId };\n        DB.getInstance().executeBySQLCode(sqlCode, paras);\n    }\n\n    public boolean isExist(BookAuthorVO author) throws Exception\n    {\n        int count = 0;\n        String sqlCode = \"com.aspire.dotcard.baseread.dao.BookAuthorDao.isExist\";\n\n        ResultSet rs = null;\n        try\n        {\n            Object[] paras = { author.getAuthorId() };\n            rs = DB.getInstance().queryBySQLCode(sqlCode, paras);\n\n            while (rs.next())\n            {\n                count = rs.getInt(\"count\");\n            }\n        }\n        catch (SQLException e)\n        {\n            log.error(\"数据库操作失败\");\n            throw new DAOException(\"数据库操作失败，\" + e);\n"} {"path":"downloaded/BookAuthorDao.java","method_name":"    * 根","content":"/**\n     * 新增\n     * \n     * @param author\n     * @throws Exception\n   \nue;\n    }\n\n    /**\n     * 根据作者id查询作者信息\n     * \n     * @param author\n     * @return\n     * @throws Exception\n     */\n    public BookAuthorVO getAuthor(BookAuthorVO author) throws Exception\n    {\n        String sqlCode = \"com.aspire.dotcard.baseread.dao.BookAuthorDao.getAuthor\";\n        ResultSet rs = null;\n        BookAuthorVO au = null;\n        try\n        {\n            Object[] paras = { author.getAuthorId() };\n            rs = DB.getInstance().queryBySQLCode(sqlCode, paras);\n\n            while (rs.next())\n            {\n                au = new BookAuthorVO();\n                au.setAuthorName(rs.getString(\"authorname\"));\n                au.setAuthorId(rs.getString(\"authorid\"));\n                au.setDescription(rs.getString(\"authordesc\"));\n                au.setNameLetter(rs.getString(\"nameLetter\"));\n                au.setIsOriginal(rs.getString(\"isOriginal\"));\n                au.setIsPublish(rs.getString(\"isPublish\"));\n                au.setAuthorPic(rs.getString(\"authorPic\"));\n            }\n        }\n        catch (SQLException e)\n        {\n            log.error(\"数据库操作失�"} {"path":"downloaded/BookAuthorDao.java","method_name":"eption(\"数据","content":"/**\n     * 新增\n     * \n     * @param author\n     * @throws Exception\n   \n           throw new DAOException(\"数据库操作失败，\" + e);\n\n        }\n        finally\n        {\n            DB.close(rs);\n        }\n        return au;\n    }\n\n    public Map<String, String> queryAllAuthor() throws Exception\n    {\n        String sqlCode = \"com.aspire.dotcard.baseread.dao.BookAuthorDao.queryAllAuthor\";\n        Map<String, String> m = null;\n        ResultSet rs = null;\n        try\n        {\n\n            rs = DB.getInstance().queryBySQLCode(sqlCode, null);\n            m = new HashMap<String, String>();\n            while (rs.next())\n            {\n                m.put(rs.getString(\"authorid\"), rs.getString(\"authorid\"));\n            }\n        }\n        catch (SQLException e)\n        {\n            "} {"path":"downloaded/HUDLabelComponent.java","method_name":"getLabel","content":"/**\n     * @return the label\n     */\npublic String getLabel() {\n        return label;\n    }"} {"path":"downloaded/DoritualinfoPage.java","method_name":"id\")\n","content":"/**手机\n\n\t *方法: 取得java.lang.String\n\t *@return: java.lang.String  id\n\t */\n\t\n\t@Id\n\t@GeneratedValue(generator = \"paymentableGenerator\")\n\t@GenericGenerator(name = \"paymentableGenerator\", strategy = \"uuid\")\n\t@Column(name =\"ID\",null"} {"path":"downloaded/DoritualinfoPage.java","method_name":"ng.Strin","content":"/**手机\ns.id = id;\n\t}\n\t/**\n\t *方法: 取得java.lang.String\n\t *@return: java.lang.String  姓名\n\t */\n\t@Column(nam"} {"path":"downloaded/DoritualinfoPage.java","method_name":"eturn: java.lan","content":"/**手机\ng rname){\n\t\tthis.rname = rname;\n\t}\n\t/**\n\t *方法: 取得java.lang.String\n\t *@return: java.lang.String  手机号码1\n\t */\n\t@Col"} {"path":"downloaded/DoritualinfoPage.java","method_name":"��: 取得java.","content":"/**手机\n.lang.String phonenumber1){\n\t\tthis.phonenumber1 = phonenumber1;\n\t}\n\t/**\n\t *方法: 取得java.lang.String\n\t *@return: java.lang."} {"path":"downloaded/DoritualinfoPage.java","method_name":"umber2 = p","content":"/**手机\n\tpublic void setPhonenumber2(java.lang.String phonenumber2){\n\t\tthis.phonenumber2 = phonenumber2;\n\t}\n\t/**\n\t *方�"} {"path":"downloaded/ArticleRestController.java","method_name":"ticle f","content":"\n\n    /**\n     * @param id\n     * @return\n \n/\n    @GetMapping(value = \"/article/{id}\")\n    @ResponseStatus(HttpStatus.OK)\n    public Article findOne(@PathVariable Long id) {\n        return articleRepository.findOne(id);"} {"path":"downloaded/ArticleRestController.java","method_name":"ntity article","content":"\n\n    /**\n     * @param articleDto\n     * @return\n \n/\n    @PostMapping(value = \"/article\")\n    public ResponseEntity articleCreate(@RequestBody @Valid ArticleDto.Create articleDto,\n                                        @CurrentUser Account account) {\n        Article article = modelMapper.map(articleDto, Article.class);\n        article.setWriter(account);\n        Long id = articleService.create(article);\n        URI createdUrl = linkTo(ArticleController.class).slash(id).toUri();\n        return ResponseEntity.created(createdUrl).body(article);"} {"path":"downloaded/ArticleRestController.java","method_name":"ntity article","content":"\n\n    /**\n     * @param articleDto\n     * @param id\n     * @return\n \n/\n    @PutMapping(value = \"/article/{id}\")\n    public ResponseEntity articleUpdate(@RequestBody @Valid ArticleDto.Create articleDto,\n                                        @PathVariable Long id,\n                                        @CurrentUser Account account) {\n        Article existingArticle = articleRepository.findOne(id);\n        this.modelMapper.map(articleDto, existingArticle);\n        // Article newarticle = modelMapper.map(articleDto, Article.class);\n\n        boolean hasAdminRole = false;\n        for (AccountRole role : account.getRoles()) {\n            if (role == AccountRole.ADMIN) {\n                hasAdminRole = true;\n            }\n        }\n\n        // ADMIN 권한은 수정 가능.\n        if (!hasAdminRole) {\n            if (!account.getEmail().equals(existingArticle.getWriter())) {\n                throw new ValidCustomException(\"본인이 작성한 글만 수정이 가능합니다.\", \"writer\");\n            }\n        }\n\n        articleService.update(existingArticle);\n        URI createdUrl = linkTo(ArticleController.class).slash(id).toUri();\n        retur"} {"path":"downloaded/ArticleRestController.java","method_name":"g(valu","content":"    /**\n     * @param\n    * @return\n     */\n    // 더 좋은 방법이 있는지 찾아볼것.\n    @DeleteMapping(value = \"/article/{id}\")\n    @ResponseStatus(HttpStatus.OK)\n    public Long delete(@PathVariable Long id, @CurrentUser Account account) {\n        Article existingArticle = articleRepository.findOne(id);\n        boolean hasAdminRole = false;\n        for (AccountRole role : account.getRoles()) {\n            if (role == AccountRole.ADMIN) {\n                hasAdminRole = true;\n            }\n        }\n\n        // ADMIN 권한은 삭제 가능.\n        if (!hasAdminRole) {\n            if (!account.getEmail().equals(existingArticle.getWriter())) {\n                throw new ValidCustomException(\"본인이 작성한 글만 "} {"path":"downloaded/Search.java","method_name":"     * @retu","content":"/**\n     * 二分查找\n     * @param a 查找数组\n     * @param value 查找值\n     * @param start 起始位置\n     * @param e\n�束位置\n     * @return\n     */\n    public int binarySearch(int[] a,int value,int start,int end){\n        if(start == end){\n            return -1;\n        }\n        int mid = (start + end) / 2;\n        if(a[mid] == value){\n            return mid;\n        }\n        else if(a[mid] > value){\n            return binarySearch(a,value,start,mid);\n        }\n        else{\n            return binarySearch"} {"path":"downloaded/ClassScanner.java","method_name":"scanSources","content":"/**\n     * Scan all source class files for annotations and process them.\n     */\npublic List<ClassDescription> scanSources()\n            throws SCRDescriptorFailureException, SCRDescriptorException {\n        final List<ClassDescription> result = new ArrayList<ClassDescription>();\n\n        for (final Source src : project.getSources()) {\n            if ( src.getFile().getName().equals(\"package-info.java\") ) {\n                log.debug(\"Skipping file \" + src.getClassName());\n                continue;\n            }\n            log.debug(\"Scanning class \" + src.getClassName());\n\n            try {\n                // load the class\n                final Class<?> annotatedClass = project.getClassLoader().loadClass(src.getClassName());\n\n                this.process(annotatedClass, src, result);\n            } catch ( final SCRDescriptorFailureException e ) {\n                throw e;\n            } catch ( final SCRDescriptorException e ) {\n                throw e;\n            } catch ( final ClassNotFoundException e ) {\n                log.warn(\"ClassNotFoundException: \" + e.getMessage());\n            } catch ( final NoClassDefFoundError e ) {\n                log.warn(\"NoClassDefFoundError: \" + e.getMessage());\n            } catch (final Throwable t) {\n                throw new SCRDescriptorException(\"Unable to load compiled class: \" + src.getClassName(), src.getFile().toString(), t);\n            }\n        }\n        return result;\n    }"} {"path":"downloaded/ClassScanner.java","method_name":"processClass","content":"/**\n     * Scan a single class.\n     */\nprivate ClassDescription processClass(final Class<?> annotatedClass, final String location)\n            throws SCRDescriptorFailureException, SCRDescriptorException {\n        log.debug(\"Processing \" + annotatedClass.getName());\n        try {\n            // get the class file for ASM\n            final String pathToClassFile = annotatedClass.getName().replace('.', '/') + \".class\";\n            final InputStream input = project.getClassLoader().getResourceAsStream(pathToClassFile);\n            final ClassReader classReader;\n            try {\n                classReader = new ClassReader(input);\n            } finally {\n                if ( input != null ) {\n                    input.close();\n                }\n            }\n            final ClassNode classNode = new ClassNode();\n            classReader.accept(classNode, SKIP_CODE | SKIP_DEBUG | SKIP_FRAMES);\n\n            // create descriptions\n            final List<ScannedAnnotation> annotations = extractAnnotation(classNode, annotatedClass);\n            if (annotations.size() > 0) {\n                // process annotations and create descriptions\n                final ClassDescription desc = new ClassDescription(annotatedClass, location);\n                aProcessor.process(new ScannedClass(annotations, annotatedClass), desc);\n\n                log.debug(\"Found descriptions \" + desc + \" in \" + annotatedClass.getName());\n                return desc;\n            }\n        } catch (final IllegalArgumentException ioe) {\n            throw new SCRDescriptorException(\"Unable to scan class files: \" + annotatedClass.getName() + \" (Class file format probably not supported by ASM ?)\", location, ioe);\n        } catch (final IOException ioe) {\n            throw new SCRDescriptorException(\"Unable to scan class files: \" + annotatedClass.getName(), location, ioe);\n        }\n        return null;\n    }"} {"path":"downloaded/ClassScanner.java","method_name":"extractAnnotation","content":"/**\n     * Extract annotations\n     */\nprivate final List<ScannedAnnotation> extractAnnotation(final ClassNode classNode, final Class<?> annotatedClass)\n            throws SCRDescriptorException {\n        final List<ScannedAnnotation> descriptions = new ArrayList<ScannedAnnotation>();\n        // first parse class annotations\n        @SuppressWarnings(\"unchecked\")\n        final List<AnnotationNode> annotations = getAllAnnotations(classNode.invisibleAnnotations, classNode.visibleAnnotations);\n        if (annotations != null) {\n            for (final AnnotationNode annotation : annotations) {\n                this.parseAnnotation(descriptions, annotation, annotatedClass);\n            }\n\n            // second parse method annotations\n            @SuppressWarnings(\"unchecked\")\n            final List<MethodNode> methods = classNode.methods;\n            if (methods != null) {\n                for (final MethodNode method : methods) {\n                    final String name = method.name;\n                    // check for constructor\n                    if ( !\"<init>\".equals(name) ) {\n                        @SuppressWarnings(\"unchecked\")\n                        final List<AnnotationNode> annos = getAllAnnotations(method.invisibleAnnotations, method.visibleAnnotations);\n                        if (annos != null) {\n                            final Type[] signature = Type.getArgumentTypes(method.desc);\n\n                            final Method[] allMethods = annotatedClass.getDeclaredMethods();\n                            Method found = null;\n                            for (final Method m : allMethods) {\n                                if (m.getName().equals(name)) {\n                                    if (m.getParameterTypes().length == 0 && (signature == null || signature.length == 0) ) {\n                                        found = m;\n                                    }\n                                    if (m.getParameterTypes().length > 0 && signature != null && m.getParameterTypes().length == signature.length) {\n                                        found = m;\n                                        for(int index = 0; index < m.getParameterTypes().length; index++ ) {\n                                            String parameterTypeName = m.getParameterTypes()[index].getName();\n                                            // Name of array parameters is returned with syntax [L<name>;, convert to <name>[]\n                                            Matcher matcher = ARRAY_PARAM_TYPE_NAME.matcher(parameterTypeName);\n                                            if (matcher.matches()) {\n                                                parameterTypeName = matcher.group(1) + \"[]\";\n                                            }\n                                            if (!parameterTypeName.equals(signature[index].getClassName()) &&\n                                                    !m.getParameterTypes()[index].getSimpleName().equals(signature[index].getClassName())) {\n                                                found = null;\n                                            }\n                                        }\n                                    }\n                                    // if method is found return it now, to avoid resetting 'found' to null if next method has same name but different parameters\n                                    if (found != null) {\n                                        break;\n                                    }\n                                }\n                            }\n                            if (found == null) {\n                                throw new SCRDescriptorException(\"Annotated method \" + name + \" not found.\",\n                                        annotatedClass.getName());\n                            }\n                            for (final AnnotationNode annotation : annos) {\n                                parseAnnotation(descriptions, annotation, found);\n                            }\n                        }\n                    }\n                }\n            }\n\n            // third parse field annotations\n            @SuppressWarnings(\"unchecked\")\n            final List<FieldNode> fields = classNode.fields;\n            if (fields != null) {\n                for (final FieldNode field : fields) {\n                    @SuppressWarnings(\"unchecked\")\n                    final List<AnnotationNode> annos = getAllAnnotations(field.invisibleAnnotations, field.visibleAnnotations);\n                    if (annos != null) {\n                        final String name = field.name;\n                        final Field[] allFields = annotatedClass.getDeclaredFields();\n                        Field found = null;\n                        for (final Field f : allFields) {\n                            if (f.getName().equals(name)) {\n                                found = f;\n                                break;\n                            }\n                        }\n                        if (found == null) {\n                            throw new SCRDescriptorException(\"Annotated field \" + name + \" not found.\",\n                                    annotatedClass.getName());\n                        }\n                        for (final AnnotationNode annotation : annos) {\n                            parseAnnotation(descriptions, annotation, found);\n                        }\n                    }\n                }\n            }\n        }\n        return descriptions;\n    }"} {"path":"downloaded/ClassScanner.java","method_name":"getAllAnnotations","content":"/**\n     * Method is used to get both invisible (e.g. RetentionPolicy.CLASS) and visible (e.g. RetentionPolicy.RUNTIME) annotations.\n     * Although it is recommended to use RetentionPolicy.CLASS for SCR annotations, it may make sense to declae them with another\n     * RetentionPolicy if the same annotation is used for other usecases which require runtime access as well.\n     * @param annotationLists List of invisible and visible annotations.\n     * @return List with all annotations from all lists, or null if none found\n     */\nprivate List<AnnotationNode> getAllAnnotations(List<AnnotationNode>... annotationLists) {\n        List<AnnotationNode> resultList = null;\n        for (List<AnnotationNode> annotationList : annotationLists) {\n            if (annotationList!=null && annotationList.size()>0) {\n                if (resultList==null) {\n                    resultList = new ArrayList<AnnotationNode>();\n                }\n                resultList.addAll(annotationList);\n            }\n        }\n        return resultList;\n    }"} {"path":"downloaded/ClassScanner.java","method_name":"convertToArray","content":"/**\n     * Method is used to get both invisible (e.g. RetentionPolicy.CLASS) and visible (e.g. RetentionPolicy.RUNTIME) annotations.\n     * Although it is recommended to use RetentionPolicy.CLASS for SCR annotations, it may make sense to declae them with another\n     * RetentionPolicy if the same annotation is used for other usecases which require runtime access as well.\n     * @param annotationLists List of invisible and visible annotations.\n     * @return List with all annotations from all lists, or null if none found\n     */\nprivate <T> T[] convertToArray(final List<?> values, final Class<T> type) {\n        @SuppressWarnings(\"unchecked\")\n        final T[] result = (T[]) Array.newInstance(type, values.size());\n        return values.toArray(result);\n    }"} {"path":"downloaded/ClassScanner.java","method_name":"getDescription","content":"/**\n     * Get a description for the class\n     */\npublic ClassDescription getDescription(final Class<?> clazz)\n            throws SCRDescriptorException, SCRDescriptorFailureException {\n        final String name = clazz.getName();\n        // we don't need to scan classes in the java. or javax. package namespace\n        if ( name.startsWith(\"java.\") || name.startsWith(\"javax.\") ) {\n            return null;\n        }\n        ClassDescription result = this.allDescriptions.get(name);\n        if ( result == null ) {\n            // use scanner first\n            result = this.processClass(clazz, GENERATED);\n\n            if ( result == null ) {\n                // now check loaded dependencies\n                result = this.getComponentDescriptors().get(name);\n            }\n\n            // not found, create dummy\n            if ( result == null ) {\n                result = new ClassDescription(clazz, GENERATED);\n            }\n\n            // and cache\n            allDescriptions.put(name, result);\n        }\n        return result.clone();\n    }"} {"path":"downloaded/ClassScanner.java","method_name":"getComponentDescriptors","content":"/**\n     * Returns a map of component descriptors which may be extended by the java\n     * sources.\n     * <p>\n     * This method calls the {@link #getDependencies()} method and checks for\n     * any Service-Component descriptors in the returned files.\n     * <p>\n     * This method may be overwritten by extensions of this class.\n     *\n     * @throws SCRDescriptorException May be thrown if an error occurs\n     *             gathering the component descriptors.\n     */\nprivate Map<String, ClassDescription> getComponentDescriptors()\n            throws SCRDescriptorException {\n        if ( loadedDependencies == null ) {\n            loadedDependencies = new HashMap<String, ClassDescription>();\n\n            final Collection<File> dependencies = this.project.getDependencies();\n            for ( final File artifact : dependencies ) {\n                try {\n                    this.log.debug( \"Trying to get scrinfo from artifact \" + artifact );\n                    // First try to read the private scr info file from previous scr generator versions\n                    InputStream scrInfoFile = null;\n                    try {\n                        scrInfoFile = this.getFile( artifact, ABSTRACT_DESCRIPTOR_ARCHIV_PATH );\n                        if ( scrInfoFile != null ) {\n                            this.readServiceComponentDescriptor( scrInfoFile, artifact.toString() + ':' + ABSTRACT_DESCRIPTOR_ARCHIV_PATH);\n                            continue;\n                        }\n                        this.log.debug( \"Artifact has no scrinfo file (it's optional): \" + artifact );\n                    } catch ( final IOException ioe ) {\n                        throw new SCRDescriptorException( \"Unable to get scrinfo from artifact\", artifact.toString(),\n                                ioe );\n                    } finally {\n                        if ( scrInfoFile != null ) {\n                            try { scrInfoFile.close(); } catch ( final IOException ignore ) {}\n                        }\n                    }\n\n                    this.log.debug( \"Trying to get manifest from artifact \" + artifact );\n                    final Manifest manifest = this.getManifest( artifact );\n                    if ( manifest != null ) {\n                        // read Service-Component entry\n                        if ( manifest.getMainAttributes().getValue( SERVICE_COMPONENT ) != null ) {\n                            final String serviceComponent = manifest.getMainAttributes().getValue(SERVICE_COMPONENT );\n                            this.log.debug( \"Found Service-Component: \" + serviceComponent + \" in artifact \" + artifact );\n                            final StringTokenizer st = new StringTokenizer( serviceComponent, \",\" );\n                            while ( st.hasMoreTokens() ) {\n                                final String entry = st.nextToken().trim();\n                                if ( entry.length() > 0 ) {\n                                    this.readServiceComponentDescriptor( artifact, entry );\n                                }\n                            }\n                        } else {\n                            this.log.debug( \"Artifact has no service component entry in manifest \" + artifact );\n                        }\n                    } else {\n                        this.log.debug( \"Unable to get manifest from artifact \" + artifact );\n                    }\n                } catch ( IOException ioe ) {\n                    throw new SCRDescriptorException( \"Unable to get manifest from artifact\", artifact.toString(),\n                            ioe );\n                }\n\n            }\n        }\n        return this.loadedDependencies;\n    }"} {"path":"downloaded/ClassScanner.java","method_name":"getManifest","content":"/**\n     * Get the manifest from the artifact.\n     * The artifact can either be a jar or a directory.\n     */\nprivate Manifest getManifest( final File artifact ) throws IOException {\n        if ( artifact.isDirectory() ) {\n            // this is maybe a classes directory, try to read manifest file directly\n            final File dir = new File(artifact, \"META-INF\");\n            if ( !dir.exists() || !dir.isDirectory() ) {\n                return null;\n            }\n            final File mf = new File(dir, \"MANIFEST.MF\");\n            if ( !mf.exists() || !mf.isFile() ) {\n                return null;\n            }\n            final InputStream is = new FileInputStream(mf);\n            try {\n                return new Manifest(is);\n            } finally {\n                try { is.close(); } catch (final IOException ignore) { }\n            }\n        }\n        JarFile file = null;\n        try {\n            file = new JarFile( artifact );\n            return file.getManifest();\n        } finally {\n            if ( file != null ) {\n                try { file.close(); } catch ( final IOException ignore ) {}\n            }\n        }\n    }"} {"path":"downloaded/ClassScanner.java","method_name":"getFile","content":"/**\n     * Get the manifest from the artifact.\n     * The artifact can either be a jar or a directory.\n     */\nprivate InputStream getFile( final File artifactFile, final String path ) throws IOException {\n        if ( artifactFile.isDirectory() ) {\n            final String filePath = path.replace('/', File.separatorChar).replace('\\\\', File.separatorChar);\n            final File file = new File(artifactFile, filePath);\n            if ( file.exists() && file.isFile() ) {\n                return new FileInputStream(file);\n            }\n            return null;\n        }\n        JarFile file = null;\n        try {\n            file = new JarFile( artifactFile );\n            final JarEntry entry = file.getJarEntry( path );\n            if ( entry != null ) {\n                final InputStream stream = new ArtifactFileInputStream( file, entry );\n                file = null; // prevent file from being closed now\n                return stream;\n            }\n            return null;\n        } finally {\n            if ( file != null ) {\n                try { file.close(); } catch ( final IOException ignore ) {}\n            }\n        }\n    }"} {"path":"downloaded/IMAPSync.java","method_name":"getSessionProperties","content":"/**\n     * Do IMAP PROXYAUTH to log in as an administrative user and then switch to\n     * the correct user.\n     *\n     * @param hostname Server\n     * @param adminusername Administrative login.\n     * @param adminpassword Administrative password.\n     * @param username User to PROXYAUTH to (i.e. the user to migrate)\n     * @param ssl Use IMAPS?\n     */\nprotected Properties getSessionProperties()\n    {\n      Properties p = new Properties();\n      if (doProxy) {\n        p.setProperty(\"mail.\" + getStoreType() + \".auth.login.disable\", \"true\");\n        p.setProperty(\"mail.\" + getStoreType() + \".auth.plain.disable\", \"true\");\n        p.setProperty(\"mail.\" + getStoreType() + \".proxyauth.user\", proxyusername);\n      }\n      p.setProperty(\"mail.\" + getStoreType() + \".connectiontimeout\", \"45000\");\n      p.setProperty(\"mail.\" + getStoreType() + \".timeout\", \"45000\");\n      return p;\n    }"} {"path":"downloaded/IMAPSync.java","method_name":"getStoreType","content":"/**\n     * Do IMAP PROXYAUTH to log in as an administrative user and then switch to\n     * the correct user.\n     *\n     * @param hostname Server\n     * @param adminusername Administrative login.\n     * @param adminpassword Administrative password.\n     * @param username User to PROXYAUTH to (i.e. the user to migrate)\n     * @param ssl Use IMAPS?\n     */\nprotected String getStoreType()\n    {\n      if (ssl)\n        return \"imaps\";\n      else\n        return \"imap\";\n    }"} {"path":"downloaded/IMAPSync.java","method_name":"connect","content":"/**\n     * Do IMAP PROXYAUTH to log in as an administrative user and then switch to\n     * the correct user.\n     *\n     * @param hostname Server\n     * @param adminusername Administrative login.\n     * @param adminpassword Administrative password.\n     * @param username User to PROXYAUTH to (i.e. the user to migrate)\n     * @param ssl Use IMAPS?\n     */\nprotected IMAPStore connect()\n    {\n      try {\n        Session session = Session.getInstance(getSessionProperties());\n        IMAPStore imap = (IMAPStore) session.getStore(getStoreType());\n        imap.connect(hostname, username, password);\n        return imap;\n      } catch (MessagingException ex) {\n        throw new RuntimeException(\"Could not connect to IMAP Server: \" + ex.getMessage(), ex);\n      }\n    }"} {"path":"downloaded/Bargain.java","method_name":"getId","content":"/**  */\npublic Long getId() {\n\t\treturn this.id;\n\t}"} {"path":"downloaded/Bargain.java","method_name":"getAddTime","content":"/**  */\npublic Date getAddTime() {\n\t\treturn this.addTime;\n\t}"} {"path":"downloaded/Bargain.java","method_name":"getDeleteStatus","content":"/**  */\npublic Boolean getDeleteStatus() {\n\t\treturn this.deleteStatus;\n\t}"} {"path":"downloaded/Bargain.java","method_name":"getBargain_time","content":"/**  */\npublic Date getBargain_time() {\n\t\treturn this.bargain_time;\n\t}"} {"path":"downloaded/Bargain.java","method_name":"getMaximum","content":"/**  */\npublic Integer getMaximum() {\n\t\treturn this.maximum;\n\t}"} {"path":"downloaded/Bargain.java","method_name":"getRebate","content":"/**  */\npublic BigDecimal getRebate() {\n\t\treturn this.rebate;\n\t}"} {"path":"downloaded/Bargain.java","method_name":"getState","content":"/**  */\npublic String getState() {\n\t\treturn this.state;\n\t}"} {"path":"downloaded/AbstractShape.java","method_name":"loadShader","content":"/**\n     * Utility method for compiling a OpenGL shader.\n     * <p/>\n     * <p><strong>Note:</strong> When developing shaders, use the checkGlError()\n     * method to debug shader coding errors.</p>\n     *\n     * @param type       - Vertex or fragment shader type.\n     * @param shaderCode - String containing the shader code.\n     * @return - Returns an id for the shader.\n     */\npublic static int loadShader(int type, String shaderCode) {\n\n        // create a vertex shader type (GLES20.GL_VERTEX_SHADER)\n        // or a fragment shader type (GLES20.GL_FRAGMENT_SHADER)\n        int shader = GLES20.glCreateShader(type);\n\n        // add the source code to the shader and compile it\n        GLES20.glShaderSource(shader, shaderCode);\n        GLES20.glCompileShader(shader);\n\n        // Get the compilation status.\n        final int[] compileStatus = new int[1];\n        GLES20.glGetShaderiv(shader, GLES20.GL_COMPILE_STATUS, compileStatus, 0);\n\n        // If the compilation failed, delete the shader.\n        if (compileStatus[0] == 0) {\n            GLES20.glDeleteShader(shader);\n            shader = 0;\n        }\n\n        if (shader == 0) {\n            throw new RuntimeException(\"Error creating shader.\");\n        }\n\n        return shader;\n    }"} {"path":"downloaded/MainInterfaceController.java","method_name":"getStart","content":"/**\n\t * As soon as fxml has been loaded then this method will be called\n\t * 1)-constructor,2)-FXMLLOADER,3)-initialize();\n\t */\npublic Button getStart() {\n\t\treturn start;\n\t}"} {"path":"downloaded/MainInterfaceController.java","method_name":"getStop","content":"/**\n\t * As soon as fxml has been loaded then this method will be called\n\t * 1)-constructor,2)-FXMLLOADER,3)-initialize();\n\t */\npublic Button getStop() {\n\t\treturn stop;\n\t}"} {"path":"downloaded/MainInterfaceController.java","method_name":"getRestart","content":"/**\n\t * As soon as fxml has been loaded then this method will be called\n\t * 1)-constructor,2)-FXMLLOADER,3)-initialize();\n\t */\npublic Button getRestart() {\n\t\treturn restart;\n\t}"} {"path":"downloaded/MainInterfaceController.java","method_name":"getStatusLabel","content":"/**\n\t * As soon as fxml has been loaded then this method will be called\n\t * 1)-constructor,2)-FXMLLOADER,3)-initialize();\n\t */\npublic Label getStatusLabel() {\n\t\treturn statusLabel;\n\t}"} {"path":"downloaded/MainInterfaceController.java","method_name":"getInfoArea","content":"/**\n\t * As soon as fxml has been loaded then this method will be called\n\t * 1)-constructor,2)-FXMLLOADER,3)-initialize();\n\t */\npublic TextArea getInfoArea() {\n\t\treturn infoArea;\n\t}"} {"path":"downloaded/MainInterfaceController.java","method_name":"getSpeechCalculator","content":"/**\n\t * As soon as fxml has been loaded then this method will be called\n\t * 1)-constructor,2)-FXMLLOADER,3)-initialize();\n\t */\npublic SpeechCalculator getSpeechCalculator() {\n\t\treturn speechCalculator;\n\t}"} {"path":"downloaded/PhoneticTranscriber.java","method_name":"ing transc","content":"/**\n\t * \n\t * @param seperator - simbolu virkne, ar kuru atdalīt fonētiskos simbolus (null - neatdalīt)\n\t * @param converter - fonētisko simbolu konverteros (null - Aplhabetic)\n\n\n\t\n\tpublic String transcribe(String word) throws Exception\n\t{\n\t\tString result=null;\n\t\tString[] tokens;\n\t\ttry {\n\t\t\tresult=_exceptionTranscriptions.GetValue(word);\n\t\t\tif(result==null)\n\t\t\t{\n\t\t\t\tresult=_rulesTranscription.TranscribeAString(word);\n\t\t\t}\n\t\t\t\n\t\t\ttokens=result.split(\"_\");\n\t\t\t\n\t\t\tif(converter!=null)\n\t\t\t{\n\t\t\t\ttokens=converter.convert(tokens);\n\t\t\t}\n\t\t\t\n\t\t\tresult=ArrayHelper.implode(tokens, seperator);\n\t\t\t\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\t//e.printStackTrace();\n\t\t\tthrow e;\n\t\t}\n\t\treturn result"} {"path":"downloaded/PhoneticTranscriber.java","method_name":"ing transcribePh","content":"/**\n\t * \n\t * @param seperator - simbolu virkne, ar kuru atdalīt fonētiskos simbolus (null - neatdalīt)\n\t * @param converter - fonētisko simbolu konverteros (null - Aplhabetic)\n\n\n\t\n\tpublic String transcribePhrase(String phrase) throws Exception\n\t{\n\t\tif(!phrase.matches(\"^[a-zēūīāšģķļžčņ\\\\s]*$\"))\n\t\t{\n\t\t\tthrow new Exception(\"Unrecognized symbols in string!\");\n\t\t}\n\t\t\n\t\tString[] words=phrase.replaceAll(\"[\\\\s]+\", \" \").trim().split(\" \");\n\t\t\n\t\tStringBuilder result=new StringBuilder();\n\t\tboolean first=true;\n\t\tfor(String word : words)\n\t\t{\n\t\t\tif(first)\n\t\t\t{\n\t\t\t\tfirst=false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.append(\" . \");\n\t\t\t}\n\t\t\tresult.append(this.transcribe(word));\n\t\t}\n\t\t\n\t\treturn result"} {"path":"downloaded/InsertNode.java","method_name":"toString","content":"/**\n     * CASE 3: Add a node to the rear.(BEFORE TAIL)\n     * */\npublic String toString() {\n        String result = \"[]\";\n        if (length == 0) return result;\n        result = \"[\" + head.getNext().getData();\n        DoublyLinkedList temp = head.getNext().getNext();\n        while (temp != tail) {\n            result += \",\" + temp.getData();\n            temp = temp.getNext();\n        }\n        return result + \"]\";\n    }"} {"path":"downloaded/ZemantaEnhancementEngineTest.java","method_name":"wrapAsContentItem","content":"/**\n     * This key was generated to support testing only. Please do only use it\n     * for testing. For real usages of the engine you need to create your own\n     * key!\n     */\npublic static ContentItem wrapAsContentItem(final String text) {\n    \tString id = \"urn:org.apache.stanbol.enhancer:test:engines.zemanta:content-item-\"\n            + EnhancementEngineHelper.randomUUID().toString();\n    \treturn new InMemoryContentItem(id, text, \"text/plain\");\n    }"} {"path":"downloaded/ZemantaEnhancementEngineTest.java","method_name":"tesetBioText","content":"/**\n     * This key was generated to support testing only. Please do only use it\n     * for testing. For real usages of the engine you need to create your own\n     * key!\n     */\n@Test\n    public void tesetBioText() throws Exception {\n        ContentItem ci = wrapAsContentItem(BIO_DOMAIN_TEXT);\n        try {\n            zemantaEngine.computeEnhancements(ci);\n        } catch (EngineException e) {\n            if(e.getCause() != null && e.getCause() instanceof UnknownHostException){\n                log.warn(\"Zemanta Service not reachable -> offline? -> deactivate test\");\n                return;\n            }\n            throw e;\n        }\n        JenaSerializerProvider serializer = new JenaSerializerProvider();\n        serializer.serialize(System.out, ci.getMetadata(), TURTLE);\n        int textAnnoNum = checkAllTextAnnotations(ci.getMetadata(), BIO_DOMAIN_TEXT);\n        log.info(textAnnoNum + \" TextAnnotations found ...\");\n        int entityAnnoNum = checkAllEntityAnnotations(ci.getMetadata());\n        log.info(entityAnnoNum + \" EntityAnnotations found ...\");\n    }"} {"path":"downloaded/ZemantaEnhancementEngineTest.java","method_name":"checkAllEntityAnnotations","content":"/**\n     * This key was generated to support testing only. Please do only use it\n     * for testing. For real usages of the engine you need to create your own\n     * key!\n     */\nprivate int checkAllEntityAnnotations(MGraph g) {\n        Iterator<Triple> entityAnnotationIterator = g.filter(null,\n                RDF_TYPE, ENHANCER_ENTITYANNOTATION);\n        int entityAnnotationCount = 0;\n        while (entityAnnotationIterator.hasNext()) {\n            UriRef entityAnnotation = (UriRef) entityAnnotationIterator.next().getSubject();\n            // test if selected Text is added\n            checkEntityAnnotation(g, entityAnnotation);\n            entityAnnotationCount++;\n        }\n        return entityAnnotationCount;\n    }"} {"path":"downloaded/ZemantaEnhancementEngineTest.java","method_name":"checkAllTextAnnotations","content":"/**\n     * Checks if an entity annotation is valid.\n     */\nprivate int checkAllTextAnnotations(MGraph g, String content) {\n        Iterator<Triple> textAnnotationIterator = g.filter(null,\n                RDF_TYPE, ENHANCER_TEXTANNOTATION);\n        // test if a textAnnotation is present\n        assertTrue(textAnnotationIterator.hasNext());\n        int textAnnotationCount = 0;\n        while (textAnnotationIterator.hasNext()) {\n            UriRef textAnnotation = (UriRef) textAnnotationIterator.next().getSubject();\n            // test if selected Text is added\n            checkTextAnnotation(g, textAnnotation,content);\n            textAnnotationCount++;\n        }\n        return textAnnotationCount;\n    }"} {"path":"downloaded/IOUtils.java","method_name":"DocumentToInputStream","content":"/**\n     * Converts an org.w3c.dom.Document element to an java.io.InputStream.\n     * \n     * @param edoc\n     *            the org.w3c.dom.Document to be converted\n     * @return InputStream the InputStream value of the passed doument\n     */\npublic static InputStream DocumentToInputStream(Document edoc)\n            throws IOException {\n\n        // Create the input and output for use in the transformation\n        final org.w3c.dom.Document doc = edoc;\n        final PipedOutputStream pos = new PipedOutputStream();\n        PipedInputStream pis = new PipedInputStream();\n        pis.connect(pos);\n\n        (new Thread(new Runnable() {\n\n            public void run() {\n                // Use the Transformer.transform() method to save the Document\n                // to a StreamResult\n                try {\n                    TransformerFactory tFactory = TransformerFactory.newInstance();\n                    // Fortify Mod: prevent external entity injection\n                    tFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n                    Transformer transformer = tFactory.newTransformer();\n                    transformer.setOutputProperty(\"encoding\", \"UTF-8\");\n                    transformer.setOutputProperty(\"indent\", \"yes\");\n                    transformer.transform(new DOMSource(doc), new StreamResult(\n                            pos));\n                } catch (Exception e) {\n                    throw new RuntimeException(\n                            \"Error converting Document to InputStream.  \"\n                                    + e.getMessage());\n                } finally {\n                    try {\n                        pos.close();\n                    } catch (IOException e) {\n\n                    }\n                }\n            }\n        }, \"IOUtils.DocumentToInputStream(Document edoc)\")).start();\n\n        return pis;\n    }"} {"path":"downloaded/IOUtils.java","method_name":"inputStreamToString","content":"/**\n     * Reads the content of an input stream into a String value using the UTF-8\n     * charset.\n     * \n     * @param in\n     *            The InputStream from which the content is read.\n     * @return A String representing the content of the input stream; an empty\n     *         string is returned if an error occurs.\n     */\npublic static String inputStreamToString(InputStream in) {\n        StringBuffer buffer = new StringBuffer();\n        try {\n            BufferedReader br = new BufferedReader(new InputStreamReader(in,\n                    \"UTF-8\"), 1024);\n            String line;\n            while ((line = br.readLine()) != null) {\n                buffer.append(line);\n            }\n        } catch (IOException iox) {\n            LOGR.warning(iox.getMessage());\n        }\n        return buffer.toString();\n    }"} {"path":"downloaded/IOUtils.java","method_name":"inputStreamToBytes","content":"/**\n     * Converts an InputStream to a byte[]\n     * \n     */\npublic static byte[] inputStreamToBytes(InputStream in) {\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        try {\n            byte[] buffer = new byte[1024];\n            int len;\n            while ((len = in.read(buffer)) != -1) {\n                out.write(buffer, 0, len);\n            }\n        } catch (Exception e) {\n            System.out.println(\"Error converting InputStream to byte[]: \"\n                    + e.getMessage());\n        }\n        return out.toByteArray();\n    }"} {"path":"downloaded/IOUtils.java","method_name":"writeObjectToFile","content":"/**\n     * Writes a generic object to a file\n     */\npublic static boolean writeObjectToFile(Object obj, File f) {\n        try {\n            FileOutputStream fout = new FileOutputStream(f);\n            ObjectOutputStream oos = new ObjectOutputStream(fout);\n            oos.writeObject(obj);\n            oos.close();\n        } catch (Exception e) {\n            System.out.println(\"Error writing Object to file: \"\n                    + e.getMessage());\n            return false;\n        }\n        return true;\n    }"} {"path":"downloaded/IOUtils.java","method_name":"writeBytesToFile","content":"/**\n     * Writes a byte[] to a file\n     */\npublic static boolean writeBytesToFile(byte[] bytes, File f) {\n        try {\n            FileOutputStream fout = new FileOutputStream(f);\n            fout.write(bytes);\n            fout.close();\n        } catch (Exception e) {\n            System.out.println(\"Error writing byte[] to file: \"\n                    + e.getMessage());\n            return false;\n        }\n        return true;\n    }"} {"path":"downloaded/IOUtils.java","method_name":"readObjectFromFile","content":"/**\n     * Reads in a file that contains only an object\n     */\npublic static Object readObjectFromFile(File f) {\n        Object obj = null;\n        try {\n            FileInputStream fin = new FileInputStream(f);\n            ObjectInputStream ois = new ObjectInputStream(fin);\n            obj = ois.readObject();\n            ois.close();\n        } catch (Exception e) {\n            System.out.println(\"Error reading Object from file: \"\n                    + e.getMessage());\n            return null;\n        }\n        return obj;\n    }"} {"path":"downloaded/IOUtils.java","method_name":"readBytesFromFile","content":"/**\n     * Reads in a file as a byte[]\n     */\npublic static byte[] readBytesFromFile(File f) {\n        byte[] bytes = null;\n        try {\n            int filesize = (int) f.length();\n            bytes = new byte[filesize];\n            DataInputStream in = new DataInputStream(new FileInputStream(f));\n            in.readFully(bytes);\n            in.close();\n        } catch (Exception e) {\n            System.out.println(\"Error reading byte[] from file: \"\n                    + e.getMessage());\n            return null;\n        }\n        return bytes;\n    }"} {"path":"downloaded/IOUtils.java","method_name":"pollFile","content":"/**\n     * Polls a file periodically until it 1) exists or 2) the timeout is\n     * exceeded (returns null) Reads the file as a java Object\n     */\npublic static Object pollFile(File file, int timeout, int interval)\n            throws InterruptedException {\n        // Convert time from s to ms for Thread\n        int fullTimeout = Math.round(timeout * 1000);\n\n        // Split up the timeout to poll every x amount of time\n        int timeoutShard = Math.round(fullTimeout / interval);\n\n        // Poll until file exists, return if it exists\n        for (int i = 0; i < interval; i++) {\n            Thread.sleep(timeoutShard);\n            if (file.exists()) {\n                return readObjectFromFile(file);\n            }\n        }\n\n        // Return null if time is up and still no file\n        return null;\n    }"} {"path":"downloaded/IOUtils.java","method_name":"pollFile","content":"/**\n     * Polls a file periodically until it 1) exists or 2) the timeout is\n     * exceeded (returns null) Reads the file as a java Object\n     */\npublic static Object pollFile(File file, int timeout)\n            throws InterruptedException {\n        return pollFile(file, timeout, 25);\n    }"} {"path":"downloaded/InProcessCache.java","method_name":"getResource","content":"/**\n     * Method to get resource from cache. If resourcekey does not exist, returns null\n     * @param resourceKey\n     * @return\n     */\n@Override\n    public Object getResource(String resourceKey)\n    {\n        synchronized(InProcessCache.class) {\n            if(!hasResource(resourceKey)) {\n                return null;\n            }\n\n            WeakReference reference = (WeakReference)_cache.get(resourceKey);\n            return reference.get();\n        }\n    }"} {"path":"downloaded/InProcessCache.java","method_name":"hasResource","content":"/**\n     * Method to check if the resource is in cache, and it's\n     * not garbage collected\n     * @param resourceKey\n     * @return\n     */\n@Override\n    public boolean hasResource(String resourceKey)\n    {\n        synchronized(InProcessCache.class) {\n            WeakReference reference = (WeakReference)_cache.get(resourceKey);\n            //check if the reference is not null\n            if(reference != null){\n                    // if the reference is not null, check if the object was not\n                    // garbage collected. If it was, remove the reference from the cache,\n                    // otherwise, return true\n                    if(reference.get() != null) return true;\n                    else _cache.remove(resourceKey);\n            }\n\n            // The reference is not in cache\n            return false;\n        }\n    }"} {"path":"downloaded/NewTotoriWizard.java","method_name":"performFinish","content":"/**\n\t * This method is called when 'Finish' button is pressed in\n\t * the wizard. We will create an operation and run it\n\t * using wizard as execution context.\n\t */\npublic boolean performFinish() {\n\t\t   try\n\t\t   {\n\t\t      WorkspaceModifyOperation op = new WorkspaceModifyOperation() {\n\t\t         protected void execute(IProgressMonitor monitor)\n\t\t         {\n\t\t            createProject(monitor != null ?\n\t\t                          monitor : new NullProgressMonitor());\n\t\t         }\n\t\t      };\n\t\t      getContainer().run(false,true,op);\n\t\t   }\n\t\t   catch(InvocationTargetException x)\n\t\t   {\n\t\t      reportError(x);\n\t\t      return false;\n\t\t   }\n\t\t   catch(InterruptedException x)\n\t\t   {\n\t\t      reportError(x);\n\t\t      return false;\n\t\t   }\n\t\t   return true; \n\t}"} {"path":"downloaded/InspectProxyAccessSecretResponseBody.java","method_name":"build","content":"/**\n     * <p>Indicates whether the call was successful.</p>\n     */\npublic static InspectProxyAccessSecretResponseBody build(java.util.Map<String, ?> map) throws Exception {\n        InspectProxyAccessSecretResponseBody self = new InspectProxyAccessSecretResponseBody();\n        return TeaModel.build(map, self);\n    }"} {"path":"downloaded/InspectProxyAccessSecretResponseBody.java","method_name":"setAccessSecret","content":"/**\n     * <p>Indicates whether the call was successful.</p>\n     */\npublic InspectProxyAccessSecretResponseBody setAccessSecret(String accessSecret) {\n        this.accessSecret = accessSecret;\n        return this;\n    }"} {"path":"downloaded/InspectProxyAccessSecretResponseBody.java","method_name":"getAccessSecret","content":"/**\n     * <p>Indicates whether the call was successful.</p>\n     */\npublic String getAccessSecret() {\n        return this.accessSecret;\n    }"} {"path":"downloaded/InspectProxyAccessSecretResponseBody.java","method_name":"setErrorCode","content":"/**\n     * <p>Indicates whether the call was successful.</p>\n     */\npublic InspectProxyAccessSecretResponseBody setErrorCode(String errorCode) {\n        this.errorCode = errorCode;\n        return this;\n    }"} {"path":"downloaded/InspectProxyAccessSecretResponseBody.java","method_name":"getErrorCode","content":"/**\n     * <p>Indicates whether the call was successful.</p>\n     */\npublic String getErrorCode() {\n        return this.errorCode;\n    }"} {"path":"downloaded/InspectProxyAccessSecretResponseBody.java","method_name":"setErrorMessage","content":"/**\n     * <p>Indicates whether the call was successful.</p>\n     */\npublic InspectProxyAccessSecretResponseBody setErrorMessage(String errorMessage) {\n        this.errorMessage = errorMessage;\n        return this;\n    }"} {"path":"downloaded/InspectProxyAccessSecretResponseBody.java","method_name":"getErrorMessage","content":"/**\n     * <p>Indicates whether the call was successful.</p>\n     */\npublic String getErrorMessage() {\n        return this.errorMessage;\n    }"} {"path":"downloaded/InspectProxyAccessSecretResponseBody.java","method_name":"setRequestId","content":"/**\n     * <p>Indicates whether the call was successful.</p>\n     */\npublic InspectProxyAccessSecretResponseBody setRequestId(String requestId) {\n        this.requestId = requestId;\n        return this;\n    }"} {"path":"downloaded/InspectProxyAccessSecretResponseBody.java","method_name":"getRequestId","content":"/**\n     * <p>Indicates whether the call was successful.</p>\n     */\npublic String getRequestId() {\n        return this.requestId;\n    }"} {"path":"downloaded/InspectProxyAccessSecretResponseBody.java","method_name":"setSuccess","content":"/**\n     * <p>Indicates whether the call was successful.</p>\n     */\npublic InspectProxyAccessSecretResponseBody setSuccess(Boolean success) {\n        this.success = success;\n        return this;\n    }"} {"path":"downloaded/InspectProxyAccessSecretResponseBody.java","method_name":"getSuccess","content":"/**\n     * <p>Indicates whether the call was successful.</p>\n     */\npublic Boolean getSuccess() {\n        return this.success;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getId","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.id\n     *\n     * @return the value of shop.id\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic Long getId() {\n        return id;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getShopId","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.shop_id\n     *\n     * @return the value of shop.shop_id\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic Long getShopId() {\n        return shopId;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getCityId","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.city_id\n     *\n     * @return the value of shop.city_id\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic Long getCityId() {\n        return cityId;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getVersion","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.version\n     *\n     * @return the value of shop.version\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic Long getVersion() {\n        return version;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getBulletin","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.bulletin\n     *\n     * @return the value of shop.bulletin\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic String getBulletin() {\n        return bulletin;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getDateCreated","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.date_created\n     *\n     * @return the value of shop.date_created\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic Date getDateCreated() {\n        return dateCreated;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getDescription","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.description\n     *\n     * @return the value of shop.description\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic String getDescription() {\n        return description;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getLastUpdated","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.last_updated\n     *\n     * @return the value of shop.last_updated\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic Date getLastUpdated() {\n        return lastUpdated;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getPicPath","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.pic_path\n     *\n     * @return the value of shop.pic_path\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic String getPicPath() {\n        return picPath;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getScoreId","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.score_id\n     *\n     * @return the value of shop.score_id\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic Long getScoreId() {\n        return scoreId;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getSellerId","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.seller_id\n     *\n     * @return the value of shop.seller_id\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic Long getSellerId() {\n        return sellerId;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getTitle","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.title\n     *\n     * @return the value of shop.title\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic String getTitle() {\n        return title;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getStatus","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.status\n     *\n     * @return the value of shop.status\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic Byte getStatus() {\n        return status;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getApproveStatus","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.approve_status\n     *\n     * @return the value of shop.approve_status\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic Byte getApproveStatus() {\n        return approveStatus;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getPromotedStatus","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.promoted_status\n     *\n     * @return the value of shop.promoted_status\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic Byte getPromotedStatus() {\n        return promotedStatus;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getProductCount","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.product_count\n     *\n     * @return the value of shop.product_count\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic Integer getProductCount() {\n        return productCount;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getDomain","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.domain\n     *\n     * @return the value of shop.domain\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic String getDomain() {\n        return domain;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getKeyBiz","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.key_biz\n     *\n     * @return the value of shop.key_biz\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic String getKeyBiz() {\n        return keyBiz;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getTheme","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.theme\n     *\n     * @return the value of shop.theme\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic String getTheme() {\n        return theme;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getServiceClause","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.service_clause\n     *\n     * @return the value of shop.service_clause\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic String getServiceClause() {\n        return serviceClause;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getTfsPath","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.tfs_path\n     *\n     * @return the value of shop.tfs_path\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic String getTfsPath() {\n        return tfsPath;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getSellerType","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.seller_type\n     *\n     * @return the value of shop.seller_type\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic Byte getSellerType() {\n        return sellerType;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getAlipayAccount","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.alipay_account\n     *\n     * @return the value of shop.alipay_account\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic String getAlipayAccount() {\n        return alipayAccount;\n    }"} {"path":"downloaded/ShopDO.java","method_name":"getType","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column shop.type\n     *\n     * @return the value of shop.type\n     * @mbggenerated Wed Apr 15 10:11:24 CST 2015\n     */\npublic Byte getType() {\n        return type;\n    }"} {"path":"downloaded/CollegeListCtl.java","method_name":"doGet","content":"/**\n * Display Logics inside this method\n */\nprotected void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException{\n\t\n\tlog.debug(\"college list do get start\");\n\tint pageNo=1;\n\tint pageSize=DataUtility.getInt(PropertyReader.getValue(\"page.size\"));\n\t\n\tCollegeBean bean=(CollegeBean)populateBean(request);\n\tCollegeModel model=new CollegeModel();\n\tList list;\n\tList next;\n\t\n\ttry{\n\t\tlist=model.search(bean,pageNo,pageSize);\n\t\tnext=model.search(bean, pageNo + 1, pageSize);\n\t\t\n\t\tServletUtility.setList(list, request);\n\t\tif (list == null || list.size() == 0) {\n\t\t\tServletUtility.setErrorMessage(\"No record found \", request);\n\t\t}\n\t\tif (next == null || next.size() == 0) {\n\t\t\trequest.setAttribute(\"nextListSize\", 0);\n\t\t} else {\n\t\t\trequest.setAttribute(\"nextListSize\", next.size());\n\t\t}\n\n\t\tServletUtility.setList(list, request);\n\t\tServletUtility.setPageNo(pageNo, request);\n\t\tServletUtility.setPageSize(pageSize, request);\n\t\tServletUtility.forward(getView(), request, response);\n\n\t\t\n\t}catch(ApplicationException e){\n\t\tlog.error(e);\n\t\tServletUtility.handleException(e, request, response);\n\t\treturn;\n\t} catch (Exception e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t}\n\tlog.debug(\"college list do get end\");\n}"} {"path":"downloaded/CollegeListCtl.java","method_name":"doPost","content":"/**\n * Submit logic inside it\n */\nprotected void doPost(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException{\n\t\n\tlog.debug(\"CollegeListCtl doPost Start\");\n\tList list=null;\n//\tList next=null;\n\t\n\tint pageNo=DataUtility.getInt(request.getParameter(\"pageNo\"));\n\tint pageSize=DataUtility.getInt(request.getParameter(\"pageSize\"));\n\tpageNo=(pageNo==0)?1:pageNo;\n\t\n\tpageSize=(pageSize==0)?DataUtility.getInt(PropertyReader.getValue(\"page.size\")):pageSize;\n\t\n\tCollegeBean bean=(CollegeBean)populateBean(request);\n\tString op=DataUtility.getString(request.getParameter(\"operation\"));\n\tCollegeModel model=new CollegeModel();\n\tString[] ids = request.getParameterValues(\"ids\");\n\t\n\ttry{\n\t\tif(OP_SEARCH.equalsIgnoreCase(op)||OP_NEXT.equalsIgnoreCase(op)||OP_PREVIOUS.equalsIgnoreCase(op)){\n\t\t\t\n\t\t\tif(OP_SEARCH.equalsIgnoreCase(op)){\n\t\t\t\tpageNo=1;\n\t\t\t}else if(OP_NEXT.equalsIgnoreCase(op)){\n\t\t\t\tpageNo++;\n\t\t\t}else if(OP_PREVIOUS.equalsIgnoreCase(op)&&pageNo>1){\n\t\t\t\tpageNo--;\n\t\t\t}\n\t\t} else if (OP_NEW.equalsIgnoreCase(op)) {\n\t\t\tServletUtility.redirect(ORSView.COLLEGE_CTL, request, response);\n\t\t\treturn;\n\t\t} else if (OP_RESET.equalsIgnoreCase(op)) {\n\t\t\tServletUtility.redirect(ORSView.COLLEGE_LIST_CTL, request, response);\n\t\t\treturn;\n\t\t}else if (OP_BACK.equalsIgnoreCase(op)) {\n\t\t\tServletUtility.redirect(ORSView.COLLEGE_LIST_CTL, request, response);\n\t\t\treturn;\n\t\t} else if (OP_DELETE.equalsIgnoreCase(op)) {\n\t\t\tpageNo = 1;\n\t\t\tif (ids != null && ids.length > 0) {\n\t\t\t\tCollegeBean deletebean = new CollegeBean();\n\t\t\t\tfor (String id : ids) {\n\t\t\t\t\tdeletebean.setId(DataUtility.getInt(id));\n\t\t\t\t\tmodel.delete(deletebean);\n\t\t\t\t\tServletUtility.setSuccessMessage(\"Data Deleted Successfully\", request);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tServletUtility.setErrorMessage(\"Select at least one record\", request);\n\t\t\t}\n\t\t}\n\n\t\t\tlist=model.search(bean, pageNo, pageSize);\n\t\t\tServletUtility.setBean(bean,request);\n\t\t\t\n\t\t\tList next = model.search(bean, pageNo + 1, pageSize);\n\t\t\tServletUtility.setList(list, request);\n\t\t\t\n\t\t\tif(list==null||list.size()==0 && !OP_DELETE.equalsIgnoreCase(op)){\n\t\t\t\tServletUtility.setErrorMessage(\"No record Found\", request);\n\t\t\t\t\n\t\t\t}\n\t\t\tif (next == null || next.size() == 0) {\n\t\t\t\trequest.setAttribute(\"nextListSize\", \"0\");\n\t\t\t} else {\n\t\t\t\trequest.setAttribute(\"nextListSize\", next.size());\n\t\t\t}\n\t\t\tServletUtility.setList(list, request);\n\t\t\tServletUtility.setPageNo(pageNo, request);\n\t\t\tServletUtility.setPageSize(pageSize, request);\n\t\t\tServletUtility.forward(getView(), request, response);\n\t\t\n\t\t}catch(ApplicationException e){\n\t\t\tlog.error(e);\n\t\t\tServletUtility.handleException(e, request, response);\n\t\t\treturn;\n\t\t}catch(Exception e){\n\t\t\t\n\t\t}\n\t\tlog.debug(\"CollegeListCtl doGet End\");\n\t}"} {"path":"downloaded/CollegeListCtl.java","method_name":"getView","content":"/**\n * Submit logic inside it\n */\n@Override\n\tprotected String getView() {\n\t\t// TODO Auto-generated method stub\n\t\treturn ORSView.COLLEGE_LIST_VIEW;\n\t}"} {"path":"downloaded/MapFragment.java","method_name":"newInstance","content":"/**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @return A new instance of fragment MapFragment.\n     */\npublic static MapFragment newInstance() {\n        return new MapFragment();\n    }"} {"path":"downloaded/MapFragment.java","method_name":"newInstance","content":"/**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @return A new instance of fragment MapFragment.\n     */\npublic static MapFragment newInstance(List<Spot> spotList) {\n//        mSpotList = spotList;\n        return new MapFragment();\n    }"} {"path":"downloaded/MapFragment.java","method_name":"newInstance","content":"/**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @return A new instance of fragment MapFragment.\n     */\npublic static MapFragment newInstance(CameraPosition cameraPosition) {\n        return new MapFragment();\n    }"} {"path":"downloaded/MapFragment.java","method_name":"onCreateView","content":"/**\n     * The system calls this when it's time for the fragment to draw its user interface for the first\n     * time. To draw a UI for your fragment, you must return a View from this method that is the root\n     * of your fragment's layout. You can return null if the fragment does not provide a UI.\n     *\n     * @param inflater           To return a layout from onCreateView(), you can inflate it from a layout\n     *                           resource defined in XML. To help you do so, onCreateView() provides a\n     *                           LayoutInflater object.\n     * @param container          The parent ViewGroup (from the activity's layout) in which your fragment layout is inserted\n     * @param savedInstanceState A Bundle that provides data about the previous instance of the\n     *                           fragment, if the fragment is being resumed\n     * @return\n     */\n@Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.fragment_partial_map, container, false);\n    }"} {"path":"downloaded/MapFragment.java","method_name":"getInfoWindow","content":"/**\n     * The system calls this method as the first indication that the user is leaving the fragment\n     * though it doesn't always mean the fragment is being destroyed). This is usually where you\n     * should commit any changes that should be persisted beyond the current user session (because\n     * the user might not come back).\n     */\n@Override\n    public View getInfoWindow(Marker marker) {\n        return null;\n    }"} {"path":"downloaded/MapFragment.java","method_name":"getInfoContents","content":"/**\n     * The system calls this method as the first indication that the user is leaving the fragment\n     * though it doesn't always mean the fragment is being destroyed). This is usually where you\n     * should commit any changes that should be persisted beyond the current user session (because\n     * the user might not come back).\n     */\n@Override\n    public View getInfoContents(Marker marker) {\n        View view = mActivity.getLayoutInflater().inflate(R.layout.custom_info_window, null);\n        ImageView spot_image_iv = view.findViewById(R.id.spot_image_infoWindow);\n        TextView spot_name_tv = view.findViewById(R.id.spot_name_infoWindow);\n        return null;\n    }"} {"path":"downloaded/MapFragment.java","method_name":"updateLocationUI","content":"/**\n     * Updates the map's UI settings based on whether the user has granted location permission.\n     */\nprivate void updateLocationUI() {\n        if (mMap == null) {\n            return;\n        }\n        try {\n            if (mLocationPermissionGranted) {\n                mMap.setMyLocationEnabled(true);\n\n                // Display the user selected map type\n                mMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);\n\n                MapStyleOptions style = MapStyleOptions.loadRawResourceStyle(mContext, R.raw.map_style_night);\n                mMap.setMapStyle(style);\n\n                // Don't want to display the default location button because\n                // we are already displaying using a FAB\n                mMap.getUiSettings().setMyLocationButtonEnabled(false);\n\n                mMap.setOnMyLocationClickListener(this);\n            } else {\n                mMap.setMyLocationEnabled(false);\n                mMap.getUiSettings().setMyLocationButtonEnabled(false);\n                mLastKnownLocation = null;\n                getLocationPermission();\n            }\n        } catch (SecurityException e) {\n            Log.e(\"Exception: %s\", e.getMessage());\n        }\n    }"} {"path":"downloaded/MapFragment.java","method_name":"onMarkerClick","content":"/**\n     * Called when the user clicks a marker (the default appears to be popping the info window).\n     */\n@Override\n    public boolean onMarkerClick(final Marker marker) {\n        // Return false to indicate that we have not consumed the event and that we wish\n        // for the default behavior to occur (which is for the camera to move such that the\n        // marker is centered and for the marker's info window to open, if it has one).\n        Toast.makeText(mContext, \"onMarkerClick called\", Toast.LENGTH_SHORT).show();\n\n        return false;\n    }"} {"path":"downloaded/MapFragment.java","method_name":"getCameraPosition","content":"/**\n     * A method to respond to the action of a user submitting a search via the app bar. MainActivity\n     * receives the ACTION_SEARCH Intent in onNewIntent() and calls this method if the MapFragment\n     * is the currently loaded fragment, passing in the search String that the user queried for.\n     *\n     * @param query The search String that the user queried for\n     */\npublic CameraPosition getCameraPosition() {\n        return mMap.getCameraPosition();\n    }"} {"path":"downloaded/MaximumProductSubarray.java","method_name":"maxProduct","content":"/**\n     * @param nums: an array of integers\n     * @return: an integer\n     */\npublic tin maxProduct(int[] nums) {\n        int globalMax = Integer.MIN_VALUE;\n        int localMax = 1;\n        int localMin = 1;\n        for (int num : nums) {\n            int tmp = localMax; \n            localMax = Math.max(num, Math.max(localMax * num, localMin * num));\n            localMin = Math.min(num, Math.min(tmp * num, localMin * num));\n            globalMax = Math.max(globalMax, localMax);\n        }\n        return globalMax;\n    }"} {"path":"downloaded/BiNode.java","method_name":"asDoublyLinkedList","content":"/**\n     * Right node if binary tree or next node if doubly linked list\n     */\npublic static BiNode asDoublyLinkedList(BiNode root) {\n        BiNode biNode = convertToDoubleLinkedList(root);\n        biNode.node1.node2 = null;\n        biNode.node1 = null;\n\n        return biNode;\n    }"} {"path":"downloaded/BiNode.java","method_name":"convertToDoubleLinkedList","content":"/**\n     * Right node if binary tree or next node if doubly linked list\n     */\nprivate static BiNode convertToDoubleLinkedList(BiNode root) {\n        if (root == null) {\n            return null;\n        }\n\n        // leftHead the left most node of the linked list returned from the left node of root i.e. root.node1\n        // leftHead.node1 is supposed to point to tail and the root should be appended to the tail.\n        BiNode leftHead = convertToDoubleLinkedList(root.node1);\n\n        // rightHead the left most node of the linked list returned from the right node of root i.e. root.node2\n        // rightHead.node1 is supposed to point to tail and the root should be prepended to rightHead.\n        BiNode rightHead = convertToDoubleLinkedList(root.node2);\n\n        if (leftHead == null && rightHead == null) {\n            // straight forward case when both nodes are null. We just need to return root node as head and tail.\n            root.node1 = root;\n            root.node2 = root;\n            return root;\n        } else if (leftHead != null && rightHead == null) {\n            // there is no left node, which means we need to return root as head of the list. The previous node\n            // of root (root.node1) should point to tail of this list (rightHead.node1), and the next node of root\n            // (root.node2) should point to rightHead\n            BiNode rightTail = rightHead.node1;\n            rightHead.node1 = root;\n            root.node2 = rightHead;\n\n            // making new circular connections between root (new head) and rightTail\n            root.node1 = rightTail;\n            rightTail.node2 = root;\n            return root;\n        } else if (leftHead == null && rightHead != null) {\n            // there is no right node, which means we need to return leftHead as head of the list. The previous node\n            // of leftHead (leftHead.node1) should point to tail of this list (root), and the next node of root\n            // (root.node2) should point to leftHead.\n            BiNode leftTail = leftHead.node1;\n\n            // root is new tail and leftTail is second last\n            leftTail.node2 = root;\n            root.node1 = leftTail;\n\n            // making circular connections between leftHead (head) and root (new tail)\n            root.node2 = leftHead;\n            leftHead.node1 = root;\n            return leftHead;\n        } else {\n            BiNode leftTail = leftHead.node1;\n            leftTail.node2 = root;\n            root.node1 = leftTail;\n\n            BiNode rightTail = rightHead.node1;\n            rightHead.node1 = root;\n            root.node2 = rightHead;\n\n            // making new circular connections between leftHead and rightTail\n            leftHead.node1 = rightTail;\n            rightTail.node2 = leftHead;\n\n            return leftHead;\n        }\n    }"} {"path":"downloaded/CoinFlip.java","method_name":"coinFlip","content":"/**\n\t * Returns the characters 'H' or 'T' randomly, each with probability 0.5. This is equivalent to flipping a fair coin.\n\t * @return H with probability 0.5, or T with probability 0.5\n\t */\npublic static char coinFlip() {\n\t\tint coin = 0;\n\n\t\tRandom rand = new Random();\n\n\t\tcoin = rand.nextInt(2);\n\n\t\tif (coin == 0) {\n\t\t\treturn 'T';\n\t\t} else {\n\t\t\treturn 'H';\n\t\t}\n\n\t}"} {"path":"downloaded/Appointment.java","method_name":"getSchoolClass","content":"/**\n     * \n     */\npublic SchoolClass getSchoolClass() {\n\t\treturn schoolClass;\n\t}"} {"path":"downloaded/Appointment.java","method_name":"getTopic","content":"/**\n     * \n     */\npublic ArrayList<Topic> getTopic() {\n\t\treturn topic;\n\t}"} {"path":"downloaded/Appointment.java","method_name":"getIdClass","content":"/**\n     * \n     */\npublic int getIdClass() {\n\t\treturn idClass;\n\t}"} {"path":"downloaded/Appointment.java","method_name":"getMeetingTime","content":"/**\n     * \n     */\npublic String getMeetingTime() {\n\t\treturn meetingTime;\n\t}"} {"path":"downloaded/Appointment.java","method_name":"getPlace","content":"/**\n     * \n     */\npublic String getPlace() {\n\t\treturn place;\n\t}"} {"path":"downloaded/Appointment.java","method_name":"getMessage","content":"/**\n     * \n     */\npublic String getMessage() {\n\t\treturn message;\n\t}"} {"path":"downloaded/Appointment.java","method_name":"getIdAppointment","content":"/**\n     * Get the id of the appointment\n     * @return the id of the appointment\n     */\npublic int getIdAppointment() {\n\t\treturn idAppointment;\n\t}"} {"path":"downloaded/Appointment.java","method_name":"getIdSubject","content":"/**\n     * Get the id of the subject of the appointment\n     * @return the id of the subject who is teached for the appointment\n     */\npublic int getIdSubject() {\n\t\treturn idSubject;\n\t}"} {"path":"downloaded/Appointment.java","method_name":"getSubject","content":"/**\n     * Get the subject of the appointment\n     * @return the subject who is teached for the appointment\n     */\npublic Subject getSubject() {\n\t\treturn subject;\n\t}"} {"path":"downloaded/Appointment.java","method_name":"getDateAppointment","content":"/**\n     * Get the date of the appointment\n     * @return the date of the appointment\n     */\npublic MyDate getDateAppointment() {\n\t\treturn dateAppointment;\n\t}"} {"path":"downloaded/Appointment.java","method_name":"getTeacher","content":"/**\n     * Get the teacher of the appointment\n     * @return the student who teach the appointment\n     */\npublic Student getTeacher() {\n        // TODO implement here\n        return teacher;\n    }"} {"path":"downloaded/CompletionStages.java","method_name":"withFallback","content":"/**\n     * Creates a new completion stage which uses a fallback stage in case the primary stage completes exceptionally.\n     *\n     * @param stage    The primary stage.\n     * @param fallback A function, which returns a fallback stage, in case the primary one fails exceptionally.\n     * @param <T>      The type.\n     * @return The completion stage with a fallback.\n     */\npublic static <T> CompletionStage<T> withFallback(final CompletionStage<T> stage,\n                                                      final BiFunction<CompletionStage<T>, Throwable, ? extends CompletionStage<T>> fallback) {\n        return stage.handle((response, error) -> error)\n                .thenCompose(error -> error != null ? fallback.apply(stage, error) : stage);\n    }"} {"path":"downloaded/CompletionStages.java","method_name":"allOf","content":"/**\n     * Returns a completion stage, which is complete when all the completion stages are complete.\n     * The lists of each stage are flat mapped into one list, so that the returned stage has one accumulated list.\n     *\n     * @param stages The stages.\n     * @param <T>    The type.\n     * @return The future.\n     */\npublic static <T> CompletionStage<List<T>> allOf(final Collection<? extends CompletionStage<List<T>>> stages) {\n        // First convert the list of stages to an array of CompletableFuture.\n        // Then use CompletableFuture.allOf to combine them all.\n        return CompletableFuture.allOf(stages.stream().map(CompletionStage::toCompletableFuture).collect(Collectors.toList()).toArray(new CompletableFuture[stages.size()]))\n                .thenApply(result ->\n                        stages.stream()\n                                // Get the result of each future (List<T>)\n                                .map(stage -> stage.toCompletableFuture().join())\n                                        // Map the List<List<T>> to one stream\n                                .flatMap(Collection::stream)\n                                        // Collect all items into one list.\n                                .collect(Collectors.toList()));\n    }"} {"path":"downloaded/CompletionStages.java","method_name":"timeoutAfter","content":"/**\n     * Creates a completion stage, which times out after the specified time, i.e. it completes exceptionally with a {@link TimeoutException}.\n     *\n     * @param delay The delay.\n     * @param unit  The time unit.\n     * @param <T>   The type.\n     * @return The stage.\n     */\npublic static <T> CompletionStage<T> timeoutAfter(final long delay, final TimeUnit unit) {\n        return timeoutAfter(delay, unit, () -> new TimeoutException(\"Timeout after \" + delay + ' ' + unit));\n    }"} {"path":"downloaded/CompletionStages.java","method_name":"timeoutAfter","content":"/**\n     * Creates a completion stage, which times out after the specified time, i.e. it completes exceptionally with the supplied exception.\n     *\n     * @param delay             The delay.\n     * @param unit              The time unit.\n     * @param throwableSupplier The supplier for an exception which occurs on timeout.\n     * @param <T>               The type.\n     * @return The stage.\n     */\npublic static <T> CompletionStage<T> timeoutAfter(final long delay, final TimeUnit unit, final Supplier<Throwable> throwableSupplier) {\n        CompletableFuture<T> completableFuture = new CompletableFuture<>();\n        TIMEOUT_EXECUTOR.schedule(() ->\n                completableFuture.completeExceptionally(throwableSupplier.get())\n                , delay, unit);\n        return completableFuture;\n    }"} {"path":"downloaded/Grib1WmoTimeType.java","method_name":"getStatType","content":"/**\n   * The time unit statistical type, derived from code table 5)\n   *\n   * @return time unit statistical type, or null if unknown.\n   */\n@Nullable\n  public static GribStatType getStatType(int timeRangeIndicator) {\n    switch (timeRangeIndicator) {\n      case 3:\n      case 6:\n      case 7:\n      case 51:\n      case 113:\n      case 115:\n      case 117:\n      case 120:\n      case 123:\n        return GribStatType.Average;\n      case 4:\n      case 114:\n      case 116:\n      case 124:\n        return GribStatType.Accumulation;\n      case 5:\n        return GribStatType.DifferenceFromEnd;\n      case 118:\n        return GribStatType.Covariance;\n      case 119:\n      case 125:\n        return GribStatType.StandardDeviation;\n      default:\n        return null;\n    }\n  }"} {"path":"downloaded/Gravity.java","method_name":"applyOnHit","content":"/**\n     * Pulls in nearby enemies on hit\n     *\n     * @param user   player with the enchantment\n     * @param target enemy that was hit\n     * @param level  enchantment level\n     * @param event  event details\n     */\n@Override\n    public void applyOnHit(LivingEntity user, LivingEntity target, int level, EntityDamageByEntityEvent event) {\n        if (Math.random() * 100 > settings.get(CHANCE, level)) return;\n\n        final double range = settings.get(RANGE, level);\n        final double damage = settings.get(DAMAGE, level);\n        final double speed = settings.get(SPEED, level);\n        for (Entity entity : user.getNearbyEntities(range, range, range)) {\n            if (!(entity instanceof LivingEntity) || Protection.isAlly(user, (LivingEntity)entity)) continue;\n\n            ((LivingEntity) entity).damage(damage, user);\n            entity.setVelocity(user.getLocation().subtract(entity.getLocation()).toVector().multiply(speed));\n        }\n    }"} {"path":"downloaded/BuscarArtG.java","method_name":"getVista","content":"/**\n\t * @see controladores.Opcion#getVista()\n\t */\n@Override\n\tpublic JPanel getVista() {\n\t\treturn vista;\n\t}"} {"path":"downloaded/BigDecimalComparitor.java","method_name":"hasPositiveValue","content":"/**\n     * checks if the value is positive\n     * @param value\n     * @return\n     */\nprotected static boolean hasPositiveValue(BigDecimal value) {\n        return value != null && BigDecimal.ZERO.compareTo(value) < 0;\n    }"} {"path":"downloaded/Module.java","method_name":"ic St","content":"/**\n     * 模块类型\ndes;\n\n    public String getId() {\n        return"} {"path":"downloaded/Module.java","method_name":"ic Stri","content":"/**\n     * 模块类型\n   }\n\n    public String getType() {\n        return t"} {"path":"downloaded/Module.java","method_name":"ic Stri","content":"/**\n     * 模块类型\n   }\n\n    public String getName() {\n        return n"} {"path":"downloaded/Module.java","method_name":"ic String getD","content":"/**\n     * 模块类型\n   }\n\n    public String getDescription() {\n        return descript"} {"path":"downloaded/Module.java","method_name":"t<Module> g","content":"/**\n     * 模块类型\n   }\n\n    public List<Module> getVersions() {\n        return versi"} {"path":"downloaded/Module.java","method_name":"t<String> g","content":"/**\n     * 模块类型\n   }\n\n    public List<String> getIncludes() {\n        return inclu"} {"path":"downloaded/Module.java","method_name":"t<Module> g","content":"/**\n     * 模块类型\n   }\n\n    public List<Module> getChildren() {\n        return child"} {"path":"downloaded/Module.java","method_name":"Resource","content":"/**\n     * 模块类型\n   }\n\n    public List<Resource> getMenus() {\n        return me"} {"path":"downloaded/Module.java","method_name":"ic Strin","content":"/**\n     * 模块类型\n;\n    }\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Module [id=\" + id + \", type=\" + type + \", name=\" + name + \", description=\" + description + \", versions=\"\n\t\t\t\t+ versions + \", menus=\" + menus + \", children=\" + children + \", includes=\" + includes"} {"path":"downloaded/AnimationPlacement.java","method_name":"getBlackBox","content":"/**\n\t * @return the blackBox\n\t */\npublic PTRectangle getBlackBox() {\n\t\treturn blackBox;\n\t}"} {"path":"downloaded/AnimationPlacement.java","method_name":"getBlackWires","content":"/**\n\t * @return the blackWires\n\t */\npublic ArrayList<PTWire> getBlackWires() {\n\t\treturn blackWires;\n\t}"} {"path":"downloaded/AnimationPlacement.java","method_name":"getBlackPins","content":"/**\n\t * @return the blackPins\n\t */\npublic ArrayList<PTPolyline> getBlackPins() {\n\t\treturn blackPins;\n\t}"} {"path":"downloaded/Ship.java","method_name":"getName","content":"/**\n     * @return the name\n     */\npublic String getName() {\n        return name;\n    }"} {"path":"downloaded/Ship.java","method_name":"getCoordinates","content":"/**\n     * @return the coordinates\n     */\npublic Coordinates getCoordinates() {\n        return coordinates;\n    }"} {"path":"downloaded/Ship.java","method_name":"getLength","content":"/**\n     * @return the length\n     */\npublic int getLength() {\n        return length;\n    }"} {"path":"downloaded/Ship.java","method_name":"isVertical","content":"/**\n     * @return the vertical\n     */\npublic boolean isVertical() {\n        return vertical;\n    }"} {"path":"downloaded/Ship.java","method_name":"getFieldsAlive","content":"/**\n     * @return the fieldsAlive\n     */\npublic int getFieldsAlive() {\n        return fieldsAlive;\n    }"} {"path":"downloaded/ColorPalette.java","method_name":"size","content":"/**\n\t * Returns the number of colors in this palette.\n\t * @return the size of the palette\n\t */\npublic int size() {\n\t\treturn palette.size();\n\t}"} {"path":"downloaded/ColorPalette.java","method_name":"indexOfColor","content":"/**\n\t * Finds the color number corresponding to a color\n\t * @param c the color for which the color number is desired\n\t * @return the number of the given color\n\t */\npublic int indexOfColor(Color c) {\n\t\tint i = palette.indexOf(c);\n\t\tif (i < 0)\n\t\t\tthrow new IllegalArgumentException(\"Color \" + c + \" is not in the color palette.\");\n\t\treturn i;\n\t}"} {"path":"downloaded/ColorPalette.java","method_name":"colorAtIndex","content":"/**\n\t * Finds the color with a given color number.\n\t * @param index the color number\n\t * @return the color with the given index\n\t */\npublic Color colorAtIndex(int index) {\n\t\tif (index < 0 || index >= size())\n\t\t\tthrow new IllegalArgumentException(\"Index \" + index + \" is out of range.\");\n\t\treturn palette.get(index);\n\t}"} {"path":"downloaded/ColorPalette.java","method_name":"randomColor","content":"/**\n\t * Creates a random color\n\t * @return a color with red, green, and blue values chosen at random\n\t */\npublic static Color randomColor() {\n\t\tColor c = new Color(random.nextInt(256),random.nextInt(256),random.nextInt(256));\n\t\treturn c;\n\t}"} {"path":"downloaded/PuzzleProgress.java","method_name":"getId","content":"/**\n     * Total times mistakes were revealed by the user.\n     */\npublic int getId() {\n        return mId;\n    }"} {"path":"downloaded/PuzzleProgress.java","method_name":"getCharMapping","content":"/**\n     * Total times mistakes were revealed by the user.\n     */\n@NonNull\n    public synchronized HashMap<Character, Character> getCharMapping(@NonNull Puzzle puzzle) {\n        // Ensure we've attempted to load the data\n        if (mCharMapping == null) {\n            // Populate from the character list\n            getCharacterList(puzzle);\n            Random r;\n            if (sRandomSeed == null) {\n                r = new Random();\n            } else {\n                r = new Random(sRandomSeed);\n            }\n            List<Character> alphabet = new ArrayList<>(ALPHABET.size());\n            for (Character c : ALPHABET) {\n                alphabet.add(c);\n            }\n            int remaining = mCharMapping.size();\n            // Figure out what the last character would be\n            char lastChar = 0;\n            for (Character c : mCharMapping.keySet()) {\n                lastChar = c;\n            }\n            // Create mappings\n            for (Character c : mCharMapping.keySet()) {\n                int i = r.nextInt(alphabet.size());\n                char mappedC = alphabet.get(i);\n                if (mappedC == c) {\n                    i = (i + 1) % alphabet.size();\n                }\n                // Special case for the last two mappings to ensure a solution\n                if (remaining == 2) {\n                    // Check if by selecting this character, we have a solution for the last character\n                    int j = (i + 1) % alphabet.size();\n                    if (alphabet.get(j) == lastChar) {\n                        // We don't; select the other instead\n                        i = (i + 1) % alphabet.size();\n                    }\n                }\n                mappedC = alphabet.get(i);\n                alphabet.remove(i);\n                mCharMapping.put(c, mappedC);\n                remaining--;\n            }\n            // We've generated the mappings, save it\n            puzzle.save();\n        }\n        return mCharMapping;\n    }"} {"path":"downloaded/PuzzleProgress.java","method_name":"getCharacterList","content":"/**\n     * Total times mistakes were revealed by the user.\n     */\npublic synchronized ArrayList<Character> getCharacterList(@NonNull Puzzle puzzle) {\n        if (mCharacterList == null || mCharMapping == null) {\n            // May need to be regenerated as the field is transient\n            boolean resetCharMapping = false;\n            if (mCharMapping == null) {\n                mCharMapping = new HashMap<>();\n                resetCharMapping = true;\n            }\n            mCharacterList = new ArrayList<>();\n            for (String word : puzzle.getWords()) {\n                for (int i = 0; i < word.length(); i++) {\n                    char c = Character.toUpperCase(word.charAt(i));\n                    if (puzzle.isInputChar(c)) {\n                        if (resetCharMapping) {\n                            mCharMapping.put(c, (char) 0);\n                        }\n                        if (!mCharacterList.contains(c)) {\n                            mCharacterList.add(c);\n                        }\n                    }\n                }\n            }\n        }\n        return mCharacterList;\n    }"} {"path":"downloaded/PuzzleProgress.java","method_name":"getUserCharsMapping","content":"/**\n     * Total times mistakes were revealed by the user.\n     */\n@NonNull\n    private synchronized HashMap<Character, Character> getUserCharsMapping(@NonNull Puzzle puzzle) {\n        if (mUserChars == null) {\n            mUserChars = new HashMap<>();\n            for (String word : puzzle.getWords()) {\n                for (int i = 0; i < word.length(); i++) {\n                    char c = Character.toUpperCase(word.charAt(i));\n                    if (puzzle.isInputChar(c)) {\n                        mUserChars.put(c, (char) 0);\n                    }\n                }\n            }\n        }\n        return mUserChars;\n    }"} {"path":"downloaded/PuzzleProgress.java","method_name":"getUserChars","content":"/**\n     * Total times mistakes were revealed by the user.\n     */\npublic synchronized Collection<Character> getUserChars(@NonNull Puzzle puzzle) {\n        return getUserCharsMapping(puzzle).values();\n    }"} {"path":"downloaded/PuzzleProgress.java","method_name":"getUserChar","content":"/**\n     * Total times mistakes were revealed by the user.\n     */\n@Nullable\n    public synchronized Character getUserChar(@NonNull Puzzle puzzle, char c) {\n        return getUserCharsMapping(puzzle).get(c);\n    }"} {"path":"downloaded/PuzzleProgress.java","method_name":"setUserChar","content":"/**\n     * Sets a selected hint to a character.\n     *\n     * @return If the character was changed from a previous assignment; i.e. 'corrected' by the user.\n     */\npublic synchronized boolean setUserChar(@NonNull Puzzle puzzle, char selectedCharacter,\n                                            char c) {\n        boolean changed = false;\n        Character previousChar = getUserCharsMapping(puzzle).get(selectedCharacter);\n        if (previousChar == null) {\n            previousChar = 0;\n        }\n        char userChar = Character.toUpperCase(c);\n        if (previousChar != userChar && userChar != 0) {\n            if (previousChar != 0) {\n                // User made a correction\n                changed = true;\n            }\n            if (mInputs == null) {\n                mInputs = 1;\n            } else {\n                mInputs++;\n            }\n        }\n        getUserCharsMapping(puzzle).put(selectedCharacter, userChar);\n        return changed;\n    }"} {"path":"downloaded/PuzzleProgress.java","method_name":"getUserCharsCount","content":"/**\n     * Sets a selected hint to a character.\n     *\n     * @return If the character was changed from a previous assignment; i.e. 'corrected' by the user.\n     */\nprivate int getUserCharsCount(@NonNull Puzzle puzzle) {\n        int count = 0;\n        HashMap<Character, Character> userCharsMapping = getUserCharsMapping(puzzle);\n        for (Character c : userCharsMapping.keySet()) {\n            if (puzzle.isGiven(c)) {\n                // This character is given by the puzzle\n                continue;\n            }\n            Character userChar = userCharsMapping.get(c);\n            if (userChar != null && userChar != 0) {\n                // This is a user filled character\n                count++;\n            }\n        }\n        return count;\n    }"} {"path":"downloaded/PuzzleProgress.java","method_name":"getExcessCount","content":"/**\n     * Sets a selected hint to a character.\n     *\n     * @return If the character was changed from a previous assignment; i.e. 'corrected' by the user.\n     */\npublic synchronized int getExcessCount(@NonNull Puzzle puzzle) {\n        if (mInputs == null) {\n            return -1;\n        }\n        // Start with total number of inputs\n        return mInputs - getUserCharsCount(puzzle);\n    }"} {"path":"downloaded/PuzzleProgress.java","method_name":"isInProgress","content":"/**\n     * Sets a selected hint to a character.\n     *\n     * @return If the character was changed from a previous assignment; i.e. 'corrected' by the user.\n     */\npublic synchronized boolean isInProgress(@NonNull Puzzle puzzle) {\n        if (isCompleted(puzzle)) {\n            return false;\n        }\n        // Dumb approach of simply checking on inputs\n        return getUserCharsCount(puzzle) > 0;\n    }"} {"path":"downloaded/PuzzleProgress.java","method_name":"isCompleted","content":"/**\n     * Sets a selected hint to a character.\n     *\n     * @return If the character was changed from a previous assignment; i.e. 'corrected' by the user.\n     */\npublic synchronized boolean isCompleted(@NonNull Puzzle puzzle) {\n        if (mCompleted == null || !mCompleted) {\n            mCompleted = true;\n            HashMap<Character, Character> userChars = getUserCharsMapping(puzzle);\n            if (userChars.size() <= 5) {\n                Log.w(TAG, \"User character mapping has an unexpectedly small size (that's what she said)\");\n                userChars.clear();\n                mCompleted = false;\n            } else {\n                for (Character character : userChars.keySet()) {\n                    // In order to be correct, the key and value must be identical\n                    if (character != null && character != userChars.get(character) && !puzzle.isGiven(character)) {\n                        mCompleted = false;\n                        break;\n                    }\n                }\n            }\n            if (mCompleted) {\n                onCompleted(puzzle);\n                onPause();\n            }\n        }\n        return mCompleted;\n    }"} {"path":"downloaded/PuzzleProgress.java","method_name":"reveal","content":"/**\n     * Sets a selected hint to a character.\n     *\n     * @return If the character was changed from a previous assignment; i.e. 'corrected' by the user.\n     */\npublic synchronized void reveal(char c) {\n        if (mRevealed == null) {\n            mRevealed = new ArrayList<>();\n        } else if (mRevealed.contains(c)) {\n            return;\n        }\n        mRevealed.add(c);\n    }"} {"path":"downloaded/PuzzleProgress.java","method_name":"isRevealed","content":"/**\n     * Sets a selected hint to a character.\n     *\n     * @return If the character was changed from a previous assignment; i.e. 'corrected' by the user.\n     */\npublic synchronized boolean isRevealed(char c) {\n        return mRevealed != null && mRevealed.contains(c);\n    }"} {"path":"downloaded/PuzzleProgress.java","method_name":"getReveals","content":"/**\n     * Sets a selected hint to a character.\n     *\n     * @return If the character was changed from a previous assignment; i.e. 'corrected' by the user.\n     */\npublic synchronized int getReveals() {\n        return mRevealed == null ? 0 : mRevealed.size();\n    }"} {"path":"downloaded/PuzzleProgress.java","method_name":"getRevealedMistakes","content":"/**\n     * Sets a selected hint to a character.\n     *\n     * @return If the character was changed from a previous assignment; i.e. 'corrected' by the user.\n     */\npublic synchronized Integer getRevealedMistakes() {\n        return mRevealedMistakes == null ? 0 : mRevealedMistakes;\n    }"} {"path":"downloaded/PuzzleProgress.java","method_name":"isPlaying","content":"/**\n     * Sets a selected hint to a character.\n     *\n     * @return If the character was changed from a previous assignment; i.e. 'corrected' by the user.\n     */\npublic synchronized boolean isPlaying() {\n        return mPlaying != null && mPlaying;\n    }"} {"path":"downloaded/PuzzleProgress.java","method_name":"getStartTime","content":"/**\n     * Sets a selected hint to a character.\n     *\n     * @return If the character was changed from a previous assignment; i.e. 'corrected' by the user.\n     */\npublic synchronized long getStartTime() {\n        if (mStartTime == null || mStartTime == 0) {\n            return 0;\n        }\n        return mStartTime;\n    }"} {"path":"downloaded/PuzzleProgress.java","method_name":"getDurationMs","content":"/**\n     * Sets a selected hint to a character.\n     *\n     * @return If the character was changed from a previous assignment; i.e. 'corrected' by the user.\n     */\npublic synchronized long getDurationMs() {\n        if (mStartTime == null || mStartTime == 0) {\n            return 0;\n        }\n        if (!isPlaying()) {\n            if (mStopTime == null || mStopTime == 0) {\n                return 0;\n            }\n            return mStopTime - mStartTime;\n        }\n        return System.currentTimeMillis() - mStartTime;\n    }"} {"path":"downloaded/PuzzleProgress.java","method_name":"hasScore","content":"/**\n     * Sets a selected hint to a character.\n     *\n     * @return If the character was changed from a previous assignment; i.e. 'corrected' by the user.\n     */\npublic synchronized boolean hasScore(@NonNull Puzzle puzzle) {\n        long duration = puzzle.getDurationMs();\n        if (duration == 0) {\n            return false;\n        }\n        return true;\n    }"} {"path":"downloaded/PuzzleProgress.java","method_name":"getScore","content":"/**\n     * Sets a selected hint to a character.\n     *\n     * @return If the character was changed from a previous assignment; i.e. 'corrected' by the user.\n     */\npublic synchronized Float getScore(@NonNull Puzzle puzzle) {\n        if (!hasScore(puzzle)) {\n            return null;\n        }\n        float duration = getDurationMs() / 1000f;\n        float score = 1;\n        score = addScore(score, TARGET_DURATION / duration);\n        score = addScore(score, (float) Math.pow(0.75f, getRevealedMistakes()));\n        score = addScore(score, (MAX_REVEALS - getReveals()) / 6f);\n        // Never return a score below 0.0% or above 100.0%\n        return Math.max(0f, Math.min(1f, score));\n    }"} {"path":"downloaded/PuzzleProgress.java","method_name":"addScore","content":"/**\n     * Sets a selected hint to a character.\n     *\n     * @return If the character was changed from a previous assignment; i.e. 'corrected' by the user.\n     */\nprivate float addScore(float score, float addition) {\n        addition = Math.max(-1f, Math.min(1f, addition));\n        if (score < 0 && addition < 0) {\n            return score * -addition;\n        }\n        return score * addition;\n    }"} {"path":"downloaded/PuzzleProgress.java","method_name":"sanitize","content":"/**\n     * Sets a selected hint to a character.\n     *\n     * @return If the character was changed from a previous assignment; i.e. 'corrected' by the user.\n     */\npublic synchronized void sanitize(@NonNull Puzzle puzzle) {\n        if (mSanitized) {\n            return;\n        }\n        mSanitized = true;\n        // Ensure that only input characters have user mappings\n        Iterator<Character> i = getUserCharsMapping(puzzle).keySet().iterator();\n        while (i.hasNext()) {\n            Character c = i.next();\n            if (c == null || !puzzle.isInputChar(c)) {\n                i.remove();\n            }\n        }\n        if (mStartTime == null || mStopTime == null) {\n            // This is a hacky fix for dealing with broken completion states\n            mCompleted = false;\n        }\n        ArrayList<Character> characterList = getCharacterList(puzzle);\n        HashMap<Character, Character> charMapping = getCharMapping(puzzle);\n        Log.w(TAG, \"check for invalid mappings in \" + puzzle);\n        for (Character c : characterList) {\n            if (charMapping.get(c) == null || charMapping.get(c) == 0) {\n                // Whoops! Puzzle has a broken character mapping\n                mUserChars = null;\n                mCharMapping = null;\n                mCompleted = false;\n                getCharMapping(puzzle);\n                Log.w(TAG, \"invalid character mapping for \" + puzzle + \"; reset mappings\");\n                break;\n            }\n        }\n        // Apply mappings for any revealed characters\n        if (mRevealed != null) {\n            for (Character c : mRevealed) {\n                setUserChar(puzzle, c, c);\n            }\n        }\n    }"} {"path":"downloaded/StandardAlerter.java","method_name":"validate","content":"/** Contains fault details of the latest prediction run failure. */\n@Override\n    public void validate(StandardAlerterConfig configuration) throws IllegalArgumentException {\n        if (configuration == null) {\n            // null config is accepted\n            return;\n        }\n\n        configuration.validate();\n    }"} {"path":"downloaded/StandardAlerter.java","method_name":"isStarted","content":"/**\n     * Registers a new set of child\n     * {@link com.elastisys.scale.commons.net.alerter.Alerter}s.\n     *\n     * @param configuration\n     */\nprivate boolean isStarted() {\n        return this.started;\n    }"} {"path":"downloaded/StandardAlerter.java","method_name":"getConfiguration","content":"/**\n     * Registers a new set of child\n     * {@link com.elastisys.scale.commons.net.alerter.Alerter}s.\n     *\n     * @param configuration\n     */\n@Override\n    public StandardAlerterConfig getConfiguration() {\n        return this.config == null ? null : this.config.orElse(null);\n    }"} {"path":"downloaded/StandardAlerter.java","method_name":"getConfigurationClass","content":"/**\n     * Registers a new set of child\n     * {@link com.elastisys.scale.commons.net.alerter.Alerter}s.\n     *\n     * @param configuration\n     */\n@Override\n    public Class<StandardAlerterConfig> getConfigurationClass() {\n        return StandardAlerterConfig.class;\n    }"} {"path":"downloaded/StandardAlerter.java","method_name":"start","content":"/**\n     * Registers a new set of child\n     * {@link com.elastisys.scale.commons.net.alerter.Alerter}s.\n     *\n     * @param configuration\n     */\n@Override\n    public synchronized void start() {\n        ensureConfigured();\n\n        if (isStarted()) {\n            return;\n        }\n\n        // register with event bus to start listening for Alerts\n        this.eventBus.register(this);\n\n        // start forwarding alerts sent on event bus\n        Map<String, JsonElement> autoscalerTags = AutoScalerMetadata.alertTags(this.autoScalerUuid, this.autoScalerId);\n        this.alerter.registerAlerters(effectiveConfig(), autoscalerTags);\n        this.started = true;\n        this.logger.info(getClass().getSimpleName() + \" started.\");\n\n    }"} {"path":"downloaded/StandardAlerter.java","method_name":"stop","content":"/**\n     * Registers a new set of child\n     * {@link com.elastisys.scale.commons.net.alerter.Alerter}s.\n     *\n     * @param configuration\n     */\n@Override\n    public synchronized void stop() {\n        if (!isStarted()) {\n            return;\n        }\n\n        // unregister from event bus to stop listening for Alerts\n        this.eventBus.register(this);\n\n        // stop forwarding alerts sent on event bus\n        this.alerter.unregisterAlerters();\n        this.started = false;\n        this.logger.info(getClass().getSimpleName() + \" stopped.\");\n    }"} {"path":"downloaded/StandardAlerter.java","method_name":"getStatus","content":"/**\n     * Registers a new set of child\n     * {@link com.elastisys.scale.commons.net.alerter.Alerter}s.\n     *\n     * @param configuration\n     */\n@Override\n    public ServiceStatus getStatus() {\n        return new ServiceStatus.Builder().started(isStarted()).lastFault(this.lastFailure).build();\n    }"} {"path":"downloaded/StandardAlerter.java","method_name":"onAlert","content":"/**\n     * Registers a new set of child\n     * {@link com.elastisys.scale.commons.net.alerter.Alerter}s.\n     *\n     * @param configuration\n     */\n@Override\n    @Subscriber\n    @AllowConcurrentEvents\n    public void onAlert(Alert alert) {\n        requireNonNull(alert, \"alert message cannot be null\");\n\n        if (!isStarted()) {\n            this.logger.debug(\"suppressing alert dispatch, since {} is stopped\", getClass().getSimpleName());\n            return;\n        }\n\n        // dispatch alert through all child alerters\n        try {\n            this.alerter.handleAlert(alert);\n        } catch (Exception e) {\n            this.logger.warn(\"failed to send alert: {}:\\n{}\", alert, e.getMessage(), e);\n        }\n    }"} {"path":"downloaded/StandardAlerter.java","method_name":"effectiveConfig","content":"/**\n     * Returns the effective config which is the currently set configuration, if\n     * one has been set. Otherwise {@link #DEFAULT_ALERTER_CONFIG} is returned.\n     *\n     * @return\n     */\nStandardAlerterConfig effectiveConfig() {\n        if (this.config == null) {\n            return DEFAULT_ALERTER_CONFIG;\n        }\n        return this.config.orElse(DEFAULT_ALERTER_CONFIG);\n    }"} {"path":"downloaded/PrecisePredictor.java","method_name":"fastTick","content":"/**\n     * This method, different from tick, predicts assuming that the robot will attempt\n     * to move infinitely (hit the maximum speed and never break)\n     * <p>\n     * This is usually quicker than tick for wavesurfing because it does not rely\n     * on getNewVelocity() to get the velocity the bot must hit to still be able to break\n     * and stop at the destination. There is no real destination here. You can tick, for\n     * example, while the enemy's wave does not hit you.\n     *\n     * @param last        point predicted in the last tick (or initial point)\n     * @param angle       the absolute angle the bot is trying to move, normalized\n     * @param maxVelocity the maximum velocity the bot should move\n     *                    usually: Physics.MAX_VELOCITY\n     * @return the current predicted point\n     */\npublic static PredictedPoint fastTick(PredictedPoint last, double angle, double maxVelocity) {\n        double offset = R.normalRelativeAngle(angle - last.heading);\n        double turn = BackAsFrontRobot2.getQuickestTurn(offset);\n        int ahead = offset == turn ? +1 : -1;\n\n        double newHeading = getNewHeading(last.heading, turn, last.velocity);\n\n        double newVelocity = getTickVelocity(last.velocity, maxVelocity, ahead, Double.POSITIVE_INFINITY);\n\n        return last.tick(newHeading, newVelocity);\n    }"} {"path":"downloaded/PrecisePredictor.java","method_name":"tick","content":"/**\n     * This method, different from tick, predicts assuming that the robot will attempt\n     * to move infinitely (hit the maximum speed and never break)\n     * <p>\n     * This is usually quicker than tick for wavesurfing because it does not rely\n     * on getNewVelocity() to get the velocity the bot must hit to still be able to break\n     * and stop at the destination. There is no real destination here. You can tick, for\n     * example, while the enemy's wave does not hit you.\n     *\n     * @param last        point predicted in the last tick (or initial point)\n     * @param angle       the absolute angle the bot is trying to move, normalized\n     * @param maxVelocity the maximum velocity the bot should move\n     *                    usually: Physics.MAX_VELOCITY\n     * @return the current predicted point\n     */\npublic  static PredictedPoint tick(PredictedPoint last, double angle, double maxVelocity, double remaining) {\n        double offset = R.normalRelativeAngle(angle - last.heading);\n        double turn = BackAsFrontRobot2.getQuickestTurn(offset);\n        int ahead = offset == turn ? +1 : -1;\n\n        double newHeading = getNewHeading(last.heading, turn, last.velocity);\n\n        double newVelocity = getTickVelocity(last.velocity, maxVelocity, ahead, remaining);\n\n        return last.tick(newHeading, newVelocity);\n    }"} {"path":"downloaded/PrecisePredictor.java","method_name":"getTickVelocity","content":"/**\n     * This method, different from tick, predicts assuming that the robot will attempt\n     * to move infinitely (hit the maximum speed and never break)\n     * <p>\n     * This is usually quicker than tick for wavesurfing because it does not rely\n     * on getNewVelocity() to get the velocity the bot must hit to still be able to break\n     * and stop at the destination. There is no real destination here. You can tick, for\n     * example, while the enemy's wave does not hit you.\n     *\n     * @param last        point predicted in the last tick (or initial point)\n     * @param angle       the absolute angle the bot is trying to move, normalized\n     * @param maxVelocity the maximum velocity the bot should move\n     *                    usually: Physics.MAX_VELOCITY\n     * @return the current predicted point\n     */\npublic static double getTickVelocity(double velocity, double maxVelocity, int ahead, double remaining) {\n        if (ahead < 0) {\n            return -getTickVelocity(-velocity, maxVelocity, -ahead, remaining);\n        }\n\n        return getNewVelocity(velocity, maxVelocity, remaining);\n    }"} {"path":"downloaded/PrecisePredictor.java","method_name":"getNewHeading","content":"/**\n     * This method, different from tick, predicts assuming that the robot will attempt\n     * to move infinitely (hit the maximum speed and never break)\n     * <p>\n     * This is usually quicker than tick for wavesurfing because it does not rely\n     * on getNewVelocity() to get the velocity the bot must hit to still be able to break\n     * and stop at the destination. There is no real destination here. You can tick, for\n     * example, while the enemy's wave does not hit you.\n     *\n     * @param last        point predicted in the last tick (or initial point)\n     * @param angle       the absolute angle the bot is trying to move, normalized\n     * @param maxVelocity the maximum velocity the bot should move\n     *                    usually: Physics.MAX_VELOCITY\n     * @return the current predicted point\n     */\npublic static double getNewHeading(double heading, double turn, double velocity) {\n        double turnRate = Rules.getTurnRateRadians(velocity);\n        return R.normalAbsoluteAngle(heading + R.constrain(-turnRate, turn, +turnRate));\n    }"} {"path":"downloaded/PrecisePredictor.java","method_name":"getNewVelocity","content":"/**\n     * This method, different from tick, predicts assuming that the robot will attempt\n     * to move infinitely (hit the maximum speed and never break)\n     * <p>\n     * This is usually quicker than tick for wavesurfing because it does not rely\n     * on getNewVelocity() to get the velocity the bot must hit to still be able to break\n     * and stop at the destination. There is no real destination here. You can tick, for\n     * example, while the enemy's wave does not hit you.\n     *\n     * @param last        point predicted in the last tick (or initial point)\n     * @param angle       the absolute angle the bot is trying to move, normalized\n     * @param maxVelocity the maximum velocity the bot should move\n     *                    usually: Physics.MAX_VELOCITY\n     * @return the current predicted point\n     */\npublic static double getNewVelocity(double velocity, double maxVelocity, double distance) {\n        if (distance < 0) {\n            // If the distanceToEdges is negative, then change it to be positive\n            // and change the sign of the input velocity and the result\n            return -getNewVelocity(-velocity, maxVelocity, -distance);\n        }\n\n        final double goalVel;\n\n        if (distance == Double.POSITIVE_INFINITY) {\n            goalVel = maxVelocity;\n        } else {\n            goalVel = Math.min(getMaxVelocity(distance), maxVelocity);\n        }\n\n        if (velocity >= 0) {\n            return Math.max(velocity - Rules.DECELERATION, Math.min(goalVel, velocity + Rules.ACCELERATION));\n        }\n        // else\n        return Math.max(velocity - Rules.ACCELERATION, Math.min(goalVel, velocity + maxDecel(-velocity)));\n    }"} {"path":"downloaded/PrecisePredictor.java","method_name":"getMaxVelocity","content":"/**\n     * This method, different from tick, predicts assuming that the robot will attempt\n     * to move infinitely (hit the maximum speed and never break)\n     * <p>\n     * This is usually quicker than tick for wavesurfing because it does not rely\n     * on getNewVelocity() to get the velocity the bot must hit to still be able to break\n     * and stop at the destination. There is no real destination here. You can tick, for\n     * example, while the enemy's wave does not hit you.\n     *\n     * @param last        point predicted in the last tick (or initial point)\n     * @param angle       the absolute angle the bot is trying to move, normalized\n     * @param maxVelocity the maximum velocity the bot should move\n     *                    usually: Physics.MAX_VELOCITY\n     * @return the current predicted point\n     */\nprivate final static double getMaxVelocity(double distance) {\n        final double decelTime = Math.max(1, Math.ceil(\n                (Math.sqrt((4 * 2 / Rules.DECELERATION) * distance + 1) - 1) / 2));\n\n        if (decelTime == Double.POSITIVE_INFINITY) {\n            return Rules.MAX_VELOCITY;\n        }\n\n        final double decelDist = (decelTime / 2.0) * (decelTime - 1)\n                * Rules.DECELERATION;\n\n        return ((decelTime - 1) * Rules.DECELERATION) + ((distance - decelDist) / decelTime);\n    }"} {"path":"downloaded/PrecisePredictor.java","method_name":"maxDecel","content":"/**\n     * This method, different from tick, predicts assuming that the robot will attempt\n     * to move infinitely (hit the maximum speed and never break)\n     * <p>\n     * This is usually quicker than tick for wavesurfing because it does not rely\n     * on getNewVelocity() to get the velocity the bot must hit to still be able to break\n     * and stop at the destination. There is no real destination here. You can tick, for\n     * example, while the enemy's wave does not hit you.\n     *\n     * @param last        point predicted in the last tick (or initial point)\n     * @param angle       the absolute angle the bot is trying to move, normalized\n     * @param maxVelocity the maximum velocity the bot should move\n     *                    usually: Physics.MAX_VELOCITY\n     * @return the current predicted point\n     */\nprivate static double maxDecel(double speed) {\n        double decelTime = speed / Rules.DECELERATION;\n        double accelTime = (1 - decelTime);\n\n        return Math.min(1, decelTime) * Rules.DECELERATION + Math.max(0, accelTime) * Rules.ACCELERATION;\n    }"} {"path":"downloaded/LocalMessage.java","method_name":"successReply","content":"/**\n     * Constructor.\n     * @param code \n     * @param senderId\n     * @param recipientId \n     * @param payload\n     * @throws AceException \n     */\n@Override\n    public Message successReply(int code, CBORObject payload) {\n        return new LocalMessage(\n                code, this.recipientId, this.senderId, payload);\n    }"} {"path":"downloaded/LocalMessage.java","method_name":"failReply","content":"/**\n     * Constructor.\n     * @param code \n     * @param senderId\n     * @param recipientId \n     * @param payload\n     * @throws AceException \n     */\n@Override\n    public Message failReply(int failureReason, CBORObject payload) {\n        return new LocalMessage(\n                failureReason, this.recipientId, this.senderId, payload);\n    }"} {"path":"downloaded/LocalMessage.java","method_name":"getRawPayload","content":"/**\n     * Constructor.\n     * @param code \n     * @param senderId\n     * @param recipientId \n     * @param payload\n     * @throws AceException \n     */\n@Override\n    public byte[] getRawPayload() {\n       return (this.payload == null) \n               ? null : this.payload.EncodeToBytes();\n    }"} {"path":"downloaded/LocalMessage.java","method_name":"getSenderId","content":"/**\n     * Constructor.\n     * @param code \n     * @param senderId\n     * @param recipientId \n     * @param payload\n     * @throws AceException \n     */\n@Override\n    public String getSenderId() {\n        return this.senderId;\n    }"} {"path":"downloaded/LocalMessage.java","method_name":"getParameterNames","content":"/**\n     * Constructor.\n     * @param code \n     * @param senderId\n     * @param recipientId \n     * @param payload\n     * @throws AceException \n     */\n@Override\n    public Set<Short> getParameterNames() {\n        return (this.params == null) \n                ? null : this.params.keySet();\n    }"} {"path":"downloaded/LocalMessage.java","method_name":"getParameter","content":"/**\n     * Constructor.\n     * @param code \n     * @param senderId\n     * @param recipientId \n     * @param payload\n     * @throws AceException \n     */\n@Override\n    public CBORObject getParameter(Short name) {\n        return (this.params == null) \n                ? null : this.params.get(name);\n    }"} {"path":"downloaded/LocalMessage.java","method_name":"getParameters","content":"/**\n     * Constructor.\n     * @param code \n     * @param senderId\n     * @param recipientId \n     * @param payload\n     * @throws AceException \n     */\n@Override\n    public Map<Short, CBORObject> getParameters() {\n        if (this.params == null) {\n            return null;\n        }\n        HashMap<Short, CBORObject> ret = new HashMap<>();\n       ret.putAll(this.params);\n       return ret;\n    }"} {"path":"downloaded/LocalMessage.java","method_name":"getMessageCode","content":"/**\n     * Constructor.\n     * @param code \n     * @param senderId\n     * @param recipientId \n     * @param payload\n     * @throws AceException \n     */\n@Override\n    public int getMessageCode() {\n        return this.code;\n    }"} {"path":"downloaded/LocalMessage.java","method_name":"toString","content":"/**\n     * Constructor.\n     * @param code \n     * @param senderId\n     * @param recipientId \n     * @param payload\n     * @throws AceException \n     */\n@Override\n    public String toString() {\n        if (this.payload == null && this.params == null) {\n            return \"SenderId: \" + this.senderId;\n        }\n        return \"SenderId: \" + this.senderId + \" Parameters: \"\n                + ((this.params == null)? \n                        this.payload.toString() : this.params.toString());\n    }"} {"path":"downloaded/AgentService.java","method_name":"login","content":"/**\n     * agent login method\n     * request method : PUT\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/onlineagent/{agentid}\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * and {agentid} indicates the work ID of an agent.\n     * \n     * The following provides an example of the request message body of this interface:\n     * {\"password\":\"\",\"phonenum\":\"40038\",\"status\":\"4\",\"releasephone\":\"false\",\"agenttype\":\"4\"}\n     */\npublic static String login(String workNo, String password, String phonenum,boolean isAutoanswer)\n    {\n        log.info(workNo + \" : login begin.\");\n        \n        String url = prefix+\"onlineagent/\"+workNo;      //请求路径\n        \n        \n        String resp = \"\";\n        \n        Map<String, Object> loginParam = new HashMap<String, Object>();        \n        loginParam.put(\"password\",password);            // Indicates the password of an agent.\n        loginParam.put(\"phonenum\",phonenum);            // Indicates the phone number of an agent.\n        loginParam.put(\"autoanswer\",isAutoanswer);      // Indicates whether automatic answering is enabled. The default value is true.\n        loginParam.put(\"autoenteridle\",false);          // Indicates whether to enter the idle state automatically. The default value is true.\n                                                        // if the value is false,the agent enter work state after login.\n        loginParam.put(\"status\",4);                     // Indicates the status of an agent right after the agent is logged in.\n                                                        // The default status is idle.4:idle 5:wrap-up\n        loginParam.put(\"releasephone\", true);           // Indicates whether an agent can receive a new call without hanging up when the last call \n                                                        // is released. The default value is false.\n        loginParam.put(\"ip\",localIP);                   // Indicates the IP address of an agent. The default ip is 127.0.01.\n        /*\n         * The following provides an example of the response message body of this interface:\n         * {\"message\":\"\",\"retcode\":\"0\",\"result\":{\"vdnid\":1,\"workno\":\"291\",\"mediatype\":\"TTF\",\"loginTime\":\"1471585949806\",\n         * \"isForceChange\":\"false\"}}\n         */\n        Map<String, Object> result = Request.put(workNo,url, loginParam);\n        \n        try\n        {\n        \tString sendmsg = StringUtils.beanToJson(loginParam);\n        \tlog.debug(workNo+\" request URL : \"+url);\n        \tlog.debug(workNo+\" request message : \"+sendmsg);\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e) \n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        if (\"0\".equals(result.get(\"retcode\")))\n        {\n        \tGlobalObjects.loginedMap.put(workNo, new ProcessMessageQueue());   // create a event queue for every logged in agent\n        \tGetAgentEventThread thread = new GetAgentEventThread(workNo);      // create a get event thread for every logged in agent\n\t\t\tthreads.submit(thread);\n\t\t\tGlobalObjects.eventThreadMap.put(workNo, thread);\n\t\t\t\n            log.info(workNo + \" login success\");\n        }\n        else \n        {\n            log.info(workNo + \" login failed ---\" + resp);\n        }        \n        log.info(workNo + \" : login end.\");\n        return res"} {"path":"downloaded/AgentService.java","method_name":"ic String ","content":"   \n    /**\n     * agent force login method\n     * request method : PUT\n     * \n     * request URL：http(s)://ip:port/agentgateway/resource/onlineagent/{agentid}/forcelogin\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * and {agentid} indicates the work ID of an agent.\n     * \n     * The following provides an example of the request message body of this interface:\n     * {\"password\":\"\",\"phonenum\":\"40038\",\"status\":\"4\",\"releasephone\":\"false\",\"agenttype\":\"4\n   */\n    public static String forceLogin(String workNo, String password, String phonenum,boolean isAutoanswer)\n    {\n        log.info(workNo + \" : forcelogin begin.\");\n        \n        String url = prefix+\"onlineagent/\"+workNo+\"/forcelogin\";\n        String resp = \"\";\n        \n        Map<String, Object> loginParam = new HashMap<String, Object>();       \n        loginParam.put(\"password\",password);            // Indicates the password of an agent.\n        loginParam.put(\"phonenum\",phonenum);            // Indicates the phone number of an agent.\n        loginParam.put(\"autoanswer\",isAutoanswer);      // Indicates whether automatic answering is enabled. The default value is true.\n        loginParam.put(\"autoenteridle\",false);          // Indicates whether to enter the idle state automatically. The default value is true.\n                                                        // if the value is false,the agent enter work state after login.\n        loginParam.put(\"status\",4);                     // Indicates the status of an agent right after the agent is logged in.\n                                                        // The default status is idle.4:idle 5:wrap-up\n        loginParam.put(\"releasephone\", true);           // Indicates whether an agent can receive a new call without hanging up when the last call \n                                                        // is released. The default value is false.\n        loginParam.put(\"ip\",localIP);                   // Indicates the IP address of an agent. The default ip is 127.0.01.\n        /*\n         * The following provides an example of the response message body of this interface:\n         * {\"message\":\"\",\"retcode\":\"0\",\"result\":{\"vdnid\":1,\"workno\":\"291\",\"mediatype\":\"TTF\",\"loginTime\":\"1471585949806\",\n         * \"isForceChange\":\"false\"}}\n         */\n        Map<String, Object> result = Request.put(workNo,url, loginParam);\n        try\n        {\n        \tString sendmsg = StringUtils.beanToJson(loginParam);\n        \tlog.debug(workNo+\" request URL : \"+url);\n        \tlog.debug(workNo+\" request message : \"+sendmsg);\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e) \n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        if (\"0\".equals(result.get(\"retcode\")))\n        {\n        \tGlobalObjects.loginedMap.put(workNo, new ProcessMessageQueue());   // create a event queue for every logged in agent\n        \tGetAgentEventThread thread = new GetAgentEventThread(workNo);      // create a get event thread for every logged in agent\n\t\t\tthreads.submit(thread);\n\t\t\tGlobalObjects.eventThreadMap.put(workNo, thread);\n            log.info(workNo + \" forcelogin success\");\n        }\n        else \n        {\n            log.info(workNo + \" login failed ---\" + resp);\n            GlobalObjects.loginedMap.remove(workNo);\n        }\n        log.info(workNo + \" : forcelogin end.\");\n        return r"} {"path":"downloaded/AgentService.java","method_name":"ic Str","content":"   \n    /**\n     * agent force login method\n     * request method : PUT\n     * \n     * request URL：http(s)://ip:port/agentgateway/resource/onlineagent/{agentid}/forcelogin\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * and {agentid} indicates the work ID of an agent.\n     * \n     * The following provides an example of the request message body of this interface:\n     * {\"password\":\"\",\"phonenum\":\"40038\",\"status\":\"4\",\"releasephone\":\"false\",\"agenttype\":\"4\n   */\n    public static String logout(String workNo)\n    {\n        log.info(workNo + \" : logout begin.\");\n        \n        String url = prefix+\"onlineagent/\"+workNo+\"/logout\";\n        String resp = \"\";\n        /*\n         * The following provides an example of the response message body of this interface:\n         * {\"message\":\"\",\"retcode\":\"0\"}\n         */\n        Map<String, Object> result = Request.delete(workNo,url,null);\n        \n        try\n        {        \t\n        \tlog.debug(workNo+\" request URL : \"+url);        \t\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e) \n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        if (\"0\".equals(result.get(\"retcode\")))\n        {\n        \tclearResourse(workNo);\n            log.info(workNo + \" logout success\");\n        }\n        else \n        {\n            log.info(workNo + \" logout failed ---\" + resp);\n        }\n        log.info(workNo + \" : logout end.\");\n        return r"} {"path":"downloaded/AgentService.java","method_name":"ic St","content":"\n    \n    /**\n     * agent set ready method \n     * request method : POST\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/onlineagent/{agentid}/sayfree\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * and {agentid} indicates the work ID of an agen\n   */\n    public static String ready(String workNo)\n    {\n        log.info(workNo + \" : set ready begin.\");\n        \n        String url = prefix+\"onlineagent/\"+workNo+\"/sayfree\";\n        \n        String resp = \"\";\n        \n        /*\n         * The following provides an example of the response message body of this interface:\n         * {\"message\":\"\",\"retcode\":\"0\"}\n         */\n        Map<String, Object> result = Request.post(workNo,url, null);\n        \n        try\n        {\n        \tlog.debug(workNo+\" request URL : \"+url);        \t\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e) \n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        log.info(workNo + \" : set ready end.\");\n        return r"} {"path":"downloaded/AgentService.java","method_name":"ic S","content":"\n    \n    /**\n     * agent set busy method\n     * request method : POST\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/onlineagent/{agentid}/saybusy?reason={reason}\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * and {agentid} indicates the work ID of an agent.{reason}indicates the busy cause code (the value ranges from 200 to 250. \n     * If the value is set to 0 or the no-transfer reason, the busy cause code is not set\n   */\n    public static String busy(String workNo)\n    {\n        log.info(workNo + \" : set busy begin.\");\n        \n        String url = prefix+\"onlineagent/\"+workNo+\"/saybusy\";\n        \n        String resp = \"\";\n        \n        /*\n         * The following provides an example of the response message body of this interface:\n         * {\"message\":\"\",\"retcode\":\"0\"}\n         */\n        Map<String, Object> result = Request.post(workNo,url, null);\n        \n        try\n        {\n        \tlog.debug(workNo+\" request URL : \"+url);        \t\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e) \n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        log.info(workNo + \" : set busy end.\");\n        return r"} {"path":"downloaded/AgentService.java","method_name":"ic S","content":"\n    \n    /**\n     * agent enter working state method\n     * request method : POST\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/onlineagent/{agentid}/work\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * and {agentid} indicates the work ID of an agen\n   */\n    public static String work(String workNo)\n    {\n        log.info(workNo + \" : enter work begin.\");\n        \n        String url = prefix+\"onlineagent/\"+workNo+\"/work\";\n        \n        String resp = \"\";\n        \n        /*\n         * The following provides an example of the response message body of this interface:\n         * {\"message\":\"\",\"retcode\":\"0\"}\n         */\n        Map<String, Object> result = Request.post(workNo,url, null);\n        \n        try\n        {\n        \tlog.debug(workNo+\" request URL : \"+url);        \t\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e) \n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        log.info(workNo + \" : enter work end.\");\n        return r"} {"path":"downloaded/AgentService.java","method_name":"ic Stri","content":"\n    \n    /**\n     * agent quit working state method\n     * request method : POST\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/onlineagent/{agentid}/cancelwork\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * and {agentid} indicates the work ID of an agen\n   */\n    public static String outwork(String workNo)\n    {\n        log.info(workNo + \" : cancle work begin.\");\n        \n        String url = prefix+\"onlineagent/\"+workNo+\"/cancelwork\";\n        \n        String resp = \"\";\n        \n        /*\n         * The following provides an example of the response message body of this interface:\n         * {\"message\":\"\",\"retcode\":\"0\"}\n         */\n        Map<String, Object> result = Request.post(workNo,url, null);\n        \n        try\n        {\n        \tlog.debug(workNo+\" request URL : \"+url);        \t\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e) \n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        log.info(workNo + \" : cancle work end.\");\n        return r"} {"path":"downloaded/AgentService.java","method_name":"ic String r","content":"\n    \n    /**\n     * agent reset skill method\n     * request method : POST\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/onlineagent/{agentid}/resetskill/{autoflag}?skillid={skillid}&phonelinkage={phonelinkage}\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * {agentid} indicates the work ID of an agent, {autoflag} indicates the skill sign-in mode (value true indicates automatic signing in to agent \n     * configured skills, value false indicates manual signing in to agent configured skills, and other values are regarded as false), \n     * {skillid} indicates the skill queue ID (when sign-in mode is set to false, skillid is not a mandatory string-group parameter, for example, 1;2;3, \n     * and the agent signed-in skill queue is the intersection of skillid and configured skills and the maximum length is 100), \n     * and {phonelinkage} indicates whether phone linkage is enabled (the value 1 indicates that phone linkage is enabled and the value 0 indicates \n     * that phone linkage is disabled\n   */\n    public static String resetSkills(String workNo)\n    {\n        log.info(workNo + \" : reset skill begin.\");\n        \n        String url = prefix+\"onlineagent/\"+workNo+\"/resetskill/true\";\n        \n        String resp = \"\";\n        \n        /*\n         * The following provides an example of the response message body of this interface:\n         * {\"message\":\"\",\"retcode\":\"0\"}\n         */\n        Map<String, Object> result = Request.post(workNo,url, null);\n        \n        try\n        {\n        \tlog.debug(workNo+\" request URL : \"+url);        \t\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e) \n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        log.info(workNo + \" : reset skill end.\");\n        return r"} {"path":"downloaded/AgentService.java","method_name":"ic String v","content":"\n    \n    /**\n     * agent answer voice call method\n     * request method : PUT\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/voicecall/{agentid}/answer\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * and {agentid} indicates the work ID of an agen\n   */\n    public static String voiceAnswer(String workNo)\n    {\n        log.info(workNo + \" : voicecall answer begin.\");\n        \n        String url = prefix+\"voicecall/\"+workNo+\"/answer\";\n        \n        String resp = \"\";\n        \n        /*\n         * The following provides an example of the response message body of this interface:\n         * {\"message\":\"\",\"retcode\":\"0\"}\n         */\n        Map<String, Object> result = Request.put(workNo,url, null);\n        \n        try\n        {\n        \tlog.debug(workNo+\" request URL : \"+url);        \t\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e) \n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        \n        if (\"0\".equals(result.get(\"retcode\")))\n        {\n            log.info(workNo + \" call success\");\n        }\n        else \n        {\n            log.info(workNo + \" call failed ---\" + resp);\n        }\n        log.info(workNo + \" : voicecall answer end.\");\n        return r"} {"path":"downloaded/AgentService.java","method_name":"ic String vo","content":"\n    \n    /**\n     * agent release voice call method\n     * request method : DELETE\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/voicecall/{agentid}/release\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * and {agentid} indicates the work ID of an agen\n   */\n    public static String voiceRelease(String workNo)\n    {\n        log.info(workNo + \" : release voicecall begin.\");\n        \n        String url = prefix+\"voicecall/\"+workNo+\"/release\";\n        \n        String resp = \"\";\n        \n        /*\n         * The following provides an example of the response message body of this interface:\n         * {\"message\":\"\",\"retcode\":\"0\"}\n         */\n        Map<String,Object> result = Request.delete(workNo,url,null);\n        try\n        {\n        \tlog.debug(workNo+\" request URL : \"+url);        \t\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e)\n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        if (\"0\".equals(result.get(\"retcode\")))\n        {\n            log.info(workNo + \" release success\");\n        }\n        else \n        {\n            log.info(workNo + \" release failed ---\" + resp);\n        }\n        log.info(workNo + \" : release voicecall end.\");\n        return r"} {"path":"downloaded/AgentService.java","method_name":"ic S","content":"\n    \n    /**\n     * agent hold voice call method\n     * request method : POST\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/voicecall/{agentid}/hold\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * and {agentid} indicates the work ID of an agen\n   */\n    public static String hold(String workNo)\n    {\n        log.info(workNo + \" : hold voiceCall begin.\");\n        \n        String url = prefix+\"voicecall/\"+workNo+\"/hold\";\n        \n        String resp = \"\";\n        \n        /*\n         * The following provides an example of the response message body of this interface:\n         * {\"message\":\"\",\"retcode\":\"0\"}\n         */\n        Map<String,Object> result = Request.post(workNo,url, null);\n        \n        try\n        {\n        \tlog.debug(workNo+\" request URL : \"+url);        \t\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e)\n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        log.info(workNo + \" : hold voicecall end.\");\n        return r"} {"path":"downloaded/AgentService.java","method_name":"ic String g","content":"\n    \n    /**\n     * agent get hold list method\n     * request method : GET\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/calldata/{agentid}/holdlist\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * and {agentid} indicates the work ID of an agen\n   */\n    public static String getHoldList(String workNo)\n    {\n        log.info(workNo + \" : get hold list begin.\");\n        \n        String url = prefix+\"calldata/\"+workNo+\"/holdlist\";\n        \n        String resp = \"\";\n        \n        /*\n         * The following provides an example of the response message body of this interface:\n         * {\"message\":\"\",\"retcode\":\"0\"}\n         */\n        Map<String,Object> result = Request.get(workNo,url);\n        \n        try\n        {\n            log.debug(workNo+\" request URL : \"+url);            \n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e)\n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        log.info(workNo + \" : get hold list end.\");\n        return r"} {"path":"downloaded/AgentService.java","method_name":"ic Stri","content":"\n    \n    /**\n     * agent cancel hold voice call method\n     * request method : POST\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/voicecall/{agentid}/gethold?callid={callid}\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway,\n     * {agentid} indicates the work ID of an agent, and {callid} indicates the unique call I\n   */\n    public static String getHold(String workNo,String callId)\n    { \n\t    log.info(workNo + \" : gethold voiceCall begin.\");\n\t    \n\t    String url = prefix+\"voicecall/\"+workNo+\"/gethold?callid=\"+callId;\n\t    \n\t    String resp = \"\";\n\t    \n\t    /*\n\t     * The following provides an example of the response message body of this interface:\n\t     * {\"message\":\"\",\"retcode\":\"0\"}\n\t     */\n\t    Map<String,Object> result = Request.post(workNo,url, null);\n\t    try\n\t    {\n\t    \tlog.debug(workNo+\" request URL : \"+url);        \t\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n\t    }\n\t    catch (IOException e)\n\t    {\n\t        log.warn(\"result is not variable\" + e.getMessage());\n\t    }\n\t    log.info(workNo + \" : get hold voicecall end.\");\n\t    return r"} {"path":"downloaded/AgentService.java","method_name":"ic S","content":"\n    \n    /**\n     * agent mute an ongoing call\n     * request method : POST\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/voicecall/{agentid}/beginmute\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * and {agentid} indicates the work ID of an agen\n   */\n    public static String mute(String workNo)\n    {\n    \tlog.info(workNo + \" : mute voiceCall begin.\");\n    \t\n \t    String url = prefix+\"voicecall/\"+workNo+\"/beginmute\";\n \t    \n \t    String resp = \"\";\n \t    \n \t   /*\n\t     * The following provides an example of the response message body of this interface:\n\t     * {\"message\":\"\",\"retcode\":\"0\"}\n\t     */\n \t    Map<String,Object> result = Request.post(workNo,url, null);\n \t    try\n \t    {\n \t    \tlog.debug(workNo+\" request URL : \"+url);        \t\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n \t    }\n \t    catch (IOException e)\n \t    {\n \t        log.warn(\"result is not variable\" + e.getMessage());\n \t    }\n \t    log.info(workNo + \" : mute voicecall end.\");\n \t    return r"} {"path":"downloaded/AgentService.java","method_name":"ic String ","content":"\n    \n    /**\n     * agent cancel mute a muted call\n     * request method : POST\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/voicecall/{agentid}/endmute\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * and {agentid} indicates the work ID of an agen\n   */\n    public static String cancleMute(String workNo)\n    {\n    \tlog.info(workNo + \" : cancle mute voiceCall begin.\");\n    \t\n \t    String url = prefix+\"voicecall/\"+workNo+\"/endmute\";\n \t    \n \t    String resp = \"\";\n \t    \n \t   /*\n \t     * The following provides an example of the response message body of this interface:\n \t     * {\"message\":\"\",\"retcode\":\"0\"}\n \t     */\n \t    Map<String,Object> result = Request.post(workNo,url, null);\n \t    try\n \t    {\n \t    \tlog.debug(workNo+\" request URL : \"+url);        \t\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n \t    }\n \t    catch (IOException e)\n \t    {\n \t        log.warn(\"result is not variable\" + e.getMessage());\n \t    }\n \t    log.info(workNo + \" : cancle mute voicecall end.\");\n \t    return r"} {"path":"downloaded/AgentService.java","method_name":"ic String voic","content":"\n    \n    /**\n     * agent make an internal voice call method\n     * request method : PUT\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/voicecall/{agentid}/callinner\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway,\n     * and {agentid} indicates the work ID of an agent.\n     * \n     * The following provides an example of the request message body of this interface:\n     * {\"caller\":\"40038\",\"called\":\"40040\",\"skillid\":25,\"callappdata\":\"\",\"callcontrolid\":0,\"mediaability\":\n   */\n    public static String voicecallInner(String workNo,String called)\n    {\n    \tlog.info(workNo + \" : voicecall inner begin.\");\n    \t\n \t    String url = prefix+\"voicecall/\"+workNo+\"/callinner\";\n \t    \n \t    Map<String, Object> callInnerParam = new HashMap<String, Object>();\n \t    callInnerParam.put(\"called\", called);  //called ID\n \t    String resp = \"\";\n \t    \n \t   /*\n \t     * The following provides an example of the response message body of this interface:\n \t     * {\"message\":\"\",\"retcode\":\"0\",\"result\":\"1455885056-1095\"}\n \t     */\n \t    Map<String,Object> result = Request.put(workNo,url, callInnerParam);\n \t    try\n \t    {\n \t    \tString sendmsg = StringUtils.beanToJson(callInnerParam);\n        \tlog.debug(workNo+\" request URL : \"+url);\n        \tlog.debug(workNo+\" request message : \"+sendmsg);\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n \t    }\n \t    catch (IOException e)\n \t    {\n \t        log.warn(\"result is not variable\" + e.getMessage());\n \t    }\n \t    log.info(workNo + \" : voicecall inner end.\");\n \t    return resp; "} {"path":"downloaded/AgentService.java","method_name":"ic String voiceCal","content":"\n    \n    /**\n     * agent make a three-party call based on an ongoing call and a held call\n     * request method : POST\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/voicecall/{agentid}/confjoin\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * and {agentid} indicates the work ID of an agent.\n     * \n     * The following provides an example of the request message body of this interface:\n     * {\"callid\":\"1455885056-1095\", \"callappdata\":\"\n   */\n    public static String voiceCallThreePart(String workNo,String callid)\n    {\n        log.info(workNo + \" : three part voiceCall begin.\");\n        \n        String url = prefix+\"voicecall/\"+workNo+\"/confjoin\";\n        \n        Map<String, Object> threePartCallParam = new HashMap<String, Object>();\n        threePartCallParam.put(\"callid\", callid);// called NUM\n        \n        String resp = \"\";\n        \n        /*\n         * The following provides an example of the response message body of this interface:\n         * {\"message\":\"\",\"retcode\":\"0\",\"result\":\"1455885056-1095\"}\n         */\n        Map<String,Object> result = Request.post(workNo,url, threePartCallParam);\n        try\n        {\n            String sendmsg = StringUtils.beanToJson(threePartCallParam);\n            log.debug(workNo+\" request URL : \"+url);\n            log.debug(workNo+\" request message : \"+sendmsg);\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e)\n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        log.info(workNo + \" : three part voicecall end.\");\n        return r"} {"path":"downloaded/AgentService.java","method_name":"ic String voic","content":"\n    \n    /**\n     * agent ask for inner help\n     * request method : POST\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/voicecall/{agentid}/innerhelp\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * and {agentid} indicates the work ID of an agent.\n     * \n     * The following provides an example of the request message body of this interface:\n     * {\"dstaddress\":49997, \"devicetype\":2, \"mode\":1, \"callappdata\":\"\n   */\n    public static String voiceInnerHelp(String workNo,String dstaddress,int devicetype,int mode)\n    {\n        log.info(workNo + \" : inner help begin.\");\n        \n        String url = prefix+\"voicecall/\"+workNo+\"/innerhelp\";\n        \n        Map<String, Object> innerHelpParam = new HashMap<String, Object>();\n        innerHelpParam.put(\"dstaddress\", dstaddress);\n        innerHelpParam.put(\"devicetype\", devicetype);\n        innerHelpParam.put(\"mode\", mode);\n        \n        String resp = \"\";\n        \n        /*\n         * The following provides an example of the response message body of this interface:\n         * {\"message\":\"\",\"retcode\":\"0\",\"result\":\"1455885056-1095\"}\n         */\n        Map<String,Object> result = Request.post(workNo,url, innerHelpParam);\n        try\n        {\n            String sendmsg = StringUtils.beanToJson(innerHelpParam);\n            log.debug(workNo+\" request URL : \"+url);\n            log.debug(workNo+\" request message : \"+sendmsg);\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e)\n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        log.info(workNo + \" : inner help end.\");\n        return r"} {"path":"downloaded/AgentService.java","method_name":"ic String vo","content":"\n    \n    /**\n     * agent make an outgoing voice call method\n     * request method : PUT\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/voicecall/{agentid}/callout\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * and {agentid} indicates the work ID of an agent.\n     * \n     * The following provides an example of the request message body of this interface:\n     * {\"caller\":\"40038\",\"called\":\"40040\",\"skillid\":25,\"callappdata\":\"\",\"callcontrolid\":0,\"mediaability\":\n   */\n    public static String voicecallOut(String workNo,String called)\n    {\n        log.info(workNo + \" : callout voiceCall begin.\");\n        \n        String url = prefix+\"voicecall/\"+workNo+\"/callout\";\n        \n        Map<String, Object> callOutParam = new HashMap<String, Object>();\n        callOutParam.put(\"called\", called);// called NUM\n        \n        String resp = \"\";\n        \n        /*\n         * The following provides an example of the response message body of this interface:\n         * {\"message\":\"\",\"retcode\":\"0\",\"result\":\"1455885056-1095\"}\n         */\n        Map<String,Object> result = Request.put(workNo,url, callOutParam);\n        try\n        {\n        \tString sendmsg = StringUtils.beanToJson(callOutParam);\n        \tlog.debug(workNo+\" request URL : \"+url);\n        \tlog.debug(workNo+\" request message : \"+sendmsg);\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e)\n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        log.info(workNo + \" : callout voicecall end.\");\n        return r"} {"path":"downloaded/AgentService.java","method_name":"ic String voiceTr","content":"\n    \n    /**\n     * agent transfer a voice call to another agent method\n     * request method : POST\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/voicecall/{agentid}/transfer\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * and {agentid} indicates the work ID of an agent.\n     * \n     * The following provides an example of the request message body of this interface:\n     * {\"devicetype\":2,\"mode\":3,\"address\":\"49998\",\"callappdata\":\"\",\"caller\":\"40040\",\"mediaability\":\n   */\n    public static String voiceTranstoagent(String workNo , String address)\n    {\n    \tlog.info(workNo + \" : transfer voiceCall to agent begin.\");\n    \t\n        String url = prefix+\"voicecall/\"+workNo+\"/transfer\";\n        \n        Map<String, Object> transferParam = new HashMap<String, Object>();\n        transferParam.put(\"devicetype\", 2);\n        transferParam.put(\"mode\", 3);\n        transferParam.put(\"address\", address);\n        \n        String resp = \"\";\n        \n        /*\n         * The following provides an example of the response message body of this interface:\n         * {\"message\":\"\",\"retcode\":\"0\"}\n         */\n        Map<String,Object> result = Request.post(workNo,url, transferParam);\n        try\n        {\n        \tString sendmsg = StringUtils.beanToJson(transferParam);\n        \tlog.debug(workNo+\" request URL : \"+url);\n        \tlog.debug(workNo+\" request message : \"+sendmsg);\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e)\n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        log.info(workNo + \" : transfer voicecall to agent end.\");\n        return r"} {"path":"downloaded/AgentService.java","method_name":"ic String voiceTra","content":"\n    \n    /**\n     * agent transfer a voice call to a skill method\n     * request method : POST\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/voicecall/{agentid}/transfer\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * and {agentid} indicates the work ID of an agent.\n     * \n     * The following provides an example of the request message body of this interface:\n     * {\"devicetype\":2,\"mode\":3,\"address\":\"49998\",\"callappdata\":\"\",\"caller\":\"40040\",\"mediaability\":\n   */\n    public static String voiceTranstoskills(String workNo , String address)\n    {\n    \tlog.info(workNo + \" : transfer voiceCall to skill begin.\");\n    \t\n        String url = prefix+\"voicecall/\"+workNo+\"/transfer\";\n        \n        Map<String, Object> transferParam = new HashMap<String, Object>();\n        transferParam.put(\"devicetype\", 1);\n        transferParam.put(\"mode\", 2);\n        transferParam.put(\"address\", address);\n        \n        String resp = \"\";\n        \n        /*\n         * The following provides an example of the response message body of this interface:\n         * {\"message\":\"\",\"retcode\":\"0\"}\n         */\n        Map<String,Object> result = Request.post(workNo,url, transferParam);\n        try\n        {\n        \tString sendmsg = StringUtils.beanToJson(transferParam);\n        \tlog.debug(workNo+\" request URL : \"+url);\n        \tlog.debug(workNo+\" request message : \"+sendmsg);\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e)\n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        log.info(workNo + \" : transfer voicecall to skill end.\");\n        return r"} {"path":"downloaded/AgentService.java","method_name":"ic String ","content":"\n    \n    /**\n     * agent answer a text chat method\n     * request method : PUT\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/textchat/{workno}/answer/{callid}\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * {workno} indicates the work ID of an agent, and {callid} indicates the ID of the text chat sessio\n   */\n    public static String textAnswer(String workNo,String callId)\n    {\n    \tlog.info(workNo+\" : answer textChat begin.\");\n    \t\n    \tString url = prefix+\"textchat/\"+workNo+\"/answer/\"+callId;\n    \t\n    \tString resp = \"\";\n    \t\n    \t/*\n    \t * The following provides an example of the response message body of this interface:\n    \t * {\"message\":\"\",\"retcode\":\"0\",\"result\":\"1455961792-16777554\"}\n    \t */\n    \tMap<String,Object> result = Request.put(workNo,url, null);\n    \ttry\n        {\n        \tlog.debug(workNo+\" request URL : \"+url);\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e)\n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        log.info(workNo + \" : answer textChat end.\");\n        return r"} {"path":"downloaded/AgentService.java","method_name":"ic Strin","content":"\n    \n    /**\n     * agent terminate a text chat method\n     * request method : DELETE\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/textchat/{workno}/drop/{callid}\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * {workno} indicates the work ID of an agent, and {callid} indicates the ID of the text chat sessio\n   */\n    public static String textDrop(String workNo,String callId)\n    {\n    \tlog.info(workNo+\" : drop textChat begin.\");\n    \t\n    \tString url = prefix+\"textchat/\"+workNo+\"/drop/\"+callId;\n    \t\n    \tString resp = \"\";\n    \t\n    \t/*\n    \t * The following provides an example of the response message body of this interface:\n    \t * {\"message\":\"\",\"retcode\":\"0\",\"result\":\"1455961792-16777554\"}\n    \t */\n    \tMap<String,Object> result = Request.delete(workNo,url, null);\n    \ttry\n        {\n    \t\tlog.debug(workNo+\" request URL : \"+url);\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e)\n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        log.info(workNo + \" : drop textChat end.\");\n        return r"} {"path":"downloaded/AgentService.java","method_name":"ic String textS","content":"\n    \n    /**\n     * agent send a text message method\n     * request method : PUT\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/textchat/{workno}/chatmessage\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * and {workno} indicates the work ID of an agen\n   */\n    public static String textSendmessage(String workNo,String callId,String content)\n    {\n    \tlog.info(workNo+\" : textChat send message begin.\");\n    \t\n    \tString url = prefix+\"textchat/\"+workNo+\"/chatmessage/\";\n    \t\n    \tMap<String, Object> chatmessage = new HashMap<String, Object>();\n    \tchatmessage.put(\"callId\", callId);\n    \tchatmessage.put(\"content\", content);\n    \t\n    \tString resp = \"\";\n    \t\n    \t/*\n    \t * The following provides an example of the response message body of this interface:\n    \t * {\"message\":\"\",\"retcode\":\"0\",\"result\":\"1455961792-16777554\"}\n    \t */\n    \tMap<String,Object> result = Request.put(workNo,url, chatmessage);\n    \ttry\n        {\n    \t\tString sendmsg = StringUtils.beanToJson(chatmessage);\n        \tlog.debug(workNo+\" request URL : \"+url);\n        \tlog.debug(workNo+\" request message : \"+sendmsg);\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e)\n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        log.info(workNo + \" : textChat send message end.\");\n        return r"} {"path":"downloaded/AgentService.java","method_name":"ic String tex","content":"\n    \n    /**\n     * agent request an internal text chat method\n     * request method : PUT\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/textchat/{workno}/internalcall/{destno}\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway,\n     * {workno} indicates the work ID of an agent, and {destno} indicates the called work ID\n   */\n    public static String textCallinner(String workNo,String called)\n    {\n    \tlog.info(workNo+\" : inner textChat begin.\");\n    \t\n    \tString url = prefix+\"textchat/\"+workNo+\"/internalcall/\"+called;\n    \t\n    \tString resp = \"\";\n    \t\n    \t/*\n    \t * The following provides an example of the response message body of this interface:\n    \t * {\"message\":\"\",\"retcode\":\"0\",\"result\":\"49999\"}\n    \t */\n    \tMap<String,Object> result = Request.put(workNo,url, null);\n    \ttry\n        {\n    \t\tlog.debug(workNo+\" request URL : \"+url);\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e)\n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        log.info(workNo + \" : inner textChat end.\");\n        return r"} {"path":"downloaded/AgentService.java","method_name":"ic String textTr","content":"\n    \n    /**\n     * agent transfer a text chat to another agent\n     * request method : POST\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/textchat/{workno}/transfer/\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * and {workno} indicates the work ID of an agent.\n     * \n     * The following provides an example of the request message body of this interface:\n     * {\"addesstype\":1,\"destaddr\":\"291\",\"callid\":\"1456108492-16777565\",\"attachdata\":\"\n   */\n    public static String textTranstoAgent(String workNo , String address, String callId)\n    {\n    \tlog.info(workNo + \" : transfer textChat to agent begin.\");\n    \t\n        String url = prefix+\"textchat/\"+workNo+\"/transfer\";\n        \n        Map<String, Object> transferParam = new HashMap<String, Object>();\n        transferParam.put(\"addesstype\", 1);\n        transferParam.put(\"destaddr\", address);\n        transferParam.put(\"callid\", callId);\n        \n        String resp = \"\";\n        \n        /*\n         * The following provides an example of the response message body of this interface:\n         * {\"message\":\"\",\"retcode\":\"0\"}\n         */\n        Map<String,Object> result = Request.post(workNo,url, transferParam);\n        try\n        {\n        \tString sendmsg = StringUtils.beanToJson(transferParam);\n        \tlog.debug(workNo+\" request URL : \"+url);\n        \tlog.debug(workNo+\" request message : \"+sendmsg);\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e)\n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        log.info(workNo + \" : transfer textChat to agent end.\");\n        return r"} {"path":"downloaded/AgentService.java","method_name":"ic String textTra","content":"\n    \n    /**\n     * agent transfer a text chat to skill\n     * request method : POST\n     * \n     * request URL : http(s)://ip:port/agentgateway/resource/textchat/{workno}/transfer/\n     * In this URL, ip indicates the IP address of the Agent Gateway, port indicates the HTTP or HTTPS port number of the Agent Gateway, \n     * and {workno} indicates the work ID of an agent.\n     * \n     * The following provides an example of the request message body of this interface:\n     * {\"addesstype\":1,\"destaddr\":\"291\",\"callid\":\"1456108492-16777565\",\"attachdata\":\"\n   */\n    public static String textTranstoSkills(String workNo , String address, String callId)\n    {\n    \tlog.info(workNo + \" : transfer textChat to skill begin.\");\n    \t\n        String url = prefix+\"textchat/\"+workNo+\"/transfer\";\n        \n        Map<String, Object> transferParam = new HashMap<String, Object>();\n        transferParam.put(\"addesstype\", 10);\n        transferParam.put(\"destaddr\", address);\n        transferParam.put(\"callid\", callId);\n        \n        String resp = \"\";\n        \n        /*\n         * The following provides an example of the response message body of this interface:\n         * {\"message\":\"\",\"retcode\":\"0\"}\n         */\n        Map<String,Object> result = Request.post(workNo,url, transferParam);\n        try\n        {\n        \tString sendmsg = StringUtils.beanToJson(transferParam);\n        \tlog.debug(workNo+\" request URL : \"+url);\n        \tlog.debug(workNo+\" request message : \"+sendmsg);\n            resp = StringUtils.beanToJson(result);\n            log.debug(workNo+\" receive message : \"+resp);\n        }\n        catch (IOException e)\n        {\n            log.warn(\"result is not variable\" + e.getMessage());\n        }\n        log.info(workNo + \" : transfer textChat to skill end.\");\n        return r"} {"path":"downloaded/LinkedInPosition.java","method_name":"getId","content":"/**\n\t * Title of this position\n\t */\npublic int getId() {\n\t\treturn id;\n\t}"} {"path":"downloaded/LinkedInPosition.java","method_name":"getCompany","content":"/**\n\t * Title of this position\n\t */\npublic LinkedInCompany getCompany() {\n\t\treturn company;\n\t}"} {"path":"downloaded/LinkedInPosition.java","method_name":"getStartYear","content":"/**\n\t * Title of this position\n\t */\npublic int getStartYear() {\n\t\treturn startYear;\n\t}"} {"path":"downloaded/LinkedInPosition.java","method_name":"getEndYear","content":"/**\n\t * Title of this position\n\t */\npublic int getEndYear() {\n\t\treturn endYear;\n\t}"} {"path":"downloaded/LinkedInPosition.java","method_name":"isCurrent","content":"/**\n\t * Title of this position\n\t */\npublic boolean isCurrent() {\n\t\treturn current;\n\t}"} {"path":"downloaded/LinkedInPosition.java","method_name":"getSummary","content":"/**\n\t * Title of this position\n\t */\npublic String getSummary() {\n\t\treturn summary;\n\t}"} {"path":"downloaded/LinkedInPosition.java","method_name":"getTitle","content":"/**\n\t * Title of this position\n\t */\npublic String getTitle() {\n\t\treturn title;\n\t}"} {"path":"downloaded/BinarySortNode.java","method_name":"���","content":"/**\n     * 用二叉排序树的方式添加节点\n     *\n     * @para\ne 待添加二叉排序树的节点\n     */\n    public void add(BinarySortNode node) {\n        if (node == null) {\n            return;\n        }\n        //判断传入的节点与当前子树的根节点的值\n        if (node.value < this.value) {\n            if (this.left == null) {\n                this.left = node;\n            } else {\n                this.left.add(node);\n            }\n        } else {\n            if (this.right == null) {\n                this.right = node;\n    "} {"path":"downloaded/BinarySortNode.java","method_name":" *\n   ","content":"/**\n     * 用二叉排序树的方式添加节点\n     *\n     * @para\n}\n    }\n\n\n    /**\n     *\n     * @param value 查找的节点值\n     * @return 返回找到的节点，如果树中不存在则返回null\n     */\n    public BinarySortNode search(int value){\n        if (value == this.value){//找到了，就是该节点\n            return this;\n        }else if(value < this.value && this.left != null){\n            return this.left.search(val"} {"path":"downloaded/BinarySortNode.java","method_name":" }else {\n   ","content":"/**\n     * 用二叉排序树的方式添加节点\n     *\n     * @para\nsearch(value);\n        }else {\n            return null;\n        }\n    }\n\n    /**\n     *\n     * @param value 要找的节点值\n     * @return 返回value节点的父节点，如果没有则返回null\n     */\n    public BinarySortNode searchParent(int value){\n        if ((this.left != null && this.left.value == value) || (this.right != null && this.right.value == value)){\n            return this;\n        }else if (value < this.value && this.left != null){\n      "} {"path":"downloaded/IlpOverHttpConfig.java","method_name":"ilpOverHttpClient","content":"/**\n   * A Bean for {@link OkHttp3ClientHttpRequestFactory}.\n   *\n   * @param ilpOverHttpConnectionPool   A {@link ConnectionPool} as configured above.\n   * @param defaultConnectTimeoutMillis Applied when connecting a TCP socket to the target host. A value of 0 means no\n   *                                    timeout, otherwise values must be between 1 and {@link Integer#MAX_VALUE} when\n   *                                    converted to milliseconds. If unspecified, defaults to 10000.\n   * @param defaultReadTimeoutMillis    Applied to both the TCP socket and for individual read IO operations. A value of\n   *                                    0 means no timeout, otherwise values must be between 1 and {@link\n   *                                    Integer#MAX_VALUE} when converted to milliseconds. If unspecified, defaults to\n   *                                    60000.\n   * @param defaultWriteTimeoutMillis   Applied to individual write IO operations. A value of 0 means no timeout,\n   *                                    otherwise values must be between 1 and {@link Integer#MAX_VALUE} when converted\n   *                                    to milliseconds. If unspecified, defaults to 60000.\n   *\n   * @return A {@link OkHttp3ClientHttpRequestFactory}.\n   */\n@Bean\n  @Qualifier(ILP_OVER_HTTP)\n  protected OkHttpClient ilpOverHttpClient(\n    @Qualifier(ILP_OVER_HTTP) final ConnectionPool ilpOverHttpConnectionPool,\n    @Value(\"${interledger.connector.ilpOverHttp.connectionDefaults.connectTimeoutMillis:1000}\") final long defaultConnectTimeoutMillis,\n    @Value(\"${interledger.connector.ilpOverHttp.connectionDefaults.readTimeoutMillis:60000}\") final long defaultReadTimeoutMillis,\n    @Value(\"${interledger.connector.ilpOverHttp.connectionDefaults.writeTimeoutMillis:60000}\") final long defaultWriteTimeoutMillis\n  ) {\n    OkHttpClient.Builder builder = new OkHttpClient.Builder();\n    ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS).build();\n\n    builder.connectionSpecs(Arrays.asList(spec, ConnectionSpec.CLEARTEXT));\n    builder.cookieJar(NO_COOKIES);\n\n    builder.connectTimeout(defaultConnectTimeoutMillis, TimeUnit.MILLISECONDS);\n    builder.readTimeout(defaultReadTimeoutMillis, TimeUnit.MILLISECONDS);\n    builder.writeTimeout(defaultWriteTimeoutMillis, TimeUnit.MILLISECONDS);\n\n    return builder.connectionPool(ilpOverHttpConnectionPool).build();\n  }"} {"path":"downloaded/IlpOverHttpConfig.java","method_name":"ilpOverHttpClientHttpRequestFactory","content":"/**\n   * A Bean for {@link OkHttp3ClientHttpRequestFactory}.\n   *\n   * @param okHttpClient A {@link OkHttpClient} to use in the Request factory.\n   *\n   * @return A {@link OkHttp3ClientHttpRequestFactory}.\n   */\n@Bean\n  @Qualifier(ILP_OVER_HTTP)\n  protected OkHttp3ClientHttpRequestFactory ilpOverHttpClientHttpRequestFactory(\n    @Qualifier(ILP_OVER_HTTP) final OkHttpClient okHttpClient\n  ) {\n    return new OkHttp3ClientHttpRequestFactory(okHttpClient);\n  }"} {"path":"downloaded/IlpOverHttpConfig.java","method_name":"ilpOverHttpAccountIdResolver","content":"/**\n   * A Bean for {@link OkHttp3ClientHttpRequestFactory}.\n   *\n   * @param okHttpClient A {@link OkHttpClient} to use in the Request factory.\n   *\n   * @return A {@link OkHttp3ClientHttpRequestFactory}.\n   */\n@Bean\n  protected IlpOverHttpAccountIdResolver ilpOverHttpAccountIdResolver() {\n    return new DefaultAccountIdResolver();\n  }"} {"path":"downloaded/IlpOverHttpConfig.java","method_name":"redactor","content":"/**\n   * A Bean for {@link OkHttp3ClientHttpRequestFactory}.\n   *\n   * @param okHttpClient A {@link OkHttpClient} to use in the Request factory.\n   *\n   * @return A {@link OkHttp3ClientHttpRequestFactory}.\n   */\n@Bean\n  protected Redactor redactor() {\n    return new Redactor();\n  }"} {"path":"downloaded/CFGNode.java","method_name":"getIndex","content":"/**\n     * Gets the index of this node.\n     * \n     * @return index of this node.\n     */\npublic int getIndex() {\n        return this.index;\n    }"} {"path":"downloaded/CFGNode.java","method_name":"getStmt","content":"/**\n     * Gets the first statement of this block (node).\n     * \n     * @return the first statement of this block (node).\n     */\npublic Stmt getStmt() {\n        return this.stmt;\n    }"} {"path":"downloaded/CFGNode.java","method_name":"toString","content":"/**\n     * Gets the first statement of this block (node).\n     * \n     * @return the first statement of this block (node).\n     */\n@Override\n    public String toString() {\n        return \"Index:[\" + this.index + \"] Stmt:[\" + this.stmt + \"]\";\n    }"} {"path":"downloaded/H1.java","method_name":"_class","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 _class(String _class) {\n\t\tsuper._class(_class);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"accesskey","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 accesskey(String accesskey) {\n\t\tsuper.accesskey(accesskey);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"contenteditable","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 contenteditable(Object contenteditable) {\n\t\tsuper.contenteditable(contenteditable);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"dir","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 dir(String dir) {\n\t\tsuper.dir(dir);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"hidden","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 hidden(Object hidden) {\n\t\tsuper.hidden(hidden);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"id","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 id(String id) {\n\t\tsuper.id(id);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"lang","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 lang(String lang) {\n\t\tsuper.lang(lang);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onabort","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onabort(String onabort) {\n\t\tsuper.onabort(onabort);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onblur","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onblur(String onblur) {\n\t\tsuper.onblur(onblur);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"oncancel","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 oncancel(String oncancel) {\n\t\tsuper.oncancel(oncancel);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"oncanplay","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 oncanplay(String oncanplay) {\n\t\tsuper.oncanplay(oncanplay);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"oncanplaythrough","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 oncanplaythrough(String oncanplaythrough) {\n\t\tsuper.oncanplaythrough(oncanplaythrough);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onchange","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onchange(String onchange) {\n\t\tsuper.onchange(onchange);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onclick","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onclick(String onclick) {\n\t\tsuper.onclick(onclick);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"oncuechange","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 oncuechange(String oncuechange) {\n\t\tsuper.oncuechange(oncuechange);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"ondblclick","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 ondblclick(String ondblclick) {\n\t\tsuper.ondblclick(ondblclick);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"ondurationchange","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 ondurationchange(String ondurationchange) {\n\t\tsuper.ondurationchange(ondurationchange);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onemptied","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onemptied(String onemptied) {\n\t\tsuper.onemptied(onemptied);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onended","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onended(String onended) {\n\t\tsuper.onended(onended);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onerror","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onerror(String onerror) {\n\t\tsuper.onerror(onerror);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onfocus","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onfocus(String onfocus) {\n\t\tsuper.onfocus(onfocus);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"oninput","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 oninput(String oninput) {\n\t\tsuper.oninput(oninput);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"oninvalid","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 oninvalid(String oninvalid) {\n\t\tsuper.oninvalid(oninvalid);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onkeydown","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onkeydown(String onkeydown) {\n\t\tsuper.onkeydown(onkeydown);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onkeypress","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onkeypress(String onkeypress) {\n\t\tsuper.onkeypress(onkeypress);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onkeyup","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onkeyup(String onkeyup) {\n\t\tsuper.onkeyup(onkeyup);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onload","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onload(String onload) {\n\t\tsuper.onload(onload);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onloadeddata","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onloadeddata(String onloadeddata) {\n\t\tsuper.onloadeddata(onloadeddata);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onloadedmetadata","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onloadedmetadata(String onloadedmetadata) {\n\t\tsuper.onloadedmetadata(onloadedmetadata);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onloadstart","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onloadstart(String onloadstart) {\n\t\tsuper.onloadstart(onloadstart);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onmousedown","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onmousedown(String onmousedown) {\n\t\tsuper.onmousedown(onmousedown);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onmouseenter","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onmouseenter(String onmouseenter) {\n\t\tsuper.onmouseenter(onmouseenter);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onmouseleave","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onmouseleave(String onmouseleave) {\n\t\tsuper.onmouseleave(onmouseleave);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onmousemove","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onmousemove(String onmousemove) {\n\t\tsuper.onmousemove(onmousemove);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onmouseout","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onmouseout(String onmouseout) {\n\t\tsuper.onmouseout(onmouseout);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onmouseover","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onmouseover(String onmouseover) {\n\t\tsuper.onmouseover(onmouseover);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onmouseup","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onmouseup(String onmouseup) {\n\t\tsuper.onmouseup(onmouseup);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onmousewheel","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onmousewheel(String onmousewheel) {\n\t\tsuper.onmousewheel(onmousewheel);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onpause","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onpause(String onpause) {\n\t\tsuper.onpause(onpause);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onplay","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onplay(String onplay) {\n\t\tsuper.onplay(onplay);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onplaying","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onplaying(String onplaying) {\n\t\tsuper.onplaying(onplaying);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onprogress","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onprogress(String onprogress) {\n\t\tsuper.onprogress(onprogress);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onratechange","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onratechange(String onratechange) {\n\t\tsuper.onratechange(onratechange);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onreset","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onreset(String onreset) {\n\t\tsuper.onreset(onreset);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onresize","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onresize(String onresize) {\n\t\tsuper.onresize(onresize);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onscroll","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onscroll(String onscroll) {\n\t\tsuper.onscroll(onscroll);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onseeked","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onseeked(String onseeked) {\n\t\tsuper.onseeked(onseeked);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onseeking","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onseeking(String onseeking) {\n\t\tsuper.onseeking(onseeking);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onselect","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onselect(String onselect) {\n\t\tsuper.onselect(onselect);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onshow","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onshow(String onshow) {\n\t\tsuper.onshow(onshow);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onstalled","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onstalled(String onstalled) {\n\t\tsuper.onstalled(onstalled);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onsubmit","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onsubmit(String onsubmit) {\n\t\tsuper.onsubmit(onsubmit);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onsuspend","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onsuspend(String onsuspend) {\n\t\tsuper.onsuspend(onsuspend);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"ontimeupdate","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 ontimeupdate(String ontimeupdate) {\n\t\tsuper.ontimeupdate(ontimeupdate);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"ontoggle","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 ontoggle(String ontoggle) {\n\t\tsuper.ontoggle(ontoggle);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onvolumechange","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onvolumechange(String onvolumechange) {\n\t\tsuper.onvolumechange(onvolumechange);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"onwaiting","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 onwaiting(String onwaiting) {\n\t\tsuper.onwaiting(onwaiting);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"spellcheck","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 spellcheck(Object spellcheck) {\n\t\tsuper.spellcheck(spellcheck);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"style","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 style(String style) {\n\t\tsuper.style(style);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"tabindex","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 tabindex(Object tabindex) {\n\t\tsuper.tabindex(tabindex);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"title","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 title(String title) {\n\t\tsuper.title(title);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"translate","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElement */\n\tpublic H1 translate(Object translate) {\n\t\tsuper.translate(translate);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"child","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElementMixed */\n\tpublic H1 child(Object child) {\n\t\tsuper.child(child);\n\t\treturn this;\n\t}"} {"path":"downloaded/H1.java","method_name":"children","content":"/**\n\t * Creates an {@link H1} element with the specified child nodes.\n\t *\n\t * @param children The child nodes.\n\t */\n@Override /* GENERATED - org.apache.juneau.dto.html5.HtmlElementMixed */\n\tpublic H1 children(Object...children) {\n\t\tsuper.children(children);\n\t\treturn this;\n\t}"} {"path":"downloaded/Task.java","method_name":"isInCompetition","content":"/**\n\t * Checks if this task is in given competition\n\t * @param competitionId\n\t * @return \n\t */\npublic boolean isInCompetition(Long competitionId) {\n\t\tQuery query = JPA.em().createQuery(\"SELECT COUNT(c) AS count FROM Competition c JOIN c.tasks t WHERE c.id=:cId AND t.id=:tId\");\n\t\tquery.setParameter(\"cId\", competitionId);\n\t\tquery.setParameter(\"tId\", this.getId());\n\t\treturn ((Long) query.getSingleResult()) > 0;\n\t}"} {"path":"downloaded/Task.java","method_name":"toString","content":"/**\n\t * Checks if this task is in given competition\n\t * @param competitionId\n\t * @return \n\t */\n@Override\n\tpublic String toString() {\n\t\treturn category == null ? name : (category.name + \" - \" + name);\n\t}"} {"path":"downloaded/BukkitModuleWrapper.java","method_name":"getModule","content":"/**\n     * Gets the module object, if it exists.\n     *\n     * @return The module object\n     */\npublic Optional<T> getModule() {\n        return Optional.ofNullable(this.module);\n    }"} {"path":"downloaded/BukkitModuleWrapper.java","method_name":"getModuleUnchecked","content":"/**\n     * Gets the module object, if it exists.\n     *\n     * @return The module object\n     */\npublic T getModuleUnchecked() throws ModuleNotInstantiatedException {\n        if(this.module == null)\n            throw new ModuleNotInstantiatedException();\n        return this.module;\n    }"} {"path":"downloaded/ClusterSanityTest.java","method_name":"testBrokerScaleDown","content":"/**\n   * This test ensures that the cluster is in a consistent state after scaling down the brokers.\n   *\n   * @throws Exception\n   */\n@Test\n  public void testBrokerScaleDown() throws Exception {\n    Tenant tenant =\n        new Tenant.TenantBuilder(TENANT_NAME).setRole(TenantRole.BROKER).setTotalInstances(NEW_NUM_BROKERS).build();\n\n    // Send the 'put' (instead of 'post') request, that updates the tenants instead of creating\n    JSONObject request = tenant.toJSON();\n    sendPutRequest(_controllerRequestURLBuilder.forBrokerTenantCreate(), request.toString());\n\n    TestUtils.waitForCondition(new Function<Void, Boolean>() {\n      @Override\n      public Boolean apply(@Nullable Void aVoid) {\n        return _helixAdmin.getInstancesInClusterWithTag(_clusterName, BROKER_TENANT_NAME).size() == 1;\n      }\n    }, 60_000L, \"Failed to get in a consistent state after scaling down the brokers\");\n  }"} {"path":"downloaded/DiccionarioApp.java","method_name":"lean pre","content":"\n    /**\n    *Pregunta si queremos seguir agregando al diccionario\n    *@return true || false \n \n\n    public boolean pregunta(){\n            int d = JOptionPane.showConfirmDialog(null, \"¿Desea escribir otra palabra?\", \"¿Escribir?\", JOptionPane.YES_NO_OPTION);\n            if (d == 0) {\n              return true;\n            }else if (d == 1) {\n              return false;\n            }\n        return fal"} {"path":"downloaded/DiccionarioApp.java","method_name":"oolean sug","content":"  \n    /**\n     * Pregunta si su palabra esta mal escrita o esta bien, para agregar o no al diccionario \n     * @param c\n     * @return \n\n*/\n    private boolean sugerencia(Palabra c){\n        MaxHeap<Palabra> l = dic.opcionesSuguerencias(c);\n        int d =0;\n            if (!l.esVacio()) {\n              Palabra n = l.elimina();\n              d = JOptionPane.showConfirmDialog(null, \"---Tal vez quizo decir: \\n -\"+n.toString(), \"¿?\", JOptionPane.YES_NO_OPTION);\n              if (d ==0 ) {\n                c.setCadena(n);\n                return false;\n              }else if (d == 1) {\n                return true;\n              }\n            }\n        return fals"} {"path":"downloaded/MonthRangeManager.java","method_name":"e getStartOfInterv","content":"\n\t/**\n\t * @see com.redknee.app.crm.home.calldetail.CallDetailRangeManager#getStartOfInterval(com.redknee.framework.xhome.context.Context, java.util.Date)\n\t \n\n\tpublic Date getStartOfInterval(Context ctx, Date currentDate)\n\t{\n\t\tCalendar cal=Calendar.getInstance();\n\t\tcal.setTime(currentDate);\n\t\tcal.set(Calendar.DAY_OF_MONTH,1);\n\t\tcal.set(Calendar.HOUR_OF_DAY,0);\n\t\tcal.set(Calendar.MINUTE,0);\n\t\tcal.set(Calendar.SECOND,0);\n\t\tcal.set(Calendar.MILLISECOND,0);\n\t\t\n\t\treturn new Date(cal.getTimeInMillis());\n"} {"path":"downloaded/MonthRangeManager.java","method_name":"e getEndOfInterv","content":"\n\t/**\n\t * @see com.redknee.app.crm.home.calldetail.CallDetailRangeManager#getEndOfInterval(com.redknee.framework.xhome.context.Context, java.util.Date)\n\t \n\n\tpublic Date getEndOfInterval(Context ctx, Date currentDate)\n\t{\n\t\tCalendar cal=Calendar.getInstance();\n\t\tcal.setTime(currentDate);\n\t\tcal.set(Calendar.HOUR_OF_DAY,0);\n\t\tcal.set(Calendar.MINUTE,0);\n\t\tcal.set(Calendar.SECOND,0);\n\t\tcal.set(Calendar.MILLISECOND,0);\n\t\tcal.set(Calendar.DAY_OF_MONTH,1);\n\t\tcal.add(Calendar.MONTH,1);\n\t\tcal.add(Calendar.MILLISECOND,-1);\n\t\t\n\t\treturn new Date(cal.getTimeInMillis());\n"} {"path":"downloaded/ElementImportImpl.java","method_name":"eStaticClass","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tprotected EClass eStaticClass() {\n\t\treturn UMLModelPackage.eINSTANCE.getElementImport();\n\t}"} {"path":"downloaded/ElementImportImpl.java","method_name":"getVisibility","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic VisibilityKind getVisibility() {\n\t\treturn visibility;\n\t}"} {"path":"downloaded/ElementImportImpl.java","method_name":"getAlias","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic String getAlias() {\n\t\treturn alias;\n\t}"} {"path":"downloaded/ElementImportImpl.java","method_name":"isSetAlias","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic boolean isSetAlias() {\n\t\treturn aliasESet;\n\t}"} {"path":"downloaded/ElementImportImpl.java","method_name":"getImportedElement","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic PackageableElement getImportedElement() {\n\t\treturn importedElement;\n\t}"} {"path":"downloaded/ElementImportImpl.java","method_name":"basicSetImportedElement","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic NotificationChain basicSetImportedElement(PackageableElement newImportedElement, NotificationChain msgs) {\n\t\tPackageableElement oldImportedElement = importedElement;\n\t\timportedElement = newImportedElement;\n\t\tif (eNotificationRequired()) {\n\t\t\tENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UMLModelPackage.ELEMENT_IMPORT__IMPORTED_ELEMENT, oldImportedElement, newImportedElement);\n\t\t\tif (msgs == null) msgs = notification; else msgs.add(notification);\n\t\t}\n\t\treturn msgs;\n\t}"} {"path":"downloaded/ElementImportImpl.java","method_name":"getImportingNamespace","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\npublic String getImportingNamespace() {\n\t\treturn importingNamespace;\n\t}"} {"path":"downloaded/ElementImportImpl.java","method_name":"eInverseRemove","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tpublic NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {\n\t\tswitch (featureID) {\n\t\t\tcase UMLModelPackage.ELEMENT_IMPORT__IMPORTED_ELEMENT:\n\t\t\t\treturn basicSetImportedElement(null, msgs);\n\t\t}\n\t\treturn super.eInverseRemove(otherEnd, featureID, msgs);\n\t}"} {"path":"downloaded/ElementImportImpl.java","method_name":"eGet","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tpublic Object eGet(int featureID, boolean resolve, boolean coreType) {\n\t\tswitch (featureID) {\n\t\t\tcase UMLModelPackage.ELEMENT_IMPORT__VISIBILITY:\n\t\t\t\treturn getVisibility();\n\t\t\tcase UMLModelPackage.ELEMENT_IMPORT__ALIAS:\n\t\t\t\treturn getAlias();\n\t\t\tcase UMLModelPackage.ELEMENT_IMPORT__IMPORTED_ELEMENT:\n\t\t\t\treturn getImportedElement();\n\t\t\tcase UMLModelPackage.ELEMENT_IMPORT__IMPORTING_NAMESPACE:\n\t\t\t\treturn getImportingNamespace();\n\t\t}\n\t\treturn super.eGet(featureID, resolve, coreType);\n\t}"} {"path":"downloaded/ElementImportImpl.java","method_name":"eSet","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tpublic void eSet(int featureID, Object newValue) {\n\t\tswitch (featureID) {\n\t\t\tcase UMLModelPackage.ELEMENT_IMPORT__VISIBILITY:\n\t\t\t\tsetVisibility((VisibilityKind)newValue);\n\t\t\t\treturn;\n\t\t\tcase UMLModelPackage.ELEMENT_IMPORT__ALIAS:\n\t\t\t\tsetAlias((String)newValue);\n\t\t\t\treturn;\n\t\t\tcase UMLModelPackage.ELEMENT_IMPORT__IMPORTED_ELEMENT:\n\t\t\t\tsetImportedElement((PackageableElement)newValue);\n\t\t\t\treturn;\n\t\t\tcase UMLModelPackage.ELEMENT_IMPORT__IMPORTING_NAMESPACE:\n\t\t\t\tsetImportingNamespace((String)newValue);\n\t\t\t\treturn;\n\t\t}\n\t\tsuper.eSet(featureID, newValue);\n\t}"} {"path":"downloaded/ElementImportImpl.java","method_name":"eUnset","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tpublic void eUnset(int featureID) {\n\t\tswitch (featureID) {\n\t\t\tcase UMLModelPackage.ELEMENT_IMPORT__VISIBILITY:\n\t\t\t\tsetVisibility(VISIBILITY_EDEFAULT);\n\t\t\t\treturn;\n\t\t\tcase UMLModelPackage.ELEMENT_IMPORT__ALIAS:\n\t\t\t\tunsetAlias();\n\t\t\t\treturn;\n\t\t\tcase UMLModelPackage.ELEMENT_IMPORT__IMPORTED_ELEMENT:\n\t\t\t\tsetImportedElement((PackageableElement)null);\n\t\t\t\treturn;\n\t\t\tcase UMLModelPackage.ELEMENT_IMPORT__IMPORTING_NAMESPACE:\n\t\t\t\tsetImportingNamespace(IMPORTING_NAMESPACE_EDEFAULT);\n\t\t\t\treturn;\n\t\t}\n\t\tsuper.eUnset(featureID);\n\t}"} {"path":"downloaded/ElementImportImpl.java","method_name":"eIsSet","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tpublic boolean eIsSet(int featureID) {\n\t\tswitch (featureID) {\n\t\t\tcase UMLModelPackage.ELEMENT_IMPORT__VISIBILITY:\n\t\t\t\treturn visibility != VISIBILITY_EDEFAULT;\n\t\t\tcase UMLModelPackage.ELEMENT_IMPORT__ALIAS:\n\t\t\t\treturn isSetAlias();\n\t\t\tcase UMLModelPackage.ELEMENT_IMPORT__IMPORTED_ELEMENT:\n\t\t\t\treturn importedElement != null;\n\t\t\tcase UMLModelPackage.ELEMENT_IMPORT__IMPORTING_NAMESPACE:\n\t\t\t\treturn IMPORTING_NAMESPACE_EDEFAULT == null ? importingNamespace != null : !IMPORTING_NAMESPACE_EDEFAULT.equals(importingNamespace);\n\t\t}\n\t\treturn super.eIsSet(featureID);\n\t}"} {"path":"downloaded/ElementImportImpl.java","method_name":"toString","content":"/**\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n@Override\n\tpublic String toString() {\n\t\tif (eIsProxy()) return super.toString();\n\n\t\tStringBuffer result = new StringBuffer(super.toString());\n\t\tresult.append(\" (visibility: \");\n\t\tresult.append(visibility);\n\t\tresult.append(\", alias: \");\n\t\tif (aliasESet) result.append(alias); else result.append(\"<unset>\");\n\t\tresult.append(\", importingNamespace: \");\n\t\tresult.append(importingNamespace);\n\t\tresult.append(')');\n\t\treturn result.toString();\n\t}"} {"path":"downloaded/ArticleAdminApi.java","method_name":"eResult pos","content":"/**\n     * 上传文章\n */\n    @PreAuthorize(\"@permission.admin()\")\n    @PostMapping\n    public ResponseResult postArticle(@RequestBody Article article){\n        return articleService.postArticle(article"} {"path":"downloaded/ArticleAdminApi.java","method_name":"ission.admin(","content":"/**\n     * 上传文章\n状态，不是真的删除\n     * 管理员是真的可以删除\n     */\n    @PreAuthorize(\"@permission.admin()\")\n    @DeleteMapping(\"/{articleId}\")\n    public ResponseResult deleteArticle(@PathVariable(\"articleId\")St"} {"path":"downloaded/ArticleAdminApi.java","method_name":"uthorize(\"@pe","content":"/**\n     * 上传文章\ncleService.deleteArticle(articleId);\n    }\n\n    /**\n     * 更新文章内容\n     */\n    @PreAuthorize(\"@permission.admin()\")\n    @PutMapping(\"/{articleId}\")\n    public ResponseResult updateArticle(@PathVariable(\"articleId\")String articleId,@RequestBo"} {"path":"downloaded/ArticleAdminApi.java","method_name":"*/\n    @Pr","content":"/**\n     * 上传文章\narticleService.updateArticle(articleId,article);\n    }\n\n    /**\n     * 获取单篇文章\n     */\n    @PreAuthorize(\"@permission.admin()\")\n    @GetMapping(\"/{articleId}\")\n    public ResponseResult getArticle(@"} {"path":"downloaded/ArticleAdminApi.java","method_name":"     */\n    ","content":"/**\n     * 上传文章\ncleId){\n        return articleService.getArticle(articleId);\n    }\n\n    /**\n     * 获取文章列表\n     */\n    @PreAuthorize(\"@permission.admin()\")\n    @GetMapping(\"/list/{page}/{size}\")\n    public ResponseResult listArticles(@PathVariable(\"page\")int page,\n                                       @PathVariable(\"size\")int size,\n                                       @RequestParam(value = \"state\",required = false)String state,\n                                       @RequestParam(value = \"keyword\",required = false)String keyword,\n                                       @RequestParam(value = \"categoryId\",required"} {"path":"downloaded/ArticleAdminApi.java","method_name":"  }\n\n\n    @PreAuthorize(\"@","content":"/**\n     * 上传文章\ne)String categoryId){\n        return articleService.listArticles(page,size,state,keyword,categoryId);\n    }\n\n\n    @PreAuthorize(\"@permission.admin()\")\n    @DeleteMapping(\"/state/{articleId}\")\n    public ResponseResult deleteArticleByUpdateState(@Path"} {"path":"downloaded/ArticleAdminApi.java","method_name":"  }\n\n    @","content":"/**\n     * 上传文章\nle(\"articleId\")String articleId){\n        return articleService.deleteArticleByUpdateState(articleId);\n    }\n\n    @PreAuthorize(\"@permission.admin()\")\n    @PutMapping(\"/top/{articleId}/{top}\")\n    public ResponseResult topArticle(@PathVariable(\"articleId"} {"path":"downloaded/ServerApp.java","method_name":"post","content":"/**\n     * @param data\n     * @return\n     */\n@RequestMapping(path = \"/experimentData\", method = RequestMethod.POST)\n    public Response post(@RequestParam String data) {\n        LOGGER.info(String.format(\"receive data --->%s\", data));\n        ExperimentData experimentData = new ExperimentData().setDataType(DataType.WALKING)\n                .setTimeStamp(System.currentTimeMillis())\n                .setValue(data);\n        FileHandler.append(experimentData);\n        return Response.success(\"OK\");\n    }"} {"path":"downloaded/AttachmentLayout.java","method_name":"getAttachments","content":"/**\n\t * @return the attachments\n\t */\npublic List<Attachment> getAttachments() {\n\t\treturn attachments;\n\t}"} {"path":"downloaded/AttachmentLayout.java","method_name":"getMessage","content":"/**\n\t * @return the message\n\t */\npublic Message getMessage() {\n\t\treturn message;\n\t}"} {"path":"downloaded/AttachmentLayout.java","method_name":"getAttachPanelWidth","content":"/**\n\t * @return the attachPanelWidth\n\t */\npublic String getAttachPanelWidth() {\n\t\treturn attachPanelWidth;\n\t}"} {"path":"downloaded/AttachmentLayout.java","method_name":"getAttachment","content":"/**\n\t\t * @return the attachment\n\t\t */\npublic Attachment getAttachment() {\n\t\t\treturn attachment;\n\t\t}"} {"path":"downloaded/AttachmentLayout.java","method_name":"getPi","content":"/**\n\t\t * @return the pi\n\t\t */\npublic ProgressIndicator getPi() {\n\t\t\treturn pi;\n\t\t}"} {"path":"downloaded/AttachmentLayout.java","method_name":"getAttachment","content":"/**\n\t\t * @return the attachment\n\t\t */\npublic Attachment getAttachment() {\n\t\t\treturn attachment;\n\t\t}"} {"path":"downloaded/ModelDataUtils.java","method_name":"List<SingleModelConditionDTO> ge","content":"\n\n    /**\n     * 获取单个模型条件\n     *\n     * @param modelLables 模型label\n * @return 条件\n     */\n    public static List<SingleModelConditionDTO> getSingleModelConditionsByLabels(List<String> modelLables) {\n        List<SingleModelConditionDTO> result = new ArrayList<>();\n        modelLables.forEach(label -> result.add(getSingleModelConditionByLabel(label)));"} {"path":"downloaded/ModelDataUtils.java","method_name":"turn 条件\n     */\n    public","content":"\n\n    /**\n     * 获取单个模型条件\n     *\n     * @param modelLables 模型label\naram modelLable 模型label\n     * @return 条件\n     */\n    public static SingleModelConditionDTO getSingleModelConditionByLabel(String modelLable) {\n        SingleModelConditionDTO conditionDTO = new SingleModelConditionDTO();\n        conditionDT"} {"path":"downloaded/ModelDataUtils.java","method_name":"列表\n     * @","content":"\n\n    /**\n     * 获取单个模型条件\n     *\n     * @param modelLables 模型label\n @param datas 数据列表\n     * @param <T>   类型\n     * @return 目标数据列表\n     */\n    public static <T> T getValueFromMap(String key, Map<String, Object> dat"} {"path":"downloaded/ModelDataUtils.java","method_name":"    * 将�","content":"\n\n    /**\n     * 获取单个模型条件\n     *\n     * @param modelLables 模型label\ne;\n    }\n\n    /**\n     * 将时间戳转换成时间\n     *\n     * @param timestamp 时间"} {"path":"downloaded/ModelDataUtils.java","method_name":"   /**\n  ","content":"\n\n    /**\n     * 获取单个模型条件\n     *\n     * @param modelLables 模型label\nimestamp);\n    }\n\n    /**\n     * 从数据字典中获取时间\n     *\n     * @param key   键\n     * @param datas 数据字典\n     * @return 时间\n     */\n    public static Date getDateBy(String key, Map<String, Object> datas) {\n        Object value ="} {"path":"downloaded/ModelDataUtils.java","method_name":" /**\n     * 获取按照id查询","content":"\n\n    /**\n     * 获取单个模型条件\n     *\n     * @param modelLables 模型label\n getDateFrom((Long) value);\n    }\n\n    /**\n     * 获取按照id查询的条件\n     *\n     * @param modelLabel 模型label\n     * @param ids        id列表\n     * @return 条件\n     */\n    public static SingleModelConditionDTO getSingleModelConditionDTOForIds(\n            String modelLabel, List<Integer> ids) {\n        SingleModelConditionDTO idCondition = new SingleModelConditionDTO();\n        List<ConditionBlock> expressions = new ArrayList<>();\n        ConditionBlock conditionBlock = new ConditionBlock();\n        conditionBlock.setProp(\"id\");\n        conditionBlock.setLimit(ids);\n        conditionBlock.setOperator(\"IN\");\n        expressions.add(conditionBlock);\n "} {"path":"downloaded/ModelDataUtils.java","method_name":"dition.modelLabel = modelLabel;","content":"\n\n    /**\n     * 获取单个模型条件\n     *\n     * @param modelLables 模型label\nressions(expressions);\n        idCondition.modelLabel = modelLabel;\n\n        return idCondition;\n    }\n\n    /**\n     * 根据id获取扁平查询条件\n     *\n     * @param ids 模型id\n     * @return 条件\n     */\n    public static FlatQueryConditionDTO getFlatQueryConditionDTOForRoot(List<Integer> ids) {\n        FlatQueryConditionDTO rootCondition = new FlatQueryConditionDTO();\n        rootCondition.filter = new ConditionBlockCompose();\n        List<ConditionBlock> expressions = new ArrayList<>();\n        ConditionBlock conditionBlock = new ConditionBlock();\n        conditionBlock.setProp(\"i"} {"path":"downloaded/ModelDataUtils.java","method_name":"* @param previous","content":"\n\n    /**\n     * 获取单个模型条件\n     *\n     * @param modelLables 模型label\nId    要移动的父id\n     * @param previousLabel 要移动的父label\n     * @param followId      要移动到的父id\n     * @param followLabel   要移动到的父label\n     * @param tobeId        要移动的子id\n     * @param tobeLabel     要移动的子label\n     * @return\n     */\n    public static MoveToOtherDTO setMoveToOtherDTO(Long previousId, String previousLabel, Long followId, String followLabel,\n                                                   Long tobeId, String tobeLabel) {\n        MoveToOtherDTO moveToOtherDTO ="} {"path":"downloaded/AbsRestClient.java","method_name":" @param templat","content":"/**\n\t * 指定模版单发\n\t * @param sid\t\t\t用户的账号唯一标识\n\t * @param token\t\t\t用户密钥\n\t * @param appid\t\t\t创建应用时系统分配的唯一标识\n\t * @param templateid\t模板ID\n\t * @param temp\t\t\t模板中的替\ne\t\t\t模版类型\n\t * @param template_name\t模版名称\n\t * @param autograph\t\t短信签名\n\t * @param content\t\t短信内容\n\t * @return\n\t */\n\tpub"} {"path":"downloaded/UmTRoleTask.java","method_name":"String up","content":"\n  \t/** 创�\nis;\n  \t/** 更新人代码 **/\n\tprivate String updaterCode;\n  \t/** 修改日�"} {"path":"downloaded/UmTRoleTask.java","method_name":"/\n\t@Colum","content":"\n  \t/** 创�\n String flag;\n\t\n\t/**getter setter方法*/\n\t@Column(name = \"RoleId\")\n\tpublic St"} {"path":"downloaded/UmTRoleTask.java","method_name":"\t}\n\t@Col","content":"\n  \t/** 创�\nring roleId) {\n\t\tthis.roleId = roleId;\n\t}\n\t@Column(name = \"TaskID\")\n\tpublic"} {"path":"downloaded/UmTRoleTask.java","method_name":"blic String g","content":"\n  \t/** 创�\nskID(String taskID) {\n\t\tthis.taskID = taskID;\n\t}\n\t@Column(name = \"Scope\")\n\tpublic String getScope() {\n\t\treturn this.scope;\n"} {"path":"downloaded/UmTRoleTask.java","method_name":"\")\n\tpublic Dat","content":"\n  \t/** 创�\nalType.TIMESTAMP)\n\t@Column(name = \"ExpireDate\")\n\tpublic Date getExpireDate() {\n\t\treturn this."} {"path":"downloaded/UmTRoleTask.java","method_name":"us() {\n\t\tretur","content":"\n  \t/** 创�\nte;\n\t}\n\t@Column(name = \"ValidStatus\")\n\tpublic String getValidStatus() {\n\t\treturn this.validStatus;\n\t}\n\t\n\tpublic v"} {"path":"downloaded/UmTRoleTask.java","method_name":"\n\tpublic void setCr","content":"\n  \t/** 创�\n = \"CreatorCode\" , updatable = false)\n\tpublic String getCreatorCode() {\n\t\treturn this.creatorCode;\n\t}\n\t\n\tpublic void setCreatorCode(String creatorCode) {\n\t\tthis."} {"path":"downloaded/UmTRoleTask.java","method_name":"ertTimeForHis;","content":"\n  \t/** 创�\nle = false)\n\tpublic Date getInsertTimeForHis() {\n\t\treturn this.insertTimeForHis;\n\t}\n\t\n\tpublic void setInsertTimeFo"} {"path":"downloaded/UmTRoleTask.java","method_name":"public void setUpdat","content":"\n  \t/** 创�\n= \"UpdaterCode\" , insertable = false)\n\tpublic String getUpdaterCode() {\n\t\treturn this.updaterCode;\n\t}\n\t\n\tpublic void setUpdaterCode(String updaterCode) {\n\t\tthis.upda"} {"path":"downloaded/UmTRoleTask.java","method_name":"s() {\n\t","content":"\n  \t/** 创�\nalse)\n\tpublic Date getOperateTimeForHis() {\n\t\treturn this.operateTimeFor"} {"path":"downloaded/CreateDatasetActivity.java","method_name":"saveDataset","content":"/**\n\t * A placeholder fragment containing a simple view.\n\t */\npublic void saveDataset(View view) {\n\t\tString datasetName = ((EditText)this.findViewById(R.id.datasetName)).getText().toString();\n\t\tString description = ((EditText)this.findViewById(R.id.description)).getText().toString();\n\t\t\n\t\t/* Create new assets file */\n\t\tboolean isSuccesfull = Storage.createNewDataset(datasetName, description, usecase, this);\n\t\t\n\t\tif (!isSuccesfull) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tthis.finish();\n\t}"} {"path":"downloaded/Kampf.java","method_name":"g intToStri","content":"/**\n    * Konstruktor für Objekte der Klasse Kampf\n    *\n  public String intToString(int pInt){\n       Integer obj = new Integer(pInt);\n       return obj.toString();\n   "} {"path":"downloaded/BlogTag.java","method_name":"getTagId","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column blog_tag.TAG_ID\n     *\n     * @return the value of blog_tag.TAG_ID\n     *\n     * @mbggenerated\n     */\npublic String getTagId() {\n        return tagId;\n    }"} {"path":"downloaded/BlogTag.java","method_name":"getTagName","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column blog_tag.TAG_NAME\n     *\n     * @return the value of blog_tag.TAG_NAME\n     *\n     * @mbggenerated\n     */\npublic String getTagName() {\n        return tagName;\n    }"} {"path":"downloaded/BlogTag.java","method_name":"getCreateTime","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column blog_tag.CREATE_TIME\n     *\n     * @return the value of blog_tag.CREATE_TIME\n     *\n     * @mbggenerated\n     */\npublic Date getCreateTime() {\n        return createTime;\n    }"} {"path":"downloaded/BlogTag.java","method_name":"getIndex","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method returns the value of the database column blog_tag.INDEX\n     *\n     * @return the value of blog_tag.INDEX\n     *\n     * @mbggenerated\n     */\npublic Integer getIndex() {\n        return index;\n    }"} {"path":"downloaded/BlogTag.java","method_name":"equals","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method corresponds to the database table blog_tag\n     *\n     * @mbggenerated\n     */\n@Override\n    public boolean equals(Object that) {\n        if (this == that) {\n            return true;\n        }\n        if (that == null) {\n            return false;\n        }\n        if (getClass() != that.getClass()) {\n            return false;\n        }\n        BlogTag other = (BlogTag) that;\n        return (this.getTagId() == null ? other.getTagId() == null : this.getTagId().equals(other.getTagId()))\n            && (this.getTagName() == null ? other.getTagName() == null : this.getTagName().equals(other.getTagName()))\n            && (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))\n            && (this.getIndex() == null ? other.getIndex() == null : this.getIndex().equals(other.getIndex()));\n    }"} {"path":"downloaded/BlogTag.java","method_name":"hashCode","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method corresponds to the database table blog_tag\n     *\n     * @mbggenerated\n     */\n@Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((getTagId() == null) ? 0 : getTagId().hashCode());\n        result = prime * result + ((getTagName() == null) ? 0 : getTagName().hashCode());\n        result = prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());\n        result = prime * result + ((getIndex() == null) ? 0 : getIndex().hashCode());\n        return result;\n    }"} {"path":"downloaded/BlogTag.java","method_name":"toString","content":"/**\n     * This method was generated by MyBatis Generator.\n     * This method corresponds to the database table blog_tag\n     *\n     * @mbggenerated\n     */\n@Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(getClass().getSimpleName());\n        sb.append(\" [\");\n        sb.append(\"Hash = \").append(hashCode());\n        sb.append(\", tagId=\").append(tagId);\n        sb.append(\", tagName=\").append(tagName);\n        sb.append(\", createTime=\").append(createTime);\n        sb.append(\", index=\").append(index);\n        sb.append(\", serialVersionUID=\").append(serialVersionUID);\n        sb.append(\"]\");\n        return sb.toString();\n    }"} {"path":"downloaded/CommitCmd.java","method_name":"getName","content":"/**\n     * Create the commit for the configuration\n     *\n     * @param message\n     *        the message of the commit\n     *\n     * @throws RepositoryException\n     *         if the storage directory of the repository not exists\n     *\n     * @throws IOException\n     *         if an I/O error occurs reading from the stream\n     *\n     * @throws ClassNotFoundException\n     *         if class Configuration is not found\n     *\n     * @throws ConfigurationException\n     *         if there are no new files in the index\n     */\npublic String getName() {\n        return \"commit\";\n    }"} {"path":"downloaded/DayNightController.java","method_name":"resetTimer","content":"/**\n     * Resets the timer for a specified value\n     *\n     * @return the specified value that the timer is reset to.\n     */\nprivate float resetTimer() {\n        final float COUNTDOWNTIME = 10;\n        return COUNTDOWNTIME;\n    }"} {"path":"downloaded/DayNightController.java","method_name":"randomIntRange","content":"/**\n     * Returns a random int in range and it retuns negativ numbers if input is\n     * negativ.\n     *\n     * @param min Minimun int.\n     * @param max Maximun int.\n     * @return an int between min and max.\n     */\nprivate int randomIntRange(int min, int max) {\n        Random random = new Random();\n        if (min < 0 || max < 0) {\n            return (random.nextInt(Math.abs(max - min)) + Math.abs(min) + 1) * -1;\n        }\n        return random.nextInt(max - min) + min + 1;\n    }"} {"path":"downloaded/FrmCadastroUsuario.java","method_name":"r moverUs","content":"/**\n\t * \n\t */\n\n\tprotected User moverUser() {\n\t\tUser user = new User();\n\t\tuser.setLogin(txtLogin.getText());\n\t\tuser.setNome(txtNome.getText());\n\t\tString passsowrd = new String( txtSenha.getPassword() ); \n\t\tuser.setPassoword(passsowrd);\n\t\treturn user;\n"}